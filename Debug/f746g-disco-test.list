
f746g-disco-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023970  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb4  08023b40  08023b40  00033b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000485e  08026af4  08026af4  00036af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00093cc4  0802b354  0802b354  0003b354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000028  080bf018  080bf018  000cf018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080bf040  080bf040  000d00e0  2**0
                  CONTENTS
  7 .ARM          00000008  080bf040  080bf040  000cf040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080bf048  080bf048  000d00e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000010  080bf048  080bf048  000cf048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080bf058  080bf058  000cf058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000e0  20000000  080bf060  000d0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c650  200000e0  080bf140  000d00e0  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000c730  080bf140  000dc730  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000d00e0  2**0
                  CONTENTS, READONLY
 15 .debug_info   000c0a97  00000000  00000000  000d0110  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0001bff1  00000000  00000000  00190ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005348  00000000  00000000  001acb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00006798  00000000  00000000  001b1ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00044538  00000000  00000000  001b8678  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00061bea  00000000  00000000  001fcbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0014454a  00000000  00000000  0025e79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003a2ce4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000132cc  00000000  00000000  003a2de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    00017c48  00000000  00000000  003b60ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08023b28 	.word	0x08023b28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	08023b28 	.word	0x08023b28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f016 fd62 	bl	8017084 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 fa7a 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 fa5e 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f016 fd1d 	bl	8017048 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa44 	bl	8000ad8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f016 fce7 	bl	8017048 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000fc 	.word	0x200000fc

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f016 fc34 	bl	8017048 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f016 fc26 	bl	8017048 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f016 fc0b 	bl	8017048 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f016 fbfd 	bl	8017048 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000fc 	.word	0x200000fc
 8000890:	20000100 	.word	0x20000100

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f016 fbb0 	bl	8017014 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f016 fb9c 	bl	8017014 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f016 fb8d 	bl	8017048 <TS_IO_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4603      	mov	r3, r0
 8000952:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <ft5336_TS_GetTouchInfo+0x158>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	461a      	mov	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4293      	cmp	r3, r2
 800096e:	f080 8090 	bcs.w	8000a92 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d85d      	bhi.n	8000a34 <ft5336_TS_GetTouchInfo+0xf0>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <ft5336_TS_GetTouchInfo+0x3c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a9 	.word	0x080009a9
 8000984:	080009b7 	.word	0x080009b7
 8000988:	080009c5 	.word	0x080009c5
 800098c:	080009d3 	.word	0x080009d3
 8000990:	080009e1 	.word	0x080009e1
 8000994:	080009ef 	.word	0x080009ef
 8000998:	080009fd 	.word	0x080009fd
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	08000a19 	.word	0x08000a19
 80009a4:	08000a27 	.word	0x08000a27
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009ac:	2307      	movs	r3, #7
 80009ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009b0:	2308      	movs	r3, #8
 80009b2:	757b      	strb	r3, [r7, #21]
      break;
 80009b4:	e03f      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009b6:	2309      	movs	r3, #9
 80009b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009ba:	230d      	movs	r3, #13
 80009bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80009be:	230e      	movs	r3, #14
 80009c0:	757b      	strb	r3, [r7, #21]
      break;
 80009c2:	e038      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80009c4:	230f      	movs	r3, #15
 80009c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80009c8:	2313      	movs	r3, #19
 80009ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80009cc:	2314      	movs	r3, #20
 80009ce:	757b      	strb	r3, [r7, #21]
      break;
 80009d0:	e031      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80009d2:	2315      	movs	r3, #21
 80009d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009d6:	2319      	movs	r3, #25
 80009d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009da:	231a      	movs	r3, #26
 80009dc:	757b      	strb	r3, [r7, #21]
      break;
 80009de:	e02a      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009e0:	231b      	movs	r3, #27
 80009e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009e4:	231f      	movs	r3, #31
 80009e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009e8:	2320      	movs	r3, #32
 80009ea:	757b      	strb	r3, [r7, #21]
      break;
 80009ec:	e023      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009ee:	2321      	movs	r3, #33	; 0x21
 80009f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009f2:	2325      	movs	r3, #37	; 0x25
 80009f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009f6:	2326      	movs	r3, #38	; 0x26
 80009f8:	757b      	strb	r3, [r7, #21]
      break;
 80009fa:	e01c      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009fc:	2327      	movs	r3, #39	; 0x27
 80009fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a00:	232b      	movs	r3, #43	; 0x2b
 8000a02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a04:	232c      	movs	r3, #44	; 0x2c
 8000a06:	757b      	strb	r3, [r7, #21]
      break;
 8000a08:	e015      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a0a:	232d      	movs	r3, #45	; 0x2d
 8000a0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a0e:	2331      	movs	r3, #49	; 0x31
 8000a10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	757b      	strb	r3, [r7, #21]
      break;
 8000a16:	e00e      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a18:	2333      	movs	r3, #51	; 0x33
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a1c:	2337      	movs	r3, #55	; 0x37
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a20:	2338      	movs	r3, #56	; 0x38
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e007      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a26:	2339      	movs	r3, #57	; 0x39
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a2a:	233d      	movs	r3, #61	; 0x3d
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a2e:	233e      	movs	r3, #62	; 0x3e
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e000      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a34:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f016 fb02 	bl	8017048 <TS_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	119b      	asrs	r3, r3, #6
 8000a4e:	f003 0203 	and.w	r2, r3, #3
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	7dba      	ldrb	r2, [r7, #22]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f016 faf2 	bl	8017048 <TS_IO_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a68:	7d3b      	ldrb	r3, [r7, #20]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7d7a      	ldrb	r2, [r7, #21]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f016 fae4 	bl	8017048 <TS_IO_Read>
 8000a80:	4603      	mov	r3, r0
 8000a82:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a84:	7d3b      	ldrb	r3, [r7, #20]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	111b      	asrs	r3, r3, #4
 8000a8a:	f003 0204 	and.w	r2, r3, #4
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000fc 	.word	0x200000fc

08000aa0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200000fc 	.word	0x200000fc

08000ab8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000abc:	f7ff fff0 	bl	8000aa0 <ft5336_Get_I2C_InitializedStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000ac6:	f016 fa9b 	bl	8017000 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000fc 	.word	0x200000fc

08000ad8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 fb8c 	bl	8001216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f019 fcb4 	bl	801a46c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f018 fe3a 	bl	801977c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000028 	.word	0x20000028
 8000b34:	2000bba0 	.word	0x2000bba0

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2000bba0 	.word	0x2000bba0

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_Delay+0x40>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffde 	bl	8000b38 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000028 	.word	0x20000028

08000b94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e031      	b.n	8000c0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d109      	bne.n	8000bc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f018 fe0a 	bl	80197cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d116      	bne.n	8000c00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_Init+0x84>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	f043 0202 	orr.w	r2, r3, #2
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f94e 	bl	8000e84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f023 0303 	bic.w	r3, r3, #3
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfe:	e001      	b.n	8000c04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	ffffeefd 	.word	0xffffeefd

08000c1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1c>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e115      	b.n	8000e64 <HAL_ADC_ConfigChannel+0x248>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b09      	cmp	r3, #9
 8000c46:	d935      	bls.n	8000cb4 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68d9      	ldr	r1, [r3, #12]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b1e      	subs	r3, #30
 8000c5e:	2207      	movs	r2, #7
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43da      	mvns	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a7f      	ldr	r2, [pc, #508]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d10a      	bne.n	8000c8e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68d9      	ldr	r1, [r3, #12]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	061a      	lsls	r2, r3, #24
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	e035      	b.n	8000cfa <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68d9      	ldr	r1, [r3, #12]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4403      	add	r3, r0
 8000ca6:	3b1e      	subs	r3, #30
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	e022      	b.n	8000cfa <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6919      	ldr	r1, [r3, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2207      	movs	r2, #7
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6919      	ldr	r1, [r3, #16]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4403      	add	r3, r0
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d824      	bhi.n	8000d4c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	3b05      	subs	r3, #5
 8000d14:	221f      	movs	r2, #31
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	400a      	ands	r2, r1
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b05      	subs	r3, #5
 8000d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4a:	e04c      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b0c      	cmp	r3, #12
 8000d52:	d824      	bhi.n	8000d9e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	3b23      	subs	r3, #35	; 0x23
 8000d66:	221f      	movs	r2, #31
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	400a      	ands	r2, r1
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3b23      	subs	r3, #35	; 0x23
 8000d90:	fa00 f203 	lsl.w	r2, r0, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d9c:	e023      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	3b41      	subs	r3, #65	; 0x41
 8000db0:	221f      	movs	r2, #31
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b41      	subs	r3, #65	; 0x41
 8000dda:	fa00 f203 	lsl.w	r2, r0, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_ADC_ConfigChannel+0x258>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d109      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1e8>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b12      	cmp	r3, #18
 8000df6:	d105      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e02:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <HAL_ADC_ConfigChannel+0x258>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d125      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d003      	beq.n	8000e20 <HAL_ADC_ConfigChannel+0x204>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d11c      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e2a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d111      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_ADC_ConfigChannel+0x260>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_ADC_ConfigChannel+0x264>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	0c9a      	lsrs	r2, r3, #18
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f9      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	10000012 	.word	0x10000012
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40012300 	.word	0x40012300
 8000e7c:	20000060 	.word	0x20000060
 8000e80:	431bde83 	.word	0x431bde83

08000e84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000e8c:	4b78      	ldr	r3, [pc, #480]	; (8001070 <ADC_Init+0x1ec>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a77      	ldr	r2, [pc, #476]	; (8001070 <ADC_Init+0x1ec>)
 8000e92:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000e98:	4b75      	ldr	r3, [pc, #468]	; (8001070 <ADC_Init+0x1ec>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4973      	ldr	r1, [pc, #460]	; (8001070 <ADC_Init+0x1ec>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6859      	ldr	r1, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	021a      	lsls	r2, r3, #8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6859      	ldr	r1, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6899      	ldr	r1, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	4a58      	ldr	r2, [pc, #352]	; (8001074 <ADC_Init+0x1f0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d022      	beq.n	8000f5e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6899      	ldr	r1, [r3, #8]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6899      	ldr	r1, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	e00f      	b.n	8000f7e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0202 	bic.w	r2, r2, #2
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6899      	ldr	r1, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	005a      	lsls	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01b      	beq.n	8000fe4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	035a      	lsls	r2, r3, #13
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	e007      	b.n	8000ff4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	3b01      	subs	r3, #1
 8001010:	051a      	lsls	r2, r3, #20
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6899      	ldr	r1, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001036:	025a      	lsls	r2, r3, #9
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6899      	ldr	r1, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	029a      	lsls	r2, r3, #10
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	609a      	str	r2, [r3, #8]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40012300 	.word	0x40012300
 8001074:	0f000001 	.word	0x0f000001

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0000 	.word	0x05fa0000

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db10      	blt.n	800114c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <__NVIC_DisableIRQ+0x40>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	3320      	adds	r3, #32
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001148:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff2a 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff3f 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb1 	bl	80011b0 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff80 	bl	800115c <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff32 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff42 	bl	8001118 <__NVIC_DisableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e054      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7f5b      	ldrb	r3, [r3, #29]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f018 fade 	bl	8019880 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_CRC_Init+0xc4>)
 80012d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0218 	bic.w	r2, r2, #24
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e00c      	b.n	8001306 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	461a      	mov	r2, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f834 	bl	8001364 <HAL_CRCEx_Polynomial_Set>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e028      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	e004      	b.n	8001324 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6912      	ldr	r2, [r2, #16]
 8001322:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	04c11db7 	.word	0x04c11db7

08001364 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001374:	231f      	movs	r3, #31
 8001376:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001378:	bf00      	nop
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	613a      	str	r2, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d009      	beq.n	8001398 <HAL_CRCEx_Polynomial_Set+0x34>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b18      	cmp	r3, #24
 800139c:	d846      	bhi.n	800142c <HAL_CRCEx_Polynomial_Set+0xc8>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	08001433 	.word	0x08001433
 80013a8:	0800142d 	.word	0x0800142d
 80013ac:	0800142d 	.word	0x0800142d
 80013b0:	0800142d 	.word	0x0800142d
 80013b4:	0800142d 	.word	0x0800142d
 80013b8:	0800142d 	.word	0x0800142d
 80013bc:	0800142d 	.word	0x0800142d
 80013c0:	0800142d 	.word	0x0800142d
 80013c4:	08001421 	.word	0x08001421
 80013c8:	0800142d 	.word	0x0800142d
 80013cc:	0800142d 	.word	0x0800142d
 80013d0:	0800142d 	.word	0x0800142d
 80013d4:	0800142d 	.word	0x0800142d
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	0800142d 	.word	0x0800142d
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	08001415 	.word	0x08001415
 80013e8:	0800142d 	.word	0x0800142d
 80013ec:	0800142d 	.word	0x0800142d
 80013f0:	0800142d 	.word	0x0800142d
 80013f4:	0800142d 	.word	0x0800142d
 80013f8:	0800142d 	.word	0x0800142d
 80013fc:	0800142d 	.word	0x0800142d
 8001400:	0800142d 	.word	0x0800142d
 8001404:	08001409 	.word	0x08001409
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d913      	bls.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001412:	e010      	b.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b07      	cmp	r3, #7
 8001418:	d90f      	bls.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800141e:	e00c      	b.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d90b      	bls.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800142a:	e008      	b.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	75fb      	strb	r3, [r7, #23]
      break;
 8001430:	e006      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001432:	bf00      	nop
 8001434:	e004      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001436:	bf00      	nop
 8001438:	e002      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 0118 	bic.w	r1, r3, #24
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e062      	b.n	8001548 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f018 fa16 	bl	80198c0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_DCMI_Init+0xe0>)
 80014a8:	400b      	ands	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6819      	ldr	r1, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014d8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014f0:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d112      	bne.n	8001528 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7f5b      	ldrb	r3, [r3, #29]
 800150c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800150e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7f9b      	ldrb	r3, [r3, #30]
 8001514:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001516:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7fdb      	ldrb	r3, [r3, #31]
 800151e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001524:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001526:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 021e 	orr.w	r2, r2, #30
 8001536:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	ffe0f007 	.word	0xffe0f007

08001554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_DMA_Start_IT+0x26>
 8001576:	2302      	movs	r3, #2
 8001578:	e048      	b.n	800160c <HAL_DMA_Start_IT+0xb8>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d137      	bne.n	80015fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f842 	bl	800162c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	223f      	movs	r2, #63	; 0x3f
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0216 	orr.w	r2, r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0208 	orr.w	r2, r2, #8
 80015ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e005      	b.n	800160a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001606:	2302      	movs	r3, #2
 8001608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800160a:	7dfb      	ldrb	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b40      	cmp	r3, #64	; 0x40
 8001658:	d108      	bne.n	800166c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800166a:	e007      	b.n	800167c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e039      	b.n	800170e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f016 fbce 	bl	8017e50 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	f023 0107 	bic.w	r1, r3, #7
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_DMA2D_Init+0x90>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68d1      	ldr	r1, [r2, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	ffffc000 	.word	0xffffc000

0800171c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e05f      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_DMA2D_DeInit+0xdc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02e      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d107      	bne.n	8001758 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8c1 	bl	80018d0 <HAL_DMA2D_Abort>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d021      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e04a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b20      	cmp	r3, #32
 8001764:	d108      	bne.n	8001778 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f8f7 	bl	800195c <HAL_DMA2D_CLUTLoading_Abort>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d011      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e03a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b20      	cmp	r3, #32
 8001784:	d108      	bne.n	8001798 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8001786:	2101      	movs	r1, #1
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8e7 	bl	800195c <HAL_DMA2D_CLUTLoading_Abort>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e02a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	223f      	movs	r2, #63	; 0x3f
 80017a6:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f016 fb5d 	bl	8017e90 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_DMA2D_Start_IT+0x1c>
 8001814:	2302      	movs	r3, #2
 8001816:	e020      	b.n	800185a <HAL_DMA2D_Start_IT+0x5e>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa84 	bl	8001d40 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001846:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af02      	add	r7, sp, #8
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_DMA2D_BlendingStart_IT+0x1c>
 800187a:	2302      	movs	r3, #2
 800187c:	e024      	b.n	80018c8 <HAL_DMA2D_BlendingStart_IT+0x66>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fa4d 	bl	8001d40 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80018b4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0205 	bic.w	r2, r3, #5
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0204 	orr.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff f924 	bl	8000b38 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80018f2:	e017      	b.n	8001924 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80018f4:	f7ff f920 	bl	8000b38 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001902:	d90f      	bls.n	8001924 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e017      	b.n	8001954 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e0      	bne.n	80018f4 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8001940:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3324      	adds	r3, #36	; 0x24
 800196c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d103      	bne.n	800198c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	331c      	adds	r3, #28
 800198a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800198c:	f7ff f8d4 	bl	8000b38 <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8001992:	e017      	b.n	80019c4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8001994:	f7ff f8d0 	bl	8000b38 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019a2:	d90f      	bls.n	80019c4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e016      	b.n	80019f2 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e1      	bne.n	8001994 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80019de:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d026      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d021      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a34:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d026      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d021      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2220      	movs	r2, #32
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d026      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d021      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	f043 0204 	orr.w	r2, r3, #4
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2204      	movs	r2, #4
 8001b44:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f853 	bl	8001bf2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d024      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01f      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2202      	movs	r2, #2
 8001b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01f      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01a      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f80e 	bl	8001c06 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA2D_ConfigLayer+0x20>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e079      	b.n	8001d30 <HAL_DMA2D_ConfigLayer+0x114>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	3318      	adds	r3, #24
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_DMA2D_ConfigLayer+0x120>)
 8001c68:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b0a      	cmp	r3, #10
 8001c70:	d003      	beq.n	8001c7a <HAL_DMA2D_ConfigLayer+0x5e>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	d107      	bne.n	8001c8a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e005      	b.n	8001c96 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d120      	bne.n	8001cde <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	ea02 0103 	and.w	r1, r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d003      	beq.n	8001cce <HAL_DMA2D_ConfigLayer+0xb2>
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d127      	bne.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
 8001cdc:	e01f      	b.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	ea02 0103 	and.w	r1, r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b0a      	cmp	r3, #10
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA2D_ConfigLayer+0xf4>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d106      	bne.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d1c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	ff03000f 	.word	0xff03000f

08001d40 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d78:	d174      	bne.n	8001e64 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d80:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d88:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d90:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d108      	bne.n	8001db2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	e053      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	e048      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d111      	bne.n	8001df4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	0cdb      	lsrs	r3, r3, #19
 8001dd4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	0a9b      	lsrs	r3, r3, #10
 8001dda:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	02db      	lsls	r3, r3, #11
 8001dea:	4313      	orrs	r3, r2
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e032      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d117      	bne.n	8001e2c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	0fdb      	lsrs	r3, r3, #31
 8001e00:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	0cdb      	lsrs	r3, r3, #19
 8001e06:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	03db      	lsls	r3, r3, #15
 8001e22:	4313      	orrs	r3, r2
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	e016      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	0f1b      	lsrs	r3, r3, #28
 8001e30:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	0d1b      	lsrs	r3, r3, #20
 8001e36:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	0b1b      	lsrs	r3, r3, #12
 8001e3c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	011a      	lsls	r2, r3, #4
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	4313      	orrs	r3, r2
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001e62:	e003      	b.n	8001e6c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	372c      	adds	r7, #44	; 0x2c
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001e88:	4ba9      	ldr	r3, [pc, #676]	; (8002130 <HAL_ETH_Init+0x2b8>)
 8001e8a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e183      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f017 fdc2 	bl	8019a3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	4a9d      	ldr	r2, [pc, #628]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec4:	4b9b      	ldr	r3, [pc, #620]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ed0:	4b99      	ldr	r3, [pc, #612]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a98      	ldr	r2, [pc, #608]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eda:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4994      	ldr	r1, [pc, #592]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7fe fe19 	bl	8000b38 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f08:	e011      	b.n	8001f2e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f0a:	f7fe fe15 	bl	8000b38 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f18:	d909      	bls.n	8001f2e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e13b      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e4      	bne.n	8001f0a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f023 031c 	bic.w	r3, r3, #28
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f50:	f004 fa5e 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8001f54:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4a78      	ldr	r2, [pc, #480]	; (800213c <HAL_ETH_Init+0x2c4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d908      	bls.n	8001f70 <HAL_ETH_Init+0xf8>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d804      	bhi.n	8001f70 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e027      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4a73      	ldr	r2, [pc, #460]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d908      	bls.n	8001f8a <HAL_ETH_Init+0x112>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d804      	bhi.n	8001f8a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f043 030c 	orr.w	r3, r3, #12
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	e01a      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4a6d      	ldr	r2, [pc, #436]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d903      	bls.n	8001f9a <HAL_ETH_Init+0x122>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4a6c      	ldr	r2, [pc, #432]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d911      	bls.n	8001fbe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d908      	bls.n	8001fb4 <HAL_ETH_Init+0x13c>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_ETH_Init+0x2d4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d804      	bhi.n	8001fb4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e005      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fbe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fcc:	2100      	movs	r1, #0
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f956 	bl	8002280 <HAL_ETH_WritePHYRegister>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9b3 	bl	800234c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0d9      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ff2:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ff6:	f7fe fdab 	bl	8000b50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80a6 	beq.w	8002150 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002004:	f7fe fd98 	bl	8000b38 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	461a      	mov	r2, r3
 8002010:	2101      	movs	r1, #1
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8cc 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002018:	f7fe fd8e 	bl	8000b38 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d90f      	bls.n	800204a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f98b 	bl	800234c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0ad      	b.n	80021a6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0da      	beq.n	800200a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002058:	2100      	movs	r1, #0
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f910 	bl	8002280 <HAL_ETH_WritePHYRegister>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f96d 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800207a:	2301      	movs	r3, #1
 800207c:	e093      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800207e:	f7fe fd5b 	bl	8000b38 <HAL_GetTick>
 8002082:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	461a      	mov	r2, r3
 800208a:	2101      	movs	r1, #1
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f88f 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002092:	f7fe fd51 	bl	8000b38 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d90f      	bls.n	80020c4 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f94e 	bl	800234c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e070      	b.n	80021a6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0da      	beq.n	8002084 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	461a      	mov	r2, r3
 80020d4:	211f      	movs	r1, #31
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f86a 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020e6:	6939      	ldr	r1, [r7, #16]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f92f 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020f6:	2301      	movs	r3, #1
 80020f8:	e055      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e002      	b.n	8002114 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e036      	b.n	8002194 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e031      	b.n	8002194 <HAL_ETH_Init+0x31c>
 8002130:	03938700 	.word	0x03938700
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	01312cff 	.word	0x01312cff
 8002140:	02160ebf 	.word	0x02160ebf
 8002144:	039386ff 	.word	0x039386ff
 8002148:	05f5e0ff 	.word	0x05f5e0ff
 800214c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002160:	4313      	orrs	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f889 	bl	8002280 <HAL_ETH_WritePHYRegister>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8e6 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e00c      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800218c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002190:	f7fe fcde 	bl	8000b50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8d8 	bl	800234c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop

080021b0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	460b      	mov	r3, r1
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b82      	cmp	r3, #130	; 0x82
 80021d0:	d101      	bne.n	80021d6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e050      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2282      	movs	r2, #130	; 0x82
 80021da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 031c 	and.w	r3, r3, #28
 80021ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8a1b      	ldrh	r3, [r3, #16]
 80021f2:	02db      	lsls	r3, r3, #11
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f023 0302 	bic.w	r3, r3, #2
 8002210:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002222:	f7fe fc89 	bl	8000b38 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002228:	e015      	b.n	8002256 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800222a:	f7fe fc85 	bl	8000b38 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d309      	bcc.n	800224e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e014      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e4      	bne.n	800222a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b42      	cmp	r3, #66	; 0x42
 80022a0:	d101      	bne.n	80022a6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e04e      	b.n	8002344 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2242      	movs	r2, #66	; 0x42
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 031c 	and.w	r3, r3, #28
 80022bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8a1b      	ldrh	r3, [r3, #16]
 80022c2:	02db      	lsls	r3, r3, #11
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	019b      	lsls	r3, r3, #6
 80022d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022fc:	f7fe fc1c 	bl	8000b38 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002302:	e015      	b.n	8002330 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002304:	f7fe fc18 	bl	8000b38 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d309      	bcc.n	8002328 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e00d      	b.n	8002344 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e4      	bne.n	8002304 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0b0      	sub	sp, #192	; 0xc0
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002368:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002370:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800237a:	2300      	movs	r3, #0
 800237c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002396:	663b      	str	r3, [r7, #96]	; 0x60
 8002398:	e001      	b.n	800239e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800239e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023a8:	2300      	movs	r3, #0
 80023aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80023b8:	2340      	movs	r3, #64	; 0x40
 80023ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002424:	4bab      	ldr	r3, [pc, #684]	; (80026d4 <ETH_MACDMAConfig+0x388>)
 8002426:	4013      	ands	r3, r2
 8002428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800242c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002430:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002434:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002438:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800243e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002442:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002446:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800244c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800244e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002450:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002454:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002458:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800245c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800245e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002460:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002462:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002474:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002480:	2001      	movs	r0, #1
 8002482:	f7fe fb65 	bl	8000b50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002490:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002494:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002498:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800249a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800249e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80024a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80024a4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80024a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80024aa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80024b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80024bc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024be:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fe fb40 	bl	8000b50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024e2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80024ec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80024f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024fc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002500:	4013      	ands	r3, r2
 8002502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800250c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002510:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002516:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800251c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800251e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002522:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002528:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800252a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800253c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe fb01 	bl	8000b50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002556:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002558:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800255c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe faec 	bl	8000b50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002580:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002594:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80025a6:	2304      	movs	r3, #4
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80025b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80025de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <ETH_MACDMAConfig+0x38c>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ea:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80025ec:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ee:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80025f0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80025f2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80025f4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80025f6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80025f8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80025fa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80025fc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80025fe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002600:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002602:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002606:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800260a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800260c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f241 0318 	movw	r3, #4120	; 0x1018
 800261e:	4413      	add	r3, r2
 8002620:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002624:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f241 0318 	movw	r3, #4120	; 0x1018
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002636:	2001      	movs	r0, #1
 8002638:	f7fe fa8a 	bl	8000b50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f241 0318 	movw	r3, #4120	; 0x1018
 8002644:	4413      	add	r3, r2
 8002646:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800264a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800264c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002650:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002654:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002658:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800265c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800265e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002660:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002662:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002666:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002674:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002684:	2001      	movs	r0, #1
 8002686:	f7fe fa63 	bl	8000b50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002696:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10d      	bne.n	80026bc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f241 031c 	movw	r3, #4124	; 0x101c
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <ETH_MACDMAConfig+0x390>)
 80026b2:	431a      	orrs	r2, r3
 80026b4:	f241 031c 	movw	r3, #4124	; 0x101c
 80026b8:	440b      	add	r3, r1
 80026ba:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	461a      	mov	r2, r3
 80026c2:	2100      	movs	r1, #0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f80b 	bl	80026e0 <ETH_MACAddressConfig>
}
 80026ca:	bf00      	nop
 80026cc:	37c0      	adds	r7, #192	; 0xc0
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	ff20810f 	.word	0xff20810f
 80026d8:	f8de3f23 	.word	0xf8de3f23
 80026dc:	00010040 	.word	0x00010040

080026e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3305      	adds	r3, #5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	3204      	adds	r2, #4
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <ETH_MACAddressConfig+0x68>)
 8002702:	4413      	add	r3, r2
 8002704:	461a      	mov	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3303      	adds	r3, #3
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	061a      	lsls	r2, r3, #24
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3302      	adds	r3, #2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <ETH_MACAddressConfig+0x6c>)
 8002732:	4413      	add	r3, r2
 8002734:	461a      	mov	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40028040 	.word	0x40028040
 800274c:	40028044 	.word	0x40028044

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e175      	b.n	8002a5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8164 	bne.w	8002a56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b12      	cmp	r3, #18
 800279c:	d123      	bne.n	80027e6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	69b9      	ldr	r1, [r7, #24]
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00b      	beq.n	800283a <HAL_GPIO_Init+0xea>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282e:	2b11      	cmp	r3, #17
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b12      	cmp	r3, #18
 8002838:	d130      	bne.n	800289c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 0201 	and.w	r2, r3, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80be 	beq.w	8002a56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a64      	ldr	r2, [pc, #400]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028f2:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_GPIO_Init+0x328>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d037      	beq.n	800298e <HAL_GPIO_Init+0x23e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_GPIO_Init+0x32c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d031      	beq.n	800298a <HAL_GPIO_Init+0x23a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <HAL_GPIO_Init+0x330>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d02b      	beq.n	8002986 <HAL_GPIO_Init+0x236>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d025      	beq.n	8002982 <HAL_GPIO_Init+0x232>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <HAL_GPIO_Init+0x338>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01f      	beq.n	800297e <HAL_GPIO_Init+0x22e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_GPIO_Init+0x33c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x22a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_GPIO_Init+0x340>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x226>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_GPIO_Init+0x344>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x222>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_GPIO_Init+0x348>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x21e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <HAL_GPIO_Init+0x34c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x21a>
 8002966:	2309      	movs	r3, #9
 8002968:	e012      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800296a:	230a      	movs	r3, #10
 800296c:	e010      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800296e:	2308      	movs	r3, #8
 8002970:	e00e      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002972:	2307      	movs	r3, #7
 8002974:	e00c      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002976:	2306      	movs	r3, #6
 8002978:	e00a      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800297a:	2305      	movs	r3, #5
 800297c:	e008      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800297e:	2304      	movs	r3, #4
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002982:	2303      	movs	r3, #3
 8002984:	e004      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002986:	2302      	movs	r3, #2
 8002988:	e002      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800298e:	2300      	movs	r3, #0
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f002 0203 	and.w	r2, r2, #3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4093      	lsls	r3, r2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029a0:	4934      	ldr	r1, [pc, #208]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ae:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d2:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029d8:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	f67f ae86 	bls.w	8002770 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	3724      	adds	r7, #36	; 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40013800 	.word	0x40013800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40021400 	.word	0x40021400
 8002a90:	40021800 	.word	0x40021800
 8002a94:	40021c00 	.word	0x40021c00
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40022400 	.word	0x40022400
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e0d9      	b.n	8002c74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	f040 80c9 	bne.w	8002c6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002adc:	4a6a      	ldr	r2, [pc, #424]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a62      	ldr	r2, [pc, #392]	; (8002c8c <HAL_GPIO_DeInit+0x1e8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d037      	beq.n	8002b76 <HAL_GPIO_DeInit+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a61      	ldr	r2, [pc, #388]	; (8002c90 <HAL_GPIO_DeInit+0x1ec>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d031      	beq.n	8002b72 <HAL_GPIO_DeInit+0xce>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a60      	ldr	r2, [pc, #384]	; (8002c94 <HAL_GPIO_DeInit+0x1f0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02b      	beq.n	8002b6e <HAL_GPIO_DeInit+0xca>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a5f      	ldr	r2, [pc, #380]	; (8002c98 <HAL_GPIO_DeInit+0x1f4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d025      	beq.n	8002b6a <HAL_GPIO_DeInit+0xc6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a5e      	ldr	r2, [pc, #376]	; (8002c9c <HAL_GPIO_DeInit+0x1f8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01f      	beq.n	8002b66 <HAL_GPIO_DeInit+0xc2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_GPIO_DeInit+0x1fc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d019      	beq.n	8002b62 <HAL_GPIO_DeInit+0xbe>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_GPIO_DeInit+0x200>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_GPIO_DeInit+0xba>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_GPIO_DeInit+0x204>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00d      	beq.n	8002b5a <HAL_GPIO_DeInit+0xb6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a5a      	ldr	r2, [pc, #360]	; (8002cac <HAL_GPIO_DeInit+0x208>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_DeInit+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a59      	ldr	r2, [pc, #356]	; (8002cb0 <HAL_GPIO_DeInit+0x20c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_GPIO_DeInit+0xae>
 8002b4e:	2309      	movs	r3, #9
 8002b50:	e012      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b52:	230a      	movs	r3, #10
 8002b54:	e010      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e00e      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e00c      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b5e:	2306      	movs	r3, #6
 8002b60:	e00a      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b62:	2305      	movs	r3, #5
 8002b64:	e008      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b66:	2304      	movs	r3, #4
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e004      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b76:	2300      	movs	r3, #0
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	f002 0203 	and.w	r2, r2, #3
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	4093      	lsls	r3, r2
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d132      	bne.n	8002bee <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002b98:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	4837      	ldr	r0, [pc, #220]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	400a      	ands	r2, r1
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	493d      	ldr	r1, [pc, #244]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4939      	ldr	r1, [pc, #228]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	4936      	ldr	r1, [pc, #216]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	4932      	ldr	r1, [pc, #200]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	08d2      	lsrs	r2, r2, #3
 8002c24:	4019      	ands	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2103      	movs	r1, #3
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2103      	movs	r1, #3
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	f67f af22 	bls.w	8002ac0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40020800 	.word	0x40020800
 8002c98:	40020c00 	.word	0x40020c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40021400 	.word	0x40021400
 8002ca4:	40021800 	.word	0x40021800
 8002ca8:	40021c00 	.word	0x40021c00
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40022400 	.word	0x40022400
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e001      	b.n	8002cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1c:	b08d      	sub	sp, #52	; 0x34
 8002d1e:	af0a      	add	r7, sp, #40	; 0x28
 8002d20:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e048      	b.n	8002dbe <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f017 fd73 	bl	801a82c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f008 fbbd 	bl	800b4d2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	687e      	ldr	r6, [r7, #4]
 8002d60:	466d      	mov	r5, sp
 8002d62:	f106 0410 	add.w	r4, r6, #16
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d76:	1d33      	adds	r3, r6, #4
 8002d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7a:	6838      	ldr	r0, [r7, #0]
 8002d7c:	f008 fb40 	bl	800b400 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f008 fbb4 	bl	800b4f4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	687e      	ldr	r6, [r7, #4]
 8002d94:	466d      	mov	r5, sp
 8002d96:	f106 0410 	add.w	r4, r6, #16
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002daa:	1d33      	adds	r3, r6, #4
 8002dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dae:	6838      	ldr	r0, [r7, #0]
 8002db0:	f008 fcc6 	bl	800b740 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dc6:	b590      	push	{r4, r7, lr}
 8002dc8:	b089      	sub	sp, #36	; 0x24
 8002dca:	af04      	add	r7, sp, #16
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	4608      	mov	r0, r1
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	70fb      	strb	r3, [r7, #3]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70bb      	strb	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_HCD_HC_Init+0x28>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e07f      	b.n	8002eee <HAL_HCD_HC_Init+0x128>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	333d      	adds	r3, #61	; 0x3d
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	3338      	adds	r3, #56	; 0x38
 8002e1a:	787a      	ldrb	r2, [r7, #1]
 8002e1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e30:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	3339      	adds	r3, #57	; 0x39
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	333f      	adds	r3, #63	; 0x3f
 8002e56:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	78bb      	ldrb	r3, [r7, #2]
 8002e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e64:	b2d8      	uxtb	r0, r3
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	333a      	adds	r3, #58	; 0x3a
 8002e74:	4602      	mov	r2, r0
 8002e76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0a      	bge.n	8002e96 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	333b      	adds	r3, #59	; 0x3b
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e009      	b.n	8002eaa <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	333b      	adds	r3, #59	; 0x3b
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	333c      	adds	r3, #60	; 0x3c
 8002eba:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ebe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	787c      	ldrb	r4, [r7, #1]
 8002ec6:	78ba      	ldrb	r2, [r7, #2]
 8002ec8:	78f9      	ldrb	r1, [r7, #3]
 8002eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4623      	mov	r3, r4
 8002edc:	f008 fda6 	bl	800ba2c <USB_HC_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}

08002ef6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_HCD_HC_Halt+0x1e>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e00f      	b.n	8002f34 <HAL_HCD_HC_Halt+0x3e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f008 ffe0 	bl	800beea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	70fb      	strb	r3, [r7, #3]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70bb      	strb	r3, [r7, #2]
 8002f52:	4613      	mov	r3, r2
 8002f54:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	333b      	adds	r3, #59	; 0x3b
 8002f66:	78ba      	ldrb	r2, [r7, #2]
 8002f68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	787a      	ldrb	r2, [r7, #1]
 8002f7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f7e:	7c3b      	ldrb	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3342      	adds	r3, #66	; 0x42
 8002f94:	2203      	movs	r2, #3
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e009      	b.n	8002fae <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3342      	adds	r3, #66	; 0x42
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fae:	787b      	ldrb	r3, [r7, #1]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	f200 80d6 	bhi.w	8003162 <HAL_HCD_HC_SubmitRequest+0x226>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_HCD_HC_SubmitRequest+0x80>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	0800314d 	.word	0x0800314d
 8002fc4:	08003039 	.word	0x08003039
 8002fc8:	080030c3 	.word	0x080030c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fcc:	7c3b      	ldrb	r3, [r7, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80c9 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 80c5 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002fdc:	8b3b      	ldrh	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3351      	adds	r3, #81	; 0x51
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3351      	adds	r3, #81	; 0x51
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	3342      	adds	r3, #66	; 0x42
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003020:	e0a1      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3342      	adds	r3, #66	; 0x42
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
      break;
 8003036:	e096      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003038:	78bb      	ldrb	r3, [r7, #2]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d120      	bne.n	8003080 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	3351      	adds	r3, #81	; 0x51
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3342      	adds	r3, #66	; 0x42
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003068:	e07e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3342      	adds	r3, #66	; 0x42
 800307a:	2202      	movs	r2, #2
 800307c:	701a      	strb	r2, [r3, #0]
      break;
 800307e:	e073      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3350      	adds	r3, #80	; 0x50
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3342      	adds	r3, #66	; 0x42
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	e05d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3342      	adds	r3, #66	; 0x42
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
      break;
 80030c0:	e052      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030c2:	78bb      	ldrb	r3, [r7, #2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d120      	bne.n	800310a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3351      	adds	r3, #81	; 0x51
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3342      	adds	r3, #66	; 0x42
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030f2:	e039      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	3342      	adds	r3, #66	; 0x42
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
      break;
 8003108:	e02e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	3350      	adds	r3, #80	; 0x50
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3342      	adds	r3, #66	; 0x42
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e018      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3342      	adds	r3, #66	; 0x42
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      break;
 800314a:	e00d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3342      	adds	r3, #66	; 0x42
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
      break;
 8003160:	e002      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003166:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3344      	adds	r3, #68	; 0x44
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	8b39      	ldrh	r1, [r7, #24]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4403      	add	r3, r0
 800318c:	3348      	adds	r3, #72	; 0x48
 800318e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	335c      	adds	r3, #92	; 0x5c
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	; 0x4c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	3339      	adds	r3, #57	; 0x39
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	335d      	adds	r3, #93	; 0x5d
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	18d1      	adds	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	f008 fd20 	bl	800bc40 <USB_HC_StartXfer>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f008 fa49 	bl	800b6ba <USB_GetMode>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 80f1 	bne.w	8003412 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f008 fa2d 	bl	800b694 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80e7 	beq.w	8003410 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f008 fa24 	bl	800b694 <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003256:	d104      	bne.n	8003262 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f008 fa14 	bl	800b694 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003276:	d104      	bne.n	8003282 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f008 fa04 	bl	800b694 <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003296:	d104      	bne.n	80032a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f008 f9f4 	bl	800b694 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2202      	movs	r2, #2
 80032bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f008 f9e6 	bl	800b694 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d2:	d117      	bne.n	8003304 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80032e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032e6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f017 fb11 	bl	801a910 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f008 fad3 	bl	800b8a0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f008 f9c3 	bl	800b694 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003318:	d102      	bne.n	8003320 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f001 f8c8 	bl	80044b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f008 f9b5 	bl	800b694 <USB_ReadInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b08      	cmp	r3, #8
 8003332:	d106      	bne.n	8003342 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f017 facf 	bl	801a8d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2208      	movs	r2, #8
 8003340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f008 f9a4 	bl	800b694 <USB_ReadInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003356:	d138      	bne.n	80033ca <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f008 fdb3 	bl	800bec8 <USB_HC_ReadInterrupt>
 8003362:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e025      	b.n	80033b6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d018      	beq.n	80033b0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d106      	bne.n	80033a4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f8cf 	bl	8003540 <HCD_HC_IN_IRQHandler>
 80033a2:	e005      	b.n	80033b0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fc5f 	bl	8003c6e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3d4      	bcc.n	800336a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f008 f960 	bl	800b694 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d101      	bne.n	80033e2 <HAL_HCD_IRQHandler+0x1d6>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_HCD_IRQHandler+0x1d8>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0210 	bic.w	r2, r2, #16
 80033f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 ffad 	bl	8004358 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0210 	orr.w	r2, r2, #16
 800340c:	619a      	str	r2, [r3, #24]
 800340e:	e000      	b.n	8003412 <HAL_HCD_IRQHandler+0x206>
      return;
 8003410:	bf00      	nop
    }
  }
}
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_HCD_Start+0x16>
 800342a:	2302      	movs	r3, #2
 800342c:	e013      	b.n	8003456 <HAL_HCD_Start+0x3e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f008 f838 	bl	800b4b0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f008 fa8e 	bl	800b968 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_HCD_Stop+0x16>
 8003470:	2302      	movs	r3, #2
 8003472:	e00d      	b.n	8003490 <HAL_HCD_Stop+0x32>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f008 fe6d 	bl	800c160 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f008 fa35 	bl	800b914 <USB_ResetPort>
 80034aa:	4603      	mov	r3, r0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	335c      	adds	r3, #92	; 0x5c
 80034d0:	781b      	ldrb	r3, [r3, #0]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	334c      	adds	r3, #76	; 0x4c
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f008 fa77 	bl	800ba08 <USB_GetCurrentFrame>
 800351a:	4603      	mov	r3, r0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f008 fa52 	bl	800b9da <USB_GetHostSpeed>
 8003536:	4603      	mov	r3, r0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d119      	bne.n	80035a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2304      	movs	r3, #4
 8003580:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	440a      	add	r2, r1
 8003598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	60d3      	str	r3, [r2, #12]
 80035a2:	e095      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d109      	bne.n	80035ce <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	2320      	movs	r3, #32
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	e080      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d134      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	335d      	adds	r3, #93	; 0x5d
 8003614:	2205      	movs	r2, #5
 8003616:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	461a      	mov	r2, r3
 8003626:	2310      	movs	r3, #16
 8003628:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	2308      	movs	r3, #8
 800363a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f008 fc4f 	bl	800beea <USB_HC_Halt>
 800364c:	e040      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d134      	bne.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	440a      	add	r2, r1
 800367c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f008 fc2a 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	2310      	movs	r3, #16
 80036a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	335d      	adds	r3, #93	; 0x5d
 80036b8:	2208      	movs	r2, #8
 80036ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ce:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e6:	d122      	bne.n	800372e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f008 fbe9 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800372c:	e29b      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 80c1 	bne.w	80038c8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01b      	beq.n	8003786 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	3348      	adds	r3, #72	; 0x48
 800375e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	0159      	lsls	r1, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	440b      	add	r3, r1
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003772:	1ad1      	subs	r1, r2, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4403      	add	r3, r0
 8003782:	334c      	adds	r3, #76	; 0x4c
 8003784:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	335d      	adds	r3, #93	; 0x5d
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3358      	adds	r3, #88	; 0x58
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	333f      	adds	r3, #63	; 0x3f
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	333f      	adds	r3, #63	; 0x3f
 80037e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d121      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	440a      	add	r2, r1
 8003802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f008 fb67 	bl	800beea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2310      	movs	r3, #16
 800382c:	6093      	str	r3, [r2, #8]
 800382e:	e034      	b.n	800389a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	333f      	adds	r3, #63	; 0x3f
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d129      	bne.n	800389a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	440a      	add	r2, r1
 800385c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003864:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	335c      	adds	r3, #92	; 0x5c
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	b2d8      	uxtb	r0, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	335c      	adds	r3, #92	; 0x5c
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4601      	mov	r1, r0
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f017 f849 	bl	801a92c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	3350      	adds	r3, #80	; 0x50
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2d8      	uxtb	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3350      	adds	r3, #80	; 0x50
 80038c2:	4602      	mov	r2, r0
 80038c4:	701a      	strb	r2, [r3, #0]
}
 80038c6:	e1ce      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	f040 80f1 	bne.w	8003ac2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fa:	f023 0302 	bic.w	r3, r3, #2
 80038fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	335d      	adds	r3, #93	; 0x5d
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10a      	bne.n	800392c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	335c      	adds	r3, #92	; 0x5c
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e0b0      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	335d      	adds	r3, #93	; 0x5d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d10a      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	440b      	add	r3, r1
 8003950:	335c      	adds	r3, #92	; 0x5c
 8003952:	2205      	movs	r2, #5
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e09a      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	335d      	adds	r3, #93	; 0x5d
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d00a      	beq.n	8003984 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	335d      	adds	r3, #93	; 0x5d
 800397e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003980:	2b08      	cmp	r3, #8
 8003982:	d156      	bne.n	8003a32 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	440b      	add	r3, r1
 8003992:	3358      	adds	r3, #88	; 0x58
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4403      	add	r3, r0
 80039a6:	3358      	adds	r3, #88	; 0x58
 80039a8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3358      	adds	r3, #88	; 0x58
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d914      	bls.n	80039ea <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	440b      	add	r3, r1
 80039ce:	3358      	adds	r3, #88	; 0x58
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	335c      	adds	r3, #92	; 0x5c
 80039e4:	2204      	movs	r2, #4
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e009      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	440b      	add	r3, r1
 80039f8:	335c      	adds	r3, #92	; 0x5c
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a14:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a1c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02d      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	335d      	adds	r3, #93	; 0x5d
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d122      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	335c      	adds	r3, #92	; 0x5c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	b2d8      	uxtb	r0, r3
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	335c      	adds	r3, #92	; 0x5c
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4601      	mov	r1, r0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f016 ff36 	bl	801a92c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ac0:	e0d1      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d13e      	bne.n	8003b56 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	3358      	adds	r3, #88	; 0x58
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4403      	add	r3, r0
 8003b1a:	3358      	adds	r3, #88	; 0x58
 8003b1c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	335d      	adds	r3, #93	; 0x5d
 8003b2e:	2206      	movs	r2, #6
 8003b30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f008 f9d4 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	6093      	str	r3, [r2, #8]
}
 8003b54:	e087      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d17c      	bne.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	333f      	adds	r3, #63	; 0x3f
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d122      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	3358      	adds	r3, #88	; 0x58
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f008 f992 	bl	800beea <USB_HC_Halt>
 8003bc6:	e045      	b.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	333f      	adds	r3, #63	; 0x3f
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	333f      	adds	r3, #63	; 0x3f
 8003bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d12f      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3358      	adds	r3, #88	; 0x58
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d121      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	335d      	adds	r3, #93	; 0x5d
 8003c20:	2203      	movs	r2, #3
 8003c22:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
 8003c42:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f008 f94b 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	461a      	mov	r2, r3
 8003c62:	2310      	movs	r3, #16
 8003c64:	6093      	str	r3, [r2, #8]
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d119      	bne.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2304      	movs	r3, #4
 8003cae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003cd0:	e33e      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d141      	bne.n	8003d6c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	333d      	adds	r3, #61	; 0x3d
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 831f 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	333d      	adds	r3, #61	; 0x3d
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	335c      	adds	r3, #92	; 0x5c
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f008 f8c0 	bl	800beea <USB_HC_Halt>
}
 8003d6a:	e2f1      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d13f      	bne.n	8003e02 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	335d      	adds	r3, #93	; 0x5d
 8003d92:	2204      	movs	r2, #4
 8003d94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	440b      	add	r3, r1
 8003da4:	333d      	adds	r3, #61	; 0x3d
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	3358      	adds	r3, #88	; 0x58
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f008 f87e 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	6093      	str	r3, [r2, #8]
}
 8003e00:	e2a6      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d122      	bne.n	8003e60 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f008 f850 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	461a      	mov	r2, r3
 8003e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e5c:	6093      	str	r3, [r2, #8]
}
 8003e5e:	e277      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d135      	bne.n	8003ee2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	3358      	adds	r3, #88	; 0x58
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f008 f818 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	335d      	adds	r3, #93	; 0x5d
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
}
 8003ee0:	e236      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d12b      	bne.n	8003f50 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	2308      	movs	r3, #8
 8003f08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f007 ffd8 	bl	800beea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	335d      	adds	r3, #93	; 0x5d
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	701a      	strb	r2, [r3, #0]
}
 8003f4e:	e1ff      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d155      	bne.n	8004012 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	3358      	adds	r3, #88	; 0x58
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	335d      	adds	r3, #93	; 0x5d
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	333d      	adds	r3, #61	; 0x3d
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d114      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	333c      	adds	r3, #60	; 0x3c
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	333d      	adds	r3, #61	; 0x3d
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f007 ff76 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	2310      	movs	r3, #16
 800400e:	6093      	str	r3, [r2, #8]
}
 8004010:	e19e      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d12b      	bne.n	8004080 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	440a      	add	r2, r1
 800403e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004042:	f043 0302 	orr.w	r3, r3, #2
 8004046:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f007 ff49 	bl	800beea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	335d      	adds	r3, #93	; 0x5d
 8004068:	2206      	movs	r2, #6
 800406a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	461a      	mov	r2, r3
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	6093      	str	r3, [r2, #8]
}
 800407e:	e167      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d135      	bne.n	8004104 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 ff11 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	2310      	movs	r3, #16
 80040d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	335d      	adds	r3, #93	; 0x5d
 80040fe:	2208      	movs	r2, #8
 8004100:	701a      	strb	r2, [r3, #0]
}
 8004102:	e125      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	f040 811a 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	440a      	add	r2, r1
 8004132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004136:	f023 0302 	bic.w	r3, r3, #2
 800413a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	335d      	adds	r3, #93	; 0x5d
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d137      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	335c      	adds	r3, #92	; 0x5c
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	440b      	add	r3, r1
 8004174:	333f      	adds	r3, #63	; 0x3f
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00b      	beq.n	8004194 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	333f      	adds	r3, #63	; 0x3f
 800418c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800418e:	2b03      	cmp	r3, #3
 8004190:	f040 80c5 	bne.w	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	3351      	adds	r3, #81	; 0x51
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2d8      	uxtb	r0, r3
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	440b      	add	r3, r1
 80041ba:	3351      	adds	r3, #81	; 0x51
 80041bc:	4602      	mov	r2, r0
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e0ad      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	440b      	add	r3, r1
 80041d0:	335d      	adds	r3, #93	; 0x5d
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d10a      	bne.n	80041ee <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	335c      	adds	r3, #92	; 0x5c
 80041e8:	2202      	movs	r2, #2
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e097      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	335d      	adds	r3, #93	; 0x5d
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d10a      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	335c      	adds	r3, #92	; 0x5c
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e081      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	335d      	adds	r3, #93	; 0x5d
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b05      	cmp	r3, #5
 800422e:	d10a      	bne.n	8004246 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	440b      	add	r3, r1
 800423e:	335c      	adds	r3, #92	; 0x5c
 8004240:	2205      	movs	r2, #5
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e06b      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	440b      	add	r3, r1
 8004254:	335d      	adds	r3, #93	; 0x5d
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d00a      	beq.n	8004272 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	335d      	adds	r3, #93	; 0x5d
 800426c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800426e:	2b08      	cmp	r3, #8
 8004270:	d155      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	3358      	adds	r3, #88	; 0x58
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4403      	add	r3, r0
 8004294:	3358      	adds	r3, #88	; 0x58
 8004296:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3358      	adds	r3, #88	; 0x58
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d914      	bls.n	80042d8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	440b      	add	r3, r1
 80042bc:	3358      	adds	r3, #88	; 0x58
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	440b      	add	r3, r1
 80042d0:	335c      	adds	r3, #92	; 0x5c
 80042d2:	2204      	movs	r2, #4
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e009      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	440b      	add	r3, r1
 80042e6:	335c      	adds	r3, #92	; 0x5c
 80042e8:	2202      	movs	r2, #2
 80042ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004302:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	461a      	mov	r2, r3
 800432c:	2302      	movs	r3, #2
 800432e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	b2d8      	uxtb	r0, r3
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	335c      	adds	r3, #92	; 0x5c
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4601      	mov	r1, r0
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f016 faee 	bl	801a92c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004350:	bf00      	nop
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	0c5b      	lsrs	r3, r3, #17
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800438c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d003      	beq.n	800439c <HCD_RXQLVL_IRQHandler+0x44>
 8004394:	2b05      	cmp	r3, #5
 8004396:	f000 8082 	beq.w	800449e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800439a:	e083      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07f      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	440b      	add	r3, r1
 80043b0:	3344      	adds	r3, #68	; 0x44
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d074      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3344      	adds	r3, #68	; 0x44
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	b292      	uxth	r2, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f007 f935 	bl	800b642 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	3344      	adds	r3, #68	; 0x44
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4403      	add	r3, r0
 80043fc:	3344      	adds	r3, #68	; 0x44
 80043fe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	440b      	add	r3, r1
 800440e:	334c      	adds	r3, #76	; 0x4c
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4403      	add	r3, r0
 8004424:	334c      	adds	r3, #76	; 0x4c
 8004426:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HCD_RXQLVL_IRQHandler+0x154>)
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d031      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004454:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800445c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	440b      	add	r3, r1
 800447e:	3350      	adds	r3, #80	; 0x50
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2d8      	uxtb	r0, r3
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	3350      	adds	r3, #80	; 0x50
 8004498:	4602      	mov	r2, r0
 800449a:	701a      	strb	r2, [r3, #0]
      break;
 800449c:	e001      	b.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80044a2:	bf00      	nop
  }
}
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	1ff80000 	.word	0x1ff80000

080044b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d113      	bne.n	8004510 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10a      	bne.n	8004508 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004500:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f016 f9f6 	bl	801a8f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b08      	cmp	r3, #8
 8004518:	d147      	bne.n	80045aa <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f043 0308 	orr.w	r3, r3, #8
 8004520:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d129      	bne.n	8004580 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d113      	bne.n	800455c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800453a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800453e:	d106      	bne.n	800454e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f007 f9aa 	bl	800b8a0 <USB_InitFSLSPClkSel>
 800454c:	e011      	b.n	8004572 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f007 f9a3 	bl	800b8a0 <USB_InitFSLSPClkSel>
 800455a:	e00a      	b.n	8004572 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d106      	bne.n	8004572 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456a:	461a      	mov	r2, r3
 800456c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004570:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f016 f9ec 	bl	801a950 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f016 f9bb 	bl	801a8f4 <HAL_HCD_Connect_Callback>
 800457e:	e014      	b.n	80045aa <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f016 f9f3 	bl	801a96c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004594:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004598:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80045a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d103      	bne.n	80045bc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f043 0320 	orr.w	r3, r3, #32
 80045ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6013      	str	r3, [r2, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f015 fab8 	bl	8019b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	; 0x24
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	e006      	b.n	8004658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d104      	bne.n	800466a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_I2C_Init+0x11c>)
 8004676:	430b      	orrs	r3, r1
 8004678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	ea42 0103 	orr.w	r1, r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69d9      	ldr	r1, [r3, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1a      	ldr	r2, [r3, #32]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	02008000 	.word	0x02008000

080046f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e021      	b.n	8004746 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2224      	movs	r2, #36	; 0x24
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f015 fa9e 	bl	8019c5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4603      	mov	r3, r0
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	460b      	mov	r3, r1
 8004764:	813b      	strh	r3, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	f040 80f9 	bne.w	800496a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_I2C_Mem_Write+0x34>
 800477e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0ed      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_I2C_Mem_Write+0x4e>
 800479a:	2302      	movs	r3, #2
 800479c:	e0e6      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047a6:	f7fc f9c7 	bl	8000b38 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2319      	movs	r3, #25
 80047b2:	2201      	movs	r2, #1
 80047b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fad1 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0d1      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2221      	movs	r2, #33	; 0x21
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2240      	movs	r2, #64	; 0x40
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a3a      	ldr	r2, [r7, #32]
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f0:	88f8      	ldrh	r0, [r7, #6]
 80047f2:	893a      	ldrh	r2, [r7, #8]
 80047f4:	8979      	ldrh	r1, [r7, #10]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4603      	mov	r3, r0
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f9e1 	bl	8004bc8 <I2C_RequestMemoryWrite>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0a9      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2bff      	cmp	r3, #255	; 0xff
 8004820:	d90e      	bls.n	8004840 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	22ff      	movs	r2, #255	; 0xff
 8004826:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	b2da      	uxtb	r2, r3
 800482e:	8979      	ldrh	r1, [r7, #10]
 8004830:	2300      	movs	r3, #0
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fbb3 	bl	8004fa4 <I2C_TransferConfig>
 800483e:	e00f      	b.n	8004860 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	b2da      	uxtb	r2, r3
 8004850:	8979      	ldrh	r1, [r7, #10]
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fba2 	bl	8004fa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fabb 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e07b      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d034      	beq.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d130      	bne.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	2200      	movs	r2, #0
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fa4d 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e04d      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2bff      	cmp	r3, #255	; 0xff
 80048d8:	d90e      	bls.n	80048f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	22ff      	movs	r2, #255	; 0xff
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	8979      	ldrh	r1, [r7, #10]
 80048e8:	2300      	movs	r3, #0
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fb57 	bl	8004fa4 <I2C_TransferConfig>
 80048f6:	e00f      	b.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	b2da      	uxtb	r2, r3
 8004908:	8979      	ldrh	r1, [r7, #10]
 800490a:	2300      	movs	r3, #0
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fb46 	bl	8004fa4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d19e      	bne.n	8004860 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fa9a 	bl	8004e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e01a      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2220      	movs	r2, #32
 800493c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6859      	ldr	r1, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_I2C_Mem_Write+0x224>)
 800494a:	400b      	ands	r3, r1
 800494c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	fe00e800 	.word	0xfe00e800

08004978 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	f040 80fd 	bne.w	8004b9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_I2C_Mem_Read+0x34>
 80049a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0f1      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_I2C_Mem_Read+0x4e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0ea      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049ce:	f7fc f8b3 	bl	8000b38 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2319      	movs	r3, #25
 80049da:	2201      	movs	r2, #1
 80049dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f9bd 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0d5      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2222      	movs	r2, #34	; 0x22
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2240      	movs	r2, #64	; 0x40
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a18:	88f8      	ldrh	r0, [r7, #6]
 8004a1a:	893a      	ldrh	r2, [r7, #8]
 8004a1c:	8979      	ldrh	r1, [r7, #10]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4603      	mov	r3, r0
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f921 	bl	8004c70 <I2C_RequestMemoryRead>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0ad      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2bff      	cmp	r3, #255	; 0xff
 8004a48:	d90e      	bls.n	8004a68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	8979      	ldrh	r1, [r7, #10]
 8004a58:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <HAL_I2C_Mem_Read+0x22c>)
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa9f 	bl	8004fa4 <I2C_TransferConfig>
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	8979      	ldrh	r1, [r7, #10]
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_I2C_Mem_Read+0x22c>)
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fa8e 	bl	8004fa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2104      	movs	r1, #4
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f964 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07c      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d034      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d130      	bne.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	2200      	movs	r2, #0
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f935 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e04d      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2bff      	cmp	r3, #255	; 0xff
 8004b08:	d90e      	bls.n	8004b28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fa3f 	bl	8004fa4 <I2C_TransferConfig>
 8004b26:	e00f      	b.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	8979      	ldrh	r1, [r7, #10]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fa2e 	bl	8004fa4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d19a      	bne.n	8004a88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f982 	bl	8004e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e01a      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_I2C_Mem_Read+0x230>)
 8004b7a:	400b      	ands	r3, r1
 8004b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
  }
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	80002400 	.word	0x80002400
 8004ba8:	fe00e800 	.word	0xfe00e800

08004bac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bba:	b2db      	uxtb	r3, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	813b      	strh	r3, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	8979      	ldrh	r1, [r7, #10]
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <I2C_RequestMemoryWrite+0xa4>)
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f9d7 	bl	8004fa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f8f0 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e02c      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d105      	bne.n	8004c1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c10:	893b      	ldrh	r3, [r7, #8]
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28
 8004c1a:	e015      	b.n	8004c48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c1c:	893b      	ldrh	r3, [r7, #8]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f8d6 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e012      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c3e:	893b      	ldrh	r3, [r7, #8]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f884 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	80002000 	.word	0x80002000

08004c70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	460b      	mov	r3, r1
 8004c84:	813b      	strh	r3, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <I2C_RequestMemoryRead+0xa4>)
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f984 	bl	8004fa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f89d 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e02c      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb6:	893b      	ldrh	r3, [r7, #8]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc0:	e015      	b.n	8004cee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc2:	893b      	ldrh	r3, [r7, #8]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f883 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e012      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2140      	movs	r1, #64	; 0x40
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f831 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	80002000 	.word	0x80002000

08004d18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d103      	bne.n	8004d36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d007      	beq.n	8004d54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	619a      	str	r2, [r3, #24]
  }
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d70:	e022      	b.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d01e      	beq.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fb fedd 	bl	8000b38 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d113      	bne.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e00f      	b.n	8004dd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d0cd      	beq.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dec:	e02c      	b.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f870 	bl	8004ed8 <I2C_IsAcknowledgeFailed>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e02a      	b.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d01e      	beq.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fb fe95 	bl	8000b38 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e007      	b.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d1cb      	bne.n	8004dee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6c:	e028      	b.n	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f830 	bl	8004ed8 <I2C_IsAcknowledgeFailed>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e026      	b.n	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fb fe59 	bl	8000b38 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d113      	bne.n	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e007      	b.n	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d1cf      	bne.n	8004e6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d151      	bne.n	8004f96 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef2:	e022      	b.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d01e      	beq.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efc:	f7fb fe1c 	bl	8000b38 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <I2C_IsAcknowledgeFailed+0x3a>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d113      	bne.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e02e      	b.n	8004f98 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d1d5      	bne.n	8004ef4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2220      	movs	r2, #32
 8004f56:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fedd 	bl	8004d18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	fe00e800 	.word	0xfe00e800

08004fa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	817b      	strh	r3, [r7, #10]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	0d5b      	lsrs	r3, r3, #21
 8004fc0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <I2C_TransferConfig+0x58>)
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	ea02 0103 	and.w	r1, r2, r3
 8004fce:	897b      	ldrh	r3, [r7, #10]
 8004fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fd4:	7a7b      	ldrb	r3, [r7, #9]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	03ff63ff 	.word	0x03ff63ff

08005000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b20      	cmp	r3, #32
 8005014:	d138      	bne.n	8005088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005020:	2302      	movs	r3, #2
 8005022:	e032      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	; 0x24
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d139      	bne.n	8005120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e033      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	; 0x24
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0bf      	b.n	80052c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f012 fdb0 	bl	8017cbc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005172:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005188:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <HAL_LTDC_Init+0x19c>)
 80051a4:	400b      	ands	r3, r1
 80051a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6899      	ldr	r1, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68d9      	ldr	r1, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_LTDC_Init+0x19c>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6919      	ldr	r1, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b33      	ldr	r3, [pc, #204]	; (80052cc <HAL_LTDC_Init+0x19c>)
 8005200:	400b      	ands	r3, r1
 8005202:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6919      	ldr	r1, [r3, #16]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6959      	ldr	r1, [r3, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_LTDC_Init+0x19c>)
 800522e:	400b      	ands	r3, r1
 8005230:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6959      	ldr	r1, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0206 	orr.w	r2, r2, #6
 800529e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	f000f800 	.word	0xf000f800

080052d0 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f012 fd81 	bl	8017de0 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d023      	beq.n	800536a <HAL_LTDC_IRQHandler+0x6a>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01e      	beq.n	800536a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0204 	bic.w	r2, r2, #4
 800533a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2204      	movs	r2, #4
 8005342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2204      	movs	r2, #4
 8005358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f86f 	bl	8005448 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_LTDC_IRQHandler+0xbc>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01e      	beq.n	80053bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0202 	bic.w	r2, r2, #2
 800538c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2202      	movs	r2, #2
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800539c:	f043 0202 	orr.w	r2, r3, #2
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2204      	movs	r2, #4
 80053aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f846 	bl	8005448 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01b      	beq.n	80053fe <HAL_LTDC_IRQHandler+0xfe>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f013 f8b1 	bl	8018560 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <HAL_LTDC_IRQHandler+0x140>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d016      	beq.n	8005440 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0208 	bic.w	r2, r2, #8
 8005420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2208      	movs	r2, #8
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f80e 	bl	800545c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_LTDC_ConfigLayer+0x1a>
 8005486:	2302      	movs	r3, #2
 8005488:	e02c      	b.n	80054e4 <HAL_LTDC_ConfigLayer+0x74>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2134      	movs	r1, #52	; 0x34
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	4413      	add	r3, r2
 80054a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4614      	mov	r4, r2
 80054ae:	461d      	mov	r5, r3
 80054b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f8cf 	bl	8005668 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2201      	movs	r2, #1
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bdb0      	pop	{r4, r5, r7, pc}

080054ec <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_LTDC_SetPitch+0x1a>
 8005502:	2302      	movs	r3, #2
 8005504:	e06e      	b.n	80055e4 <HAL_LTDC_SetPitch+0xf8>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2134      	movs	r1, #52	; 0x34
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	3348      	adds	r3, #72	; 0x48
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 800552e:	2304      	movs	r3, #4
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e016      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d102      	bne.n	8005540 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 800553a:	2303      	movs	r3, #3
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	e010      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d008      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d005      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b03      	cmp	r3, #3
 8005550:	d002      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b07      	cmp	r3, #7
 8005556:	d102      	bne.n	800555e <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005558:	2302      	movs	r3, #2
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	e001      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 800555e:	2301      	movs	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	01db      	lsls	r3, r3, #7
 8005578:	4413      	add	r3, r2
 800557a:	3384      	adds	r3, #132	; 0x84
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	01db      	lsls	r3, r3, #7
 8005588:	440b      	add	r3, r1
 800558a:	3384      	adds	r3, #132	; 0x84
 800558c:	4619      	mov	r1, r3
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_LTDC_SetPitch+0x104>)
 8005590:	4013      	ands	r3, r2
 8005592:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	01db      	lsls	r3, r3, #7
 80055aa:	4413      	add	r3, r2
 80055ac:	3384      	adds	r3, #132	; 0x84
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	440b      	add	r3, r1
 80055bc:	3384      	adds	r3, #132	; 0x84
 80055be:	4619      	mov	r1, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3724      	adds	r7, #36	; 0x24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000ffff 	.word	0xe000ffff
 80055f4:	40016800 	.word	0x40016800

080055f8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_LTDC_ProgramLineEvent+0x18>
 800560c:	2302      	movs	r3, #2
 800560e:	e023      	b.n	8005658 <HAL_LTDC_ProgramLineEvent+0x60>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005630:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40016800 	.word	0x40016800

08005668 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005684:	4413      	add	r3, r2
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	01db      	lsls	r3, r3, #7
 8005694:	4413      	add	r3, r2
 8005696:	3384      	adds	r3, #132	; 0x84
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	4611      	mov	r1, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	01d2      	lsls	r2, r2, #7
 80056a4:	440a      	add	r2, r1
 80056a6:	3284      	adds	r2, #132	; 0x84
 80056a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056be:	4413      	add	r3, r2
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4619      	mov	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	01db      	lsls	r3, r3, #7
 80056cc:	440b      	add	r3, r1
 80056ce:	3384      	adds	r3, #132	; 0x84
 80056d0:	4619      	mov	r1, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056e6:	4413      	add	r3, r2
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	01db      	lsls	r3, r3, #7
 80056f6:	4413      	add	r3, r2
 80056f8:	3384      	adds	r3, #132	; 0x84
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	4611      	mov	r1, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	01d2      	lsls	r2, r2, #7
 8005706:	440a      	add	r2, r1
 8005708:	3284      	adds	r2, #132	; 0x84
 800570a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800570e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800571e:	4413      	add	r3, r2
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4619      	mov	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	01db      	lsls	r3, r3, #7
 800572c:	440b      	add	r3, r1
 800572e:	3384      	adds	r3, #132	; 0x84
 8005730:	4619      	mov	r1, r3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	4413      	add	r3, r2
 8005744:	3384      	adds	r3, #132	; 0x84
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	4611      	mov	r1, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	01d2      	lsls	r2, r2, #7
 8005752:	440a      	add	r2, r1
 8005754:	3284      	adds	r2, #132	; 0x84
 8005756:	f023 0307 	bic.w	r3, r3, #7
 800575a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	01db      	lsls	r3, r3, #7
 8005766:	4413      	add	r3, r2
 8005768:	3384      	adds	r3, #132	; 0x84
 800576a:	461a      	mov	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	01db      	lsls	r3, r3, #7
 8005798:	4413      	add	r3, r2
 800579a:	3384      	adds	r3, #132	; 0x84
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	01db      	lsls	r3, r3, #7
 80057a8:	4413      	add	r3, r2
 80057aa:	3384      	adds	r3, #132	; 0x84
 80057ac:	461a      	mov	r2, r3
 80057ae:	2300      	movs	r3, #0
 80057b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057b8:	461a      	mov	r2, r3
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	431a      	orrs	r2, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4619      	mov	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	01db      	lsls	r3, r3, #7
 80057cc:	440b      	add	r3, r1
 80057ce:	3384      	adds	r3, #132	; 0x84
 80057d0:	4619      	mov	r1, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	01db      	lsls	r3, r3, #7
 80057e2:	4413      	add	r3, r2
 80057e4:	3384      	adds	r3, #132	; 0x84
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	4611      	mov	r1, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	01d2      	lsls	r2, r2, #7
 80057f2:	440a      	add	r2, r1
 80057f4:	3284      	adds	r2, #132	; 0x84
 80057f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	01db      	lsls	r3, r3, #7
 8005806:	4413      	add	r3, r2
 8005808:	3384      	adds	r3, #132	; 0x84
 800580a:	461a      	mov	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	01db      	lsls	r3, r3, #7
 800581c:	4413      	add	r3, r2
 800581e:	3384      	adds	r3, #132	; 0x84
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	01db      	lsls	r3, r3, #7
 800582c:	440b      	add	r3, r1
 800582e:	3384      	adds	r3, #132	; 0x84
 8005830:	4619      	mov	r1, r3
 8005832:	4b58      	ldr	r3, [pc, #352]	; (8005994 <LTDC_SetConfig+0x32c>)
 8005834:	4013      	ands	r3, r2
 8005836:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	68f9      	ldr	r1, [r7, #12]
 8005842:	6809      	ldr	r1, [r1, #0]
 8005844:	4608      	mov	r0, r1
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	01c9      	lsls	r1, r1, #7
 800584a:	4401      	add	r1, r0
 800584c:	3184      	adds	r1, #132	; 0x84
 800584e:	4313      	orrs	r3, r2
 8005850:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	01db      	lsls	r3, r3, #7
 800585c:	4413      	add	r3, r2
 800585e:	3384      	adds	r3, #132	; 0x84
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	01db      	lsls	r3, r3, #7
 800586c:	4413      	add	r3, r2
 800586e:	3384      	adds	r3, #132	; 0x84
 8005870:	461a      	mov	r2, r3
 8005872:	2300      	movs	r3, #0
 8005874:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	01db      	lsls	r3, r3, #7
 8005880:	4413      	add	r3, r2
 8005882:	3384      	adds	r3, #132	; 0x84
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005894:	2304      	movs	r3, #4
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e01b      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d102      	bne.n	80058a8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80058a2:	2303      	movs	r3, #3
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	e014      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d00b      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d007      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d003      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058c4:	2b07      	cmp	r3, #7
 80058c6:	d102      	bne.n	80058ce <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80058c8:	2302      	movs	r3, #2
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	e001      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80058ce:	2301      	movs	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	01db      	lsls	r3, r3, #7
 80058dc:	4413      	add	r3, r2
 80058de:	3384      	adds	r3, #132	; 0x84
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	4611      	mov	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	01d2      	lsls	r2, r2, #7
 80058ec:	440a      	add	r2, r1
 80058ee:	3284      	adds	r2, #132	; 0x84
 80058f0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80058f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	fb02 f303 	mul.w	r3, r2, r3
 8005900:	041a      	lsls	r2, r3, #16
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	1acb      	subs	r3, r1, r3
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	fb01 f303 	mul.w	r3, r1, r3
 8005912:	3303      	adds	r3, #3
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	6809      	ldr	r1, [r1, #0]
 8005918:	4608      	mov	r0, r1
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	01c9      	lsls	r1, r1, #7
 800591e:	4401      	add	r1, r0
 8005920:	3184      	adds	r1, #132	; 0x84
 8005922:	4313      	orrs	r3, r2
 8005924:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	01db      	lsls	r3, r3, #7
 8005930:	4413      	add	r3, r2
 8005932:	3384      	adds	r3, #132	; 0x84
 8005934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	01db      	lsls	r3, r3, #7
 8005940:	440b      	add	r3, r1
 8005942:	3384      	adds	r3, #132	; 0x84
 8005944:	4619      	mov	r1, r3
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <LTDC_SetConfig+0x330>)
 8005948:	4013      	ands	r3, r2
 800594a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	01db      	lsls	r3, r3, #7
 8005956:	4413      	add	r3, r2
 8005958:	3384      	adds	r3, #132	; 0x84
 800595a:	461a      	mov	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	01db      	lsls	r3, r3, #7
 800596c:	4413      	add	r3, r2
 800596e:	3384      	adds	r3, #132	; 0x84
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	4611      	mov	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	01d2      	lsls	r2, r2, #7
 800597c:	440a      	add	r2, r1
 800597e:	3284      	adds	r2, #132	; 0x84
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	bf00      	nop
 8005988:	3724      	adds	r7, #36	; 0x24
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	fffff8f8 	.word	0xfffff8f8
 8005998:	fffff800 	.word	0xfffff800

0800599c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059aa:	6013      	str	r3, [r2, #0]
}
 80059ac:	bf00      	nop
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40007000 	.word	0x40007000

080059bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059ea:	f7fb f8a5 	bl	8000b38 <HAL_GetTick>
 80059ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059f0:	e009      	b.n	8005a06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059f2:	f7fb f8a1 	bl	8000b38 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a00:	d901      	bls.n	8005a06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e022      	b.n	8005a4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a12:	d1ee      	bne.n	80059f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a0f      	ldr	r2, [pc, #60]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a20:	f7fb f88a 	bl	8000b38 <HAL_GetTick>
 8005a24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a26:	e009      	b.n	8005a3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a28:	f7fb f886 	bl	8000b38 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a36:	d901      	bls.n	8005a3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e007      	b.n	8005a4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a48:	d1ee      	bne.n	8005a28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	40007000 	.word	0x40007000

08005a5c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005a68:	f7fb f866 	bl	8000b38 <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e073      	b.n	8005b60 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_QSPI_Init+0x2c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e06b      	b.n	8005b60 <HAL_QSPI_Init+0x104>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f014 f90d 	bl	8019cc4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005aaa:	f241 3188 	movw	r1, #5000	; 0x1388
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f85e 	bl	8005b70 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	021a      	lsls	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2120      	movs	r1, #32
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f856 	bl	8005b8c <QSPI_WaitFlagStateUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d135      	bne.n	8005b56 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <HAL_QSPI_Init+0x10c>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6852      	ldr	r2, [r2, #4]
 8005af8:	0611      	lsls	r1, r2, #24
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68d2      	ldr	r2, [r2, #12]
 8005afe:	4311      	orrs	r1, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	69d2      	ldr	r2, [r2, #28]
 8005b04:	4311      	orrs	r1, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6a12      	ldr	r2, [r2, #32]
 8005b0a:	4311      	orrs	r1, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <HAL_QSPI_Init+0x110>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6912      	ldr	r2, [r2, #16]
 8005b22:	0411      	lsls	r1, r2, #16
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6952      	ldr	r2, [r2, #20]
 8005b28:	4311      	orrs	r1, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6992      	ldr	r2, [r2, #24]
 8005b2e:	4311      	orrs	r1, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	00ffff2f 	.word	0x00ffff2f
 8005b6c:	ffe0f8fe 	.word	0xffe0f8fe

08005b70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005b9c:	e01a      	b.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d016      	beq.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005bac:	f7fa ffc4 	bl	8000b38 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d20b      	bcs.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	f043 0201 	orr.w	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e00e      	b.n	8005bf2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bf14      	ite	ne
 8005be2:	2301      	movne	r3, #1
 8005be4:	2300      	moveq	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1d6      	bne.n	8005b9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e25c      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8087 	beq.w	8005d2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c20:	4b96      	ldr	r3, [pc, #600]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 030c 	and.w	r3, r3, #12
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d00c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c2c:	4b93      	ldr	r3, [pc, #588]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d112      	bne.n	8005c5e <HAL_RCC_OscConfig+0x62>
 8005c38:	4b90      	ldr	r3, [pc, #576]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c44:	d10b      	bne.n	8005c5e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c46:	4b8d      	ldr	r3, [pc, #564]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d06c      	beq.n	8005d2c <HAL_RCC_OscConfig+0x130>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d168      	bne.n	8005d2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e236      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	d106      	bne.n	8005c76 <HAL_RCC_OscConfig+0x7a>
 8005c68:	4b84      	ldr	r3, [pc, #528]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a83      	ldr	r2, [pc, #524]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e02e      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x9c>
 8005c7e:	4b7f      	ldr	r3, [pc, #508]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a7e      	ldr	r2, [pc, #504]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4b7c      	ldr	r3, [pc, #496]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a7b      	ldr	r2, [pc, #492]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e01d      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCC_OscConfig+0xc0>
 8005ca2:	4b76      	ldr	r3, [pc, #472]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a75      	ldr	r2, [pc, #468]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4b73      	ldr	r3, [pc, #460]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a72      	ldr	r2, [pc, #456]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e00b      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005cbc:	4b6f      	ldr	r3, [pc, #444]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a6e      	ldr	r2, [pc, #440]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b6c      	ldr	r3, [pc, #432]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a6b      	ldr	r2, [pc, #428]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fa ff2c 	bl	8000b38 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce4:	f7fa ff28 	bl	8000b38 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b64      	cmp	r3, #100	; 0x64
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e1ea      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	4b61      	ldr	r3, [pc, #388]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0xe8>
 8005d02:	e014      	b.n	8005d2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fa ff18 	bl	8000b38 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d0c:	f7fa ff14 	bl	8000b38 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	; 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e1d6      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	4b57      	ldr	r3, [pc, #348]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x110>
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d069      	beq.n	8005e0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d3a:	4b50      	ldr	r3, [pc, #320]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d46:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d11c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x190>
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5e:	4b47      	ldr	r3, [pc, #284]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <HAL_RCC_OscConfig+0x17a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d001      	beq.n	8005d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e1aa      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	493d      	ldr	r1, [pc, #244]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	e040      	b.n	8005e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d023      	beq.n	8005ddc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d94:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a38      	ldr	r2, [pc, #224]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fa feca 	bl	8000b38 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da8:	f7fa fec6 	bl	8000b38 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e188      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dba:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc6:	4b2d      	ldr	r3, [pc, #180]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4929      	ldr	r1, [pc, #164]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
 8005dda:	e018      	b.n	8005e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fa fea6 	bl	8000b38 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fa fea2 	bl	8000b38 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e164      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d038      	beq.n	8005e8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d019      	beq.n	8005e56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fa fe83 	bl	8000b38 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e36:	f7fa fe7f 	bl	8000b38 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e141      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x23a>
 8005e54:	e01a      	b.n	8005e8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5a:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e62:	f7fa fe69 	bl	8000b38 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e6a:	f7fa fe65 	bl	8000b38 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d903      	bls.n	8005e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e127      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
 8005e7c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e80:	4b94      	ldr	r3, [pc, #592]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1ee      	bne.n	8005e6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80a4 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b8e      	ldr	r3, [pc, #568]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	4a8a      	ldr	r2, [pc, #552]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb2:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec2:	4b85      	ldr	r3, [pc, #532]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d118      	bne.n	8005f00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ece:	4b82      	ldr	r3, [pc, #520]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a81      	ldr	r2, [pc, #516]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eda:	f7fa fe2d 	bl	8000b38 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ee2:	f7fa fe29 	bl	8000b38 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b64      	cmp	r3, #100	; 0x64
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0eb      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ef4:	4b78      	ldr	r3, [pc, #480]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d106      	bne.n	8005f16 <HAL_RCC_OscConfig+0x31a>
 8005f08:	4b72      	ldr	r3, [pc, #456]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	4a71      	ldr	r2, [pc, #452]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	; 0x70
 8005f14:	e02d      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x33c>
 8005f1e:	4b6d      	ldr	r3, [pc, #436]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	4a6c      	ldr	r2, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	4a69      	ldr	r2, [pc, #420]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f30:	f023 0304 	bic.w	r3, r3, #4
 8005f34:	6713      	str	r3, [r2, #112]	; 0x70
 8005f36:	e01c      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b05      	cmp	r3, #5
 8005f3e:	d10c      	bne.n	8005f5a <HAL_RCC_OscConfig+0x35e>
 8005f40:	4b64      	ldr	r3, [pc, #400]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a63      	ldr	r2, [pc, #396]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4c:	4b61      	ldr	r3, [pc, #388]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	4a60      	ldr	r2, [pc, #384]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	; 0x70
 8005f58:	e00b      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f5a:	4b5e      	ldr	r3, [pc, #376]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	4a5d      	ldr	r2, [pc, #372]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	6713      	str	r3, [r2, #112]	; 0x70
 8005f66:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	4a5a      	ldr	r2, [pc, #360]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f6c:	f023 0304 	bic.w	r3, r3, #4
 8005f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d015      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7a:	f7fa fddd 	bl	8000b38 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f80:	e00a      	b.n	8005f98 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f82:	f7fa fdd9 	bl	8000b38 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e099      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f98:	4b4e      	ldr	r3, [pc, #312]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ee      	beq.n	8005f82 <HAL_RCC_OscConfig+0x386>
 8005fa4:	e014      	b.n	8005fd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa6:	f7fa fdc7 	bl	8000b38 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fac:	e00a      	b.n	8005fc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fae:	f7fa fdc3 	bl	8000b38 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e083      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc4:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ee      	bne.n	8005fae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d105      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	4a3e      	ldr	r2, [pc, #248]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d06f      	beq.n	80060ca <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fea:	4b3a      	ldr	r3, [pc, #232]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d067      	beq.n	80060c6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d149      	bne.n	8006092 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	4b35      	ldr	r3, [pc, #212]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fa fd95 	bl	8000b38 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006012:	f7fa fd91 	bl	8000b38 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e053      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006024:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1f0      	bne.n	8006012 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	019b      	lsls	r3, r3, #6
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	3b01      	subs	r3, #1
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	061b      	lsls	r3, r3, #24
 8006054:	4313      	orrs	r3, r2
 8006056:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800605c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605e:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fa fd65 	bl	8000b38 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006072:	f7fa fd61 	bl	8000b38 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e023      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006084:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <HAL_RCC_OscConfig+0x476>
 8006090:	e01b      	b.n	80060ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800609c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609e:	f7fa fd4b 	bl	8000b38 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fa fd47 	bl	8000b38 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e009      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f0      	bne.n	80060a6 <HAL_RCC_OscConfig+0x4aa>
 80060c4:	e001      	b.n	80060ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40007000 	.word	0x40007000

080060dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0ce      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060f4:	4b69      	ldr	r3, [pc, #420]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d910      	bls.n	8006124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006102:	4b66      	ldr	r3, [pc, #408]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 020f 	bic.w	r2, r3, #15
 800610a:	4964      	ldr	r1, [pc, #400]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006112:	4b62      	ldr	r3, [pc, #392]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0b6      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d020      	beq.n	8006172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800613c:	4b58      	ldr	r3, [pc, #352]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4a57      	ldr	r2, [pc, #348]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006154:	4b52      	ldr	r3, [pc, #328]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4a51      	ldr	r2, [pc, #324]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800615a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800615e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006160:	4b4f      	ldr	r3, [pc, #316]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	494c      	ldr	r1, [pc, #304]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d040      	beq.n	8006200 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006186:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d115      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e07d      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d107      	bne.n	80061ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619e:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e071      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ae:	4b3c      	ldr	r3, [pc, #240]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e069      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061be:	4b38      	ldr	r3, [pc, #224]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f023 0203 	bic.w	r2, r3, #3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4935      	ldr	r1, [pc, #212]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d0:	f7fa fcb2 	bl	8000b38 <HAL_GetTick>
 80061d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d6:	e00a      	b.n	80061ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d8:	f7fa fcae 	bl	8000b38 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e051      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ee:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 020c 	and.w	r2, r3, #12
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d1eb      	bne.n	80061d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006200:	4b26      	ldr	r3, [pc, #152]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d210      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	4b23      	ldr	r3, [pc, #140]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 020f 	bic.w	r2, r3, #15
 8006216:	4921      	ldr	r1, [pc, #132]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b1f      	ldr	r3, [pc, #124]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e030      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800623c:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4915      	ldr	r1, [pc, #84]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800625a:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	490d      	ldr	r1, [pc, #52]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800626e:	f000 f81d 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 8006272:	4601      	mov	r1, r0
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006280:	5cd3      	ldrb	r3, [r2, r3]
 8006282:	fa21 f303 	lsr.w	r3, r1, r3
 8006286:	4a08      	ldr	r2, [pc, #32]	; (80062a8 <HAL_RCC_ClockConfig+0x1cc>)
 8006288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800628a:	2000      	movs	r0, #0
 800628c:	f014 f8ee 	bl	801a46c <HAL_InitTick>

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023c00 	.word	0x40023c00
 80062a0:	40023800 	.word	0x40023800
 80062a4:	080252f8 	.word	0x080252f8
 80062a8:	20000060 	.word	0x20000060

080062ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	607b      	str	r3, [r7, #4]
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	2300      	movs	r3, #0
 80062bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062c2:	4b50      	ldr	r3, [pc, #320]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d007      	beq.n	80062de <HAL_RCC_GetSysClockFreq+0x32>
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d008      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0x38>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 808d 	bne.w	80063f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062d8:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <HAL_RCC_GetSysClockFreq+0x15c>)
 80062da:	60bb      	str	r3, [r7, #8]
       break;
 80062dc:	e08c      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062de:	4b4b      	ldr	r3, [pc, #300]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 80062e0:	60bb      	str	r3, [r7, #8]
      break;
 80062e2:	e089      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062e4:	4b47      	ldr	r3, [pc, #284]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062ee:	4b45      	ldr	r3, [pc, #276]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d023      	beq.n	8006342 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062fa:	4b42      	ldr	r3, [pc, #264]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	099b      	lsrs	r3, r3, #6
 8006300:	f04f 0400 	mov.w	r4, #0
 8006304:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	ea03 0501 	and.w	r5, r3, r1
 8006310:	ea04 0602 	and.w	r6, r4, r2
 8006314:	4a3d      	ldr	r2, [pc, #244]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 8006316:	fb02 f106 	mul.w	r1, r2, r6
 800631a:	2200      	movs	r2, #0
 800631c:	fb02 f205 	mul.w	r2, r2, r5
 8006320:	440a      	add	r2, r1
 8006322:	493a      	ldr	r1, [pc, #232]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 8006324:	fba5 0101 	umull	r0, r1, r5, r1
 8006328:	1853      	adds	r3, r2, r1
 800632a:	4619      	mov	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f04f 0400 	mov.w	r4, #0
 8006332:	461a      	mov	r2, r3
 8006334:	4623      	mov	r3, r4
 8006336:	f7f9 ffbb 	bl	80002b0 <__aeabi_uldivmod>
 800633a:	4603      	mov	r3, r0
 800633c:	460c      	mov	r4, r1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e049      	b.n	80063d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	f04f 0400 	mov.w	r4, #0
 800634c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	ea03 0501 	and.w	r5, r3, r1
 8006358:	ea04 0602 	and.w	r6, r4, r2
 800635c:	4629      	mov	r1, r5
 800635e:	4632      	mov	r2, r6
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f04f 0400 	mov.w	r4, #0
 8006368:	0154      	lsls	r4, r2, #5
 800636a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800636e:	014b      	lsls	r3, r1, #5
 8006370:	4619      	mov	r1, r3
 8006372:	4622      	mov	r2, r4
 8006374:	1b49      	subs	r1, r1, r5
 8006376:	eb62 0206 	sbc.w	r2, r2, r6
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	f04f 0400 	mov.w	r4, #0
 8006382:	0194      	lsls	r4, r2, #6
 8006384:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006388:	018b      	lsls	r3, r1, #6
 800638a:	1a5b      	subs	r3, r3, r1
 800638c:	eb64 0402 	sbc.w	r4, r4, r2
 8006390:	f04f 0100 	mov.w	r1, #0
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	00e2      	lsls	r2, r4, #3
 800639a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800639e:	00d9      	lsls	r1, r3, #3
 80063a0:	460b      	mov	r3, r1
 80063a2:	4614      	mov	r4, r2
 80063a4:	195b      	adds	r3, r3, r5
 80063a6:	eb44 0406 	adc.w	r4, r4, r6
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	02a2      	lsls	r2, r4, #10
 80063b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80063b8:	0299      	lsls	r1, r3, #10
 80063ba:	460b      	mov	r3, r1
 80063bc:	4614      	mov	r4, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	4621      	mov	r1, r4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f04f 0400 	mov.w	r4, #0
 80063c8:	461a      	mov	r2, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	f7f9 ff70 	bl	80002b0 <__aeabi_uldivmod>
 80063d0:	4603      	mov	r3, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	0c1b      	lsrs	r3, r3, #16
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	3301      	adds	r3, #1
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	60bb      	str	r3, [r7, #8]
      break;
 80063f0:	e002      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_RCC_GetSysClockFreq+0x15c>)
 80063f4:	60bb      	str	r3, [r7, #8]
      break;
 80063f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f8:	68bb      	ldr	r3, [r7, #8]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800
 8006408:	00f42400 	.word	0x00f42400
 800640c:	017d7840 	.word	0x017d7840

08006410 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_RCC_GetHCLKFreq+0x14>)
 8006416:	681b      	ldr	r3, [r3, #0]
}
 8006418:	4618      	mov	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000060 	.word	0x20000060

08006428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800642c:	f7ff fff0 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006430:	4601      	mov	r1, r0
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	0a9b      	lsrs	r3, r3, #10
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	4a03      	ldr	r2, [pc, #12]	; (800644c <HAL_RCC_GetPCLK1Freq+0x24>)
 800643e:	5cd3      	ldrb	r3, [r2, r3]
 8006440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40023800 	.word	0x40023800
 800644c:	08025308 	.word	0x08025308

08006450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006454:	f7ff ffdc 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006458:	4601      	mov	r1, r0
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	0b5b      	lsrs	r3, r3, #13
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	4a03      	ldr	r2, [pc, #12]	; (8006474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006466:	5cd3      	ldrb	r3, [r2, r3]
 8006468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40023800 	.word	0x40023800
 8006474:	08025308 	.word	0x08025308

08006478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	220f      	movs	r2, #15
 8006486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0203 	and.w	r2, r3, #3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <HAL_RCC_GetClockConfig+0x60>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	601a      	str	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40023c00 	.word	0x40023c00

080064dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d012      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006504:	4b69      	ldr	r3, [pc, #420]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a68      	ldr	r2, [pc, #416]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800650e:	6093      	str	r3, [r2, #8]
 8006510:	4b66      	ldr	r3, [pc, #408]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	4964      	ldr	r1, [pc, #400]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651a:	4313      	orrs	r3, r2
 800651c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006526:	2301      	movs	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006536:	4b5d      	ldr	r3, [pc, #372]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	4959      	ldr	r1, [pc, #356]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006554:	d101      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006556:	2301      	movs	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006562:	2301      	movs	r3, #1
 8006564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d017      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006572:	4b4e      	ldr	r3, [pc, #312]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006578:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	494a      	ldr	r1, [pc, #296]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006590:	d101      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006592:	2301      	movs	r3, #1
 8006594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 808b 	beq.w	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065c0:	4b3a      	ldr	r3, [pc, #232]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	4a39      	ldr	r2, [pc, #228]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ca:	6413      	str	r3, [r2, #64]	; 0x40
 80065cc:	4b37      	ldr	r3, [pc, #220]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065d8:	4b35      	ldr	r3, [pc, #212]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a34      	ldr	r2, [pc, #208]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e4:	f7fa faa8 	bl	8000b38 <HAL_GetTick>
 80065e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ec:	f7fa faa4 	bl	8000b38 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	; 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e355      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065fe:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800660a:	4b28      	ldr	r3, [pc, #160]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006612:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d035      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	429a      	cmp	r2, r3
 8006626:	d02e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006628:	4b20      	ldr	r3, [pc, #128]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006630:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006632:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a1d      	ldr	r2, [pc, #116]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663e:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	4a1a      	ldr	r2, [pc, #104]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006648:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800664a:	4a18      	ldr	r2, [pc, #96]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006650:	4b16      	ldr	r3, [pc, #88]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b01      	cmp	r3, #1
 800665a:	d114      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fa fa6c 	bl	8000b38 <HAL_GetTick>
 8006660:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006662:	e00a      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006664:	f7fa fa68 	bl	8000b38 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e317      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0ee      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006692:	d111      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006694:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066a2:	400b      	ands	r3, r1
 80066a4:	4901      	ldr	r1, [pc, #4]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	608b      	str	r3, [r1, #8]
 80066aa:	e00b      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40007000 	.word	0x40007000
 80066b4:	0ffffcff 	.word	0x0ffffcff
 80066b8:	4bb0      	ldr	r3, [pc, #704]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4aaf      	ldr	r2, [pc, #700]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066c2:	6093      	str	r3, [r2, #8]
 80066c4:	4bad      	ldr	r3, [pc, #692]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d0:	49aa      	ldr	r1, [pc, #680]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d010      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066e2:	4ba6      	ldr	r3, [pc, #664]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e8:	4aa4      	ldr	r2, [pc, #656]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066f2:	4ba2      	ldr	r3, [pc, #648]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	499f      	ldr	r1, [pc, #636]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006710:	4b9a      	ldr	r3, [pc, #616]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671e:	4997      	ldr	r1, [pc, #604]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006732:	4b92      	ldr	r3, [pc, #584]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006740:	498e      	ldr	r1, [pc, #568]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006754:	4b89      	ldr	r3, [pc, #548]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006762:	4986      	ldr	r1, [pc, #536]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006776:	4b81      	ldr	r3, [pc, #516]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	497d      	ldr	r1, [pc, #500]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006798:	4b78      	ldr	r3, [pc, #480]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f023 0203 	bic.w	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	4975      	ldr	r1, [pc, #468]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067ba:	4b70      	ldr	r3, [pc, #448]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c0:	f023 020c 	bic.w	r2, r3, #12
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c8:	496c      	ldr	r1, [pc, #432]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067dc:	4b67      	ldr	r3, [pc, #412]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	4964      	ldr	r1, [pc, #400]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067fe:	4b5f      	ldr	r3, [pc, #380]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006804:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	495b      	ldr	r1, [pc, #364]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006820:	4b56      	ldr	r3, [pc, #344]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	4953      	ldr	r1, [pc, #332]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006842:	4b4e      	ldr	r3, [pc, #312]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006848:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006850:	494a      	ldr	r1, [pc, #296]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006864:	4b45      	ldr	r3, [pc, #276]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006872:	4942      	ldr	r1, [pc, #264]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006886:	4b3d      	ldr	r3, [pc, #244]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006894:	4939      	ldr	r1, [pc, #228]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068a8:	4b34      	ldr	r3, [pc, #208]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b6:	4931      	ldr	r1, [pc, #196]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d011      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068ca:	4b2c      	ldr	r3, [pc, #176]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d8:	4928      	ldr	r1, [pc, #160]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e8:	d101      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80068ea:	2301      	movs	r3, #1
 80068ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80068fa:	2301      	movs	r3, #1
 80068fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006910:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006918:	4918      	ldr	r1, [pc, #96]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800692c:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006932:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693c:	490f      	ldr	r1, [pc, #60]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d005      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006952:	f040 80d8 	bne.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a08      	ldr	r2, [pc, #32]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800695c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006962:	f7fa f8e9 	bl	8000b38 <HAL_GetTick>
 8006966:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006968:	e00a      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800696a:	f7fa f8e5 	bl	8000b38 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b64      	cmp	r3, #100	; 0x64
 8006976:	d903      	bls.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e196      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800697c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006980:	4b6c      	ldr	r3, [pc, #432]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ee      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d021      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11d      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069a0:	4b64      	ldr	r3, [pc, #400]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a6:	0c1b      	lsrs	r3, r3, #16
 80069a8:	f003 0303 	and.w	r3, r3, #3
 80069ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069ae:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	019a      	lsls	r2, r3, #6
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	061b      	lsls	r3, r3, #24
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	071b      	lsls	r3, r3, #28
 80069d4:	4957      	ldr	r1, [pc, #348]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f0:	d00a      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d02e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a06:	d129      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a08:	4b4a      	ldr	r3, [pc, #296]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0e:	0c1b      	lsrs	r3, r3, #16
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a16:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1c:	0f1b      	lsrs	r3, r3, #28
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	019a      	lsls	r2, r3, #6
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	061b      	lsls	r3, r3, #24
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	071b      	lsls	r3, r3, #28
 8006a3c:	493d      	ldr	r1, [pc, #244]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a44:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4a:	f023 021f 	bic.w	r2, r3, #31
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4937      	ldr	r1, [pc, #220]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01d      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a68:	4b32      	ldr	r3, [pc, #200]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6e:	0e1b      	lsrs	r3, r3, #24
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a76:	4b2f      	ldr	r3, [pc, #188]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7c:	0f1b      	lsrs	r3, r3, #28
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	019a      	lsls	r2, r3, #6
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	431a      	orrs	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	071b      	lsls	r3, r3, #28
 8006a9c:	4925      	ldr	r1, [pc, #148]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d011      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	019a      	lsls	r2, r3, #6
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	071b      	lsls	r3, r3, #28
 8006acc:	4919      	ldr	r1, [pc, #100]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ada:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae0:	f7fa f82a 	bl	8000b38 <HAL_GetTick>
 8006ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ae8:	f7fa f826 	bl	8000b38 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	; 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e0d7      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 80cd 	bne.w	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b1a:	f7fa f80d 	bl	8000b38 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b20:	e00a      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b22:	f7fa f809 	bl	8000b38 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b64      	cmp	r3, #100	; 0x64
 8006b2e:	d903      	bls.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e0ba      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006b34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b38:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b44:	d0ed      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02e      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d12a      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	0c1b      	lsrs	r3, r3, #16
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b7c:	4b4d      	ldr	r3, [pc, #308]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b82:	0f1b      	lsrs	r3, r3, #28
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	019a      	lsls	r2, r3, #6
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	071b      	lsls	r3, r3, #28
 8006ba2:	4944      	ldr	r1, [pc, #272]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	493d      	ldr	r1, [pc, #244]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d022      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd8:	d11d      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	0e1b      	lsrs	r3, r3, #24
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006be8:	4b32      	ldr	r3, [pc, #200]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	0f1b      	lsrs	r3, r3, #28
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	019a      	lsls	r2, r3, #6
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	041b      	lsls	r3, r3, #16
 8006c02:	431a      	orrs	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	071b      	lsls	r3, r3, #28
 8006c0e:	4929      	ldr	r1, [pc, #164]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d028      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c30:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	019a      	lsls	r2, r3, #6
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	071b      	lsls	r3, r3, #28
 8006c56:	4917      	ldr	r1, [pc, #92]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	4911      	ldr	r1, [pc, #68]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c74:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c80:	f7f9 ff5a 	bl	8000b38 <HAL_GetTick>
 8006c84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c88:	f7f9 ff56 	bl	8000b38 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	; 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e007      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca6:	d1ef      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800

08006cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cd6:	f040 8086 	bne.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006cda:	4b8d      	ldr	r3, [pc, #564]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ce8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf0:	d03e      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cf6:	d073      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d000      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006cfc:	e074      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006cfe:	4b84      	ldr	r3, [pc, #528]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d0a:	4b81      	ldr	r3, [pc, #516]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	4a80      	ldr	r2, [pc, #512]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	e007      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d1c:	4b7c      	ldr	r3, [pc, #496]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d24:	4a7c      	ldr	r2, [pc, #496]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d2c:	4b78      	ldr	r3, [pc, #480]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006d3a:	4b75      	ldr	r3, [pc, #468]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d40:	099b      	lsrs	r3, r3, #6
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	fb02 f203 	mul.w	r2, r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d52:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006d54:	4b6e      	ldr	r3, [pc, #440]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	3301      	adds	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]
        break;
 8006d6e:	e03b      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d70:	4b67      	ldr	r3, [pc, #412]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d7c:	4b64      	ldr	r3, [pc, #400]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	4a63      	ldr	r2, [pc, #396]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	e007      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d8e:	4b60      	ldr	r3, [pc, #384]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d96:	4a60      	ldr	r2, [pc, #384]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d9e:	4b5c      	ldr	r3, [pc, #368]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da4:	0e1b      	lsrs	r3, r3, #24
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006dac:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db2:	099b      	lsrs	r3, r3, #6
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	fb02 f203 	mul.w	r2, r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006dc6:	4b52      	ldr	r3, [pc, #328]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	617b      	str	r3, [r7, #20]
        break;
 8006dde:	e003      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006de0:	4b4e      	ldr	r3, [pc, #312]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006de2:	617b      	str	r3, [r7, #20]
        break;
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006de6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dee:	f040 8086 	bne.w	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006df2:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006e00:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e08:	d03e      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e0e:	d073      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d000      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006e14:	e074      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e16:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d108      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e22:	4b3b      	ldr	r3, [pc, #236]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e2a:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	e007      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e34:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e3c:	4a36      	ldr	r2, [pc, #216]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e42:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e44:	4b32      	ldr	r3, [pc, #200]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4a:	0e1b      	lsrs	r3, r3, #24
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e52:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e58:	099b      	lsrs	r3, r3, #6
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	fb02 f203 	mul.w	r2, r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006e6c:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 031f 	and.w	r3, r3, #31
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	617b      	str	r3, [r7, #20]
        break;
 8006e86:	e03b      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e88:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e94:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	e007      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eae:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006eb6:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ebc:	0e1b      	lsrs	r3, r3, #24
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006ec4:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eca:	099b      	lsrs	r3, r3, #6
 8006ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	fb02 f203 	mul.w	r2, r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	617b      	str	r3, [r7, #20]
        break;
 8006ef6:	e003      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ef8:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006efa:	617b      	str	r3, [r7, #20]
        break;
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006efe:	bf00      	nop

  return frequency;
 8006f00:	697b      	ldr	r3, [r7, #20]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	371c      	adds	r7, #28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	00f42400 	.word	0x00f42400
 8006f18:	017d7840 	.word	0x017d7840
 8006f1c:	00bb8000 	.word	0x00bb8000

08006f20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e06b      	b.n	800700a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7f5b      	ldrb	r3, [r3, #29]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d105      	bne.n	8006f48 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f012 ff4e 	bl	8019de4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	22ca      	movs	r2, #202	; 0xca
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2253      	movs	r2, #83	; 0x53
 8006f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb00 	bl	8007564 <RTC_EnterInitMode>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	22ff      	movs	r2, #255	; 0xff
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2204      	movs	r2, #4
 8006f76:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e046      	b.n	800700a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6899      	ldr	r1, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b23      	ldr	r3, [pc, #140]	; (8007014 <HAL_RTC_Init+0xf4>)
 8006f88:	400b      	ands	r3, r1
 8006f8a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6899      	ldr	r1, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68d2      	ldr	r2, [r2, #12]
 8006fb2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6919      	ldr	r1, [r3, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	041a      	lsls	r2, r3, #16
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0208 	bic.w	r2, r2, #8
 8006fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	22ff      	movs	r2, #255	; 0xff
 8007000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	ff8fffbf 	.word	0xff8fffbf

08007018 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	7f1b      	ldrb	r3, [r3, #28]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_RTC_SetTime+0x1c>
 8007030:	2302      	movs	r3, #2
 8007032:	e0a8      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2202      	movs	r2, #2
 800703e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d126      	bne.n	8007094 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 faac 	bl	80075bc <RTC_ByteToBcd2>
 8007064:	4603      	mov	r3, r0
 8007066:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 faa5 	bl	80075bc <RTC_ByteToBcd2>
 8007072:	4603      	mov	r3, r0
 8007074:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007076:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	789b      	ldrb	r3, [r3, #2]
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fa9d 	bl	80075bc <RTC_ByteToBcd2>
 8007082:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007084:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	7b1b      	ldrb	r3, [r3, #12]
 800708c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	e018      	b.n	80070c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2200      	movs	r2, #0
 80070a6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070b4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	7b1b      	ldrb	r3, [r3, #12]
 80070c0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	22ca      	movs	r2, #202	; 0xca
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2253      	movs	r2, #83	; 0x53
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fa44 	bl	8007564 <RTC_EnterInitMode>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	22ff      	movs	r2, #255	; 0xff
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2204      	movs	r2, #4
 80070ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e045      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	4b23      	ldr	r3, [pc, #140]	; (8007190 <HAL_RTC_SetTime+0x178>)
 8007102:	400b      	ands	r3, r1
 8007104:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007114:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800713c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b00      	cmp	r3, #0
 800714a:	d111      	bne.n	8007170 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f9e1 	bl	8007514 <HAL_RTC_WaitForSynchro>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	22ff      	movs	r2, #255	; 0xff
 800715e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2204      	movs	r2, #4
 8007164:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e00a      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	22ff      	movs	r2, #255	; 0xff
 8007176:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007184:	2300      	movs	r3, #0
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd90      	pop	{r4, r7, pc}
 800718e:	bf00      	nop
 8007190:	007f7f7f 	.word	0x007f7f7f

08007194 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	7f1b      	ldrb	r3, [r3, #28]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_RTC_SetDate+0x1c>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e092      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2202      	movs	r2, #2
 80071ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10e      	bne.n	80071e0 <HAL_RTC_SetDate+0x4c>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	f003 0310 	and.w	r3, r3, #16
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	f023 0310 	bic.w	r3, r3, #16
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	330a      	adds	r3, #10
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d11c      	bne.n	8007220 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	78db      	ldrb	r3, [r3, #3]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f9e6 	bl	80075bc <RTC_ByteToBcd2>
 80071f0:	4603      	mov	r3, r0
 80071f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 f9df 	bl	80075bc <RTC_ByteToBcd2>
 80071fe:	4603      	mov	r3, r0
 8007200:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007202:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	789b      	ldrb	r3, [r3, #2]
 8007208:	4618      	mov	r0, r3
 800720a:	f000 f9d7 	bl	80075bc <RTC_ByteToBcd2>
 800720e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007210:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e00e      	b.n	800723e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	78db      	ldrb	r3, [r3, #3]
 8007224:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800722c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007232:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	22ca      	movs	r2, #202	; 0xca
 8007244:	625a      	str	r2, [r3, #36]	; 0x24
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2253      	movs	r2, #83	; 0x53
 800724c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f988 	bl	8007564 <RTC_EnterInitMode>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	22ff      	movs	r2, #255	; 0xff
 8007260:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2204      	movs	r2, #4
 8007266:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e031      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <HAL_RTC_SetDate+0x14c>)
 800727a:	400b      	ands	r3, r1
 800727c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800728c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d111      	bne.n	80072c0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f939 	bl	8007514 <HAL_RTC_WaitForSynchro>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	22ff      	movs	r2, #255	; 0xff
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2204      	movs	r2, #4
 80072b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e00a      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	22ff      	movs	r2, #255	; 0xff
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80072d4:	2300      	movs	r3, #0
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd90      	pop	{r4, r7, pc}
 80072de:	bf00      	nop
 80072e0:	00ffff3f 	.word	0x00ffff3f

080072e4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80072e4:	b590      	push	{r4, r7, lr}
 80072e6:	b089      	sub	sp, #36	; 0x24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7f1b      	ldrb	r3, [r3, #28]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_RTC_SetAlarm+0x24>
 8007304:	2302      	movs	r3, #2
 8007306:	e101      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2202      	movs	r2, #2
 8007312:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d137      	bne.n	800738a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f942 	bl	80075bc <RTC_ByteToBcd2>
 8007338:	4603      	mov	r3, r0
 800733a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f93b 	bl	80075bc <RTC_ByteToBcd2>
 8007346:	4603      	mov	r3, r0
 8007348:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800734a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	789b      	ldrb	r3, [r3, #2]
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f933 	bl	80075bc <RTC_ByteToBcd2>
 8007356:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007358:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	7b1b      	ldrb	r3, [r3, #12]
 8007360:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007362:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f925 	bl	80075bc <RTC_ByteToBcd2>
 8007372:	4603      	mov	r3, r0
 8007374:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007376:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800737e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007384:	4313      	orrs	r3, r2
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	e023      	b.n	80073d2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	785b      	ldrb	r3, [r3, #1]
 80073a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073aa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80073b0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	7b1b      	ldrb	r3, [r3, #12]
 80073b6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80073b8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80073c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073ce:	4313      	orrs	r3, r2
 80073d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	22ca      	movs	r2, #202	; 0xca
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2253      	movs	r2, #83	; 0x53
 80073ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f6:	d13f      	bne.n	8007478 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007406:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007416:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007418:	f7f9 fb8e 	bl	8000b38 <HAL_GetTick>
 800741c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800741e:	e013      	b.n	8007448 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007420:	f7f9 fb8a 	bl	8000b38 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742e:	d90b      	bls.n	8007448 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2203      	movs	r2, #3
 800743c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e061      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0e4      	beq.n	8007420 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007474:	609a      	str	r2, [r3, #8]
 8007476:	e03e      	b.n	80074f6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007486:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007496:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007498:	f7f9 fb4e 	bl	8000b38 <HAL_GetTick>
 800749c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800749e:	e013      	b.n	80074c8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074a0:	f7f9 fb4a 	bl	8000b38 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ae:	d90b      	bls.n	80074c8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2203      	movs	r2, #3
 80074bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e021      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0e4      	beq.n	80074a0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	22ff      	movs	r2, #255	; 0xff
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3724      	adds	r7, #36	; 0x24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd90      	pop	{r4, r7, pc}

08007514 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800752e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007530:	f7f9 fb02 	bl	8000b38 <HAL_GetTick>
 8007534:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007536:	e009      	b.n	800754c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007538:	f7f9 fafe 	bl	8000b38 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007546:	d901      	bls.n	800754c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e007      	b.n	800755c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0ee      	beq.n	8007538 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d119      	bne.n	80075b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f04f 32ff 	mov.w	r2, #4294967295
 8007586:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007588:	f7f9 fad6 	bl	8000b38 <HAL_GetTick>
 800758c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800758e:	e009      	b.n	80075a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007590:	f7f9 fad2 	bl	8000b38 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800759e:	d901      	bls.n	80075a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e007      	b.n	80075b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0ee      	beq.n	8007590 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80075ca:	e005      	b.n	80075d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3301      	adds	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	3b0a      	subs	r3, #10
 80075d6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b09      	cmp	r3, #9
 80075dc:	d8f6      	bhi.n	80075cc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b2db      	uxtb	r3, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	7f1b      	ldrb	r3, [r3, #28]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007610:	2302      	movs	r3, #2
 8007612:	e03e      	b.n	8007692 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2202      	movs	r2, #2
 800761e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007628:	4013      	ands	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	22ca      	movs	r2, #202	; 0xca
 800763a:	625a      	str	r2, [r3, #36]	; 0x24
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2253      	movs	r2, #83	; 0x53
 8007642:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0206 	bic.w	r2, r2, #6
 8007652:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	430a      	orrs	r2, r1
 8007662:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800767a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	fffff7f7 	.word	0xfffff7f7

080076a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e149      	b.n	8007956 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f012 fe5e 	bl	801a398 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f94f 	bl	8007988 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d007      	beq.n	8007702 <HAL_SAI_Init+0x5e>
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d302      	bcc.n	80076fc <HAL_SAI_Init+0x58>
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d006      	beq.n	8007708 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80076fa:	e008      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]
      break;
 8007700:	e005      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007702:	2310      	movs	r3, #16
 8007704:	61fb      	str	r3, [r7, #28]
      break;
 8007706:	e002      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007708:	2320      	movs	r3, #32
 800770a:	61fb      	str	r3, [r7, #28]
      break;
 800770c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d81d      	bhi.n	8007752 <HAL_SAI_Init+0xae>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <HAL_SAI_Init+0x78>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800772d 	.word	0x0800772d
 8007720:	08007733 	.word	0x08007733
 8007724:	0800773b 	.word	0x0800773b
 8007728:	08007743 	.word	0x08007743
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007730:	e010      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007736:	617b      	str	r3, [r7, #20]
      }
      break;
 8007738:	e00c      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800773a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800773e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007740:	e008      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007746:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007750:	e000      	b.n	8007754 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007752:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a81      	ldr	r2, [pc, #516]	; (8007960 <HAL_SAI_Init+0x2bc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <HAL_SAI_Init+0xc4>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a80      	ldr	r2, [pc, #512]	; (8007964 <HAL_SAI_Init+0x2c0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d103      	bne.n	8007770 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007768:	4a7f      	ldr	r2, [pc, #508]	; (8007968 <HAL_SAI_Init+0x2c4>)
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e002      	b.n	8007776 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007770:	4a7e      	ldr	r2, [pc, #504]	; (800796c <HAL_SAI_Init+0x2c8>)
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d043      	beq.n	8007806 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a76      	ldr	r2, [pc, #472]	; (8007960 <HAL_SAI_Init+0x2bc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_SAI_Init+0xf2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a74      	ldr	r2, [pc, #464]	; (8007964 <HAL_SAI_Init+0x2c0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d104      	bne.n	80077a0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007796:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800779a:	f7ff fa8d 	bl	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800779e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a72      	ldr	r2, [pc, #456]	; (8007970 <HAL_SAI_Init+0x2cc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_SAI_Init+0x110>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a71      	ldr	r2, [pc, #452]	; (8007974 <HAL_SAI_Init+0x2d0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d104      	bne.n	80077be <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80077b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80077b8:	f7ff fa7e 	bl	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 80077bc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	025b      	lsls	r3, r3, #9
 80077d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a67      	ldr	r2, [pc, #412]	; (8007978 <HAL_SAI_Init+0x2d4>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	08da      	lsrs	r2, r3, #3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	4b64      	ldr	r3, [pc, #400]	; (8007978 <HAL_SAI_Init+0x2d4>)
 80077e8:	fba3 2301 	umull	r2, r3, r3, r1
 80077ec:	08da      	lsrs	r2, r3, #3
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	1aca      	subs	r2, r1, r3
 80077f8:	2a08      	cmp	r2, #8
 80077fa:	d904      	bls.n	8007806 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_SAI_Init+0x172>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d109      	bne.n	800782a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_SAI_Init+0x17e>
 800781e:	2300      	movs	r3, #0
 8007820:	e001      	b.n	8007826 <HAL_SAI_Init+0x182>
 8007822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e008      	b.n	800783c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d102      	bne.n	8007838 <HAL_SAI_Init+0x194>
 8007832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007836:	e000      	b.n	800783a <HAL_SAI_Init+0x196>
 8007838:	2300      	movs	r3, #0
 800783a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6819      	ldr	r1, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b4d      	ldr	r3, [pc, #308]	; (800797c <HAL_SAI_Init+0x2d8>)
 8007848:	400b      	ands	r3, r1
 800784a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6819      	ldr	r1, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007860:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	431a      	orrs	r2, r3
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007874:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007880:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	051b      	lsls	r3, r3, #20
 8007888:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6859      	ldr	r1, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	4b38      	ldr	r3, [pc, #224]	; (8007980 <HAL_SAI_Init+0x2dc>)
 800789e:	400b      	ands	r3, r1
 80078a0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6859      	ldr	r1, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699a      	ldr	r2, [r3, #24]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6899      	ldr	r1, [r3, #8]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b2e      	ldr	r3, [pc, #184]	; (8007984 <HAL_SAI_Init+0x2e0>)
 80078cc:	400b      	ands	r3, r1
 80078ce:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6899      	ldr	r1, [r3, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078e0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80078e6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80078ec:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	3b01      	subs	r3, #1
 80078f4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80078f6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68d9      	ldr	r1, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800790e:	400b      	ands	r3, r1
 8007910:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68d9      	ldr	r1, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007920:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007926:	041b      	lsls	r3, r3, #16
 8007928:	431a      	orrs	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792e:	3b01      	subs	r3, #1
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40015804 	.word	0x40015804
 8007964:	40015824 	.word	0x40015824
 8007968:	40015800 	.word	0x40015800
 800796c:	40015c00 	.word	0x40015c00
 8007970:	40015c04 	.word	0x40015c04
 8007974:	40015c24 	.word	0x40015c24
 8007978:	cccccccd 	.word	0xcccccccd
 800797c:	ff05c010 	.word	0xff05c010
 8007980:	ffff1ff0 	.word	0xffff1ff0
 8007984:	fff88000 	.word	0xfff88000

08007988 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007988:	b490      	push	{r4, r7}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <SAI_Disable+0x64>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <SAI_Disable+0x68>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	0b1b      	lsrs	r3, r3, #12
 800799c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079b0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80079b2:	4623      	mov	r3, r4
 80079b4:	1e5c      	subs	r4, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	73fb      	strb	r3, [r7, #15]
      break;
 80079ce:	e006      	b.n	80079de <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e9      	bne.n	80079b2 <SAI_Disable+0x2a>

  return status;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc90      	pop	{r4, r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	20000060 	.word	0x20000060
 80079f0:	95cbec1b 	.word	0x95cbec1b

080079f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e01d      	b.n	8007a42 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f012 f9fd 	bl	8019e18 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2203      	movs	r2, #3
 8007a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f80f 	bl	8007a4a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a4a:	b5b0      	push	{r4, r5, r7, lr}
 8007a4c:	b08e      	sub	sp, #56	; 0x38
 8007a4e:	af04      	add	r7, sp, #16
 8007a50:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a62:	2300      	movs	r3, #0
 8007a64:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007a6a:	2376      	movs	r3, #118	; 0x76
 8007a6c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681d      	ldr	r5, [r3, #0]
 8007a72:	466c      	mov	r4, sp
 8007a74:	f107 0318 	add.w	r3, r7, #24
 8007a78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a86:	4628      	mov	r0, r5
 8007a88:	f002 ff68 	bl	800a95c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a9a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f002 ff94 	bl	800a9ce <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ab4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8007ab6:	2002      	movs	r0, #2
 8007ab8:	f7f9 f84a 	bl	8000b50 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fe24 	bl	800870a <SD_PowerON>
 8007ac2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e013      	b.n	8007b0a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fd48 	bl	8008578 <SD_InitCard>
 8007ae8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3728      	adds	r7, #40	; 0x28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b14 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	; 0x30
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0b0      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f040 80a9 	bne.w	8007c9c <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d907      	bls.n	8007b6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e097      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2203      	movs	r2, #3
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007b8c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	4a45      	ldr	r2, [pc, #276]	; (8007ca8 <HAL_SD_ReadBlocks_DMA+0x194>)
 8007b94:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	4a44      	ldr	r2, [pc, #272]	; (8007cac <HAL_SD_ReadBlocks_DMA+0x198>)
 8007b9c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3380      	adds	r3, #128	; 0x80
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	025b      	lsls	r3, r3, #9
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	f7f9 fccb 	bl	8001554 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0208 	orr.w	r2, r2, #8
 8007bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d002      	beq.n	8007bdc <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	025b      	lsls	r3, r3, #9
 8007bda:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007be0:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	025b      	lsls	r3, r3, #9
 8007be6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007be8:	2390      	movs	r3, #144	; 0x90
 8007bea:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bec:	2302      	movs	r3, #2
 8007bee:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f107 0214 	add.w	r2, r7, #20
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f002 ff4c 	bl	800aaa0 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c10:	4618      	mov	r0, r3
 8007c12:	f002 ff71 	bl	800aaf8 <SDMMC_CmdBlockLength>
 8007c16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d010      	beq.n	8007c40 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e02e      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d90a      	bls.n	8007c5c <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2282      	movs	r2, #130	; 0x82
 8007c4a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f002 ff98 	bl	800ab88 <SDMMC_CmdReadMultiBlock>
 8007c58:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c5a:	e009      	b.n	8007c70 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2281      	movs	r2, #129	; 0x81
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 ff69 	bl	800ab40 <SDMMC_CmdReadSingleBlock>
 8007c6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d010      	beq.n	8007c98 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	431a      	orrs	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e002      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e000      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007c9c:	2302      	movs	r3, #2
  }
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3730      	adds	r7, #48	; 0x30
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	08008475 	.word	0x08008475
 8007cac:	080084e3 	.word	0x080084e3

08007cb0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08c      	sub	sp, #48	; 0x30
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d107      	bne.n	8007cd8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0b0      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	f040 80a9 	bne.w	8007e38 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d907      	bls.n	8007d0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e097      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2200      	movs	r2, #0
 8007d18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 021a 	orr.w	r2, r2, #26
 8007d28:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	4a45      	ldr	r2, [pc, #276]	; (8007e44 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007d30:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	4a44      	ldr	r2, [pc, #272]	; (8007e48 <HAL_SD_WriteBlocks_DMA+0x198>)
 8007d38:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	2200      	movs	r2, #0
 8007d40:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d002      	beq.n	8007d50 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	025b      	lsls	r3, r3, #9
 8007d4e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 fecd 	bl	800aaf8 <SDMMC_CmdBlockLength>
 8007d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d010      	beq.n	8007d88 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e058      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d90a      	bls.n	8007da4 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	22a0      	movs	r2, #160	; 0xa0
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 ff3c 	bl	800ac18 <SDMMC_CmdWriteMultiBlock>
 8007da0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007da2:	e009      	b.n	8007db8 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2290      	movs	r2, #144	; 0x90
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f002 ff0d 	bl	800abd0 <SDMMC_CmdWriteSingleBlock>
 8007db6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d010      	beq.n	8007de0 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e02c      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0208 	orr.w	r2, r2, #8
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3380      	adds	r3, #128	; 0x80
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	025b      	lsls	r3, r3, #9
 8007e02:	089b      	lsrs	r3, r3, #2
 8007e04:	f7f9 fba6 	bl	8001554 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e08:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0c:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	025b      	lsls	r3, r3, #9
 8007e12:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e14:	2390      	movs	r3, #144	; 0x90
 8007e16:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f107 0214 	add.w	r2, r7, #20
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f002 fe36 	bl	800aaa0 <SDMMC_ConfigData>
    
    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3730      	adds	r7, #48	; 0x30
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	0800844b 	.word	0x0800844b
 8007e48:	080084e3 	.word	0x080084e3

08007e4c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	099b      	lsrs	r3, r3, #6
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	089b      	lsrs	r3, r3, #2
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea8:	0c1b      	lsrs	r3, r3, #16
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007edc:	0e1b      	lsrs	r3, r3, #24
 8007ede:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	091b      	lsrs	r3, r3, #4
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	09db      	lsrs	r3, r3, #7
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	099b      	lsrs	r3, r3, #6
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	091b      	lsrs	r3, r3, #4
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 8086 	bne.w	8008084 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	029b      	lsls	r3, r3, #10
 8007f7c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	431a      	orrs	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9e:	0e1b      	lsrs	r3, r3, #24
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	099b      	lsrs	r3, r3, #6
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd8:	0c1b      	lsrs	r3, r3, #16
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	089b      	lsrs	r3, r3, #2
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0306 	and.w	r3, r3, #6
 800800a:	b2da      	uxtb	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008014:	0a1b      	lsrs	r3, r3, #8
 8008016:	b2db      	uxtb	r3, r3
 8008018:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	7e1b      	ldrb	r3, [r3, #24]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	09db      	lsrs	r3, r3, #7
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	b2db      	uxtb	r3, r3
 800802c:	4313      	orrs	r3, r2
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	7e1b      	ldrb	r3, [r3, #24]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	3302      	adds	r3, #2
 8008046:	2201      	movs	r2, #1
 8008048:	409a      	lsls	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	fb02 f203 	mul.w	r2, r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	7a1b      	ldrb	r3, [r3, #8]
 800805a:	b2db      	uxtb	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	2301      	movs	r3, #1
 8008060:	4093      	lsls	r3, r2
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008070:	0a52      	lsrs	r2, r2, #9
 8008072:	fb02 f203 	mul.w	r2, r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008080:	661a      	str	r2, [r3, #96]	; 0x60
 8008082:	e04d      	b.n	8008120 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008088:	2b01      	cmp	r3, #1
 800808a:	d138      	bne.n	80080fe <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008090:	b2db      	uxtb	r3, r3
 8008092:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a4:	0e1b      	lsrs	r3, r3, #24
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	431a      	orrs	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080bc:	0c1b      	lsrs	r3, r3, #16
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d2:	0a1b      	lsrs	r3, r3, #8
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	3301      	adds	r3, #1
 80080de:	029a      	lsls	r2, r3, #10
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080f2:	659a      	str	r2, [r3, #88]	; 0x58
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	661a      	str	r2, [r3, #96]	; 0x60
 80080fc:	e010      	b.n	8008120 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e0c1      	b.n	80082a4 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	099b      	lsrs	r3, r3, #6
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800813c:	b2da      	uxtb	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008146:	b2db      	uxtb	r3, r3
 8008148:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	7e9b      	ldrb	r3, [r3, #26]
 800814e:	b2da      	uxtb	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	09db      	lsrs	r3, r3, #7
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	4313      	orrs	r3, r2
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816c:	b2da      	uxtb	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	0e1b      	lsrs	r3, r3, #24
 8008178:	b2db      	uxtb	r3, r3
 800817a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	09db      	lsrs	r3, r3, #7
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	095b      	lsrs	r3, r3, #5
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 030c 	and.w	r3, r3, #12
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	7fdb      	ldrb	r3, [r3, #31]
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	099b      	lsrs	r3, r3, #6
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	095b      	lsrs	r3, r3, #5
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008210:	0a1b      	lsrs	r3, r3, #8
 8008212:	b2db      	uxtb	r3, r3
 8008214:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	09db      	lsrs	r3, r3, #7
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	b2da      	uxtb	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	099b      	lsrs	r3, r3, #6
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	b2da      	uxtb	r2, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	b2da      	uxtb	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	091b      	lsrs	r3, r3, #4
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	b2da      	uxtb	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	089b      	lsrs	r3, r3, #2
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0303 	and.w	r3, r3, #3
 8008278:	b2da      	uxtb	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008284:	b2db      	uxtb	r3, r3
 8008286:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008308:	b5b0      	push	{r4, r5, r7, lr}
 800830a:	b08e      	sub	sp, #56	; 0x38
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008312:	2300      	movs	r3, #0
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2203      	movs	r2, #3
 800831a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	2b03      	cmp	r3, #3
 8008324:	d02e      	beq.n	8008384 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832c:	d106      	bne.n	800833c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	639a      	str	r2, [r3, #56]	; 0x38
 800833a:	e029      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008342:	d10a      	bne.n	800835a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fab2 	bl	80088ae <SD_WideBus_Enable>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
 8008358:	e01a      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 faf1 	bl	8008948 <SD_WideBus_Disable>
 8008366:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
 8008374:	e00c      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	; 0x38
 8008382:	e005      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e024      	b.n	80083f8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681d      	ldr	r5, [r3, #0]
 80083d4:	466c      	mov	r4, sp
 80083d6:	f107 0318 	add.w	r3, r7, #24
 80083da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083e2:	f107 030c 	add.w	r3, r7, #12
 80083e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083e8:	4628      	mov	r0, r5
 80083ea:	f002 fab7 	bl	800a95c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3728      	adds	r7, #40	; 0x28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bdb0      	pop	{r4, r5, r7, pc}

08008400 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008408:	2304      	movs	r3, #4
 800840a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800840c:	2300      	movs	r3, #0
 800840e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008414:	f107 030c 	add.w	r3, r7, #12
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa1d 	bl	800885a <SD_SendStatus>
 8008420:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	0a5b      	lsrs	r3, r3, #9
 8008438:	b2db      	uxtb	r3, r3
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008466:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	2b82      	cmp	r3, #130	; 0x82
 800848c:	d111      	bne.n	80084b2 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f002 fbe4 	bl	800ac60 <SDMMC_CmdStopTransfer>
 8008498:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff fccd 	bl	8007e4c <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0208 	bic.w	r2, r2, #8
 80084c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f010 f9e7 	bl	80188a8 <HAL_SD_RxCpltCallback>
#endif
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7f9 f88f 	bl	8001614 <HAL_DMA_GetError>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d039      	beq.n	8008570 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	2b01      	cmp	r3, #1
 8008504:	d004      	beq.n	8008510 <SD_DMAError+0x2e>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850c:	2b01      	cmp	r3, #1
 800850e:	d12c      	bne.n	800856a <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008518:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008528:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff ff62 	bl	8008400 <HAL_SD_GetCardState>
 800853c:	4603      	mov	r3, r0
 800853e:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	2b06      	cmp	r3, #6
 8008544:	d002      	beq.n	800854c <SD_DMAError+0x6a>
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	2b05      	cmp	r3, #5
 800854a:	d10a      	bne.n	8008562 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f002 fb85 	bl	800ac60 <SDMMC_CmdStopTransfer>
 8008556:	4602      	mov	r2, r0
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	431a      	orrs	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fc6e 	bl	8007e4c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008578:	b5b0      	push	{r4, r5, r7, lr}
 800857a:	b094      	sub	sp, #80	; 0x50
 800857c:	af04      	add	r7, sp, #16
 800857e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008580:	2300      	movs	r3, #0
 8008582:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008584:	2301      	movs	r3, #1
 8008586:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f002 fa2c 	bl	800a9ea <SDMMC_GetPowerState>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008598:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800859c:	e0b1      	b.n	8008702 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d02f      	beq.n	8008606 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 fc73 	bl	800ae96 <SDMMC_CmdSendCID>
 80085b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <SD_InitCard+0x44>
    {
      return errorstate;
 80085b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ba:	e0a2      	b.n	8008702 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f002 fa57 	bl	800aa76 <SDMMC_GetResponse>
 80085c8:	4602      	mov	r2, r0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2104      	movs	r1, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f002 fa4e 	bl	800aa76 <SDMMC_GetResponse>
 80085da:	4602      	mov	r2, r0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2108      	movs	r1, #8
 80085e6:	4618      	mov	r0, r3
 80085e8:	f002 fa45 	bl	800aa76 <SDMMC_GetResponse>
 80085ec:	4602      	mov	r2, r0
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	210c      	movs	r1, #12
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 fa3c 	bl	800aa76 <SDMMC_GetResponse>
 80085fe:	4602      	mov	r2, r0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	2b03      	cmp	r3, #3
 800860c:	d00d      	beq.n	800862a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f107 020e 	add.w	r2, r7, #14
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f002 fc7d 	bl	800af18 <SDMMC_CmdSetRelAdd>
 800861e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <SD_InitCard+0xb2>
    {
      return errorstate;
 8008626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008628:	e06b      	b.n	8008702 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862e:	2b03      	cmp	r3, #3
 8008630:	d036      	beq.n	80086a0 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008632:	89fb      	ldrh	r3, [r7, #14]
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008642:	041b      	lsls	r3, r3, #16
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f002 fc45 	bl	800aed6 <SDMMC_CmdSendCSD>
 800864c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800864e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <SD_InitCard+0xe0>
    {
      return errorstate;
 8008654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008656:	e054      	b.n	8008702 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f002 fa09 	bl	800aa76 <SDMMC_GetResponse>
 8008664:	4602      	mov	r2, r0
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2104      	movs	r1, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f002 fa00 	bl	800aa76 <SDMMC_GetResponse>
 8008676:	4602      	mov	r2, r0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2108      	movs	r1, #8
 8008682:	4618      	mov	r0, r3
 8008684:	f002 f9f7 	bl	800aa76 <SDMMC_GetResponse>
 8008688:	4602      	mov	r2, r0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	210c      	movs	r1, #12
 8008694:	4618      	mov	r0, r3
 8008696:	f002 f9ee 	bl	800aa76 <SDMMC_GetResponse>
 800869a:	4602      	mov	r2, r0
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2104      	movs	r1, #4
 80086a6:	4618      	mov	r0, r3
 80086a8:	f002 f9e5 	bl	800aa76 <SDMMC_GetResponse>
 80086ac:	4603      	mov	r3, r0
 80086ae:	0d1a      	lsrs	r2, r3, #20
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80086b4:	f107 0310 	add.w	r3, r7, #16
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff fbd0 	bl	8007e60 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	f04f 0400 	mov.w	r4, #0
 80086ce:	461a      	mov	r2, r3
 80086d0:	4623      	mov	r3, r4
 80086d2:	4608      	mov	r0, r1
 80086d4:	f002 fae8 	bl	800aca8 <SDMMC_CmdSelDesel>
 80086d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <SD_InitCard+0x16c>
  {
    return errorstate;
 80086e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e2:	e00e      	b.n	8008702 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681d      	ldr	r5, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	466c      	mov	r4, sp
 80086ec:	f103 0210 	add.w	r2, r3, #16
 80086f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80086f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086f6:	3304      	adds	r3, #4
 80086f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086fa:	4628      	mov	r0, r5
 80086fc:	f002 f92e 	bl	800a95c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3740      	adds	r7, #64	; 0x40
 8008706:	46bd      	mov	sp, r7
 8008708:	bdb0      	pop	{r4, r5, r7, pc}

0800870a <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	2300      	movs	r3, #0
 800871c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f002 fae3 	bl	800acf2 <SDMMC_CmdGoIdleState>
 800872c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <SD_PowerON+0x2e>
  {
    return errorstate;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e08c      	b.n	8008852 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f002 faf8 	bl	800ad32 <SDMMC_CmdOperCond>
 8008742:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d03d      	beq.n	80087c6 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008750:	e032      	b.n	80087b8 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	60ba      	str	r2, [r7, #8]
 8008758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800875c:	4293      	cmp	r3, r2
 800875e:	d102      	bne.n	8008766 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008764:	e075      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f002 fb01 	bl	800ad74 <SDMMC_CmdAppCommand>
 8008772:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800877a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800877e:	e068      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f002 fb18 	bl	800adbc <SDMMC_CmdAppOperCommand>
 800878c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008798:	e05b      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 f968 	bl	800aa76 <SDMMC_GetResponse>
 80087a6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	0fdb      	lsrs	r3, r3, #31
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	bf0c      	ite	eq
 80087b0:	2301      	moveq	r3, #1
 80087b2:	2300      	movne	r3, #0
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0c9      	beq.n	8008752 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
 80087c4:	e044      	b.n	8008850 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80087cc:	e031      	b.n	8008832 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	60ba      	str	r2, [r7, #8]
 80087d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087d8:	4293      	cmp	r3, r2
 80087da:	d102      	bne.n	80087e2 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087e0:	e037      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f002 fac3 	bl	800ad74 <SDMMC_CmdAppCommand>
 80087ee:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <SD_PowerON+0xf0>
      {
        return errorstate;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	e02b      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008802:	4618      	mov	r0, r3
 8008804:	f002 fada 	bl	800adbc <SDMMC_CmdAppOperCommand>
 8008808:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <SD_PowerON+0x10a>
      {
        return errorstate;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	e01e      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2100      	movs	r1, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f002 f92b 	bl	800aa76 <SDMMC_GetResponse>
 8008820:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	0fdb      	lsrs	r3, r3, #31
 8008826:	2b01      	cmp	r3, #1
 8008828:	bf0c      	ite	eq
 800882a:	2301      	moveq	r3, #1
 800882c:	2300      	movne	r3, #0
 800882e:	b2db      	uxtb	r3, r3
 8008830:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0ca      	beq.n	80087ce <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	645a      	str	r2, [r3, #68]	; 0x44
 8008848:	e002      	b.n	8008850 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800886e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008872:	e018      	b.n	80088a6 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f002 fb6c 	bl	800af5e <SDMMC_CmdSendStatus>
 8008886:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <SD_SendStatus+0x38>
  {
    return errorstate;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	e009      	b.n	80088a6 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2100      	movs	r1, #0
 8008898:	4618      	mov	r0, r3
 800889a:	f002 f8ec 	bl	800aa76 <SDMMC_GetResponse>
 800889e:	4602      	mov	r2, r0
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	2300      	movs	r3, #0
 80088bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 f8d4 	bl	800aa76 <SDMMC_GetResponse>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d8:	d102      	bne.n	80088e0 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088de:	e02f      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088e0:	f107 030c 	add.w	r3, r7, #12
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f87b 	bl	80089e2 <SD_FindSCR>
 80088ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	e023      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01c      	beq.n	800893c <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f002 fa30 	bl	800ad74 <SDMMC_CmdAppCommand>
 8008914:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	e00f      	b.n	8008940 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2102      	movs	r1, #2
 8008926:	4618      	mov	r0, r3
 8008928:	f002 fa6e 	bl	800ae08 <SDMMC_CmdBusWidth>
 800892c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	e003      	b.n	8008940 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8008938:	2300      	movs	r3, #0
 800893a:	e001      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800893c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	2300      	movs	r3, #0
 8008956:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f002 f887 	bl	800aa76 <SDMMC_GetResponse>
 8008968:	4603      	mov	r3, r0
 800896a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008972:	d102      	bne.n	800897a <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008978:	e02f      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800897a:	f107 030c 	add.w	r3, r7, #12
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f82e 	bl	80089e2 <SD_FindSCR>
 8008986:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	e023      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01c      	beq.n	80089d6 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	4619      	mov	r1, r3
 80089a8:	4610      	mov	r0, r2
 80089aa:	f002 f9e3 	bl	800ad74 <SDMMC_CmdAppCommand>
 80089ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	e00f      	b.n	80089da <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f002 fa21 	bl	800ae08 <SDMMC_CmdBusWidth>
 80089c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	e003      	b.n	80089da <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e001      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80089e2:	b590      	push	{r4, r7, lr}
 80089e4:	b08f      	sub	sp, #60	; 0x3c
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80089ec:	2300      	movs	r3, #0
 80089ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80089f0:	f7f8 f8a2 	bl	8000b38 <HAL_GetTick>
 80089f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2108      	movs	r1, #8
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f002 f875 	bl	800aaf8 <SDMMC_CmdBlockLength>
 8008a0e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	e0a8      	b.n	8008b6c <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a22:	041b      	lsls	r3, r3, #16
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f002 f9a4 	bl	800ad74 <SDMMC_CmdAppCommand>
 8008a2c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	e099      	b.n	8008b6c <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a38:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008a3e:	2308      	movs	r3, #8
 8008a40:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008a42:	2330      	movs	r3, #48	; 0x30
 8008a44:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a46:	2302      	movs	r3, #2
 8008a48:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f107 0214 	add.w	r2, r7, #20
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f002 f81f 	bl	800aaa0 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f002 f9f2 	bl	800ae50 <SDMMC_CmdSendSCR>
 8008a6c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d022      	beq.n	8008aba <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	e079      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00e      	beq.n	8008aa4 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	f107 020c 	add.w	r2, r7, #12
 8008a92:	18d4      	adds	r4, r2, r3
 8008a94:	4608      	mov	r0, r1
 8008a96:	f001 ff8d 	bl	800a9b4 <SDMMC_ReadFIFO>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6023      	str	r3, [r4, #0]
      index++;
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008aa4:	f7f8 f848 	bl	8000b38 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d102      	bne.n	8008aba <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ab8:	e058      	b.n	8008b6c <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac0:	f240 432a 	movw	r3, #1066	; 0x42a
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0d6      	beq.n	8008a78 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad0:	f003 0308 	and.w	r3, r3, #8
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2208      	movs	r2, #8
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	e043      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2202      	movs	r2, #2
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008afa:	2302      	movs	r3, #2
 8008afc:	e036      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d005      	beq.n	8008b18 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2220      	movs	r2, #32
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008b14:	2320      	movs	r3, #32
 8008b16:	e029      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	061a      	lsls	r2, r3, #24
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b2e:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b38:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b44:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b46:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	061a      	lsls	r2, r3, #24
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b54:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b5e:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	0e1b      	lsrs	r3, r3, #24
 8008b64:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	373c      	adds	r7, #60	; 0x3c
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd90      	pop	{r4, r7, pc}

08008b74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e025      	b.n	8008bd4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f00f f953 	bl	8017e48 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f001 fdab 	bl	800a710 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	f001 fe15 	bl	800a7f4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d101      	bne.n	8008bf8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e018      	b.n	8008c2a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 fe73 	bl	800a8f4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d104      	bne.n	8008c20 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2205      	movs	r2, #5
 8008c1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008c1e:	e003      	b.n	8008c28 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d101      	bne.n	8008c4c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e00e      	b.n	8008c6a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fe6b 	bl	800a936 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e04c      	b.n	8008d20 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f011 f91e 	bl	8019edc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0203 	bic.w	r2, r2, #3
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <HAL_SPDIFRX_Init+0xb4>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008cd0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008cd6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008cdc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008ce2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008ce8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008cee:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008cf4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008cfa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008d00:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	fff88407 	.word	0xfff88407

08008d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e084      	b.n	8008e48 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f011 f901 	bl	8019f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2202      	movs	r2, #2
 8008d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d7e:	d902      	bls.n	8008d86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e002      	b.n	8008d8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d94:	d007      	beq.n	8008da6 <HAL_SPI_Init+0x7a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008db6:	d903      	bls.n	8008dc0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8008dbe:	e002      	b.n	8008dc6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	ea42 0103 	orr.w	r1, r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	0c1b      	lsrs	r3, r3, #16
 8008e06:	f003 0204 	and.w	r2, r3, #4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	ea42 0103 	orr.w	r1, r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e01d      	b.n	8008e9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f011 f8d4 	bl	801a024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f000 fba2 	bl	80095d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <HAL_TIM_Base_Start+0x50>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b06      	cmp	r3, #6
 8008ec8:	d00b      	beq.n	8008ee2 <HAL_TIM_Base_Start+0x3a>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed0:	d007      	beq.n	8008ee2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0201 	orr.w	r2, r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	00010007 	.word	0x00010007

08008efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0201 	orr.w	r2, r2, #1
 8008f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <HAL_TIM_Base_Start_IT+0x50>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b06      	cmp	r3, #6
 8008f24:	d00b      	beq.n	8008f3e <HAL_TIM_Base_Start_IT+0x42>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2c:	d007      	beq.n	8008f3e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0201 	orr.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	00010007 	.word	0x00010007

08008f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e01d      	b.n	8008f9e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f011 f8b0 	bl	801a0dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	f000 fb22 	bl	80095d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d122      	bne.n	8009002 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d11b      	bne.n	8009002 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0202 	mvn.w	r2, #2
 8008fd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fad7 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8008fee:	e005      	b.n	8008ffc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fac9 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fada 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b04      	cmp	r3, #4
 800900e:	d122      	bne.n	8009056 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b04      	cmp	r3, #4
 800901c:	d11b      	bne.n	8009056 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f06f 0204 	mvn.w	r2, #4
 8009026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 faad 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8009042:	e005      	b.n	8009050 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fa9f 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fab0 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0308 	and.w	r3, r3, #8
 8009060:	2b08      	cmp	r3, #8
 8009062:	d122      	bne.n	80090aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b08      	cmp	r3, #8
 8009070:	d11b      	bne.n	80090aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f06f 0208 	mvn.w	r2, #8
 800907a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2204      	movs	r2, #4
 8009080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d003      	beq.n	8009098 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fa83 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8009096:	e005      	b.n	80090a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa75 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa86 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d122      	bne.n	80090fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b10      	cmp	r3, #16
 80090c4:	d11b      	bne.n	80090fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f06f 0210 	mvn.w	r2, #16
 80090ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2208      	movs	r2, #8
 80090d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fa59 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 80090ea:	e005      	b.n	80090f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fa4b 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa5c 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b01      	cmp	r3, #1
 800910a:	d10e      	bne.n	800912a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b01      	cmp	r3, #1
 8009118:	d107      	bne.n	800912a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f06f 0201 	mvn.w	r2, #1
 8009122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f010 f909 	bl	801933c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009134:	2b80      	cmp	r3, #128	; 0x80
 8009136:	d10e      	bne.n	8009156 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009142:	2b80      	cmp	r3, #128	; 0x80
 8009144:	d107      	bne.n	8009156 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800914e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 febd 	bl	8009ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009164:	d10e      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d107      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800917c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 feb0 	bl	8009ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	d10e      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d107      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fa0a 	bl	80095c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d10e      	bne.n	80091dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0320 	and.w	r3, r3, #32
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d107      	bne.n	80091dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0220 	mvn.w	r2, #32
 80091d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fe70 	bl	8009ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e105      	b.n	800940a <HAL_TIM_PWM_ConfigChannel+0x226>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2202      	movs	r2, #2
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b14      	cmp	r3, #20
 8009212:	f200 80f0 	bhi.w	80093f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009216:	a201      	add	r2, pc, #4	; (adr r2, 800921c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921c:	08009271 	.word	0x08009271
 8009220:	080093f7 	.word	0x080093f7
 8009224:	080093f7 	.word	0x080093f7
 8009228:	080093f7 	.word	0x080093f7
 800922c:	080092b1 	.word	0x080092b1
 8009230:	080093f7 	.word	0x080093f7
 8009234:	080093f7 	.word	0x080093f7
 8009238:	080093f7 	.word	0x080093f7
 800923c:	080092f3 	.word	0x080092f3
 8009240:	080093f7 	.word	0x080093f7
 8009244:	080093f7 	.word	0x080093f7
 8009248:	080093f7 	.word	0x080093f7
 800924c:	08009333 	.word	0x08009333
 8009250:	080093f7 	.word	0x080093f7
 8009254:	080093f7 	.word	0x080093f7
 8009258:	080093f7 	.word	0x080093f7
 800925c:	08009375 	.word	0x08009375
 8009260:	080093f7 	.word	0x080093f7
 8009264:	080093f7 	.word	0x080093f7
 8009268:	080093f7 	.word	0x080093f7
 800926c:	080093b5 	.word	0x080093b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fa4e 	bl	8009718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0208 	orr.w	r2, r2, #8
 800928a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699a      	ldr	r2, [r3, #24]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0204 	bic.w	r2, r2, #4
 800929a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6999      	ldr	r1, [r3, #24]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	691a      	ldr	r2, [r3, #16]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	619a      	str	r2, [r3, #24]
      break;
 80092ae:	e0a3      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 faa0 	bl	80097fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6999      	ldr	r1, [r3, #24]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	021a      	lsls	r2, r3, #8
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	619a      	str	r2, [r3, #24]
      break;
 80092f0:	e082      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 faf7 	bl	80098ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69da      	ldr	r2, [r3, #28]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0208 	orr.w	r2, r2, #8
 800930c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69da      	ldr	r2, [r3, #28]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0204 	bic.w	r2, r2, #4
 800931c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69d9      	ldr	r1, [r3, #28]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	61da      	str	r2, [r3, #28]
      break;
 8009330:	e062      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fb4d 	bl	80099d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800934c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800935c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69d9      	ldr	r1, [r3, #28]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	021a      	lsls	r2, r3, #8
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	61da      	str	r2, [r3, #28]
      break;
 8009372:	e041      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fb84 	bl	8009a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0208 	orr.w	r2, r2, #8
 800938e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0204 	bic.w	r2, r2, #4
 800939e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093b2:	e021      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fbb6 	bl	8009b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	021a      	lsls	r2, r3, #8
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093f4:	e000      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80093f6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop

08009414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_TIM_ConfigClockSource+0x18>
 8009428:	2302      	movs	r3, #2
 800942a:	e0a6      	b.n	800957a <HAL_TIM_ConfigClockSource+0x166>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4b4f      	ldr	r3, [pc, #316]	; (8009584 <HAL_TIM_ConfigClockSource+0x170>)
 8009448:	4013      	ands	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009452:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	d067      	beq.n	8009534 <HAL_TIM_ConfigClockSource+0x120>
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d80b      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x6c>
 8009468:	2b10      	cmp	r3, #16
 800946a:	d073      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
 800946c:	2b10      	cmp	r3, #16
 800946e:	d802      	bhi.n	8009476 <HAL_TIM_ConfigClockSource+0x62>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d06f      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009474:	e078      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009476:	2b20      	cmp	r3, #32
 8009478:	d06c      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
 800947a:	2b30      	cmp	r3, #48	; 0x30
 800947c:	d06a      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800947e:	e073      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009480:	2b70      	cmp	r3, #112	; 0x70
 8009482:	d00d      	beq.n	80094a0 <HAL_TIM_ConfigClockSource+0x8c>
 8009484:	2b70      	cmp	r3, #112	; 0x70
 8009486:	d804      	bhi.n	8009492 <HAL_TIM_ConfigClockSource+0x7e>
 8009488:	2b50      	cmp	r3, #80	; 0x50
 800948a:	d033      	beq.n	80094f4 <HAL_TIM_ConfigClockSource+0xe0>
 800948c:	2b60      	cmp	r3, #96	; 0x60
 800948e:	d041      	beq.n	8009514 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009490:	e06a      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009496:	d066      	beq.n	8009566 <HAL_TIM_ConfigClockSource+0x152>
 8009498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949c:	d017      	beq.n	80094ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800949e:	e063      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	6899      	ldr	r1, [r3, #8]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f000 fc0a 	bl	8009cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	609a      	str	r2, [r3, #8]
      break;
 80094cc:	e04c      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6899      	ldr	r1, [r3, #8]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f000 fbf3 	bl	8009cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094f0:	609a      	str	r2, [r3, #8]
      break;
 80094f2:	e039      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	6859      	ldr	r1, [r3, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	461a      	mov	r2, r3
 8009502:	f000 fb67 	bl	8009bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2150      	movs	r1, #80	; 0x50
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fbc0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009512:	e029      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	6859      	ldr	r1, [r3, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	461a      	mov	r2, r3
 8009522:	f000 fb86 	bl	8009c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2160      	movs	r1, #96	; 0x60
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fbb0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009532:	e019      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	6859      	ldr	r1, [r3, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	461a      	mov	r2, r3
 8009542:	f000 fb47 	bl	8009bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2140      	movs	r1, #64	; 0x40
 800954c:	4618      	mov	r0, r3
 800954e:	f000 fba0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009552:	e009      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f000 fb97 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009564:	e000      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	fffeff88 	.word	0xfffeff88

08009588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a40      	ldr	r2, [pc, #256]	; (80096ec <TIM_Base_SetConfig+0x114>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d013      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d00f      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a3d      	ldr	r2, [pc, #244]	; (80096f0 <TIM_Base_SetConfig+0x118>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00b      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a3c      	ldr	r2, [pc, #240]	; (80096f4 <TIM_Base_SetConfig+0x11c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d007      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a3b      	ldr	r2, [pc, #236]	; (80096f8 <TIM_Base_SetConfig+0x120>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d003      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a3a      	ldr	r2, [pc, #232]	; (80096fc <TIM_Base_SetConfig+0x124>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d108      	bne.n	800962a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a2f      	ldr	r2, [pc, #188]	; (80096ec <TIM_Base_SetConfig+0x114>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d02b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009638:	d027      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <TIM_Base_SetConfig+0x118>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d023      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a2b      	ldr	r2, [pc, #172]	; (80096f4 <TIM_Base_SetConfig+0x11c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d01f      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a2a      	ldr	r2, [pc, #168]	; (80096f8 <TIM_Base_SetConfig+0x120>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d01b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a29      	ldr	r2, [pc, #164]	; (80096fc <TIM_Base_SetConfig+0x124>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d017      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a28      	ldr	r2, [pc, #160]	; (8009700 <TIM_Base_SetConfig+0x128>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a27      	ldr	r2, [pc, #156]	; (8009704 <TIM_Base_SetConfig+0x12c>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00f      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a26      	ldr	r2, [pc, #152]	; (8009708 <TIM_Base_SetConfig+0x130>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a25      	ldr	r2, [pc, #148]	; (800970c <TIM_Base_SetConfig+0x134>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d007      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a24      	ldr	r2, [pc, #144]	; (8009710 <TIM_Base_SetConfig+0x138>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a23      	ldr	r2, [pc, #140]	; (8009714 <TIM_Base_SetConfig+0x13c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d108      	bne.n	800969c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a0a      	ldr	r2, [pc, #40]	; (80096ec <TIM_Base_SetConfig+0x114>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_Base_SetConfig+0xf8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a0c      	ldr	r2, [pc, #48]	; (80096fc <TIM_Base_SetConfig+0x124>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d103      	bne.n	80096d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	615a      	str	r2, [r3, #20]
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40014400 	.word	0x40014400
 8009708:	40014800 	.word	0x40014800
 800970c:	40001800 	.word	0x40001800
 8009710:	40001c00 	.word	0x40001c00
 8009714:	40002000 	.word	0x40002000

08009718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	f023 0201 	bic.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4b2b      	ldr	r3, [pc, #172]	; (80097f0 <TIM_OC1_SetConfig+0xd8>)
 8009744:	4013      	ands	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f023 0302 	bic.w	r3, r3, #2
 8009760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a21      	ldr	r2, [pc, #132]	; (80097f4 <TIM_OC1_SetConfig+0xdc>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d003      	beq.n	800977c <TIM_OC1_SetConfig+0x64>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a20      	ldr	r2, [pc, #128]	; (80097f8 <TIM_OC1_SetConfig+0xe0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d10c      	bne.n	8009796 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f023 0308 	bic.w	r3, r3, #8
 8009782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	4313      	orrs	r3, r2
 800978c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f023 0304 	bic.w	r3, r3, #4
 8009794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a16      	ldr	r2, [pc, #88]	; (80097f4 <TIM_OC1_SetConfig+0xdc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d003      	beq.n	80097a6 <TIM_OC1_SetConfig+0x8e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <TIM_OC1_SetConfig+0xe0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d111      	bne.n	80097ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	4313      	orrs	r3, r2
 80097be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	621a      	str	r2, [r3, #32]
}
 80097e4:	bf00      	nop
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	fffeff8f 	.word	0xfffeff8f
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40010400 	.word	0x40010400

080097fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f023 0210 	bic.w	r2, r3, #16
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4b2e      	ldr	r3, [pc, #184]	; (80098e0 <TIM_OC2_SetConfig+0xe4>)
 8009828:	4013      	ands	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0320 	bic.w	r3, r3, #32
 8009846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4313      	orrs	r3, r2
 8009852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a23      	ldr	r2, [pc, #140]	; (80098e4 <TIM_OC2_SetConfig+0xe8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_OC2_SetConfig+0x68>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a22      	ldr	r2, [pc, #136]	; (80098e8 <TIM_OC2_SetConfig+0xec>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d10d      	bne.n	8009880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800986a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a18      	ldr	r2, [pc, #96]	; (80098e4 <TIM_OC2_SetConfig+0xe8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d003      	beq.n	8009890 <TIM_OC2_SetConfig+0x94>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <TIM_OC2_SetConfig+0xec>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d113      	bne.n	80098b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800989e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	621a      	str	r2, [r3, #32]
}
 80098d2:	bf00      	nop
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	feff8fff 	.word	0xfeff8fff
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40010400 	.word	0x40010400

080098ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <TIM_OC3_SetConfig+0xe0>)
 8009918:	4013      	ands	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f023 0303 	bic.w	r3, r3, #3
 8009922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a22      	ldr	r2, [pc, #136]	; (80099d0 <TIM_OC3_SetConfig+0xe4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_OC3_SetConfig+0x66>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a21      	ldr	r2, [pc, #132]	; (80099d4 <TIM_OC3_SetConfig+0xe8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d10d      	bne.n	800996e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	021b      	lsls	r3, r3, #8
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800996c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a17      	ldr	r2, [pc, #92]	; (80099d0 <TIM_OC3_SetConfig+0xe4>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d003      	beq.n	800997e <TIM_OC3_SetConfig+0x92>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a16      	ldr	r2, [pc, #88]	; (80099d4 <TIM_OC3_SetConfig+0xe8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d113      	bne.n	80099a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800998c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	4313      	orrs	r3, r2
 8009998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	621a      	str	r2, [r3, #32]
}
 80099c0:	bf00      	nop
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	fffeff8f 	.word	0xfffeff8f
 80099d0:	40010000 	.word	0x40010000
 80099d4:	40010400 	.word	0x40010400

080099d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4b1e      	ldr	r3, [pc, #120]	; (8009a7c <TIM_OC4_SetConfig+0xa4>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	031b      	lsls	r3, r3, #12
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a13      	ldr	r2, [pc, #76]	; (8009a80 <TIM_OC4_SetConfig+0xa8>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d003      	beq.n	8009a40 <TIM_OC4_SetConfig+0x68>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a12      	ldr	r2, [pc, #72]	; (8009a84 <TIM_OC4_SetConfig+0xac>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d109      	bne.n	8009a54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	019b      	lsls	r3, r3, #6
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	621a      	str	r2, [r3, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	feff8fff 	.word	0xfeff8fff
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40010400 	.word	0x40010400

08009a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4b1b      	ldr	r3, [pc, #108]	; (8009b20 <TIM_OC5_SetConfig+0x98>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	041b      	lsls	r3, r3, #16
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a12      	ldr	r2, [pc, #72]	; (8009b24 <TIM_OC5_SetConfig+0x9c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d003      	beq.n	8009ae6 <TIM_OC5_SetConfig+0x5e>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a11      	ldr	r2, [pc, #68]	; (8009b28 <TIM_OC5_SetConfig+0xa0>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d109      	bne.n	8009afa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	621a      	str	r2, [r3, #32]
}
 8009b14:	bf00      	nop
 8009b16:	371c      	adds	r7, #28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	fffeff8f 	.word	0xfffeff8f
 8009b24:	40010000 	.word	0x40010000
 8009b28:	40010400 	.word	0x40010400

08009b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4b1c      	ldr	r3, [pc, #112]	; (8009bc8 <TIM_OC6_SetConfig+0x9c>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	051b      	lsls	r3, r3, #20
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a13      	ldr	r2, [pc, #76]	; (8009bcc <TIM_OC6_SetConfig+0xa0>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d003      	beq.n	8009b8c <TIM_OC6_SetConfig+0x60>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a12      	ldr	r2, [pc, #72]	; (8009bd0 <TIM_OC6_SetConfig+0xa4>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d109      	bne.n	8009ba0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	029b      	lsls	r3, r3, #10
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	621a      	str	r2, [r3, #32]
}
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	feff8fff 	.word	0xfeff8fff
 8009bcc:	40010000 	.word	0x40010000
 8009bd0:	40010400 	.word	0x40010400

08009bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	f023 0201 	bic.w	r2, r3, #1
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f023 030a 	bic.w	r3, r3, #10
 8009c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	621a      	str	r2, [r3, #32]
}
 8009c26:	bf00      	nop
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b087      	sub	sp, #28
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	f023 0210 	bic.w	r2, r3, #16
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	031b      	lsls	r3, r3, #12
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	621a      	str	r2, [r3, #32]
}
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f043 0307 	orr.w	r3, r3, #7
 8009cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	609a      	str	r2, [r3, #8]
}
 8009cbc:	bf00      	nop
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	021a      	lsls	r2, r3, #8
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	609a      	str	r2, [r3, #8]
}
 8009cfc:	bf00      	nop
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e045      	b.n	8009dac <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a1c      	ldr	r2, [pc, #112]	; (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d004      	beq.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a1b      	ldr	r2, [pc, #108]	; (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d108      	bne.n	8009d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d7e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	40010000 	.word	0x40010000
 8009dbc:	40010400 	.word	0x40010400

08009dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e065      	b.n	8009ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	041b      	lsls	r3, r3, #16
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a16      	ldr	r2, [pc, #88]	; (8009eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d004      	beq.n	8009e6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a14      	ldr	r2, [pc, #80]	; (8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d115      	bne.n	8009e96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	051b      	lsls	r3, r3, #20
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	40010000 	.word	0x40010000
 8009eb8:	40010400 	.word	0x40010400

08009ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e040      	b.n	8009f8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f010 f9a8 	bl	801a270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2224      	movs	r2, #36	; 0x24
 8009f24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f82c 	bl	8009f94 <UART_SetConfig>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d101      	bne.n	8009f46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e022      	b.n	8009f8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fac4 	bl	800a4dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f72:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fb4b 	bl	800a620 <UART_CheckIdleState>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	4bb1      	ldr	r3, [pc, #708]	; (800a288 <UART_SetConfig+0x2f4>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	6939      	ldr	r1, [r7, #16]
 8009fcc:	430b      	orrs	r3, r1
 8009fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68da      	ldr	r2, [r3, #12]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	430a      	orrs	r2, r1
 800a008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a9f      	ldr	r2, [pc, #636]	; (800a28c <UART_SetConfig+0x2f8>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d121      	bne.n	800a058 <UART_SetConfig+0xc4>
 800a014:	4b9e      	ldr	r3, [pc, #632]	; (800a290 <UART_SetConfig+0x2fc>)
 800a016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d816      	bhi.n	800a050 <UART_SetConfig+0xbc>
 800a022:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <UART_SetConfig+0x94>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a045 	.word	0x0800a045
 800a030:	0800a03f 	.word	0x0800a03f
 800a034:	0800a04b 	.word	0x0800a04b
 800a038:	2301      	movs	r3, #1
 800a03a:	77fb      	strb	r3, [r7, #31]
 800a03c:	e151      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a03e:	2302      	movs	r3, #2
 800a040:	77fb      	strb	r3, [r7, #31]
 800a042:	e14e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a044:	2304      	movs	r3, #4
 800a046:	77fb      	strb	r3, [r7, #31]
 800a048:	e14b      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a04a:	2308      	movs	r3, #8
 800a04c:	77fb      	strb	r3, [r7, #31]
 800a04e:	e148      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a050:	2310      	movs	r3, #16
 800a052:	77fb      	strb	r3, [r7, #31]
 800a054:	bf00      	nop
 800a056:	e144      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a8d      	ldr	r2, [pc, #564]	; (800a294 <UART_SetConfig+0x300>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d134      	bne.n	800a0cc <UART_SetConfig+0x138>
 800a062:	4b8b      	ldr	r3, [pc, #556]	; (800a290 <UART_SetConfig+0x2fc>)
 800a064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a068:	f003 030c 	and.w	r3, r3, #12
 800a06c:	2b0c      	cmp	r3, #12
 800a06e:	d829      	bhi.n	800a0c4 <UART_SetConfig+0x130>
 800a070:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <UART_SetConfig+0xe4>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a0ad 	.word	0x0800a0ad
 800a07c:	0800a0c5 	.word	0x0800a0c5
 800a080:	0800a0c5 	.word	0x0800a0c5
 800a084:	0800a0c5 	.word	0x0800a0c5
 800a088:	0800a0b9 	.word	0x0800a0b9
 800a08c:	0800a0c5 	.word	0x0800a0c5
 800a090:	0800a0c5 	.word	0x0800a0c5
 800a094:	0800a0c5 	.word	0x0800a0c5
 800a098:	0800a0b3 	.word	0x0800a0b3
 800a09c:	0800a0c5 	.word	0x0800a0c5
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0c5 	.word	0x0800a0c5
 800a0a8:	0800a0bf 	.word	0x0800a0bf
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	77fb      	strb	r3, [r7, #31]
 800a0b0:	e117      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	77fb      	strb	r3, [r7, #31]
 800a0b6:	e114      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0b8:	2304      	movs	r3, #4
 800a0ba:	77fb      	strb	r3, [r7, #31]
 800a0bc:	e111      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0be:	2308      	movs	r3, #8
 800a0c0:	77fb      	strb	r3, [r7, #31]
 800a0c2:	e10e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	77fb      	strb	r3, [r7, #31]
 800a0c8:	bf00      	nop
 800a0ca:	e10a      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a71      	ldr	r2, [pc, #452]	; (800a298 <UART_SetConfig+0x304>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d120      	bne.n	800a118 <UART_SetConfig+0x184>
 800a0d6:	4b6e      	ldr	r3, [pc, #440]	; (800a290 <UART_SetConfig+0x2fc>)
 800a0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a0e0:	2b10      	cmp	r3, #16
 800a0e2:	d00f      	beq.n	800a104 <UART_SetConfig+0x170>
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	d802      	bhi.n	800a0ee <UART_SetConfig+0x15a>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <UART_SetConfig+0x164>
 800a0ec:	e010      	b.n	800a110 <UART_SetConfig+0x17c>
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	d005      	beq.n	800a0fe <UART_SetConfig+0x16a>
 800a0f2:	2b30      	cmp	r3, #48	; 0x30
 800a0f4:	d009      	beq.n	800a10a <UART_SetConfig+0x176>
 800a0f6:	e00b      	b.n	800a110 <UART_SetConfig+0x17c>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	77fb      	strb	r3, [r7, #31]
 800a0fc:	e0f1      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0fe:	2302      	movs	r3, #2
 800a100:	77fb      	strb	r3, [r7, #31]
 800a102:	e0ee      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a104:	2304      	movs	r3, #4
 800a106:	77fb      	strb	r3, [r7, #31]
 800a108:	e0eb      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a10a:	2308      	movs	r3, #8
 800a10c:	77fb      	strb	r3, [r7, #31]
 800a10e:	e0e8      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a110:	2310      	movs	r3, #16
 800a112:	77fb      	strb	r3, [r7, #31]
 800a114:	bf00      	nop
 800a116:	e0e4      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a5f      	ldr	r2, [pc, #380]	; (800a29c <UART_SetConfig+0x308>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d120      	bne.n	800a164 <UART_SetConfig+0x1d0>
 800a122:	4b5b      	ldr	r3, [pc, #364]	; (800a290 <UART_SetConfig+0x2fc>)
 800a124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a128:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a12c:	2b40      	cmp	r3, #64	; 0x40
 800a12e:	d00f      	beq.n	800a150 <UART_SetConfig+0x1bc>
 800a130:	2b40      	cmp	r3, #64	; 0x40
 800a132:	d802      	bhi.n	800a13a <UART_SetConfig+0x1a6>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d005      	beq.n	800a144 <UART_SetConfig+0x1b0>
 800a138:	e010      	b.n	800a15c <UART_SetConfig+0x1c8>
 800a13a:	2b80      	cmp	r3, #128	; 0x80
 800a13c:	d005      	beq.n	800a14a <UART_SetConfig+0x1b6>
 800a13e:	2bc0      	cmp	r3, #192	; 0xc0
 800a140:	d009      	beq.n	800a156 <UART_SetConfig+0x1c2>
 800a142:	e00b      	b.n	800a15c <UART_SetConfig+0x1c8>
 800a144:	2300      	movs	r3, #0
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e0cb      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a14a:	2302      	movs	r3, #2
 800a14c:	77fb      	strb	r3, [r7, #31]
 800a14e:	e0c8      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a150:	2304      	movs	r3, #4
 800a152:	77fb      	strb	r3, [r7, #31]
 800a154:	e0c5      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a156:	2308      	movs	r3, #8
 800a158:	77fb      	strb	r3, [r7, #31]
 800a15a:	e0c2      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a15c:	2310      	movs	r3, #16
 800a15e:	77fb      	strb	r3, [r7, #31]
 800a160:	bf00      	nop
 800a162:	e0be      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a4d      	ldr	r2, [pc, #308]	; (800a2a0 <UART_SetConfig+0x30c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d124      	bne.n	800a1b8 <UART_SetConfig+0x224>
 800a16e:	4b48      	ldr	r3, [pc, #288]	; (800a290 <UART_SetConfig+0x2fc>)
 800a170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a17c:	d012      	beq.n	800a1a4 <UART_SetConfig+0x210>
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a182:	d802      	bhi.n	800a18a <UART_SetConfig+0x1f6>
 800a184:	2b00      	cmp	r3, #0
 800a186:	d007      	beq.n	800a198 <UART_SetConfig+0x204>
 800a188:	e012      	b.n	800a1b0 <UART_SetConfig+0x21c>
 800a18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a18e:	d006      	beq.n	800a19e <UART_SetConfig+0x20a>
 800a190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a194:	d009      	beq.n	800a1aa <UART_SetConfig+0x216>
 800a196:	e00b      	b.n	800a1b0 <UART_SetConfig+0x21c>
 800a198:	2300      	movs	r3, #0
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e0a1      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	77fb      	strb	r3, [r7, #31]
 800a1a2:	e09e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1a4:	2304      	movs	r3, #4
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e09b      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	77fb      	strb	r3, [r7, #31]
 800a1ae:	e098      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	77fb      	strb	r3, [r7, #31]
 800a1b4:	bf00      	nop
 800a1b6:	e094      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a39      	ldr	r2, [pc, #228]	; (800a2a4 <UART_SetConfig+0x310>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d124      	bne.n	800a20c <UART_SetConfig+0x278>
 800a1c2:	4b33      	ldr	r3, [pc, #204]	; (800a290 <UART_SetConfig+0x2fc>)
 800a1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a1cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d0:	d012      	beq.n	800a1f8 <UART_SetConfig+0x264>
 800a1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d6:	d802      	bhi.n	800a1de <UART_SetConfig+0x24a>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d007      	beq.n	800a1ec <UART_SetConfig+0x258>
 800a1dc:	e012      	b.n	800a204 <UART_SetConfig+0x270>
 800a1de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1e2:	d006      	beq.n	800a1f2 <UART_SetConfig+0x25e>
 800a1e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1e8:	d009      	beq.n	800a1fe <UART_SetConfig+0x26a>
 800a1ea:	e00b      	b.n	800a204 <UART_SetConfig+0x270>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	77fb      	strb	r3, [r7, #31]
 800a1f0:	e077      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	77fb      	strb	r3, [r7, #31]
 800a1f6:	e074      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	77fb      	strb	r3, [r7, #31]
 800a1fc:	e071      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1fe:	2308      	movs	r3, #8
 800a200:	77fb      	strb	r3, [r7, #31]
 800a202:	e06e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a204:	2310      	movs	r3, #16
 800a206:	77fb      	strb	r3, [r7, #31]
 800a208:	bf00      	nop
 800a20a:	e06a      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a25      	ldr	r2, [pc, #148]	; (800a2a8 <UART_SetConfig+0x314>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d124      	bne.n	800a260 <UART_SetConfig+0x2cc>
 800a216:	4b1e      	ldr	r3, [pc, #120]	; (800a290 <UART_SetConfig+0x2fc>)
 800a218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a21c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a224:	d012      	beq.n	800a24c <UART_SetConfig+0x2b8>
 800a226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a22a:	d802      	bhi.n	800a232 <UART_SetConfig+0x29e>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <UART_SetConfig+0x2ac>
 800a230:	e012      	b.n	800a258 <UART_SetConfig+0x2c4>
 800a232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a236:	d006      	beq.n	800a246 <UART_SetConfig+0x2b2>
 800a238:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a23c:	d009      	beq.n	800a252 <UART_SetConfig+0x2be>
 800a23e:	e00b      	b.n	800a258 <UART_SetConfig+0x2c4>
 800a240:	2300      	movs	r3, #0
 800a242:	77fb      	strb	r3, [r7, #31]
 800a244:	e04d      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a246:	2302      	movs	r3, #2
 800a248:	77fb      	strb	r3, [r7, #31]
 800a24a:	e04a      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a24c:	2304      	movs	r3, #4
 800a24e:	77fb      	strb	r3, [r7, #31]
 800a250:	e047      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a252:	2308      	movs	r3, #8
 800a254:	77fb      	strb	r3, [r7, #31]
 800a256:	e044      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a258:	2310      	movs	r3, #16
 800a25a:	77fb      	strb	r3, [r7, #31]
 800a25c:	bf00      	nop
 800a25e:	e040      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a11      	ldr	r2, [pc, #68]	; (800a2ac <UART_SetConfig+0x318>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d139      	bne.n	800a2de <UART_SetConfig+0x34a>
 800a26a:	4b09      	ldr	r3, [pc, #36]	; (800a290 <UART_SetConfig+0x2fc>)
 800a26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a278:	d027      	beq.n	800a2ca <UART_SetConfig+0x336>
 800a27a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a27e:	d817      	bhi.n	800a2b0 <UART_SetConfig+0x31c>
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01c      	beq.n	800a2be <UART_SetConfig+0x32a>
 800a284:	e027      	b.n	800a2d6 <UART_SetConfig+0x342>
 800a286:	bf00      	nop
 800a288:	efff69f3 	.word	0xefff69f3
 800a28c:	40011000 	.word	0x40011000
 800a290:	40023800 	.word	0x40023800
 800a294:	40004400 	.word	0x40004400
 800a298:	40004800 	.word	0x40004800
 800a29c:	40004c00 	.word	0x40004c00
 800a2a0:	40005000 	.word	0x40005000
 800a2a4:	40011400 	.word	0x40011400
 800a2a8:	40007800 	.word	0x40007800
 800a2ac:	40007c00 	.word	0x40007c00
 800a2b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2b4:	d006      	beq.n	800a2c4 <UART_SetConfig+0x330>
 800a2b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a2ba:	d009      	beq.n	800a2d0 <UART_SetConfig+0x33c>
 800a2bc:	e00b      	b.n	800a2d6 <UART_SetConfig+0x342>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	77fb      	strb	r3, [r7, #31]
 800a2c2:	e00e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	77fb      	strb	r3, [r7, #31]
 800a2c8:	e00b      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2ca:	2304      	movs	r3, #4
 800a2cc:	77fb      	strb	r3, [r7, #31]
 800a2ce:	e008      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2d0:	2308      	movs	r3, #8
 800a2d2:	77fb      	strb	r3, [r7, #31]
 800a2d4:	e005      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2d6:	2310      	movs	r3, #16
 800a2d8:	77fb      	strb	r3, [r7, #31]
 800a2da:	bf00      	nop
 800a2dc:	e001      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2de:	2310      	movs	r3, #16
 800a2e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ea:	d17c      	bne.n	800a3e6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800a2ec:	7ffb      	ldrb	r3, [r7, #31]
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d859      	bhi.n	800a3a6 <UART_SetConfig+0x412>
 800a2f2:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <UART_SetConfig+0x364>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a33b 	.word	0x0800a33b
 800a300:	0800a359 	.word	0x0800a359
 800a304:	0800a3a7 	.word	0x0800a3a7
 800a308:	0800a371 	.word	0x0800a371
 800a30c:	0800a3a7 	.word	0x0800a3a7
 800a310:	0800a3a7 	.word	0x0800a3a7
 800a314:	0800a3a7 	.word	0x0800a3a7
 800a318:	0800a38f 	.word	0x0800a38f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a31c:	f7fc f884 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800a320:	4603      	mov	r3, r0
 800a322:	005a      	lsls	r2, r3, #1
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	085b      	lsrs	r3, r3, #1
 800a32a:	441a      	add	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	fbb2 f3f3 	udiv	r3, r2, r3
 800a334:	b29b      	uxth	r3, r3
 800a336:	61bb      	str	r3, [r7, #24]
        break;
 800a338:	e038      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a33a:	f7fc f889 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 800a33e:	4603      	mov	r3, r0
 800a340:	005a      	lsls	r2, r3, #1
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	441a      	add	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a352:	b29b      	uxth	r3, r3
 800a354:	61bb      	str	r3, [r7, #24]
        break;
 800a356:	e029      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	085a      	lsrs	r2, r3, #1
 800a35e:	4b5d      	ldr	r3, [pc, #372]	; (800a4d4 <UART_SetConfig+0x540>)
 800a360:	4413      	add	r3, r2
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	6852      	ldr	r2, [r2, #4]
 800a366:	fbb3 f3f2 	udiv	r3, r3, r2
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	61bb      	str	r3, [r7, #24]
        break;
 800a36e:	e01d      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a370:	f7fb ff9c 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 800a374:	4603      	mov	r3, r0
 800a376:	005a      	lsls	r2, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	085b      	lsrs	r3, r3, #1
 800a37e:	441a      	add	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	fbb2 f3f3 	udiv	r3, r2, r3
 800a388:	b29b      	uxth	r3, r3
 800a38a:	61bb      	str	r3, [r7, #24]
        break;
 800a38c:	e00e      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	085b      	lsrs	r3, r3, #1
 800a394:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	61bb      	str	r3, [r7, #24]
        break;
 800a3a4:	e002      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
        break;
 800a3aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	2b0f      	cmp	r3, #15
 800a3b0:	d916      	bls.n	800a3e0 <UART_SetConfig+0x44c>
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b8:	d212      	bcs.n	800a3e0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	f023 030f 	bic.w	r3, r3, #15
 800a3c2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	085b      	lsrs	r3, r3, #1
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	89fa      	ldrh	r2, [r7, #14]
 800a3dc:	60da      	str	r2, [r3, #12]
 800a3de:	e06e      	b.n	800a4be <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]
 800a3e4:	e06b      	b.n	800a4be <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800a3e6:	7ffb      	ldrb	r3, [r7, #31]
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d857      	bhi.n	800a49c <UART_SetConfig+0x508>
 800a3ec:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <UART_SetConfig+0x460>)
 800a3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f2:	bf00      	nop
 800a3f4:	0800a419 	.word	0x0800a419
 800a3f8:	0800a435 	.word	0x0800a435
 800a3fc:	0800a451 	.word	0x0800a451
 800a400:	0800a49d 	.word	0x0800a49d
 800a404:	0800a469 	.word	0x0800a469
 800a408:	0800a49d 	.word	0x0800a49d
 800a40c:	0800a49d 	.word	0x0800a49d
 800a410:	0800a49d 	.word	0x0800a49d
 800a414:	0800a485 	.word	0x0800a485
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a418:	f7fc f806 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800a41c:	4602      	mov	r2, r0
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	085b      	lsrs	r3, r3, #1
 800a424:	441a      	add	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42e:	b29b      	uxth	r3, r3
 800a430:	61bb      	str	r3, [r7, #24]
        break;
 800a432:	e036      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a434:	f7fc f80c 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 800a438:	4602      	mov	r2, r0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	085b      	lsrs	r3, r3, #1
 800a440:	441a      	add	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	61bb      	str	r3, [r7, #24]
        break;
 800a44e:	e028      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	085a      	lsrs	r2, r3, #1
 800a456:	4b20      	ldr	r3, [pc, #128]	; (800a4d8 <UART_SetConfig+0x544>)
 800a458:	4413      	add	r3, r2
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6852      	ldr	r2, [r2, #4]
 800a45e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	61bb      	str	r3, [r7, #24]
        break;
 800a466:	e01c      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a468:	f7fb ff20 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 800a46c:	4602      	mov	r2, r0
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	085b      	lsrs	r3, r3, #1
 800a474:	441a      	add	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47e:	b29b      	uxth	r3, r3
 800a480:	61bb      	str	r3, [r7, #24]
        break;
 800a482:	e00e      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	fbb2 f3f3 	udiv	r3, r2, r3
 800a496:	b29b      	uxth	r3, r3
 800a498:	61bb      	str	r3, [r7, #24]
        break;
 800a49a:	e002      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
        break;
 800a4a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	2b0f      	cmp	r3, #15
 800a4a6:	d908      	bls.n	800a4ba <UART_SetConfig+0x526>
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ae:	d204      	bcs.n	800a4ba <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	60da      	str	r2, [r3, #12]
 800a4b8:	e001      	b.n	800a4be <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	01e84800 	.word	0x01e84800
 800a4d8:	00f42400 	.word	0x00f42400

0800a4dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00a      	beq.n	800a506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00a      	beq.n	800a54a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	f003 0308 	and.w	r3, r3, #8
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a570:	f003 0310 	and.w	r3, r3, #16
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00a      	beq.n	800a58e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01a      	beq.n	800a5f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5da:	d10a      	bne.n	800a5f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	605a      	str	r2, [r3, #4]
  }
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af02      	add	r7, sp, #8
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a62e:	f7f6 fa83 	bl	8000b38 <HAL_GetTick>
 800a632:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0308 	and.w	r3, r3, #8
 800a63e:	2b08      	cmp	r3, #8
 800a640:	d10e      	bne.n	800a660 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a642:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f814 	bl	800a67e <UART_WaitOnFlagUntilTimeout>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e00a      	b.n	800a676 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2220      	movs	r2, #32
 800a664:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	603b      	str	r3, [r7, #0]
 800a68a:	4613      	mov	r3, r2
 800a68c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a68e:	e02a      	b.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a696:	d026      	beq.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a698:	f7f6 fa4e 	bl	8000b38 <HAL_GetTick>
 800a69c:	4602      	mov	r2, r0
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d302      	bcc.n	800a6ae <UART_WaitOnFlagUntilTimeout+0x30>
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d11b      	bne.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e00f      	b.n	800a706 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	69da      	ldr	r2, [r3, #28]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	bf0c      	ite	eq
 800a6f6:	2301      	moveq	r3, #1
 800a6f8:	2300      	movne	r3, #0
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	429a      	cmp	r2, r3
 800a702:	d0c5      	beq.n	800a690 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d027      	beq.n	800a77a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4b2f      	ldr	r3, [pc, #188]	; (800a7f0 <FMC_SDRAM_Init+0xe0>)
 800a734:	4013      	ands	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a740:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a746:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a74c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a752:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a758:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a75e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a764:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a76a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4313      	orrs	r3, r2
 800a770:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	e032      	b.n	800a7e0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a786:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a790:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a796:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	4b12      	ldr	r3, [pc, #72]	; (800a7f0 <FMC_SDRAM_Init+0xe0>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a7b4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a7ba:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a7c0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a7c6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a7cc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	ffff8000 	.word	0xffff8000

0800a7f4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d02e      	beq.n	800a86c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a81a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	3b01      	subs	r3, #1
 800a828:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a82a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	3b01      	subs	r3, #1
 800a832:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a834:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a83e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	3b01      	subs	r3, #1
 800a846:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a848:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	3b01      	subs	r3, #1
 800a850:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a852:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	3b01      	subs	r3, #1
 800a85a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a85c:	4313      	orrs	r3, r2
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	4313      	orrs	r3, r2
 800a862:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	609a      	str	r2, [r3, #8]
 800a86a:	e039      	b.n	800a8e0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4b1e      	ldr	r3, [pc, #120]	; (800a8f0 <FMC_SDRAM_Timing_Init+0xfc>)
 800a876:	4013      	ands	r3, r2
 800a878:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	3b01      	subs	r3, #1
 800a880:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	3b01      	subs	r3, #1
 800a888:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a88a:	4313      	orrs	r3, r2
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	4313      	orrs	r3, r2
 800a890:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a89e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a8ae:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a8b8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a8c2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	371c      	adds	r7, #28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	ff0f0fff 	.word	0xff0f0fff

0800a8f4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a90c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	3b01      	subs	r3, #1
 800a914:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a916:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a936:	b480      	push	{r7}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	695a      	ldr	r2, [r3, #20]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	431a      	orrs	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a95c:	b084      	sub	sp, #16
 800a95e:	b480      	push	{r7}
 800a960:	b085      	sub	sp, #20
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	f107 001c 	add.w	r0, r7, #28
 800a96a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a972:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a974:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a976:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a97a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a97e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a982:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a986:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <SDMMC_Init+0x54>)
 800a994:	4013      	ands	r3, r2
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	431a      	orrs	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	b004      	add	sp, #16
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	ffff8100 	.word	0xffff8100

0800a9b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2203      	movs	r2, #3
 800a9da:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0303 	and.w	r3, r3, #3
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
	...

0800aa08 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aa2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aa32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <SDMMC_SendCommand+0x50>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	431a      	orrs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	fffff000 	.word	0xfffff000

0800aa5c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	b2db      	uxtb	r3, r3
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b085      	sub	sp, #20
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3314      	adds	r3, #20
 800aa88:	461a      	mov	r2, r3
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
}  
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aac6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aacc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aad2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aade:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0

}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab02:	2300      	movs	r3, #0
 800ab04:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ab0a:	2310      	movs	r3, #16
 800ab0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab0e:	2340      	movs	r3, #64	; 0x40
 800ab10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab12:	2300      	movs	r3, #0
 800ab14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab1a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff ff70 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ab28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2c:	2110      	movs	r1, #16
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fa64 	bl	800affc <SDMMC_GetCmdResp1>
 800ab34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab36:	69fb      	ldr	r3, [r7, #28]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3720      	adds	r7, #32
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b088      	sub	sp, #32
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ab52:	2311      	movs	r3, #17
 800ab54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab62:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff ff4c 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab74:	2111      	movs	r1, #17
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa40 	bl	800affc <SDMMC_GetCmdResp1>
 800ab7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ab9a:	2312      	movs	r3, #18
 800ab9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab9e:	2340      	movs	r3, #64	; 0x40
 800aba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abaa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abac:	f107 0308 	add.w	r3, r7, #8
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff ff28 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800abb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abbc:	2112      	movs	r1, #18
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fa1c 	bl	800affc <SDMMC_GetCmdResp1>
 800abc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abc6:	69fb      	ldr	r3, [r7, #28]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3720      	adds	r7, #32
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800abe2:	2318      	movs	r3, #24
 800abe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abe6:	2340      	movs	r3, #64	; 0x40
 800abe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abea:	2300      	movs	r3, #0
 800abec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf4:	f107 0308 	add.w	r3, r7, #8
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff ff04 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac04:	2118      	movs	r1, #24
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f9f8 	bl	800affc <SDMMC_GetCmdResp1>
 800ac0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac0e:	69fb      	ldr	r3, [r7, #28]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3720      	adds	r7, #32
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ac2a:	2319      	movs	r3, #25
 800ac2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac2e:	2340      	movs	r3, #64	; 0x40
 800ac30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac3a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac3c:	f107 0308 	add.w	r3, r7, #8
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff fee0 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ac48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac4c:	2119      	movs	r1, #25
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f9d4 	bl	800affc <SDMMC_GetCmdResp1>
 800ac54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac56:	69fb      	ldr	r3, [r7, #28]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ac70:	230c      	movs	r3, #12
 800ac72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac74:	2340      	movs	r3, #64	; 0x40
 800ac76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac80:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff febd 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800ac8e:	4a05      	ldr	r2, [pc, #20]	; (800aca4 <SDMMC_CmdStopTransfer+0x44>)
 800ac90:	210c      	movs	r1, #12
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f9b2 	bl	800affc <SDMMC_GetCmdResp1>
 800ac98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	05f5e100 	.word	0x05f5e100

0800aca8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	; 0x28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acb4:	2300      	movs	r3, #0
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800acbc:	2307      	movs	r3, #7
 800acbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acc0:	2340      	movs	r3, #64	; 0x40
 800acc2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acc4:	2300      	movs	r3, #0
 800acc6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800accc:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acce:	f107 0310 	add.w	r3, r7, #16
 800acd2:	4619      	mov	r1, r3
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7ff fe97 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800acda:	f241 3288 	movw	r2, #5000	; 0x1388
 800acde:	2107      	movs	r1, #7
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 f98b 	bl	800affc <SDMMC_GetCmdResp1>
 800ace6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acea:	4618      	mov	r0, r3
 800acec:	3728      	adds	r7, #40	; 0x28
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b088      	sub	sp, #32
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ad06:	2300      	movs	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad12:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad14:	f107 0308 	add.w	r3, r7, #8
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7ff fe74 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f941 	bl	800afa8 <SDMMC_GetCmdError>
 800ad26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad28:	69fb      	ldr	r3, [r7, #28]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b088      	sub	sp, #32
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ad3e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ad42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ad44:	2308      	movs	r3, #8
 800ad46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad48:	2340      	movs	r3, #64	; 0x40
 800ad4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad54:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad56:	f107 0308 	add.w	r3, r7, #8
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fe53 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fb12 	bl	800b38c <SDMMC_GetCmdResp7>
 800ad68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3720      	adds	r7, #32
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad86:	2337      	movs	r3, #55	; 0x37
 800ad88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad8a:	2340      	movs	r3, #64	; 0x40
 800ad8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad96:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad98:	f107 0308 	add.w	r3, r7, #8
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7ff fe32 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ada4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada8:	2137      	movs	r1, #55	; 0x37
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f926 	bl	800affc <SDMMC_GetCmdResp1>
 800adb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb2:	69fb      	ldr	r3, [r7, #28]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3720      	adds	r7, #32
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b088      	sub	sp, #32
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <SDMMC_CmdAppOperCommand+0x48>)
 800adce:	4313      	orrs	r3, r2
 800add0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800add2:	2329      	movs	r3, #41	; 0x29
 800add4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ade4:	f107 0308 	add.w	r3, r7, #8
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff fe0c 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fa29 	bl	800b248 <SDMMC_GetCmdResp3>
 800adf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adf8:	69fb      	ldr	r3, [r7, #28]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3720      	adds	r7, #32
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	80100000 	.word	0x80100000

0800ae08 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ae1a:	2306      	movs	r3, #6
 800ae1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae1e:	2340      	movs	r3, #64	; 0x40
 800ae20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae22:	2300      	movs	r3, #0
 800ae24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae2a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae2c:	f107 0308 	add.w	r3, r7, #8
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fde8 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ae38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3c:	2106      	movs	r1, #6
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f8dc 	bl	800affc <SDMMC_GetCmdResp1>
 800ae44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae46:	69fb      	ldr	r3, [r7, #28]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ae60:	2333      	movs	r3, #51	; 0x33
 800ae62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae64:	2340      	movs	r3, #64	; 0x40
 800ae66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae70:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae72:	f107 0308 	add.w	r3, r7, #8
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff fdc5 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ae7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae82:	2133      	movs	r1, #51	; 0x33
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f8b9 	bl	800affc <SDMMC_GetCmdResp1>
 800ae8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3720      	adds	r7, #32
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b088      	sub	sp, #32
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aea6:	2302      	movs	r3, #2
 800aea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aeaa:	23c0      	movs	r3, #192	; 0xc0
 800aeac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeb8:	f107 0308 	add.w	r3, r7, #8
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fda2 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f97f 	bl	800b1c8 <SDMMC_GetCmdResp2>
 800aeca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aecc:	69fb      	ldr	r3, [r7, #28]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b088      	sub	sp, #32
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aee0:	2300      	movs	r3, #0
 800aee2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aee8:	2309      	movs	r3, #9
 800aeea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aeec:	23c0      	movs	r3, #192	; 0xc0
 800aeee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef0:	2300      	movs	r3, #0
 800aef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aefa:	f107 0308 	add.w	r3, r7, #8
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fd81 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f95e 	bl	800b1c8 <SDMMC_GetCmdResp2>
 800af0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0e:	69fb      	ldr	r3, [r7, #28]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af22:	2300      	movs	r3, #0
 800af24:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af2a:	2303      	movs	r3, #3
 800af2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af2e:	2340      	movs	r3, #64	; 0x40
 800af30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af32:	2300      	movs	r3, #0
 800af34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af3a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af3c:	f107 0308 	add.w	r3, r7, #8
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff fd60 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	2103      	movs	r1, #3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f9af 	bl	800b2b0 <SDMMC_GetCmdResp6>
 800af52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af54:	69fb      	ldr	r3, [r7, #28]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b088      	sub	sp, #32
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af68:	2300      	movs	r3, #0
 800af6a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800af70:	230d      	movs	r3, #13
 800af72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af74:	2340      	movs	r3, #64	; 0x40
 800af76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af78:	2300      	movs	r3, #0
 800af7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af80:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af82:	f107 0308 	add.w	r3, r7, #8
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff fd3d 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800af8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af92:	210d      	movs	r1, #13
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f831 	bl	800affc <SDMMC_GetCmdResp1>
 800af9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af9c:	69fb      	ldr	r3, [r7, #28]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3720      	adds	r7, #32
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800afa8:	b490      	push	{r4, r7}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800afb0:	4b10      	ldr	r3, [pc, #64]	; (800aff4 <SDMMC_GetCmdError+0x4c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a10      	ldr	r2, [pc, #64]	; (800aff8 <SDMMC_GetCmdError+0x50>)
 800afb6:	fba2 2303 	umull	r2, r3, r2, r3
 800afba:	0a5b      	lsrs	r3, r3, #9
 800afbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800afc4:	4623      	mov	r3, r4
 800afc6:	1e5c      	subs	r4, r3, #1
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afd0:	e00a      	b.n	800afe8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0f2      	beq.n	800afc4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bc90      	pop	{r4, r7}
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	20000060 	.word	0x20000060
 800aff8:	10624dd3 	.word	0x10624dd3

0800affc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800affc:	b590      	push	{r4, r7, lr}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	460b      	mov	r3, r1
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800b00a:	4b6c      	ldr	r3, [pc, #432]	; (800b1bc <SDMMC_GetCmdResp1+0x1c0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a6c      	ldr	r2, [pc, #432]	; (800b1c0 <SDMMC_GetCmdResp1+0x1c4>)
 800b010:	fba2 2303 	umull	r2, r3, r2, r3
 800b014:	0a5b      	lsrs	r3, r3, #9
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b01c:	4623      	mov	r3, r4
 800b01e:	1e5c      	subs	r4, r3, #1
 800b020:	2b00      	cmp	r3, #0
 800b022:	d102      	bne.n	800b02a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b028:	e0c3      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0f2      	beq.n	800b01c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2204      	movs	r2, #4
 800b046:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b048:	2304      	movs	r3, #4
 800b04a:	e0b2      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	d004      	beq.n	800b062 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2201      	movs	r2, #1
 800b05c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b05e:	2301      	movs	r3, #1
 800b060:	e0a7      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff fcfa 	bl	800aa5c <SDMMC_GetCommandResponse>
 800b068:	4603      	mov	r3, r0
 800b06a:	461a      	mov	r2, r3
 800b06c:	7afb      	ldrb	r3, [r7, #11]
 800b06e:	4293      	cmp	r3, r2
 800b070:	d001      	beq.n	800b076 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b072:	2301      	movs	r3, #1
 800b074:	e09d      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b07c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b07e:	2100      	movs	r1, #0
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fcf8 	bl	800aa76 <SDMMC_GetResponse>
 800b086:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	4b4e      	ldr	r3, [pc, #312]	; (800b1c4 <SDMMC_GetCmdResp1+0x1c8>)
 800b08c:	4013      	ands	r3, r2
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800b092:	2300      	movs	r3, #0
 800b094:	e08d      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da02      	bge.n	800b0a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b09c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0a0:	e087      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b0ac:	2340      	movs	r3, #64	; 0x40
 800b0ae:	e080      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b0ba:	2380      	movs	r3, #128	; 0x80
 800b0bc:	e079      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b0c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0cc:	e071      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0dc:	e069      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ec:	e061      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b0f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0fc:	e059      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b10c:	e051      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b11c:	e049      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b12c:	e041      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800b138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b13c:	e039      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b14c:	e031      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b158:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b15c:	e029      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b168:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b16c:	e021      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b178:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b17c:	e019      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b18c:	e011      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b19c:	e009      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f003 0308 	and.w	r3, r3, #8
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b1a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b1ac:	e001      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	371c      	adds	r7, #28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd90      	pop	{r4, r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000060 	.word	0x20000060
 800b1c0:	10624dd3 	.word	0x10624dd3
 800b1c4:	fdffe008 	.word	0xfdffe008

0800b1c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b1c8:	b490      	push	{r4, r7}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b1d0:	4b1b      	ldr	r3, [pc, #108]	; (800b240 <SDMMC_GetCmdResp2+0x78>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a1b      	ldr	r2, [pc, #108]	; (800b244 <SDMMC_GetCmdResp2+0x7c>)
 800b1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1da:	0a5b      	lsrs	r3, r3, #9
 800b1dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b1e4:	4623      	mov	r3, r4
 800b1e6:	1e5c      	subs	r4, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1f0:	e020      	b.n	800b234 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0f2      	beq.n	800b1e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b202:	f003 0304 	and.w	r3, r3, #4
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2204      	movs	r2, #4
 800b20e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b210:	2304      	movs	r3, #4
 800b212:	e00f      	b.n	800b234 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b226:	2301      	movs	r3, #1
 800b228:	e004      	b.n	800b234 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b230:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bc90      	pop	{r4, r7}
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	20000060 	.word	0x20000060
 800b244:	10624dd3 	.word	0x10624dd3

0800b248 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b248:	b490      	push	{r4, r7}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b250:	4b15      	ldr	r3, [pc, #84]	; (800b2a8 <SDMMC_GetCmdResp3+0x60>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a15      	ldr	r2, [pc, #84]	; (800b2ac <SDMMC_GetCmdResp3+0x64>)
 800b256:	fba2 2303 	umull	r2, r3, r2, r3
 800b25a:	0a5b      	lsrs	r3, r3, #9
 800b25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b260:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b264:	4623      	mov	r3, r4
 800b266:	1e5c      	subs	r4, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b26c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b270:	e015      	b.n	800b29e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b276:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0f2      	beq.n	800b264 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b282:	f003 0304 	and.w	r3, r3, #4
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2204      	movs	r2, #4
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b290:	2304      	movs	r3, #4
 800b292:	e004      	b.n	800b29e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bc90      	pop	{r4, r7}
 800b2a6:	4770      	bx	lr
 800b2a8:	20000060 	.word	0x20000060
 800b2ac:	10624dd3 	.word	0x10624dd3

0800b2b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b2b0:	b590      	push	{r4, r7, lr}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b2be:	4b31      	ldr	r3, [pc, #196]	; (800b384 <SDMMC_GetCmdResp6+0xd4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a31      	ldr	r2, [pc, #196]	; (800b388 <SDMMC_GetCmdResp6+0xd8>)
 800b2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c8:	0a5b      	lsrs	r3, r3, #9
 800b2ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ce:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b2d2:	4623      	mov	r3, r4
 800b2d4:	1e5c      	subs	r4, r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d102      	bne.n	800b2e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2de:	e04c      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0f2      	beq.n	800b2d2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f0:	f003 0304 	and.w	r3, r3, #4
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d004      	beq.n	800b302 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2204      	movs	r2, #4
 800b2fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2fe:	2304      	movs	r3, #4
 800b300:	e03b      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d004      	beq.n	800b318 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2201      	movs	r2, #1
 800b312:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b314:	2301      	movs	r3, #1
 800b316:	e030      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f7ff fb9f 	bl	800aa5c <SDMMC_GetCommandResponse>
 800b31e:	4603      	mov	r3, r0
 800b320:	461a      	mov	r2, r3
 800b322:	7afb      	ldrb	r3, [r7, #11]
 800b324:	4293      	cmp	r3, r2
 800b326:	d001      	beq.n	800b32c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b328:	2301      	movs	r3, #1
 800b32a:	e026      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b332:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b334:	2100      	movs	r1, #0
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f7ff fb9d 	bl	800aa76 <SDMMC_GetResponse>
 800b33c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d106      	bne.n	800b356 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	0c1b      	lsrs	r3, r3, #16
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b352:	2300      	movs	r3, #0
 800b354:	e011      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b364:	e009      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b374:	e001      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	371c      	adds	r7, #28
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd90      	pop	{r4, r7, pc}
 800b382:	bf00      	nop
 800b384:	20000060 	.word	0x20000060
 800b388:	10624dd3 	.word	0x10624dd3

0800b38c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b38c:	b490      	push	{r4, r7}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b394:	4b18      	ldr	r3, [pc, #96]	; (800b3f8 <SDMMC_GetCmdResp7+0x6c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a18      	ldr	r2, [pc, #96]	; (800b3fc <SDMMC_GetCmdResp7+0x70>)
 800b39a:	fba2 2303 	umull	r2, r3, r2, r3
 800b39e:	0a5b      	lsrs	r3, r3, #9
 800b3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b3a8:	4623      	mov	r3, r4
 800b3aa:	1e5c      	subs	r4, r3, #1
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3b4:	e01a      	b.n	800b3ec <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0f2      	beq.n	800b3a8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c6:	f003 0304 	and.w	r3, r3, #4
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d004      	beq.n	800b3d8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2240      	movs	r2, #64	; 0x40
 800b3d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3d4:	2304      	movs	r3, #4
 800b3d6:	e009      	b.n	800b3ec <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2240      	movs	r2, #64	; 0x40
 800b3e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b3ea:	2300      	movs	r3, #0
  
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bc90      	pop	{r4, r7}
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	20000060 	.word	0x20000060
 800b3fc:	10624dd3 	.word	0x10624dd3

0800b400 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b400:	b084      	sub	sp, #16
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	f107 001c 	add.w	r0, r7, #28
 800b40e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	2b01      	cmp	r3, #1
 800b416:	d120      	bne.n	800b45a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68da      	ldr	r2, [r3, #12]
 800b428:	4b20      	ldr	r3, [pc, #128]	; (800b4ac <USB_CoreInit+0xac>)
 800b42a:	4013      	ands	r3, r2
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d105      	bne.n	800b44e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f942 	bl	800b6d8 <USB_CoreReset>
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]
 800b458:	e010      	b.n	800b47c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f936 	bl	800b6d8 <USB_CoreReset>
 800b46c:	4603      	mov	r3, r0
 800b46e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d10b      	bne.n	800b49a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f043 0206 	orr.w	r2, r3, #6
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f043 0220 	orr.w	r2, r3, #32
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4a6:	b004      	add	sp, #16
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	ffbdffbf 	.word	0xffbdffbf

0800b4b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f043 0201 	orr.w	r2, r3, #1
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f023 0201 	bic.w	r2, r3, #1
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d106      	bne.n	800b520 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	60da      	str	r2, [r3, #12]
 800b51e:	e00b      	b.n	800b538 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d106      	bne.n	800b534 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	60da      	str	r2, [r3, #12]
 800b532:	e001      	b.n	800b538 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e003      	b.n	800b540 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b538:	2032      	movs	r0, #50	; 0x32
 800b53a:	f7f5 fb09 	bl	8000b50 <HAL_Delay>

  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	019b      	lsls	r3, r3, #6
 800b55a:	f043 0220 	orr.w	r2, r3, #32
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3301      	adds	r3, #1
 800b566:	60fb      	str	r3, [r7, #12]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4a09      	ldr	r2, [pc, #36]	; (800b590 <USB_FlushTxFifo+0x48>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d901      	bls.n	800b574 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e006      	b.n	800b582 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f003 0320 	and.w	r3, r3, #32
 800b57c:	2b20      	cmp	r3, #32
 800b57e:	d0f0      	beq.n	800b562 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	00030d40 	.word	0x00030d40

0800b594 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2210      	movs	r2, #16
 800b5a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <USB_FlushRxFifo+0x40>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d901      	bls.n	800b5b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e006      	b.n	800b5c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	2b10      	cmp	r3, #16
 800b5c2:	d0f0      	beq.n	800b5a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	00030d40 	.word	0x00030d40

0800b5d8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b089      	sub	sp, #36	; 0x24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	71fb      	strb	r3, [r7, #7]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b5f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d11a      	bne.n	800b634 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b5fe:	88bb      	ldrh	r3, [r7, #4]
 800b600:	3303      	adds	r3, #3
 800b602:	089b      	lsrs	r3, r3, #2
 800b604:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b606:	2300      	movs	r3, #0
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	e00f      	b.n	800b62c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	031a      	lsls	r2, r3, #12
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	4413      	add	r3, r2
 800b614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b618:	461a      	mov	r2, r3
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	3304      	adds	r3, #4
 800b624:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	3301      	adds	r3, #1
 800b62a:	61bb      	str	r3, [r7, #24]
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	429a      	cmp	r2, r3
 800b632:	d3eb      	bcc.n	800b60c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3724      	adds	r7, #36	; 0x24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b642:	b480      	push	{r7}
 800b644:	b089      	sub	sp, #36	; 0x24
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	4613      	mov	r3, r2
 800b64e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b658:	88fb      	ldrh	r3, [r7, #6]
 800b65a:	3303      	adds	r3, #3
 800b65c:	089b      	lsrs	r3, r3, #2
 800b65e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b660:	2300      	movs	r3, #0
 800b662:	61bb      	str	r3, [r7, #24]
 800b664:	e00b      	b.n	800b67e <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	601a      	str	r2, [r3, #0]
    pDest++;
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	3304      	adds	r3, #4
 800b676:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	3301      	adds	r3, #1
 800b67c:	61bb      	str	r3, [r7, #24]
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	429a      	cmp	r2, r3
 800b684:	d3ef      	bcc.n	800b666 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b686:	69fb      	ldr	r3, [r7, #28]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3724      	adds	r7, #36	; 0x24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	370c      	adds	r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	4a13      	ldr	r2, [pc, #76]	; (800b73c <USB_CoreReset+0x64>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d901      	bls.n	800b6f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e01b      	b.n	800b72e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	daf2      	bge.n	800b6e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	f043 0201 	orr.w	r2, r3, #1
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3301      	adds	r3, #1
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4a09      	ldr	r2, [pc, #36]	; (800b73c <USB_CoreReset+0x64>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d901      	bls.n	800b720 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e006      	b.n	800b72e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d0f0      	beq.n	800b70e <USB_CoreReset+0x36>

  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	00030d40 	.word	0x00030d40

0800b740 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b740:	b084      	sub	sp, #16
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	f107 001c 	add.w	r0, r7, #28
 800b74e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b75c:	461a      	mov	r2, r3
 800b75e:	2300      	movs	r3, #0
 800b760:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b766:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b776:	2b00      	cmp	r3, #0
 800b778:	d018      	beq.n	800b7ac <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	d10a      	bne.n	800b796 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b78e:	f043 0304 	orr.w	r3, r3, #4
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	e014      	b.n	800b7c0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7a4:	f023 0304 	bic.w	r3, r3, #4
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	e009      	b.n	800b7c0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7ba:	f023 0304 	bic.w	r3, r3, #4
 800b7be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b7c0:	2110      	movs	r1, #16
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff fec0 	bl	800b548 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7ff fee3 	bl	800b594 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	e015      	b.n	800b800 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	429a      	cmp	r2, r3
 800b806:	d3e5      	bcc.n	800b7d4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b808:	2101      	movs	r1, #1
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f8ac 	bl	800b968 <USB_DriveVbus>

  HAL_Delay(200U);
 800b810:	20c8      	movs	r0, #200	; 0xc8
 800b812:	f7f5 f99d 	bl	8000b50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f04f 32ff 	mov.w	r2, #4294967295
 800b822:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00b      	beq.n	800b848 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b836:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a14      	ldr	r2, [pc, #80]	; (800b88c <USB_HostInit+0x14c>)
 800b83c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a13      	ldr	r2, [pc, #76]	; (800b890 <USB_HostInit+0x150>)
 800b842:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b846:	e009      	b.n	800b85c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2280      	movs	r2, #128	; 0x80
 800b84c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a10      	ldr	r2, [pc, #64]	; (800b894 <USB_HostInit+0x154>)
 800b852:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a10      	ldr	r2, [pc, #64]	; (800b898 <USB_HostInit+0x158>)
 800b858:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d105      	bne.n	800b86e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	f043 0210 	orr.w	r2, r3, #16
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	699a      	ldr	r2, [r3, #24]
 800b872:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <USB_HostInit+0x15c>)
 800b874:	4313      	orrs	r3, r2
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b886:	b004      	add	sp, #16
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	01000200 	.word	0x01000200
 800b890:	00e00300 	.word	0x00e00300
 800b894:	00600080 	.word	0x00600080
 800b898:	004000e0 	.word	0x004000e0
 800b89c:	a3200008 	.word	0xa3200008

0800b8a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8be:	f023 0303 	bic.w	r3, r3, #3
 800b8c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	78fb      	ldrb	r3, [r7, #3]
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	68f9      	ldr	r1, [r7, #12]
 800b8d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b8dc:	78fb      	ldrb	r3, [r7, #3]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d107      	bne.n	800b8f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b8ee:	6053      	str	r3, [r2, #4]
 800b8f0:	e009      	b.n	800b906 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d106      	bne.n	800b906 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8fe:	461a      	mov	r2, r3
 800b900:	f241 7370 	movw	r3, #6000	; 0x1770
 800b904:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b934:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b93e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b942:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b944:	2064      	movs	r0, #100	; 0x64
 800b946:	f7f5 f903 	bl	8000b50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b956:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b958:	200a      	movs	r0, #10
 800b95a:	f7f5 f8f9 	bl	8000b50 <HAL_Delay>

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b98c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d109      	bne.n	800b9ac <USB_DriveVbus+0x44>
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d106      	bne.n	800b9ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b9a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b9aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b6:	d109      	bne.n	800b9cc <USB_DriveVbus+0x64>
 800b9b8:	78fb      	ldrb	r3, [r7, #3]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d106      	bne.n	800b9cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b9c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b085      	sub	sp, #20
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	0c5b      	lsrs	r3, r3, #17
 800b9f8:	f003 0303 	and.w	r3, r3, #3
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	b29b      	uxth	r3, r3
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
	...

0800ba2c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	4608      	mov	r0, r1
 800ba36:	4611      	mov	r1, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	70fb      	strb	r3, [r7, #3]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	70bb      	strb	r3, [r7, #2]
 800ba42:	4613      	mov	r3, r2
 800ba44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ba4e:	78fb      	ldrb	r3, [r7, #3]
 800ba50:	015a      	lsls	r2, r3, #5
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ba62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d87e      	bhi.n	800bb68 <USB_HC_Init+0x13c>
 800ba6a:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <USB_HC_Init+0x44>)
 800ba6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba70:	0800ba81 	.word	0x0800ba81
 800ba74:	0800bb2b 	.word	0x0800bb2b
 800ba78:	0800ba81 	.word	0x0800ba81
 800ba7c:	0800baed 	.word	0x0800baed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	015a      	lsls	r2, r3, #5
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	4413      	add	r3, r2
 800ba88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	f240 439d 	movw	r3, #1181	; 0x49d
 800ba92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ba94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	da10      	bge.n	800babe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	78fa      	ldrb	r2, [r7, #3]
 800baac:	0151      	lsls	r1, r2, #5
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	440a      	add	r2, r1
 800bab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800babc:	e057      	b.n	800bb6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d051      	beq.n	800bb6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	015a      	lsls	r2, r3, #5
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	0151      	lsls	r1, r2, #5
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	440a      	add	r2, r1
 800bae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bae4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bae8:	60d3      	str	r3, [r2, #12]
      break;
 800baea:	e040      	b.n	800bb6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baf8:	461a      	mov	r2, r3
 800bafa:	f240 639d 	movw	r3, #1693	; 0x69d
 800bafe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bb00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	da34      	bge.n	800bb72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bb08:	78fb      	ldrb	r3, [r7, #3]
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	78fa      	ldrb	r2, [r7, #3]
 800bb18:	0151      	lsls	r1, r2, #5
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	440a      	add	r2, r1
 800bb1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb26:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bb28:	e023      	b.n	800bb72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	015a      	lsls	r2, r3, #5
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	4413      	add	r3, r2
 800bb32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb36:	461a      	mov	r2, r3
 800bb38:	f240 2325 	movw	r3, #549	; 0x225
 800bb3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bb3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	da17      	bge.n	800bb76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bb46:	78fb      	ldrb	r3, [r7, #3]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	78fa      	ldrb	r2, [r7, #3]
 800bb56:	0151      	lsls	r1, r2, #5
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	440a      	add	r2, r1
 800bb5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bb64:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bb66:	e006      	b.n	800bb76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb6c:	e004      	b.n	800bb78 <USB_HC_Init+0x14c>
      break;
 800bb6e:	bf00      	nop
 800bb70:	e002      	b.n	800bb78 <USB_HC_Init+0x14c>
      break;
 800bb72:	bf00      	nop
 800bb74:	e000      	b.n	800bb78 <USB_HC_Init+0x14c>
      break;
 800bb76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb7e:	699a      	ldr	r2, [r3, #24]
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	f003 030f 	and.w	r3, r3, #15
 800bb86:	2101      	movs	r1, #1
 800bb88:	fa01 f303 	lsl.w	r3, r1, r3
 800bb8c:	68b9      	ldr	r1, [r7, #8]
 800bb8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bb92:	4313      	orrs	r3, r2
 800bb94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da03      	bge.n	800bbb2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bbaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbae:	613b      	str	r3, [r7, #16]
 800bbb0:	e001      	b.n	800bbb6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bbb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d103      	bne.n	800bbc6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bbbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e001      	b.n	800bbca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bbca:	787b      	ldrb	r3, [r7, #1]
 800bbcc:	059b      	lsls	r3, r3, #22
 800bbce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bbd2:	78bb      	ldrb	r3, [r7, #2]
 800bbd4:	02db      	lsls	r3, r3, #11
 800bbd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bbda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bbdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bbe0:	049b      	lsls	r3, r3, #18
 800bbe2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bbe6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bbe8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bbea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bbee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bbf4:	78fb      	ldrb	r3, [r7, #3]
 800bbf6:	0159      	lsls	r1, r3, #5
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	440b      	add	r3, r1
 800bbfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc00:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bc06:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bc08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d10f      	bne.n	800bc30 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	78fa      	ldrb	r2, [r7, #3]
 800bc20:	0151      	lsls	r1, r2, #5
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	440a      	add	r2, r1
 800bc26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc2e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop

0800bc40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08c      	sub	sp, #48	; 0x30
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	785b      	ldrb	r3, [r3, #1]
 800bc56:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bc58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d028      	beq.n	800bcbc <USB_HC_StartXfer+0x7c>
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	791b      	ldrb	r3, [r3, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d124      	bne.n	800bcbc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10b      	bne.n	800bc90 <USB_HC_StartXfer+0x50>
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	795b      	ldrb	r3, [r3, #5]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d107      	bne.n	800bc90 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	785b      	ldrb	r3, [r3, #1]
 800bc84:	4619      	mov	r1, r3
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 fa2e 	bl	800c0e8 <USB_DoPing>
      return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e112      	b.n	800beb6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800bc90:	79fb      	ldrb	r3, [r7, #7]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d112      	bne.n	800bcbc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	015a      	lsls	r2, r3, #5
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	69fa      	ldr	r2, [r7, #28]
 800bca6:	0151      	lsls	r1, r2, #5
 800bca8:	6a3a      	ldr	r2, [r7, #32]
 800bcaa:	440a      	add	r2, r1
 800bcac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcb0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bcb4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d018      	beq.n	800bcf6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	8912      	ldrh	r2, [r2, #8]
 800bccc:	4413      	add	r3, r2
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	8912      	ldrh	r2, [r2, #8]
 800bcd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcd8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bcda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bcdc:	8b7b      	ldrh	r3, [r7, #26]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d90b      	bls.n	800bcfa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800bce2:	8b7b      	ldrh	r3, [r7, #26]
 800bce4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	8912      	ldrh	r2, [r2, #8]
 800bcec:	fb02 f203 	mul.w	r2, r2, r3
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	611a      	str	r2, [r3, #16]
 800bcf4:	e001      	b.n	800bcfa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	78db      	ldrb	r3, [r3, #3]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d006      	beq.n	800bd10 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bd02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	8912      	ldrh	r2, [r2, #8]
 800bd08:	fb02 f203 	mul.w	r2, r2, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd1a:	04d9      	lsls	r1, r3, #19
 800bd1c:	4b68      	ldr	r3, [pc, #416]	; (800bec0 <USB_HC_StartXfer+0x280>)
 800bd1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	7a9b      	ldrb	r3, [r3, #10]
 800bd26:	075b      	lsls	r3, r3, #29
 800bd28:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd2c:	69f9      	ldr	r1, [r7, #28]
 800bd2e:	0148      	lsls	r0, r1, #5
 800bd30:	6a39      	ldr	r1, [r7, #32]
 800bd32:	4401      	add	r1, r0
 800bd34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d009      	beq.n	800bd56 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	68d9      	ldr	r1, [r3, #12]
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd52:	460a      	mov	r2, r1
 800bd54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	bf0c      	ite	eq
 800bd66:	2301      	moveq	r3, #1
 800bd68:	2300      	movne	r3, #0
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	69fa      	ldr	r2, [r7, #28]
 800bd7e:	0151      	lsls	r1, r2, #5
 800bd80:	6a3a      	ldr	r2, [r7, #32]
 800bd82:	440a      	add	r2, r1
 800bd84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	015a      	lsls	r2, r3, #5
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	7e7b      	ldrb	r3, [r7, #25]
 800bd9e:	075b      	lsls	r3, r3, #29
 800bda0:	69f9      	ldr	r1, [r7, #28]
 800bda2:	0148      	lsls	r0, r1, #5
 800bda4:	6a39      	ldr	r1, [r7, #32]
 800bda6:	4401      	add	r1, r0
 800bda8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bdac:	4313      	orrs	r3, r2
 800bdae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a41      	ldr	r2, [pc, #260]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdc0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bdc2:	4b40      	ldr	r3, [pc, #256]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bdca:	4a3e      	ldr	r2, [pc, #248]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdcc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	78db      	ldrb	r3, [r3, #3]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d006      	beq.n	800bde4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bdd6:	4b3b      	ldr	r3, [pc, #236]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdde:	4a39      	ldr	r2, [pc, #228]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	e005      	b.n	800bdf0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bde4:	4b37      	ldr	r3, [pc, #220]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bdec:	4a35      	ldr	r2, [pc, #212]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bdf0:	4b34      	ldr	r3, [pc, #208]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bdf8:	4a32      	ldr	r2, [pc, #200]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdfa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	6a3b      	ldr	r3, [r7, #32]
 800be02:	4413      	add	r3, r2
 800be04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be08:	461a      	mov	r2, r3
 800be0a:	4b2e      	ldr	r3, [pc, #184]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d14e      	bne.n	800beb4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	78db      	ldrb	r3, [r3, #3]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d14a      	bne.n	800beb4 <USB_HC_StartXfer+0x274>
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d046      	beq.n	800beb4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	79db      	ldrb	r3, [r3, #7]
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d830      	bhi.n	800be90 <USB_HC_StartXfer+0x250>
 800be2e:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <USB_HC_StartXfer+0x1f4>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be69 	.word	0x0800be69
 800be3c:	0800be45 	.word	0x0800be45
 800be40:	0800be69 	.word	0x0800be69
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	3303      	adds	r3, #3
 800be4a:	089b      	lsrs	r3, r3, #2
 800be4c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800be4e:	8afa      	ldrh	r2, [r7, #22]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	b29b      	uxth	r3, r3
 800be56:	429a      	cmp	r2, r3
 800be58:	d91c      	bls.n	800be94 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	f043 0220 	orr.w	r2, r3, #32
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	619a      	str	r2, [r3, #24]
          }
          break;
 800be66:	e015      	b.n	800be94 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	3303      	adds	r3, #3
 800be6e:	089b      	lsrs	r3, r3, #2
 800be70:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800be72:	8afa      	ldrh	r2, [r7, #22]
 800be74:	6a3b      	ldr	r3, [r7, #32]
 800be76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	429a      	cmp	r2, r3
 800be80:	d90a      	bls.n	800be98 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	619a      	str	r2, [r3, #24]
          }
          break;
 800be8e:	e003      	b.n	800be98 <USB_HC_StartXfer+0x258>

        default:
          break;
 800be90:	bf00      	nop
 800be92:	e002      	b.n	800be9a <USB_HC_StartXfer+0x25a>
          break;
 800be94:	bf00      	nop
 800be96:	e000      	b.n	800be9a <USB_HC_StartXfer+0x25a>
          break;
 800be98:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	68d9      	ldr	r1, [r3, #12]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	785a      	ldrb	r2, [r3, #1]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	b298      	uxth	r0, r3
 800bea8:	2300      	movs	r3, #0
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	4603      	mov	r3, r0
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f7ff fb92 	bl	800b5d8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3728      	adds	r7, #40	; 0x28
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	1ff80000 	.word	0x1ff80000
 800bec4:	20000104 	.word	0x20000104

0800bec8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beda:	695b      	ldr	r3, [r3, #20]
 800bedc:	b29b      	uxth	r3, r3
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3714      	adds	r7, #20
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800beea:	b480      	push	{r7}
 800beec:	b087      	sub	sp, #28
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	460b      	mov	r3, r1
 800bef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800befa:	78fb      	ldrb	r3, [r7, #3]
 800befc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800befe:	2300      	movs	r3, #0
 800bf00:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	0c9b      	lsrs	r3, r3, #18
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <USB_HC_Halt+0x3a>
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d16c      	bne.n	800bffe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	015a      	lsls	r2, r3, #5
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	0151      	lsls	r1, r2, #5
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	440a      	add	r2, r1
 800bf3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf42:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d143      	bne.n	800bfd8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	015a      	lsls	r2, r3, #5
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	4413      	add	r3, r2
 800bf58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	0151      	lsls	r1, r2, #5
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	440a      	add	r2, r1
 800bf66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	0151      	lsls	r1, r2, #5
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	440a      	add	r2, r1
 800bf86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	693a      	ldr	r2, [r7, #16]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bfae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfbc:	d81d      	bhi.n	800bffa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	015a      	lsls	r2, r3, #5
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfd4:	d0ec      	beq.n	800bfb0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bfd6:	e080      	b.n	800c0da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	015a      	lsls	r2, r3, #5
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	0151      	lsls	r1, r2, #5
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	440a      	add	r2, r1
 800bfee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bff6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bff8:	e06f      	b.n	800c0da <USB_HC_Halt+0x1f0>
          break;
 800bffa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bffc:	e06d      	b.n	800c0da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	015a      	lsls	r2, r3, #5
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	4413      	add	r3, r2
 800c006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	0151      	lsls	r1, r2, #5
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	440a      	add	r2, r1
 800c014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c01c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d143      	bne.n	800c0b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	015a      	lsls	r2, r3, #5
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	4413      	add	r3, r2
 800c036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	0151      	lsls	r1, r2, #5
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	440a      	add	r2, r1
 800c044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c04c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	015a      	lsls	r2, r3, #5
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	4413      	add	r3, r2
 800c056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	0151      	lsls	r1, r2, #5
 800c060:	693a      	ldr	r2, [r7, #16]
 800c062:	440a      	add	r2, r1
 800c064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c06c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	015a      	lsls	r2, r3, #5
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	4413      	add	r3, r2
 800c076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	0151      	lsls	r1, r2, #5
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	440a      	add	r2, r1
 800c084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c08c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	3301      	adds	r3, #1
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c09a:	d81d      	bhi.n	800c0d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0b2:	d0ec      	beq.n	800c08e <USB_HC_Halt+0x1a4>
 800c0b4:	e011      	b.n	800c0da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	0151      	lsls	r1, r2, #5
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	440a      	add	r2, r1
 800c0cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	e000      	b.n	800c0da <USB_HC_Halt+0x1f0>
          break;
 800c0d8:	bf00      	nop
    }
  }

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	371c      	adds	r7, #28
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c0f8:	78fb      	ldrb	r3, [r7, #3]
 800c0fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	04da      	lsls	r2, r3, #19
 800c104:	4b15      	ldr	r3, [pc, #84]	; (800c15c <USB_DoPing+0x74>)
 800c106:	4013      	ands	r3, r2
 800c108:	693a      	ldr	r2, [r7, #16]
 800c10a:	0151      	lsls	r1, r2, #5
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	440a      	add	r2, r1
 800c110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c118:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	4413      	add	r3, r2
 800c122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c130:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c138:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	015a      	lsls	r2, r3, #5
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	4413      	add	r3, r2
 800c142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c146:	461a      	mov	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	1ff80000 	.word	0x1ff80000

0800c160 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c16c:	2300      	movs	r3, #0
 800c16e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff f9ae 	bl	800b4d2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c176:	2110      	movs	r1, #16
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7ff f9e5 	bl	800b548 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7ff fa08 	bl	800b594 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c184:	2300      	movs	r3, #0
 800c186:	613b      	str	r3, [r7, #16]
 800c188:	e01f      	b.n	800c1ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	4413      	add	r3, r2
 800c192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1be:	461a      	mov	r2, r3
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	613b      	str	r3, [r7, #16]
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	2b0f      	cmp	r3, #15
 800c1ce:	d9dc      	bls.n	800c18a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	613b      	str	r3, [r7, #16]
 800c1d4:	e034      	b.n	800c240 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4413      	add	r3, r2
 800c206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c20a:	461a      	mov	r2, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	3301      	adds	r3, #1
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c21c:	d80c      	bhi.n	800c238 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	015a      	lsls	r2, r3, #5
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	4413      	add	r3, r2
 800c226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c234:	d0ec      	beq.n	800c210 <USB_StopHost+0xb0>
 800c236:	e000      	b.n	800c23a <USB_StopHost+0xda>
        break;
 800c238:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	3301      	adds	r3, #1
 800c23e:	613b      	str	r3, [r7, #16]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	2b0f      	cmp	r3, #15
 800c244:	d9c7      	bls.n	800c1d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c24c:	461a      	mov	r2, r3
 800c24e:	f04f 33ff 	mov.w	r3, #4294967295
 800c252:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f04f 32ff 	mov.w	r2, #4294967295
 800c25a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f7ff f927 	bl	800b4b0 <USB_EnableGlobalInt>

  return HAL_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800c26c:	b590      	push	{r4, r7, lr}
 800c26e:	b089      	sub	sp, #36	; 0x24
 800c270:	af04      	add	r7, sp, #16
 800c272:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800c274:	2302      	movs	r3, #2
 800c276:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800c278:	2301      	movs	r3, #1
 800c27a:	2202      	movs	r2, #2
 800c27c:	2102      	movs	r1, #2
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fc8c 	bl	800cb9c <USBH_FindInterface>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	2bff      	cmp	r3, #255	; 0xff
 800c28c:	f000 812a 	beq.w	800c4e4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fc65 	bl	800cb64 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800c2a0:	2050      	movs	r0, #80	; 0x50
 800c2a2:	f016 fca9 	bl	8022bf8 <malloc>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	211a      	movs	r1, #26
 800c2ba:	fb01 f303 	mul.w	r3, r1, r3
 800c2be:	4413      	add	r3, r2
 800c2c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	b25b      	sxtb	r3, r3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	da15      	bge.n	800c2f8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	211a      	movs	r1, #26
 800c2d2:	fb01 f303 	mul.w	r3, r1, r3
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c2dc:	781a      	ldrb	r2, [r3, #0]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	211a      	movs	r1, #26
 800c2e8:	fb01 f303 	mul.w	r3, r1, r3
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c2f2:	881a      	ldrh	r2, [r3, #0]
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	785b      	ldrb	r3, [r3, #1]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 ff2f 	bl	800e162 <USBH_AllocPipe>
 800c304:	4603      	mov	r3, r0
 800c306:	461a      	mov	r2, r3
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	7819      	ldrb	r1, [r3, #0]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	7858      	ldrb	r0, [r3, #1]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	8952      	ldrh	r2, [r2, #10]
 800c324:	9202      	str	r2, [sp, #8]
 800c326:	2203      	movs	r2, #3
 800c328:	9201      	str	r2, [sp, #4]
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	4623      	mov	r3, r4
 800c32e:	4602      	mov	r2, r0
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 fee7 	bl	800e104 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f00e fc90 	bl	801ac64 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800c344:	2300      	movs	r3, #0
 800c346:	2200      	movs	r2, #0
 800c348:	210a      	movs	r1, #10
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fc26 	bl	800cb9c <USBH_FindInterface>
 800c350:	4603      	mov	r3, r0
 800c352:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	2bff      	cmp	r3, #255	; 0xff
 800c358:	f000 80c4 	beq.w	800c4e4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	211a      	movs	r1, #26
 800c362:	fb01 f303 	mul.w	r3, r1, r3
 800c366:	4413      	add	r3, r2
 800c368:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	b25b      	sxtb	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	da16      	bge.n	800c3a2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c374:	7bbb      	ldrb	r3, [r7, #14]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	211a      	movs	r1, #26
 800c37a:	fb01 f303 	mul.w	r3, r1, r3
 800c37e:	4413      	add	r3, r2
 800c380:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c384:	781a      	ldrb	r2, [r3, #0]
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c38a:	7bbb      	ldrb	r3, [r7, #14]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	211a      	movs	r1, #26
 800c390:	fb01 f303 	mul.w	r3, r1, r3
 800c394:	4413      	add	r3, r2
 800c396:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c39a:	881a      	ldrh	r2, [r3, #0]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	835a      	strh	r2, [r3, #26]
 800c3a0:	e015      	b.n	800c3ce <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c3a2:	7bbb      	ldrb	r3, [r7, #14]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	211a      	movs	r1, #26
 800c3a8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	211a      	movs	r1, #26
 800c3be:	fb01 f303 	mul.w	r3, r1, r3
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c3c8:	881a      	ldrh	r2, [r3, #0]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	211a      	movs	r1, #26
 800c3d4:	fb01 f303 	mul.w	r3, r1, r3
 800c3d8:	4413      	add	r3, r2
 800c3da:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	b25b      	sxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	da16      	bge.n	800c414 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c3e6:	7bbb      	ldrb	r3, [r7, #14]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	211a      	movs	r1, #26
 800c3ec:	fb01 f303 	mul.w	r3, r1, r3
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c3f6:	781a      	ldrb	r2, [r3, #0]
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	211a      	movs	r1, #26
 800c402:	fb01 f303 	mul.w	r3, r1, r3
 800c406:	4413      	add	r3, r2
 800c408:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c40c:	881a      	ldrh	r2, [r3, #0]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	835a      	strh	r2, [r3, #26]
 800c412:	e015      	b.n	800c440 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c414:	7bbb      	ldrb	r3, [r7, #14]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	211a      	movs	r1, #26
 800c41a:	fb01 f303 	mul.w	r3, r1, r3
 800c41e:	4413      	add	r3, r2
 800c420:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c424:	781a      	ldrb	r2, [r3, #0]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	211a      	movs	r1, #26
 800c430:	fb01 f303 	mul.w	r3, r1, r3
 800c434:	4413      	add	r3, r2
 800c436:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c43a:	881a      	ldrh	r2, [r3, #0]
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	7b9b      	ldrb	r3, [r3, #14]
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f001 fe8b 	bl	800e162 <USBH_AllocPipe>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	7bdb      	ldrb	r3, [r3, #15]
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f001 fe81 	bl	800e162 <USBH_AllocPipe>
 800c460:	4603      	mov	r3, r0
 800c462:	461a      	mov	r2, r3
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	7b59      	ldrb	r1, [r3, #13]
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	7b98      	ldrb	r0, [r3, #14]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	8b12      	ldrh	r2, [r2, #24]
 800c480:	9202      	str	r2, [sp, #8]
 800c482:	2202      	movs	r2, #2
 800c484:	9201      	str	r2, [sp, #4]
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	4623      	mov	r3, r4
 800c48a:	4602      	mov	r2, r0
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f001 fe39 	bl	800e104 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	7b19      	ldrb	r1, [r3, #12]
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	7bd8      	ldrb	r0, [r3, #15]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	8b52      	ldrh	r2, [r2, #26]
 800c4aa:	9202      	str	r2, [sp, #8]
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	9201      	str	r2, [sp, #4]
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	4623      	mov	r3, r4
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f001 fe24 	bl	800e104 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	7b5b      	ldrb	r3, [r3, #13]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f00e fbc9 	bl	801ac64 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	7b1b      	ldrb	r3, [r3, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4619      	mov	r1, r3
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f00e fbc2 	bl	801ac64 <USBH_LL_SetToggle>
      status = USBH_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd90      	pop	{r4, r7, pc}

0800c4ee <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00e      	beq.n	800c526 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	4619      	mov	r1, r3
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f001 fe17 	bl	800e142 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f001 fe3f 	bl	800e19e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	7b1b      	ldrb	r3, [r3, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00e      	beq.n	800c54c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	7b1b      	ldrb	r3, [r3, #12]
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f001 fe04 	bl	800e142 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	7b1b      	ldrb	r3, [r3, #12]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 fe2c 	bl	800e19e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	7b5b      	ldrb	r3, [r3, #13]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00e      	beq.n	800c572 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	7b5b      	ldrb	r3, [r3, #13]
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f001 fdf1 	bl	800e142 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	7b5b      	ldrb	r3, [r3, #13]
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f001 fe19 	bl	800e19e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00b      	beq.n	800c596 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	4618      	mov	r0, r3
 800c588:	f016 fb3e 	bl	8022c08 <free>
    phost->pActiveClass->pData = 0U;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c592:	2200      	movs	r2, #0
 800c594:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	3340      	adds	r3, #64	; 0x40
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 f8b2 	bl	800c726 <GetLineCoding>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d105      	bne.n	800c5d8 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c5d2:	2102      	movs	r1, #2
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	4798      	blx	r3
  }
  return status;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c604:	2b04      	cmp	r3, #4
 800c606:	d877      	bhi.n	800c6f8 <USBH_CDC_Process+0x114>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <USBH_CDC_Process+0x2c>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c625 	.word	0x0800c625
 800c614:	0800c62b 	.word	0x0800c62b
 800c618:	0800c65b 	.word	0x0800c65b
 800c61c:	0800c6cf 	.word	0x0800c6cf
 800c620:	0800c6dd 	.word	0x0800c6dd
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	73fb      	strb	r3, [r7, #15]
    break;
 800c628:	e06d      	b.n	800c706 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f897 	bl	800c764 <SetLineCoding>
 800c636:	4603      	mov	r3, r0
 800c638:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d104      	bne.n	800c64a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2202      	movs	r2, #2
 800c644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c648:	e058      	b.n	800c6fc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d055      	beq.n	800c6fc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2204      	movs	r2, #4
 800c654:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c658:	e050      	b.n	800c6fc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	3340      	adds	r3, #64	; 0x40
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f860 	bl	800c726 <GetLineCoding>
 800c666:	4603      	mov	r3, r0
 800c668:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d126      	bne.n	800c6be <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2200      	movs	r2, #0
 800c674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c682:	791b      	ldrb	r3, [r3, #4]
 800c684:	429a      	cmp	r2, r3
 800c686:	d13b      	bne.n	800c700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c692:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c694:	429a      	cmp	r2, r3
 800c696:	d133      	bne.n	800c700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6a2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d12b      	bne.n	800c700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6b0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d124      	bne.n	800c700 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f984 	bl	800c9c4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c6bc:	e020      	b.n	800c700 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d01d      	beq.n	800c700 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	2204      	movs	r2, #4
 800c6c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c6cc:	e018      	b.n	800c700 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f867 	bl	800c7a2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f8f8 	bl	800c8ca <CDC_ProcessReception>
    break;
 800c6da:	e014      	b.n	800c706 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800c6dc:	2100      	movs	r1, #0
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fffa 	bl	800d6d8 <USBH_ClrFeature>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10a      	bne.n	800c704 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800c6f6:	e005      	b.n	800c704 <USBH_CDC_Process+0x120>

  default:
    break;
 800c6f8:	bf00      	nop
 800c6fa:	e004      	b.n	800c706 <USBH_CDC_Process+0x122>
    break;
 800c6fc:	bf00      	nop
 800c6fe:	e002      	b.n	800c706 <USBH_CDC_Process+0x122>
    break;
 800c700:	bf00      	nop
 800c702:	e000      	b.n	800c706 <USBH_CDC_Process+0x122>
    break;
 800c704:	bf00      	nop

  }

  return status;
 800c706:	7bfb      	ldrb	r3, [r7, #15]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	22a1      	movs	r2, #161	; 0xa1
 800c734:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2221      	movs	r2, #33	; 0x21
 800c73a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2207      	movs	r2, #7
 800c74c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2207      	movs	r2, #7
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f001 f99f 	bl	800da98 <USBH_CtlReq>
 800c75a:	4603      	mov	r3, r0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2221      	movs	r2, #33	; 0x21
 800c772:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2220      	movs	r2, #32
 800c778:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2207      	movs	r2, #7
 800c78a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2207      	movs	r2, #7
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f001 f980 	bl	800da98 <USBH_CtlReq>
 800c798:	4603      	mov	r3, r0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b086      	sub	sp, #24
 800c7a6:	af02      	add	r7, sp, #8
 800c7a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d002      	beq.n	800c7c8 <CDC_ProcessTransmission+0x26>
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d025      	beq.n	800c812 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800c7c6:	e07c      	b.n	800c8c2 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	8b12      	ldrh	r2, [r2, #24]
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d90c      	bls.n	800c7ee <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	69d9      	ldr	r1, [r3, #28]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	8b1a      	ldrh	r2, [r3, #24]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	7b58      	ldrb	r0, [r3, #13]
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f001 fc49 	bl	800e07e <USBH_BulkSendData>
 800c7ec:	e00c      	b.n	800c808 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	7b58      	ldrb	r0, [r3, #13]
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	4603      	mov	r3, r0
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f001 fc3b 	bl	800e07e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2202      	movs	r2, #2
 800c80c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800c810:	e057      	b.n	800c8c2 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	7b5b      	ldrb	r3, [r3, #13]
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f00e f9f9 	bl	801ac10 <USBH_LL_GetURBState>
 800c81e:	4603      	mov	r3, r0
 800c820:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d136      	bne.n	800c896 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	8b12      	ldrh	r2, [r2, #24]
 800c830:	4293      	cmp	r3, r2
 800c832:	d90e      	bls.n	800c852 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	8b12      	ldrh	r2, [r2, #24]
 800c83c:	1a9a      	subs	r2, r3, r2
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	8b12      	ldrh	r2, [r2, #24]
 800c84a:	441a      	add	r2, r3
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	61da      	str	r2, [r3, #28]
 800c850:	e002      	b.n	800c858 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d004      	beq.n	800c86a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c868:	e006      	b.n	800c878 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f892 	bl	800c99c <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2204      	movs	r2, #4
 800c87c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c88c:	2200      	movs	r2, #0
 800c88e:	4619      	mov	r1, r3
 800c890:	f007 fdb6 	bl	8014400 <osMessagePut>
    break;
 800c894:	e014      	b.n	800c8c0 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800c896:	7afb      	ldrb	r3, [r7, #11]
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d111      	bne.n	800c8c0 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2204      	movs	r2, #4
 800c8a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	f007 fda0 	bl	8014400 <osMessagePut>
    break;
 800c8c0:	bf00      	nop
  }
}
 800c8c2:	bf00      	nop
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c8d8:	69db      	ldr	r3, [r3, #28]
 800c8da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	d002      	beq.n	800c8f0 <CDC_ProcessReception+0x26>
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	d00e      	beq.n	800c90c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800c8ee:	e051      	b.n	800c994 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	6a19      	ldr	r1, [r3, #32]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	8b5a      	ldrh	r2, [r3, #26]
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	7b1b      	ldrb	r3, [r3, #12]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f001 fbe3 	bl	800e0c8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2204      	movs	r2, #4
 800c906:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800c90a:	e043      	b.n	800c994 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	7b1b      	ldrb	r3, [r3, #12]
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f00e f97c 	bl	801ac10 <USBH_LL_GetURBState>
 800c918:	4603      	mov	r3, r0
 800c91a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800c91c:	7cfb      	ldrb	r3, [r7, #19]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d137      	bne.n	800c992 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	7b1b      	ldrb	r3, [r3, #12]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f00e f8df 	bl	801aaec <USBH_LL_GetLastXferSize>
 800c92e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	429a      	cmp	r2, r3
 800c938:	d016      	beq.n	800c968 <CDC_ProcessReception+0x9e>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	8b5b      	ldrh	r3, [r3, #26]
 800c93e:	461a      	mov	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4293      	cmp	r3, r2
 800c944:	d910      	bls.n	800c968 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	1ad2      	subs	r2, r2, r3
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	6a1a      	ldr	r2, [r3, #32]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	441a      	add	r2, r3
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2203      	movs	r2, #3
 800c962:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c966:	e006      	b.n	800c976 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f81d 	bl	800c9b0 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2204      	movs	r2, #4
 800c97a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c98a:	2200      	movs	r2, #0
 800c98c:	4619      	mov	r1, r3
 800c98e:	f007 fd37 	bl	8014400 <osMessagePut>
    break;
 800c992:	bf00      	nop
  }
}
 800c994:	bf00      	nop
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]

}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]

}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]

}
 800c9cc:	bf00      	nop
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800c9d8:	b5b0      	push	{r4, r5, r7, lr}
 800c9da:	b08c      	sub	sp, #48	; 0x30
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	e03c      	b.n	800ca6a <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	79fa      	ldrb	r2, [r7, #7]
 800c9f4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 f837 	bl	800ca7c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ca1c:	4a15      	ldr	r2, [pc, #84]	; (800ca74 <USBH_Init+0x9c>)
 800ca1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca26:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800ca2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca2e:	2100      	movs	r1, #0
 800ca30:	4618      	mov	r0, r3
 800ca32:	f007 fcd2 	bl	80143da <osMessageCreate>
 800ca36:	4602      	mov	r2, r0
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ca3e:	4b0e      	ldr	r3, [pc, #56]	; (800ca78 <USBH_Init+0xa0>)
 800ca40:	f107 0414 	add.w	r4, r7, #20
 800ca44:	461d      	mov	r5, r3
 800ca46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca4a:	682b      	ldr	r3, [r5, #0]
 800ca4c:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800ca4e:	f107 0314 	add.w	r3, r7, #20
 800ca52:	68f9      	ldr	r1, [r7, #12]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f007 fbc9 	bl	80141ec <osThreadCreate>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f00d ff90 	bl	801a988 <USBH_LL_Init>

  return USBH_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3730      	adds	r7, #48	; 0x30
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bdb0      	pop	{r4, r5, r7, pc}
 800ca72:	bf00      	nop
 800ca74:	08023b44 	.word	0x08023b44
 800ca78:	08023b58 	.word	0x08023b58

0800ca7c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ca88:	e008      	b.n	800ca9c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	32e0      	adds	r2, #224	; 0xe0
 800ca90:	2100      	movs	r1, #0
 800ca92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b0e      	cmp	r3, #14
 800caa0:	d9f3      	bls.n	800ca8a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800caa2:	2300      	movs	r3, #0
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	e009      	b.n	800cabc <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	4413      	add	r3, r2
 800caae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cab2:	2200      	movs	r2, #0
 800cab4:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3301      	adds	r3, #1
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac2:	d3f1      	bcc.n	800caa8 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2240      	movs	r2, #64	; 0x40
 800cae8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b085      	sub	sp, #20
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d017      	beq.n	800cb52 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d10f      	bne.n	800cb4c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb32:	1c59      	adds	r1, r3, #1
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	33dc      	adds	r3, #220	; 0xdc
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4413      	add	r3, r2
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	73fb      	strb	r3, [r7, #15]
 800cb4a:	e004      	b.n	800cb56 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	73fb      	strb	r3, [r7, #15]
 800cb50:	e001      	b.n	800cb56 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cb52:	2302      	movs	r3, #2
 800cb54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800cb7a:	78fa      	ldrb	r2, [r7, #3]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d204      	bcs.n	800cb8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	78fa      	ldrb	r2, [r7, #3]
 800cb84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800cb88:	e001      	b.n	800cb8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b087      	sub	sp, #28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	4608      	mov	r0, r1
 800cba6:	4611      	mov	r1, r2
 800cba8:	461a      	mov	r2, r3
 800cbaa:	4603      	mov	r3, r0
 800cbac:	70fb      	strb	r3, [r7, #3]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	70bb      	strb	r3, [r7, #2]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800cbc4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cbc6:	e025      	b.n	800cc14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	221a      	movs	r2, #26
 800cbcc:	fb02 f303 	mul.w	r3, r2, r3
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	3302      	adds	r3, #2
 800cbd8:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	795b      	ldrb	r3, [r3, #5]
 800cbde:	78fa      	ldrb	r2, [r7, #3]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d002      	beq.n	800cbea <USBH_FindInterface+0x4e>
 800cbe4:	78fb      	ldrb	r3, [r7, #3]
 800cbe6:	2bff      	cmp	r3, #255	; 0xff
 800cbe8:	d111      	bne.n	800cc0e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cbee:	78ba      	ldrb	r2, [r7, #2]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d002      	beq.n	800cbfa <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cbf4:	78bb      	ldrb	r3, [r7, #2]
 800cbf6:	2bff      	cmp	r3, #255	; 0xff
 800cbf8:	d109      	bne.n	800cc0e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cbfe:	787a      	ldrb	r2, [r7, #1]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d002      	beq.n	800cc0a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cc04:	787b      	ldrb	r3, [r7, #1]
 800cc06:	2bff      	cmp	r3, #255	; 0xff
 800cc08:	d101      	bne.n	800cc0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
 800cc0c:	e006      	b.n	800cc1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	3301      	adds	r3, #1
 800cc12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d9d6      	bls.n	800cbc8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cc1a:	23ff      	movs	r3, #255	; 0xff
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	371c      	adds	r7, #28
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f00d fee5 	bl	801aa00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800cc36:	2101      	movs	r1, #1
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f00d fffc 	bl	801ac36 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af04      	add	r7, sp, #16
 800cc4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cc50:	2302      	movs	r3, #2
 800cc52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fb7e 	bl	800d35a <USBH_IsPortEnabled>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10c      	bne.n	800cc7e <USBH_Process+0x36>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d007      	beq.n	800cc7e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d002      	beq.n	800cc7e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2203      	movs	r2, #3
 800cc7c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b0b      	cmp	r3, #11
 800cc86:	f200 81ab 	bhi.w	800cfe0 <USBH_Process+0x398>
 800cc8a:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <USBH_Process+0x48>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800ccc1 	.word	0x0800ccc1
 800cc94:	0800ccff 	.word	0x0800ccff
 800cc98:	0800cd13 	.word	0x0800cd13
 800cc9c:	0800cfbb 	.word	0x0800cfbb
 800cca0:	0800cfe1 	.word	0x0800cfe1
 800cca4:	0800cdbd 	.word	0x0800cdbd
 800cca8:	0800cf55 	.word	0x0800cf55
 800ccac:	0800cded 	.word	0x0800cded
 800ccb0:	0800ce29 	.word	0x0800ce29
 800ccb4:	0800ce63 	.word	0x0800ce63
 800ccb8:	0800ceab 	.word	0x0800ceab
 800ccbc:	0800cfa3 	.word	0x0800cfa3
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 818b 	beq.w	800cfe4 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800ccd4:	20c8      	movs	r0, #200	; 0xc8
 800ccd6:	f00d fff8 	bl	801acca <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f00d feeb 	bl	801aab6 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	f007 fb82 	bl	8014400 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ccfc:	e172      	b.n	800cfe4 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	f040 816f 	bne.w	800cfe8 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2202      	movs	r2, #2
 800cd0e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800cd10:	e16a      	b.n	800cfe8 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800cd12:	2064      	movs	r0, #100	; 0x64
 800cd14:	f00d ffd9 	bl	801acca <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f00d fea7 	bl	801aa6c <USBH_LL_GetSpeed>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	461a      	mov	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2205      	movs	r2, #5
 800cd2c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800cd2e:	2100      	movs	r1, #0
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f001 fa16 	bl	800e162 <USBH_AllocPipe>
 800cd36:	4603      	mov	r3, r0
 800cd38:	461a      	mov	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800cd3e:	2180      	movs	r1, #128	; 0x80
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f001 fa0e 	bl	800e162 <USBH_AllocPipe>
 800cd46:	4603      	mov	r3, r0
 800cd48:	461a      	mov	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7919      	ldrb	r1, [r3, #4]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800cd62:	b292      	uxth	r2, r2
 800cd64:	9202      	str	r2, [sp, #8]
 800cd66:	2200      	movs	r2, #0
 800cd68:	9201      	str	r2, [sp, #4]
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2280      	movs	r2, #128	; 0x80
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f001 f9c7 	bl	800e104 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	7959      	ldrb	r1, [r3, #5]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800cd8a:	b292      	uxth	r2, r2
 800cd8c:	9202      	str	r2, [sp, #8]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	9201      	str	r2, [sp, #4]
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	4603      	mov	r3, r0
 800cd96:	2200      	movs	r2, #0
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f001 f9b3 	bl	800e104 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	f007 fb23 	bl	8014400 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cdba:	e120      	b.n	800cffe <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 f923 	bl	800d008 <USBH_HandleEnum>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f040 8111 	bne.w	800cfec <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d103      	bne.n	800cde4 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2208      	movs	r2, #8
 800cde0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800cde2:	e103      	b.n	800cfec <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2207      	movs	r2, #7
 800cde8:	701a      	strb	r2, [r3, #0]
    break;
 800cdea:	e0ff      	b.n	800cfec <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f000 80fc 	beq.w	800cff0 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cdfe:	2101      	movs	r1, #1
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2208      	movs	r2, #8
 800ce08:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2205      	movs	r2, #5
 800ce0e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce1e:	2200      	movs	r2, #0
 800ce20:	4619      	mov	r1, r3
 800ce22:	f007 faed 	bl	8014400 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ce26:	e0e3      	b.n	800cff0 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fc09 	bl	800d64a <USBH_SetCfg>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d102      	bne.n	800ce44 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2209      	movs	r2, #9
 800ce42:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce58:	2200      	movs	r2, #0
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	f007 fad0 	bl	8014400 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800ce60:	e0cd      	b.n	800cffe <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800ce68:	f003 0320 	and.w	r3, r3, #32
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00a      	beq.n	800ce86 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ce70:	2101      	movs	r1, #1
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fc0c 	bl	800d690 <USBH_SetFeature>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d106      	bne.n	800ce8c <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	220a      	movs	r2, #10
 800ce82:	701a      	strb	r2, [r3, #0]
 800ce84:	e002      	b.n	800ce8c <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	220a      	movs	r2, #10
 800ce8a:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cea0:	2200      	movs	r2, #0
 800cea2:	4619      	mov	r1, r3
 800cea4:	f007 faac 	bl	8014400 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cea8:	e0a9      	b.n	800cffe <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d040      	beq.n	800cf36 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
 800cec0:	e017      	b.n	800cef2 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	33dc      	adds	r3, #220	; 0xdc
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4413      	add	r3, r2
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	791a      	ldrb	r2, [r3, #4]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d108      	bne.n	800ceec <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	33dc      	adds	r3, #220	; 0xdc
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	685a      	ldr	r2, [r3, #4]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	3301      	adds	r3, #1
 800cef0:	73fb      	strb	r3, [r7, #15]
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0e4      	beq.n	800cec2 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d016      	beq.n	800cf30 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	4798      	blx	r3
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d109      	bne.n	800cf28 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2206      	movs	r2, #6
 800cf18:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cf20:	2103      	movs	r1, #3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	4798      	blx	r3
 800cf26:	e006      	b.n	800cf36 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	220d      	movs	r2, #13
 800cf2c:	701a      	strb	r2, [r3, #0]
 800cf2e:	e002      	b.n	800cf36 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	220d      	movs	r2, #13
 800cf34:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2205      	movs	r2, #5
 800cf3a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f007 fa57 	bl	8014400 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cf52:	e054      	b.n	800cffe <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00f      	beq.n	800cf7e <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	4798      	blx	r3
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800cf6e:	7bbb      	ldrb	r3, [r7, #14]
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d13e      	bne.n	800cff4 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	220b      	movs	r2, #11
 800cf7a:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800cf7c:	e03a      	b.n	800cff4 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	220d      	movs	r2, #13
 800cf82:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2205      	movs	r2, #5
 800cf88:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf98:	2200      	movs	r2, #0
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	f007 fa30 	bl	8014400 <osMessagePut>
    break;
 800cfa0:	e028      	b.n	800cff4 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d025      	beq.n	800cff8 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	4798      	blx	r3
    }
    break;
 800cfb8:	e01e      	b.n	800cff8 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7ff fd5e 	bl	800ca7c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d018      	beq.n	800cffc <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800cfde:	e00d      	b.n	800cffc <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800cfe0:	bf00      	nop
 800cfe2:	e00c      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cfe4:	bf00      	nop
 800cfe6:	e00a      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cfe8:	bf00      	nop
 800cfea:	e008      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cfec:	bf00      	nop
 800cfee:	e006      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cff0:	bf00      	nop
 800cff2:	e004      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cff4:	bf00      	nop
 800cff6:	e002      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cff8:	bf00      	nop
 800cffa:	e000      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cffc:	bf00      	nop
  }
 return USBH_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af04      	add	r7, sp, #16
 800d00e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d010:	2301      	movs	r3, #1
 800d012:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	785b      	ldrb	r3, [r3, #1]
 800d018:	2b07      	cmp	r3, #7
 800d01a:	f200 8132 	bhi.w	800d282 <USBH_HandleEnum+0x27a>
 800d01e:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <USBH_HandleEnum+0x1c>)
 800d020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d024:	0800d045 	.word	0x0800d045
 800d028:	0800d0b7 	.word	0x0800d0b7
 800d02c:	0800d0cf 	.word	0x0800d0cf
 800d030:	0800d145 	.word	0x0800d145
 800d034:	0800d15d 	.word	0x0800d15d
 800d038:	0800d17b 	.word	0x0800d17b
 800d03c:	0800d1e7 	.word	0x0800d1e7
 800d040:	0800d237 	.word	0x0800d237
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800d044:	2108      	movs	r1, #8
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fa2f 	bl	800d4aa <USBH_Get_DevDesc>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f040 8119 	bne.w	800d286 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	7919      	ldrb	r1, [r3, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d078:	b292      	uxth	r2, r2
 800d07a:	9202      	str	r2, [sp, #8]
 800d07c:	2200      	movs	r2, #0
 800d07e:	9201      	str	r2, [sp, #4]
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	4603      	mov	r3, r0
 800d084:	2280      	movs	r2, #128	; 0x80
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f001 f83c 	bl	800e104 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	7959      	ldrb	r1, [r3, #5]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d0a0:	b292      	uxth	r2, r2
 800d0a2:	9202      	str	r2, [sp, #8]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	9201      	str	r2, [sp, #4]
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f001 f828 	bl	800e104 <USBH_OpenPipe>

    }
    break;
 800d0b4:	e0e7      	b.n	800d286 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800d0b6:	2112      	movs	r1, #18
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f9f6 	bl	800d4aa <USBH_Get_DevDesc>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f040 80e2 	bne.w	800d28a <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	705a      	strb	r2, [r3, #1]

    }
    break;
 800d0cc:	e0dd      	b.n	800d28a <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800d0ce:	2101      	movs	r1, #1
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fa96 	bl	800d602 <USBH_SetAddress>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f040 80d8 	bne.w	800d28e <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800d0de:	2002      	movs	r0, #2
 800d0e0:	f00d fdf3 	bl	801acca <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2203      	movs	r2, #3
 800d0f0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	7919      	ldrb	r1, [r3, #4]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d106:	b292      	uxth	r2, r2
 800d108:	9202      	str	r2, [sp, #8]
 800d10a:	2200      	movs	r2, #0
 800d10c:	9201      	str	r2, [sp, #4]
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	4603      	mov	r3, r0
 800d112:	2280      	movs	r2, #128	; 0x80
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fff5 	bl	800e104 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7959      	ldrb	r1, [r3, #5]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d12e:	b292      	uxth	r2, r2
 800d130:	9202      	str	r2, [sp, #8]
 800d132:	2200      	movs	r2, #0
 800d134:	9201      	str	r2, [sp, #4]
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	4603      	mov	r3, r0
 800d13a:	2200      	movs	r2, #0
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 ffe1 	bl	800e104 <USBH_OpenPipe>
    }
    break;
 800d142:	e0a4      	b.n	800d28e <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800d144:	2109      	movs	r1, #9
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f9d7 	bl	800d4fa <USBH_Get_CfgDesc>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f040 809f 	bne.w	800d292 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2204      	movs	r2, #4
 800d158:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d15a:	e09a      	b.n	800d292 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f9c8 	bl	800d4fa <USBH_Get_CfgDesc>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f040 8092 	bne.w	800d296 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2205      	movs	r2, #5
 800d176:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d178:	e08d      	b.n	800d296 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800d180:	2b00      	cmp	r3, #0
 800d182:	d01e      	beq.n	800d1c2 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d190:	23ff      	movs	r3, #255	; 0xff
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f9d5 	bl	800d542 <USBH_Get_StringDesc>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d17d      	bne.n	800d29a <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2206      	movs	r2, #6
 800d1a2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2205      	movs	r2, #5
 800d1a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f007 f920 	bl	8014400 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d1c0:	e06b      	b.n	800d29a <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2206      	movs	r2, #6
 800d1c6:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2205      	movs	r2, #5
 800d1cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1dc:	2200      	movs	r2, #0
 800d1de:	4619      	mov	r1, r3
 800d1e0:	f007 f90e 	bl	8014400 <osMessagePut>
    break;
 800d1e4:	e059      	b.n	800d29a <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d010      	beq.n	800d212 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d1fc:	23ff      	movs	r3, #255	; 0xff
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f99f 	bl	800d542 <USBH_Get_StringDesc>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d149      	bne.n	800d29e <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2207      	movs	r2, #7
 800d20e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d210:	e045      	b.n	800d29e <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2207      	movs	r2, #7
 800d216:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2205      	movs	r2, #5
 800d21c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d22c:	2200      	movs	r2, #0
 800d22e:	4619      	mov	r1, r3
 800d230:	f007 f8e6 	bl	8014400 <osMessagePut>
    break;
 800d234:	e033      	b.n	800d29e <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00f      	beq.n	800d260 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d24c:	23ff      	movs	r3, #255	; 0xff
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f977 	bl	800d542 <USBH_Get_StringDesc>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d123      	bne.n	800d2a2 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d25e:	e020      	b.n	800d2a2 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800d260:	2300      	movs	r3, #0
 800d262:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2205      	movs	r2, #5
 800d268:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d278:	2200      	movs	r2, #0
 800d27a:	4619      	mov	r1, r3
 800d27c:	f007 f8c0 	bl	8014400 <osMessagePut>
    break;
 800d280:	e00f      	b.n	800d2a2 <USBH_HandleEnum+0x29a>

  default:
    break;
 800d282:	bf00      	nop
 800d284:	e00e      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d286:	bf00      	nop
 800d288:	e00c      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d28a:	bf00      	nop
 800d28c:	e00a      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d28e:	bf00      	nop
 800d290:	e008      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d292:	bf00      	nop
 800d294:	e006      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d296:	bf00      	nop
 800d298:	e004      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d29a:	bf00      	nop
 800d29c:	e002      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d29e:	bf00      	nop
 800d2a0:	e000      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d2a2:	bf00      	nop
  }
  return Status;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop

0800d2b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	683a      	ldr	r2, [r7, #0]
 800d2be:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800d2c2:	bf00      	nop
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800d2dc:	1c5a      	adds	r2, r3, #1
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f804 	bl	800d2f2 <USBH_HandleSof>
}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b0b      	cmp	r3, #11
 800d302:	d10a      	bne.n	800d31a <USBH_HandleSof+0x28>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d005      	beq.n	800d31a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	4798      	blx	r3
  }
}
 800d31a:	bf00      	nop
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800d322:	b480      	push	{r7}
 800d324:	b083      	sub	sp, #12
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2201      	movs	r2, #1
 800d32e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d332:	bf00      	nop
}
 800d334:	370c      	adds	r7, #12
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800d33e:	b480      	push	{r7}
 800d340:	b083      	sub	sp, #12
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d34e:	bf00      	nop
}
 800d350:	370c      	adds	r7, #12
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800d35a:	b480      	push	{r7}
 800d35c:	b083      	sub	sp, #12
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800d368:	4618      	mov	r0, r3
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	b2db      	uxtb	r3, r3
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10f      	bne.n	800d3a6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00e      	beq.n	800d3b6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d39e:	2104      	movs	r1, #4
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	4798      	blx	r3
 800d3a4:	e007      	b.n	800d3b6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d102      	bne.n	800d3b6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2202      	movs	r2, #2
 800d3b4:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	f007 f817 	bl	8014400 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f00d fb26 	bl	801aa36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	791b      	ldrb	r3, [r3, #4]
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fed4 	bl	800e19e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	795b      	ldrb	r3, [r3, #5]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fece 	bl	800e19e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d410:	2b00      	cmp	r3, #0
 800d412:	d005      	beq.n	800d420 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d41a:	2105      	movs	r1, #5
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f00d faed 	bl	801aa00 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2203      	movs	r2, #3
 800d42a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2201      	movs	r2, #1
 800d430:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d440:	2200      	movs	r2, #0
 800d442:	4619      	mov	r1, r3
 800d444:	f006 ffdc 	bl	8014400 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b086      	sub	sp, #24
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800d460:	f107 030c 	add.w	r3, r7, #12
 800d464:	f04f 32ff 	mov.w	r2, #4294967295
 800d468:	4618      	mov	r0, r3
 800d46a:	f007 f809 	bl	8014480 <osMessageGet>
    if(event.status == osEventMessage)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2b10      	cmp	r3, #16
 800d472:	d1f2      	bne.n	800d45a <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fbe7 	bl	800cc48 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d47a:	e7ee      	b.n	800d45a <USBH_Process_OS+0x8>

0800d47c <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d498:	2200      	movs	r2, #0
 800d49a:	4619      	mov	r1, r3
 800d49c:	f006 ffb0 	bl	8014400 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b086      	sub	sp, #24
 800d4ae:	af02      	add	r7, sp, #8
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d4bc:	78fb      	ldrb	r3, [r7, #3]
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f864 	bl	800d598 <USBH_GetDescriptor>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10a      	bne.n	800d4f0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f203 3022 	addw	r0, r3, #802	; 0x322
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d4e6:	78fa      	ldrb	r2, [r7, #3]
 800d4e8:	b292      	uxth	r2, r2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	f000 f918 	bl	800d720 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800d4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b086      	sub	sp, #24
 800d4fe:	af02      	add	r7, sp, #8
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	460b      	mov	r3, r1
 800d504:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	331c      	adds	r3, #28
 800d50a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800d50c:	887b      	ldrh	r3, [r7, #2]
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d516:	2100      	movs	r1, #0
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f83d 	bl	800d598 <USBH_GetDescriptor>
 800d51e:	4603      	mov	r3, r0
 800d520:	72fb      	strb	r3, [r7, #11]
 800d522:	7afb      	ldrb	r3, [r7, #11]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d107      	bne.n	800d538 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d52e:	887a      	ldrh	r2, [r7, #2]
 800d530:	68f9      	ldr	r1, [r7, #12]
 800d532:	4618      	mov	r0, r3
 800d534:	f000 f964 	bl	800d800 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800d538:	7afb      	ldrb	r3, [r7, #11]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b088      	sub	sp, #32
 800d546:	af02      	add	r7, sp, #8
 800d548:	60f8      	str	r0, [r7, #12]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	461a      	mov	r2, r3
 800d54e:	460b      	mov	r3, r1
 800d550:	72fb      	strb	r3, [r7, #11]
 800d552:	4613      	mov	r3, r2
 800d554:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800d556:	7afb      	ldrb	r3, [r7, #11]
 800d558:	b29b      	uxth	r3, r3
 800d55a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d55e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d566:	893b      	ldrh	r3, [r7, #8]
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	460b      	mov	r3, r1
 800d56c:	2100      	movs	r1, #0
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f000 f812 	bl	800d598 <USBH_GetDescriptor>
 800d574:	4603      	mov	r3, r0
 800d576:	75fb      	strb	r3, [r7, #23]
 800d578:	7dfb      	ldrb	r3, [r7, #23]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d107      	bne.n	800d58e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d584:	893a      	ldrh	r2, [r7, #8]
 800d586:	6879      	ldr	r1, [r7, #4]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 fa37 	bl	800d9fc <USBH_ParseStringDesc>
  }
  return status;
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3718      	adds	r7, #24
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	607b      	str	r3, [r7, #4]
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	72fb      	strb	r3, [r7, #11]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	789b      	ldrb	r3, [r3, #2]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d11c      	bne.n	800d5ec <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d5b2:	7afb      	ldrb	r3, [r7, #11]
 800d5b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2206      	movs	r2, #6
 800d5c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	893a      	ldrh	r2, [r7, #8]
 800d5c8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d5ca:	893b      	ldrh	r3, [r7, #8]
 800d5cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d5d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5d4:	d104      	bne.n	800d5e0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f240 4209 	movw	r2, #1033	; 0x409
 800d5dc:	829a      	strh	r2, [r3, #20]
 800d5de:	e002      	b.n	800d5e6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	8b3a      	ldrh	r2, [r7, #24]
 800d5ea:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800d5ec:	8b3b      	ldrh	r3, [r7, #24]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	6879      	ldr	r1, [r7, #4]
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f000 fa50 	bl	800da98 <USBH_CtlReq>
 800d5f8:	4603      	mov	r3, r0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b082      	sub	sp, #8
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
 800d60a:	460b      	mov	r3, r1
 800d60c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	789b      	ldrb	r3, [r3, #2]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d10f      	bne.n	800d636 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2205      	movs	r2, #5
 800d620:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d622:	78fb      	ldrb	r3, [r7, #3]
 800d624:	b29a      	uxth	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d636:	2200      	movs	r2, #0
 800d638:	2100      	movs	r1, #0
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fa2c 	bl	800da98 <USBH_CtlReq>
 800d640:	4603      	mov	r3, r0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	460b      	mov	r3, r1
 800d654:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	789b      	ldrb	r3, [r3, #2]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d10e      	bne.n	800d67c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2209      	movs	r2, #9
 800d668:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	887a      	ldrh	r2, [r7, #2]
 800d66e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800d67c:	2200      	movs	r2, #0
 800d67e:	2100      	movs	r1, #0
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fa09 	bl	800da98 <USBH_CtlReq>
 800d686:	4603      	mov	r3, r0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	460b      	mov	r3, r1
 800d69a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	789b      	ldrb	r3, [r3, #2]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d10f      	bne.n	800d6c4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2203      	movs	r2, #3
 800d6ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d6b0:	78fb      	ldrb	r3, [r7, #3]
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 f9e5 	bl	800da98 <USBH_CtlReq>
 800d6ce:	4603      	mov	r3, r0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	789b      	ldrb	r3, [r3, #2]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d10f      	bne.n	800d70c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2202      	movs	r2, #2
 800d6f0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d6fe:	78fb      	ldrb	r3, [r7, #3]
 800d700:	b29a      	uxth	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800d70c:	2200      	movs	r2, #0
 800d70e:	2100      	movs	r1, #0
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f9c1 	bl	800da98 <USBH_CtlReq>
 800d716:	4603      	mov	r3, r0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	4613      	mov	r3, r2
 800d72c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	781a      	ldrb	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	785a      	ldrb	r2, [r3, #1]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	3302      	adds	r3, #2
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	b29a      	uxth	r2, r3
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	3303      	adds	r3, #3
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	021b      	lsls	r3, r3, #8
 800d750:	b29b      	uxth	r3, r3
 800d752:	4313      	orrs	r3, r2
 800d754:	b29a      	uxth	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	791a      	ldrb	r2, [r3, #4]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	795a      	ldrb	r2, [r3, #5]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	799a      	ldrb	r2, [r3, #6]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	79da      	ldrb	r2, [r3, #7]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	2b08      	cmp	r3, #8
 800d77e:	d939      	bls.n	800d7f4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	3308      	adds	r3, #8
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	b29a      	uxth	r2, r3
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	3309      	adds	r3, #9
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	b29b      	uxth	r3, r3
 800d790:	021b      	lsls	r3, r3, #8
 800d792:	b29b      	uxth	r3, r3
 800d794:	4313      	orrs	r3, r2
 800d796:	b29a      	uxth	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	330a      	adds	r3, #10
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	330b      	adds	r3, #11
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	021b      	lsls	r3, r3, #8
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	330c      	adds	r3, #12
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	330d      	adds	r3, #13
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	021b      	lsls	r3, r3, #8
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	7b9a      	ldrb	r2, [r3, #14]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	7bda      	ldrb	r2, [r3, #15]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	7c1a      	ldrb	r2, [r3, #16]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	7c5a      	ldrb	r2, [r3, #17]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	745a      	strb	r2, [r3, #17]
  }
}
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08a      	sub	sp, #40	; 0x28
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	4613      	mov	r3, r2
 800d80c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d818:	2300      	movs	r3, #0
 800d81a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	781a      	ldrb	r2, [r3, #0]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	785a      	ldrb	r2, [r3, #1]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	3302      	adds	r3, #2
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	b29a      	uxth	r2, r3
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	3303      	adds	r3, #3
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	b29b      	uxth	r3, r3
 800d842:	021b      	lsls	r3, r3, #8
 800d844:	b29b      	uxth	r3, r3
 800d846:	4313      	orrs	r3, r2
 800d848:	b29a      	uxth	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	791a      	ldrb	r2, [r3, #4]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	795a      	ldrb	r2, [r3, #5]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	799a      	ldrb	r2, [r3, #6]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	79da      	ldrb	r2, [r3, #7]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	7a1a      	ldrb	r2, [r3, #8]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d876:	88fb      	ldrh	r3, [r7, #6]
 800d878:	2b09      	cmp	r3, #9
 800d87a:	d95f      	bls.n	800d93c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d87c:	2309      	movs	r3, #9
 800d87e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d880:	2300      	movs	r3, #0
 800d882:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d884:	e051      	b.n	800d92a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d886:	f107 0316 	add.w	r3, r7, #22
 800d88a:	4619      	mov	r1, r3
 800d88c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d88e:	f000 f8e8 	bl	800da62 <USBH_GetNextDesc>
 800d892:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	785b      	ldrb	r3, [r3, #1]
 800d898:	2b04      	cmp	r3, #4
 800d89a:	d146      	bne.n	800d92a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d89c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8a0:	221a      	movs	r2, #26
 800d8a2:	fb02 f303 	mul.w	r3, r2, r3
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800d8b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8b2:	69f8      	ldr	r0, [r7, #28]
 800d8b4:	f000 f846 	bl	800d944 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d8c2:	e022      	b.n	800d90a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800d8c4:	f107 0316 	add.w	r3, r7, #22
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8cc:	f000 f8c9 	bl	800da62 <USBH_GetNextDesc>
 800d8d0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	785b      	ldrb	r3, [r3, #1]
 800d8d6:	2b05      	cmp	r3, #5
 800d8d8:	d117      	bne.n	800d90a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d8da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d8e2:	3201      	adds	r2, #1
 800d8e4:	00d2      	lsls	r2, r2, #3
 800d8e6:	211a      	movs	r1, #26
 800d8e8:	fb01 f303 	mul.w	r3, r1, r3
 800d8ec:	4413      	add	r3, r2
 800d8ee:	3308      	adds	r3, #8
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800d8f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8fa:	69b8      	ldr	r0, [r7, #24]
 800d8fc:	f000 f851 	bl	800d9a2 <USBH_ParseEPDesc>
            ep_ix++;
 800d900:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d904:	3301      	adds	r3, #1
 800d906:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	791b      	ldrb	r3, [r3, #4]
 800d90e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d912:	429a      	cmp	r2, r3
 800d914:	d204      	bcs.n	800d920 <USBH_ParseCfgDesc+0x120>
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	885a      	ldrh	r2, [r3, #2]
 800d91a:	8afb      	ldrh	r3, [r7, #22]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d8d1      	bhi.n	800d8c4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d924:	3301      	adds	r3, #1
 800d926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d92a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d804      	bhi.n	800d93c <USBH_ParseCfgDesc+0x13c>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	885a      	ldrh	r2, [r3, #2]
 800d936:	8afb      	ldrh	r3, [r7, #22]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d8a4      	bhi.n	800d886 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d93c:	bf00      	nop
 800d93e:	3728      	adds	r7, #40	; 0x28
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	781a      	ldrb	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	785a      	ldrb	r2, [r3, #1]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	789a      	ldrb	r2, [r3, #2]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	78da      	ldrb	r2, [r3, #3]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	791a      	ldrb	r2, [r3, #4]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	795a      	ldrb	r2, [r3, #5]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	799a      	ldrb	r2, [r3, #6]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	79da      	ldrb	r2, [r3, #7]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	7a1a      	ldrb	r2, [r3, #8]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	721a      	strb	r2, [r3, #8]
}
 800d996:	bf00      	nop
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	781a      	ldrb	r2, [r3, #0]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	785a      	ldrb	r2, [r3, #1]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	789a      	ldrb	r2, [r3, #2]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	78da      	ldrb	r2, [r3, #3]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	3305      	adds	r3, #5
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	021b      	lsls	r3, r3, #8
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	799a      	ldrb	r2, [r3, #6]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	719a      	strb	r2, [r3, #6]
}
 800d9f0:	bf00      	nop
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b087      	sub	sp, #28
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	4613      	mov	r3, r2
 800da08:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3301      	adds	r3, #1
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b03      	cmp	r3, #3
 800da12:	d120      	bne.n	800da56 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	1e9a      	subs	r2, r3, #2
 800da1a:	88fb      	ldrh	r3, [r7, #6]
 800da1c:	4293      	cmp	r3, r2
 800da1e:	bf28      	it	cs
 800da20:	4613      	movcs	r3, r2
 800da22:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	3302      	adds	r3, #2
 800da28:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800da2a:	2300      	movs	r3, #0
 800da2c:	82fb      	strh	r3, [r7, #22]
 800da2e:	e00b      	b.n	800da48 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800da30:	8afb      	ldrh	r3, [r7, #22]
 800da32:	68fa      	ldr	r2, [r7, #12]
 800da34:	4413      	add	r3, r2
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	3301      	adds	r3, #1
 800da40:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800da42:	8afb      	ldrh	r3, [r7, #22]
 800da44:	3302      	adds	r3, #2
 800da46:	82fb      	strh	r3, [r7, #22]
 800da48:	8afa      	ldrh	r2, [r7, #22]
 800da4a:	8abb      	ldrh	r3, [r7, #20]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d3ef      	bcc.n	800da30 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2200      	movs	r2, #0
 800da54:	701a      	strb	r2, [r3, #0]
  }
}
 800da56:	bf00      	nop
 800da58:	371c      	adds	r7, #28
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800da62:	b480      	push	{r7}
 800da64:	b085      	sub	sp, #20
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
 800da6a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	881a      	ldrh	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	b29b      	uxth	r3, r3
 800da76:	4413      	add	r3, r2
 800da78:	b29a      	uxth	r2, r3
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4413      	add	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800da8a:	68fb      	ldr	r3, [r7, #12]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b086      	sub	sp, #24
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	4613      	mov	r3, r2
 800daa4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800daa6:	2301      	movs	r3, #1
 800daa8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	789b      	ldrb	r3, [r3, #2]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d002      	beq.n	800dab8 <USBH_CtlReq+0x20>
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	d01d      	beq.n	800daf2 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800dab6:	e042      	b.n	800db3e <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	68ba      	ldr	r2, [r7, #8]
 800dabc:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	88fa      	ldrh	r2, [r7, #6]
 800dac2:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2202      	movs	r2, #2
 800dace:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800dad0:	2301      	movs	r3, #1
 800dad2:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2203      	movs	r2, #3
 800dad8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dae8:	2200      	movs	r2, #0
 800daea:	4619      	mov	r1, r3
 800daec:	f006 fc88 	bl	8014400 <osMessagePut>
    break;
 800daf0:	e025      	b.n	800db3e <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f000 f828 	bl	800db48 <USBH_HandleControl>
 800daf8:	4603      	mov	r3, r0
 800dafa:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800dafc:	7dfb      	ldrb	r3, [r7, #23]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d108      	bne.n	800db14 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2201      	movs	r2, #1
 800db06:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]
    break;
 800db12:	e013      	b.n	800db3c <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	2b03      	cmp	r3, #3
 800db18:	d108      	bne.n	800db2c <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2201      	movs	r2, #1
 800db1e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800db26:	2303      	movs	r3, #3
 800db28:	75fb      	strb	r3, [r7, #23]
    break;
 800db2a:	e007      	b.n	800db3c <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d104      	bne.n	800db3c <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2201      	movs	r2, #1
 800db36:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800db38:	2302      	movs	r3, #2
 800db3a:	75fb      	strb	r3, [r7, #23]
    break;
 800db3c:	bf00      	nop
  }
  return status;
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3718      	adds	r7, #24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af02      	add	r7, sp, #8
 800db4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800db50:	2301      	movs	r3, #1
 800db52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800db54:	2300      	movs	r3, #0
 800db56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7e1b      	ldrb	r3, [r3, #24]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	2b0a      	cmp	r3, #10
 800db60:	f200 821f 	bhi.w	800dfa2 <USBH_HandleControl+0x45a>
 800db64:	a201      	add	r2, pc, #4	; (adr r2, 800db6c <USBH_HandleControl+0x24>)
 800db66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6a:	bf00      	nop
 800db6c:	0800db99 	.word	0x0800db99
 800db70:	0800dbb3 	.word	0x0800dbb3
 800db74:	0800dc55 	.word	0x0800dc55
 800db78:	0800dc7b 	.word	0x0800dc7b
 800db7c:	0800dd07 	.word	0x0800dd07
 800db80:	0800dd33 	.word	0x0800dd33
 800db84:	0800ddf5 	.word	0x0800ddf5
 800db88:	0800de17 	.word	0x0800de17
 800db8c:	0800dea9 	.word	0x0800dea9
 800db90:	0800ded1 	.word	0x0800ded1
 800db94:	0800df63 	.word	0x0800df63
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f103 0110 	add.w	r1, r3, #16
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	795b      	ldrb	r3, [r3, #5]
 800dba2:	461a      	mov	r2, r3
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fa0d 	bl	800dfc4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2202      	movs	r2, #2
 800dbae:	761a      	strb	r2, [r3, #24]
    break;
 800dbb0:	e202      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	795b      	ldrb	r3, [r3, #5]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f00d f829 	bl	801ac10 <USBH_LL_GetURBState>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800dbc2:	7bbb      	ldrb	r3, [r7, #14]
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d12c      	bne.n	800dc22 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7c1b      	ldrb	r3, [r3, #16]
 800dbcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dbd0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	8adb      	ldrh	r3, [r3, #22]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00a      	beq.n	800dbf0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800dbda:	7b7b      	ldrb	r3, [r7, #13]
 800dbdc:	2b80      	cmp	r3, #128	; 0x80
 800dbde:	d103      	bne.n	800dbe8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2203      	movs	r2, #3
 800dbe4:	761a      	strb	r2, [r3, #24]
 800dbe6:	e00d      	b.n	800dc04 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2205      	movs	r2, #5
 800dbec:	761a      	strb	r2, [r3, #24]
 800dbee:	e009      	b.n	800dc04 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800dbf0:	7b7b      	ldrb	r3, [r7, #13]
 800dbf2:	2b80      	cmp	r3, #128	; 0x80
 800dbf4:	d103      	bne.n	800dbfe <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2209      	movs	r2, #9
 800dbfa:	761a      	strb	r2, [r3, #24]
 800dbfc:	e002      	b.n	800dc04 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2207      	movs	r2, #7
 800dc02:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2203      	movs	r2, #3
 800dc08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	f006 fbf0 	bl	8014400 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dc20:	e1c1      	b.n	800dfa6 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dc22:	7bbb      	ldrb	r3, [r7, #14]
 800dc24:	2b04      	cmp	r3, #4
 800dc26:	d003      	beq.n	800dc30 <USBH_HandleControl+0xe8>
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	f040 81bb 	bne.w	800dfa6 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	220b      	movs	r2, #11
 800dc34:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2203      	movs	r2, #3
 800dc3a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	f006 fbd7 	bl	8014400 <osMessagePut>
    break;
 800dc52:	e1a8      	b.n	800dfa6 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6899      	ldr	r1, [r3, #8]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	899a      	ldrh	r2, [r3, #12]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	791b      	ldrb	r3, [r3, #4]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 f9e8 	bl	800e042 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2204      	movs	r2, #4
 800dc76:	761a      	strb	r2, [r3, #24]
    break;
 800dc78:	e19e      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	791b      	ldrb	r3, [r3, #4]
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f00c ffc5 	bl	801ac10 <USBH_LL_GetURBState>
 800dc86:	4603      	mov	r3, r0
 800dc88:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800dc8a:	7bbb      	ldrb	r3, [r7, #14]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d110      	bne.n	800dcb2 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2209      	movs	r2, #9
 800dc94:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2203      	movs	r2, #3
 800dc9a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcaa:	2200      	movs	r2, #0
 800dcac:	4619      	mov	r1, r3
 800dcae:	f006 fba7 	bl	8014400 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800dcb2:	7bbb      	ldrb	r3, [r7, #14]
 800dcb4:	2b05      	cmp	r3, #5
 800dcb6:	d110      	bne.n	800dcda <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2203      	movs	r2, #3
 800dcc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	f006 fb94 	bl	8014400 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dcd8:	e167      	b.n	800dfaa <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800dcda:	7bbb      	ldrb	r3, [r7, #14]
 800dcdc:	2b04      	cmp	r3, #4
 800dcde:	f040 8164 	bne.w	800dfaa <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	220b      	movs	r2, #11
 800dce6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2203      	movs	r2, #3
 800dcec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4619      	mov	r1, r3
 800dd00:	f006 fb7e 	bl	8014400 <osMessagePut>
    break;
 800dd04:	e151      	b.n	800dfaa <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6899      	ldr	r1, [r3, #8]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	899a      	ldrh	r2, [r3, #12]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	7958      	ldrb	r0, [r3, #5]
 800dd12:	2301      	movs	r3, #1
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	4603      	mov	r3, r0
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f96d 	bl	800dff8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2206      	movs	r2, #6
 800dd2e:	761a      	strb	r2, [r3, #24]
    break;
 800dd30:	e142      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	795b      	ldrb	r3, [r3, #5]
 800dd36:	4619      	mov	r1, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f00c ff69 	bl	801ac10 <USBH_LL_GetURBState>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800dd42:	7bbb      	ldrb	r3, [r7, #14]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d111      	bne.n	800dd6c <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2207      	movs	r2, #7
 800dd4c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2203      	movs	r2, #3
 800dd52:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd62:	2200      	movs	r2, #0
 800dd64:	4619      	mov	r1, r3
 800dd66:	f006 fb4b 	bl	8014400 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dd6a:	e120      	b.n	800dfae <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d113      	bne.n	800dd9a <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	220c      	movs	r2, #12
 800dd76:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800dd78:	2303      	movs	r3, #3
 800dd7a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2203      	movs	r2, #3
 800dd80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd90:	2200      	movs	r2, #0
 800dd92:	4619      	mov	r1, r3
 800dd94:	f006 fb34 	bl	8014400 <osMessagePut>
    break;
 800dd98:	e109      	b.n	800dfae <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800dd9a:	7bbb      	ldrb	r3, [r7, #14]
 800dd9c:	2b02      	cmp	r3, #2
 800dd9e:	d111      	bne.n	800ddc4 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2205      	movs	r2, #5
 800dda4:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2203      	movs	r2, #3
 800ddaa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddba:	2200      	movs	r2, #0
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	f006 fb1f 	bl	8014400 <osMessagePut>
    break;
 800ddc2:	e0f4      	b.n	800dfae <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800ddc4:	7bbb      	ldrb	r3, [r7, #14]
 800ddc6:	2b04      	cmp	r3, #4
 800ddc8:	f040 80f1 	bne.w	800dfae <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	220b      	movs	r2, #11
 800ddd0:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800ddd2:	2302      	movs	r3, #2
 800ddd4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2203      	movs	r2, #3
 800ddda:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddea:	2200      	movs	r2, #0
 800ddec:	4619      	mov	r1, r3
 800ddee:	f006 fb07 	bl	8014400 <osMessagePut>
    break;
 800ddf2:	e0dc      	b.n	800dfae <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	791b      	ldrb	r3, [r3, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f920 	bl	800e042 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800de08:	b29a      	uxth	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2208      	movs	r2, #8
 800de12:	761a      	strb	r2, [r3, #24]

    break;
 800de14:	e0d0      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	791b      	ldrb	r3, [r3, #4]
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f00c fef7 	bl	801ac10 <USBH_LL_GetURBState>
 800de22:	4603      	mov	r3, r0
 800de24:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800de26:	7bbb      	ldrb	r3, [r7, #14]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d113      	bne.n	800de54 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	220d      	movs	r2, #13
 800de30:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2203      	movs	r2, #3
 800de3a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de4a:	2200      	movs	r2, #0
 800de4c:	4619      	mov	r1, r3
 800de4e:	f006 fad7 	bl	8014400 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800de52:	e0ae      	b.n	800dfb2 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800de54:	7bbb      	ldrb	r3, [r7, #14]
 800de56:	2b04      	cmp	r3, #4
 800de58:	d111      	bne.n	800de7e <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	220b      	movs	r2, #11
 800de5e:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2203      	movs	r2, #3
 800de64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de74:	2200      	movs	r2, #0
 800de76:	4619      	mov	r1, r3
 800de78:	f006 fac2 	bl	8014400 <osMessagePut>
    break;
 800de7c:	e099      	b.n	800dfb2 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800de7e:	7bbb      	ldrb	r3, [r7, #14]
 800de80:	2b05      	cmp	r3, #5
 800de82:	f040 8096 	bne.w	800dfb2 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800de86:	2303      	movs	r3, #3
 800de88:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2203      	movs	r2, #3
 800de8e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de9e:	2200      	movs	r2, #0
 800dea0:	4619      	mov	r1, r3
 800dea2:	f006 faad 	bl	8014400 <osMessagePut>
    break;
 800dea6:	e084      	b.n	800dfb2 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	795a      	ldrb	r2, [r3, #5]
 800deac:	2301      	movs	r3, #1
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	4613      	mov	r3, r2
 800deb2:	2200      	movs	r2, #0
 800deb4:	2100      	movs	r1, #0
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f89e 	bl	800dff8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	220a      	movs	r2, #10
 800decc:	761a      	strb	r2, [r3, #24]
    break;
 800dece:	e073      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	795b      	ldrb	r3, [r3, #5]
 800ded4:	4619      	mov	r1, r3
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f00c fe9a 	bl	801ac10 <USBH_LL_GetURBState>
 800dedc:	4603      	mov	r3, r0
 800dede:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d113      	bne.n	800df0e <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	220d      	movs	r2, #13
 800deee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2203      	movs	r2, #3
 800def4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df04:	2200      	movs	r2, #0
 800df06:	4619      	mov	r1, r3
 800df08:	f006 fa7a 	bl	8014400 <osMessagePut>
#endif
#endif
      }

    }
    break;
 800df0c:	e053      	b.n	800dfb6 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	2b02      	cmp	r3, #2
 800df12:	d111      	bne.n	800df38 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2209      	movs	r2, #9
 800df18:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2203      	movs	r2, #3
 800df1e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df2e:	2200      	movs	r2, #0
 800df30:	4619      	mov	r1, r3
 800df32:	f006 fa65 	bl	8014400 <osMessagePut>
    break;
 800df36:	e03e      	b.n	800dfb6 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800df38:	7bbb      	ldrb	r3, [r7, #14]
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d13b      	bne.n	800dfb6 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	220b      	movs	r2, #11
 800df42:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2203      	movs	r2, #3
 800df48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df58:	2200      	movs	r2, #0
 800df5a:	4619      	mov	r1, r3
 800df5c:	f006 fa50 	bl	8014400 <osMessagePut>
    break;
 800df60:	e029      	b.n	800dfb6 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	7e5b      	ldrb	r3, [r3, #25]
 800df66:	3301      	adds	r3, #1
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	765a      	strb	r2, [r3, #25]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	7e5b      	ldrb	r3, [r3, #25]
 800df72:	2b02      	cmp	r3, #2
 800df74:	d809      	bhi.n	800df8a <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f00c fd5d 	bl	801aa36 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2201      	movs	r2, #1
 800df80:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800df88:	e016      	b.n	800dfb8 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800df90:	2106      	movs	r1, #6
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800df9c:	2302      	movs	r3, #2
 800df9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa0:	e00a      	b.n	800dfb8 <USBH_HandleControl+0x470>

  default:
    break;
 800dfa2:	bf00      	nop
 800dfa4:	e008      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfa6:	bf00      	nop
 800dfa8:	e006      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfaa:	bf00      	nop
 800dfac:	e004      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfae:	bf00      	nop
 800dfb0:	e002      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfb2:	bf00      	nop
 800dfb4:	e000      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfb6:	bf00      	nop
  }
  return status;
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop

0800dfc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b088      	sub	sp, #32
 800dfc8:	af04      	add	r7, sp, #16
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800dfd2:	79f9      	ldrb	r1, [r7, #7]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9303      	str	r3, [sp, #12]
 800dfd8:	2308      	movs	r3, #8
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f00c fde0 	bl	801abae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b088      	sub	sp, #32
 800dffc:	af04      	add	r7, sp, #16
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4611      	mov	r1, r2
 800e004:	461a      	mov	r2, r3
 800e006:	460b      	mov	r3, r1
 800e008:	80fb      	strh	r3, [r7, #6]
 800e00a:	4613      	mov	r3, r2
 800e00c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e014:	2b00      	cmp	r3, #0
 800e016:	d001      	beq.n	800e01c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e018:	2300      	movs	r3, #0
 800e01a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e01c:	7979      	ldrb	r1, [r7, #5]
 800e01e:	7e3b      	ldrb	r3, [r7, #24]
 800e020:	9303      	str	r3, [sp, #12]
 800e022:	88fb      	ldrh	r3, [r7, #6]
 800e024:	9302      	str	r3, [sp, #8]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	2301      	movs	r3, #1
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	2300      	movs	r3, #0
 800e030:	2200      	movs	r2, #0
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f00c fdbb 	bl	801abae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b088      	sub	sp, #32
 800e046:	af04      	add	r7, sp, #16
 800e048:	60f8      	str	r0, [r7, #12]
 800e04a:	60b9      	str	r1, [r7, #8]
 800e04c:	4611      	mov	r1, r2
 800e04e:	461a      	mov	r2, r3
 800e050:	460b      	mov	r3, r1
 800e052:	80fb      	strh	r3, [r7, #6]
 800e054:	4613      	mov	r3, r2
 800e056:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e058:	7979      	ldrb	r1, [r7, #5]
 800e05a:	2300      	movs	r3, #0
 800e05c:	9303      	str	r3, [sp, #12]
 800e05e:	88fb      	ldrh	r3, [r7, #6]
 800e060:	9302      	str	r3, [sp, #8]
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	2301      	movs	r3, #1
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	2300      	movs	r3, #0
 800e06c:	2201      	movs	r2, #1
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f00c fd9d 	bl	801abae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e074:	2300      	movs	r3, #0

}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b088      	sub	sp, #32
 800e082:	af04      	add	r7, sp, #16
 800e084:	60f8      	str	r0, [r7, #12]
 800e086:	60b9      	str	r1, [r7, #8]
 800e088:	4611      	mov	r1, r2
 800e08a:	461a      	mov	r2, r3
 800e08c:	460b      	mov	r3, r1
 800e08e:	80fb      	strh	r3, [r7, #6]
 800e090:	4613      	mov	r3, r2
 800e092:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d001      	beq.n	800e0a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e0a2:	7979      	ldrb	r1, [r7, #5]
 800e0a4:	7e3b      	ldrb	r3, [r7, #24]
 800e0a6:	9303      	str	r3, [sp, #12]
 800e0a8:	88fb      	ldrh	r3, [r7, #6]
 800e0aa:	9302      	str	r3, [sp, #8]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f00c fd78 	bl	801abae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af04      	add	r7, sp, #16
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	4611      	mov	r1, r2
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	80fb      	strh	r3, [r7, #6]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e0de:	7979      	ldrb	r1, [r7, #5]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9303      	str	r3, [sp, #12]
 800e0e4:	88fb      	ldrh	r3, [r7, #6]
 800e0e6:	9302      	str	r3, [sp, #8]
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	9301      	str	r3, [sp, #4]
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	2302      	movs	r3, #2
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f00c fd5a 	bl	801abae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af04      	add	r7, sp, #16
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	4608      	mov	r0, r1
 800e10e:	4611      	mov	r1, r2
 800e110:	461a      	mov	r2, r3
 800e112:	4603      	mov	r3, r0
 800e114:	70fb      	strb	r3, [r7, #3]
 800e116:	460b      	mov	r3, r1
 800e118:	70bb      	strb	r3, [r7, #2]
 800e11a:	4613      	mov	r3, r2
 800e11c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800e11e:	7878      	ldrb	r0, [r7, #1]
 800e120:	78ba      	ldrb	r2, [r7, #2]
 800e122:	78f9      	ldrb	r1, [r7, #3]
 800e124:	8b3b      	ldrh	r3, [r7, #24]
 800e126:	9302      	str	r3, [sp, #8]
 800e128:	7d3b      	ldrb	r3, [r7, #20]
 800e12a:	9301      	str	r3, [sp, #4]
 800e12c:	7c3b      	ldrb	r3, [r7, #16]
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	4603      	mov	r3, r0
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f00c fced 	bl	801ab12 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800e138:	2300      	movs	r3, #0

}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	460b      	mov	r3, r1
 800e14c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800e14e:	78fb      	ldrb	r3, [r7, #3]
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f00c fd0c 	bl	801ab70 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e158:	2300      	movs	r3, #0

}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	460b      	mov	r3, r1
 800e16c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 f831 	bl	800e1d6 <USBH_GetFreePipe>
 800e174:	4603      	mov	r3, r0
 800e176:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e178:	89fb      	ldrh	r3, [r7, #14]
 800e17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e17e:	4293      	cmp	r3, r2
 800e180:	d007      	beq.n	800e192 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800e182:	78fb      	ldrb	r3, [r7, #3]
 800e184:	89fa      	ldrh	r2, [r7, #14]
 800e186:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	32e0      	adds	r2, #224	; 0xe0
 800e18e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800e192:	89fb      	ldrh	r3, [r7, #14]
 800e194:	b2db      	uxtb	r3, r3
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b083      	sub	sp, #12
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800e1aa:	78fb      	ldrb	r3, [r7, #3]
 800e1ac:	2b0a      	cmp	r3, #10
 800e1ae:	d80b      	bhi.n	800e1c8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800e1b0:	78fa      	ldrb	r2, [r7, #3]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	32e0      	adds	r2, #224	; 0xe0
 800e1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ba:	78fa      	ldrb	r2, [r7, #3]
 800e1bc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	32e0      	adds	r2, #224	; 0xe0
 800e1c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800e1d6:	b480      	push	{r7}
 800e1d8:	b085      	sub	sp, #20
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	73fb      	strb	r3, [r7, #15]
 800e1e6:	e00e      	b.n	800e206 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e1e8:	7bfa      	ldrb	r2, [r7, #15]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	32e0      	adds	r2, #224	; 0xe0
 800e1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d102      	bne.n	800e200 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800e1fa:	7bfb      	ldrb	r3, [r7, #15]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	e007      	b.n	800e210 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	3301      	adds	r3, #1
 800e204:	73fb      	strb	r3, [r7, #15]
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	2b0a      	cmp	r3, #10
 800e20a:	d9ed      	bls.n	800e1e8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800e20c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e210:	4618      	mov	r0, r3
 800e212:	3714      	adds	r7, #20
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	4604      	mov	r4, r0
 800e220:	461d      	mov	r5, r3
    {
        setXY(x, y);
 800e222:	6803      	ldr	r3, [r0, #0]
 800e224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e226:	4798      	blx	r3
        setWidth(width);
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22c:	4629      	mov	r1, r5
 800e22e:	4620      	mov	r0, r4
 800e230:	4798      	blx	r3
        setHeight(height);
 800e232:	6823      	ldr	r3, [r4, #0]
 800e234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e236:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800e23a:	4620      	mov	r0, r4
 800e23c:	4798      	blx	r3
    };
 800e23e:	bd38      	pop	{r3, r4, r5, pc}

0800e240 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800e240:	8081      	strh	r1, [r0, #4]
    }
 800e242:	4770      	bx	lr

0800e244 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800e244:	80c1      	strh	r1, [r0, #6]
    }
 800e246:	4770      	bx	lr

0800e248 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4604      	mov	r4, r0
 800e24c:	4615      	mov	r5, r2
    {
        setX(x);
 800e24e:	6803      	ldr	r3, [r0, #0]
 800e250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e252:	4798      	blx	r3
        setY(y);
 800e254:	6823      	ldr	r3, [r4, #0]
 800e256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e258:	4629      	mov	r1, r5
 800e25a:	4620      	mov	r0, r4
 800e25c:	4798      	blx	r3
    }
 800e25e:	bd38      	pop	{r3, r4, r5, pc}

0800e260 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800e260:	8101      	strh	r1, [r0, #8]
    }
 800e262:	4770      	bx	lr

0800e264 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800e264:	8141      	strh	r1, [r0, #10]
    }
 800e266:	4770      	bx	lr

0800e268 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800e268:	4770      	bx	lr

0800e26a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800e26a:	4770      	bx	lr

0800e26c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800e26c:	4770      	bx	lr

0800e26e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800e26e:	4770      	bx	lr

0800e270 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800e270:	4770      	bx	lr

0800e272 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e272:	b538      	push	{r3, r4, r5, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 800e274:	6803      	ldr	r3, [r0, #0]
 800e276:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800e278:	8883      	ldrh	r3, [r0, #4]
 800e27a:	1ac9      	subs	r1, r1, r3
 800e27c:	88c3      	ldrh	r3, [r0, #6]
 800e27e:	1ad2      	subs	r2, r2, r3
 800e280:	b212      	sxth	r2, r2
 800e282:	b209      	sxth	r1, r1
 800e284:	47a8      	blx	r5
    }
 800e286:	bd38      	pop	{r3, r4, r5, pc}

0800e288 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800e288:	4770      	bx	lr

0800e28a <_ZNK8touchgfx9Container7getTypeEv>:
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_CONTAINER;
    }
 800e28a:	2012      	movs	r0, #18
 800e28c:	4770      	bx	lr

0800e28e <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
    bool found = false;
    Drawable* head = firstChild;
 800e28e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    bool found = false;
 800e290:	2000      	movs	r0, #0
    while (head && !found)
 800e292:	b133      	cbz	r3, 800e2a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
 800e294:	b928      	cbnz	r0, 800e2a2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    {
        found = (head == &d);
 800e296:	428b      	cmp	r3, r1
 800e298:	bf14      	ite	ne
 800e29a:	2000      	movne	r0, #0
 800e29c:	2001      	moveq	r0, #1
        head = head->nextSibling;
 800e29e:	699b      	ldr	r3, [r3, #24]
    while (head && !found)
 800e2a0:	e7f7      	b.n	800e292 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
    }
    return found;
}
 800e2a2:	4770      	bx	lr

0800e2a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
    }
}

void Container::remove(Drawable& d)
{
    if (!firstChild)
 800e2a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e2a6:	b1ab      	cbz	r3, 800e2d4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x30>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800e2a8:	428b      	cmp	r3, r1
 800e2aa:	d10a      	bne.n	800e2c2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1e>
    {
        // d is first child.
        d.parent = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	614b      	str	r3, [r1, #20]
        if (!d.nextSibling)
 800e2b0:	698b      	ldr	r3, [r1, #24]
 800e2b2:	b11b      	cbz	r3, 800e2bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
            // d was only child, so now this container is empty
            firstChild = 0;
        }
        else
        {
            firstChild = d.nextSibling;
 800e2b4:	6283      	str	r3, [r0, #40]	; 0x28
            d.nextSibling = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	618b      	str	r3, [r1, #24]
 800e2ba:	4770      	bx	lr
            firstChild = 0;
 800e2bc:	6283      	str	r3, [r0, #40]	; 0x28
 800e2be:	4770      	bx	lr
            d.nextSibling = 0;
            return;
        }
        else
        {
            tmp = tmp->nextSibling;
 800e2c0:	4613      	mov	r3, r2
    while (tmp)
 800e2c2:	b13b      	cbz	r3, 800e2d4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x30>
        if (tmp->nextSibling == &d)
 800e2c4:	699a      	ldr	r2, [r3, #24]
 800e2c6:	428a      	cmp	r2, r1
 800e2c8:	d1fa      	bne.n	800e2c0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
            tmp->nextSibling = d.nextSibling;
 800e2ca:	698a      	ldr	r2, [r1, #24]
 800e2cc:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	614b      	str	r3, [r1, #20]
            d.nextSibling = 0;
 800e2d2:	618b      	str	r3, [r1, #24]
        }
    }
}
 800e2d4:	4770      	bx	lr

0800e2d6 <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
    while (firstChild)
 800e2d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e2d8:	b12b      	cbz	r3, 800e2e6 <_ZN8touchgfx9Container9removeAllEv+0x10>
    {
        Drawable* d = firstChild;
        firstChild = firstChild->nextSibling;
 800e2da:	699a      	ldr	r2, [r3, #24]
 800e2dc:	6282      	str	r2, [r0, #40]	; 0x28
        d->parent = 0;
 800e2de:	2200      	movs	r2, #0
 800e2e0:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800e2e2:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800e2e4:	e7f7      	b.n	800e2d6 <_ZN8touchgfx9Container9removeAllEv>
    }
}
 800e2e6:	4770      	bx	lr

0800e2e8 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
    firstChild = 0;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	6283      	str	r3, [r0, #40]	; 0x28
}
 800e2ec:	4770      	bx	lr

0800e2ee <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
        return visible;
 800e2ee:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
void Container::draw(const Rect& invalidatedArea) const
{
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f000 8085 	beq.w	800e402 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x114>
{
 800e2f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2fc:	b085      	sub	sp, #20
    if (!isVisible() || !firstChild)
 800e2fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e300:	2c00      	cmp	r4, #0
 800e302:	d07b      	beq.n	800e3fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x10e>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800e304:	ab02      	add	r3, sp, #8
 800e306:	6808      	ldr	r0, [r1, #0]
 800e308:	6849      	ldr	r1, [r1, #4]
 800e30a:	c303      	stmia	r3!, {r0, r1}
 800e30c:	e012      	b.n	800e334 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x46>
        {
            int16_t newX = MAX(x, other.x);
            int16_t newY = MAX(y, other.y);

            width = MIN(right(), other.right()) - newX;
            height = MIN(bottom(), other.bottom()) - newY;
 800e30e:	463b      	mov	r3, r7
 800e310:	e057      	b.n	800e3c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd4>
            x = newX;
            y = newY;
        }
        else
        {
            x = 0;
 800e312:	2300      	movs	r3, #0
 800e314:	f8ad 3000 	strh.w	r3, [sp]
            y = 0;
 800e318:	f8ad 3002 	strh.w	r3, [sp, #2]
            width = 0;
 800e31c:	f8ad 3004 	strh.w	r3, [sp, #4]
            height = 0;
 800e320:	f8ad 3006 	strh.w	r3, [sp, #6]
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
    {
        return ((width == 0) || (height == 0));
 800e324:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800e328:	b11b      	cbz	r3, 800e332 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x44>
 800e32a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d150      	bne.n	800e3d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xe6>
                drawableRegion.x -= d->getX();
                drawableRegion.y -= d->getY();
                d->draw(drawableRegion);
            }
        }
        d = d->nextSibling;
 800e332:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800e334:	2c00      	cmp	r4, #0
 800e336:	d061      	beq.n	800e3fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x10e>
 800e338:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
        if (d->isVisible())
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d0f8      	beq.n	800e332 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x44>
        return rect;
 800e340:	1d25      	adds	r5, r4, #4
        Rect r = *this;
 800e342:	466b      	mov	r3, sp
 800e344:	aa04      	add	r2, sp, #16
 800e346:	e912 0003 	ldmdb	r2, {r0, r1}
 800e34a:	e883 0003 	stmia.w	r3, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 800e34e:	f9bd 0000 	ldrsh.w	r0, [sp]
        return x + width;
 800e352:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e356:	88ab      	ldrh	r3, [r5, #4]
 800e358:	fa13 f381 	uxtah	r3, r3, r1
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	b21e      	sxth	r6, r3
        return !(x >= other.right() || right() <= other.x ||
 800e360:	42b0      	cmp	r0, r6
 800e362:	dad6      	bge.n	800e312 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
        return x + width;
 800e364:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e368:	fa12 f280 	uxtah	r2, r2, r0
 800e36c:	b292      	uxth	r2, r2
 800e36e:	fa0f fc82 	sxth.w	ip, r2
        return !(x >= other.right() || right() <= other.x ||
 800e372:	4561      	cmp	r1, ip
 800e374:	dacd      	bge.n	800e312 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
                 y >= other.bottom() || bottom() <= other.y);
 800e376:	f9bd 8002 	ldrsh.w	r8, [sp, #2]
        return y + height;
 800e37a:	f9b5 e002 	ldrsh.w	lr, [r5, #2]
 800e37e:	88ef      	ldrh	r7, [r5, #6]
 800e380:	fa17 f78e 	uxtah	r7, r7, lr
 800e384:	b23f      	sxth	r7, r7
        return !(x >= other.right() || right() <= other.x ||
 800e386:	45b8      	cmp	r8, r7
 800e388:	dac3      	bge.n	800e312 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
        return y + height;
 800e38a:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 800e38e:	fa17 f788 	uxtah	r7, r7, r8
 800e392:	b2bf      	uxth	r7, r7
 800e394:	fa0f f987 	sxth.w	r9, r7
        return !(x >= other.right() || right() <= other.x ||
 800e398:	45ce      	cmp	lr, r9
 800e39a:	daba      	bge.n	800e312 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
            int16_t newX = MAX(x, other.x);
 800e39c:	4288      	cmp	r0, r1
 800e39e:	dd00      	ble.n	800e3a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xb4>
 800e3a0:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 800e3a2:	45f0      	cmp	r8, lr
 800e3a4:	dd00      	ble.n	800e3a8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xba>
 800e3a6:	46c6      	mov	lr, r8
            width = MIN(right(), other.right()) - newX;
 800e3a8:	4566      	cmp	r6, ip
 800e3aa:	dd00      	ble.n	800e3ae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc0>
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	1a5b      	subs	r3, r3, r1
 800e3b0:	f8ad 3004 	strh.w	r3, [sp, #4]
        return y + height;
 800e3b4:	886b      	ldrh	r3, [r5, #2]
 800e3b6:	88ea      	ldrh	r2, [r5, #6]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 800e3be:	4591      	cmp	r9, r2
 800e3c0:	dba5      	blt.n	800e30e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x20>
 800e3c2:	eba3 030e 	sub.w	r3, r3, lr
 800e3c6:	f8ad 3006 	strh.w	r3, [sp, #6]
            x = newX;
 800e3ca:	f8ad 1000 	strh.w	r1, [sp]
            y = newY;
 800e3ce:	f8ad e002 	strh.w	lr, [sp, #2]
 800e3d2:	e7a7      	b.n	800e324 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x36>
        return rect.x;
 800e3d4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                drawableRegion.x -= d->getX();
 800e3d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800e3dc:	1a9b      	subs	r3, r3, r2
 800e3de:	f8ad 3000 	strh.w	r3, [sp]
        return rect.y;
 800e3e2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
                drawableRegion.y -= d->getY();
 800e3e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e3ea:	1a9b      	subs	r3, r3, r2
 800e3ec:	f8ad 3002 	strh.w	r3, [sp, #2]
                d->draw(drawableRegion);
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	4669      	mov	r1, sp
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	4798      	blx	r3
 800e3fa:	e79a      	b.n	800e332 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x44>
    }
}
 800e3fc:	b005      	add	sp, #20
 800e3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e402:	4770      	bx	lr

0800e404 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800e404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e408:	460d      	mov	r5, r1
 800e40a:	4616      	mov	r6, r2
 800e40c:	461f      	mov	r7, r3
        return touchable;
 800e40e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800e412:	b103      	cbz	r3, 800e416 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800e414:	6038      	str	r0, [r7, #0]
    }

    Drawable* d = firstChild;
 800e416:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e418:	e000      	b.n	800e41c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x18>
        {
            int16_t xadj = x - d->getX();
            int16_t yadj = y - d->getY();
            d->getLastChild(xadj, yadj, last);
        }
        d = d->nextSibling;
 800e41a:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800e41c:	b314      	cbz	r4, 800e464 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x60>
        return visible;
 800e41e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
        if (d->isVisible() && d->getRect().intersect(x, y))
 800e422:	2b00      	cmp	r3, #0
 800e424:	d0f9      	beq.n	800e41a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
        return (otherX >= x && otherX < right() &&
 800e426:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
                otherY >= y && otherY < bottom());
 800e42a:	428d      	cmp	r5, r1
 800e42c:	dbf5      	blt.n	800e41a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
        return x + width;
 800e42e:	b289      	uxth	r1, r1
 800e430:	8923      	ldrh	r3, [r4, #8]
 800e432:	440b      	add	r3, r1
 800e434:	b21b      	sxth	r3, r3
        return (otherX >= x && otherX < right() &&
 800e436:	429d      	cmp	r5, r3
 800e438:	daef      	bge.n	800e41a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
                otherY >= y && otherY < bottom());
 800e43a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        return (otherX >= x && otherX < right() &&
 800e43e:	429e      	cmp	r6, r3
 800e440:	dbeb      	blt.n	800e41a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
        return y + height;
 800e442:	b29b      	uxth	r3, r3
 800e444:	8962      	ldrh	r2, [r4, #10]
 800e446:	441a      	add	r2, r3
 800e448:	b212      	sxth	r2, r2
                otherY >= y && otherY < bottom());
 800e44a:	4296      	cmp	r6, r2
 800e44c:	dae5      	bge.n	800e41a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
            int16_t xadj = x - d->getX();
 800e44e:	1a69      	subs	r1, r5, r1
            int16_t yadj = y - d->getY();
 800e450:	1af2      	subs	r2, r6, r3
            d->getLastChild(xadj, yadj, last);
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800e458:	463b      	mov	r3, r7
 800e45a:	b212      	sxth	r2, r2
 800e45c:	b209      	sxth	r1, r1
 800e45e:	4620      	mov	r0, r4
 800e460:	47c0      	blx	r8
 800e462:	e7da      	b.n	800e41a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
    }
}
 800e464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e468 <_ZNK8touchgfx9Container12getSolidRectEv>:
        this->x = x;
 800e468:	2200      	movs	r2, #0
 800e46a:	8002      	strh	r2, [r0, #0]
        this->y = y;
 800e46c:	8042      	strh	r2, [r0, #2]
        this->width = width;
 800e46e:	8082      	strh	r2, [r0, #4]
        this->height = height;
 800e470:	80c2      	strh	r2, [r0, #6]

Rect Container::getSolidRect() const
{
    return Rect(0, 0, 0, 0);
}
 800e472:	4770      	bx	lr

0800e474 <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
    Drawable* d = firstChild;
 800e474:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        this->x = x;
 800e476:	2200      	movs	r2, #0
 800e478:	8002      	strh	r2, [r0, #0]
        this->y = y;
 800e47a:	8042      	strh	r2, [r0, #2]
        this->width = width;
 800e47c:	8082      	strh	r2, [r0, #4]
        this->height = height;
 800e47e:	80c2      	strh	r2, [r0, #6]
 800e480:	e056      	b.n	800e530 <_ZNK8touchgfx9Container16getContainedAreaEv+0xbc>
                x = other.x;
 800e482:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e486:	8001      	strh	r1, [r0, #0]
                y = other.y;
 800e488:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800e48c:	8041      	strh	r1, [r0, #2]
                width = other.width;
 800e48e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800e492:	8081      	strh	r1, [r0, #4]
                height = other.height;
 800e494:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e498:	80c2      	strh	r2, [r0, #6]
    Rect contained(0, 0, 0, 0);
    while (d)
    {
        contained.expandToFit(d->getRect());
        d = d->nextSibling;
 800e49a:	699b      	ldr	r3, [r3, #24]
    while (d)
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d044      	beq.n	800e52a <_ZNK8touchgfx9Container16getContainedAreaEv+0xb6>
        return rect;
 800e4a0:	1d1a      	adds	r2, r3, #4
        return ((width == 0) || (height == 0));
 800e4a2:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800e4a6:	2900      	cmp	r1, #0
 800e4a8:	d0f7      	beq.n	800e49a <_ZNK8touchgfx9Container16getContainedAreaEv+0x26>
 800e4aa:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 800e4ae:	2c00      	cmp	r4, #0
 800e4b0:	d0f3      	beq.n	800e49a <_ZNK8touchgfx9Container16getContainedAreaEv+0x26>
 800e4b2:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800e4b6:	2e00      	cmp	r6, #0
 800e4b8:	d0e3      	beq.n	800e482 <_ZNK8touchgfx9Container16getContainedAreaEv+0xe>
 800e4ba:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 800e4be:	f1b8 0f00 	cmp.w	r8, #0
 800e4c2:	d0de      	beq.n	800e482 <_ZNK8touchgfx9Container16getContainedAreaEv+0xe>
                int16_t newX = MIN(x, other.x);
 800e4c4:	f9b0 9000 	ldrsh.w	r9, [r0]
 800e4c8:	f9b2 5000 	ldrsh.w	r5, [r2]
 800e4cc:	45a9      	cmp	r9, r5
 800e4ce:	da28      	bge.n	800e522 <_ZNK8touchgfx9Container16getContainedAreaEv+0xae>
 800e4d0:	464f      	mov	r7, r9
                int16_t newY = MIN(y, other.y);
 800e4d2:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 800e4d6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800e4da:	4596      	cmp	lr, r2
 800e4dc:	da23      	bge.n	800e526 <_ZNK8touchgfx9Container16getContainedAreaEv+0xb2>
 800e4de:	46f4      	mov	ip, lr
        return x + width;
 800e4e0:	b2b6      	uxth	r6, r6
 800e4e2:	fa16 f689 	uxtah	r6, r6, r9
 800e4e6:	b236      	sxth	r6, r6
 800e4e8:	b289      	uxth	r1, r1
 800e4ea:	fa11 f185 	uxtah	r1, r1, r5
 800e4ee:	b209      	sxth	r1, r1
                int16_t endPointX = MAX(right(), other.right());
 800e4f0:	428e      	cmp	r6, r1
 800e4f2:	dd00      	ble.n	800e4f6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x82>
 800e4f4:	4631      	mov	r1, r6
        return y + height;
 800e4f6:	fa1f f888 	uxth.w	r8, r8
 800e4fa:	fa18 fe8e 	uxtah	lr, r8, lr
 800e4fe:	fa0f fe8e 	sxth.w	lr, lr
 800e502:	b2a4      	uxth	r4, r4
 800e504:	fa14 f482 	uxtah	r4, r4, r2
 800e508:	b224      	sxth	r4, r4
                int16_t endPointY = MAX(bottom(), other.bottom());
 800e50a:	45a6      	cmp	lr, r4
 800e50c:	dd00      	ble.n	800e510 <_ZNK8touchgfx9Container16getContainedAreaEv+0x9c>
 800e50e:	4674      	mov	r4, lr
                x = newX;
 800e510:	8007      	strh	r7, [r0, #0]
                y = newY;
 800e512:	f8a0 c002 	strh.w	ip, [r0, #2]
                width = endPointX - newX;
 800e516:	1bc9      	subs	r1, r1, r7
 800e518:	8081      	strh	r1, [r0, #4]
                height = endPointY - newY;
 800e51a:	eba4 040c 	sub.w	r4, r4, ip
 800e51e:	80c4      	strh	r4, [r0, #6]
 800e520:	e7bb      	b.n	800e49a <_ZNK8touchgfx9Container16getContainedAreaEv+0x26>
                int16_t newX = MIN(x, other.x);
 800e522:	462f      	mov	r7, r5
 800e524:	e7d5      	b.n	800e4d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x5e>
                int16_t newY = MIN(y, other.y);
 800e526:	4694      	mov	ip, r2
 800e528:	e7da      	b.n	800e4e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x6c>
    }
    return contained;
}
 800e52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        d = d->nextSibling;
 800e52e:	699b      	ldr	r3, [r3, #24]
    while (d)
 800e530:	b13b      	cbz	r3, 800e542 <_ZNK8touchgfx9Container16getContainedAreaEv+0xce>
 800e532:	1d1a      	adds	r2, r3, #4
        return ((width == 0) || (height == 0));
 800e534:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800e538:	2900      	cmp	r1, #0
 800e53a:	d0f8      	beq.n	800e52e <_ZNK8touchgfx9Container16getContainedAreaEv+0xba>
{
 800e53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e540:	e7b3      	b.n	800e4aa <_ZNK8touchgfx9Container16getContainedAreaEv+0x36>
}
 800e542:	4770      	bx	lr

0800e544 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	460e      	mov	r6, r1
 800e548:	4615      	mov	r5, r2
    Drawable* d = firstChild;
 800e54a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    while (d)
 800e54c:	b13c      	cbz	r4, 800e55e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
    {
        d->moveRelative(deltaX, deltaY);
 800e54e:	6823      	ldr	r3, [r4, #0]
 800e550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e552:	462a      	mov	r2, r5
 800e554:	4631      	mov	r1, r6
 800e556:	4620      	mov	r0, r4
 800e558:	4798      	blx	r3
        d = d->nextSibling;
 800e55a:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800e55c:	e7f6      	b.n	800e54c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
    }
}
 800e55e:	bd70      	pop	{r4, r5, r6, pc}

0800e560 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	460d      	mov	r5, r1
    Drawable* d = firstChild;
 800e564:	6a84      	ldr	r4, [r0, #40]	; 0x28
    while (d)
 800e566:	b134      	cbz	r4, 800e576 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
    {
        function->execute(*d);
 800e568:	682b      	ldr	r3, [r5, #0]
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	4621      	mov	r1, r4
 800e56e:	4628      	mov	r0, r5
 800e570:	4798      	blx	r3
        d = d->nextSibling;
 800e572:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800e574:	e7f7      	b.n	800e566 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
    }
}
 800e576:	bd38      	pop	{r3, r4, r5, pc}

0800e578 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800e578:	b508      	push	{r3, lr}
    if (!firstChild)
 800e57a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e57c:	b12b      	cbz	r3, 800e58a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x12>
    {
        // Insert as only element
        add(d);
        return;
    }
    else if (!previous)
 800e57e:	b149      	cbz	r1, 800e594 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
        d.parent = this;
    }
    else
    {
        Drawable* tmp = firstChild;
        while (tmp)
 800e580:	b183      	cbz	r3, 800e5a4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x2c>
        {
            if (tmp == previous)
 800e582:	428b      	cmp	r3, r1
 800e584:	d00a      	beq.n	800e59c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
                d.nextSibling = tmp->nextSibling;
                tmp->nextSibling = &d;
                d.parent = this;
                return;
            }
            tmp = tmp->nextSibling;
 800e586:	699b      	ldr	r3, [r3, #24]
        while (tmp)
 800e588:	e7fa      	b.n	800e580 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x8>
 800e58a:	4611      	mov	r1, r2
        add(d);
 800e58c:	6803      	ldr	r3, [r0, #0]
 800e58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e590:	4798      	blx	r3
        return;
 800e592:	e007      	b.n	800e5a4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x2c>
        d.nextSibling = firstChild;
 800e594:	6193      	str	r3, [r2, #24]
        firstChild = &d;
 800e596:	6282      	str	r2, [r0, #40]	; 0x28
        d.parent = this;
 800e598:	6150      	str	r0, [r2, #20]
 800e59a:	e003      	b.n	800e5a4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x2c>
                d.nextSibling = tmp->nextSibling;
 800e59c:	6999      	ldr	r1, [r3, #24]
 800e59e:	6191      	str	r1, [r2, #24]
                tmp->nextSibling = &d;
 800e5a0:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800e5a2:	6150      	str	r0, [r2, #20]
        }
    }
}
 800e5a4:	bd08      	pop	{r3, pc}
	...

0800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
{
 800e5a8:	b508      	push	{r3, lr}
    assert(&d != this && "Cannot add Drawable to self");
 800e5aa:	4288      	cmp	r0, r1
 800e5ac:	d008      	beq.n	800e5c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x18>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800e5ae:	694b      	ldr	r3, [r1, #20]
 800e5b0:	b963      	cbnz	r3, 800e5cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x24>
    d.parent = this;
 800e5b2:	6148      	str	r0, [r1, #20]
    d.nextSibling = 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	618b      	str	r3, [r1, #24]
    if (!firstChild)
 800e5b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e5ba:	b973      	cbnz	r3, 800e5da <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
        firstChild = &d;
 800e5bc:	6281      	str	r1, [r0, #40]	; 0x28
 800e5be:	e019      	b.n	800e5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>
    assert(&d != this && "Cannot add Drawable to self");
 800e5c0:	4b10      	ldr	r3, [pc, #64]	; (800e604 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800e5c2:	4a11      	ldr	r2, [pc, #68]	; (800e608 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800e5c4:	2123      	movs	r1, #35	; 0x23
 800e5c6:	4811      	ldr	r0, [pc, #68]	; (800e60c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800e5c8:	f014 fab6 	bl	8022b38 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800e5cc:	4b10      	ldr	r3, [pc, #64]	; (800e610 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x68>)
 800e5ce:	4a0e      	ldr	r2, [pc, #56]	; (800e608 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800e5d0:	2124      	movs	r1, #36	; 0x24
 800e5d2:	480e      	ldr	r0, [pc, #56]	; (800e60c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800e5d4:	f014 fab0 	bl	8022b38 <__assert_func>
            head = head->nextSibling;
 800e5d8:	4613      	mov	r3, r2
        while (head->nextSibling)
 800e5da:	699a      	ldr	r2, [r3, #24]
 800e5dc:	b13a      	cbz	r2, 800e5ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x46>
            assert(head != &d && "Cannot add Drawable multiple times");
 800e5de:	428b      	cmp	r3, r1
 800e5e0:	d1fa      	bne.n	800e5d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x30>
 800e5e2:	4b0c      	ldr	r3, [pc, #48]	; (800e614 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x6c>)
 800e5e4:	4a08      	ldr	r2, [pc, #32]	; (800e608 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800e5e6:	2135      	movs	r1, #53	; 0x35
 800e5e8:	4808      	ldr	r0, [pc, #32]	; (800e60c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800e5ea:	f014 faa5 	bl	8022b38 <__assert_func>
        assert(head != &d && "Cannot add Drawable multiple times");
 800e5ee:	428b      	cmp	r3, r1
 800e5f0:	d001      	beq.n	800e5f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
        head->nextSibling = &d;
 800e5f2:	6199      	str	r1, [r3, #24]
}
 800e5f4:	bd08      	pop	{r3, pc}
        assert(head != &d && "Cannot add Drawable multiple times");
 800e5f6:	4b07      	ldr	r3, [pc, #28]	; (800e614 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x6c>)
 800e5f8:	4a03      	ldr	r2, [pc, #12]	; (800e608 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800e5fa:	2138      	movs	r1, #56	; 0x38
 800e5fc:	4803      	ldr	r0, [pc, #12]	; (800e60c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800e5fe:	f014 fa9b 	bl	8022b38 <__assert_func>
 800e602:	bf00      	nop
 800e604:	08023bdc 	.word	0x08023bdc
 800e608:	08023d5c 	.word	0x08023d5c
 800e60c:	08023c08 	.word	0x08023c08
 800e610:	08023c60 	.word	0x08023c60
 800e614:	08023c98 	.word	0x08023c98

0800e618 <_ZN8touchgfx9ContainerD0Ev>:
    virtual ~Container() { }
 800e618:	b510      	push	{r4, lr}
 800e61a:	4604      	mov	r4, r0
 800e61c:	212c      	movs	r1, #44	; 0x2c
 800e61e:	f014 fa6f 	bl	8022b00 <_ZdlPvj>
 800e622:	4620      	mov	r0, r4
 800e624:	bd10      	pop	{r4, pc}

0800e626 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
        return visible;
 800e626:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f000 8084 	beq.w	800e738 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x112>
{
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	b083      	sub	sp, #12
 800e636:	4616      	mov	r6, r2
 800e638:	460d      	mov	r5, r1
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800e63a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e63c:	b9ac      	cbnz	r4, 800e66a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x44>
                d->setupDrawChain(drawableRegion, nextPreviousElement);
            }
        }
        d = d->nextSibling;
    }
}
 800e63e:	b003      	add	sp, #12
 800e640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            height = MIN(bottom(), other.bottom()) - newY;
 800e644:	464b      	mov	r3, r9
 800e646:	e059      	b.n	800e6fc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xd6>
            x = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	f8ad 3000 	strh.w	r3, [sp]
            y = 0;
 800e64e:	f8ad 3002 	strh.w	r3, [sp, #2]
            width = 0;
 800e652:	f8ad 3004 	strh.w	r3, [sp, #4]
            height = 0;
 800e656:	f8ad 3006 	strh.w	r3, [sp, #6]
        return ((width == 0) || (height == 0));
 800e65a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800e65e:	b11b      	cbz	r3, 800e668 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x42>
 800e660:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d152      	bne.n	800e70e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe8>
        d = d->nextSibling;
 800e668:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800e66a:	2c00      	cmp	r4, #0
 800e66c:	d0e7      	beq.n	800e63e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x18>
 800e66e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
        if (d->isVisible())
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0f8      	beq.n	800e668 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x42>
        return rect;
 800e676:	1d27      	adds	r7, r4, #4
        Rect r = *this;
 800e678:	466b      	mov	r3, sp
 800e67a:	6828      	ldr	r0, [r5, #0]
 800e67c:	6869      	ldr	r1, [r5, #4]
 800e67e:	c303      	stmia	r3!, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 800e680:	f9bd 0000 	ldrsh.w	r0, [sp]
        return x + width;
 800e684:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e688:	88bb      	ldrh	r3, [r7, #4]
 800e68a:	fa13 f381 	uxtah	r3, r3, r1
 800e68e:	b29b      	uxth	r3, r3
 800e690:	fa0f fc83 	sxth.w	ip, r3
        return !(x >= other.right() || right() <= other.x ||
 800e694:	4560      	cmp	r0, ip
 800e696:	dad7      	bge.n	800e648 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x22>
        return x + width;
 800e698:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e69c:	fa12 f280 	uxtah	r2, r2, r0
 800e6a0:	b292      	uxth	r2, r2
 800e6a2:	fa0f fe82 	sxth.w	lr, r2
        return !(x >= other.right() || right() <= other.x ||
 800e6a6:	4571      	cmp	r1, lr
 800e6a8:	dace      	bge.n	800e648 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x22>
                 y >= other.bottom() || bottom() <= other.y);
 800e6aa:	f9bd b002 	ldrsh.w	fp, [sp, #2]
        return y + height;
 800e6ae:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 800e6b2:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 800e6b6:	fa19 f988 	uxtah	r9, r9, r8
 800e6ba:	fa0f f989 	sxth.w	r9, r9
        return !(x >= other.right() || right() <= other.x ||
 800e6be:	45cb      	cmp	fp, r9
 800e6c0:	dac2      	bge.n	800e648 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x22>
        return y + height;
 800e6c2:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 800e6c6:	fa19 f98b 	uxtah	r9, r9, fp
 800e6ca:	fa1f f989 	uxth.w	r9, r9
 800e6ce:	fa0f fa89 	sxth.w	sl, r9
        return !(x >= other.right() || right() <= other.x ||
 800e6d2:	45d0      	cmp	r8, sl
 800e6d4:	dab8      	bge.n	800e648 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x22>
            int16_t newX = MAX(x, other.x);
 800e6d6:	4288      	cmp	r0, r1
 800e6d8:	dd00      	ble.n	800e6dc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb6>
 800e6da:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 800e6dc:	45c3      	cmp	fp, r8
 800e6de:	dd00      	ble.n	800e6e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
 800e6e0:	46d8      	mov	r8, fp
            width = MIN(right(), other.right()) - newX;
 800e6e2:	45f4      	cmp	ip, lr
 800e6e4:	dd00      	ble.n	800e6e8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xc2>
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	1a5b      	subs	r3, r3, r1
 800e6ea:	f8ad 3004 	strh.w	r3, [sp, #4]
        return y + height;
 800e6ee:	887b      	ldrh	r3, [r7, #2]
 800e6f0:	88fa      	ldrh	r2, [r7, #6]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 800e6f8:	4592      	cmp	sl, r2
 800e6fa:	dba3      	blt.n	800e644 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x1e>
 800e6fc:	eba3 0308 	sub.w	r3, r3, r8
 800e700:	f8ad 3006 	strh.w	r3, [sp, #6]
            x = newX;
 800e704:	f8ad 1000 	strh.w	r1, [sp]
            y = newY;
 800e708:	f8ad 8002 	strh.w	r8, [sp, #2]
 800e70c:	e7a5      	b.n	800e65a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x34>
        return rect.x;
 800e70e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                drawableRegion.x -= d->getX();
 800e712:	f8bd 3000 	ldrh.w	r3, [sp]
 800e716:	1a9b      	subs	r3, r3, r2
 800e718:	f8ad 3000 	strh.w	r3, [sp]
        return rect.y;
 800e71c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
                drawableRegion.y -= d->getY();
 800e720:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e724:	1a9b      	subs	r3, r3, r2
 800e726:	f8ad 3002 	strh.w	r3, [sp, #2]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e72e:	4632      	mov	r2, r6
 800e730:	4669      	mov	r1, sp
 800e732:	4620      	mov	r0, r4
 800e734:	4798      	blx	r3
 800e736:	e797      	b.n	800e668 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x42>
 800e738:	4770      	bx	lr

0800e73a <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800e73a:	4770      	bx	lr

0800e73c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_CLICK;
    }
 800e73c:	2000      	movs	r0, #0
 800e73e:	4770      	bx	lr

0800e740 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800e740:	4770      	bx	lr

0800e742 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_DRAG;
    }
 800e742:	2001      	movs	r0, #1
 800e744:	4770      	bx	lr

0800e746 <_ZN8touchgfx10ClickEventD0Ev>:
    virtual ~ClickEvent() { }
 800e746:	b510      	push	{r4, lr}
 800e748:	4604      	mov	r4, r0
 800e74a:	210c      	movs	r1, #12
 800e74c:	f014 f9d8 	bl	8022b00 <_ZdlPvj>
 800e750:	4620      	mov	r0, r4
 800e752:	bd10      	pop	{r4, pc}

0800e754 <_ZN8touchgfx9DragEventD0Ev>:
    virtual ~DragEvent() { }
 800e754:	b510      	push	{r4, lr}
 800e756:	4604      	mov	r4, r0
 800e758:	2110      	movs	r1, #16
 800e75a:	f014 f9d1 	bl	8022b00 <_ZdlPvj>
 800e75e:	4620      	mov	r0, r4
 800e760:	bd10      	pop	{r4, pc}

0800e762 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
     * @see getIndicatorMax
     */
    virtual uint16_t getIndicatorMin() const
    {
        return indicatorMaxPosition;
    }
 800e762:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 800e766:	4770      	bx	lr

0800e768 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
     * @see getIndicatorMin
     */
    virtual uint16_t getIndicatorMax() const
    {
        return indicatorMaxPosition;
    }
 800e768:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 800e76c:	4770      	bx	lr

0800e76e <_ZNK8touchgfx6Slider11getMinValueEv>:
     * @see getMaxValue
     */
    virtual uint16_t getMinValue() const
    {
        return valueRangeMin;
    }
 800e76e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 800e770:	4770      	bx	lr

0800e772 <_ZNK8touchgfx6Slider11getMaxValueEv>:
     * @see getMinValue
     */
    virtual uint16_t getMaxValue() const
    {
        return valueRangeMax;
    }
 800e772:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 800e774:	4770      	bx	lr

0800e776 <_ZNK8touchgfx6Slider7getTypeEv>:
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_SLIDER;
    }
 800e776:	2018      	movs	r0, #24
 800e778:	4770      	bx	lr

0800e77a <_ZN8touchgfx6SliderD1Ev>:
    setValueRange(0, 100);
}

Slider::~Slider()
{
}
 800e77a:	4770      	bx	lr

0800e77c <_ZN8touchgfx6Slider8setValueEi>:

    setValue(currentValue);
}

void Slider::setValue(int value)
{
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4604      	mov	r4, r0
    updateIndicatorPosition(valueToPosition(value));
 800e780:	6803      	ldr	r3, [r0, #0]
 800e782:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800e786:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e78a:	4798      	blx	r3
 800e78c:	4601      	mov	r1, r0
 800e78e:	4620      	mov	r0, r4
 800e790:	47a8      	blx	r5
}
 800e792:	bd38      	pop	{r3, r4, r5, pc}

0800e794 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:

void Slider::handleClickEvent(const ClickEvent& evt)
{
 800e794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return _type;
 800e796:	790b      	ldrb	r3, [r1, #4]
    if ((evt.getType() == ClickEvent::PRESSED) || (evt.getType() == ClickEvent::RELEASED))
 800e798:	b10b      	cbz	r3, 800e79e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0xa>
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d11d      	bne.n	800e7da <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x46>
 800e79e:	460d      	mov	r5, r1
 800e7a0:	4604      	mov	r4, r0
    {
        // Communicate the start value if a listener is registered
        if ((evt.getType() == ClickEvent::PRESSED) && (startValueCallback != 0) && startValueCallback->isValid())
 800e7a2:	b933      	cbnz	r3, 800e7b2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x1e>
 800e7a4:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 800e7a8:	b118      	cbz	r0, 800e7b2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x1e>
 800e7aa:	6803      	ldr	r3, [r0, #0]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	4798      	blx	r3
 800e7b0:	b9a0      	cbnz	r0, 800e7dc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x48>
        {
            startValueCallback->execute(*this, currentValue);
        }

        if (sliderOrientation == HORIZONTAL)
 800e7b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e7b6:	b9cb      	cbnz	r3, 800e7ec <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
        {
            updateIndicatorPosition(evt.getX() - getIndicatorRadius());
 800e7b8:	6823      	ldr	r3, [r4, #0]
 800e7ba:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
        return _x;
 800e7be:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 800e7c2:	b2b6      	uxth	r6, r6
 800e7c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	4798      	blx	r3
 800e7cc:	1a31      	subs	r1, r6, r0
 800e7ce:	b209      	sxth	r1, r1
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	47b8      	blx	r7
        return _type;
 800e7d4:	792b      	ldrb	r3, [r5, #4]
        {
            updateIndicatorPosition(evt.getY() - getIndicatorRadius());
        }

        // Communicate the stop value if a listener is registered
        if ((evt.getType() == ClickEvent::RELEASED) && (stopValueCallback != 0) && stopValueCallback->isValid())
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d017      	beq.n	800e80a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x76>
        {
            stopValueCallback->execute(*this, currentValue);
        }
    }
}
 800e7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            startValueCallback->execute(*this, currentValue);
 800e7dc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800e7e0:	6803      	ldr	r3, [r0, #0]
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4798      	blx	r3
 800e7ea:	e7e2      	b.n	800e7b2 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x1e>
            updateIndicatorPosition(evt.getY() - getIndicatorRadius());
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
        return _y;
 800e7f2:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 800e7f6:	b2b6      	uxth	r6, r6
 800e7f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	4798      	blx	r3
 800e800:	1a31      	subs	r1, r6, r0
 800e802:	b209      	sxth	r1, r1
 800e804:	4620      	mov	r0, r4
 800e806:	47b8      	blx	r7
 800e808:	e7e4      	b.n	800e7d4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x40>
        if ((evt.getType() == ClickEvent::RELEASED) && (stopValueCallback != 0) && stopValueCallback->isValid())
 800e80a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 800e80e:	2800      	cmp	r0, #0
 800e810:	d0e3      	beq.n	800e7da <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x46>
 800e812:	6803      	ldr	r3, [r0, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	4798      	blx	r3
 800e818:	2800      	cmp	r0, #0
 800e81a:	d0de      	beq.n	800e7da <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x46>
            stopValueCallback->execute(*this, currentValue);
 800e81c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 800e820:	6803      	ldr	r3, [r0, #0]
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e826:	4621      	mov	r1, r4
 800e828:	4798      	blx	r3
}
 800e82a:	e7d6      	b.n	800e7da <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x46>

0800e82c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:

void Slider::handleDragEvent(const DragEvent& evt)
{
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	4604      	mov	r4, r0
    if (sliderOrientation == HORIZONTAL)
 800e830:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e834:	b16b      	cbz	r3, 800e852 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
    {
        updateIndicatorPosition(evt.getNewX() - getIndicatorRadius());
    }
    else
    {
        updateIndicatorPosition(evt.getNewY() - getIndicatorRadius());
 800e836:	6803      	ldr	r3, [r0, #0]
 800e838:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
        return _newY;
 800e83c:	f9b1 500c 	ldrsh.w	r5, [r1, #12]
 800e840:	b2ad      	uxth	r5, r5
 800e842:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e846:	4798      	blx	r3
 800e848:	1a29      	subs	r1, r5, r0
 800e84a:	b209      	sxth	r1, r1
 800e84c:	4620      	mov	r0, r4
 800e84e:	47b0      	blx	r6
    }
}
 800e850:	bd70      	pop	{r4, r5, r6, pc}
        updateIndicatorPosition(evt.getNewX() - getIndicatorRadius());
 800e852:	6803      	ldr	r3, [r0, #0]
 800e854:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
        return _newX;
 800e858:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 800e85c:	b2ad      	uxth	r5, r5
 800e85e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e862:	4798      	blx	r3
 800e864:	1a29      	subs	r1, r5, r0
 800e866:	b209      	sxth	r1, r1
 800e868:	4620      	mov	r0, r4
 800e86a:	47b0      	blx	r6
 800e86c:	e7f0      	b.n	800e850 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x24>

0800e86e <_ZNK8touchgfx6Slider15valueToPositionEi>:

int16_t Slider::valueToPosition(int value) const
{
 800e86e:	b538      	push	{r3, r4, r5, lr}
 800e870:	4605      	mov	r5, r0
    value = MAX(MIN(valueRangeMax, value), valueRangeMin);
 800e872:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e874:	428b      	cmp	r3, r1
 800e876:	da00      	bge.n	800e87a <_ZNK8touchgfx6Slider15valueToPositionEi+0xc>
 800e878:	4619      	mov	r1, r3
 800e87a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800e87c:	428c      	cmp	r4, r1
 800e87e:	db00      	blt.n	800e882 <_ZNK8touchgfx6Slider15valueToPositionEi+0x14>
 800e880:	4621      	mov	r1, r4

    int coordinateOffset = ((value - valueRangeMin) * (getIndicatorPositionRangeSize() + 1)) / getValueRangeSize();
 800e882:	1b0c      	subs	r4, r1, r4
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e88a:	4628      	mov	r0, r5
 800e88c:	4798      	blx	r3
 800e88e:	fb00 4404 	mla	r4, r0, r4, r4
 800e892:	682b      	ldr	r3, [r5, #0]
 800e894:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e898:	4628      	mov	r0, r5
 800e89a:	4798      	blx	r3
 800e89c:	fb94 f0f0 	sdiv	r0, r4, r0

    int result = indicatorMinPosition + coordinateOffset;
 800e8a0:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 800e8a4:	4418      	add	r0, r3

    if (sliderOrientation == VERTICAL)
 800e8a6:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800e8aa:	2a01      	cmp	r2, #1
 800e8ac:	d001      	beq.n	800e8b2 <_ZNK8touchgfx6Slider15valueToPositionEi+0x44>
        // Vertical slider grows as the position decreases so invert the coordinate
        result = indicatorMinPosition + (indicatorMaxPosition - result);
    }

    return result;
}
 800e8ae:	b200      	sxth	r0, r0
 800e8b0:	bd38      	pop	{r3, r4, r5, pc}
        result = indicatorMinPosition + (indicatorMaxPosition - result);
 800e8b2:	f9b5 40ee 	ldrsh.w	r4, [r5, #238]	; 0xee
 800e8b6:	1a20      	subs	r0, r4, r0
 800e8b8:	4418      	add	r0, r3
 800e8ba:	e7f8      	b.n	800e8ae <_ZNK8touchgfx6Slider15valueToPositionEi+0x40>

0800e8bc <_ZNK8touchgfx6Slider15positionToValueEs>:

int Slider::positionToValue(int16_t position) const
{
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	4604      	mov	r4, r0
    int result;

    if (position == indicatorMinPosition)
 800e8c0:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 800e8c4:	428b      	cmp	r3, r1
 800e8c6:	d023      	beq.n	800e910 <_ZNK8touchgfx6Slider15positionToValueEs+0x54>
 800e8c8:	460d      	mov	r5, r1
    {
        // Ensure that min coordinate always results in min value
        result = valueRangeMin;
    }
    else if (position == indicatorMaxPosition)
 800e8ca:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 800e8ce:	428b      	cmp	r3, r1
 800e8d0:	d020      	beq.n	800e914 <_ZNK8touchgfx6Slider15positionToValueEs+0x58>
        // Ensure that max coordinate always results in max value
        result = valueRangeMax;
    }
    else
    {
        int rounding = getIndicatorPositionRangeSize() / 2;
 800e8d2:	6803      	ldr	r3, [r0, #0]
 800e8d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e8d8:	4798      	blx	r3
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	db1c      	blt.n	800e918 <_ZNK8touchgfx6Slider15positionToValueEs+0x5c>
 800e8de:	1046      	asrs	r6, r0, #1
        int valueOffset = (((position - indicatorMinPosition) * getValueRangeSize()) + rounding) / getIndicatorPositionRangeSize();
 800e8e0:	f9b4 00ec 	ldrsh.w	r0, [r4, #236]	; 0xec
 800e8e4:	1a2d      	subs	r5, r5, r0
 800e8e6:	6823      	ldr	r3, [r4, #0]
 800e8e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	4798      	blx	r3
 800e8f0:	fb00 6505 	mla	r5, r0, r5, r6
 800e8f4:	6823      	ldr	r3, [r4, #0]
 800e8f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	4798      	blx	r3
 800e8fe:	fb95 f0f0 	sdiv	r0, r5, r0

        result = valueRangeMin + valueOffset;
 800e902:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800e904:	4428      	add	r0, r5
    }

    if (sliderOrientation == VERTICAL)
 800e906:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d006      	beq.n	800e91c <_ZNK8touchgfx6Slider15positionToValueEs+0x60>
        // Vertical slider grows as the position decreases so invert the value
        result = valueRangeMin + (valueRangeMax - result);
    }

    return result;
}
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
        result = valueRangeMin;
 800e910:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e912:	e7f8      	b.n	800e906 <_ZNK8touchgfx6Slider15positionToValueEs+0x4a>
        result = valueRangeMax;
 800e914:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e916:	e7f6      	b.n	800e906 <_ZNK8touchgfx6Slider15positionToValueEs+0x4a>
        int rounding = getIndicatorPositionRangeSize() / 2;
 800e918:	3001      	adds	r0, #1
 800e91a:	e7e0      	b.n	800e8de <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
        result = valueRangeMin + (valueRangeMax - result);
 800e91c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e91e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e920:	1a28      	subs	r0, r5, r0
 800e922:	4418      	add	r0, r3
    return result;
 800e924:	e7f3      	b.n	800e90e <_ZNK8touchgfx6Slider15positionToValueEs+0x52>

0800e926 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:

uint16_t Slider::getIndicatorRadius() const
{
    uint16_t result;

    if (sliderOrientation == HORIZONTAL)
 800e926:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e92a:	b133      	cbz	r3, 800e93a <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
        return rect.height;
 800e92c:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
    {
        result = indicator.getWidth() / 2;
    }
    else
    {
        result = indicator.getHeight() / 2;
 800e930:	2800      	cmp	r0, #0
 800e932:	db0b      	blt.n	800e94c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x26>
 800e934:	f3c0 004f 	ubfx	r0, r0, #1, #16
    }

    return result;
}
 800e938:	4770      	bx	lr
        return rect.width;
 800e93a:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
        result = indicator.getWidth() / 2;
 800e93e:	2800      	cmp	r0, #0
 800e940:	db02      	blt.n	800e948 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x22>
 800e942:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800e946:	4770      	bx	lr
 800e948:	3001      	adds	r0, #1
 800e94a:	e7fa      	b.n	800e942 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x1c>
        result = indicator.getHeight() / 2;
 800e94c:	3001      	adds	r0, #1
 800e94e:	e7f1      	b.n	800e934 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xe>

0800e950 <_ZN8touchgfx6Slider13setValueRangeEii>:

    setValue(newValue);
}

void Slider::setValueRange(int minValue, int maxValue)
{
 800e950:	b510      	push	{r4, lr}
    int newValue = currentValue;
 800e952:	6b03      	ldr	r3, [r0, #48]	; 0x30

    if (currentValue < minValue)
 800e954:	428b      	cmp	r3, r1
 800e956:	db03      	blt.n	800e960 <_ZN8touchgfx6Slider13setValueRangeEii+0x10>
    {
        newValue = minValue;
    }
    else if (currentValue > maxValue)
 800e958:	4293      	cmp	r3, r2
 800e95a:	dd02      	ble.n	800e962 <_ZN8touchgfx6Slider13setValueRangeEii+0x12>
    {
        newValue = maxValue;
 800e95c:	4613      	mov	r3, r2
 800e95e:	e000      	b.n	800e962 <_ZN8touchgfx6Slider13setValueRangeEii+0x12>
        newValue = minValue;
 800e960:	460b      	mov	r3, r1
    }

    setValueRange(minValue, maxValue, newValue);
 800e962:	6804      	ldr	r4, [r0, #0]
 800e964:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
 800e968:	47a0      	blx	r4
}
 800e96a:	bd10      	pop	{r4, pc}

0800e96c <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:

int Slider::getIndicatorPositionRangeSize() const
{
    return indicatorMaxPosition - indicatorMinPosition;
 800e96c:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 800e970:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
}
 800e974:	1a10      	subs	r0, r2, r0
 800e976:	4770      	bx	lr

0800e978 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:

int Slider::getValueRangeSize() const
{
    return valueRangeMax - valueRangeMin;
 800e978:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800e97a:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800e97c:	1a10      	subs	r0, r2, r0
 800e97e:	4770      	bx	lr

0800e980 <_ZN8touchgfx6SliderD0Ev>:
Slider::~Slider()
 800e980:	b510      	push	{r4, lr}
 800e982:	4604      	mov	r4, r0
}
 800e984:	21fc      	movs	r1, #252	; 0xfc
 800e986:	f014 f8bb 	bl	8022b00 <_ZdlPvj>
 800e98a:	4620      	mov	r0, r4
 800e98c:	bd10      	pop	{r4, pc}
	...

0800e990 <_ZN8touchgfx6Slider13setValueRangeEiii>:
{
 800e990:	b508      	push	{r3, lr}
    assert(minValue < maxValue && "Slider::setValueRange - minValue must be smaller than maxValue");
 800e992:	4291      	cmp	r1, r2
 800e994:	da07      	bge.n	800e9a6 <_ZN8touchgfx6Slider13setValueRangeEiii+0x16>
    valueRangeMin = minValue;
 800e996:	6341      	str	r1, [r0, #52]	; 0x34
    valueRangeMax = maxValue;
 800e998:	6382      	str	r2, [r0, #56]	; 0x38
    setValue(newValue);
 800e99a:	6802      	ldr	r2, [r0, #0]
 800e99c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4790      	blx	r2
}
 800e9a4:	bd08      	pop	{r3, pc}
    assert(minValue < maxValue && "Slider::setValueRange - minValue must be smaller than maxValue");
 800e9a6:	4b03      	ldr	r3, [pc, #12]	; (800e9b4 <_ZN8touchgfx6Slider13setValueRangeEiii+0x24>)
 800e9a8:	4a03      	ldr	r2, [pc, #12]	; (800e9b8 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 800e9aa:	f240 110b 	movw	r1, #267	; 0x10b
 800e9ae:	4803      	ldr	r0, [pc, #12]	; (800e9bc <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 800e9b0:	f014 f8c2 	bl	8022b38 <__assert_func>
 800e9b4:	08023ea0 	.word	0x08023ea0
 800e9b8:	08024170 	.word	0x08024170
 800e9bc:	08023ef8 	.word	0x08023ef8

0800e9c0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
{
 800e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c4:	b083      	sub	sp, #12
 800e9c6:	9200      	str	r2, [sp, #0]
 800e9c8:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800e9cc:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
    assert(indicatorMinX < indicatorMaxX && "Slider::setupHorizontalSlider - indicatorMinX must be smaller than indicatorMaxX");
 800e9d0:	45b0      	cmp	r8, r6
 800e9d2:	d267      	bcs.n	800eaa4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xe4>
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	468a      	mov	sl, r1
 800e9d8:	4699      	mov	r9, r3
    sliderOrientation = HORIZONTAL;
 800e9da:	2700      	movs	r7, #0
 800e9dc:	f880 702c 	strb.w	r7, [r0, #44]	; 0x2c
    background.setXY(backgroundX, backgroundY);
 800e9e0:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 800e9e4:	b20d      	sxth	r5, r1
 800e9e6:	f9bd b000 	ldrsh.w	fp, [sp]
        setX(x);
 800e9ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	9201      	str	r2, [sp, #4]
 800e9f2:	4610      	mov	r0, r2
 800e9f4:	4798      	blx	r3
        setY(y);
 800e9f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9fa:	4659      	mov	r1, fp
 800e9fc:	9801      	ldr	r0, [sp, #4]
 800e9fe:	4798      	blx	r3
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 800ea00:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
        setX(x);
 800ea04:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800ea08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	4615      	mov	r5, r2
 800ea0e:	4610      	mov	r0, r2
 800ea10:	4798      	blx	r3
        setY(y);
 800ea12:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800ea16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea18:	4659      	mov	r1, fp
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	4798      	blx	r3
    backgroundSelected.setXY(0, 0);
 800ea1e:	f104 0568 	add.w	r5, r4, #104	; 0x68
        setX(x);
 800ea22:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ea24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea26:	4639      	mov	r1, r7
 800ea28:	4628      	mov	r0, r5
 800ea2a:	4798      	blx	r3
        setY(y);
 800ea2c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ea2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea30:	4639      	mov	r1, r7
 800ea32:	4628      	mov	r0, r5
 800ea34:	4798      	blx	r3
        rect.y = y;
 800ea36:	f8a4 909a 	strh.w	r9, [r4, #154]	; 0x9a
        return rect.width;
 800ea3a:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 800ea3e:	fa1a fa81 	uxtah	sl, sl, r1
 800ea42:	fa1f fa8a 	uxth.w	sl, sl
 800ea46:	f9b4 109c 	ldrsh.w	r1, [r4, #156]	; 0x9c
    uint16_t indicatorWidth = indicatorMaxX + static_cast<uint16_t>(indicator.getWidth());
 800ea4a:	fa16 f181 	uxtah	r1, r6, r1
 800ea4e:	b289      	uxth	r1, r1
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800ea50:	458a      	cmp	sl, r1
 800ea52:	d92d      	bls.n	800eab0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf0>
 800ea54:	fa0f f18a 	sxth.w	r1, sl
        return rect.height;
 800ea58:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	; 0x46
    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 800ea5c:	9b00      	ldr	r3, [sp, #0]
 800ea5e:	fa13 f282 	uxtah	r2, r3, r2
 800ea62:	b292      	uxth	r2, r2
 800ea64:	f9b4 309e 	ldrsh.w	r3, [r4, #158]	; 0x9e
    uint16_t indicatorHeight = indicatorY + static_cast<uint16_t>(indicator.getHeight());
 800ea68:	fa19 f983 	uxtah	r9, r9, r3
 800ea6c:	fa1f f989 	uxth.w	r9, r9
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800ea70:	454a      	cmp	r2, r9
 800ea72:	d81f      	bhi.n	800eab4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf4>
 800ea74:	fa0f f989 	sxth.w	r9, r9
    indicatorMinPosition = indicatorMinX;
 800ea78:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxX;
 800ea7c:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
    setWidth(newWidth);
 800ea80:	6823      	ldr	r3, [r4, #0]
 800ea82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea84:	4620      	mov	r0, r4
 800ea86:	4798      	blx	r3
    setHeight(newHeight);
 800ea88:	6823      	ldr	r3, [r4, #0]
 800ea8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea8c:	4649      	mov	r1, r9
 800ea8e:	4620      	mov	r0, r4
 800ea90:	4798      	blx	r3
    setValue(currentValue);
 800ea92:	6823      	ldr	r3, [r4, #0]
 800ea94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ea98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	4798      	blx	r3
}
 800ea9e:	b003      	add	sp, #12
 800eaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(indicatorMinX < indicatorMaxX && "Slider::setupHorizontalSlider - indicatorMinX must be smaller than indicatorMaxX");
 800eaa4:	4b05      	ldr	r3, [pc, #20]	; (800eabc <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xfc>)
 800eaa6:	4a06      	ldr	r2, [pc, #24]	; (800eac0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x100>)
 800eaa8:	2147      	movs	r1, #71	; 0x47
 800eaaa:	4806      	ldr	r0, [pc, #24]	; (800eac4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x104>)
 800eaac:	f014 f844 	bl	8022b38 <__assert_func>
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800eab0:	b209      	sxth	r1, r1
 800eab2:	e7d1      	b.n	800ea58 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x98>
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800eab4:	fa0f f982 	sxth.w	r9, r2
 800eab8:	e7de      	b.n	800ea78 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>
 800eaba:	bf00      	nop
 800eabc:	08023fc0 	.word	0x08023fc0
 800eac0:	08024214 	.word	0x08024214
 800eac4:	08023ef8 	.word	0x08023ef8

0800eac8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
{
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	b083      	sub	sp, #12
 800eace:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800ead2:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
    assert(indicatorMinY < indicatorMaxY && "Slider::setupVerticalSlider - indicatorMinY must be smaller than indicatorMaxY");
 800ead6:	42ae      	cmp	r6, r5
 800ead8:	d259      	bcs.n	800eb8e <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xc6>
 800eada:	4604      	mov	r4, r0
 800eadc:	4689      	mov	r9, r1
 800eade:	4617      	mov	r7, r2
 800eae0:	4698      	mov	r8, r3
    sliderOrientation = VERTICAL;
 800eae2:	2301      	movs	r3, #1
 800eae4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    background.setXY(backgroundX, backgroundY);
 800eae8:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 800eaec:	fa0f fa81 	sxth.w	sl, r1
 800eaf0:	fa0f fb87 	sxth.w	fp, r7
        setX(x);
 800eaf4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800eaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf8:	4651      	mov	r1, sl
 800eafa:	9201      	str	r2, [sp, #4]
 800eafc:	4610      	mov	r0, r2
 800eafe:	4798      	blx	r3
        setY(y);
 800eb00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb04:	4659      	mov	r1, fp
 800eb06:	9801      	ldr	r0, [sp, #4]
 800eb08:	4798      	blx	r3
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 800eb0a:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
        setX(x);
 800eb0e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800eb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb14:	4651      	mov	r1, sl
 800eb16:	4692      	mov	sl, r2
 800eb18:	4610      	mov	r0, r2
 800eb1a:	4798      	blx	r3
        setY(y);
 800eb1c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800eb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb22:	4659      	mov	r1, fp
 800eb24:	4650      	mov	r0, sl
 800eb26:	4798      	blx	r3
        rect.x = x;
 800eb28:	f8a4 8098 	strh.w	r8, [r4, #152]	; 0x98
        return rect.width;
 800eb2c:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 800eb30:	fa19 f181 	uxtah	r1, r9, r1
 800eb34:	b289      	uxth	r1, r1
 800eb36:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
    uint16_t indicatorWidth = indicatorX + static_cast<uint16_t>(indicator.getWidth());
 800eb3a:	fa18 f883 	uxtah	r8, r8, r3
 800eb3e:	fa1f f888 	uxth.w	r8, r8
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800eb42:	4541      	cmp	r1, r8
 800eb44:	d929      	bls.n	800eb9a <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xd2>
 800eb46:	b209      	sxth	r1, r1
        return rect.height;
 800eb48:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 800eb4c:	fa17 f783 	uxtah	r7, r7, r3
 800eb50:	b2bf      	uxth	r7, r7
 800eb52:	f9b4 309e 	ldrsh.w	r3, [r4, #158]	; 0x9e
    uint16_t indicatorHeight = indicatorMaxY + static_cast<uint16_t>(indicator.getHeight());
 800eb56:	fa15 f383 	uxtah	r3, r5, r3
 800eb5a:	b29b      	uxth	r3, r3
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800eb5c:	429f      	cmp	r7, r3
 800eb5e:	d81f      	bhi.n	800eba0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xd8>
 800eb60:	b21f      	sxth	r7, r3
    indicatorMinPosition = indicatorMinY;
 800eb62:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxY;
 800eb66:	f8a4 50ee 	strh.w	r5, [r4, #238]	; 0xee
    setWidth(newWidth);
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6e:	4620      	mov	r0, r4
 800eb70:	4798      	blx	r3
    setHeight(newHeight);
 800eb72:	6823      	ldr	r3, [r4, #0]
 800eb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb76:	4639      	mov	r1, r7
 800eb78:	4620      	mov	r0, r4
 800eb7a:	4798      	blx	r3
    setValue(currentValue);
 800eb7c:	6823      	ldr	r3, [r4, #0]
 800eb7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eb82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eb84:	4620      	mov	r0, r4
 800eb86:	4798      	blx	r3
}
 800eb88:	b003      	add	sp, #12
 800eb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(indicatorMinY < indicatorMaxY && "Slider::setupVerticalSlider - indicatorMinY must be smaller than indicatorMaxY");
 800eb8e:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xdc>)
 800eb90:	4a05      	ldr	r2, [pc, #20]	; (800eba8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe0>)
 800eb92:	2163      	movs	r1, #99	; 0x63
 800eb94:	4805      	ldr	r0, [pc, #20]	; (800ebac <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe4>)
 800eb96:	f013 ffcf 	bl	8022b38 <__assert_func>
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800eb9a:	fa0f f188 	sxth.w	r1, r8
 800eb9e:	e7d3      	b.n	800eb48 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x80>
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800eba0:	b23f      	sxth	r7, r7
 800eba2:	e7de      	b.n	800eb62 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x9a>
 800eba4:	08023f4c 	.word	0x08023f4c
 800eba8:	080241ac 	.word	0x080241ac
 800ebac:	08023ef8 	.word	0x08023ef8

0800ebb0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
{
 800ebb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb4:	4604      	mov	r4, r0
    position = MIN(MAX(position, indicatorMinPosition), indicatorMaxPosition);
 800ebb6:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 800ebba:	461a      	mov	r2, r3
 800ebbc:	428b      	cmp	r3, r1
 800ebbe:	bfb8      	it	lt
 800ebc0:	460a      	movlt	r2, r1
 800ebc2:	f9b0 60ee 	ldrsh.w	r6, [r0, #238]	; 0xee
 800ebc6:	42b2      	cmp	r2, r6
 800ebc8:	da02      	bge.n	800ebd0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x20>
 800ebca:	428b      	cmp	r3, r1
 800ebcc:	da36      	bge.n	800ec3c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 800ebce:	460e      	mov	r6, r1
    if (sliderOrientation == HORIZONTAL)
 800ebd0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d133      	bne.n	800ec40 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x90>
        moveRelative(x - rect.x, y - rect.y);
 800ebd8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800ebdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebde:	b2b5      	uxth	r5, r6
 800ebe0:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 800ebe4:	1a69      	subs	r1, r5, r1
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	b209      	sxth	r1, r1
 800ebea:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800ebee:	4798      	blx	r3
        backgroundSelectedViewPort.invalidate();
 800ebf0:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 800ebf4:	4638      	mov	r0, r7
 800ebf6:	f010 fa86 	bl	801f106 <_ZNK8touchgfx8Drawable10invalidateEv>
        return rect.x;
 800ebfa:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
        backgroundSelectedViewPort.setWidth((position - backgroundSelectedViewPort.getX()) + getIndicatorRadius());
 800ebfe:	b280      	uxth	r0, r0
 800ec00:	1a2d      	subs	r5, r5, r0
 800ec02:	b2ad      	uxth	r5, r5
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	4798      	blx	r3
 800ec0e:	4405      	add	r5, r0
        rect.width = width;
 800ec10:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
        backgroundSelectedViewPort.invalidate();
 800ec14:	4638      	mov	r0, r7
 800ec16:	f010 fa76 	bl	801f106 <_ZNK8touchgfx8Drawable10invalidateEv>
    currentValue = positionToValue(position);
 800ec1a:	6823      	ldr	r3, [r4, #0]
 800ec1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ec20:	4631      	mov	r1, r6
 800ec22:	4620      	mov	r0, r4
 800ec24:	4798      	blx	r3
 800ec26:	6320      	str	r0, [r4, #48]	; 0x30
    if ((newValueCallback != 0) && newValueCallback->isValid())
 800ec28:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 800ec2c:	b120      	cbz	r0, 800ec38 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x88>
 800ec2e:	6803      	ldr	r3, [r0, #0]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	4798      	blx	r3
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d14e      	bne.n	800ecd6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x126>
}
 800ec38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    position = MIN(MAX(position, indicatorMinPosition), indicatorMaxPosition);
 800ec3c:	461e      	mov	r6, r3
 800ec3e:	e7c7      	b.n	800ebd0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x20>
        moveRelative(x - rect.x, y - rect.y);
 800ec40:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800ec44:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800ec46:	b2b2      	uxth	r2, r6
 800ec48:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 800ec4c:	4690      	mov	r8, r2
 800ec4e:	1ad2      	subs	r2, r2, r3
 800ec50:	b212      	sxth	r2, r2
 800ec52:	2100      	movs	r1, #0
 800ec54:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800ec58:	47a8      	blx	r5
        backgroundSelectedViewPort.invalidate();
 800ec5a:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 800ec5e:	4638      	mov	r0, r7
 800ec60:	f010 fa51 	bl	801f106 <_ZNK8touchgfx8Drawable10invalidateEv>
        return y + height;
 800ec64:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
 800ec68:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ec6c:	441d      	add	r5, r3
 800ec6e:	b2ad      	uxth	r5, r5
        int16_t newViewPortHeight = background.getRect().bottom() - (position + getIndicatorRadius());
 800ec70:	6823      	ldr	r3, [r4, #0]
 800ec72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ec76:	4620      	mov	r0, r4
 800ec78:	4798      	blx	r3
 800ec7a:	4440      	add	r0, r8
 800ec7c:	b280      	uxth	r0, r0
 800ec7e:	1a2d      	subs	r5, r5, r0
 800ec80:	b2ad      	uxth	r5, r5
 800ec82:	fa0f f985 	sxth.w	r9, r5
        return rect.x;
 800ec86:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
        backgroundSelectedViewPort.setPosition(backgroundSelectedViewPort.getX(), position + getIndicatorRadius(), backgroundSelectedViewPort.getWidth(), newViewPortHeight);
 800ec8a:	6823      	ldr	r3, [r4, #0]
 800ec8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ec90:	4620      	mov	r0, r4
 800ec92:	4798      	blx	r3
 800ec94:	eb00 0208 	add.w	r2, r0, r8
        return rect.width;
 800ec98:	f9b4 80c8 	ldrsh.w	r8, [r4, #200]	; 0xc8
        setXY(x, y);
 800ec9c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800eca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca2:	b212      	sxth	r2, r2
 800eca4:	4651      	mov	r1, sl
 800eca6:	4638      	mov	r0, r7
 800eca8:	4798      	blx	r3
        setWidth(width);
 800ecaa:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800ecae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecb0:	4641      	mov	r1, r8
 800ecb2:	4638      	mov	r0, r7
 800ecb4:	4798      	blx	r3
        setHeight(height);
 800ecb6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800ecba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecbc:	4649      	mov	r1, r9
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	4798      	blx	r3
        return rect.height;
 800ecc2:	f9b4 3072 	ldrsh.w	r3, [r4, #114]	; 0x72
        backgroundSelected.setY(-(backgroundSelected.getHeight() - newViewPortHeight));
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	1aed      	subs	r5, r5, r3
        rect.y = y;
 800ecca:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
        backgroundSelectedViewPort.invalidate();
 800ecce:	4638      	mov	r0, r7
 800ecd0:	f010 fa19 	bl	801f106 <_ZNK8touchgfx8Drawable10invalidateEv>
 800ecd4:	e7a1      	b.n	800ec1a <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x6a>
        newValueCallback->execute(*this, currentValue);
 800ecd6:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 800ecda:	6803      	ldr	r3, [r0, #0]
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ece0:	4621      	mov	r1, r4
 800ece2:	4798      	blx	r3
}
 800ece4:	e7a8      	b.n	800ec38 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x88>
	...

0800ece8 <_ZN8touchgfx6SliderC1Ev>:
Slider::Slider() :
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	b085      	sub	sp, #20
 800ecee:	4605      	mov	r5, r0
        this->x = x;
 800ecf0:	2400      	movs	r4, #0
 800ecf2:	8084      	strh	r4, [r0, #4]
        this->y = y;
 800ecf4:	80c4      	strh	r4, [r0, #6]
        this->width = width;
 800ecf6:	8104      	strh	r4, [r0, #8]
        this->height = height;
 800ecf8:	8144      	strh	r4, [r0, #10]
        this->x = 0;
 800ecfa:	8184      	strh	r4, [r0, #12]
        this->y = 0;
 800ecfc:	81c4      	strh	r4, [r0, #14]
        this->width = 0;
 800ecfe:	8204      	strh	r4, [r0, #16]
        this->height = 0;
 800ed00:	8244      	strh	r4, [r0, #18]
        visible(true)
 800ed02:	6144      	str	r4, [r0, #20]
 800ed04:	6184      	str	r4, [r0, #24]
 800ed06:	61c4      	str	r4, [r0, #28]
 800ed08:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800ed0c:	f04f 0a01 	mov.w	sl, #1
 800ed10:	f880 a025 	strb.w	sl, [r0, #37]	; 0x25
        firstChild(0)
 800ed14:	6284      	str	r4, [r0, #40]	; 0x28
    newValueCallback(0)
 800ed16:	4b5a      	ldr	r3, [pc, #360]	; (800ee80 <_ZN8touchgfx6SliderC1Ev+0x198>)
 800ed18:	6003      	str	r3, [r0, #0]
 800ed1a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
 800ed1e:	6304      	str	r4, [r0, #48]	; 0x30
 800ed20:	6344      	str	r4, [r0, #52]	; 0x34
 800ed22:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
 800ed26:	f100 073c 	add.w	r7, r0, #60	; 0x3c
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800ed2a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800ed2e:	a904      	add	r1, sp, #16
 800ed30:	f821 9d0c 	strh.w	r9, [r1, #-12]!
        this->x = x;
 800ed34:	80bc      	strh	r4, [r7, #4]
        this->y = y;
 800ed36:	80fc      	strh	r4, [r7, #6]
        this->width = width;
 800ed38:	813c      	strh	r4, [r7, #8]
        this->height = height;
 800ed3a:	817c      	strh	r4, [r7, #10]
        this->x = 0;
 800ed3c:	81bc      	strh	r4, [r7, #12]
        this->y = 0;
 800ed3e:	81fc      	strh	r4, [r7, #14]
        this->width = 0;
 800ed40:	823c      	strh	r4, [r7, #16]
        this->height = 0;
 800ed42:	827c      	strh	r4, [r7, #18]
 800ed44:	617c      	str	r4, [r7, #20]
 800ed46:	61bc      	str	r4, [r7, #24]
 800ed48:	61fc      	str	r4, [r7, #28]
 800ed4a:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 800ed4e:	f887 a025 	strb.w	sl, [r7, #37]	; 0x25
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800ed52:	f8df b134 	ldr.w	fp, [pc, #308]	; 800ee88 <_ZN8touchgfx6SliderC1Ev+0x1a0>
 800ed56:	f8c0 b03c 	str.w	fp, [r0, #60]	; 0x3c
 800ed5a:	f8a7 9026 	strh.w	r9, [r7, #38]	; 0x26
 800ed5e:	f887 9028 	strb.w	r9, [r7, #40]	; 0x28
    {
        setBitmap(bmp);
 800ed62:	4638      	mov	r0, r7
 800ed64:	f000 ffe2 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800ed68:	f105 0868 	add.w	r8, r5, #104	; 0x68
 800ed6c:	a904      	add	r1, sp, #16
 800ed6e:	f821 9d08 	strh.w	r9, [r1, #-8]!
        this->x = x;
 800ed72:	f8a8 4004 	strh.w	r4, [r8, #4]
        this->y = y;
 800ed76:	f8a8 4006 	strh.w	r4, [r8, #6]
        this->width = width;
 800ed7a:	f8a8 4008 	strh.w	r4, [r8, #8]
        this->height = height;
 800ed7e:	f8a8 400a 	strh.w	r4, [r8, #10]
        this->x = 0;
 800ed82:	f8a8 400c 	strh.w	r4, [r8, #12]
        this->y = 0;
 800ed86:	f8a8 400e 	strh.w	r4, [r8, #14]
        this->width = 0;
 800ed8a:	f8a8 4010 	strh.w	r4, [r8, #16]
        this->height = 0;
 800ed8e:	f8a8 4012 	strh.w	r4, [r8, #18]
 800ed92:	f8c8 4014 	str.w	r4, [r8, #20]
 800ed96:	f8c8 4018 	str.w	r4, [r8, #24]
 800ed9a:	f8c8 401c 	str.w	r4, [r8, #28]
 800ed9e:	f888 4024 	strb.w	r4, [r8, #36]	; 0x24
 800eda2:	f888 a025 	strb.w	sl, [r8, #37]	; 0x25
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800eda6:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
 800edaa:	f8a8 9026 	strh.w	r9, [r8, #38]	; 0x26
 800edae:	f888 9028 	strb.w	r9, [r8, #40]	; 0x28
        setBitmap(bmp);
 800edb2:	4640      	mov	r0, r8
 800edb4:	f000 ffba 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800edb8:	f105 0694 	add.w	r6, r5, #148	; 0x94
 800edbc:	a904      	add	r1, sp, #16
 800edbe:	f821 9d04 	strh.w	r9, [r1, #-4]!
        this->x = x;
 800edc2:	80b4      	strh	r4, [r6, #4]
        this->y = y;
 800edc4:	80f4      	strh	r4, [r6, #6]
        this->width = width;
 800edc6:	8134      	strh	r4, [r6, #8]
        this->height = height;
 800edc8:	8174      	strh	r4, [r6, #10]
        this->x = 0;
 800edca:	81b4      	strh	r4, [r6, #12]
        this->y = 0;
 800edcc:	81f4      	strh	r4, [r6, #14]
        this->width = 0;
 800edce:	8234      	strh	r4, [r6, #16]
        this->height = 0;
 800edd0:	8274      	strh	r4, [r6, #18]
 800edd2:	6174      	str	r4, [r6, #20]
 800edd4:	61b4      	str	r4, [r6, #24]
 800edd6:	61f4      	str	r4, [r6, #28]
 800edd8:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 800eddc:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800ede0:	f8c5 b094 	str.w	fp, [r5, #148]	; 0x94
 800ede4:	f8a6 9026 	strh.w	r9, [r6, #38]	; 0x26
 800ede8:	f886 9028 	strb.w	r9, [r6, #40]	; 0x28
        setBitmap(bmp);
 800edec:	4630      	mov	r0, r6
 800edee:	f000 ff9d 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800edf2:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
        this->x = x;
 800edf6:	f8a5 40c4 	strh.w	r4, [r5, #196]	; 0xc4
        this->y = y;
 800edfa:	f8a5 40c6 	strh.w	r4, [r5, #198]	; 0xc6
        this->width = width;
 800edfe:	f8a5 40c8 	strh.w	r4, [r5, #200]	; 0xc8
        this->height = height;
 800ee02:	f8a5 40ca 	strh.w	r4, [r5, #202]	; 0xca
        this->x = 0;
 800ee06:	f8a5 40cc 	strh.w	r4, [r5, #204]	; 0xcc
        this->y = 0;
 800ee0a:	f8a5 40ce 	strh.w	r4, [r5, #206]	; 0xce
        this->width = 0;
 800ee0e:	f8a5 40d0 	strh.w	r4, [r5, #208]	; 0xd0
        this->height = 0;
 800ee12:	f8a5 40d2 	strh.w	r4, [r5, #210]	; 0xd2
 800ee16:	f8c5 40d4 	str.w	r4, [r5, #212]	; 0xd4
 800ee1a:	f8c5 40d8 	str.w	r4, [r5, #216]	; 0xd8
 800ee1e:	f8c5 40dc 	str.w	r4, [r5, #220]	; 0xdc
 800ee22:	f885 40e4 	strb.w	r4, [r5, #228]	; 0xe4
 800ee26:	f885 a0e5 	strb.w	sl, [r5, #229]	; 0xe5
 800ee2a:	4b16      	ldr	r3, [pc, #88]	; (800ee84 <_ZN8touchgfx6SliderC1Ev+0x19c>)
 800ee2c:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800ee30:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
 800ee34:	f8a5 40ec 	strh.w	r4, [r5, #236]	; 0xec
 800ee38:	f8a5 a0ee 	strh.w	sl, [r5, #238]	; 0xee
 800ee3c:	f8c5 40f0 	str.w	r4, [r5, #240]	; 0xf0
 800ee40:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
 800ee44:	f8c5 40f8 	str.w	r4, [r5, #248]	; 0xf8
        touchable = touch;
 800ee48:	f885 a024 	strb.w	sl, [r5, #36]	; 0x24
    backgroundSelectedViewPort.add(backgroundSelected);
 800ee4c:	4641      	mov	r1, r8
 800ee4e:	4648      	mov	r0, r9
 800ee50:	f7ff fbaa 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(background);
 800ee54:	4639      	mov	r1, r7
 800ee56:	4628      	mov	r0, r5
 800ee58:	f7ff fba6 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(backgroundSelectedViewPort);
 800ee5c:	4649      	mov	r1, r9
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f7ff fba2 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(indicator);
 800ee64:	4631      	mov	r1, r6
 800ee66:	4628      	mov	r0, r5
 800ee68:	f7ff fb9e 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    setValueRange(0, 100);
 800ee6c:	2264      	movs	r2, #100	; 0x64
 800ee6e:	4621      	mov	r1, r4
 800ee70:	4628      	mov	r0, r5
 800ee72:	f7ff fd6d 	bl	800e950 <_ZN8touchgfx6Slider13setValueRangeEii>
}
 800ee76:	4628      	mov	r0, r5
 800ee78:	b005      	add	sp, #20
 800ee7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee7e:	bf00      	nop
 800ee80:	0802403c 	.word	0x0802403c
 800ee84:	08023cd4 	.word	0x08023cd4
 800ee88:	08024914 	.word	0x08024914

0800ee8c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
{
 800ee8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee90:	4604      	mov	r4, r0
 800ee92:	460e      	mov	r6, r1
 800ee94:	4615      	mov	r5, r2
 800ee96:	4698      	mov	r8, r3
    assert(sliderBackground.getWidth() == sliderBackgroundSelected.getWidth() &&
 800ee98:	4608      	mov	r0, r1
 800ee9a:	f011 fd01 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ee9e:	4607      	mov	r7, r0
 800eea0:	4628      	mov	r0, r5
 800eea2:	f011 fcfd 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eea6:	4287      	cmp	r7, r0
 800eea8:	d121      	bne.n	800eeee <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x62>
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f011 fd30 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f011 fd2c 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eeb8:	4287      	cmp	r7, r0
 800eeba:	d118      	bne.n	800eeee <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x62>
    background.setBitmap(sliderBackground);
 800eebc:	4631      	mov	r1, r6
 800eebe:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800eec2:	f000 ff33 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundSelected.setBitmap(sliderBackgroundSelected);
 800eec6:	4629      	mov	r1, r5
 800eec8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eecc:	f000 ff2e 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    indicator.setBitmap(indicatorBitmap);
 800eed0:	4641      	mov	r1, r8
 800eed2:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800eed6:	f000 ff29 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        return rect.width;
 800eeda:	f9b4 3070 	ldrsh.w	r3, [r4, #112]	; 0x70
        rect.width = width;
 800eede:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
        return rect.height;
 800eee2:	f9b4 3072 	ldrsh.w	r3, [r4, #114]	; 0x72
        rect.height = height;
 800eee6:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
}
 800eeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(sliderBackground.getWidth() == sliderBackgroundSelected.getWidth() &&
 800eeee:	4b03      	ldr	r3, [pc, #12]	; (800eefc <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 800eef0:	4a03      	ldr	r2, [pc, #12]	; (800ef00 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 800eef2:	2137      	movs	r1, #55	; 0x37
 800eef4:	4803      	ldr	r0, [pc, #12]	; (800ef04 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 800eef6:	f013 fe1f 	bl	8022b38 <__assert_func>
 800eefa:	bf00      	nop
 800eefc:	08023dc0 	.word	0x08023dc0
 800ef00:	08024100 	.word	0x08024100
 800ef04:	08023ef8 	.word	0x08023ef8

0800ef08 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ef08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef0c:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ef0e:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ef10:	8443      	strh	r3, [r0, #34]	; 0x22
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800ef12:	6813      	ldr	r3, [r2, #0]
 800ef14:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800ef16:	6010      	str	r0, [r2, #0]
    }
 800ef18:	4770      	bx	lr

0800ef1a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 800ef1a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800ef1e:	b11a      	cbz	r2, 800ef28 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 800ef20:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800ef24:	b102      	cbz	r2, 800ef28 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800ef26:	6018      	str	r0, [r3, #0]
        }
    }
 800ef28:	4770      	bx	lr

0800ef2a <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        this->x = x;
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	8002      	strh	r2, [r0, #0]
        this->y = y;
 800ef2e:	8042      	strh	r2, [r0, #2]
        this->width = width;
 800ef30:	8082      	strh	r2, [r0, #4]
        this->height = height;
 800ef32:	80c2      	strh	r2, [r0, #6]
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
    {
        return Rect(0, 0, 0, 0);
    }
 800ef34:	4770      	bx	lr

0800ef36 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800ef36:	b538      	push	{r3, r4, r5, lr}
 800ef38:	4604      	mov	r4, r0
 800ef3a:	4615      	mov	r5, r2
    {
        setX(x);
 800ef3c:	6803      	ldr	r3, [r0, #0]
 800ef3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef40:	4798      	blx	r3
        setBaselineY(baselineY);
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef46:	4629      	mov	r1, r5
 800ef48:	4620      	mov	r0, r4
 800ef4a:	4798      	blx	r3
    }
 800ef4c:	bd38      	pop	{r3, r4, r5, pc}

0800ef4e <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
    }
 800ef4e:	200e      	movs	r0, #14
 800ef50:	4770      	bx	lr

0800ef52 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800ef52:	4770      	bx	lr

0800ef54 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800ef54:	b510      	push	{r4, lr}
 800ef56:	4604      	mov	r4, r0
 800ef58:	2138      	movs	r1, #56	; 0x38
 800ef5a:	f013 fdd1 	bl	8022b00 <_ZdlPvj>
 800ef5e:	4620      	mov	r0, r4
 800ef60:	bd10      	pop	{r4, pc}
	...

0800ef64 <_ZN8touchgfx8TextArea12setBaselineYEs>:
    virtual void setBaselineY(int16_t baselineY)
 800ef64:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800ef66:	6803      	ldr	r3, [r0, #0]
 800ef68:	6b1e      	ldr	r6, [r3, #48]	; 0x30
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
    {
        return typedText;
 800ef6a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    }

private:
    void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ef6c:	4a13      	ldr	r2, [pc, #76]	; (800efbc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800ef6e:	6812      	ldr	r2, [r2, #0]
 800ef70:	b1ba      	cbz	r2, 800efa2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3e>
 800ef72:	4604      	mov	r4, r0
 800ef74:	b28d      	uxth	r5, r1
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	4911      	ldr	r1, [pc, #68]	; (800efc0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800ef7a:	8809      	ldrh	r1, [r1, #0]
 800ef7c:	428a      	cmp	r2, r1
 800ef7e:	d216      	bcs.n	800efae <_ZN8touchgfx8TextArea12setBaselineYEs+0x4a>
        return fonts[typedTexts[typedTextId].fontIdx];
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	4a0e      	ldr	r2, [pc, #56]	; (800efbc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800ef84:	6812      	ldr	r2, [r2, #0]
 800ef86:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800ef8a:	4b0e      	ldr	r3, [pc, #56]	; (800efc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800ef92:	6803      	ldr	r3, [r0, #0]
 800ef94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef96:	4798      	blx	r3
 800ef98:	1a29      	subs	r1, r5, r0
 800ef9a:	b209      	sxth	r1, r1
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	47b0      	blx	r6
    }
 800efa0:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800efa2:	4b09      	ldr	r3, [pc, #36]	; (800efc8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800efa4:	4a09      	ldr	r2, [pc, #36]	; (800efcc <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800efa6:	21cf      	movs	r1, #207	; 0xcf
 800efa8:	4809      	ldr	r0, [pc, #36]	; (800efd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x6c>)
 800efaa:	f013 fdc5 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800efae:	4b09      	ldr	r3, [pc, #36]	; (800efd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
 800efb0:	4a06      	ldr	r2, [pc, #24]	; (800efcc <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800efb2:	21d0      	movs	r1, #208	; 0xd0
 800efb4:	4806      	ldr	r0, [pc, #24]	; (800efd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x6c>)
 800efb6:	f013 fdbf 	bl	8022b38 <__assert_func>
 800efba:	bf00      	nop
 800efbc:	2000bacc 	.word	0x2000bacc
 800efc0:	2000bad0 	.word	0x2000bad0
 800efc4:	2000bad4 	.word	0x2000bad4
 800efc8:	080242f8 	.word	0x080242f8
 800efcc:	080243e0 	.word	0x080243e0
 800efd0:	0802433c 	.word	0x0802433c
 800efd4:	0802438c 	.word	0x0802438c

0800efd8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
    virtual int16_t getTextHeight()
 800efd8:	b508      	push	{r3, lr}
        return typedTextId != TYPED_TEXT_INVALID;
 800efda:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800efdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d01b      	beq.n	800f01c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x44>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800efe4:	4a0e      	ldr	r2, [pc, #56]	; (800f020 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x48>)
 800efe6:	6812      	ldr	r2, [r2, #0]
 800efe8:	b162      	cbz	r2, 800f004 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x2c>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800efea:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800efec:	4a0d      	ldr	r2, [pc, #52]	; (800f024 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>)
 800efee:	8812      	ldrh	r2, [r2, #0]
 800eff0:	4291      	cmp	r1, r2
 800eff2:	d20d      	bcs.n	800f010 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x38>
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText(TypedTextId id) const
    {
        return currentLanguagePtr[id];
 800eff4:	4a0c      	ldr	r2, [pc, #48]	; (800f028 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800eff6:	6811      	ldr	r1, [r2, #0]
 800eff8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800effa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800effe:	f001 f981 	bl	8010304 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
    }
 800f002:	bd08      	pop	{r3, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f004:	4b09      	ldr	r3, [pc, #36]	; (800f02c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800f006:	4a0a      	ldr	r2, [pc, #40]	; (800f030 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800f008:	21cf      	movs	r1, #207	; 0xcf
 800f00a:	480a      	ldr	r0, [pc, #40]	; (800f034 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800f00c:	f013 fd94 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f010:	4b09      	ldr	r3, [pc, #36]	; (800f038 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800f012:	4a07      	ldr	r2, [pc, #28]	; (800f030 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800f014:	21d0      	movs	r1, #208	; 0xd0
 800f016:	4807      	ldr	r0, [pc, #28]	; (800f034 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800f018:	f013 fd8e 	bl	8022b38 <__assert_func>
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800f01c:	2000      	movs	r0, #0
 800f01e:	e7f0      	b.n	800f002 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x2a>
 800f020:	2000bacc 	.word	0x2000bacc
 800f024:	2000bad0 	.word	0x2000bad0
 800f028:	2000ba30 	.word	0x2000ba30
 800f02c:	080242f8 	.word	0x080242f8
 800f030:	080243e0 	.word	0x080243e0
 800f034:	0802433c 	.word	0x0802433c
 800f038:	0802438c 	.word	0x0802438c

0800f03c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
        return typedTextId != TYPED_TEXT_INVALID;
 800f03c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800f03e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f042:	429a      	cmp	r2, r3
 800f044:	d053      	beq.n	800f0ee <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb2>
    virtual uint16_t getTextWidth() const
 800f046:	b570      	push	{r4, r5, r6, lr}
 800f048:	4603      	mov	r3, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f04a:	492a      	ldr	r1, [pc, #168]	; (800f0f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb8>)
 800f04c:	6809      	ldr	r1, [r1, #0]
 800f04e:	2900      	cmp	r1, #0
 800f050:	d029      	beq.n	800f0a6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6a>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f052:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 800f054:	4928      	ldr	r1, [pc, #160]	; (800f0f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xbc>)
 800f056:	8809      	ldrh	r1, [r1, #0]
 800f058:	4288      	cmp	r0, r1
 800f05a:	d22a      	bcs.n	800f0b2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x76>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f05c:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800f05e:	4925      	ldr	r1, [pc, #148]	; (800f0f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb8>)
 800f060:	6809      	ldr	r1, [r1, #0]
 800f062:	f811 4010 	ldrb.w	r4, [r1, r0, lsl #1]
 800f066:	4825      	ldr	r0, [pc, #148]	; (800f0fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc0>)
 800f068:	6800      	ldr	r0, [r0, #0]
 800f06a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800f06e:	6804      	ldr	r4, [r0, #0]
 800f070:	69e5      	ldr	r5, [r4, #28]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f072:	b321      	cbz	r1, 800f0be <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x82>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f074:	8cdc      	ldrh	r4, [r3, #38]	; 0x26
 800f076:	4920      	ldr	r1, [pc, #128]	; (800f0f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xbc>)
 800f078:	8809      	ldrh	r1, [r1, #0]
 800f07a:	428c      	cmp	r4, r1
 800f07c:	d225      	bcs.n	800f0ca <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x8e>
        return typedTexts[typedTextId].direction;
 800f07e:	491d      	ldr	r1, [pc, #116]	; (800f0f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb8>)
 800f080:	680c      	ldr	r4, [r1, #0]
 800f082:	eb04 0142 	add.w	r1, r4, r2, lsl #1
 800f086:	7849      	ldrb	r1, [r1, #1]
 800f088:	f3c1 0181 	ubfx	r1, r1, #2, #2
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f08c:	b31c      	cbz	r4, 800f0d6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x9a>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f08e:	8cde      	ldrh	r6, [r3, #38]	; 0x26
 800f090:	4c19      	ldr	r4, [pc, #100]	; (800f0f8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xbc>)
 800f092:	8824      	ldrh	r4, [r4, #0]
 800f094:	42a6      	cmp	r6, r4
 800f096:	d224      	bcs.n	800f0e2 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xa6>
 800f098:	4c19      	ldr	r4, [pc, #100]	; (800f100 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc4>)
 800f09a:	6824      	ldr	r4, [r4, #0]
 800f09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f09e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0a2:	47a8      	blx	r5
    }
 800f0a4:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f0a6:	4b17      	ldr	r3, [pc, #92]	; (800f104 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc8>)
 800f0a8:	4a17      	ldr	r2, [pc, #92]	; (800f108 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800f0aa:	21cf      	movs	r1, #207	; 0xcf
 800f0ac:	4817      	ldr	r0, [pc, #92]	; (800f10c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800f0ae:	f013 fd43 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f0b2:	4b17      	ldr	r3, [pc, #92]	; (800f110 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd4>)
 800f0b4:	4a14      	ldr	r2, [pc, #80]	; (800f108 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800f0b6:	21d0      	movs	r1, #208	; 0xd0
 800f0b8:	4814      	ldr	r0, [pc, #80]	; (800f10c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800f0ba:	f013 fd3d 	bl	8022b38 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f0be:	4b11      	ldr	r3, [pc, #68]	; (800f104 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc8>)
 800f0c0:	4a11      	ldr	r2, [pc, #68]	; (800f108 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800f0c2:	21cf      	movs	r1, #207	; 0xcf
 800f0c4:	4811      	ldr	r0, [pc, #68]	; (800f10c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800f0c6:	f013 fd37 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f0ca:	4b11      	ldr	r3, [pc, #68]	; (800f110 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd4>)
 800f0cc:	4a0e      	ldr	r2, [pc, #56]	; (800f108 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800f0ce:	21d0      	movs	r1, #208	; 0xd0
 800f0d0:	480e      	ldr	r0, [pc, #56]	; (800f10c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800f0d2:	f013 fd31 	bl	8022b38 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f0d6:	4b0b      	ldr	r3, [pc, #44]	; (800f104 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc8>)
 800f0d8:	4a0b      	ldr	r2, [pc, #44]	; (800f108 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800f0da:	21cf      	movs	r1, #207	; 0xcf
 800f0dc:	480b      	ldr	r0, [pc, #44]	; (800f10c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800f0de:	f013 fd2b 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f0e2:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd4>)
 800f0e4:	4a08      	ldr	r2, [pc, #32]	; (800f108 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800f0e6:	21d0      	movs	r1, #208	; 0xd0
 800f0e8:	4808      	ldr	r0, [pc, #32]	; (800f10c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800f0ea:	f013 fd25 	bl	8022b38 <__assert_func>
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800f0ee:	2000      	movs	r0, #0
    }
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	2000bacc 	.word	0x2000bacc
 800f0f8:	2000bad0 	.word	0x2000bad0
 800f0fc:	2000bad4 	.word	0x2000bad4
 800f100:	2000ba30 	.word	0x2000ba30
 800f104:	080242f8 	.word	0x080242f8
 800f108:	080243e0 	.word	0x080243e0
 800f10c:	0802433c 	.word	0x0802433c
 800f110:	0802438c 	.word	0x0802438c

0800f114 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
    virtual void draw(const Rect& area) const
 800f114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f118:	b08c      	sub	sp, #48	; 0x30
        return typedTextId != TYPED_TEXT_INVALID;
 800f11a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
        if (typedText.hasValidId())
 800f11c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f120:	42a2      	cmp	r2, r4
 800f122:	d06b      	beq.n	800f1fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>
 800f124:	460d      	mov	r5, r1
 800f126:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f128:	4b4e      	ldr	r3, [pc, #312]	; (800f264 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d068      	beq.n	800f202 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xee>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f130:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800f132:	4b4d      	ldr	r3, [pc, #308]	; (800f268 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x154>)
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	4299      	cmp	r1, r3
 800f138:	d269      	bcs.n	800f20e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xfa>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f13a:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800f13c:	4b49      	ldr	r3, [pc, #292]	; (800f264 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 800f144:	4b49      	ldr	r3, [pc, #292]	; (800f26c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x158>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            if (fontToDraw != 0)
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d055      	beq.n	800f1fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800f150:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f154:	4943      	ldr	r1, [pc, #268]	; (800f264 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800f156:	6809      	ldr	r1, [r1, #0]
 800f158:	2900      	cmp	r1, #0
 800f15a:	d05e      	beq.n	800f21a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x106>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f15c:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 800f15e:	4942      	ldr	r1, [pc, #264]	; (800f268 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x154>)
 800f160:	8809      	ldrh	r1, [r1, #0]
 800f162:	4288      	cmp	r0, r1
 800f164:	d25f      	bcs.n	800f226 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x112>
        return typedTexts[typedTextId].alignment;
 800f166:	493f      	ldr	r1, [pc, #252]	; (800f264 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800f168:	6808      	ldr	r0, [r1, #0]
 800f16a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f16e:	7851      	ldrb	r1, [r2, #1]
 800f170:	f3c1 0101 	ubfx	r1, r1, #0, #2
 800f174:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
 800f178:	f894 8030 	ldrb.w	r8, [r4, #48]	; 0x30
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d058      	beq.n	800f232 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x11e>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f180:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 800f182:	4839      	ldr	r0, [pc, #228]	; (800f268 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x154>)
 800f184:	8800      	ldrh	r0, [r0, #0]
 800f186:	4286      	cmp	r6, r0
 800f188:	d259      	bcs.n	800f23e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x12a>
        return typedTexts[typedTextId].direction;
 800f18a:	7852      	ldrb	r2, [r2, #1]
 800f18c:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800f190:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
 800f194:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 800f198:	6aa7      	ldr	r7, [r4, #40]	; 0x28
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, uint16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
        {
            this->font = font;
 800f19a:	9305      	str	r3, [sp, #20]
            this->color = color;
 800f19c:	9707      	str	r7, [sp, #28]
            this->alpha = alpha;
 800f19e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
            this->alignment = alignment;
 800f1a2:	f88d 1018 	strb.w	r1, [sp, #24]
            this->textDirection = textDirection;
 800f1a6:	f88d 2019 	strb.w	r2, [sp, #25]
            this->rotation = rotation;
 800f1aa:	f88d 801a 	strb.w	r8, [sp, #26]
            this->linespace = linespace;
 800f1ae:	f8ad c020 	strh.w	ip, [sp, #32]
            this->indentation = indentation;
 800f1b2:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23
            this->wideTextAction = wideTextAction;
 800f1b6:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
    {
        return instance->lcdRef;
 800f1ba:	4b2d      	ldr	r3, [pc, #180]	; (800f270 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x15c>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	689e      	ldr	r6, [r3, #8]
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard);
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	a80a      	add	r0, sp, #40	; 0x28
 800f1c4:	f010 f849 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f1c8:	4b26      	ldr	r3, [pc, #152]	; (800f264 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d03c      	beq.n	800f24a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x136>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f1d0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800f1d2:	4b25      	ldr	r3, [pc, #148]	; (800f268 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x154>)
 800f1d4:	881b      	ldrh	r3, [r3, #0]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d23d      	bcs.n	800f256 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x142>
        return texts->getText(typedTextId);
 800f1da:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800f1dc:	4b25      	ldr	r3, [pc, #148]	; (800f274 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x160>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f1e6:	9202      	str	r2, [sp, #8]
 800f1e8:	9301      	str	r3, [sp, #4]
 800f1ea:	ab05      	add	r3, sp, #20
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	462b      	mov	r3, r5
 800f1f0:	aa0c      	add	r2, sp, #48	; 0x30
 800f1f2:	e912 0006 	ldmdb	r2, {r1, r2}
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f00e fbe6 	bl	801d9c8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
    }
 800f1fc:	b00c      	add	sp, #48	; 0x30
 800f1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f202:	4b1d      	ldr	r3, [pc, #116]	; (800f278 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x164>)
 800f204:	4a1d      	ldr	r2, [pc, #116]	; (800f27c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800f206:	21cf      	movs	r1, #207	; 0xcf
 800f208:	481d      	ldr	r0, [pc, #116]	; (800f280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800f20a:	f013 fc95 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f20e:	4b1d      	ldr	r3, [pc, #116]	; (800f284 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x170>)
 800f210:	4a1a      	ldr	r2, [pc, #104]	; (800f27c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800f212:	21d0      	movs	r1, #208	; 0xd0
 800f214:	481a      	ldr	r0, [pc, #104]	; (800f280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800f216:	f013 fc8f 	bl	8022b38 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f21a:	4b17      	ldr	r3, [pc, #92]	; (800f278 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x164>)
 800f21c:	4a17      	ldr	r2, [pc, #92]	; (800f27c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800f21e:	21cf      	movs	r1, #207	; 0xcf
 800f220:	4817      	ldr	r0, [pc, #92]	; (800f280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800f222:	f013 fc89 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f226:	4b17      	ldr	r3, [pc, #92]	; (800f284 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x170>)
 800f228:	4a14      	ldr	r2, [pc, #80]	; (800f27c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800f22a:	21d0      	movs	r1, #208	; 0xd0
 800f22c:	4814      	ldr	r0, [pc, #80]	; (800f280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800f22e:	f013 fc83 	bl	8022b38 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f232:	4b11      	ldr	r3, [pc, #68]	; (800f278 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x164>)
 800f234:	4a11      	ldr	r2, [pc, #68]	; (800f27c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800f236:	21cf      	movs	r1, #207	; 0xcf
 800f238:	4811      	ldr	r0, [pc, #68]	; (800f280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800f23a:	f013 fc7d 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f23e:	4b11      	ldr	r3, [pc, #68]	; (800f284 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x170>)
 800f240:	4a0e      	ldr	r2, [pc, #56]	; (800f27c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800f242:	21d0      	movs	r1, #208	; 0xd0
 800f244:	480e      	ldr	r0, [pc, #56]	; (800f280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800f246:	f013 fc77 	bl	8022b38 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f24a:	4b0b      	ldr	r3, [pc, #44]	; (800f278 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x164>)
 800f24c:	4a0b      	ldr	r2, [pc, #44]	; (800f27c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800f24e:	21cf      	movs	r1, #207	; 0xcf
 800f250:	480b      	ldr	r0, [pc, #44]	; (800f280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800f252:	f013 fc71 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f256:	4b0b      	ldr	r3, [pc, #44]	; (800f284 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x170>)
 800f258:	4a08      	ldr	r2, [pc, #32]	; (800f27c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800f25a:	21d0      	movs	r1, #208	; 0xd0
 800f25c:	4808      	ldr	r0, [pc, #32]	; (800f280 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800f25e:	f013 fc6b 	bl	8022b38 <__assert_func>
 800f262:	bf00      	nop
 800f264:	2000bacc 	.word	0x2000bacc
 800f268:	2000bad0 	.word	0x2000bad0
 800f26c:	2000bad4 	.word	0x2000bad4
 800f270:	2000ba4c 	.word	0x2000ba4c
 800f274:	2000ba30 	.word	0x2000ba30
 800f278:	080242f8 	.word	0x080242f8
 800f27c:	080243e0 	.word	0x080243e0
 800f280:	0802433c 	.word	0x0802433c
 800f284:	0802438c 	.word	0x0802438c

0800f288 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
    Container::add(progressIndicatorContainer);
}

touchgfx::AbstractProgressIndicator::~AbstractProgressIndicator()
{
}
 800f288:	4770      	bx	lr

0800f28a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
}

int16_t AbstractProgressIndicator::getProgressIndicatorX() const
{
    return progressIndicatorContainer.getX();
}
 800f28a:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 800f28e:	4770      	bx	lr

0800f290 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorY() const
{
    return progressIndicatorContainer.getY();
}
 800f290:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 800f294:	4770      	bx	lr

0800f296 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorWidth() const
{
    return progressIndicatorContainer.getWidth();
}
 800f296:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 800f29a:	4770      	bx	lr

0800f29c <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorHeight() const
{
    return progressIndicatorContainer.getHeight();
}
 800f29c:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 800f2a0:	4770      	bx	lr

0800f2a2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
    rangeStepsMin = minStep;
    assert(rangeStepsMin < rangeSteps);
}

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max, uint16_t& steps, uint16_t& minStep) const
{
 800f2a2:	b410      	push	{r4}
    min = rangeMin;
 800f2a4:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 800f2a8:	800c      	strh	r4, [r1, #0]
    max = rangeMax;
 800f2aa:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 800f2ae:	8011      	strh	r1, [r2, #0]
    steps = rangeSteps;
 800f2b0:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 800f2b4:	801a      	strh	r2, [r3, #0]
    minStep = rangeStepsMin;
 800f2b6:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 800f2ba:	9b01      	ldr	r3, [sp, #4]
 800f2bc:	801a      	strh	r2, [r3, #0]
}
 800f2be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max, uint16_t& steps) const
{
 800f2c4:	b410      	push	{r4}
    min = rangeMin;
 800f2c6:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 800f2ca:	800c      	strh	r4, [r1, #0]
    max = rangeMax;
 800f2cc:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 800f2d0:	8011      	strh	r1, [r2, #0]
    steps = rangeSteps;
 800f2d2:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 800f2d6:	801a      	strh	r2, [r3, #0]
}
 800f2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max) const
{
    min = rangeMin;
 800f2de:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 800f2e2:	800b      	strh	r3, [r1, #0]
    max = rangeMax;
 800f2e4:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 800f2e8:	8013      	strh	r3, [r2, #0]
}
 800f2ea:	4770      	bx	lr

0800f2ec <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:

void AbstractProgressIndicator::setValue(int value)
{
    int newValue = MAX(value, rangeMin);
 800f2ec:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 800f2f0:	4299      	cmp	r1, r3
 800f2f2:	bfb8      	it	lt
 800f2f4:	4619      	movlt	r1, r3
    newValue = MIN(newValue, rangeMax);
 800f2f6:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 800f2fa:	4299      	cmp	r1, r3
 800f2fc:	bfa8      	it	ge
 800f2fe:	4619      	movge	r1, r3
    currentValue = newValue;
 800f300:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
}
 800f304:	4770      	bx	lr

0800f306 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:

int AbstractProgressIndicator::getValue() const
{
    return currentValue;
}
 800f306:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 800f30a:	4770      	bx	lr

0800f30c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
touchgfx::AbstractProgressIndicator::~AbstractProgressIndicator()
 800f30c:	b510      	push	{r4, lr}
 800f30e:	4604      	mov	r4, r0
}
 800f310:	2190      	movs	r1, #144	; 0x90
 800f312:	f013 fbf5 	bl	8022b00 <_ZdlPvj>
 800f316:	4620      	mov	r0, r4
 800f318:	bd10      	pop	{r4, pc}

0800f31a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
{
 800f31a:	b510      	push	{r4, lr}
 800f31c:	4604      	mov	r4, r0
    background.setBitmap(bmpBackground);
 800f31e:	302c      	adds	r0, #44	; 0x2c
 800f320:	f000 fd04 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        return rect.width;
 800f324:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
        rect.width = width;
 800f328:	8123      	strh	r3, [r4, #8]
        return rect.height;
 800f32a:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
        rect.height = height;
 800f32e:	8163      	strh	r3, [r4, #10]
}
 800f330:	bd10      	pop	{r4, pc}
	...

0800f334 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
{
 800f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f338:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    assert(min < max);
 800f33c:	4291      	cmp	r1, r2
 800f33e:	da1b      	bge.n	800f378 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x44>
 800f340:	4604      	mov	r4, r0
 800f342:	460e      	mov	r6, r1
 800f344:	4615      	mov	r5, r2
 800f346:	4698      	mov	r8, r3
    rangeMin = min;
 800f348:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
    rangeMax = max;
 800f34c:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
    setValue(currentValue);
 800f350:	6803      	ldr	r3, [r0, #0]
 800f352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f356:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 800f35a:	4798      	blx	r3
    if (steps == 0)
 800f35c:	f1b8 0f00 	cmp.w	r8, #0
 800f360:	d110      	bne.n	800f384 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x50>
        rangeSteps = max - min;
 800f362:	1bad      	subs	r5, r5, r6
 800f364:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
    rangeStepsMin = minStep;
 800f368:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
    assert(rangeStepsMin < rangeSteps);
 800f36c:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 800f370:	42bb      	cmp	r3, r7
 800f372:	d90a      	bls.n	800f38a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x56>
}
 800f374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(min < max);
 800f378:	4b07      	ldr	r3, [pc, #28]	; (800f398 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 800f37a:	4a08      	ldr	r2, [pc, #32]	; (800f39c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 800f37c:	214d      	movs	r1, #77	; 0x4d
 800f37e:	4808      	ldr	r0, [pc, #32]	; (800f3a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 800f380:	f013 fbda 	bl	8022b38 <__assert_func>
        rangeSteps = steps;
 800f384:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 800f388:	e7ee      	b.n	800f368 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x34>
    assert(rangeStepsMin < rangeSteps);
 800f38a:	4b06      	ldr	r3, [pc, #24]	; (800f3a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x70>)
 800f38c:	4a03      	ldr	r2, [pc, #12]	; (800f39c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 800f38e:	215a      	movs	r1, #90	; 0x5a
 800f390:	4803      	ldr	r0, [pc, #12]	; (800f3a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 800f392:	f013 fbd1 	bl	8022b38 <__assert_func>
 800f396:	bf00      	nop
 800f398:	08024410 	.word	0x08024410
 800f39c:	08024578 	.word	0x08024578
 800f3a0:	0802441c 	.word	0x0802441c
 800f3a4:	08024498 	.word	0x08024498

0800f3a8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:

uint16_t AbstractProgressIndicator::getProgress(uint16_t range /*= 100*/) const
{
 800f3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3aa:	b083      	sub	sp, #12
    if (range == 0)
 800f3ac:	460d      	mov	r5, r1
 800f3ae:	b911      	cbnz	r1, 800f3b6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0xe>
    // Find out at what step the current value is.
    int32_t step = rangeStepsMin + muldiv(currentValue - rangeMin, rangeSteps - rangeStepsMin, rangeMax - rangeMin, remainder);
    // Scale the step up to [0..range]
    int32_t prog = muldiv(step, range, rangeSteps, remainder);
    return (uint16_t)prog;
}
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	b003      	add	sp, #12
 800f3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3b6:	4604      	mov	r4, r0
    int32_t step = rangeStepsMin + muldiv(currentValue - rangeMin, rangeSteps - rangeStepsMin, rangeMax - rangeMin, remainder);
 800f3b8:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 800f3bc:	f8b0 7088 	ldrh.w	r7, [r0, #136]	; 0x88
 800f3c0:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 800f3c4:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 800f3c8:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 800f3cc:	ab01      	add	r3, sp, #4
 800f3ce:	1a12      	subs	r2, r2, r0
 800f3d0:	1b89      	subs	r1, r1, r6
 800f3d2:	1a38      	subs	r0, r7, r0
 800f3d4:	f00f ff9d 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
    int32_t prog = muldiv(step, range, rangeSteps, remainder);
 800f3d8:	ab01      	add	r3, sp, #4
 800f3da:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 800f3de:	4629      	mov	r1, r5
 800f3e0:	4430      	add	r0, r6
 800f3e2:	f00f ff96 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
    return (uint16_t)prog;
 800f3e6:	b285      	uxth	r5, r0
 800f3e8:	e7e2      	b.n	800f3b0 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x8>

0800f3ea <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
{
 800f3ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	4688      	mov	r8, r1
 800f3f2:	4616      	mov	r6, r2
 800f3f4:	4699      	mov	r9, r3
 800f3f6:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    progressIndicatorContainer.setPosition(x, y, width, height);
 800f3fa:	f100 0558 	add.w	r5, r0, #88	; 0x58
        setXY(x, y);
 800f3fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800f400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f402:	4628      	mov	r0, r5
 800f404:	4798      	blx	r3
        setWidth(width);
 800f406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f40a:	4649      	mov	r1, r9
 800f40c:	4628      	mov	r0, r5
 800f40e:	4798      	blx	r3
        setHeight(height);
 800f410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f414:	4639      	mov	r1, r7
 800f416:	4628      	mov	r0, r5
 800f418:	4798      	blx	r3
        return rect.width;
 800f41a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    if (getWidth() < x + width)
 800f41e:	eb08 0309 	add.w	r3, r8, r9
 800f422:	429a      	cmp	r2, r3
 800f424:	da00      	bge.n	800f428 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss+0x3e>
        rect.width = width;
 800f426:	8123      	strh	r3, [r4, #8]
        return rect.height;
 800f428:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    if (getHeight() < y + height)
 800f42c:	19f3      	adds	r3, r6, r7
 800f42e:	429a      	cmp	r2, r3
 800f430:	da00      	bge.n	800f434 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss+0x4a>
        rect.height = height;
 800f432:	8163      	strh	r3, [r4, #10]
}
 800f434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f438 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
AbstractProgressIndicator::AbstractProgressIndicator()
 800f438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f43a:	b083      	sub	sp, #12
 800f43c:	4605      	mov	r5, r0
        this->x = x;
 800f43e:	2400      	movs	r4, #0
 800f440:	8084      	strh	r4, [r0, #4]
        this->y = y;
 800f442:	80c4      	strh	r4, [r0, #6]
        this->width = width;
 800f444:	8104      	strh	r4, [r0, #8]
        this->height = height;
 800f446:	8144      	strh	r4, [r0, #10]
        this->x = 0;
 800f448:	8184      	strh	r4, [r0, #12]
        this->y = 0;
 800f44a:	81c4      	strh	r4, [r0, #14]
        this->width = 0;
 800f44c:	8204      	strh	r4, [r0, #16]
        this->height = 0;
 800f44e:	8244      	strh	r4, [r0, #18]
        visible(true)
 800f450:	6144      	str	r4, [r0, #20]
 800f452:	6184      	str	r4, [r0, #24]
 800f454:	61c4      	str	r4, [r0, #28]
 800f456:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800f45a:	2701      	movs	r7, #1
 800f45c:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
 800f460:	6284      	str	r4, [r0, #40]	; 0x28
    : Container(), rangeMin(0), rangeMax(100), currentValue(0), rangeSteps(100), rangeStepsMin(0)
 800f462:	4606      	mov	r6, r0
 800f464:	4b2d      	ldr	r3, [pc, #180]	; (800f51c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xe4>)
 800f466:	f846 3b2c 	str.w	r3, [r6], #44
 800f46a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f46e:	a902      	add	r1, sp, #8
 800f470:	f821 3d04 	strh.w	r3, [r1, #-4]!
        this->x = x;
 800f474:	80b4      	strh	r4, [r6, #4]
        this->y = y;
 800f476:	80f4      	strh	r4, [r6, #6]
        this->width = width;
 800f478:	8134      	strh	r4, [r6, #8]
        this->height = height;
 800f47a:	8174      	strh	r4, [r6, #10]
        this->x = 0;
 800f47c:	81b4      	strh	r4, [r6, #12]
        this->y = 0;
 800f47e:	81f4      	strh	r4, [r6, #14]
        this->width = 0;
 800f480:	8234      	strh	r4, [r6, #16]
        this->height = 0;
 800f482:	8274      	strh	r4, [r6, #18]
 800f484:	6174      	str	r4, [r6, #20]
 800f486:	61b4      	str	r4, [r6, #24]
 800f488:	61f4      	str	r4, [r6, #28]
 800f48a:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 800f48e:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800f492:	4a23      	ldr	r2, [pc, #140]	; (800f520 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xe8>)
 800f494:	62c2      	str	r2, [r0, #44]	; 0x2c
 800f496:	84f3      	strh	r3, [r6, #38]	; 0x26
 800f498:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
        setBitmap(bmp);
 800f49c:	4630      	mov	r0, r6
 800f49e:	f000 fc45 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        this->x = x;
 800f4a2:	f8a5 405c 	strh.w	r4, [r5, #92]	; 0x5c
        this->y = y;
 800f4a6:	f8a5 405e 	strh.w	r4, [r5, #94]	; 0x5e
        this->width = width;
 800f4aa:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
        this->height = height;
 800f4ae:	f8a5 4062 	strh.w	r4, [r5, #98]	; 0x62
        this->x = 0;
 800f4b2:	f8a5 4064 	strh.w	r4, [r5, #100]	; 0x64
        this->y = 0;
 800f4b6:	f8a5 4066 	strh.w	r4, [r5, #102]	; 0x66
        this->width = 0;
 800f4ba:	f8a5 4068 	strh.w	r4, [r5, #104]	; 0x68
        this->height = 0;
 800f4be:	f8a5 406a 	strh.w	r4, [r5, #106]	; 0x6a
 800f4c2:	66ec      	str	r4, [r5, #108]	; 0x6c
 800f4c4:	672c      	str	r4, [r5, #112]	; 0x70
 800f4c6:	676c      	str	r4, [r5, #116]	; 0x74
 800f4c8:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
 800f4cc:	f885 707d 	strb.w	r7, [r5, #125]	; 0x7d
 800f4d0:	4b14      	ldr	r3, [pc, #80]	; (800f524 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xec>)
 800f4d2:	65ab      	str	r3, [r5, #88]	; 0x58
 800f4d4:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 800f4d8:	f8a5 4084 	strh.w	r4, [r5, #132]	; 0x84
 800f4dc:	2364      	movs	r3, #100	; 0x64
 800f4de:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
 800f4e2:	f8a5 4088 	strh.w	r4, [r5, #136]	; 0x88
 800f4e6:	f8a5 308a 	strh.w	r3, [r5, #138]	; 0x8a
 800f4ea:	f8a5 408c 	strh.w	r4, [r5, #140]	; 0x8c
        setX(x);
 800f4ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f2:	4621      	mov	r1, r4
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	4798      	blx	r3
        setY(y);
 800f4f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	4630      	mov	r0, r6
 800f500:	4798      	blx	r3
    Container::add(background);
 800f502:	4631      	mov	r1, r6
 800f504:	4628      	mov	r0, r5
 800f506:	f7ff f84f 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(progressIndicatorContainer);
 800f50a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800f50e:	4628      	mov	r0, r5
 800f510:	f7ff f84a 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800f514:	4628      	mov	r0, r5
 800f516:	b003      	add	sp, #12
 800f518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f51a:	bf00      	nop
 800f51c:	080244bc 	.word	0x080244bc
 800f520:	08024914 	.word	0x08024914
 800f524:	08023cd4 	.word	0x08023cd4

0800f528 <_ZN8touchgfx14CircleProgress9setCenterEii>:
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800f528:	0149      	lsls	r1, r1, #5
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 800f52a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 800f52e:	0152      	lsls	r2, r2, #5
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 800f530:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
}

void CircleProgress::setCenter(int x, int y)
{
    circle.setCenter(x, y);
}
 800f534:	4770      	bx	lr

0800f536 <_ZNK8touchgfx14CircleProgress9getCenterERiS1_>:
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800f536:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	db08      	blt.n	800f550 <_ZNK8touchgfx14CircleProgress9getCenterERiS1_+0x1a>
 800f53e:	115b      	asrs	r3, r3, #5
     * @param [out] y The y coordinate of the center.
     */
    template <typename T>
    void getCenter(T& x, T& y) const
    {
        x = circleCenterX.to<T>();
 800f540:	600b      	str	r3, [r1, #0]
 800f542:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800f546:	2b00      	cmp	r3, #0
 800f548:	db04      	blt.n	800f554 <_ZNK8touchgfx14CircleProgress9getCenterERiS1_+0x1e>
 800f54a:	115b      	asrs	r3, r3, #5
        y = circleCenterY.to<T>();
 800f54c:	6013      	str	r3, [r2, #0]

void CircleProgress::getCenter(int& x, int& y) const
{
    circle.getCenter(x, y);
}
 800f54e:	4770      	bx	lr
 800f550:	331f      	adds	r3, #31
 800f552:	e7f4      	b.n	800f53e <_ZNK8touchgfx14CircleProgress9getCenterERiS1_+0x8>
 800f554:	331f      	adds	r3, #31
 800f556:	e7f8      	b.n	800f54a <_ZNK8touchgfx14CircleProgress9getCenterERiS1_+0x14>

0800f558 <_ZN8touchgfx14CircleProgress9setRadiusEi>:
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800f558:	0149      	lsls	r1, r1, #5
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
    {
        this->circleRadius = CWRUtil::toQ5<T>(r);
 800f55a:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

void CircleProgress::setRadius(int r)
{
    circle.setRadius(r);
}
 800f55e:	4770      	bx	lr

0800f560 <_ZNK8touchgfx14CircleProgress9getRadiusEv>:
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800f560:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800f564:	2800      	cmp	r0, #0
 800f566:	db01      	blt.n	800f56c <_ZNK8touchgfx14CircleProgress9getRadiusEv+0xc>
int CircleProgress::getRadius() const
{
    int radius;
    circle.getRadius(radius);
    return radius;
}
 800f568:	1140      	asrs	r0, r0, #5
 800f56a:	4770      	bx	lr
 800f56c:	301f      	adds	r0, #31
 800f56e:	e7fb      	b.n	800f568 <_ZNK8touchgfx14CircleProgress9getRadiusEv+0x8>

0800f570 <_ZN8touchgfx14CircleProgress12setLineWidthEi>:
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800f570:	0149      	lsls	r1, r1, #5
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 800f572:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4

void CircleProgress::setLineWidth(int width)
{
    circle.setLineWidth(width);
}
 800f576:	4770      	bx	lr

0800f578 <_ZNK8touchgfx14CircleProgress12getLineWidthEv>:
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800f578:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 800f57c:	2800      	cmp	r0, #0
 800f57e:	db01      	blt.n	800f584 <_ZNK8touchgfx14CircleProgress12getLineWidthEv+0xc>
int CircleProgress::getLineWidth() const
{
    int width;
    circle.getLineWidth(width);
    return width;
}
 800f580:	1140      	asrs	r0, r0, #5
 800f582:	4770      	bx	lr
 800f584:	301f      	adds	r0, #31
 800f586:	e7fb      	b.n	800f580 <_ZNK8touchgfx14CircleProgress12getLineWidthEv+0x8>

0800f588 <_ZNK8touchgfx14CircleProgress13getStartAngleEv>:
 800f588:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800f58c:	2800      	cmp	r0, #0
 800f58e:	db02      	blt.n	800f596 <_ZNK8touchgfx14CircleProgress13getStartAngleEv+0xe>
}

int CircleProgress::getStartAngle() const
{
    return circle.getArcStart();
}
 800f590:	f340 104f 	sbfx	r0, r0, #5, #16
 800f594:	4770      	bx	lr
 800f596:	301f      	adds	r0, #31
 800f598:	e7fa      	b.n	800f590 <_ZNK8touchgfx14CircleProgress13getStartAngleEv+0x8>

0800f59a <_ZNK8touchgfx14CircleProgress11getEndAngleEv>:

int CircleProgress::getEndAngle() const
{
    return circleEndAngle;
}
 800f59a:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 800f59e:	4770      	bx	lr

0800f5a0 <_ZN8touchgfx14CircleProgress8setAlphaEh>:
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    virtual void setAlpha(uint8_t alpha)
    {
        this->alpha = alpha;
 800f5a0:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe

void CircleProgress::setAlpha(uint8_t alpha)
{
    circle.setAlpha(alpha);
}
 800f5a4:	4770      	bx	lr

0800f5a6 <_ZNK8touchgfx14CircleProgress8getAlphaEv>:

uint8_t CircleProgress::getAlpha() const
{
    return circle.getAlpha();
}
 800f5a6:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
 800f5aa:	4770      	bx	lr

0800f5ac <_ZN8touchgfx14CircleProgressD1Ev>:
CircleProgress::~CircleProgress()
 800f5ac:	b510      	push	{r4, lr}
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <_ZN8touchgfx14CircleProgressD1Ev+0x1c>)
 800f5b2:	6003      	str	r3, [r0, #0]
class Circle : public CanvasWidget
 800f5b4:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <_ZN8touchgfx14CircleProgressD1Ev+0x20>)
 800f5b6:	f840 3f90 	str.w	r3, [r0, #144]!
 800f5ba:	f001 ff7f 	bl	80114bc <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f7ff fe62 	bl	800f288 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
}
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	bd10      	pop	{r4, pc}
 800f5c8:	0802466c 	.word	0x0802466c
 800f5cc:	08024e38 	.word	0x08024e38

0800f5d0 <_ZN8touchgfx14CircleProgress10setPainterERNS_15AbstractPainterE>:
{
 800f5d0:	b508      	push	{r3, lr}
    circle.setPainter(painter);
 800f5d2:	3090      	adds	r0, #144	; 0x90
 800f5d4:	f001 fe80 	bl	80112d8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
}
 800f5d8:	bd08      	pop	{r3, pc}

0800f5da <_ZN8touchgfx14CircleProgressD0Ev>:
CircleProgress::~CircleProgress()
 800f5da:	b510      	push	{r4, lr}
 800f5dc:	4604      	mov	r4, r0
}
 800f5de:	f7ff ffe5 	bl	800f5ac <_ZN8touchgfx14CircleProgressD1Ev>
 800f5e2:	21e0      	movs	r1, #224	; 0xe0
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f013 fa8b 	bl	8022b00 <_ZdlPvj>
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	bd10      	pop	{r4, pc}

0800f5ee <_ZN8touchgfx14CircleProgress15setCapPrecisionEi>:
{
 800f5ee:	b508      	push	{r3, lr}
    circle.setCapPrecision(precision);
 800f5f0:	3090      	adds	r0, #144	; 0x90
 800f5f2:	f001 ff99 	bl	8011528 <_ZN8touchgfx6Circle15setCapPrecisionEi>
}
 800f5f6:	bd08      	pop	{r3, pc}

0800f5f8 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>:
{
 800f5f8:	b508      	push	{r3, lr}
    assert(startAngle != endAngle);
 800f5fa:	4291      	cmp	r1, r2
 800f5fc:	d008      	beq.n	800f610 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x18>
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800f5fe:	0149      	lsls	r1, r1, #5
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 800f600:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
 800f604:	0153      	lsls	r3, r2, #5
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 800f606:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
    circleEndAngle = endAngle;
 800f60a:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
}
 800f60e:	bd08      	pop	{r3, pc}
    assert(startAngle != endAngle);
 800f610:	4b02      	ldr	r3, [pc, #8]	; (800f61c <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x24>)
 800f612:	4a03      	ldr	r2, [pc, #12]	; (800f620 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x28>)
 800f614:	2155      	movs	r1, #85	; 0x55
 800f616:	4803      	ldr	r0, [pc, #12]	; (800f624 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x2c>)
 800f618:	f013 fa8e 	bl	8022b38 <__assert_func>
 800f61c:	080245dc 	.word	0x080245dc
 800f620:	08024760 	.word	0x08024760
 800f624:	080245f4 	.word	0x080245f4

0800f628 <_ZNK8touchgfx14CircleProgress15getCapPrecisionEv>:
     *
     *        Gets the cap precision.
     *
     * @return The cap precision.
     */
    virtual int getCapPrecision() const
 800f628:	b508      	push	{r3, lr}
    {
        return circle.getCapPrecision();
 800f62a:	3090      	adds	r0, #144	; 0x90
 800f62c:	f001 ff86 	bl	801153c <_ZNK8touchgfx6Circle15getCapPrecisionEv>
    }
 800f630:	bd08      	pop	{r3, pc}
	...

0800f634 <_ZN8touchgfx14CircleProgressC1Ev>:
CircleProgress::CircleProgress()
 800f634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f636:	4604      	mov	r4, r0
    : AbstractProgressIndicator(), circle()
 800f638:	f7ff fefe 	bl	800f438 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800f63c:	4625      	mov	r5, r4
 800f63e:	4b15      	ldr	r3, [pc, #84]	; (800f694 <_ZN8touchgfx14CircleProgressC1Ev+0x60>)
 800f640:	f845 3b90 	str.w	r3, [r5], #144
 800f644:	4628      	mov	r0, r5
 800f646:	f001 ff53 	bl	80114f0 <_ZN8touchgfx6CircleC1Ev>
    progressIndicatorContainer.add(circle);
 800f64a:	4629      	mov	r1, r5
 800f64c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f650:	f7fe ffaa 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        return rect.width;
 800f654:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
        return rect.height;
 800f658:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
        setXY(x, y);
 800f65c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f662:	2200      	movs	r2, #0
 800f664:	4611      	mov	r1, r2
 800f666:	4628      	mov	r0, r5
 800f668:	4798      	blx	r3
        setWidth(width);
 800f66a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f670:	4639      	mov	r1, r7
 800f672:	4628      	mov	r0, r5
 800f674:	4798      	blx	r3
        setHeight(height);
 800f676:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f67c:	4631      	mov	r1, r6
 800f67e:	4628      	mov	r0, r5
 800f680:	4798      	blx	r3
    CircleProgress::setStartEndAngle(0, 360);
 800f682:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f686:	2100      	movs	r1, #0
 800f688:	4620      	mov	r0, r4
 800f68a:	f7ff ffb5 	bl	800f5f8 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>
}
 800f68e:	4620      	mov	r0, r4
 800f690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f692:	bf00      	nop
 800f694:	0802466c 	.word	0x0802466c

0800f698 <_ZN8touchgfx14CircleProgress28setProgressIndicatorPositionEssss>:
{
 800f698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f69c:	b083      	sub	sp, #12
 800f69e:	4604      	mov	r4, r0
 800f6a0:	4688      	mov	r8, r1
 800f6a2:	4691      	mov	r9, r2
 800f6a4:	461e      	mov	r6, r3
 800f6a6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    circle.setPosition(0, 0, width, height);
 800f6aa:	f100 0590 	add.w	r5, r0, #144	; 0x90
        setXY(x, y);
 800f6ae:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800f6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	4611      	mov	r1, r2
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	4798      	blx	r3
        setWidth(width);
 800f6bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	4798      	blx	r3
        setHeight(height);
 800f6c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6ce:	4639      	mov	r1, r7
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	4798      	blx	r3
    AbstractProgressIndicator::setProgressIndicatorPosition(x, y, width, height);
 800f6d4:	9700      	str	r7, [sp, #0]
 800f6d6:	4633      	mov	r3, r6
 800f6d8:	464a      	mov	r2, r9
 800f6da:	4641      	mov	r1, r8
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f7ff fe84 	bl	800f3ea <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>
}
 800f6e2:	b003      	add	sp, #12
 800f6e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f6e8 <_ZN8touchgfx14CircleProgress8setValueEi>:

void CircleProgress::setValue(int value)
{
 800f6e8:	b570      	push	{r4, r5, r6, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	4605      	mov	r5, r0
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800f6ee:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
 800f6f2:	2c00      	cmp	r4, #0
 800f6f4:	db1e      	blt.n	800f734 <_ZN8touchgfx14CircleProgress8setValueEi+0x4c>
 800f6f6:	1164      	asrs	r4, r4, #5
        return circleArcAngleStart.to<int>();
 800f6f8:	b226      	sxth	r6, r4
    int startAngle = circle.getArcStart();
    AbstractProgressIndicator::setValue(value);
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f7ff fdf6 	bl	800f2ec <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
    uint16_t rangeAngleSteps = circleEndAngle < startAngle ? startAngle - circleEndAngle : circleEndAngle - startAngle;
 800f700:	f8d5 10dc 	ldr.w	r1, [r5, #220]	; 0xdc
 800f704:	42b1      	cmp	r1, r6
 800f706:	da17      	bge.n	800f738 <_ZN8touchgfx14CircleProgress8setValueEi+0x50>
 800f708:	b2a3      	uxth	r3, r4
 800f70a:	b289      	uxth	r1, r1
 800f70c:	1a59      	subs	r1, r3, r1
 800f70e:	b289      	uxth	r1, r1
    uint16_t progress = AbstractProgressIndicator::getProgress(rangeAngleSteps);
 800f710:	4628      	mov	r0, r5
 800f712:	f7ff fe49 	bl	800f3a8 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
    if (circleEndAngle < startAngle)
 800f716:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
 800f71a:	42b3      	cmp	r3, r6
 800f71c:	db11      	blt.n	800f742 <_ZN8touchgfx14CircleProgress8setValueEi+0x5a>
    {
        circle.updateArcEnd(startAngle - progress);
    }
    else
    {
        circle.updateArcEnd(startAngle + progress);
 800f71e:	f105 0490 	add.w	r4, r5, #144	; 0x90
 800f722:	4430      	add	r0, r6
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800f724:	0140      	lsls	r0, r0, #5
        CWRUtil::Q5 endAngleQ5 = CWRUtil::toQ5<T>(endAngle);
 800f726:	9001      	str	r0, [sp, #4]
            return v;
 800f728:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
        if (circleArcAngleEnd == endAngleQ5)
 800f72c:	4298      	cmp	r0, r3
 800f72e:	d120      	bne.n	800f772 <_ZN8touchgfx14CircleProgress8setValueEi+0x8a>
    }
}
 800f730:	b004      	add	sp, #16
 800f732:	bd70      	pop	{r4, r5, r6, pc}
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800f734:	341f      	adds	r4, #31
 800f736:	e7de      	b.n	800f6f6 <_ZN8touchgfx14CircleProgress8setValueEi+0xe>
    uint16_t rangeAngleSteps = circleEndAngle < startAngle ? startAngle - circleEndAngle : circleEndAngle - startAngle;
 800f738:	b289      	uxth	r1, r1
 800f73a:	b2a3      	uxth	r3, r4
 800f73c:	1ac9      	subs	r1, r1, r3
 800f73e:	b289      	uxth	r1, r1
 800f740:	e7e6      	b.n	800f710 <_ZN8touchgfx14CircleProgress8setValueEi+0x28>
        circle.updateArcEnd(startAngle - progress);
 800f742:	f105 0490 	add.w	r4, r5, #144	; 0x90
 800f746:	1a30      	subs	r0, r6, r0
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800f748:	0140      	lsls	r0, r0, #5
        CWRUtil::Q5 endAngleQ5 = CWRUtil::toQ5<T>(endAngle);
 800f74a:	9001      	str	r0, [sp, #4]
            return v;
 800f74c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
        if (circleArcAngleEnd == endAngleQ5)
 800f750:	4298      	cmp	r0, r3
 800f752:	d0ed      	beq.n	800f730 <_ZN8touchgfx14CircleProgress8setValueEi+0x48>
        Rect minimalRect = getMinimalRectForUpdatedEndAngle(endAngleQ5);
 800f754:	aa01      	add	r2, sp, #4
 800f756:	4621      	mov	r1, r4
 800f758:	a802      	add	r0, sp, #8
 800f75a:	f002 ff3c 	bl	80125d6 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>
        circleArcAngleEnd = endAngleQ5;
 800f75e:	9b01      	ldr	r3, [sp, #4]
 800f760:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
        invalidateRect(minimalRect);
 800f764:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800f768:	691b      	ldr	r3, [r3, #16]
 800f76a:	a902      	add	r1, sp, #8
 800f76c:	4620      	mov	r0, r4
 800f76e:	4798      	blx	r3
 800f770:	e7de      	b.n	800f730 <_ZN8touchgfx14CircleProgress8setValueEi+0x48>
        Rect minimalRect = getMinimalRectForUpdatedEndAngle(endAngleQ5);
 800f772:	aa01      	add	r2, sp, #4
 800f774:	4621      	mov	r1, r4
 800f776:	a802      	add	r0, sp, #8
 800f778:	f002 ff2d 	bl	80125d6 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>
        circleArcAngleEnd = endAngleQ5;
 800f77c:	9b01      	ldr	r3, [sp, #4]
 800f77e:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
        invalidateRect(minimalRect);
 800f782:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	a902      	add	r1, sp, #8
 800f78a:	4620      	mov	r0, r4
 800f78c:	4798      	blx	r3
 800f78e:	e7cf      	b.n	800f730 <_ZN8touchgfx14CircleProgress8setValueEi+0x48>

0800f790 <_ZN8touchgfx3absIlEET_S1_>:
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    if (d < 0)
 800f790:	2800      	cmp	r0, #0
 800f792:	db00      	blt.n	800f796 <_ZN8touchgfx3absIlEET_S1_+0x6>
    {
        return -d;
    }
    return d;
}
 800f794:	4770      	bx	lr
        return -d;
 800f796:	4240      	negs	r0, r0
 800f798:	e7fc      	b.n	800f794 <_ZN8touchgfx3absIlEET_S1_+0x4>

0800f79a <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
    {
        return pressed;
    }
 800f79a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800f79e:	4770      	bx	lr

0800f7a0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 800f7a0:	b570      	push	{r4, r5, r6, lr}
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	460e      	mov	r6, r1
    bool wasPressed = pressed;
 800f7a6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
        return _type;
 800f7aa:	790b      	ldrb	r3, [r1, #4]
    pressed = (event.getType() == ClickEvent::PRESSED);
 800f7ac:	fab3 f383 	clz	r3, r3
 800f7b0:	095b      	lsrs	r3, r3, #5
 800f7b2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 800f7b6:	b103      	cbz	r3, 800f7ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1a>
 800f7b8:	b10d      	cbz	r5, 800f7be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1e>
 800f7ba:	b923      	cbnz	r3, 800f7c6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x26>
 800f7bc:	b11d      	cbz	r5, 800f7c6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x26>
    {
        // Pressed state changed, so invalidate
        invalidate();
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	695b      	ldr	r3, [r3, #20]
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 800f7c6:	b115      	cbz	r5, 800f7ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 800f7c8:	7933      	ldrb	r3, [r6, #4]
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d000      	beq.n	800f7d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
        if (action->isValid())
        {
            action->execute(*this);
        }
    }
}
 800f7ce:	bd70      	pop	{r4, r5, r6, pc}
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 800f7d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d0fb      	beq.n	800f7ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
        if (action->isValid())
 800f7d6:	6803      	ldr	r3, [r0, #0]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	4798      	blx	r3
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d0f6      	beq.n	800f7ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
            action->execute(*this);
 800f7e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f7e2:	6803      	ldr	r3, [r0, #0]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	4621      	mov	r1, r4
 800f7e8:	4798      	blx	r3
}
 800f7ea:	e7f0      	b.n	800f7ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>

0800f7ec <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
    }
}

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4604      	mov	r4, r0
    up = bmpReleased;
 800f7f0:	880b      	ldrh	r3, [r1, #0]
 800f7f2:	85c3      	strh	r3, [r0, #46]	; 0x2e
    down = bmpPressed;
 800f7f4:	8813      	ldrh	r3, [r2, #0]
 800f7f6:	4605      	mov	r5, r0
 800f7f8:	f825 3f30 	strh.w	r3, [r5, #48]!
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	f011 f84f 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
        rect.width = width;
 800f802:	8120      	strh	r0, [r4, #8]
    Drawable::setHeight(down.getHeight());
 800f804:	4628      	mov	r0, r5
 800f806:	f011 f883 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
        rect.height = height;
 800f80a:	8160      	strh	r0, [r4, #10]
}
 800f80c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f810 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
{
 800f810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f814:	b08b      	sub	sp, #44	; 0x2c
 800f816:	4606      	mov	r6, r0
 800f818:	460d      	mov	r5, r1
    Bitmap bmp(AbstractButton::pressed ? down : up);
 800f81a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d051      	beq.n	800f8c6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xb6>
 800f822:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	ac0a      	add	r4, sp, #40	; 0x28
 800f82a:	f824 3d04 	strh.w	r3, [r4, #-4]!
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 800f82e:	4620      	mov	r0, r4
 800f830:	f011 f836 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f834:	b207      	sxth	r7, r0
 800f836:	4620      	mov	r0, r4
 800f838:	f011 f86a 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
        this->x = x;
 800f83c:	2200      	movs	r2, #0
        this->y = y;
 800f83e:	f8ad 201e 	strh.w	r2, [sp, #30]
        this->width = width;
 800f842:	f8ad 7020 	strh.w	r7, [sp, #32]
        this->height = height;
 800f846:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        return x + width;
 800f84a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800f84e:	88ab      	ldrh	r3, [r5, #4]
 800f850:	fa13 f381 	uxtah	r3, r3, r1
 800f854:	b29b      	uxth	r3, r3
 800f856:	b218      	sxth	r0, r3
        return !(x >= other.right() || right() <= other.x ||
 800f858:	4282      	cmp	r2, r0
 800f85a:	da39      	bge.n	800f8d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xc0>
        return x + width;
 800f85c:	fa1f fc87 	uxth.w	ip, r7
 800f860:	fa0f f78c 	sxth.w	r7, ip
        return !(x >= other.right() || right() <= other.x ||
 800f864:	42b9      	cmp	r1, r7
 800f866:	da33      	bge.n	800f8d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xc0>
                 y >= other.bottom() || bottom() <= other.y);
 800f868:	fa0f f882 	sxth.w	r8, r2
        return y + height;
 800f86c:	f9b5 e002 	ldrsh.w	lr, [r5, #2]
 800f870:	88ec      	ldrh	r4, [r5, #6]
 800f872:	fa14 f48e 	uxtah	r4, r4, lr
 800f876:	b224      	sxth	r4, r4
        return !(x >= other.right() || right() <= other.x ||
 800f878:	45a0      	cmp	r8, r4
 800f87a:	da29      	bge.n	800f8d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xc0>
        return y + height;
 800f87c:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 800f880:	fa14 f488 	uxtah	r4, r4, r8
 800f884:	b2a4      	uxth	r4, r4
 800f886:	fa0f f984 	sxth.w	r9, r4
        return !(x >= other.right() || right() <= other.x ||
 800f88a:	45ce      	cmp	lr, r9
 800f88c:	da20      	bge.n	800f8d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xc0>
            int16_t newX = MAX(x, other.x);
 800f88e:	428a      	cmp	r2, r1
 800f890:	dd00      	ble.n	800f894 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x84>
 800f892:	4611      	mov	r1, r2
            int16_t newY = MAX(y, other.y);
 800f894:	45f0      	cmp	r8, lr
 800f896:	dd00      	ble.n	800f89a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800f898:	46c6      	mov	lr, r8
            width = MIN(right(), other.right()) - newX;
 800f89a:	42b8      	cmp	r0, r7
 800f89c:	dd00      	ble.n	800f8a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x90>
 800f89e:	4663      	mov	r3, ip
 800f8a0:	1a5b      	subs	r3, r3, r1
 800f8a2:	f8ad 3020 	strh.w	r3, [sp, #32]
        return y + height;
 800f8a6:	886b      	ldrh	r3, [r5, #2]
 800f8a8:	88ea      	ldrh	r2, [r5, #6]
 800f8aa:	4413      	add	r3, r2
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 800f8b0:	4591      	cmp	r9, r2
 800f8b2:	db0b      	blt.n	800f8cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800f8b4:	eba3 030e 	sub.w	r3, r3, lr
 800f8b8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            x = newX;
 800f8bc:	f8ad 101c 	strh.w	r1, [sp, #28]
            y = newY;
 800f8c0:	f8ad e01e 	strh.w	lr, [sp, #30]
 800f8c4:	e00d      	b.n	800f8e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xd2>
    Bitmap bmp(AbstractButton::pressed ? down : up);
 800f8c6:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 800f8ca:	e7ac      	b.n	800f826 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x16>
            height = MIN(bottom(), other.bottom()) - newY;
 800f8cc:	4623      	mov	r3, r4
 800f8ce:	e7f1      	b.n	800f8b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
            x = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	f8ad 301c 	strh.w	r3, [sp, #28]
            y = 0;
 800f8d6:	f8ad 301e 	strh.w	r3, [sp, #30]
            width = 0;
 800f8da:	f8ad 3020 	strh.w	r3, [sp, #32]
            height = 0;
 800f8de:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800f8e2:	4b1c      	ldr	r3, [pc, #112]	; (800f954 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x144>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	b173      	cbz	r3, 800f906 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf6>
        return bitmapId;
 800f8e8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 800f8ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d005      	beq.n	800f900 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
        return ((width == 0) || (height == 0));
 800f8f4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800f8f8:	b113      	cbz	r3, 800f900 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 800f8fa:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800f8fe:	b943      	cbnz	r3, 800f912 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x102>
}
 800f900:	b00b      	add	sp, #44	; 0x2c
 800f902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800f906:	4b14      	ldr	r3, [pc, #80]	; (800f958 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x148>)
 800f908:	4a14      	ldr	r2, [pc, #80]	; (800f95c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14c>)
 800f90a:	2195      	movs	r1, #149	; 0x95
 800f90c:	4814      	ldr	r0, [pc, #80]	; (800f960 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x150>)
 800f90e:	f013 f913 	bl	8022b38 <__assert_func>
        this->x = 0;
 800f912:	2300      	movs	r3, #0
 800f914:	f8ad 3014 	strh.w	r3, [sp, #20]
        this->y = 0;
 800f918:	f8ad 3016 	strh.w	r3, [sp, #22]
        this->width = 0;
 800f91c:	f8ad 3018 	strh.w	r3, [sp, #24]
        this->height = 0;
 800f920:	f8ad 301a 	strh.w	r3, [sp, #26]
        translateRectToAbsolute(r);
 800f924:	6833      	ldr	r3, [r6, #0]
 800f926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f928:	a905      	add	r1, sp, #20
 800f92a:	4630      	mov	r0, r6
 800f92c:	4798      	blx	r3
 800f92e:	4b0d      	ldr	r3, [pc, #52]	; (800f964 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x154>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	6898      	ldr	r0, [r3, #8]
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 800f934:	6803      	ldr	r3, [r0, #0]
 800f936:	68dc      	ldr	r4, [r3, #12]
 800f938:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
 800f93c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800f940:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800f944:	2501      	movs	r5, #1
 800f946:	9502      	str	r5, [sp, #8]
 800f948:	9101      	str	r1, [sp, #4]
 800f94a:	a907      	add	r1, sp, #28
 800f94c:	9100      	str	r1, [sp, #0]
 800f94e:	a909      	add	r1, sp, #36	; 0x24
 800f950:	47a0      	blx	r4
}
 800f952:	e7d5      	b.n	800f900 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 800f954:	2000bb04 	.word	0x2000bb04
 800f958:	080247a4 	.word	0x080247a4
 800f95c:	0802482c 	.word	0x0802482c
 800f960:	080247e0 	.word	0x080247e0
 800f964:	2000ba4c 	.word	0x2000ba4c

0800f968 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 800f968:	b510      	push	{r4, lr}
 800f96a:	4604      	mov	r4, r0
    if (alpha < 255)
 800f96c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800f970:	2bff      	cmp	r3, #255	; 0xff
 800f972:	d006      	beq.n	800f982 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
        this->x = x;
 800f974:	2300      	movs	r3, #0
 800f976:	8003      	strh	r3, [r0, #0]
        this->y = y;
 800f978:	8043      	strh	r3, [r0, #2]
        this->width = width;
 800f97a:	8083      	strh	r3, [r0, #4]
        this->height = height;
 800f97c:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(0, 0, 0, 0);
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
}
 800f97e:	4620      	mov	r0, r4
 800f980:	bd10      	pop	{r4, pc}
    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 800f982:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800f986:	b91b      	cbnz	r3, 800f990 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800f988:	312e      	adds	r1, #46	; 0x2e
 800f98a:	f010 fff9 	bl	8020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f98e:	e7f6      	b.n	800f97e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800f990:	3130      	adds	r1, #48	; 0x30
 800f992:	f010 fff5 	bl	8020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f996:	e7f2      	b.n	800f97e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>

0800f998 <_ZNK8touchgfx14ButtonWithIcon7getTypeEv>:
     * @return TYPE_BUTTONWITHICON.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_BUTTONWITHICON;
    }
 800f998:	2006      	movs	r0, #6
 800f99a:	4770      	bx	lr

0800f99c <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800f99c:	4770      	bx	lr

0800f99e <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800f99e:	b510      	push	{r4, lr}
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	213c      	movs	r1, #60	; 0x3c
 800f9a4:	f013 f8ac 	bl	8022b00 <_ZdlPvj>
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	bd10      	pop	{r4, pc}

0800f9ac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
{
}

void ButtonWithIcon::setBitmaps(const Bitmap& newBackgroundReleased, const Bitmap& newBackgroundPressed,
                                const Bitmap& newIconReleased, const Bitmap& newIconPressed)
{
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	4605      	mov	r5, r0
 800f9b0:	461c      	mov	r4, r3
 800f9b2:	9e04      	ldr	r6, [sp, #16]
    Button::setBitmaps(newBackgroundReleased, newBackgroundPressed);
 800f9b4:	f7ff ff1a 	bl	800f7ec <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    iconReleased = newIconReleased;
 800f9b8:	8823      	ldrh	r3, [r4, #0]
 800f9ba:	86ab      	strh	r3, [r5, #52]	; 0x34
    iconPressed = newIconPressed;
 800f9bc:	8833      	ldrh	r3, [r6, #0]
 800f9be:	86eb      	strh	r3, [r5, #54]	; 0x36
        return rect.width;
 800f9c0:	f9b5 0008 	ldrsh.w	r0, [r5, #8]

    iconX = (getWidth() / 2) - (newIconPressed.getWidth() / 2);
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	db16      	blt.n	800f9f6 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x4a>
 800f9c8:	f3c0 044f 	ubfx	r4, r0, #1, #16
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	f010 ff67 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f9d2:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800f9d6:	1a20      	subs	r0, r4, r0
 800f9d8:	8728      	strh	r0, [r5, #56]	; 0x38
        return rect.height;
 800f9da:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
    iconY = (getHeight() / 2) - (newIconPressed.getHeight() / 2);
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	db0b      	blt.n	800f9fa <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x4e>
 800f9e2:	f3c0 044f 	ubfx	r4, r0, #1, #16
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f010 ff92 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f9ec:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800f9f0:	1a20      	subs	r0, r4, r0
 800f9f2:	8768      	strh	r0, [r5, #58]	; 0x3a
}
 800f9f4:	bd70      	pop	{r4, r5, r6, pc}
    iconX = (getWidth() / 2) - (newIconPressed.getWidth() / 2);
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	e7e6      	b.n	800f9c8 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x1c>
    iconY = (getHeight() / 2) - (newIconPressed.getHeight() / 2);
 800f9fa:	3001      	adds	r0, #1
 800f9fc:	e7f1      	b.n	800f9e2 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x36>
	...

0800fa00 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:

void ButtonWithIcon::draw(const Rect& invalidatedArea) const
{
 800fa00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa04:	b08d      	sub	sp, #52	; 0x34
 800fa06:	4605      	mov	r5, r0
 800fa08:	4688      	mov	r8, r1
    Button::draw(invalidatedArea);
 800fa0a:	f7ff ff01 	bl	800f810 <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    Bitmap bmp((pressed ? iconPressed : iconReleased));
 800fa0e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d061      	beq.n	800fada <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xda>
 800fa16:	f105 0336 	add.w	r3, r5, #54	; 0x36
 800fa1a:	881b      	ldrh	r3, [r3, #0]
 800fa1c:	ae0c      	add	r6, sp, #48	; 0x30
 800fa1e:	f826 3d04 	strh.w	r3, [r6, #-4]!
    Rect iconRect(iconX, iconY, bmp.getWidth(), bmp.getHeight());
 800fa22:	f9b5 7038 	ldrsh.w	r7, [r5, #56]	; 0x38
 800fa26:	f9b5 903a 	ldrsh.w	r9, [r5, #58]	; 0x3a
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f010 ff38 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fa30:	b204      	sxth	r4, r0
 800fa32:	4630      	mov	r0, r6
 800fa34:	f010 ff6c 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
        this->x = x;
 800fa38:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
        this->y = y;
 800fa3c:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
        this->width = width;
 800fa40:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
        this->height = height;
 800fa44:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        Rect r = *this;
 800fa48:	ab07      	add	r3, sp, #28
 800fa4a:	f8d8 0000 	ldr.w	r0, [r8]
 800fa4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa52:	c303      	stmia	r3!, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 800fa54:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
        return x + width;
 800fa58:	b2a4      	uxth	r4, r4
 800fa5a:	fa14 f487 	uxtah	r4, r4, r7
 800fa5e:	b2a4      	uxth	r4, r4
 800fa60:	b221      	sxth	r1, r4
        return !(x >= other.right() || right() <= other.x ||
 800fa62:	428a      	cmp	r2, r1
 800fa64:	da3e      	bge.n	800fae4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>
        return x + width;
 800fa66:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fa6a:	fa13 f382 	uxtah	r3, r3, r2
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	b21e      	sxth	r6, r3
        return !(x >= other.right() || right() <= other.x ||
 800fa72:	42b7      	cmp	r7, r6
 800fa74:	da36      	bge.n	800fae4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>
                 y >= other.bottom() || bottom() <= other.y);
 800fa76:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
        return y + height;
 800fa7a:	fa0f fc89 	sxth.w	ip, r9
 800fa7e:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 800fa82:	fa10 f08c 	uxtah	r0, r0, ip
 800fa86:	b200      	sxth	r0, r0
        return !(x >= other.right() || right() <= other.x ||
 800fa88:	4586      	cmp	lr, r0
 800fa8a:	da2b      	bge.n	800fae4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>
        return y + height;
 800fa8c:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 800fa90:	fa10 f08e 	uxtah	r0, r0, lr
 800fa94:	b280      	uxth	r0, r0
 800fa96:	fa0f f880 	sxth.w	r8, r0
        return !(x >= other.right() || right() <= other.x ||
 800fa9a:	45c4      	cmp	ip, r8
 800fa9c:	da22      	bge.n	800fae4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>
            int16_t newX = MAX(x, other.x);
 800fa9e:	42ba      	cmp	r2, r7
 800faa0:	dd00      	ble.n	800faa4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa4>
 800faa2:	4617      	mov	r7, r2
            int16_t newY = MAX(y, other.y);
 800faa4:	45e6      	cmp	lr, ip
 800faa6:	dd00      	ble.n	800faaa <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xaa>
 800faa8:	46f4      	mov	ip, lr
            width = MIN(right(), other.right()) - newX;
 800faaa:	42b1      	cmp	r1, r6
 800faac:	dd00      	ble.n	800fab0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xb0>
 800faae:	461c      	mov	r4, r3
 800fab0:	1be4      	subs	r4, r4, r7
 800fab2:	f8ad 4020 	strh.w	r4, [sp, #32]
        return y + height;
 800fab6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800faba:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 800fabe:	4413      	add	r3, r2
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 800fac4:	4590      	cmp	r8, r2
 800fac6:	db0b      	blt.n	800fae0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 800fac8:	eba3 030c 	sub.w	r3, r3, ip
 800facc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            x = newX;
 800fad0:	f8ad 701c 	strh.w	r7, [sp, #28]
            y = newY;
 800fad4:	f8ad c01e 	strh.w	ip, [sp, #30]
 800fad8:	e00d      	b.n	800faf6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf6>
    Bitmap bmp((pressed ? iconPressed : iconReleased));
 800fada:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800fade:	e79c      	b.n	800fa1a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x1a>
            height = MIN(bottom(), other.bottom()) - newY;
 800fae0:	4603      	mov	r3, r0
 800fae2:	e7f1      	b.n	800fac8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xc8>
            x = 0;
 800fae4:	2300      	movs	r3, #0
 800fae6:	f8ad 301c 	strh.w	r3, [sp, #28]
            y = 0;
 800faea:	f8ad 301e 	strh.w	r3, [sp, #30]
            width = 0;
 800faee:	f8ad 3020 	strh.w	r3, [sp, #32]
            height = 0;
 800faf2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800faf6:	4b26      	ldr	r3, [pc, #152]	; (800fb90 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x190>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	b173      	cbz	r3, 800fb1a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x11a>
        return bitmapId;
 800fafc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    Rect dirty = invalidatedArea & iconRect;
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 800fb00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d005      	beq.n	800fb14 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x114>
        return ((width == 0) || (height == 0));
 800fb08:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800fb0c:	b113      	cbz	r3, 800fb14 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x114>
 800fb0e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800fb12:	b943      	cbnz	r3, 800fb26 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x126>
        translateRectToAbsolute(r);
        dirty.x -= iconX;
        dirty.y -= iconY;
        HAL::lcd().drawPartialBitmap(bmp, r.x + iconX, r.y + iconY, dirty, alpha);
    }
}
 800fb14:	b00d      	add	sp, #52	; 0x34
 800fb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800fb1a:	4b1e      	ldr	r3, [pc, #120]	; (800fb94 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x194>)
 800fb1c:	4a1e      	ldr	r2, [pc, #120]	; (800fb98 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x198>)
 800fb1e:	2195      	movs	r1, #149	; 0x95
 800fb20:	481e      	ldr	r0, [pc, #120]	; (800fb9c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x19c>)
 800fb22:	f013 f809 	bl	8022b38 <__assert_func>
        this->x = 0;
 800fb26:	2300      	movs	r3, #0
 800fb28:	f8ad 3014 	strh.w	r3, [sp, #20]
        this->y = 0;
 800fb2c:	f8ad 3016 	strh.w	r3, [sp, #22]
        this->width = 0;
 800fb30:	f8ad 3018 	strh.w	r3, [sp, #24]
        this->height = 0;
 800fb34:	f8ad 301a 	strh.w	r3, [sp, #26]
        translateRectToAbsolute(r);
 800fb38:	682b      	ldr	r3, [r5, #0]
 800fb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb3c:	a905      	add	r1, sp, #20
 800fb3e:	4628      	mov	r0, r5
 800fb40:	4798      	blx	r3
        dirty.x -= iconX;
 800fb42:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
 800fb46:	b292      	uxth	r2, r2
 800fb48:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800fb4c:	1a9b      	subs	r3, r3, r2
 800fb4e:	f8ad 301c 	strh.w	r3, [sp, #28]
        dirty.y -= iconY;
 800fb52:	f9b5 303a 	ldrsh.w	r3, [r5, #58]	; 0x3a
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800fb5c:	1ac9      	subs	r1, r1, r3
 800fb5e:	f8ad 101e 	strh.w	r1, [sp, #30]
 800fb62:	490f      	ldr	r1, [pc, #60]	; (800fba0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x1a0>)
 800fb64:	6809      	ldr	r1, [r1, #0]
 800fb66:	6888      	ldr	r0, [r1, #8]
        HAL::lcd().drawPartialBitmap(bmp, r.x + iconX, r.y + iconY, dirty, alpha);
 800fb68:	6801      	ldr	r1, [r0, #0]
 800fb6a:	68cc      	ldr	r4, [r1, #12]
 800fb6c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fb70:	440a      	add	r2, r1
 800fb72:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800fb76:	440b      	add	r3, r1
 800fb78:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
 800fb7c:	2501      	movs	r5, #1
 800fb7e:	9502      	str	r5, [sp, #8]
 800fb80:	9101      	str	r1, [sp, #4]
 800fb82:	a907      	add	r1, sp, #28
 800fb84:	9100      	str	r1, [sp, #0]
 800fb86:	b21b      	sxth	r3, r3
 800fb88:	b212      	sxth	r2, r2
 800fb8a:	a90b      	add	r1, sp, #44	; 0x2c
 800fb8c:	47a0      	blx	r4
}
 800fb8e:	e7c1      	b.n	800fb14 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x114>
 800fb90:	2000bb04 	.word	0x2000bb04
 800fb94:	080247a4 	.word	0x080247a4
 800fb98:	080248d8 	.word	0x080248d8
 800fb9c:	080247e0 	.word	0x080247e0
 800fba0:	2000ba4c 	.word	0x2000ba4c

0800fba4 <_ZN8touchgfx14ButtonWithIconC1Ev>:
ButtonWithIcon::ButtonWithIcon() :
 800fba4:	b410      	push	{r4}
        this->x = x;
 800fba6:	2200      	movs	r2, #0
 800fba8:	8082      	strh	r2, [r0, #4]
        this->y = y;
 800fbaa:	80c2      	strh	r2, [r0, #6]
        this->width = width;
 800fbac:	8102      	strh	r2, [r0, #8]
        this->height = height;
 800fbae:	8142      	strh	r2, [r0, #10]
        this->x = 0;
 800fbb0:	8182      	strh	r2, [r0, #12]
        this->y = 0;
 800fbb2:	81c2      	strh	r2, [r0, #14]
        this->width = 0;
 800fbb4:	8202      	strh	r2, [r0, #16]
        this->height = 0;
 800fbb6:	8242      	strh	r2, [r0, #18]
        visible(true)
 800fbb8:	6142      	str	r2, [r0, #20]
 800fbba:	6182      	str	r2, [r0, #24]
 800fbbc:	61c2      	str	r2, [r0, #28]
 800fbbe:	2101      	movs	r1, #1
 800fbc0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    AbstractButton() : Widget(), action(), pressed(false)
 800fbc4:	6282      	str	r2, [r0, #40]	; 0x28
 800fbc6:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
        touchable = touch;
 800fbca:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800fbce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fbd2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800fbd4:	8601      	strh	r1, [r0, #48]	; 0x30
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800fbd6:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    iconY(0)
 800fbda:	4c04      	ldr	r4, [pc, #16]	; (800fbec <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 800fbdc:	6004      	str	r4, [r0, #0]
 800fbde:	8681      	strh	r1, [r0, #52]	; 0x34
 800fbe0:	86c1      	strh	r1, [r0, #54]	; 0x36
 800fbe2:	8702      	strh	r2, [r0, #56]	; 0x38
 800fbe4:	8742      	strh	r2, [r0, #58]	; 0x3a
}
 800fbe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbea:	4770      	bx	lr
 800fbec:	08024868 	.word	0x08024868

0800fbf0 <_ZNK8touchgfx5Image7getTypeEv>:
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_IMAGE;
    }
 800fbf0:	2008      	movs	r0, #8
 800fbf2:	4770      	bx	lr

0800fbf4 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800fbf4:	4770      	bx	lr
	...

0800fbf8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
}

void Image::draw(const Rect& invalidatedArea) const
{
 800fbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbfc:	b08a      	sub	sp, #40	; 0x28
 800fbfe:	4607      	mov	r7, r0
 800fc00:	460e      	mov	r6, r1
        this->x = 0;
 800fc02:	2400      	movs	r4, #0
 800fc04:	f8ad 4018 	strh.w	r4, [sp, #24]
        this->y = 0;
 800fc08:	f8ad 401a 	strh.w	r4, [sp, #26]
        this->width = 0;
 800fc0c:	f8ad 401c 	strh.w	r4, [sp, #28]
        this->height = 0;
 800fc10:	f8ad 401e 	strh.w	r4, [sp, #30]
    Rect meAbs;
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 800fc14:	4605      	mov	r5, r0
 800fc16:	f855 3b26 	ldr.w	r3, [r5], #38
 800fc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1c:	a906      	add	r1, sp, #24
 800fc1e:	4798      	blx	r3
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 800fc20:	4628      	mov	r0, r5
 800fc22:	f010 fe3d 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fc26:	fa0f f880 	sxth.w	r8, r0
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f010 fe70 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
        this->x = x;
 800fc30:	f8ad 4020 	strh.w	r4, [sp, #32]
        this->y = y;
 800fc34:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
        this->width = width;
 800fc38:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
        this->height = height;
 800fc3c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        Rect r = *this;
 800fc40:	ab04      	add	r3, sp, #16
 800fc42:	aa0a      	add	r2, sp, #40	; 0x28
 800fc44:	e912 0003 	ldmdb	r2, {r0, r1}
 800fc48:	e883 0003 	stmia.w	r3, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 800fc4c:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
        return x + width;
 800fc50:	f9b6 1000 	ldrsh.w	r1, [r6]
 800fc54:	88b3      	ldrh	r3, [r6, #4]
 800fc56:	fa13 f381 	uxtah	r3, r3, r1
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	b21c      	sxth	r4, r3
        return !(x >= other.right() || right() <= other.x ||
 800fc5e:	42a0      	cmp	r0, r4
 800fc60:	da3c      	bge.n	800fcdc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe4>
        return x + width;
 800fc62:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800fc66:	fa12 f280 	uxtah	r2, r2, r0
 800fc6a:	b292      	uxth	r2, r2
 800fc6c:	fa0f fe82 	sxth.w	lr, r2
        return !(x >= other.right() || right() <= other.x ||
 800fc70:	4571      	cmp	r1, lr
 800fc72:	da33      	bge.n	800fcdc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe4>
                 y >= other.bottom() || bottom() <= other.y);
 800fc74:	f9bd 9012 	ldrsh.w	r9, [sp, #18]
        return y + height;
 800fc78:	f9b6 8002 	ldrsh.w	r8, [r6, #2]
 800fc7c:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 800fc80:	fa1c fc88 	uxtah	ip, ip, r8
 800fc84:	fa0f fc8c 	sxth.w	ip, ip
        return !(x >= other.right() || right() <= other.x ||
 800fc88:	45e1      	cmp	r9, ip
 800fc8a:	da27      	bge.n	800fcdc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe4>
        return y + height;
 800fc8c:	f8bd c016 	ldrh.w	ip, [sp, #22]
 800fc90:	fa1c fc89 	uxtah	ip, ip, r9
 800fc94:	fa1f fc8c 	uxth.w	ip, ip
 800fc98:	fa0f fa8c 	sxth.w	sl, ip
        return !(x >= other.right() || right() <= other.x ||
 800fc9c:	45d0      	cmp	r8, sl
 800fc9e:	da1d      	bge.n	800fcdc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe4>
            int16_t newX = MAX(x, other.x);
 800fca0:	4288      	cmp	r0, r1
 800fca2:	dd00      	ble.n	800fca6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xae>
 800fca4:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 800fca6:	45c1      	cmp	r9, r8
 800fca8:	dd00      	ble.n	800fcac <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xb4>
 800fcaa:	46c8      	mov	r8, r9
            width = MIN(right(), other.right()) - newX;
 800fcac:	4574      	cmp	r4, lr
 800fcae:	dd00      	ble.n	800fcb2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xba>
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	1a5b      	subs	r3, r3, r1
 800fcb4:	f8ad 3014 	strh.w	r3, [sp, #20]
        return y + height;
 800fcb8:	8873      	ldrh	r3, [r6, #2]
 800fcba:	88f2      	ldrh	r2, [r6, #6]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 800fcc2:	4592      	cmp	sl, r2
 800fcc4:	db08      	blt.n	800fcd8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe0>
 800fcc6:	eba3 0308 	sub.w	r3, r3, r8
 800fcca:	f8ad 3016 	strh.w	r3, [sp, #22]
            x = newX;
 800fcce:	f8ad 1010 	strh.w	r1, [sp, #16]
            y = newY;
 800fcd2:	f8ad 8012 	strh.w	r8, [sp, #18]
 800fcd6:	e00a      	b.n	800fcee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xf6>
            height = MIN(bottom(), other.bottom()) - newY;
 800fcd8:	4663      	mov	r3, ip
 800fcda:	e7f4      	b.n	800fcc6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xce>
            x = 0;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	f8ad 3010 	strh.w	r3, [sp, #16]
            y = 0;
 800fce2:	f8ad 3012 	strh.w	r3, [sp, #18]
            width = 0;
 800fce6:	f8ad 3014 	strh.w	r3, [sp, #20]
            height = 0;
 800fcea:	f8ad 3016 	strh.w	r3, [sp, #22]
        return ((width == 0) || (height == 0));
 800fcee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800fcf2:	b113      	cbz	r3, 800fcfa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x102>
 800fcf4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800fcf8:	b913      	cbnz	r3, 800fd00 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x108>

    if (!dirtyBitmapArea.isEmpty())
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
    }
}
 800fcfa:	b00a      	add	sp, #40	; 0x28
 800fcfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd00:	4b09      	ldr	r3, [pc, #36]	; (800fd28 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x130>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	6898      	ldr	r0, [r3, #8]
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 800fd06:	6803      	ldr	r3, [r0, #0]
 800fd08:	68dc      	ldr	r4, [r3, #12]
 800fd0a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800fd0e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800fd12:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800fd16:	2601      	movs	r6, #1
 800fd18:	9602      	str	r6, [sp, #8]
 800fd1a:	9101      	str	r1, [sp, #4]
 800fd1c:	a904      	add	r1, sp, #16
 800fd1e:	9100      	str	r1, [sp, #0]
 800fd20:	4629      	mov	r1, r5
 800fd22:	47a0      	blx	r4
}
 800fd24:	e7e9      	b.n	800fcfa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x102>
 800fd26:	bf00      	nop
 800fd28:	2000ba4c 	.word	0x2000ba4c

0800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
{
 800fd2c:	b570      	push	{r4, r5, r6, lr}
 800fd2e:	4604      	mov	r4, r0
    bitmap = bmp;
 800fd30:	880b      	ldrh	r3, [r1, #0]
 800fd32:	84c3      	strh	r3, [r0, #38]	; 0x26
    setWidth(bitmap.getWidth());
 800fd34:	4605      	mov	r5, r0
 800fd36:	f855 3b26 	ldr.w	r3, [r5], #38
 800fd3a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	f010 fdaf 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fd42:	b201      	sxth	r1, r0
 800fd44:	4620      	mov	r0, r4
 800fd46:	47b0      	blx	r6
    setHeight(bitmap.getHeight());
 800fd48:	6823      	ldr	r3, [r4, #0]
 800fd4a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	f010 fddf 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd52:	b201      	sxth	r1, r0
 800fd54:	4620      	mov	r0, r4
 800fd56:	47b0      	blx	r6
    hasTransparentPixels = bitmap.hasTransparentPixels();
 800fd58:	4628      	mov	r0, r5
 800fd5a:	f010 fe69 	bl	8020a30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800fd5e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 800fd62:	bd70      	pop	{r4, r5, r6, pc}

0800fd64 <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 800fd64:	b510      	push	{r4, lr}
 800fd66:	4604      	mov	r4, r0
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 800fd68:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800fd6c:	2bff      	cmp	r3, #255	; 0xff
 800fd6e:	d006      	beq.n	800fd7e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
        this->x = x;
 800fd70:	2300      	movs	r3, #0
 800fd72:	8003      	strh	r3, [r0, #0]
        this->y = y;
 800fd74:	8043      	strh	r3, [r0, #2]
        this->width = width;
 800fd76:	8083      	strh	r3, [r0, #4]
        this->height = height;
 800fd78:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(0, 0, 0, 0);
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
}
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	bd10      	pop	{r4, pc}
    return bitmap.getSolidRect();
 800fd7e:	3126      	adds	r1, #38	; 0x26
 800fd80:	f010 fdfe 	bl	8020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fd84:	e7f9      	b.n	800fd7a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800fd86 <_ZN8touchgfx5ImageD0Ev>:
 800fd86:	b510      	push	{r4, lr}
 800fd88:	4604      	mov	r4, r0
 800fd8a:	212c      	movs	r1, #44	; 0x2c
 800fd8c:	f012 feb8 	bl	8022b00 <_ZdlPvj>
 800fd90:	4620      	mov	r0, r4
 800fd92:	bd10      	pop	{r4, pc}

0800fd94 <_ZNK8touchgfx6Widget7getTypeEv>:
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_WIDGET;
    }
 800fd94:	2001      	movs	r0, #1
 800fd96:	4770      	bx	lr

0800fd98 <_ZN8touchgfx13ScalableImage8setAlphaEh>:
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    virtual void setAlpha(uint8_t alpha)
    {
        this->alpha = alpha;
 800fd98:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    }
 800fd9c:	4770      	bx	lr

0800fd9e <_ZNK8touchgfx13ScalableImage8getAlphaEv>:
     * @return The current alpha value.
     */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800fd9e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 800fda2:	4770      	bx	lr

0800fda4 <_ZNK8touchgfx13ScalableImage7getTypeEv>:
     * @return TYPE_SCALABLEIMAGE.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_SCALABLEIMAGE;
    }
 800fda4:	200b      	movs	r0, #11
 800fda6:	4770      	bx	lr

0800fda8 <_ZN8touchgfx13ScalableImageD1Ev>:
{
}

ScalableImage::~ScalableImage()
{
}
 800fda8:	4770      	bx	lr

0800fdaa <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
    setHeight(bitmap.getHeight());
}

void ScalableImage::setScalingAlgorithm(ScalingAlgorithm algorithm)
{
    currentScalingAlgorithm = algorithm;
 800fdaa:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
}
 800fdae:	4770      	bx	lr

0800fdb0 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:

ScalableImage::ScalingAlgorithm ScalableImage::getScalingAlgorithm()
{
    return currentScalingAlgorithm;
}
 800fdb0:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800fdb4:	4770      	bx	lr

0800fdb6 <_ZN8touchgfx13ScalableImageD0Ev>:
ScalableImage::~ScalableImage()
 800fdb6:	b510      	push	{r4, lr}
 800fdb8:	4604      	mov	r4, r0
}
 800fdba:	212c      	movs	r1, #44	; 0x2c
 800fdbc:	f012 fea0 	bl	8022b00 <_ZdlPvj>
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	bd10      	pop	{r4, pc}

0800fdc4 <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>:
{
 800fdc4:	b570      	push	{r4, r5, r6, lr}
 800fdc6:	4604      	mov	r4, r0
    bitmap = bmp;
 800fdc8:	880b      	ldrh	r3, [r1, #0]
 800fdca:	8503      	strh	r3, [r0, #40]	; 0x28
    setWidth(bitmap.getWidth());
 800fdcc:	4605      	mov	r5, r0
 800fdce:	f855 3b28 	ldr.w	r3, [r5], #40
 800fdd2:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	f010 fd63 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fdda:	b201      	sxth	r1, r0
 800fddc:	4620      	mov	r0, r4
 800fdde:	47b0      	blx	r6
    setHeight(bitmap.getHeight());
 800fde0:	6823      	ldr	r3, [r4, #0]
 800fde2:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800fde4:	4628      	mov	r0, r5
 800fde6:	f010 fd93 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fdea:	b201      	sxth	r1, r0
 800fdec:	4620      	mov	r0, r4
 800fdee:	47b0      	blx	r6
}
 800fdf0:	bd70      	pop	{r4, r5, r6, pc}

0800fdf2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:

    HAL::getInstance()->unlockFrameBuffer();
}

Rect ScalableImage::getSolidRect() const
{
 800fdf2:	b570      	push	{r4, r5, r6, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	4604      	mov	r4, r0
    if (alpha < 255)
 800fdf8:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 800fdfc:	2bff      	cmp	r3, #255	; 0xff
 800fdfe:	d007      	beq.n	800fe10 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1e>
        this->x = x;
 800fe00:	2300      	movs	r3, #0
 800fe02:	8003      	strh	r3, [r0, #0]
        this->y = y;
 800fe04:	8043      	strh	r3, [r0, #2]
        this->width = width;
 800fe06:	8083      	strh	r3, [r0, #4]
        this->height = height;
 800fe08:	80c3      	strh	r3, [r0, #6]
    if ((bitmap.getSolidRect().width == bitmap.getWidth()) && (bitmap.getSolidRect().height == bitmap.getHeight()))
    {
        return bitmap.getSolidRect();
    }
    return Rect(0, 0, 0, 0);
}
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	b004      	add	sp, #16
 800fe0e:	bd70      	pop	{r4, r5, r6, pc}
    if ((bitmap.getSolidRect().width == bitmap.getWidth()) && (bitmap.getSolidRect().height == bitmap.getHeight()))
 800fe10:	f101 0528 	add.w	r5, r1, #40	; 0x28
 800fe14:	4629      	mov	r1, r5
 800fe16:	4668      	mov	r0, sp
 800fe18:	f010 fdb2 	bl	8020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fe1c:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800fe20:	4628      	mov	r0, r5
 800fe22:	f010 fd3d 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fe26:	4286      	cmp	r6, r0
 800fe28:	d005      	beq.n	800fe36 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>
        this->x = x;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	8023      	strh	r3, [r4, #0]
        this->y = y;
 800fe2e:	8063      	strh	r3, [r4, #2]
        this->width = width;
 800fe30:	80a3      	strh	r3, [r4, #4]
        this->height = height;
 800fe32:	80e3      	strh	r3, [r4, #6]
 800fe34:	e7e9      	b.n	800fe0a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x18>
 800fe36:	4629      	mov	r1, r5
 800fe38:	a802      	add	r0, sp, #8
 800fe3a:	f010 fda1 	bl	8020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fe3e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800fe42:	4628      	mov	r0, r5
 800fe44:	f010 fd64 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fe48:	4286      	cmp	r6, r0
 800fe4a:	d1ee      	bne.n	800fe2a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x38>
        return bitmap.getSolidRect();
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f010 fd96 	bl	8020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fe54:	e7d9      	b.n	800fe0a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x18>
	...

0800fe58 <_ZN8touchgfx13ScalableImageC1Ev>:
        this->x = x;
 800fe58:	2200      	movs	r2, #0
 800fe5a:	8082      	strh	r2, [r0, #4]
        this->y = y;
 800fe5c:	80c2      	strh	r2, [r0, #6]
        this->width = width;
 800fe5e:	8102      	strh	r2, [r0, #8]
        this->height = height;
 800fe60:	8142      	strh	r2, [r0, #10]
        this->x = 0;
 800fe62:	8182      	strh	r2, [r0, #12]
        this->y = 0;
 800fe64:	81c2      	strh	r2, [r0, #14]
        this->width = 0;
 800fe66:	8202      	strh	r2, [r0, #16]
        this->height = 0;
 800fe68:	8242      	strh	r2, [r0, #18]
        visible(true)
 800fe6a:	6142      	str	r2, [r0, #20]
 800fe6c:	6182      	str	r2, [r0, #24]
 800fe6e:	61c2      	str	r2, [r0, #28]
 800fe70:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800fe74:	2201      	movs	r2, #1
 800fe76:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    alpha(255)
 800fe7a:	4905      	ldr	r1, [pc, #20]	; (800fe90 <_ZN8touchgfx13ScalableImageC1Ev+0x38>)
 800fe7c:	6001      	str	r1, [r0, #0]
 800fe7e:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800fe82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe86:	8502      	strh	r2, [r0, #40]	; 0x28
 800fe88:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	08024984 	.word	0x08024984

0800fe94 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
{
 800fe94:	b508      	push	{r3, lr}
    if (currentScalingAlgorithm == NEAREST_NEIGHBOR)
 800fe96:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800fe9a:	b11b      	cbz	r3, 800fea4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0x10>
        renderVariant = lookupBilinearRenderVariant(bitmap);
 800fe9c:	3028      	adds	r0, #40	; 0x28
 800fe9e:	f00f fa05 	bl	801f2ac <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
}
 800fea2:	bd08      	pop	{r3, pc}
        renderVariant = lookupNearestNeighborRenderVariant(bitmap);
 800fea4:	3028      	adds	r0, #40	; 0x28
 800fea6:	f00f f9f1 	bl	801f28c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 800feaa:	e7fa      	b.n	800fea2 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>

0800feac <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>:
{
 800feac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb0:	b0bf      	sub	sp, #252	; 0xfc
 800feb2:	4604      	mov	r4, r0
 800feb4:	460d      	mov	r5, r1
 800feb6:	9207      	str	r2, [sp, #28]
 800feb8:	469b      	mov	fp, r3
 800feba:	f8dd a120 	ldr.w	sl, [sp, #288]	; 0x120
 800febe:	f8dd 9124 	ldr.w	r9, [sp, #292]	; 0x124
 800fec2:	f8dd 8128 	ldr.w	r8, [sp, #296]	; 0x128
        return rect.width;
 800fec6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
        return rect.height;
 800feca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
        this->x = x;
 800fece:	2300      	movs	r3, #0
 800fed0:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        this->y = y;
 800fed4:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        this->width = width;
 800fed8:	f8ad 10f4 	strh.w	r1, [sp, #244]	; 0xf4
        this->height = height;
 800fedc:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        Rect r = *this;
 800fee0:	ab3a      	add	r3, sp, #232	; 0xe8
 800fee2:	aa3e      	add	r2, sp, #248	; 0xf8
 800fee4:	e912 0003 	ldmdb	r2, {r0, r1}
 800fee8:	e883 0003 	stmia.w	r3, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 800feec:	f9bd 10e8 	ldrsh.w	r1, [sp, #232]	; 0xe8
        return x + width;
 800fef0:	f9b5 2000 	ldrsh.w	r2, [r5]
 800fef4:	88ab      	ldrh	r3, [r5, #4]
 800fef6:	fa13 f382 	uxtah	r3, r3, r2
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	b218      	sxth	r0, r3
        return !(x >= other.right() || right() <= other.x ||
 800fefe:	4281      	cmp	r1, r0
 800ff00:	da39      	bge.n	800ff76 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xca>
        return x + width;
 800ff02:	f8bd 60ec 	ldrh.w	r6, [sp, #236]	; 0xec
 800ff06:	fa16 f681 	uxtah	r6, r6, r1
 800ff0a:	b2b6      	uxth	r6, r6
 800ff0c:	9608      	str	r6, [sp, #32]
 800ff0e:	b237      	sxth	r7, r6
        return !(x >= other.right() || right() <= other.x ||
 800ff10:	42ba      	cmp	r2, r7
 800ff12:	da30      	bge.n	800ff76 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xca>
                 y >= other.bottom() || bottom() <= other.y);
 800ff14:	f9bd e0ea 	ldrsh.w	lr, [sp, #234]	; 0xea
        return y + height;
 800ff18:	f9b5 c002 	ldrsh.w	ip, [r5, #2]
 800ff1c:	88ee      	ldrh	r6, [r5, #6]
 800ff1e:	fa16 f68c 	uxtah	r6, r6, ip
 800ff22:	b236      	sxth	r6, r6
        return !(x >= other.right() || right() <= other.x ||
 800ff24:	45b6      	cmp	lr, r6
 800ff26:	da26      	bge.n	800ff76 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xca>
        return y + height;
 800ff28:	f8bd 60ee 	ldrh.w	r6, [sp, #238]	; 0xee
 800ff2c:	fa16 f68e 	uxtah	r6, r6, lr
 800ff30:	b2b6      	uxth	r6, r6
 800ff32:	9609      	str	r6, [sp, #36]	; 0x24
 800ff34:	b236      	sxth	r6, r6
        return !(x >= other.right() || right() <= other.x ||
 800ff36:	45b4      	cmp	ip, r6
 800ff38:	da1d      	bge.n	800ff76 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xca>
            int16_t newX = MAX(x, other.x);
 800ff3a:	4291      	cmp	r1, r2
 800ff3c:	dd00      	ble.n	800ff40 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x94>
 800ff3e:	460a      	mov	r2, r1
            int16_t newY = MAX(y, other.y);
 800ff40:	45e6      	cmp	lr, ip
 800ff42:	dd00      	ble.n	800ff46 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x9a>
 800ff44:	46f4      	mov	ip, lr
            width = MIN(right(), other.right()) - newX;
 800ff46:	42b8      	cmp	r0, r7
 800ff48:	dd00      	ble.n	800ff4c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xa0>
 800ff4a:	9b08      	ldr	r3, [sp, #32]
 800ff4c:	1a9b      	subs	r3, r3, r2
 800ff4e:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
        return y + height;
 800ff52:	886b      	ldrh	r3, [r5, #2]
 800ff54:	88e9      	ldrh	r1, [r5, #6]
 800ff56:	440b      	add	r3, r1
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	b219      	sxth	r1, r3
            height = MIN(bottom(), other.bottom()) - newY;
 800ff5c:	428e      	cmp	r6, r1
 800ff5e:	db08      	blt.n	800ff72 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xc6>
 800ff60:	eba3 030c 	sub.w	r3, r3, ip
 800ff64:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
            x = newX;
 800ff68:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
            y = newY;
 800ff6c:	f8ad c0ea 	strh.w	ip, [sp, #234]	; 0xea
 800ff70:	e00a      	b.n	800ff88 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xdc>
            height = MIN(bottom(), other.bottom()) - newY;
 800ff72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff74:	e7f4      	b.n	800ff60 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xb4>
            x = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
            y = 0;
 800ff7c:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            width = 0;
 800ff80:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
            height = 0;
 800ff84:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
    Rect dirtyAreaAbsolute = dirtyArea;
 800ff88:	ad38      	add	r5, sp, #224	; 0xe0
 800ff8a:	ae3a      	add	r6, sp, #232	; 0xe8
 800ff8c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ff90:	e885 0003 	stmia.w	r5, {r0, r1}
    translateRectToAbsolute(dirtyAreaAbsolute);
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff98:	4629      	mov	r1, r5
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	4798      	blx	r3
    Rect absoluteRect = getAbsoluteRect();
 800ff9e:	4621      	mov	r1, r4
 800ffa0:	a836      	add	r0, sp, #216	; 0xd8
 800ffa2:	f00f f95a 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
    DisplayTransformation::transformDisplayToFrameBuffer(absoluteRect);
 800ffa6:	a836      	add	r0, sp, #216	; 0xd8
 800ffa8:	f00e fb2a 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
        return rect;
 800ffac:	1d27      	adds	r7, r4, #4
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyArea, this->getRect());
 800ffae:	4639      	mov	r1, r7
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	f00e fb0d 	bl	801e5d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyAreaAbsolute);
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	f00e fb22 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
    const uint16_t* textmap = (const uint16_t*)bitmap.getData();
 800ffbc:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f010 fd6b 	bl	8020a9c <_ZNK8touchgfx6Bitmap7getDataEv>
    if (!textmap)
 800ffc6:	4606      	mov	r6, r0
 800ffc8:	b910      	cbnz	r0, 800ffd0 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x124>
}
 800ffca:	b03f      	add	sp, #252	; 0xfc
 800ffcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float x0 = triangleXs[0];
 800ffd0:	f8db 3000 	ldr.w	r3, [fp]
 800ffd4:	9335      	str	r3, [sp, #212]	; 0xd4
    float x1 = triangleXs[1];
 800ffd6:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ffda:	9334      	str	r3, [sp, #208]	; 0xd0
    float x2 = triangleXs[2];
 800ffdc:	f8db 3008 	ldr.w	r3, [fp, #8]
 800ffe0:	9333      	str	r3, [sp, #204]	; 0xcc
    float y0 = triangleYs[0];
 800ffe2:	f8da 3000 	ldr.w	r3, [sl]
 800ffe6:	9332      	str	r3, [sp, #200]	; 0xc8
    float y1 = triangleYs[1];
 800ffe8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ffec:	9331      	str	r3, [sp, #196]	; 0xc4
    float y2 = triangleYs[2];
 800ffee:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fff2:	9330      	str	r3, [sp, #192]	; 0xc0
    DisplayTransformation::transformDisplayToFrameBuffer(x0, y0, this->getRect());
 800fff4:	463a      	mov	r2, r7
 800fff6:	a932      	add	r1, sp, #200	; 0xc8
 800fff8:	a835      	add	r0, sp, #212	; 0xd4
 800fffa:	f00e facd 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x1, y1, this->getRect());
 800fffe:	463a      	mov	r2, r7
 8010000:	a931      	add	r1, sp, #196	; 0xc4
 8010002:	a834      	add	r0, sp, #208	; 0xd0
 8010004:	f00e fac8 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x2, y2, this->getRect());
 8010008:	463a      	mov	r2, r7
 801000a:	a930      	add	r1, sp, #192	; 0xc0
 801000c:	a833      	add	r0, sp, #204	; 0xcc
 801000e:	f00e fac3 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 *
 * @return The value as fixed28_4.
 */
inline fixed28_4 floatToFixed28_4(float value)
{
    return (fixed28_4)(value * 16);
 8010012:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8010016:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
    Point3D point0 = { floatToFixed28_4(x0), floatToFixed28_4(y0), (float)(triangleZs[0]), (float)(triangleUs[0]), (float)(triangleVs[0]) };
 801001a:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 801001e:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8010022:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010026:	edcd 7a1d 	vstr	s15, [sp, #116]	; 0x74
 801002a:	f8d9 3000 	ldr.w	r3, [r9]
 801002e:	931e      	str	r3, [sp, #120]	; 0x78
 8010030:	f8d8 3000 	ldr.w	r3, [r8]
 8010034:	931f      	str	r3, [sp, #124]	; 0x7c
 8010036:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	9320      	str	r3, [sp, #128]	; 0x80
 801003c:	eddd 7a34 	vldr	s15, [sp, #208]	; 0xd0
 8010040:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
    Point3D point1 = { floatToFixed28_4(x1), floatToFixed28_4(y1), (float)(triangleZs[1]), (float)(triangleUs[1]), (float)(triangleVs[1]) };
 8010044:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 8010048:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
 801004c:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010050:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8010054:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010058:	9319      	str	r3, [sp, #100]	; 0x64
 801005a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801005e:	931a      	str	r3, [sp, #104]	; 0x68
 8010060:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	931b      	str	r3, [sp, #108]	; 0x6c
 8010066:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 801006a:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
    Point3D point2 = { floatToFixed28_4(x2), floatToFixed28_4(y2), (float)(triangleZs[2]), (float)(triangleUs[2]), (float)(triangleVs[2]) };
 801006e:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 8010072:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8010076:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801007a:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 801007e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010082:	9314      	str	r3, [sp, #80]	; 0x50
 8010084:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010088:	9315      	str	r3, [sp, #84]	; 0x54
 801008a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	9316      	str	r3, [sp, #88]	; 0x58
    vertices[0] = point0;
 8010090:	af21      	add	r7, sp, #132	; 0x84
 8010092:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8010096:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801009a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801009c:	f8dc 3000 	ldr.w	r3, [ip]
 80100a0:	603b      	str	r3, [r7, #0]
    vertices[1] = point1;
 80100a2:	af26      	add	r7, sp, #152	; 0x98
 80100a4:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 80100a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80100ae:	f8dc 3000 	ldr.w	r3, [ip]
 80100b2:	603b      	str	r3, [r7, #0]
    vertices[2] = point2;
 80100b4:	af2b      	add	r7, sp, #172	; 0xac
 80100b6:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 80100ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80100c0:	f8dc 3000 	ldr.w	r3, [ip]
 80100c4:	603b      	str	r3, [r7, #0]
    DrawingSurface dest = { fb, HAL::FRAME_BUFFER_WIDTH };
 80100c6:	9b07      	ldr	r3, [sp, #28]
 80100c8:	9310      	str	r3, [sp, #64]	; 0x40
 80100ca:	4b16      	ldr	r3, [pc, #88]	; (8010124 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x278>)
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	9311      	str	r3, [sp, #68]	; 0x44
    TextureSurface src = { textmap, bitmap.getAlphaData(), bitmap.getWidth(), bitmap.getHeight(), bitmap.getWidth() };
 80100d0:	960b      	str	r6, [sp, #44]	; 0x2c
 80100d2:	4628      	mov	r0, r5
 80100d4:	f010 fd12 	bl	8020afc <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 80100d8:	900c      	str	r0, [sp, #48]	; 0x30
 80100da:	4628      	mov	r0, r5
 80100dc:	f010 fbe0 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80100e0:	900d      	str	r0, [sp, #52]	; 0x34
 80100e2:	4628      	mov	r0, r5
 80100e4:	f010 fc14 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80100e8:	900e      	str	r0, [sp, #56]	; 0x38
 80100ea:	4628      	mov	r0, r5
 80100ec:	f010 fbd8 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80100f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80100f2:	4b0d      	ldr	r3, [pc, #52]	; (8010128 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x27c>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	689d      	ldr	r5, [r3, #8]
    HAL::lcd().drawTextureMapTriangle(dest, vertices, src, absoluteRect, dirtyAreaAbsolute, lookupRenderVariant(), alpha, 0xFFFF);
 80100f8:	4620      	mov	r0, r4
 80100fa:	f7ff fecb 	bl	800fe94 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 80100fe:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8010102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010106:	9204      	str	r2, [sp, #16]
 8010108:	9303      	str	r3, [sp, #12]
 801010a:	9002      	str	r0, [sp, #8]
 801010c:	ab38      	add	r3, sp, #224	; 0xe0
 801010e:	9301      	str	r3, [sp, #4]
 8010110:	ab36      	add	r3, sp, #216	; 0xd8
 8010112:	9300      	str	r3, [sp, #0]
 8010114:	ab0b      	add	r3, sp, #44	; 0x2c
 8010116:	aa21      	add	r2, sp, #132	; 0x84
 8010118:	a910      	add	r1, sp, #64	; 0x40
 801011a:	4628      	mov	r0, r5
 801011c:	f00e f814 	bl	801e148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8010120:	e753      	b.n	800ffca <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x11e>
 8010122:	bf00      	nop
 8010124:	2000ba46 	.word	0x2000ba46
 8010128:	2000ba4c 	.word	0x2000ba4c

0801012c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
    if (!alpha)
 801012c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8010130:	b903      	cbnz	r3, 8010134 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x8>
 8010132:	4770      	bx	lr
{
 8010134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010138:	ed2d 8b08 	vpush	{d8-d11}
 801013c:	b095      	sub	sp, #84	; 0x54
 801013e:	468a      	mov	sl, r1
 8010140:	4680      	mov	r8, r0
        return instance;
 8010142:	4b4d      	ldr	r3, [pc, #308]	; (8010278 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x14c>)
 8010144:	6818      	ldr	r0, [r3, #0]
    uint16_t* fb = HAL::getInstance()->lockFrameBuffer();
 8010146:	6803      	ldr	r3, [r0, #0]
 8010148:	6a1b      	ldr	r3, [r3, #32]
 801014a:	4798      	blx	r3
 801014c:	4683      	mov	fp, r0
        return rect.width;
 801014e:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 8010152:	ee08 3a90 	vmov	s17, r3
    float imageX1 = imageX0 + getWidth();
 8010156:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801015a:	eddf 7a48 	vldr	s15, [pc, #288]	; 801027c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>
 801015e:	ee78 8aa7 	vadd.f32	s17, s17, s15
        return rect.height;
 8010162:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
 8010166:	ee08 3a10 	vmov	s16, r3
    float imageY2 = imageY0 + getHeight();
 801016a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801016e:	ee38 8a27 	vadd.f32	s16, s16, s15
    triangleZs[0] = 100.f;
 8010172:	4b43      	ldr	r3, [pc, #268]	; (8010280 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x154>)
 8010174:	930b      	str	r3, [sp, #44]	; 0x2c
    triangleZs[1] = 100.f;
 8010176:	930c      	str	r3, [sp, #48]	; 0x30
    triangleZs[2] = 100.f;
 8010178:	930d      	str	r3, [sp, #52]	; 0x34
    float right = (float)(bitmap.getWidth() - 1);
 801017a:	f108 0428 	add.w	r4, r8, #40	; 0x28
 801017e:	4620      	mov	r0, r4
 8010180:	f010 fb8e 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010184:	3801      	subs	r0, #1
 8010186:	ee07 0a90 	vmov	s15, r0
 801018a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    float bottom = (float)(bitmap.getHeight() - 1);
 801018e:	4620      	mov	r0, r4
 8010190:	f010 fbbe 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010194:	3801      	subs	r0, #1
 8010196:	ee07 0a90 	vmov	s15, r0
 801019a:	eef8 9ae7 	vcvt.f32.s32	s19, s15
    if (HAL::DISPLAY_ROTATION == rotate90)
 801019e:	4b39      	ldr	r3, [pc, #228]	; (8010284 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x158>)
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d05e      	beq.n	8010264 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x138>
    float textureV3 = bottom;
 80101a6:	eef0 aa69 	vmov.f32	s21, s19
    float textureV2 = bottom;
 80101aa:	eeb0 aa69 	vmov.f32	s20, s19
    float textureU2 = right;
 80101ae:	eef0 9a49 	vmov.f32	s19, s18
    float textureU1 = right;
 80101b2:	ee19 3a10 	vmov	r3, s18
    float textureU3 = 0.0f;
 80101b6:	ed9f 9a31 	vldr	s18, [pc, #196]	; 801027c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>
    float textureV0 = 0.0f;
 80101ba:	eeb0 ba49 	vmov.f32	s22, s18
    triangleXs[0] = imageX0;
 80101be:	f04f 0900 	mov.w	r9, #0
 80101c2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    triangleXs[1] = imageX1;
 80101c6:	edcd 8a12 	vstr	s17, [sp, #72]	; 0x48
    triangleXs[2] = imageX2;
 80101ca:	edcd 8a13 	vstr	s17, [sp, #76]	; 0x4c
    triangleYs[0] = imageY0;
 80101ce:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    triangleYs[1] = imageY1;
 80101d2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    triangleYs[2] = imageY2;
 80101d6:	ed8d 8a10 	vstr	s16, [sp, #64]	; 0x40
    triangleUs[0] = textureU0;
 80101da:	f8cd 9020 	str.w	r9, [sp, #32]
    triangleUs[1] = textureU1;
 80101de:	9309      	str	r3, [sp, #36]	; 0x24
    triangleUs[2] = textureU2;
 80101e0:	edcd 9a0a 	vstr	s19, [sp, #40]	; 0x28
    triangleVs[0] = textureV0;
 80101e4:	ed8d 9a05 	vstr	s18, [sp, #20]
    triangleVs[1] = textureV1;
 80101e8:	f8cd 9018 	str.w	r9, [sp, #24]
    triangleVs[2] = textureV2;
 80101ec:	ed8d aa07 	vstr	s20, [sp, #28]
    drawTriangle(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
 80101f0:	af05      	add	r7, sp, #20
 80101f2:	9703      	str	r7, [sp, #12]
 80101f4:	ae08      	add	r6, sp, #32
 80101f6:	9602      	str	r6, [sp, #8]
 80101f8:	ad0b      	add	r5, sp, #44	; 0x2c
 80101fa:	9501      	str	r5, [sp, #4]
 80101fc:	ac0e      	add	r4, sp, #56	; 0x38
 80101fe:	9400      	str	r4, [sp, #0]
 8010200:	ab11      	add	r3, sp, #68	; 0x44
 8010202:	465a      	mov	r2, fp
 8010204:	4651      	mov	r1, sl
 8010206:	4640      	mov	r0, r8
 8010208:	f7ff fe50 	bl	800feac <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
    triangleXs[0] = imageX0;
 801020c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    triangleXs[1] = imageX2;
 8010210:	edcd 8a12 	vstr	s17, [sp, #72]	; 0x48
    triangleXs[2] = imageX3;
 8010214:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    triangleYs[0] = imageY0;
 8010218:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    triangleYs[1] = imageY2;
 801021c:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
    triangleYs[2] = imageY3;
 8010220:	ed8d 8a10 	vstr	s16, [sp, #64]	; 0x40
    triangleUs[0] = textureU0;
 8010224:	f8cd 9020 	str.w	r9, [sp, #32]
    triangleUs[1] = textureU2;
 8010228:	edcd 9a09 	vstr	s19, [sp, #36]	; 0x24
    triangleUs[2] = textureU3;
 801022c:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
    triangleVs[0] = textureV0;
 8010230:	ed8d 9a05 	vstr	s18, [sp, #20]
    triangleVs[1] = textureV2;
 8010234:	ed8d aa06 	vstr	s20, [sp, #24]
    triangleVs[2] = textureV3;
 8010238:	edcd aa07 	vstr	s21, [sp, #28]
    drawTriangle(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
 801023c:	9703      	str	r7, [sp, #12]
 801023e:	9602      	str	r6, [sp, #8]
 8010240:	9501      	str	r5, [sp, #4]
 8010242:	9400      	str	r4, [sp, #0]
 8010244:	ab11      	add	r3, sp, #68	; 0x44
 8010246:	465a      	mov	r2, fp
 8010248:	4651      	mov	r1, sl
 801024a:	4640      	mov	r0, r8
 801024c:	f7ff fe2e 	bl	800feac <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8010250:	4b09      	ldr	r3, [pc, #36]	; (8010278 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x14c>)
 8010252:	6818      	ldr	r0, [r3, #0]
    HAL::getInstance()->unlockFrameBuffer();
 8010254:	6803      	ldr	r3, [r0, #0]
 8010256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010258:	4798      	blx	r3
}
 801025a:	b015      	add	sp, #84	; 0x54
 801025c:	ecbd 8b08 	vpop	{d8-d11}
 8010260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        textureV3 = right;
 8010264:	eef0 aa49 	vmov.f32	s21, s18
        textureU3 = bottom;
 8010268:	eeb0 ba69 	vmov.f32	s22, s19
        textureV2 = 0.0f;
 801026c:	ed9f aa03 	vldr	s20, [pc, #12]	; 801027c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>
        textureU1 = 0.0f;
 8010270:	ee1a 3a10 	vmov	r3, s20
 8010274:	e7a3      	b.n	80101be <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x92>
 8010276:	bf00      	nop
 8010278:	2000ba4c 	.word	0x2000ba4c
 801027c:	00000000 	.word	0x00000000
 8010280:	42c80000 	.word	0x42c80000
 8010284:	2000ba44 	.word	0x2000ba44

08010288 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
        return typedTextId != TYPED_TEXT_INVALID;
 8010288:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    }
}

void TextArea::resizeToCurrentText()
{
    if (typedText.hasValidId())
 801028a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801028e:	429a      	cmp	r2, r3
 8010290:	d02a      	beq.n	80102e8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x60>
{
 8010292:	b570      	push	{r4, r5, r6, lr}
 8010294:	4604      	mov	r4, r0
    {
        uint16_t w = getTextWidth();
 8010296:	6803      	ldr	r3, [r0, #0]
 8010298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801029a:	4798      	blx	r3
 801029c:	4605      	mov	r5, r0
        uint16_t h = getTextHeight();
 801029e:	6823      	ldr	r3, [r4, #0]
 80102a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a2:	4620      	mov	r0, r4
 80102a4:	4798      	blx	r3
 80102a6:	4606      	mov	r6, r0
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 80102a8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80102ac:	2a02      	cmp	r2, #2
 80102ae:	bf14      	ite	ne
 80102b0:	2300      	movne	r3, #0
 80102b2:	2301      	moveq	r3, #1
 80102b4:	2a00      	cmp	r2, #0
 80102b6:	bf08      	it	eq
 80102b8:	2301      	moveq	r3, #1
 80102ba:	b953      	cbnz	r3, 80102d2 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x4a>
            setWidth(w);
            setHeight(h);
        }
        else
        {
            setWidth(h);
 80102bc:	6823      	ldr	r3, [r4, #0]
 80102be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c0:	4601      	mov	r1, r0
 80102c2:	4620      	mov	r0, r4
 80102c4:	4798      	blx	r3
            setHeight(w);
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ca:	b229      	sxth	r1, r5
 80102cc:	4620      	mov	r0, r4
 80102ce:	4798      	blx	r3
        }
    }
}
 80102d0:	bd70      	pop	{r4, r5, r6, pc}
            setWidth(w);
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102d6:	b229      	sxth	r1, r5
 80102d8:	4620      	mov	r0, r4
 80102da:	4798      	blx	r3
            setHeight(h);
 80102dc:	6823      	ldr	r3, [r4, #0]
 80102de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102e0:	4631      	mov	r1, r6
 80102e2:	4620      	mov	r0, r4
 80102e4:	4798      	blx	r3
 80102e6:	e7f3      	b.n	80102d0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x48>
 80102e8:	4770      	bx	lr

080102ea <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
{
 80102ea:	b508      	push	{r3, lr}
    typedText = t;
 80102ec:	84c1      	strh	r1, [r0, #38]	; 0x26
        return rect.width;
 80102ee:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    if ((getWidth() == 0) && (getHeight() == 0))
 80102f2:	b913      	cbnz	r3, 80102fa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x10>
        return rect.height;
 80102f4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80102f8:	b103      	cbz	r3, 80102fc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
}
 80102fa:	bd08      	pop	{r3, pc}
        resizeToCurrentText();
 80102fc:	f7ff ffc4 	bl	8010288 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
}
 8010300:	e7fb      	b.n	80102fa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x10>
	...

08010304 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
int16_t TextAreaWithWildcardBase::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 8010304:	b40e      	push	{r1, r2, r3}
 8010306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010308:	b08a      	sub	sp, #40	; 0x28
 801030a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    if (!typedText.hasValidId())
 801030c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010310:	429a      	cmp	r2, r3
 8010312:	d07b      	beq.n	801040c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x108>
 8010314:	4604      	mov	r4, r0
    {
        return 0;
    }

    va_list pArg;
    va_start(pArg, format);
 8010316:	ab10      	add	r3, sp, #64	; 0x40
 8010318:	9309      	str	r3, [sp, #36]	; 0x24

    TextProvider textProvider;
 801031a:	a803      	add	r0, sp, #12
 801031c:	f00f fc76 	bl	801fc0c <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 8010320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010322:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010324:	a803      	add	r0, sp, #12
 8010326:	f00f fc7a 	bl	801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 801032a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801032e:	4b38      	ldr	r3, [pc, #224]	; (8010410 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x10c>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d046      	beq.n	80103c4 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xc0>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010336:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8010338:	4b36      	ldr	r3, [pc, #216]	; (8010414 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x110>)
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	429a      	cmp	r2, r3
 801033e:	d247      	bcs.n	80103d0 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xcc>
        return typedTexts[typedTextId].direction;
 8010340:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8010342:	4a33      	ldr	r2, [pc, #204]	; (8010410 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x10c>)
 8010344:	6810      	ldr	r0, [r2, #0]
 8010346:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801034a:	785a      	ldrb	r2, [r3, #1]
 801034c:	f3c2 0281 	ubfx	r2, r2, #2, #2
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010350:	2800      	cmp	r0, #0
 8010352:	d043      	beq.n	80103dc <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xd8>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010354:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8010356:	4b2f      	ldr	r3, [pc, #188]	; (8010414 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x110>)
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	4298      	cmp	r0, r3
 801035c:	d244      	bcs.n	80103e8 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xe4>
        return fonts[typedTexts[typedTextId].fontIdx];
 801035e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8010360:	4f2b      	ldr	r7, [pc, #172]	; (8010410 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x10c>)
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 8010368:	4b2b      	ldr	r3, [pc, #172]	; (8010418 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x114>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
        return rect.width;
 8010370:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8010374:	9000      	str	r0, [sp, #0]
 8010376:	a803      	add	r0, sp, #12
 8010378:	f00d fd4b 	bl	801de12 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801037c:	4605      	mov	r5, r0
 801037e:	b206      	sxth	r6, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d036      	beq.n	80103f4 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xf0>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010386:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8010388:	4b22      	ldr	r3, [pc, #136]	; (8010414 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x110>)
 801038a:	881b      	ldrh	r3, [r3, #0]
 801038c:	429a      	cmp	r2, r3
 801038e:	d237      	bcs.n	8010400 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xfc>
        return fonts[typedTexts[typedTextId].fontIdx];
 8010390:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8010392:	4b1f      	ldr	r3, [pc, #124]	; (8010410 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x10c>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801039a:	4b1f      	ldr	r3, [pc, #124]	; (8010418 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x114>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

    const Font* fontToDraw = typedText.getFont();
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 80103a2:	6803      	ldr	r3, [r0, #0]
 80103a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103a6:	4798      	blx	r3

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 80103a8:	fb15 f000 	smulbb	r0, r5, r0
 80103ac:	3e01      	subs	r6, #1
 80103ae:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80103b0:	fb16 f505 	smulbb	r5, r6, r5
 80103b4:	fa15 f080 	uxtah	r0, r5, r0
 80103b8:	b200      	sxth	r0, r0
}
 80103ba:	b00a      	add	sp, #40	; 0x28
 80103bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80103c0:	b003      	add	sp, #12
 80103c2:	4770      	bx	lr
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80103c4:	4b15      	ldr	r3, [pc, #84]	; (801041c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x118>)
 80103c6:	4a16      	ldr	r2, [pc, #88]	; (8010420 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 80103c8:	21cf      	movs	r1, #207	; 0xcf
 80103ca:	4816      	ldr	r0, [pc, #88]	; (8010424 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 80103cc:	f012 fbb4 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80103d0:	4b15      	ldr	r3, [pc, #84]	; (8010428 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x124>)
 80103d2:	4a13      	ldr	r2, [pc, #76]	; (8010420 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 80103d4:	21d0      	movs	r1, #208	; 0xd0
 80103d6:	4813      	ldr	r0, [pc, #76]	; (8010424 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 80103d8:	f012 fbae 	bl	8022b38 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80103dc:	4b0f      	ldr	r3, [pc, #60]	; (801041c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x118>)
 80103de:	4a10      	ldr	r2, [pc, #64]	; (8010420 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 80103e0:	21cf      	movs	r1, #207	; 0xcf
 80103e2:	4810      	ldr	r0, [pc, #64]	; (8010424 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 80103e4:	f012 fba8 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80103e8:	4b0f      	ldr	r3, [pc, #60]	; (8010428 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x124>)
 80103ea:	4a0d      	ldr	r2, [pc, #52]	; (8010420 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 80103ec:	21d0      	movs	r1, #208	; 0xd0
 80103ee:	480d      	ldr	r0, [pc, #52]	; (8010424 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 80103f0:	f012 fba2 	bl	8022b38 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80103f4:	4b09      	ldr	r3, [pc, #36]	; (801041c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x118>)
 80103f6:	4a0a      	ldr	r2, [pc, #40]	; (8010420 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 80103f8:	21cf      	movs	r1, #207	; 0xcf
 80103fa:	480a      	ldr	r0, [pc, #40]	; (8010424 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 80103fc:	f012 fb9c 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010400:	4b09      	ldr	r3, [pc, #36]	; (8010428 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x124>)
 8010402:	4a07      	ldr	r2, [pc, #28]	; (8010420 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 8010404:	21d0      	movs	r1, #208	; 0xd0
 8010406:	4807      	ldr	r0, [pc, #28]	; (8010424 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 8010408:	f012 fb96 	bl	8022b38 <__assert_func>
        return 0;
 801040c:	2000      	movs	r0, #0
 801040e:	e7d4      	b.n	80103ba <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xb6>
 8010410:	2000bacc 	.word	0x2000bacc
 8010414:	2000bad0 	.word	0x2000bad0
 8010418:	2000bad4 	.word	0x2000bad4
 801041c:	080242f8 	.word	0x080242f8
 8010420:	080249fc 	.word	0x080249fc
 8010424:	0802433c 	.word	0x0802433c
 8010428:	0802438c 	.word	0x0802438c

0801042c <_ZNK8touchgfx10TiledImage7getTypeEv>:
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_TILEDIMAGE;
    }
 801042c:	2009      	movs	r0, #9
 801042e:	4770      	bx	lr

08010430 <_ZN8touchgfx10TiledImage9setOffsetEss>:
    // Make sure the xOffset and yOffset are correct
    setOffset(xOffset, yOffset);
}

void TiledImage::setOffset(int16_t x, int16_t y)
{
 8010430:	b538      	push	{r3, r4, r5, lr}
 8010432:	4604      	mov	r4, r0
 8010434:	4615      	mov	r5, r2
    setXOffset(x);
 8010436:	6803      	ldr	r3, [r0, #0]
 8010438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801043a:	4798      	blx	r3
    setYOffset(y);
 801043c:	6823      	ldr	r3, [r4, #0]
 801043e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010440:	4629      	mov	r1, r5
 8010442:	4620      	mov	r0, r4
 8010444:	4798      	blx	r3
}
 8010446:	bd38      	pop	{r3, r4, r5, pc}

08010448 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
        yOffset = ((yOffset % bitmap.getHeight()) + bitmap.getHeight()) % bitmap.getHeight();
    }
}

void TiledImage::getOffset(int16_t& x, int16_t& y)
{
 8010448:	b570      	push	{r4, r5, r6, lr}
 801044a:	4604      	mov	r4, r0
 801044c:	460e      	mov	r6, r1
 801044e:	4615      	mov	r5, r2
    x = getXOffset();
 8010450:	6803      	ldr	r3, [r0, #0]
 8010452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010454:	4798      	blx	r3
 8010456:	8030      	strh	r0, [r6, #0]
    y = getYOffset();
 8010458:	6823      	ldr	r3, [r4, #0]
 801045a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801045c:	4620      	mov	r0, r4
 801045e:	4798      	blx	r3
 8010460:	8028      	strh	r0, [r5, #0]
}
 8010462:	bd70      	pop	{r4, r5, r6, pc}

08010464 <_ZN8touchgfx10TiledImage10getXOffsetEv>:

int16_t TiledImage::getXOffset()
{
    return xOffset;
}
 8010464:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8010468:	4770      	bx	lr

0801046a <_ZN8touchgfx10TiledImage10getYOffsetEv>:

int16_t TiledImage::getYOffset()
{
    return yOffset;
}
 801046a:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801046e:	4770      	bx	lr

08010470 <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 8010470:	4770      	bx	lr

08010472 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
{
 8010472:	b510      	push	{r4, lr}
 8010474:	4604      	mov	r4, r0
    Image::setBitmap(bmp);
 8010476:	f7ff fc59 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    setOffset(xOffset, yOffset);
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801047e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8010482:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8010486:	4620      	mov	r0, r4
 8010488:	4798      	blx	r3
}
 801048a:	bd10      	pop	{r4, pc}

0801048c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
{
 801048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801048e:	4604      	mov	r4, r0
    xOffset = x;
 8010490:	8541      	strh	r1, [r0, #42]	; 0x2a
    if (bitmap.getWidth() != 0)
 8010492:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8010496:	4628      	mov	r0, r5
 8010498:	f010 fa02 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801049c:	b900      	cbnz	r0, 80104a0 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x14>
}
 801049e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        xOffset = ((xOffset % bitmap.getWidth()) + bitmap.getWidth()) % bitmap.getWidth();
 80104a0:	f9b4 702a 	ldrsh.w	r7, [r4, #42]	; 0x2a
 80104a4:	4628      	mov	r0, r5
 80104a6:	f010 f9fb 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80104aa:	fb97 f6f0 	sdiv	r6, r7, r0
 80104ae:	fb00 7616 	mls	r6, r0, r6, r7
 80104b2:	4628      	mov	r0, r5
 80104b4:	f010 f9f4 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80104b8:	4406      	add	r6, r0
 80104ba:	4628      	mov	r0, r5
 80104bc:	f010 f9f0 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80104c0:	fb96 f3f0 	sdiv	r3, r6, r0
 80104c4:	fb00 6613 	mls	r6, r0, r3, r6
 80104c8:	8566      	strh	r6, [r4, #42]	; 0x2a
}
 80104ca:	e7e8      	b.n	801049e <_ZN8touchgfx10TiledImage10setXOffsetEs+0x12>

080104cc <_ZN8touchgfx10TiledImage10setYOffsetEs>:
{
 80104cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ce:	4604      	mov	r4, r0
    yOffset = y;
 80104d0:	8581      	strh	r1, [r0, #44]	; 0x2c
    if (bitmap.getHeight() != 0)
 80104d2:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80104d6:	4628      	mov	r0, r5
 80104d8:	f010 fa1a 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80104dc:	b900      	cbnz	r0, 80104e0 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x14>
}
 80104de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        yOffset = ((yOffset % bitmap.getHeight()) + bitmap.getHeight()) % bitmap.getHeight();
 80104e0:	f9b4 702c 	ldrsh.w	r7, [r4, #44]	; 0x2c
 80104e4:	4628      	mov	r0, r5
 80104e6:	f010 fa13 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80104ea:	fb97 f6f0 	sdiv	r6, r7, r0
 80104ee:	fb00 7616 	mls	r6, r0, r6, r7
 80104f2:	4628      	mov	r0, r5
 80104f4:	f010 fa0c 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80104f8:	4406      	add	r6, r0
 80104fa:	4628      	mov	r0, r5
 80104fc:	f010 fa08 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010500:	fb96 f3f0 	sdiv	r3, r6, r0
 8010504:	fb00 6613 	mls	r6, r0, r3, r6
 8010508:	85a6      	strh	r6, [r4, #44]	; 0x2c
}
 801050a:	e7e8      	b.n	80104de <_ZN8touchgfx10TiledImage10setYOffsetEs+0x12>

0801050c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:

void TiledImage::draw(const Rect& invalidatedArea) const
{
 801050c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010510:	b091      	sub	sp, #68	; 0x44
 8010512:	4682      	mov	sl, r0
 8010514:	460d      	mov	r5, r1
    uint16_t bitmapWidth = bitmap.getWidth();
 8010516:	f100 0326 	add.w	r3, r0, #38	; 0x26
 801051a:	461c      	mov	r4, r3
 801051c:	9304      	str	r3, [sp, #16]
 801051e:	4618      	mov	r0, r3
 8010520:	f010 f9be 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010524:	4683      	mov	fp, r0
    uint16_t bitmapHeight = bitmap.getHeight();
 8010526:	4620      	mov	r0, r4
 8010528:	f010 f9f2 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>

    if (bitmapWidth == 0 || bitmapHeight == 0)
 801052c:	4607      	mov	r7, r0
 801052e:	fab0 f080 	clz	r0, r0
 8010532:	0940      	lsrs	r0, r0, #5
 8010534:	f1bb 0f00 	cmp.w	fp, #0
 8010538:	bf08      	it	eq
 801053a:	2001      	moveq	r0, #1
 801053c:	b110      	cbz	r0, 8010544 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x38>
            dirty.x -= x;
            dirty.y -= y;
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
        }
    }
}
 801053e:	b011      	add	sp, #68	; 0x44
 8010540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        this->x = 0;
 8010544:	2300      	movs	r3, #0
 8010546:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        this->y = 0;
 801054a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        this->width = 0;
 801054e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        this->height = 0;
 8010552:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    translateRectToAbsolute(meAbs);
 8010556:	f8da 3000 	ldr.w	r3, [sl]
 801055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801055c:	a90c      	add	r1, sp, #48	; 0x30
 801055e:	4650      	mov	r0, sl
 8010560:	4798      	blx	r3
    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 8010562:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010566:	f9ba 202a 	ldrsh.w	r2, [sl, #42]	; 0x2a
 801056a:	189c      	adds	r4, r3, r2
 801056c:	fb94 f4fb 	sdiv	r4, r4, fp
 8010570:	b291      	uxth	r1, r2
 8010572:	fb14 f40b 	smulbb	r4, r4, fp
 8010576:	1a64      	subs	r4, r4, r1
 8010578:	b224      	sxth	r4, r4
        return x + width;
 801057a:	88a9      	ldrh	r1, [r5, #4]
 801057c:	fa11 f383 	uxtah	r3, r1, r3
    const int16_t maxX = (((invalidatedArea.right() + xOffset) - 1) / bitmapWidth) * bitmapWidth;
 8010580:	fa02 f383 	sxtah	r3, r2, r3
 8010584:	3b01      	subs	r3, #1
 8010586:	fb93 f3fb 	sdiv	r3, r3, fp
 801058a:	fb13 f30b 	smulbb	r3, r3, fp
 801058e:	b21b      	sxth	r3, r3
 8010590:	9308      	str	r3, [sp, #32]
    const int16_t minY = ((invalidatedArea.y + yOffset) / bitmapHeight) * bitmapHeight - yOffset;
 8010592:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010596:	f9ba 102c 	ldrsh.w	r1, [sl, #44]	; 0x2c
 801059a:	185a      	adds	r2, r3, r1
 801059c:	fb92 f2f7 	sdiv	r2, r2, r7
 80105a0:	b288      	uxth	r0, r1
 80105a2:	fb12 f207 	smulbb	r2, r2, r7
 80105a6:	1a12      	subs	r2, r2, r0
 80105a8:	b212      	sxth	r2, r2
 80105aa:	9209      	str	r2, [sp, #36]	; 0x24
        return y + height;
 80105ac:	88ea      	ldrh	r2, [r5, #6]
 80105ae:	fa12 f383 	uxtah	r3, r2, r3
    const int16_t maxY = (((invalidatedArea.bottom() + yOffset) - 1) / bitmapHeight) * bitmapHeight;
 80105b2:	fa01 f383 	sxtah	r3, r1, r3
 80105b6:	3b01      	subs	r3, #1
 80105b8:	fb93 f3f7 	sdiv	r3, r3, r7
 80105bc:	fb13 f307 	smulbb	r3, r3, r7
 80105c0:	b21b      	sxth	r3, r3
 80105c2:	f8cd a018 	str.w	sl, [sp, #24]
 80105c6:	469a      	mov	sl, r3
 80105c8:	e08f      	b.n	80106ea <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1de>
            height = MIN(bottom(), other.bottom()) - newY;
 80105ca:	4632      	mov	r2, r6
 80105cc:	e082      	b.n	80106d4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c8>
            x = 0;
 80105ce:	2200      	movs	r2, #0
 80105d0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            y = 0;
 80105d4:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            width = 0;
 80105d8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            height = 0;
 80105dc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            dirty.x -= x;
 80105e0:	b2a2      	uxth	r2, r4
 80105e2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80105e6:	1a89      	subs	r1, r1, r2
 80105e8:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            dirty.y -= y;
 80105ec:	b29e      	uxth	r6, r3
 80105ee:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80105f2:	1b9b      	subs	r3, r3, r6
 80105f4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        return instance->lcdRef;
 80105f8:	4b3f      	ldr	r3, [pc, #252]	; (80106f8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ec>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	6898      	ldr	r0, [r3, #8]
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
 80105fe:	6803      	ldr	r3, [r0, #0]
 8010600:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8010604:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8010608:	441a      	add	r2, r3
 801060a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801060e:	4433      	add	r3, r6
 8010610:	9906      	ldr	r1, [sp, #24]
 8010612:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8010616:	f04f 0c01 	mov.w	ip, #1
 801061a:	f8cd c008 	str.w	ip, [sp, #8]
 801061e:	9101      	str	r1, [sp, #4]
 8010620:	a90a      	add	r1, sp, #40	; 0x28
 8010622:	9100      	str	r1, [sp, #0]
 8010624:	b21b      	sxth	r3, r3
 8010626:	b212      	sxth	r2, r2
 8010628:	9904      	ldr	r1, [sp, #16]
 801062a:	47c0      	blx	r8
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 801062c:	19f3      	adds	r3, r6, r7
 801062e:	b21b      	sxth	r3, r3
 8010630:	4553      	cmp	r3, sl
 8010632:	dc58      	bgt.n	80106e6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1da>
        this->x = x;
 8010634:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
        this->y = y;
 8010638:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        this->width = width;
 801063c:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
        this->height = height;
 8010640:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
        Rect r = *this;
 8010644:	aa0a      	add	r2, sp, #40	; 0x28
 8010646:	a910      	add	r1, sp, #64	; 0x40
 8010648:	e911 0003 	ldmdb	r1, {r0, r1}
 801064c:	e882 0003 	stmia.w	r2, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 8010650:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
        return x + width;
 8010654:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010658:	88aa      	ldrh	r2, [r5, #4]
 801065a:	fa12 f281 	uxtah	r2, r2, r1
 801065e:	b292      	uxth	r2, r2
 8010660:	b216      	sxth	r6, r2
 8010662:	9605      	str	r6, [sp, #20]
        return !(x >= other.right() || right() <= other.x ||
 8010664:	42b0      	cmp	r0, r6
 8010666:	dab2      	bge.n	80105ce <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc2>
        return x + width;
 8010668:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801066c:	fa1c fc80 	uxtah	ip, ip, r0
 8010670:	fa1f f68c 	uxth.w	r6, ip
 8010674:	9607      	str	r6, [sp, #28]
 8010676:	fa0f fe86 	sxth.w	lr, r6
        return !(x >= other.right() || right() <= other.x ||
 801067a:	4571      	cmp	r1, lr
 801067c:	daa7      	bge.n	80105ce <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc2>
                 y >= other.bottom() || bottom() <= other.y);
 801067e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
        return y + height;
 8010682:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 8010686:	f8b5 c006 	ldrh.w	ip, [r5, #6]
 801068a:	fa1c fc88 	uxtah	ip, ip, r8
 801068e:	fa0f fc8c 	sxth.w	ip, ip
        return !(x >= other.right() || right() <= other.x ||
 8010692:	45e1      	cmp	r9, ip
 8010694:	da9b      	bge.n	80105ce <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc2>
        return y + height;
 8010696:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801069a:	fa1c fc89 	uxtah	ip, ip, r9
 801069e:	fa1f f68c 	uxth.w	r6, ip
 80106a2:	fa0f fc86 	sxth.w	ip, r6
        return !(x >= other.right() || right() <= other.x ||
 80106a6:	45e0      	cmp	r8, ip
 80106a8:	da91      	bge.n	80105ce <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc2>
            int16_t newX = MAX(x, other.x);
 80106aa:	4288      	cmp	r0, r1
 80106ac:	dd00      	ble.n	80106b0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a4>
 80106ae:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 80106b0:	45c1      	cmp	r9, r8
 80106b2:	dd00      	ble.n	80106b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1aa>
 80106b4:	46c8      	mov	r8, r9
            width = MIN(right(), other.right()) - newX;
 80106b6:	9805      	ldr	r0, [sp, #20]
 80106b8:	4570      	cmp	r0, lr
 80106ba:	dd00      	ble.n	80106be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b2>
 80106bc:	9a07      	ldr	r2, [sp, #28]
 80106be:	1a52      	subs	r2, r2, r1
 80106c0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        return y + height;
 80106c4:	886a      	ldrh	r2, [r5, #2]
 80106c6:	88e8      	ldrh	r0, [r5, #6]
 80106c8:	4402      	add	r2, r0
 80106ca:	b292      	uxth	r2, r2
 80106cc:	b210      	sxth	r0, r2
            height = MIN(bottom(), other.bottom()) - newY;
 80106ce:	4584      	cmp	ip, r0
 80106d0:	f6ff af7b 	blt.w	80105ca <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xbe>
 80106d4:	eba2 0208 	sub.w	r2, r2, r8
 80106d8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            x = newX;
 80106dc:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            y = newY;
 80106e0:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 80106e4:	e77c      	b.n	80105e0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xd4>
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 80106e6:	445c      	add	r4, fp
 80106e8:	b224      	sxth	r4, r4
 80106ea:	9b08      	ldr	r3, [sp, #32]
 80106ec:	429c      	cmp	r4, r3
 80106ee:	f73f af26 	bgt.w	801053e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x32>
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 80106f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f4:	e79c      	b.n	8010630 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x124>
 80106f6:	bf00      	nop
 80106f8:	2000ba4c 	.word	0x2000ba4c

080106fc <_ZNK8touchgfx10TiledImage12getSolidRectEv>:

Rect TiledImage::getSolidRect() const
{
 80106fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010700:	b085      	sub	sp, #20
 8010702:	4604      	mov	r4, r0
    if (alpha < 255)
 8010704:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010708:	2bff      	cmp	r3, #255	; 0xff
 801070a:	d008      	beq.n	801071e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
        this->x = x;
 801070c:	2300      	movs	r3, #0
 801070e:	8003      	strh	r3, [r0, #0]
        this->y = y;
 8010710:	8043      	strh	r3, [r0, #2]
        this->width = width;
 8010712:	8083      	strh	r3, [r0, #4]
        this->height = height;
 8010714:	80c3      	strh	r3, [r0, #6]
        {
            solidRect = solidRect2;
        }
    }
    return solidRect;
}
 8010716:	4620      	mov	r0, r4
 8010718:	b005      	add	sp, #20
 801071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801071e:	460d      	mov	r5, r1
    Rect solidRect = bitmap.getSolidRect();
 8010720:	f101 0726 	add.w	r7, r1, #38	; 0x26
 8010724:	4639      	mov	r1, r7
 8010726:	a802      	add	r0, sp, #8
 8010728:	f010 f92a 	bl	8020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
    if (solidRect.width == bitmap.getWidth())
 801072c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8010730:	4638      	mov	r0, r7
 8010732:	f010 f8b5 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010736:	4286      	cmp	r6, r0
 8010738:	d113      	bne.n	8010762 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x66>
 801073a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
        solidRect.width = getWidth();
 801073e:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (solidRect.height == bitmap.getHeight())
 8010742:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8010746:	4638      	mov	r0, r7
 8010748:	f010 f8e2 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801074c:	4286      	cmp	r6, r0
 801074e:	d14d      	bne.n	80107ec <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xf0>
        return rect.height;
 8010750:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
        solidRect.height = getHeight();
 8010754:	f8ad 300e 	strh.w	r3, [sp, #14]
    return solidRect;
 8010758:	ab02      	add	r3, sp, #8
 801075a:	cb03      	ldmia	r3!, {r0, r1}
 801075c:	6020      	str	r0, [r4, #0]
 801075e:	6061      	str	r1, [r4, #4]
 8010760:	e7d9      	b.n	8010716 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1a>
        solidRect.x -= xOffset;
 8010762:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8010766:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 801076a:	eba8 0803 	sub.w	r8, r8, r3
 801076e:	fa1f f888 	uxth.w	r8, r8
 8010772:	fa0f f988 	sxth.w	r9, r8
 8010776:	f8ad 9008 	strh.w	r9, [sp, #8]
        Rect solidRect2 = solidRect;
 801077a:	466b      	mov	r3, sp
 801077c:	aa04      	add	r2, sp, #16
 801077e:	e912 0003 	ldmdb	r2, {r0, r1}
 8010782:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.x += bitmap.getWidth();
 8010786:	4638      	mov	r0, r7
 8010788:	f010 f88a 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801078c:	4440      	add	r0, r8
 801078e:	b280      	uxth	r0, r0
 8010790:	f8ad 0000 	strh.w	r0, [sp]
        if (solidRect.x < 0)
 8010794:	f1b9 0f00 	cmp.w	r9, #0
 8010798:	db18      	blt.n	80107cc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xd0>
        return x + width;
 801079a:	fa10 f686 	uxtah	r6, r0, r6
 801079e:	b2b6      	uxth	r6, r6
 80107a0:	b232      	sxth	r2, r6
        return rect.width;
 80107a2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
        if (solidRect2.right() > getWidth())
 80107a6:	4293      	cmp	r3, r2
 80107a8:	da03      	bge.n	80107b2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xb6>
            solidRect2.width = solidRect2.right() - getWidth();
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	1af6      	subs	r6, r6, r3
 80107ae:	f8ad 6004 	strh.w	r6, [sp, #4]
        if (solidRect2.width > solidRect.width)
 80107b2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80107b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	ddc1      	ble.n	8010742 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x46>
            solidRect = solidRect2;
 80107be:	466b      	mov	r3, sp
 80107c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80107c4:	ab04      	add	r3, sp, #16
 80107c6:	e903 0003 	stmdb	r3, {r0, r1}
 80107ca:	e7ba      	b.n	8010742 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x46>
 80107cc:	fa18 f886 	uxtah	r8, r8, r6
 80107d0:	fa0f f888 	sxth.w	r8, r8
            solidRect.width = MAX(solidRect.right(), 0);
 80107d4:	f1b8 0f00 	cmp.w	r8, #0
 80107d8:	dd05      	ble.n	80107e6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xea>
 80107da:	f8ad 800c 	strh.w	r8, [sp, #12]
            solidRect.x = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80107e4:	e7d9      	b.n	801079a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x9e>
            solidRect.width = MAX(solidRect.right(), 0);
 80107e6:	f04f 0800 	mov.w	r8, #0
 80107ea:	e7f6      	b.n	80107da <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xde>
        solidRect.y -= yOffset;
 80107ec:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 80107f0:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 80107f4:	eba8 0803 	sub.w	r8, r8, r3
 80107f8:	fa1f f888 	uxth.w	r8, r8
 80107fc:	fa0f f988 	sxth.w	r9, r8
 8010800:	f8ad 900a 	strh.w	r9, [sp, #10]
        Rect solidRect2 = solidRect;
 8010804:	466b      	mov	r3, sp
 8010806:	aa04      	add	r2, sp, #16
 8010808:	e912 0003 	ldmdb	r2, {r0, r1}
 801080c:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.y += bitmap.getHeight();
 8010810:	4638      	mov	r0, r7
 8010812:	f010 f87d 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010816:	4440      	add	r0, r8
 8010818:	b280      	uxth	r0, r0
 801081a:	f8ad 0002 	strh.w	r0, [sp, #2]
        if (solidRect.y < 0)
 801081e:	f1b9 0f00 	cmp.w	r9, #0
 8010822:	db18      	blt.n	8010856 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x15a>
        return y + height;
 8010824:	fa10 f686 	uxtah	r6, r0, r6
 8010828:	b2b6      	uxth	r6, r6
 801082a:	b232      	sxth	r2, r6
        return rect.height;
 801082c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
        if (solidRect2.bottom() > getHeight())
 8010830:	4293      	cmp	r3, r2
 8010832:	da03      	bge.n	801083c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x140>
            solidRect2.height = solidRect2.bottom() - getHeight();
 8010834:	b29b      	uxth	r3, r3
 8010836:	1af6      	subs	r6, r6, r3
 8010838:	f8ad 6006 	strh.w	r6, [sp, #6]
        if (solidRect2.height > solidRect.height)
 801083c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8010840:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010844:	429a      	cmp	r2, r3
 8010846:	dd87      	ble.n	8010758 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5c>
            solidRect = solidRect2;
 8010848:	466b      	mov	r3, sp
 801084a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801084e:	ab04      	add	r3, sp, #16
 8010850:	e903 0003 	stmdb	r3, {r0, r1}
 8010854:	e780      	b.n	8010758 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5c>
 8010856:	fa18 f886 	uxtah	r8, r8, r6
 801085a:	fa0f f888 	sxth.w	r8, r8
            solidRect.height = MAX(solidRect.bottom(), 0);
 801085e:	f1b8 0f00 	cmp.w	r8, #0
 8010862:	dd05      	ble.n	8010870 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x174>
 8010864:	f8ad 800e 	strh.w	r8, [sp, #14]
            solidRect.y = 0;
 8010868:	2300      	movs	r3, #0
 801086a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801086e:	e7d9      	b.n	8010824 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x128>
            solidRect.height = MAX(solidRect.bottom(), 0);
 8010870:	f04f 0800 	mov.w	r8, #0
 8010874:	e7f6      	b.n	8010864 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x168>

08010876 <_ZN8touchgfx10TiledImageD0Ev>:
 8010876:	b510      	push	{r4, lr}
 8010878:	4604      	mov	r4, r0
 801087a:	2130      	movs	r1, #48	; 0x30
 801087c:	f012 f940 	bl	8022b00 <_ZdlPvj>
 8010880:	4620      	mov	r0, r4
 8010882:	bd10      	pop	{r4, pc}

08010884 <_ZN8touchgfx15AbstractPainterC1Ev>:
namespace touchgfx
{
AbstractPainter::AbstractPainter() :
    areaOffsetX(0),
    areaOffsetY(0),
    widgetAlpha(255)
 8010884:	4a03      	ldr	r2, [pc, #12]	; (8010894 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8010886:	6002      	str	r2, [r0, #0]
 8010888:	2200      	movs	r2, #0
 801088a:	8082      	strh	r2, [r0, #4]
 801088c:	80c2      	strh	r2, [r0, #6]
 801088e:	22ff      	movs	r2, #255	; 0xff
 8010890:	7202      	strb	r2, [r0, #8]
{
}
 8010892:	4770      	bx	lr
 8010894:	08024abc 	.word	0x08024abc

08010898 <_ZN8touchgfx15AbstractPainterD1Ev>:

AbstractPainter::~AbstractPainter()
{
}
 8010898:	4770      	bx	lr

0801089a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:

void AbstractPainter::setOffset(uint16_t offsetX, uint16_t offsetY)
{
    areaOffsetX = offsetX;
 801089a:	8081      	strh	r1, [r0, #4]
    areaOffsetY = offsetY;
 801089c:	80c2      	strh	r2, [r0, #6]
}
 801089e:	4770      	bx	lr

080108a0 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:

void AbstractPainter::setWidgetAlpha(const uint8_t alpha)
{
    widgetAlpha = alpha;
 80108a0:	7201      	strb	r1, [r0, #8]
}
 80108a2:	4770      	bx	lr

080108a4 <_ZN8touchgfx21AbstractPainterRGB56510renderInitEv>:
     * @return true if it succeeds, false if it fails.
     */
    virtual bool renderInit()
    {
        return true;
    }
 80108a4:	2001      	movs	r0, #1
 80108a6:	4770      	bx	lr

080108a8 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh>:
                                   int x,
                                   int xAdjust,
                                   int y,
                                   unsigned count,
                                   const uint8_t* covers)
{
 80108a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ac:	b084      	sub	sp, #16
 80108ae:	4604      	mov	r4, r0
 80108b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80108b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint16_t* p = reinterpret_cast<uint16_t*>(ptr) + (x + xAdjust);
 80108b4:	4413      	add	r3, r2
 80108b6:	eb01 0543 	add.w	r5, r1, r3, lsl #1

    currentX = x + areaOffsetX;
 80108ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80108be:	441a      	add	r2, r3
 80108c0:	60c2      	str	r2, [r0, #12]
    currentY = y + areaOffsetY;
 80108c2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80108c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108c8:	4413      	add	r3, r2
 80108ca:	6103      	str	r3, [r0, #16]
    if (renderInit())
 80108cc:	6803      	ldr	r3, [r0, #0]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	4798      	blx	r3
 80108d2:	b9a8      	cbnz	r0, 8010900 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x58>
            p++;
            currentX++;
        }
        while (--count != 0);
    }
}
 80108d4:	b004      	add	sp, #16
 80108d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    renderPixel(p, red, green, blue);
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80108e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80108e4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80108e8:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80108ec:	9100      	str	r1, [sp, #0]
 80108ee:	4629      	mov	r1, r5
 80108f0:	4620      	mov	r0, r4
 80108f2:	47c0      	blx	r8
            p++;
 80108f4:	3502      	adds	r5, #2
            currentX++;
 80108f6:	68e2      	ldr	r2, [r4, #12]
 80108f8:	3201      	adds	r2, #1
 80108fa:	60e2      	str	r2, [r4, #12]
        while (--count != 0);
 80108fc:	3e01      	subs	r6, #1
 80108fe:	d0e9      	beq.n	80108d4 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x2c>
            if (renderNext(red, green, blue, alpha))
 8010900:	6823      	ldr	r3, [r4, #0]
 8010902:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8010906:	f10d 030f 	add.w	r3, sp, #15
 801090a:	9300      	str	r3, [sp, #0]
 801090c:	f10d 030e 	add.w	r3, sp, #14
 8010910:	f10d 020d 	add.w	r2, sp, #13
 8010914:	a903      	add	r1, sp, #12
 8010916:	4620      	mov	r0, r4
 8010918:	47c0      	blx	r8
 801091a:	2800      	cmp	r0, #0
 801091c:	d0ea      	beq.n	80108f4 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x4c>
                if (widgetAlpha < 255)
 801091e:	7a23      	ldrb	r3, [r4, #8]
 8010920:	2bff      	cmp	r3, #255	; 0xff
 8010922:	d00a      	beq.n	801093a <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x92>
                    alpha = static_cast<uint8_t>((alpha * widgetAlpha) / 255);
 8010924:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010928:	fb03 f202 	mul.w	r2, r3, r2
 801092c:	4b24      	ldr	r3, [pc, #144]	; (80109c0 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x118>)
 801092e:	fb83 1302 	smull	r1, r3, r3, r2
 8010932:	4413      	add	r3, r2
 8010934:	11db      	asrs	r3, r3, #7
 8010936:	f88d 300f 	strb.w	r3, [sp, #15]
                uint32_t combinedAlpha = (*covers) * alpha;
 801093a:	f817 cb01 	ldrb.w	ip, [r7], #1
 801093e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8010942:	fb0c fc03 	mul.w	ip, ip, r3
                if (combinedAlpha == (255u * 255u)) // max alpha=255 on "*covers" and max alpha=255 on "widgetAlpha"
 8010946:	f64f 6301 	movw	r3, #65025	; 0xfe01
 801094a:	459c      	cmp	ip, r3
 801094c:	d0c5      	beq.n	80108da <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x32>
                    uint8_t p_red = (*p & 0xF800) >> 8;
 801094e:	f8b5 e000 	ldrh.w	lr, [r5]
 8010952:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8010956:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
                    p_red |= p_red >> 5;
 801095a:	ea40 1060 	orr.w	r0, r0, r0, asr #5
                    uint8_t p_green = (*p & 0x07E0) >> 3;
 801095e:	f3ce 01c7 	ubfx	r1, lr, #3, #8
 8010962:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
                    p_green |= p_green >> 6;
 8010966:	ea41 11a1 	orr.w	r1, r1, r1, asr #6
                    uint8_t p_blue = (*p & 0x001F) << 3;
 801096a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                    p_blue |= p_blue >> 5;
 801096e:	f3ce 1342 	ubfx	r3, lr, #5, #3
 8010972:	ea43 0e0e 	orr.w	lr, r3, lr
 8010976:	fa5f fe8e 	uxtb.w	lr, lr
                                static_cast<uint8_t>((((blue - p_blue)  * combinedAlpha) + (p_blue << 16)) >> 16));
 801097a:	6823      	ldr	r3, [r4, #0]
 801097c:	f8d3 8014 	ldr.w	r8, [r3, #20]
                                static_cast<uint8_t>((((red - p_red)   * combinedAlpha) + (p_red << 16)) >> 16),
 8010980:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010984:	1a12      	subs	r2, r2, r0
 8010986:	0400      	lsls	r0, r0, #16
 8010988:	fb0c 0202 	mla	r2, ip, r2, r0
                                static_cast<uint8_t>((((green - p_green) * combinedAlpha) + (p_green << 16)) >> 16),
 801098c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8010990:	1a5b      	subs	r3, r3, r1
 8010992:	0409      	lsls	r1, r1, #16
 8010994:	fb0c 1303 	mla	r3, ip, r3, r1
                                static_cast<uint8_t>((((blue - p_blue)  * combinedAlpha) + (p_blue << 16)) >> 16));
 8010998:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801099c:	eba1 010e 	sub.w	r1, r1, lr
 80109a0:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80109a4:	fb0c ec01 	mla	ip, ip, r1, lr
                    renderPixel(p,
 80109a8:	f3cc 4107 	ubfx	r1, ip, #16, #8
 80109ac:	9100      	str	r1, [sp, #0]
 80109ae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80109b2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80109b6:	4629      	mov	r1, r5
 80109b8:	4620      	mov	r0, r4
 80109ba:	47c0      	blx	r8
 80109bc:	e79a      	b.n	80108f4 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x4c>
 80109be:	bf00      	nop
 80109c0:	80808081 	.word	0x80808081

080109c4 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh>:

void AbstractPainterRGB565::renderPixel(uint16_t* p, uint8_t red, uint8_t green, uint8_t blue)
{
    *p = ((red << 8) & RMASK) | ((green << 3) & GMASK) | ((blue >> 3) & BMASK);
 80109c4:	4806      	ldr	r0, [pc, #24]	; (80109e0 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh+0x1c>)
 80109c6:	ea00 2202 	and.w	r2, r0, r2, lsl #8
 80109ca:	b212      	sxth	r2, r2
 80109cc:	00db      	lsls	r3, r3, #3
 80109ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80109d2:	431a      	orrs	r2, r3
 80109d4:	f89d 0000 	ldrb.w	r0, [sp]
 80109d8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 80109dc:	800a      	strh	r2, [r1, #0]
}
 80109de:	4770      	bx	lr
 80109e0:	fffff800 	.word	0xfffff800

080109e4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80109e4:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
    }
 80109e8:	4770      	bx	lr

080109ea <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     * @return The current alpha value.
     */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80109ea:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80109ee:	4770      	bx	lr

080109f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:

#include <touchgfx/widgets/canvas/Canvas.hpp>

namespace touchgfx
{
Canvas::Canvas(const CanvasWidget* _widget, const Rect& invalidatedArea) : widget(_widget),
 80109f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f4:	b089      	sub	sp, #36	; 0x24
 80109f6:	4604      	mov	r4, r0
 80109f8:	4690      	mov	r8, r2
    enoughMemory(false), penUp(true), penHasBeenDown(false), previousOutside(0), penDownOutside(0)
 80109fa:	4b94      	ldr	r3, [pc, #592]	; (8010c4c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 80109fc:	6003      	str	r3, [r0, #0]
 80109fe:	6041      	str	r1, [r0, #4]
        Q5() : v(0) { }
 8010a00:	2500      	movs	r5, #0
 8010a02:	6085      	str	r5, [r0, #8]
 8010a04:	60c5      	str	r5, [r0, #12]
 8010a06:	6105      	str	r5, [r0, #16]
 8010a08:	6145      	str	r5, [r0, #20]
 8010a0a:	f100 0618 	add.w	r6, r0, #24
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f00c fed0 	bl	801d7b4 <_ZN8touchgfx15RenderingBufferC1Ev>
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Rasterizer()
        : fillingRule(FILL_NON_ZERO)
 8010a14:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8010a18:	4638      	mov	r0, r7
 8010a1a:	f00b fdcd 	bl	801c5b8 <_ZN8touchgfx7OutlineC1Ev>
 8010a1e:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8010a22:	f00c fe7d 	bl	801d720 <_ZN8touchgfx8ScanlineC1Ev>
 8010a26:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8010a2a:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
 8010a2e:	2301      	movs	r3, #1
 8010a30:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8010a34:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8010a38:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 8010a3c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8010a40:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8010a44:	f884 50ad 	strb.w	r5, [r4, #173]	; 0xad
 8010a48:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 8010a4c:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
{
    assert(CanvasWidgetRenderer::hasBuffer() && "No buffer allocated for CanvasWidgetRenderer drawing");
 8010a50:	f00c fe16 	bl	801d680 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d05c      	beq.n	8010b12 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x122>
    assert(Rasterizer::POLY_BASE_SHIFT == 5 && "CanvasWidget assumes Q5 but Rasterizer uses a different setting");

    // Area to redraw (relative coordinates)
    Rect dirtyArea = Rect(0, 0, widget->getWidth(), widget->getHeight()) & invalidatedArea;
 8010a58:	6863      	ldr	r3, [r4, #4]
        return rect.width;
 8010a5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
        return rect.height;
 8010a5e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
        this->x = x;
 8010a62:	2300      	movs	r3, #0
 8010a64:	f8ad 3018 	strh.w	r3, [sp, #24]
        this->y = y;
 8010a68:	f8ad 301a 	strh.w	r3, [sp, #26]
        this->width = width;
 8010a6c:	f8ad 101c 	strh.w	r1, [sp, #28]
        this->height = height;
 8010a70:	f8ad 201e 	strh.w	r2, [sp, #30]
        Rect r = *this;
 8010a74:	ab02      	add	r3, sp, #8
 8010a76:	aa08      	add	r2, sp, #32
 8010a78:	e912 0003 	ldmdb	r2, {r0, r1}
 8010a7c:	e883 0003 	stmia.w	r3, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 8010a80:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
        return x + width;
 8010a84:	f9b8 1000 	ldrsh.w	r1, [r8]
 8010a88:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8010a8c:	fa13 f381 	uxtah	r3, r3, r1
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	b21d      	sxth	r5, r3
        return !(x >= other.right() || right() <= other.x ||
 8010a94:	42a8      	cmp	r0, r5
 8010a96:	da44      	bge.n	8010b22 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x132>
        return x + width;
 8010a98:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010a9c:	fa12 f280 	uxtah	r2, r2, r0
 8010aa0:	b292      	uxth	r2, r2
 8010aa2:	fa0f fc82 	sxth.w	ip, r2
        return !(x >= other.right() || right() <= other.x ||
 8010aa6:	4561      	cmp	r1, ip
 8010aa8:	da3b      	bge.n	8010b22 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x132>
                 y >= other.bottom() || bottom() <= other.y);
 8010aaa:	f9bd b00a 	ldrsh.w	fp, [sp, #10]
        return y + height;
 8010aae:	f9b8 e002 	ldrsh.w	lr, [r8, #2]
 8010ab2:	f8b8 9006 	ldrh.w	r9, [r8, #6]
 8010ab6:	fa19 f98e 	uxtah	r9, r9, lr
 8010aba:	fa0f f989 	sxth.w	r9, r9
        return !(x >= other.right() || right() <= other.x ||
 8010abe:	45cb      	cmp	fp, r9
 8010ac0:	da2f      	bge.n	8010b22 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x132>
        return y + height;
 8010ac2:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8010ac6:	fa19 f98b 	uxtah	r9, r9, fp
 8010aca:	fa1f f989 	uxth.w	r9, r9
 8010ace:	fa0f fa89 	sxth.w	sl, r9
        return !(x >= other.right() || right() <= other.x ||
 8010ad2:	45d6      	cmp	lr, sl
 8010ad4:	da25      	bge.n	8010b22 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x132>
            int16_t newX = MAX(x, other.x);
 8010ad6:	4288      	cmp	r0, r1
 8010ad8:	dd00      	ble.n	8010adc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xec>
 8010ada:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 8010adc:	45f3      	cmp	fp, lr
 8010ade:	dd00      	ble.n	8010ae2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xf2>
 8010ae0:	46de      	mov	lr, fp
            width = MIN(right(), other.right()) - newX;
 8010ae2:	4565      	cmp	r5, ip
 8010ae4:	dd00      	ble.n	8010ae8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xf8>
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	1a5b      	subs	r3, r3, r1
 8010aea:	f8ad 300c 	strh.w	r3, [sp, #12]
        return y + height;
 8010aee:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010af2:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8010af6:	4413      	add	r3, r2
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 8010afc:	4592      	cmp	sl, r2
 8010afe:	db0e      	blt.n	8010b1e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12e>
 8010b00:	eba3 030e 	sub.w	r3, r3, lr
 8010b04:	f8ad 300e 	strh.w	r3, [sp, #14]
            x = newX;
 8010b08:	f8ad 1008 	strh.w	r1, [sp, #8]
            y = newY;
 8010b0c:	f8ad e00a 	strh.w	lr, [sp, #10]
 8010b10:	e010      	b.n	8010b34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x144>
    assert(CanvasWidgetRenderer::hasBuffer() && "No buffer allocated for CanvasWidgetRenderer drawing");
 8010b12:	4b4f      	ldr	r3, [pc, #316]	; (8010c50 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x260>)
 8010b14:	4a4f      	ldr	r2, [pc, #316]	; (8010c54 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x264>)
 8010b16:	2117      	movs	r1, #23
 8010b18:	484f      	ldr	r0, [pc, #316]	; (8010c58 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x268>)
 8010b1a:	f012 f80d 	bl	8022b38 <__assert_func>
            height = MIN(bottom(), other.bottom()) - newY;
 8010b1e:	464b      	mov	r3, r9
 8010b20:	e7ee      	b.n	8010b00 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x110>
            x = 0;
 8010b22:	2300      	movs	r3, #0
 8010b24:	f8ad 3008 	strh.w	r3, [sp, #8]
            y = 0;
 8010b28:	f8ad 300a 	strh.w	r3, [sp, #10]
            width = 0;
 8010b2c:	f8ad 300c 	strh.w	r3, [sp, #12]
            height = 0;
 8010b30:	f8ad 300e 	strh.w	r3, [sp, #14]

    // Absolute position of the scalableImage.
    Rect dirtyAreaAbsolute = dirtyArea;
 8010b34:	ad04      	add	r5, sp, #16
 8010b36:	f10d 0808 	add.w	r8, sp, #8
 8010b3a:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010b3e:	e885 0003 	stmia.w	r5, {r0, r1}
    widget->translateRectToAbsolute(dirtyAreaAbsolute);
 8010b42:	6860      	ldr	r0, [r4, #4]
 8010b44:	6803      	ldr	r3, [r0, #0]
 8010b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b48:	4629      	mov	r1, r5
 8010b4a:	4798      	blx	r3

    // Transform rects to match frame buffer coordinates
    // This is needed if the display is rotated compared to the frame buffer
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyArea, widget->getRect());
 8010b4c:	6861      	ldr	r1, [r4, #4]
 8010b4e:	3104      	adds	r1, #4
 8010b50:	4640      	mov	r0, r8
 8010b52:	f00d fd3d 	bl	801e5d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyAreaAbsolute);
 8010b56:	4628      	mov	r0, r5
 8010b58:	f00d fd52 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>

    // Re-size buffers for optimum memory buffer layout.
    enoughMemory = CanvasWidgetRenderer::setScanlineWidth(dirtyArea.width);
 8010b5c:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8010b60:	f00c fd1c 	bl	801d59c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8010b64:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
     *
     *        Resets this object. Basically this is done by resetting the the Outline.
     */
    void reset()
    {
        outline.reset();
 8010b68:	4638      	mov	r0, r7
 8010b6a:	f00b fd01 	bl	801c570 <_ZN8touchgfx7Outline5resetEv>
    ras.reset();

    offsetX = dirtyArea.x;
 8010b6e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8010b72:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
    offsetY = dirtyArea.y;
 8010b76:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8010b7a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8010b7e:	0152      	lsls	r2, r2, #5
    invalidatedAreaX = CWRUtil::toQ5<int>(dirtyArea.x);
 8010b80:	60a2      	str	r2, [r4, #8]
 8010b82:	015b      	lsls	r3, r3, #5
    invalidatedAreaY = CWRUtil::toQ5<int>(dirtyArea.y);
 8010b84:	60e3      	str	r3, [r4, #12]
    invalidatedAreaWidth = CWRUtil::toQ5<int>(dirtyArea.width);
 8010b86:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010b8a:	015b      	lsls	r3, r3, #5
 8010b8c:	6123      	str	r3, [r4, #16]
    invalidatedAreaHeight = CWRUtil::toQ5<int>(dirtyArea.height);
 8010b8e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010b92:	015b      	lsls	r3, r3, #5
 8010b94:	6163      	str	r3, [r4, #20]
        return instance;
 8010b96:	4f31      	ldr	r7, [pc, #196]	; (8010c5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x26c>)
 8010b98:	6838      	ldr	r0, [r7, #0]

    // Create the rendering buffer
    uint8_t* RESTRICT buf = reinterpret_cast<uint8_t*>(HAL::getInstance()->lockFrameBuffer());
 8010b9a:	6803      	ldr	r3, [r0, #0]
 8010b9c:	6a1b      	ldr	r3, [r3, #32]
 8010b9e:	4798      	blx	r3
 8010ba0:	4605      	mov	r5, r0
        return instance->lcdRef;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	6898      	ldr	r0, [r3, #8]
    int stride = 0;
    uint8_t offset = 0;
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8010ba6:	6803      	ldr	r3, [r0, #0]
 8010ba8:	6a1b      	ldr	r3, [r3, #32]
 8010baa:	4798      	blx	r3
    switch (bitDepth)
 8010bac:	1e43      	subs	r3, r0, #1
 8010bae:	2b1f      	cmp	r3, #31
 8010bb0:	d846      	bhi.n	8010c40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>
 8010bb2:	e8df f003 	tbb	[pc, r3]
 8010bb6:	1010      	.short	0x1010
 8010bb8:	45451045 	.word	0x45451045
 8010bbc:	45454545 	.word	0x45454545
 8010bc0:	45454545 	.word	0x45454545
 8010bc4:	45453445 	.word	0x45453445
 8010bc8:	45454545 	.word	0x45454545
 8010bcc:	45453445 	.word	0x45453445
 8010bd0:	45454545 	.word	0x45454545
 8010bd4:	3445      	.short	0x3445
    {
    case 1: // BW
    case 2: // GRAY2
    case 4: // GRAY4
        {
            uint8_t bitsPerByte = 8 / bitDepth;
 8010bd6:	2208      	movs	r2, #8
 8010bd8:	fb92 f2f0 	sdiv	r2, r2, r0
 8010bdc:	b2d3      	uxtb	r3, r2
            stride = (HAL::FRAME_BUFFER_WIDTH + (bitsPerByte - 1)) / bitsPerByte;
 8010bde:	1e5a      	subs	r2, r3, #1
 8010be0:	491f      	ldr	r1, [pc, #124]	; (8010c60 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x270>)
 8010be2:	880f      	ldrh	r7, [r1, #0]
 8010be4:	4417      	add	r7, r2
 8010be6:	fb97 f7f3 	sdiv	r7, r7, r3
            buf += (dirtyAreaAbsolute.x / bitsPerByte) + dirtyAreaAbsolute.y * stride;
 8010bea:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8010bee:	fb9c f2f3 	sdiv	r2, ip, r3
 8010bf2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8010bf6:	fb07 2001 	mla	r0, r7, r1, r2
 8010bfa:	1829      	adds	r1, r5, r0
            offset = dirtyAreaAbsolute.x % bitsPerByte;
 8010bfc:	fb03 c212 	mls	r2, r3, r2, ip
 8010c00:	b2d2      	uxtb	r2, r2
        break;
    default:
        assert(0 && "Unsupported bit depth");
        break;
    }
    ras.setMaxRenderY(dirtyAreaAbsolute.height);
 8010c02:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
     *
     * @param y The max y coordinate to render for the Outline.
     */
    void setMaxRenderY(int y)
    {
        maxRenderY = y;
 8010c06:	66e0      	str	r0, [r4, #108]	; 0x6c
    rbuf.attach(buf, offset, dirtyAreaAbsolute.width, dirtyAreaAbsolute.height, stride);
 8010c08:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010c0c:	9701      	str	r7, [sp, #4]
 8010c0e:	9000      	str	r0, [sp, #0]
 8010c10:	4630      	mov	r0, r6
 8010c12:	f00c fdd7 	bl	801d7c4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
}
 8010c16:	4620      	mov	r0, r4
 8010c18:	b009      	add	sp, #36	; 0x24
 8010c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        stride = HAL::FRAME_BUFFER_WIDTH * (bitDepth / 8);
 8010c1e:	4b10      	ldr	r3, [pc, #64]	; (8010c60 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x270>)
 8010c20:	881f      	ldrh	r7, [r3, #0]
 8010c22:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8010c26:	fb00 f707 	mul.w	r7, r0, r7
        buf += dirtyAreaAbsolute.x * (bitDepth / 8) + dirtyAreaAbsolute.y * stride;
 8010c2a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8010c2e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8010c32:	fb07 f101 	mul.w	r1, r7, r1
 8010c36:	fb03 1000 	mla	r0, r3, r0, r1
 8010c3a:	1829      	adds	r1, r5, r0
    uint8_t offset = 0;
 8010c3c:	2200      	movs	r2, #0
        break;
 8010c3e:	e7e0      	b.n	8010c02 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x212>
        assert(0 && "Unsupported bit depth");
 8010c40:	4b08      	ldr	r3, [pc, #32]	; (8010c64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x274>)
 8010c42:	4a04      	ldr	r2, [pc, #16]	; (8010c54 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x264>)
 8010c44:	2149      	movs	r1, #73	; 0x49
 8010c46:	4804      	ldr	r0, [pc, #16]	; (8010c58 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x268>)
 8010c48:	f011 ff76 	bl	8022b38 <__assert_func>
 8010c4c:	08024c7c 	.word	0x08024c7c
 8010c50:	08024ba0 	.word	0x08024ba0
 8010c54:	08024c84 	.word	0x08024c84
 8010c58:	08024bfc 	.word	0x08024bfc
 8010c5c:	2000ba4c 	.word	0x2000ba4c
 8010c60:	2000ba46 	.word	0x2000ba46
 8010c64:	08024c54 	.word	0x08024c54

08010c68 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
            return v;
 8010c68:	6812      	ldr	r2, [r2, #0]

uint8_t Canvas::isOutside(const CWRUtil::Q5& x, const CWRUtil::Q5& y, const CWRUtil::Q5& width, const CWRUtil::Q5& height) const
{
    uint8_t outside = 0;
    // Find out if (x,y) is above/below of current area
    if (y < 0)
 8010c6a:	2a00      	cmp	r2, #0
 8010c6c:	db05      	blt.n	8010c7a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8010c6e:	9800      	ldr	r0, [sp, #0]
 8010c70:	6800      	ldr	r0, [r0, #0]
    {
        outside = POINT_IS_ABOVE;
    }
    else if (y >= height)
 8010c72:	4290      	cmp	r0, r2
 8010c74:	dd0b      	ble.n	8010c8e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x26>
    uint8_t outside = 0;
 8010c76:	2000      	movs	r0, #0
 8010c78:	e000      	b.n	8010c7c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x14>
        outside = POINT_IS_ABOVE;
 8010c7a:	2001      	movs	r0, #1
 8010c7c:	680a      	ldr	r2, [r1, #0]
    {
        outside = POINT_IS_BELOW;
    }
    // Find out if (x,y) is left/right of current area
    if (x < 0)
 8010c7e:	2a00      	cmp	r2, #0
 8010c80:	db07      	blt.n	8010c92 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x2a>
 8010c82:	681b      	ldr	r3, [r3, #0]
    {
        outside |= POINT_IS_LEFT;
    }
    else if (x >= width)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	dc01      	bgt.n	8010c8c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x24>
    {
        outside |= POINT_IS_RIGHT;
 8010c88:	f040 0008 	orr.w	r0, r0, #8
    }
    return outside;
}
 8010c8c:	4770      	bx	lr
        outside = POINT_IS_BELOW;
 8010c8e:	2002      	movs	r0, #2
 8010c90:	e7f4      	b.n	8010c7c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x14>
        outside |= POINT_IS_LEFT;
 8010c92:	f040 0004 	orr.w	r0, r0, #4
 8010c96:	4770      	bx	lr

08010c98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:

void Canvas::transformFrameBufferToDisplay(CWRUtil::Q5& x, CWRUtil::Q5& y) const
{
    switch (HAL::DISPLAY_ROTATION)
 8010c98:	4b09      	ldr	r3, [pc, #36]	; (8010cc0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x28>)
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	b173      	cbz	r3, 8010cbc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x24>
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d10c      	bne.n	8010cbc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x24>
{
 8010ca2:	b410      	push	{r4}
    {
    case rotate0:
        break;
    case rotate90:
        CWRUtil::Q5 tmpY = y;
 8010ca4:	6814      	ldr	r4, [r2, #0]
        y = CWRUtil::toQ5<int>(widget->getWidth()) - x;
 8010ca6:	6843      	ldr	r3, [r0, #4]
        return rect.width;
 8010ca8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
            return Q5(v - q5.v);
 8010cac:	680b      	ldr	r3, [r1, #0]
 8010cae:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8010cb2:	6013      	str	r3, [r2, #0]
        x = tmpY;
 8010cb4:	600c      	str	r4, [r1, #0]
        break;
    }
}
 8010cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cba:	4770      	bx	lr
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	2000ba44 	.word	0x2000ba44

08010cc4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
{
 8010cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cc6:	b085      	sub	sp, #20
 8010cc8:	9103      	str	r1, [sp, #12]
 8010cca:	9202      	str	r2, [sp, #8]
    if (!enoughMemory)
 8010ccc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8010cd0:	b90b      	cbnz	r3, 8010cd6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x12>
}
 8010cd2:	b005      	add	sp, #20
 8010cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cd6:	4604      	mov	r4, r0
    transformFrameBufferToDisplay(x, y);
 8010cd8:	aa02      	add	r2, sp, #8
 8010cda:	a903      	add	r1, sp, #12
 8010cdc:	f7ff ffdc 	bl	8010c98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8010ce0:	68a3      	ldr	r3, [r4, #8]
 8010ce2:	9d03      	ldr	r5, [sp, #12]
 8010ce4:	1aed      	subs	r5, r5, r3
    x = x - invalidatedAreaX;
 8010ce6:	9503      	str	r5, [sp, #12]
 8010ce8:	68e3      	ldr	r3, [r4, #12]
 8010cea:	9e02      	ldr	r6, [sp, #8]
 8010cec:	1af6      	subs	r6, r6, r3
    y = y - invalidatedAreaY;
 8010cee:	9602      	str	r6, [sp, #8]
    uint8_t outside = isOutside(x, y, invalidatedAreaWidth, invalidatedAreaHeight);
 8010cf0:	f104 0314 	add.w	r3, r4, #20
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	f104 0310 	add.w	r3, r4, #16
 8010cfa:	aa02      	add	r2, sp, #8
 8010cfc:	a903      	add	r1, sp, #12
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f7ff ffb2 	bl	8010c68 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8010d04:	4607      	mov	r7, r0
    if (!previousOutside)
 8010d06:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8010d0a:	b993      	cbnz	r3, 8010d32 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6e>
     *
     * @return false if the buffer for Outline Cell objects was too small.
     */
    bool wasOutlineTooComplex()
    {
        return outlineTooComplex;
 8010d0c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
     * @param y The y coordinate.
     */
    void lineTo(int x, int y)
    {
#ifndef SIMULATOR
        if (!outline.wasOutlineTooComplex())
 8010d10:	b143      	cbz	r3, 8010d24 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
    previousX = x;
 8010d12:	9b03      	ldr	r3, [sp, #12]
 8010d14:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    previousY = y;
 8010d18:	9b02      	ldr	r3, [sp, #8]
 8010d1a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    previousOutside = outside;
 8010d1e:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8010d22:	e7d6      	b.n	8010cd2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xe>
#endif
        {
            outline.lineTo(x, y);
 8010d24:	4632      	mov	r2, r6
 8010d26:	4629      	mov	r1, r5
 8010d28:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8010d2c:	f00c fa77 	bl	801d21e <_ZN8touchgfx7Outline6lineToEii>
 8010d30:	e7ef      	b.n	8010d12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
        if (!outside || !(previousOutside & outside))
 8010d32:	b110      	cbz	r0, 8010d3a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x76>
 8010d34:	ea13 0200 	ands.w	r2, r3, r0
 8010d38:	d12e      	bne.n	8010d98 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xd4>
            if (penUp)
 8010d3a:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8010d3e:	b1f2      	cbz	r2, 8010d7e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xba>
                penDownOutside = previousOutside;
 8010d40:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
            return v;
 8010d44:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8010d48:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8010d4c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 8010d50:	b183      	cbz	r3, 8010d74 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xb0>
                penUp = false;
 8010d52:	2300      	movs	r3, #0
 8010d54:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
                penHasBeenDown = true;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8010d5e:	9903      	ldr	r1, [sp, #12]
 8010d60:	9a02      	ldr	r2, [sp, #8]
 8010d62:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1d3      	bne.n	8010d12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
            outline.lineTo(x, y);
 8010d6a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8010d6e:	f00c fa56 	bl	801d21e <_ZN8touchgfx7Outline6lineToEii>
 8010d72:	e7ce      	b.n	8010d12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
            outline.moveTo(x, y);
 8010d74:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8010d78:	f00c fa81 	bl	801d27e <_ZN8touchgfx7Outline6moveToEii>
 8010d7c:	e7e9      	b.n	8010d52 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8e>
 8010d7e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8010d82:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8010d86:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1e7      	bne.n	8010d5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9a>
            outline.lineTo(x, y);
 8010d8e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8010d92:	f00c fa44 	bl	801d21e <_ZN8touchgfx7Outline6lineToEii>
 8010d96:	e7e2      	b.n	8010d5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9a>
            outside &= previousOutside;
 8010d98:	4617      	mov	r7, r2
 8010d9a:	e7ba      	b.n	8010d12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>

08010d9c <_ZN8touchgfx6Canvas5closeEv>:

void Canvas::close()
{
 8010d9c:	b510      	push	{r4, lr}
 8010d9e:	4604      	mov	r4, r0
    if (!penUp)
 8010da0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8010da4:	b9a3      	cbnz	r3, 8010dd0 <_ZN8touchgfx6Canvas5closeEv+0x34>
    {
        if (previousOutside & penDownOutside)
 8010da6:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8010daa:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8010dae:	4213      	tst	r3, r2
 8010db0:	d10e      	bne.n	8010dd0 <_ZN8touchgfx6Canvas5closeEv+0x34>
            //  to close the path, CWR will do this for us.
            //lineTo(penDownX, penDownY);
        }
        else
        {
            if (previousOutside)
 8010db2:	b133      	cbz	r3, 8010dc2 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8010db4:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
 8010db8:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 8010dbc:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 8010dc0:	b153      	cbz	r3, 8010dd8 <_ZN8touchgfx6Canvas5closeEv+0x3c>
 8010dc2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8010dc6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8010dca:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8010dce:	b13b      	cbz	r3, 8010de0 <_ZN8touchgfx6Canvas5closeEv+0x44>
                ras.lineTo(previousX, previousY);
            }
            ras.lineTo(initialX, initialY);
        }
    }
    penUp = false;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8010dd6:	bd10      	pop	{r4, pc}
            outline.lineTo(x, y);
 8010dd8:	302c      	adds	r0, #44	; 0x2c
 8010dda:	f00c fa20 	bl	801d21e <_ZN8touchgfx7Outline6lineToEii>
 8010dde:	e7f0      	b.n	8010dc2 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8010de0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8010de4:	f00c fa1b 	bl	801d21e <_ZN8touchgfx7Outline6lineToEii>
 8010de8:	e7f2      	b.n	8010dd0 <_ZN8touchgfx6Canvas5closeEv+0x34>

08010dea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
{
 8010dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dec:	b085      	sub	sp, #20
 8010dee:	9103      	str	r1, [sp, #12]
 8010df0:	9202      	str	r2, [sp, #8]
    if (!enoughMemory)
 8010df2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8010df6:	b35b      	cbz	r3, 8010e50 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8010df8:	4604      	mov	r4, r0
    if (!penUp)
 8010dfa:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8010dfe:	b34b      	cbz	r3, 8010e54 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
    transformFrameBufferToDisplay(x, y);
 8010e00:	aa02      	add	r2, sp, #8
 8010e02:	a903      	add	r1, sp, #12
 8010e04:	4620      	mov	r0, r4
 8010e06:	f7ff ff47 	bl	8010c98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
            return Q5(v - q5.v);
 8010e0a:	68a3      	ldr	r3, [r4, #8]
 8010e0c:	9d03      	ldr	r5, [sp, #12]
 8010e0e:	1aed      	subs	r5, r5, r3
    x = x - invalidatedAreaX;
 8010e10:	9503      	str	r5, [sp, #12]
 8010e12:	68e3      	ldr	r3, [r4, #12]
 8010e14:	9e02      	ldr	r6, [sp, #8]
 8010e16:	1af6      	subs	r6, r6, r3
    y = y - invalidatedAreaY;
 8010e18:	9602      	str	r6, [sp, #8]
    uint8_t outside = isOutside(x, y, invalidatedAreaWidth, invalidatedAreaHeight);
 8010e1a:	f104 0314 	add.w	r3, r4, #20
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	f104 0310 	add.w	r3, r4, #16
 8010e24:	aa02      	add	r2, sp, #8
 8010e26:	a903      	add	r1, sp, #12
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f7ff ff1d 	bl	8010c68 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
    if (outside)
 8010e2e:	4607      	mov	r7, r0
 8010e30:	b198      	cbz	r0, 8010e5a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x70>
        penUp = true;
 8010e32:	2301      	movs	r3, #1
 8010e34:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    initialX = x;
 8010e38:	9a03      	ldr	r2, [sp, #12]
 8010e3a:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    initialY = y;
 8010e3e:	9b02      	ldr	r3, [sp, #8]
 8010e40:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    previousX = x;
 8010e44:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    previousY = y;
 8010e48:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    previousOutside = outside;
 8010e4c:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
}
 8010e50:	b005      	add	sp, #20
 8010e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        close();
 8010e54:	f7ff ffa2 	bl	8010d9c <_ZN8touchgfx6Canvas5closeEv>
 8010e58:	e7d2      	b.n	8010e00 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x16>
        penDownOutside = outside;
 8010e5a:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8010e5e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 8010e62:	b133      	cbz	r3, 8010e72 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x88>
        penUp = false;
 8010e64:	2300      	movs	r3, #0
 8010e66:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
        penHasBeenDown = true;
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8010e70:	e7e2      	b.n	8010e38 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x4e>
            outline.moveTo(x, y);
 8010e72:	4632      	mov	r2, r6
 8010e74:	4629      	mov	r1, r5
 8010e76:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8010e7a:	f00c fa00 	bl	801d27e <_ZN8touchgfx7Outline6moveToEii>
 8010e7e:	e7f1      	b.n	8010e64 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x7a>

08010e80 <_ZN8touchgfx6Canvas6renderEv>:
    if (!enoughMemory)
 8010e80:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f000 81fd 	beq.w	8011284 <_ZN8touchgfx6Canvas6renderEv+0x404>
{
 8010e8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8e:	b093      	sub	sp, #76	; 0x4c
 8010e90:	f890 5070 	ldrb.w	r5, [r0, #112]	; 0x70
    if (ras.wasOutlineTooComplex())
 8010e94:	2d00      	cmp	r5, #0
 8010e96:	f040 81f8 	bne.w	801128a <_ZN8touchgfx6Canvas6renderEv+0x40a>
    if (!penHasBeenDown)
 8010e9a:	f890 b0a2 	ldrb.w	fp, [r0, #162]	; 0xa2
 8010e9e:	f1bb 0f00 	cmp.w	fp, #0
 8010ea2:	f000 81f3 	beq.w	801128c <_ZN8touchgfx6Canvas6renderEv+0x40c>
 8010ea6:	4681      	mov	r9, r0
    if (widget->getAlpha() == 0)
 8010ea8:	6840      	ldr	r0, [r0, #4]
 8010eaa:	6803      	ldr	r3, [r0, #0]
 8010eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eae:	4798      	blx	r3
 8010eb0:	b908      	cbnz	r0, 8010eb6 <_ZN8touchgfx6Canvas6renderEv+0x36>
        return true; // Invisible. Done
 8010eb2:	465b      	mov	r3, fp
 8010eb4:	e1ea      	b.n	801128c <_ZN8touchgfx6Canvas6renderEv+0x40c>
    close();
 8010eb6:	4648      	mov	r0, r9
 8010eb8:	f7ff ff70 	bl	8010d9c <_ZN8touchgfx6Canvas5closeEv>
    widget->getPainter().setOffset(offsetX/*+widget->getX()*/, offsetY/*+widget->getY()*/);
 8010ebc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010ec0:	6803      	ldr	r3, [r0, #0]
 8010ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ec4:	4798      	blx	r3
 8010ec6:	f9b9 109c 	ldrsh.w	r1, [r9, #156]	; 0x9c
 8010eca:	f9b9 209e 	ldrsh.w	r2, [r9, #158]	; 0x9e
 8010ece:	b292      	uxth	r2, r2
 8010ed0:	b289      	uxth	r1, r1
 8010ed2:	f7ff fce2 	bl	801089a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
    widget->getPainter().setWidgetAlpha(widget->getAlpha());
 8010ed6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010eda:	6803      	ldr	r3, [r0, #0]
 8010edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ede:	4798      	blx	r3
 8010ee0:	4606      	mov	r6, r0
 8010ee2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010ee6:	6803      	ldr	r3, [r0, #0]
 8010ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eea:	4798      	blx	r3
 8010eec:	4601      	mov	r1, r0
 8010eee:	4630      	mov	r0, r6
 8010ef0:	f7ff fcd6 	bl	80108a0 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
    Renderer renderer(rbuf, widget->getPainter());
 8010ef4:	f109 0618 	add.w	r6, r9, #24
 8010ef8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010efc:	6803      	ldr	r3, [r0, #0]
 8010efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f00:	4798      	blx	r3
     * @param [in] renderingBuffer The screen buffer to render the polygon in.
     * @param [in] painter         The painter to use for drawing individual pixels in a
     *                             scanline.
     */
    Renderer(RenderingBuffer& renderingBuffer, AbstractPainter& painter)
        : renderingBuffer(&renderingBuffer), painter(&painter)
 8010f02:	9610      	str	r6, [sp, #64]	; 0x40
 8010f04:	9011      	str	r0, [sp, #68]	; 0x44
    return ras.render(renderer);
 8010f06:	f109 092c 	add.w	r9, r9, #44	; 0x2c
     *         false if there was insufficient memory and nothing was drawn.
     */
    template <class Renderer>
    bool render(Renderer& r)
    {
        const Cell* cells = outline.getCells();
 8010f0a:	4648      	mov	r0, r9
 8010f0c:	f00c fb00 	bl	801d510 <_ZN8touchgfx7Outline8getCellsEv>
 8010f10:	4607      	mov	r7, r0
        return numCells;
 8010f12:	f8d9 4008 	ldr.w	r4, [r9, #8]
        unsigned numCells = outline.getNumCells();
        if (numCells == 0)
 8010f16:	b11c      	cbz	r4, 8010f20 <_ZN8touchgfx6Canvas6renderEv+0xa0>
        return outlineTooComplex;
 8010f18:	f899 3044 	ldrb.w	r3, [r9, #68]	; 0x44
        {
            return true;
        }

        // Not enough memory allocated, the outline will look wrong. Do not proceed with the drawing.
        if (outline.wasOutlineTooComplex())
 8010f1c:	b113      	cbz	r3, 8010f24 <_ZN8touchgfx6Canvas6renderEv+0xa4>
        {
            return false;
 8010f1e:	46ab      	mov	fp, r5
 8010f20:	465b      	mov	r3, fp
 8010f22:	e1b3      	b.n	801128c <_ZN8touchgfx6Canvas6renderEv+0x40c>
        int x, y;
        int cover;
        int alpha;
        int area;

        scanline.reset();
 8010f24:	f109 0348 	add.w	r3, r9, #72	; 0x48
 8010f28:	9305      	str	r3, [sp, #20]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f00c fbe2 	bl	801d6f4 <_ZN8touchgfx8Scanline5resetEv>

        cover = 0;
        const Cell* curCell = cells++;
 8010f30:	f107 0808 	add.w	r8, r7, #8
        numCells--;
 8010f34:	1e63      	subs	r3, r4, #1
        cover = 0;
 8010f36:	f04f 0a00 	mov.w	sl, #0
 8010f3a:	f8cd b018 	str.w	fp, [sp, #24]
 8010f3e:	e0e3      	b.n	8011108 <_ZN8touchgfx6Canvas6renderEv+0x288>
            cover += startCell->cover;

            //accumulate all start cells
            while (numCells-- > 0)
            {
                curCell = cells++;
 8010f40:	4647      	mov	r7, r8
 8010f42:	4688      	mov	r8, r1
                }
                area += curCell->area;
                cover += curCell->cover;
            }

            if (area)
 8010f44:	b30c      	cbz	r4, 8010f8a <_ZN8touchgfx6Canvas6renderEv+0x10a>
            {
                alpha = calculateAlpha((cover << (Rasterizer::POLY_BASE_SHIFT + 1)) - area);
 8010f46:	ebc4 148a 	rsb	r4, r4, sl, lsl #6
        if (cover < 0)
 8010f4a:	10e4      	asrs	r4, r4, #3
 8010f4c:	d407      	bmi.n	8010f5e <_ZN8touchgfx6Canvas6renderEv+0xde>
        if (fillingRule == FILL_EVEN_ODD)
 8010f4e:	f899 306c 	ldrb.w	r3, [r9, #108]	; 0x6c
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d005      	beq.n	8010f62 <_ZN8touchgfx6Canvas6renderEv+0xe2>
        if (cover > AA_MASK)
 8010f56:	2cff      	cmp	r4, #255	; 0xff
 8010f58:	dc0b      	bgt.n	8010f72 <_ZN8touchgfx6Canvas6renderEv+0xf2>
                if (alpha)
 8010f5a:	b1a4      	cbz	r4, 8010f86 <_ZN8touchgfx6Canvas6renderEv+0x106>
 8010f5c:	e00a      	b.n	8010f74 <_ZN8touchgfx6Canvas6renderEv+0xf4>
            cover = -cover;
 8010f5e:	4264      	negs	r4, r4
 8010f60:	e7f5      	b.n	8010f4e <_ZN8touchgfx6Canvas6renderEv+0xce>
            cover &= AA_2MASK;
 8010f62:	f3c4 0408 	ubfx	r4, r4, #0, #9
            if (cover > AA_NUM)
 8010f66:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8010f6a:	ddf4      	ble.n	8010f56 <_ZN8touchgfx6Canvas6renderEv+0xd6>
                cover = AA_2NUM - cover;
 8010f6c:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
 8010f70:	e7f1      	b.n	8010f56 <_ZN8touchgfx6Canvas6renderEv+0xd6>
            cover = AA_MASK;
 8010f72:	24ff      	movs	r4, #255	; 0xff
    lastY = y;
}

FORCE_INLINE_FUNCTION int Scanline::isReady(int y) const
{
    return numSpans && (y ^ lastY);
 8010f74:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8010f78:	b11b      	cbz	r3, 8010f82 <_ZN8touchgfx6Canvas6renderEv+0x102>
 8010f7a:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8010f7e:	459b      	cmp	fp, r3
 8010f80:	d11e      	bne.n	8010fc0 <_ZN8touchgfx6Canvas6renderEv+0x140>
    if (x < 0)
 8010f82:	2e00      	cmp	r6, #0
 8010f84:	da7a      	bge.n	801107c <_ZN8touchgfx6Canvas6renderEv+0x1fc>
                        r.render(scanline);
                        scanline.resetSpans();
                    }
                    scanline.addCell(x, y, alpha);
                }
                x++;
 8010f86:	1c73      	adds	r3, r6, #1
 8010f88:	9304      	str	r3, [sp, #16]
            }

            if (numCells == unsigned(-1))
 8010f8a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8010f8e:	f000 813a 	beq.w	8011206 <_ZN8touchgfx6Canvas6renderEv+0x386>
            {
                break;
            }

            if (curCell->x > x)
 8010f92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8010f96:	9a04      	ldr	r2, [sp, #16]
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	f340 80b4 	ble.w	8011106 <_ZN8touchgfx6Canvas6renderEv+0x286>
            {
                alpha = calculateAlpha(cover << (Rasterizer::POLY_BASE_SHIFT + 1));
 8010f9e:	ea4f 148a 	mov.w	r4, sl, lsl #6
        if (cover < 0)
 8010fa2:	10e4      	asrs	r4, r4, #3
 8010fa4:	f100 8093 	bmi.w	80110ce <_ZN8touchgfx6Canvas6renderEv+0x24e>
        if (fillingRule == FILL_EVEN_ODD)
 8010fa8:	f899 306c 	ldrb.w	r3, [r9, #108]	; 0x6c
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	f000 8090 	beq.w	80110d2 <_ZN8touchgfx6Canvas6renderEv+0x252>
        if (cover > AA_MASK)
 8010fb2:	2cff      	cmp	r4, #255	; 0xff
 8010fb4:	f300 8096 	bgt.w	80110e4 <_ZN8touchgfx6Canvas6renderEv+0x264>
                if (alpha)
 8010fb8:	2c00      	cmp	r4, #0
 8010fba:	f000 80a4 	beq.w	8011106 <_ZN8touchgfx6Canvas6renderEv+0x286>
 8010fbe:	e092      	b.n	80110e6 <_ZN8touchgfx6Canvas6renderEv+0x266>
        return lastY;
 8010fc0:	9905      	ldr	r1, [sp, #20]
 8010fc2:	6888      	ldr	r0, [r1, #8]
     *
     * @param scanline The Scanline.
     */
    void render(const Scanline& scanline)
    {
        if (scanline.getY() < 0 || scanline.getY() >= int(renderingBuffer->getHeight()))
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	db47      	blt.n	8011058 <_ZN8touchgfx6Canvas6renderEv+0x1d8>
 8010fc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
     *
     * @return The height.
     */
    unsigned getHeight() const
    {
        return height;
 8010fca:	68da      	ldr	r2, [r3, #12]
 8010fcc:	4684      	mov	ip, r0
 8010fce:	4290      	cmp	r0, r2
 8010fd0:	da42      	bge.n	8011058 <_ZN8touchgfx6Canvas6renderEv+0x1d8>
        return numSpans;
 8010fd2:	9107      	str	r1, [sp, #28]
 8010fd4:	68c9      	ldr	r1, [r1, #12]
 8010fd6:	468e      	mov	lr, r1
     *
     * @return The pointer to the start of the given line in the RenderingBuffer.
     */
    unsigned char* row(unsigned y)
    {
        return buf + stride * y;
 8010fd8:	6819      	ldr	r1, [r3, #0]
 8010fda:	691a      	ldr	r2, [r3, #16]
 8010fdc:	4610      	mov	r0, r2
 8010fde:	fb00 120c 	mla	r2, r0, ip, r1
 8010fe2:	9204      	str	r2, [sp, #16]
            covers(scanline.covers),
 8010fe4:	9807      	ldr	r0, [sp, #28]
 8010fe6:	6982      	ldr	r2, [r0, #24]
 8010fe8:	4611      	mov	r1, r2
            curCount(scanline.counts),
 8010fea:	6a02      	ldr	r2, [r0, #32]
            curStartIndex(scanline.startIndices)
 8010fec:	920e      	str	r2, [sp, #56]	; 0x38
 8010fee:	69c2      	ldr	r2, [r0, #28]
 8010ff0:	920f      	str	r2, [sp, #60]	; 0x3c
        return xAdjust;
 8010ff2:	791b      	ldrb	r3, [r3, #4]
 8010ff4:	9307      	str	r3, [sp, #28]
 8010ff6:	f8cd 9020 	str.w	r9, [sp, #32]
 8010ffa:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010ffe:	960a      	str	r6, [sp, #40]	; 0x28
 8011000:	950b      	str	r5, [sp, #44]	; 0x2c
 8011002:	46a3      	mov	fp, r4
 8011004:	4665      	mov	r5, ip
 8011006:	4689      	mov	r9, r1
 8011008:	4676      	mov	r6, lr
 801100a:	e00b      	b.n	8011024 <_ZN8touchgfx6Canvas6renderEv+0x1a4>
                if (numPix <= 0)
                {
                    continue;
                }
            }
            painter->render(row, x, xAdjust, y, numPix, covers);
 801100c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801100e:	6801      	ldr	r1, [r0, #0]
 8011010:	688c      	ldr	r4, [r1, #8]
 8011012:	f8cd c008 	str.w	ip, [sp, #8]
 8011016:	9301      	str	r3, [sp, #4]
 8011018:	9500      	str	r5, [sp, #0]
 801101a:	9b07      	ldr	r3, [sp, #28]
 801101c:	9904      	ldr	r1, [sp, #16]
 801101e:	47a0      	blx	r4
        }
        while (--numSpans);
 8011020:	3e01      	subs	r6, #1
 8011022:	d012      	beq.n	801104a <_ZN8touchgfx6Canvas6renderEv+0x1ca>
            ++curCount;
 8011024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011026:	1c9a      	adds	r2, r3, #2
 8011028:	920e      	str	r2, [sp, #56]	; 0x38
            ++curStartIndex;
 801102a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801102c:	1c91      	adds	r1, r2, #2
 801102e:	910f      	str	r1, [sp, #60]	; 0x3c
            return int(*curStartIndex);
 8011030:	8852      	ldrh	r2, [r2, #2]
            return covers + *curStartIndex;
 8011032:	eb09 0c02 	add.w	ip, r9, r2
            return int(*curCount);
 8011036:	885b      	ldrh	r3, [r3, #2]
            if (x + numPix >= int(renderingBuffer->getWidth()))
 8011038:	18d0      	adds	r0, r2, r3
 801103a:	9910      	ldr	r1, [sp, #64]	; 0x40
        return width;
 801103c:	6889      	ldr	r1, [r1, #8]
 801103e:	4288      	cmp	r0, r1
 8011040:	dbe4      	blt.n	801100c <_ZN8touchgfx6Canvas6renderEv+0x18c>
                numPix = renderingBuffer->getWidth() - x;
 8011042:	1a8b      	subs	r3, r1, r2
                if (numPix <= 0)
 8011044:	2b00      	cmp	r3, #0
 8011046:	dce1      	bgt.n	801100c <_ZN8touchgfx6Canvas6renderEv+0x18c>
 8011048:	e7ea      	b.n	8011020 <_ZN8touchgfx6Canvas6renderEv+0x1a0>
 801104a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801104e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011050:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011052:	465c      	mov	r4, fp
 8011054:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    lastX = 0x7FFF;
 8011058:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801105c:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
    lastY = 0x7FFF;
 8011060:	f8c9 3050 	str.w	r3, [r9, #80]	; 0x50
    curCount = counts;
 8011064:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 8011068:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
    curStartIndex = startIndices;
 801106c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8011070:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
    numSpans = 0;
 8011074:	2300      	movs	r3, #0
 8011076:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
 801107a:	e782      	b.n	8010f82 <_ZN8touchgfx6Canvas6renderEv+0x102>
    if (unsigned(x) >= CanvasWidgetRenderer::getScanlineWidth())
 801107c:	f00c fb0e 	bl	801d69c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8011080:	42b0      	cmp	r0, r6
 8011082:	d980      	bls.n	8010f86 <_ZN8touchgfx6Canvas6renderEv+0x106>
    covers[x] = (unsigned char)cover;
 8011084:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 8011088:	559c      	strb	r4, [r3, r6]
    if (x == lastX + 1)
 801108a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 801108e:	3301      	adds	r3, #1
 8011090:	429e      	cmp	r6, r3
 8011092:	d016      	beq.n	80110c2 <_ZN8touchgfx6Canvas6renderEv+0x242>
        *++curCount = 1;
 8011094:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8011098:	1c9a      	adds	r2, r3, #2
 801109a:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
 801109e:	2201      	movs	r2, #1
 80110a0:	805a      	strh	r2, [r3, #2]
        *++curStartIndex = x;
 80110a2:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 80110a6:	1c9a      	adds	r2, r3, #2
 80110a8:	f8c9 2058 	str.w	r2, [r9, #88]	; 0x58
 80110ac:	805e      	strh	r6, [r3, #2]
        numSpans++;
 80110ae:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80110b2:	3301      	adds	r3, #1
 80110b4:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
    lastX = x;
 80110b8:	f8c9 604c 	str.w	r6, [r9, #76]	; 0x4c
    lastY = y;
 80110bc:	f8c9 b050 	str.w	fp, [r9, #80]	; 0x50
 80110c0:	e761      	b.n	8010f86 <_ZN8touchgfx6Canvas6renderEv+0x106>
        (*curCount)++;
 80110c2:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
 80110c6:	8813      	ldrh	r3, [r2, #0]
 80110c8:	3301      	adds	r3, #1
 80110ca:	8013      	strh	r3, [r2, #0]
 80110cc:	e7f4      	b.n	80110b8 <_ZN8touchgfx6Canvas6renderEv+0x238>
            cover = -cover;
 80110ce:	4264      	negs	r4, r4
 80110d0:	e76a      	b.n	8010fa8 <_ZN8touchgfx6Canvas6renderEv+0x128>
            cover &= AA_2MASK;
 80110d2:	f3c4 0408 	ubfx	r4, r4, #0, #9
            if (cover > AA_NUM)
 80110d6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80110da:	f77f af6a 	ble.w	8010fb2 <_ZN8touchgfx6Canvas6renderEv+0x132>
                cover = AA_2NUM - cover;
 80110de:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
 80110e2:	e766      	b.n	8010fb2 <_ZN8touchgfx6Canvas6renderEv+0x132>
            cover = AA_MASK;
 80110e4:	24ff      	movs	r4, #255	; 0xff
    return numSpans && (y ^ lastY);
 80110e6:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80110ea:	b11b      	cbz	r3, 80110f4 <_ZN8touchgfx6Canvas6renderEv+0x274>
 80110ec:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 80110f0:	459b      	cmp	fp, r3
 80110f2:	d12e      	bne.n	8011152 <_ZN8touchgfx6Canvas6renderEv+0x2d2>
                    if (scanline.isReady(y))
                    {
                        r.render(scanline);
                        scanline.resetSpans();
                    }
                    scanline.addSpan(x, y, curCell->x - x, alpha);
 80110f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80110f8:	9400      	str	r4, [sp, #0]
 80110fa:	9904      	ldr	r1, [sp, #16]
 80110fc:	1a5b      	subs	r3, r3, r1
 80110fe:	465a      	mov	r2, fp
 8011100:	9805      	ldr	r0, [sp, #20]
 8011102:	f00c fb1f 	bl	801d744 <_ZN8touchgfx8Scanline7addSpanEiijj>
        cover = 0;
 8011106:	462b      	mov	r3, r5
     *
     * @return The packed coordinates with y in the high part and x in the low part.
     */
    int packedCoord() const
    {
        return (y << 16) + x;
 8011108:	f9b7 b002 	ldrsh.w	fp, [r7, #2]
 801110c:	f9b7 6000 	ldrsh.w	r6, [r7]
 8011110:	9604      	str	r6, [sp, #16]
 8011112:	eb06 400b 	add.w	r0, r6, fp, lsl #16
            area = startCell->area;
 8011116:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
            cover += startCell->cover;
 801111a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801111e:	4492      	add	sl, r2
            while (numCells-- > 0)
 8011120:	1e5d      	subs	r5, r3, #1
 8011122:	2b00      	cmp	r3, #0
 8011124:	f43f af0e 	beq.w	8010f44 <_ZN8touchgfx6Canvas6renderEv+0xc4>
                curCell = cells++;
 8011128:	f108 0108 	add.w	r1, r8, #8
 801112c:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8011130:	f9b8 3000 	ldrsh.w	r3, [r8]
 8011134:	eb03 4302 	add.w	r3, r3, r2, lsl #16
                if (curCell->packedCoord() != coord)
 8011138:	4298      	cmp	r0, r3
 801113a:	f47f af01 	bne.w	8010f40 <_ZN8touchgfx6Canvas6renderEv+0xc0>
                area += curCell->area;
 801113e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8011142:	441c      	add	r4, r3
                cover += curCell->cover;
 8011144:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8011148:	449a      	add	sl, r3
            while (numCells-- > 0)
 801114a:	462b      	mov	r3, r5
                curCell = cells++;
 801114c:	4647      	mov	r7, r8
 801114e:	4688      	mov	r8, r1
 8011150:	e7e6      	b.n	8011120 <_ZN8touchgfx6Canvas6renderEv+0x2a0>
        return lastY;
 8011152:	9e05      	ldr	r6, [sp, #20]
 8011154:	68b0      	ldr	r0, [r6, #8]
        if (scanline.getY() < 0 || scanline.getY() >= int(renderingBuffer->getHeight()))
 8011156:	2800      	cmp	r0, #0
 8011158:	db43      	blt.n	80111e2 <_ZN8touchgfx6Canvas6renderEv+0x362>
 801115a:	9b10      	ldr	r3, [sp, #64]	; 0x40
        return height;
 801115c:	68da      	ldr	r2, [r3, #12]
 801115e:	4290      	cmp	r0, r2
 8011160:	da3f      	bge.n	80111e2 <_ZN8touchgfx6Canvas6renderEv+0x362>
        return numSpans;
 8011162:	68f6      	ldr	r6, [r6, #12]
        return buf + stride * y;
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	9207      	str	r2, [sp, #28]
 8011168:	6919      	ldr	r1, [r3, #16]
 801116a:	9a07      	ldr	r2, [sp, #28]
 801116c:	fb01 2100 	mla	r1, r1, r0, r2
 8011170:	9107      	str	r1, [sp, #28]
            covers(scanline.covers),
 8011172:	9a05      	ldr	r2, [sp, #20]
 8011174:	6991      	ldr	r1, [r2, #24]
 8011176:	468c      	mov	ip, r1
            curCount(scanline.counts),
 8011178:	4611      	mov	r1, r2
 801117a:	6a12      	ldr	r2, [r2, #32]
            curStartIndex(scanline.startIndices)
 801117c:	920e      	str	r2, [sp, #56]	; 0x38
 801117e:	69ca      	ldr	r2, [r1, #28]
 8011180:	920f      	str	r2, [sp, #60]	; 0x3c
        return xAdjust;
 8011182:	791b      	ldrb	r3, [r3, #4]
 8011184:	9308      	str	r3, [sp, #32]
 8011186:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801118a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801118e:	950b      	str	r5, [sp, #44]	; 0x2c
 8011190:	46a3      	mov	fp, r4
 8011192:	4604      	mov	r4, r0
 8011194:	46e1      	mov	r9, ip
 8011196:	e00b      	b.n	80111b0 <_ZN8touchgfx6Canvas6renderEv+0x330>
            painter->render(row, x, xAdjust, y, numPix, covers);
 8011198:	9811      	ldr	r0, [sp, #68]	; 0x44
 801119a:	6801      	ldr	r1, [r0, #0]
 801119c:	688d      	ldr	r5, [r1, #8]
 801119e:	f8cd c008 	str.w	ip, [sp, #8]
 80111a2:	9301      	str	r3, [sp, #4]
 80111a4:	9400      	str	r4, [sp, #0]
 80111a6:	9b08      	ldr	r3, [sp, #32]
 80111a8:	9907      	ldr	r1, [sp, #28]
 80111aa:	47a8      	blx	r5
        while (--numSpans);
 80111ac:	3e01      	subs	r6, #1
 80111ae:	d012      	beq.n	80111d6 <_ZN8touchgfx6Canvas6renderEv+0x356>
            ++curCount;
 80111b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111b2:	1c9a      	adds	r2, r3, #2
 80111b4:	920e      	str	r2, [sp, #56]	; 0x38
            ++curStartIndex;
 80111b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80111b8:	1c91      	adds	r1, r2, #2
 80111ba:	910f      	str	r1, [sp, #60]	; 0x3c
            return int(*curStartIndex);
 80111bc:	8852      	ldrh	r2, [r2, #2]
            return covers + *curStartIndex;
 80111be:	eb09 0c02 	add.w	ip, r9, r2
            return int(*curCount);
 80111c2:	885b      	ldrh	r3, [r3, #2]
            if (x + numPix >= int(renderingBuffer->getWidth()))
 80111c4:	18d0      	adds	r0, r2, r3
 80111c6:	9910      	ldr	r1, [sp, #64]	; 0x40
        return width;
 80111c8:	6889      	ldr	r1, [r1, #8]
 80111ca:	4288      	cmp	r0, r1
 80111cc:	dbe4      	blt.n	8011198 <_ZN8touchgfx6Canvas6renderEv+0x318>
                numPix = renderingBuffer->getWidth() - x;
 80111ce:	1a8b      	subs	r3, r1, r2
                if (numPix <= 0)
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	dce1      	bgt.n	8011198 <_ZN8touchgfx6Canvas6renderEv+0x318>
 80111d4:	e7ea      	b.n	80111ac <_ZN8touchgfx6Canvas6renderEv+0x32c>
 80111d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80111da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80111dc:	465c      	mov	r4, fp
 80111de:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    lastX = 0x7FFF;
 80111e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80111e6:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
    lastY = 0x7FFF;
 80111ea:	f8c9 3050 	str.w	r3, [r9, #80]	; 0x50
    curCount = counts;
 80111ee:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 80111f2:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
    curStartIndex = startIndices;
 80111f6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80111fa:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
    numSpans = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
 8011204:	e776      	b.n	80110f4 <_ZN8touchgfx6Canvas6renderEv+0x274>
 8011206:	f8dd b018 	ldr.w	fp, [sp, #24]
        return numSpans;
 801120a:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
                }
            }
        }

        if (scanline.getNumSpans())
 801120e:	2b00      	cmp	r3, #0
 8011210:	f43f ae86 	beq.w	8010f20 <_ZN8touchgfx6Canvas6renderEv+0xa0>
        return lastY;
 8011214:	9905      	ldr	r1, [sp, #20]
 8011216:	688d      	ldr	r5, [r1, #8]
        if (scanline.getY() < 0 || scanline.getY() >= int(renderingBuffer->getHeight()))
 8011218:	2d00      	cmp	r5, #0
 801121a:	f6ff ae81 	blt.w	8010f20 <_ZN8touchgfx6Canvas6renderEv+0xa0>
 801121e:	9b10      	ldr	r3, [sp, #64]	; 0x40
        return height;
 8011220:	68da      	ldr	r2, [r3, #12]
 8011222:	4295      	cmp	r5, r2
 8011224:	f6bf ae7c 	bge.w	8010f20 <_ZN8touchgfx6Canvas6renderEv+0xa0>
        return numSpans;
 8011228:	68cc      	ldr	r4, [r1, #12]
        return buf + stride * y;
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	691f      	ldr	r7, [r3, #16]
 801122e:	fb07 2705 	mla	r7, r7, r5, r2
            covers(scanline.covers),
 8011232:	f8d1 8018 	ldr.w	r8, [r1, #24]
            curCount(scanline.counts),
 8011236:	6a0a      	ldr	r2, [r1, #32]
            curStartIndex(scanline.startIndices)
 8011238:	920e      	str	r2, [sp, #56]	; 0x38
 801123a:	69ca      	ldr	r2, [r1, #28]
 801123c:	920f      	str	r2, [sp, #60]	; 0x3c
        return xAdjust;
 801123e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8011242:	e00c      	b.n	801125e <_ZN8touchgfx6Canvas6renderEv+0x3de>
            painter->render(row, x, xAdjust, y, numPix, covers);
 8011244:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011246:	6801      	ldr	r1, [r0, #0]
 8011248:	688e      	ldr	r6, [r1, #8]
 801124a:	f8cd c008 	str.w	ip, [sp, #8]
 801124e:	9301      	str	r3, [sp, #4]
 8011250:	9500      	str	r5, [sp, #0]
 8011252:	464b      	mov	r3, r9
 8011254:	4639      	mov	r1, r7
 8011256:	47b0      	blx	r6
        while (--numSpans);
 8011258:	3c01      	subs	r4, #1
 801125a:	f43f ae61 	beq.w	8010f20 <_ZN8touchgfx6Canvas6renderEv+0xa0>
            ++curCount;
 801125e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011260:	1c9a      	adds	r2, r3, #2
 8011262:	920e      	str	r2, [sp, #56]	; 0x38
            ++curStartIndex;
 8011264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011266:	1c91      	adds	r1, r2, #2
 8011268:	910f      	str	r1, [sp, #60]	; 0x3c
            return int(*curStartIndex);
 801126a:	8852      	ldrh	r2, [r2, #2]
            return covers + *curStartIndex;
 801126c:	eb08 0c02 	add.w	ip, r8, r2
            return int(*curCount);
 8011270:	885b      	ldrh	r3, [r3, #2]
            if (x + numPix >= int(renderingBuffer->getWidth()))
 8011272:	18d0      	adds	r0, r2, r3
 8011274:	9910      	ldr	r1, [sp, #64]	; 0x40
        return width;
 8011276:	6889      	ldr	r1, [r1, #8]
 8011278:	4288      	cmp	r0, r1
 801127a:	dbe3      	blt.n	8011244 <_ZN8touchgfx6Canvas6renderEv+0x3c4>
                numPix = renderingBuffer->getWidth() - x;
 801127c:	1a8b      	subs	r3, r1, r2
                if (numPix <= 0)
 801127e:	2b00      	cmp	r3, #0
 8011280:	dce0      	bgt.n	8011244 <_ZN8touchgfx6Canvas6renderEv+0x3c4>
 8011282:	e7e9      	b.n	8011258 <_ZN8touchgfx6Canvas6renderEv+0x3d8>
        return true; // Redrawing a rect with fewer scanlines will not help, fake "ok" to move on
 8011284:	2301      	movs	r3, #1
}
 8011286:	4618      	mov	r0, r3
 8011288:	4770      	bx	lr
        return false; // Try again with fewer scanlines
 801128a:	2300      	movs	r3, #0
}
 801128c:	4618      	mov	r0, r3
 801128e:	b013      	add	sp, #76	; 0x4c
 8011290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011294 <_ZN8touchgfx6CanvasD1Ev>:
Canvas::~Canvas()
 8011294:	b538      	push	{r3, r4, r5, lr}
 8011296:	4604      	mov	r4, r0
 8011298:	4605      	mov	r5, r0
 801129a:	4b08      	ldr	r3, [pc, #32]	; (80112bc <_ZN8touchgfx6CanvasD1Ev+0x28>)
 801129c:	f845 3b2c 	str.w	r3, [r5], #44
        return instance;
 80112a0:	4b07      	ldr	r3, [pc, #28]	; (80112c0 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80112a2:	6818      	ldr	r0, [r3, #0]
    HAL::getInstance()->unlockFrameBuffer(); //lint !e1551
 80112a4:	6803      	ldr	r3, [r0, #0]
 80112a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a8:	4798      	blx	r3
class Rasterizer
 80112aa:	4628      	mov	r0, r5
 80112ac:	f00b f958 	bl	801c560 <_ZN8touchgfx7OutlineD1Ev>
Canvas::~Canvas()
 80112b0:	f104 0018 	add.w	r0, r4, #24
 80112b4:	f00c fa85 	bl	801d7c2 <_ZN8touchgfx15RenderingBufferD1Ev>
}
 80112b8:	4620      	mov	r0, r4
 80112ba:	bd38      	pop	{r3, r4, r5, pc}
 80112bc:	08024c7c 	.word	0x08024c7c
 80112c0:	2000ba4c 	.word	0x2000ba4c

080112c4 <_ZN8touchgfx6CanvasD0Ev>:
Canvas::~Canvas()
 80112c4:	b510      	push	{r4, lr}
 80112c6:	4604      	mov	r4, r0
}
 80112c8:	f7ff ffe4 	bl	8011294 <_ZN8touchgfx6CanvasD1Ev>
 80112cc:	21b8      	movs	r1, #184	; 0xb8
 80112ce:	4620      	mov	r0, r4
 80112d0:	f011 fc16 	bl	8022b00 <_ZdlPvj>
 80112d4:	4620      	mov	r0, r4
 80112d6:	bd10      	pop	{r4, pc}

080112d8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
{
}

void CanvasWidget::setPainter(AbstractPainter& painter)
{
    canvasPainter = &painter;
 80112d8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80112da:	4770      	bx	lr

080112dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
    assert(canvasPainter != 0 && "No painter set");
    return *canvasPainter; //lint !e613
} //lint !e1763

void CanvasWidget::draw(const Rect& invalidatedArea) const
{
 80112dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112e0:	b089      	sub	sp, #36	; 0x24
 80112e2:	4604      	mov	r4, r0
    Rect area = invalidatedArea;
 80112e4:	ab06      	add	r3, sp, #24
 80112e6:	6808      	ldr	r0, [r1, #0]
 80112e8:	6849      	ldr	r1, [r1, #4]
 80112ea:	c303      	stmia	r3!, {r0, r1}
    int16_t* width;
    int16_t* height;

    int16_t wantedRenderLines;

    switch (HAL::DISPLAY_ROTATION)
 80112ec:	4b48      	ldr	r3, [pc, #288]	; (8011410 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x134>)
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d00d      	beq.n	8011310 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x34>
    default:
    case rotate0:
        offset = &area.y;
        lines = &area.height;
        width = &area.width;
        height = &wantedRenderLines;
 80112f4:	f10d 0616 	add.w	r6, sp, #22
        width = &area.width;
 80112f8:	ad07      	add	r5, sp, #28
        lines = &area.height;
 80112fa:	f10d 081e 	add.w	r8, sp, #30
        offset = &area.y;
 80112fe:	f10d 091a 	add.w	r9, sp, #26
        width = &wantedRenderLines;
        height = &area.height;
        break;
    }

    Rect minimalRect = getMinimalRect();
 8011302:	6823      	ldr	r3, [r4, #0]
 8011304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011306:	4621      	mov	r1, r4
 8011308:	a803      	add	r0, sp, #12
 801130a:	4798      	blx	r3

    bool failedAtLeastOnce = false;
 801130c:	2700      	movs	r7, #0
 801130e:	e01d      	b.n	801134c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x70>
        height = &area.height;
 8011310:	f10d 061e 	add.w	r6, sp, #30
        width = &wantedRenderLines;
 8011314:	f10d 0516 	add.w	r5, sp, #22
        lines = &area.width;
 8011318:	f10d 081c 	add.w	r8, sp, #28
        offset = &area.x;
 801131c:	f10d 0918 	add.w	r9, sp, #24
 8011320:	e7ef      	b.n	8011302 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x26>
            }
#endif
            wantedRenderLines >>= 1;
            failedAtLeastOnce = true;
        }
        if (wantedRenderLines == 0)
 8011322:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d15c      	bne.n	80113e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x108>
        {
            // We did not manage to draw anything. Set wantedHeight to
            // one to skip a single raster line and try to render the
            // rest of the CanvasWidget.
            wantedRenderLines = 1;
 801132a:	2301      	movs	r3, #1
 801132c:	f8ad 3016 	strh.w	r3, [sp, #22]
            {
                // Only adjust maxRenderLines if it is the first draw for the CanvasWidget
                maxRenderLines = wantedRenderLines;
            }
        }
        *offset += wantedRenderLines;
 8011330:	f8b9 3000 	ldrh.w	r3, [r9]
 8011334:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011338:	4413      	add	r3, r2
 801133a:	f8a9 3000 	strh.w	r3, [r9]
        *lines -= wantedRenderLines;
 801133e:	f8b8 3000 	ldrh.w	r3, [r8]
 8011342:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011346:	1a9b      	subs	r3, r3, r2
 8011348:	f8a8 3000 	strh.w	r3, [r8]
    while (*lines)
 801134c:	f9b8 3000 	ldrsh.w	r3, [r8]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d051      	beq.n	80113f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x11c>
        wantedRenderLines = MIN(maxRenderLines, *lines);
 8011354:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8011358:	4293      	cmp	r3, r2
 801135a:	dd00      	ble.n	801135e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x82>
 801135c:	4613      	mov	r3, r2
 801135e:	f8ad 3016 	strh.w	r3, [sp, #22]
        while (wantedRenderLines > 0)
 8011362:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011366:	2b00      	cmp	r3, #0
 8011368:	dddb      	ble.n	8011322 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
            Rect smallArea(area.x, area.y, *width, *height);
 801136a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801136e:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8011372:	f9b5 e000 	ldrsh.w	lr, [r5]
 8011376:	f9b6 0000 	ldrsh.w	r0, [r6]
        this->x = x;
 801137a:	f8ad 3004 	strh.w	r3, [sp, #4]
        this->y = y;
 801137e:	f8ad 2006 	strh.w	r2, [sp, #6]
        this->width = width;
 8011382:	f8ad e008 	strh.w	lr, [sp, #8]
        this->height = height;
 8011386:	f8ad 000a 	strh.w	r0, [sp, #10]
        return x + width;
 801138a:	f9bd c00c 	ldrsh.w	ip, [sp, #12]
 801138e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011392:	fa11 f18c 	uxtah	r1, r1, ip
 8011396:	b209      	sxth	r1, r1
        return !(x >= other.right() || right() <= other.x ||
 8011398:	428b      	cmp	r3, r1
 801139a:	dac2      	bge.n	8011322 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
        return x + width;
 801139c:	fa1f fe8e 	uxth.w	lr, lr
 80113a0:	fa1e f383 	uxtah	r3, lr, r3
 80113a4:	b21b      	sxth	r3, r3
        return !(x >= other.right() || right() <= other.x ||
 80113a6:	459c      	cmp	ip, r3
 80113a8:	dabb      	bge.n	8011322 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
        return y + height;
 80113aa:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80113ae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80113b2:	fa13 f381 	uxtah	r3, r3, r1
 80113b6:	b21b      	sxth	r3, r3
        return !(x >= other.right() || right() <= other.x ||
 80113b8:	429a      	cmp	r2, r3
 80113ba:	dab2      	bge.n	8011322 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
        return y + height;
 80113bc:	b280      	uxth	r0, r0
 80113be:	fa10 f282 	uxtah	r2, r0, r2
 80113c2:	b212      	sxth	r2, r2
        return !(x >= other.right() || right() <= other.x ||
 80113c4:	4291      	cmp	r1, r2
 80113c6:	daac      	bge.n	8011322 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
            if (drawCanvasWidget(smallArea))
 80113c8:	6823      	ldr	r3, [r4, #0]
 80113ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113cc:	a901      	add	r1, sp, #4
 80113ce:	4620      	mov	r0, r4
 80113d0:	4798      	blx	r3
 80113d2:	2800      	cmp	r0, #0
 80113d4:	d1a5      	bne.n	8011322 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
            wantedRenderLines >>= 1;
 80113d6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80113da:	105b      	asrs	r3, r3, #1
 80113dc:	f8ad 3016 	strh.w	r3, [sp, #22]
            failedAtLeastOnce = true;
 80113e0:	2701      	movs	r7, #1
        while (wantedRenderLines > 0)
 80113e2:	e7be      	b.n	8011362 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x86>
            if (failedAtLeastOnce && maxRenderLines == 0x7FFF)
 80113e4:	2f00      	cmp	r7, #0
 80113e6:	d0a3      	beq.n	8011330 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 80113e8:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
 80113ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80113f0:	4291      	cmp	r1, r2
 80113f2:	d19d      	bne.n	8011330 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
                maxRenderLines = wantedRenderLines;
 80113f4:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80113f6:	e79b      	b.n	8011330 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
    }
    if (maxRenderLines == 0x7FFF)
 80113f8:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80113fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011400:	4293      	cmp	r3, r2
 8011402:	d002      	beq.n	801140a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x12e>
    {
        maxRenderLines--;    // 0x7FFF means first draw
    }
}
 8011404:	b009      	add	sp, #36	; 0x24
 8011406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxRenderLines--;    // 0x7FFF means first draw
 801140a:	3b01      	subs	r3, #1
 801140c:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
 801140e:	e7f9      	b.n	8011404 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x128>
 8011410:	2000ba44 	.word	0x2000ba44

08011414 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
    minimalRect.intersect(CanvasWidget::getMinimalRect());
    invalidateRect(minimalRect);
}

Rect CanvasWidget::getMinimalRect() const
{
 8011414:	b410      	push	{r4}
 8011416:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 801141a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
        this->x = x;
 801141e:	2200      	movs	r2, #0
 8011420:	8002      	strh	r2, [r0, #0]
        this->y = y;
 8011422:	8042      	strh	r2, [r0, #2]
        this->width = width;
 8011424:	8084      	strh	r4, [r0, #4]
        this->height = height;
 8011426:	80c1      	strh	r1, [r0, #6]
    return Rect(0, 0, getWidth(), getHeight());
}
 8011428:	f85d 4b04 	ldr.w	r4, [sp], #4
 801142c:	4770      	bx	lr

0801142e <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
{
 801142e:	b510      	push	{r4, lr}
 8011430:	b084      	sub	sp, #16
 8011432:	4604      	mov	r4, r0
    Rect minimalRect = getMinimalRect();
 8011434:	6803      	ldr	r3, [r0, #0]
 8011436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011438:	4601      	mov	r1, r0
 801143a:	4668      	mov	r0, sp
 801143c:	4798      	blx	r3
    minimalRect.intersect(CanvasWidget::getMinimalRect());
 801143e:	4621      	mov	r1, r4
 8011440:	a802      	add	r0, sp, #8
 8011442:	f7ff ffe7 	bl	8011414 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>
    invalidateRect(minimalRect);
 8011446:	6823      	ldr	r3, [r4, #0]
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	4669      	mov	r1, sp
 801144c:	4620      	mov	r0, r4
 801144e:	4798      	blx	r3
}
 8011450:	b004      	add	sp, #16
 8011452:	bd10      	pop	{r4, pc}

08011454 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        this->x = x;
 8011454:	2200      	movs	r2, #0
 8011456:	8002      	strh	r2, [r0, #0]
        this->y = y;
 8011458:	8042      	strh	r2, [r0, #2]
        this->width = width;
 801145a:	8082      	strh	r2, [r0, #4]
        this->height = height;
 801145c:	80c2      	strh	r2, [r0, #6]

Rect CanvasWidget::getSolidRect() const
{
    return Rect(0, 0, 0, 0);
}
 801145e:	4770      	bx	lr

08011460 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
    assert(canvasPainter != 0 && "No painter set");
 8011460:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011462:	b100      	cbz	r0, 8011466 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x6>
} //lint !e1763
 8011464:	4770      	bx	lr
{
 8011466:	b508      	push	{r3, lr}
    assert(canvasPainter != 0 && "No painter set");
 8011468:	4b02      	ldr	r3, [pc, #8]	; (8011474 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801146a:	4a03      	ldr	r2, [pc, #12]	; (8011478 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801146c:	2128      	movs	r1, #40	; 0x28
 801146e:	4803      	ldr	r0, [pc, #12]	; (801147c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8011470:	f011 fb62 	bl	8022b38 <__assert_func>
 8011474:	08024cd4 	.word	0x08024cd4
 8011478:	08024de0 	.word	0x08024de0
 801147c:	08024cfc 	.word	0x08024cfc

08011480 <_ZN8touchgfx12CanvasWidgetC1Ev>:
        this->x = x;
 8011480:	2200      	movs	r2, #0
 8011482:	8082      	strh	r2, [r0, #4]
        this->y = y;
 8011484:	80c2      	strh	r2, [r0, #6]
        this->width = width;
 8011486:	8102      	strh	r2, [r0, #8]
        this->height = height;
 8011488:	8142      	strh	r2, [r0, #10]
        this->x = 0;
 801148a:	8182      	strh	r2, [r0, #12]
        this->y = 0;
 801148c:	81c2      	strh	r2, [r0, #14]
        this->width = 0;
 801148e:	8202      	strh	r2, [r0, #16]
        this->height = 0;
 8011490:	8242      	strh	r2, [r0, #18]
        visible(true)
 8011492:	6142      	str	r2, [r0, #20]
 8011494:	6182      	str	r2, [r0, #24]
 8011496:	61c2      	str	r2, [r0, #28]
 8011498:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801149c:	2101      	movs	r1, #1
 801149e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    alpha(255)
 80114a2:	4905      	ldr	r1, [pc, #20]	; (80114b8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 80114a4:	6001      	str	r1, [r0, #0]
 80114a6:	6282      	str	r2, [r0, #40]	; 0x28
 80114a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80114ac:	8582      	strh	r2, [r0, #44]	; 0x2c
 80114ae:	22ff      	movs	r2, #255	; 0xff
 80114b0:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
}
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop
 80114b8:	08024d64 	.word	0x08024d64

080114bc <_ZN8touchgfx12CanvasWidgetD1Ev>:
}
 80114bc:	4770      	bx	lr
	...

080114c0 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 80114c0:	b510      	push	{r4, lr}
 80114c2:	4604      	mov	r4, r0
 80114c4:	4b02      	ldr	r3, [pc, #8]	; (80114d0 <_ZN8touchgfx6CircleD1Ev+0x10>)
 80114c6:	6003      	str	r3, [r0, #0]
 80114c8:	f7ff fff8 	bl	80114bc <_ZN8touchgfx12CanvasWidgetD1Ev>
 80114cc:	4620      	mov	r0, r4
 80114ce:	bd10      	pop	{r4, pc}
 80114d0:	08024e38 	.word	0x08024e38

080114d4 <_ZN8touchgfx6CircleD0Ev>:
 80114d4:	b510      	push	{r4, lr}
 80114d6:	4604      	mov	r4, r0
 80114d8:	4b04      	ldr	r3, [pc, #16]	; (80114ec <_ZN8touchgfx6CircleD0Ev+0x18>)
 80114da:	6003      	str	r3, [r0, #0]
 80114dc:	f7ff ffee 	bl	80114bc <_ZN8touchgfx12CanvasWidgetD1Ev>
 80114e0:	214c      	movs	r1, #76	; 0x4c
 80114e2:	4620      	mov	r0, r4
 80114e4:	f011 fb0c 	bl	8022b00 <_ZdlPvj>
 80114e8:	4620      	mov	r0, r4
 80114ea:	bd10      	pop	{r4, pc}
 80114ec:	08024e38 	.word	0x08024e38

080114f0 <_ZN8touchgfx6CircleC1Ev>:

#include <touchgfx/widgets/canvas/Circle.hpp>

namespace touchgfx
{
Circle::Circle() : CanvasWidget(),
 80114f0:	b510      	push	{r4, lr}
 80114f2:	4604      	mov	r4, r0
    circleCenterX(0), circleCenterY(0), circleRadius(0),
    circleArcAngleStart(CWRUtil::toQ5<int>(0)), circleArcAngleEnd(CWRUtil::toQ5<int>(360)),
    circleLineWidth(0), circleArcIncrement(5),
    circleCapArcIncrement(180)
 80114f4:	f7ff ffc4 	bl	8011480 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80114f8:	4b0a      	ldr	r3, [pc, #40]	; (8011524 <_ZN8touchgfx6CircleC1Ev+0x34>)
 80114fa:	6023      	str	r3, [r4, #0]
        explicit Q5(int i) : v(i) { }
 80114fc:	2300      	movs	r3, #0
 80114fe:	6323      	str	r3, [r4, #48]	; 0x30
 8011500:	6363      	str	r3, [r4, #52]	; 0x34
 8011502:	63a3      	str	r3, [r4, #56]	; 0x38
 8011504:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011506:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801150a:	6422      	str	r2, [r4, #64]	; 0x40
 801150c:	6463      	str	r3, [r4, #68]	; 0x44
 801150e:	2205      	movs	r2, #5
 8011510:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8011514:	22b4      	movs	r2, #180	; 0xb4
 8011516:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
        rect.width = width;
 801151a:	8123      	strh	r3, [r4, #8]
        rect.height = height;
 801151c:	8163      	strh	r3, [r4, #10]
{
    Drawable::setWidth(0);
    Drawable::setHeight(0);
}
 801151e:	4620      	mov	r0, r4
 8011520:	bd10      	pop	{r4, pc}
 8011522:	bf00      	nop
 8011524:	08024e38 	.word	0x08024e38

08011528 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
    return circleArcIncrement;
}

void Circle::setCapPrecision(int precision)
{
    if (precision < 1)
 8011528:	2900      	cmp	r1, #0
 801152a:	dd05      	ble.n	8011538 <_ZN8touchgfx6Circle15setCapPrecisionEi+0x10>
    {
        precision = 1;
    }
    if (precision > 180)
 801152c:	29b4      	cmp	r1, #180	; 0xb4
 801152e:	dd00      	ble.n	8011532 <_ZN8touchgfx6Circle15setCapPrecisionEi+0xa>
    {
        precision = 180;
 8011530:	21b4      	movs	r1, #180	; 0xb4
    }
    circleCapArcIncrement = precision;
 8011532:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
}
 8011536:	4770      	bx	lr
        precision = 1;
 8011538:	2101      	movs	r1, #1
 801153a:	e7fa      	b.n	8011532 <_ZN8touchgfx6Circle15setCapPrecisionEi+0xa>

0801153c <_ZNK8touchgfx6Circle15getCapPrecisionEv>:

int Circle::getCapPrecision() const
{
    return circleCapArcIncrement;
}
 801153c:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8011540:	4770      	bx	lr
	...

08011544 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
    return Rect(xMin.to<int>() - 1, yMin.to<int>() - 1,
                xMax.to<int>() - xMin.to<int>() + 2, yMax.to<int>() - yMin.to<int>() + 2);
}

void Circle::moveToAR2(Canvas& canvas, const CWRUtil::Q5& angle, const CWRUtil::Q5& r2) const
{
 8011544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011548:	b083      	sub	sp, #12
 801154a:	4604      	mov	r4, r0
 801154c:	460e      	mov	r6, r1
 801154e:	4690      	mov	r8, r2
 8011550:	461d      	mov	r5, r3
 8011552:	6812      	ldr	r2, [r2, #0]
     * @return the value of sin(i) with 15 bits precision on the fractional part.
     */
    static Q15 sine(Q5 i)
    {
        Q5 _360 = toQ5<int>(360);
        i = Q5(((i % _360) + _360) % _360);
 8011554:	48a7      	ldr	r0, [pc, #668]	; (80117f4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 8011556:	fb80 1302 	smull	r1, r3, r0, r2
 801155a:	1899      	adds	r1, r3, r2
 801155c:	17d3      	asrs	r3, r2, #31
 801155e:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8011562:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8011566:	fb01 2313 	mls	r3, r1, r3, r2
 801156a:	440b      	add	r3, r1
 801156c:	fb80 2003 	smull	r2, r0, r0, r3
 8011570:	18c2      	adds	r2, r0, r3
 8011572:	17d8      	asrs	r0, r3, #31
 8011574:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8011578:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 801157c:	4243      	negs	r3, r0
 801157e:	f000 011f 	and.w	r1, r0, #31
 8011582:	f003 031f 	and.w	r3, r3, #31
 8011586:	bf58      	it	pl
 8011588:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801158a:	4602      	mov	r2, r0
 801158c:	2800      	cmp	r0, #0
 801158e:	db23      	blt.n	80115d8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x94>
 8011590:	1157      	asrs	r7, r2, #5
        i = ((i % 360) + 360) % 360;
 8011592:	4898      	ldr	r0, [pc, #608]	; (80117f4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 8011594:	fb80 c307 	smull	ip, r3, r0, r7
 8011598:	eb03 0c07 	add.w	ip, r3, r7
 801159c:	17d3      	asrs	r3, r2, #31
 801159e:	ebc3 232c 	rsb	r3, r3, ip, asr #8
 80115a2:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 80115a6:	fb0c 7313 	mls	r3, ip, r3, r7
 80115aa:	4463      	add	r3, ip
 80115ac:	fb80 2003 	smull	r2, r0, r0, r3
 80115b0:	4418      	add	r0, r3
 80115b2:	17da      	asrs	r2, r3, #31
 80115b4:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80115b8:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 80115bc:	2a5a      	cmp	r2, #90	; 0x5a
 80115be:	dd0e      	ble.n	80115de <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x9a>
        if (i <= 180)
 80115c0:	2ab4      	cmp	r2, #180	; 0xb4
 80115c2:	dd66      	ble.n	8011692 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x14e>
        if (i <= 270)
 80115c4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80115c8:	dd69      	ble.n	801169e <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x15a>
        return Q15(-int32_t(sineTable[360 - i]));
 80115ca:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80115ce:	4b8a      	ldr	r3, [pc, #552]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80115d0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80115d4:	4240      	negs	r0, r0
 80115d6:	e005      	b.n	80115e4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xa0>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80115d8:	f100 021f 	add.w	r2, r0, #31
 80115dc:	e7d8      	b.n	8011590 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x4c>
            return Q15(sineTable[i]);
 80115de:	4b86      	ldr	r3, [pc, #536]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80115e0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80115e4:	4681      	mov	r9, r0
        Q15 sineLow = sine(i.to<int>());
        if (fraction == 0)
 80115e6:	2900      	cmp	r1, #0
 80115e8:	d15f      	bne.n	80116aa <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x166>
        {
            return sineLow;
 80115ea:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80115ec:	ab01      	add	r3, sp, #4
 80115ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80115f2:	6828      	ldr	r0, [r5, #0]
 80115f4:	f00d fe8d 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 80115f8:	2800      	cmp	r0, #0
 80115fa:	f2c0 8091 	blt.w	8011720 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1dc>
            return Q5(v + q5.v);
 80115fe:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8011600:	eb07 0760 	add.w	r7, r7, r0, asr #1
 8011604:	f8d8 2000 	ldr.w	r2, [r8]
            return Q5(v - q5.v);
 8011608:	f5c2 6234 	rsb	r2, r2, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 801160c:	4879      	ldr	r0, [pc, #484]	; (80117f4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 801160e:	fb80 1302 	smull	r1, r3, r0, r2
 8011612:	1899      	adds	r1, r3, r2
 8011614:	17d3      	asrs	r3, r2, #31
 8011616:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 801161a:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 801161e:	fb01 2313 	mls	r3, r1, r3, r2
 8011622:	440b      	add	r3, r1
 8011624:	fb80 2003 	smull	r2, r0, r0, r3
 8011628:	18c2      	adds	r2, r0, r3
 801162a:	17d8      	asrs	r0, r3, #31
 801162c:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8011630:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8011634:	4243      	negs	r3, r0
 8011636:	f000 011f 	and.w	r1, r0, #31
 801163a:	f003 031f 	and.w	r3, r3, #31
 801163e:	bf58      	it	pl
 8011640:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011642:	4602      	mov	r2, r0
 8011644:	2800      	cmp	r0, #0
 8011646:	db6d      	blt.n	8011724 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1e0>
 8011648:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 801164c:	4869      	ldr	r0, [pc, #420]	; (80117f4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 801164e:	fb80 e30c 	smull	lr, r3, r0, ip
 8011652:	eb03 0e0c 	add.w	lr, r3, ip
 8011656:	17d3      	asrs	r3, r2, #31
 8011658:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 801165c:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8011660:	fb0e c313 	mls	r3, lr, r3, ip
 8011664:	4473      	add	r3, lr
 8011666:	fb80 2003 	smull	r2, r0, r0, r3
 801166a:	4418      	add	r0, r3
 801166c:	17da      	asrs	r2, r3, #31
 801166e:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011672:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8011676:	2a5a      	cmp	r2, #90	; 0x5a
 8011678:	dd57      	ble.n	801172a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1e6>
        if (i <= 180)
 801167a:	2ab4      	cmp	r2, #180	; 0xb4
 801167c:	dd6d      	ble.n	801175a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x216>
        if (i <= 270)
 801167e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011682:	dd70      	ble.n	8011766 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x222>
        return Q15(-int32_t(sineTable[360 - i]));
 8011684:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8011688:	4b5b      	ldr	r3, [pc, #364]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 801168a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801168e:	4240      	negs	r0, r0
 8011690:	e04e      	b.n	8011730 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1ec>
            return Q15(sineTable[180 - i]);
 8011692:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8011696:	4b58      	ldr	r3, [pc, #352]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8011698:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801169c:	e7a2      	b.n	80115e4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xa0>
            return Q15(-int32_t(sineTable[i - 180]));
 801169e:	3ab4      	subs	r2, #180	; 0xb4
 80116a0:	4b55      	ldr	r3, [pc, #340]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80116a2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80116a6:	4240      	negs	r0, r0
 80116a8:	e79c      	b.n	80115e4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xa0>
        }
        Q15 sineHigh = sine(i.to<int>() + 1);
 80116aa:	3701      	adds	r7, #1
        i = ((i % 360) + 360) % 360;
 80116ac:	4a51      	ldr	r2, [pc, #324]	; (80117f4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 80116ae:	fb82 0307 	smull	r0, r3, r2, r7
 80116b2:	19d8      	adds	r0, r3, r7
 80116b4:	17fb      	asrs	r3, r7, #31
 80116b6:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80116ba:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 80116be:	fb0c 7313 	mls	r3, ip, r3, r7
 80116c2:	4463      	add	r3, ip
 80116c4:	fb82 0203 	smull	r0, r2, r2, r3
 80116c8:	18d0      	adds	r0, r2, r3
 80116ca:	17da      	asrs	r2, r3, #31
 80116cc:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80116d0:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 80116d4:	2a5a      	cmp	r2, #90	; 0x5a
 80116d6:	dd0b      	ble.n	80116f0 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1ac>
        if (i <= 180)
 80116d8:	2ab4      	cmp	r2, #180	; 0xb4
 80116da:	dd15      	ble.n	8011708 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1c4>
        if (i <= 270)
 80116dc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80116e0:	dd18      	ble.n	8011714 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1d0>
        return Q15(-int32_t(sineTable[360 - i]));
 80116e2:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80116e6:	4b44      	ldr	r3, [pc, #272]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80116e8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80116ec:	4240      	negs	r0, r0
 80116ee:	e002      	b.n	80116f6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1b2>
            return Q15(sineTable[i]);
 80116f0:	4b41      	ldr	r3, [pc, #260]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80116f2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        int32_t remainder;
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80116f6:	ab01      	add	r3, sp, #4
 80116f8:	2220      	movs	r2, #32
 80116fa:	eba0 0009 	sub.w	r0, r0, r9
 80116fe:	f00d fe08 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8011702:	eb09 0100 	add.w	r1, r9, r0
 8011706:	e771      	b.n	80115ec <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xa8>
            return Q15(sineTable[180 - i]);
 8011708:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801170c:	4b3a      	ldr	r3, [pc, #232]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 801170e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011712:	e7f0      	b.n	80116f6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1b2>
            return Q15(-int32_t(sineTable[i - 180]));
 8011714:	3ab4      	subs	r2, #180	; 0xb4
 8011716:	4b38      	ldr	r3, [pc, #224]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8011718:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801171c:	4240      	negs	r0, r0
 801171e:	e7ea      	b.n	80116f6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1b2>
            return Q5(v / i);
 8011720:	3001      	adds	r0, #1
 8011722:	e76c      	b.n	80115fe <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xba>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011724:	f100 021f 	add.w	r2, r0, #31
 8011728:	e78e      	b.n	8011648 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x104>
            return Q15(sineTable[i]);
 801172a:	4b33      	ldr	r3, [pc, #204]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 801172c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011730:	4680      	mov	r8, r0
        if (fraction == 0)
 8011732:	b9f1      	cbnz	r1, 8011772 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x22e>
            return sineLow;
 8011734:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8011736:	ab01      	add	r3, sp, #4
 8011738:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801173c:	6828      	ldr	r0, [r5, #0]
 801173e:	f00d fde8 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 8011742:	2800      	cmp	r0, #0
 8011744:	db53      	blt.n	80117ee <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2aa>
            return Q5(v - q5.v);
 8011746:	6b62      	ldr	r2, [r4, #52]	; 0x34
    canvas.moveTo(circleCenterX + ((r2 * CWRUtil::sine(angle)) / 2), circleCenterY - ((r2 * CWRUtil::cosine(angle)) / 2));
 8011748:	eba2 0260 	sub.w	r2, r2, r0, asr #1
 801174c:	4639      	mov	r1, r7
 801174e:	4630      	mov	r0, r6
 8011750:	f7ff fb4b 	bl	8010dea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
}
 8011754:	b003      	add	sp, #12
 8011756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return Q15(sineTable[180 - i]);
 801175a:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801175e:	4b26      	ldr	r3, [pc, #152]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8011760:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011764:	e7e4      	b.n	8011730 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1ec>
            return Q15(-int32_t(sineTable[i - 180]));
 8011766:	3ab4      	subs	r2, #180	; 0xb4
 8011768:	4b23      	ldr	r3, [pc, #140]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 801176a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801176e:	4240      	negs	r0, r0
 8011770:	e7de      	b.n	8011730 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1ec>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8011772:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8011776:	4a1f      	ldr	r2, [pc, #124]	; (80117f4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 8011778:	fb82 030c 	smull	r0, r3, r2, ip
 801177c:	eb03 000c 	add.w	r0, r3, ip
 8011780:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8011784:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8011788:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 801178c:	fb0e c313 	mls	r3, lr, r3, ip
 8011790:	4473      	add	r3, lr
 8011792:	fb82 0203 	smull	r0, r2, r2, r3
 8011796:	18d0      	adds	r0, r2, r3
 8011798:	17da      	asrs	r2, r3, #31
 801179a:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 801179e:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 80117a2:	2a5a      	cmp	r2, #90	; 0x5a
 80117a4:	dd0b      	ble.n	80117be <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x27a>
        if (i <= 180)
 80117a6:	2ab4      	cmp	r2, #180	; 0xb4
 80117a8:	dd15      	ble.n	80117d6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x292>
        if (i <= 270)
 80117aa:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80117ae:	dd18      	ble.n	80117e2 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x29e>
        return Q15(-int32_t(sineTable[360 - i]));
 80117b0:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80117b4:	4b10      	ldr	r3, [pc, #64]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80117b6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80117ba:	4240      	negs	r0, r0
 80117bc:	e002      	b.n	80117c4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x280>
            return Q15(sineTable[i]);
 80117be:	4b0e      	ldr	r3, [pc, #56]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80117c0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80117c4:	ab01      	add	r3, sp, #4
 80117c6:	2220      	movs	r2, #32
 80117c8:	eba0 0008 	sub.w	r0, r0, r8
 80117cc:	f00d fda1 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 80117d0:	eb08 0100 	add.w	r1, r8, r0
 80117d4:	e7af      	b.n	8011736 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1f2>
            return Q15(sineTable[180 - i]);
 80117d6:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80117da:	4b07      	ldr	r3, [pc, #28]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80117dc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80117e0:	e7f0      	b.n	80117c4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x280>
            return Q15(-int32_t(sineTable[i - 180]));
 80117e2:	3ab4      	subs	r2, #180	; 0xb4
 80117e4:	4b04      	ldr	r3, [pc, #16]	; (80117f8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80117e6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80117ea:	4240      	negs	r0, r0
 80117ec:	e7ea      	b.n	80117c4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x280>
            return Q5(v / i);
 80117ee:	3001      	adds	r0, #1
 80117f0:	e7a9      	b.n	8011746 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x202>
 80117f2:	bf00      	nop
 80117f4:	b60b60b7 	.word	0xb60b60b7
 80117f8:	08024ae8 	.word	0x08024ae8

080117fc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
{
    lineToXYAR2(canvas, circleCenterX, circleCenterY, angle, r2);
}

void Circle::lineToXYAR2(Canvas& canvas, const CWRUtil::Q5& x, const CWRUtil::Q5& y, const CWRUtil::Q5& angle, const CWRUtil::Q5& r2) const
{
 80117fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011800:	b082      	sub	sp, #8
 8011802:	460d      	mov	r5, r1
 8011804:	4691      	mov	r9, r2
 8011806:	461e      	mov	r6, r3
 8011808:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801180c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801180e:	f8d8 2000 	ldr.w	r2, [r8]
        i = Q5(((i % _360) + _360) % _360);
 8011812:	48a8      	ldr	r0, [pc, #672]	; (8011ab4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 8011814:	fb80 1302 	smull	r1, r3, r0, r2
 8011818:	1899      	adds	r1, r3, r2
 801181a:	17d3      	asrs	r3, r2, #31
 801181c:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8011820:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8011824:	fb01 2313 	mls	r3, r1, r3, r2
 8011828:	440b      	add	r3, r1
 801182a:	fb80 2003 	smull	r2, r0, r0, r3
 801182e:	18c2      	adds	r2, r0, r3
 8011830:	17d8      	asrs	r0, r3, #31
 8011832:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8011836:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 801183a:	4243      	negs	r3, r0
 801183c:	f000 011f 	and.w	r1, r0, #31
 8011840:	f003 031f 	and.w	r3, r3, #31
 8011844:	bf58      	it	pl
 8011846:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011848:	4602      	mov	r2, r0
 801184a:	2800      	cmp	r0, #0
 801184c:	db23      	blt.n	8011896 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x9a>
 801184e:	1157      	asrs	r7, r2, #5
        i = ((i % 360) + 360) % 360;
 8011850:	4898      	ldr	r0, [pc, #608]	; (8011ab4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 8011852:	fb80 c307 	smull	ip, r3, r0, r7
 8011856:	eb03 0c07 	add.w	ip, r3, r7
 801185a:	17d3      	asrs	r3, r2, #31
 801185c:	ebc3 232c 	rsb	r3, r3, ip, asr #8
 8011860:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8011864:	fb0c 7313 	mls	r3, ip, r3, r7
 8011868:	4463      	add	r3, ip
 801186a:	fb80 2003 	smull	r2, r0, r0, r3
 801186e:	4418      	add	r0, r3
 8011870:	17da      	asrs	r2, r3, #31
 8011872:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011876:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 801187a:	2a5a      	cmp	r2, #90	; 0x5a
 801187c:	dd0e      	ble.n	801189c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xa0>
        if (i <= 180)
 801187e:	2ab4      	cmp	r2, #180	; 0xb4
 8011880:	dd67      	ble.n	8011952 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x156>
        if (i <= 270)
 8011882:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011886:	dd6a      	ble.n	801195e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x162>
        return Q15(-int32_t(sineTable[360 - i]));
 8011888:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801188c:	4b8a      	ldr	r3, [pc, #552]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 801188e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011892:	4240      	negs	r0, r0
 8011894:	e005      	b.n	80118a2 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xa6>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011896:	f100 021f 	add.w	r2, r0, #31
 801189a:	e7d8      	b.n	801184e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x52>
            return Q15(sineTable[i]);
 801189c:	4b86      	ldr	r3, [pc, #536]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 801189e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80118a2:	4682      	mov	sl, r0
        if (fraction == 0)
 80118a4:	2900      	cmp	r1, #0
 80118a6:	d160      	bne.n	801196a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x16e>
            return sineLow;
 80118a8:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80118aa:	ab01      	add	r3, sp, #4
 80118ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80118b0:	6820      	ldr	r0, [r4, #0]
 80118b2:	f00d fd2e 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 80118b6:	2800      	cmp	r0, #0
 80118b8:	f2c0 8092 	blt.w	80119e0 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1e4>
            return Q5(v + q5.v);
 80118bc:	f8d9 7000 	ldr.w	r7, [r9]
 80118c0:	eb07 0760 	add.w	r7, r7, r0, asr #1
 80118c4:	f8d8 2000 	ldr.w	r2, [r8]
            return Q5(v - q5.v);
 80118c8:	f5c2 6234 	rsb	r2, r2, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 80118cc:	4879      	ldr	r0, [pc, #484]	; (8011ab4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 80118ce:	fb80 1302 	smull	r1, r3, r0, r2
 80118d2:	1899      	adds	r1, r3, r2
 80118d4:	17d3      	asrs	r3, r2, #31
 80118d6:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 80118da:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 80118de:	fb01 2313 	mls	r3, r1, r3, r2
 80118e2:	440b      	add	r3, r1
 80118e4:	fb80 2003 	smull	r2, r0, r0, r3
 80118e8:	18c2      	adds	r2, r0, r3
 80118ea:	17d8      	asrs	r0, r3, #31
 80118ec:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 80118f0:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80118f4:	4243      	negs	r3, r0
 80118f6:	f000 011f 	and.w	r1, r0, #31
 80118fa:	f003 031f 	and.w	r3, r3, #31
 80118fe:	bf58      	it	pl
 8011900:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011902:	4602      	mov	r2, r0
 8011904:	2800      	cmp	r0, #0
 8011906:	db6d      	blt.n	80119e4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1e8>
 8011908:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 801190c:	4869      	ldr	r0, [pc, #420]	; (8011ab4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 801190e:	fb80 e30c 	smull	lr, r3, r0, ip
 8011912:	eb03 0e0c 	add.w	lr, r3, ip
 8011916:	17d3      	asrs	r3, r2, #31
 8011918:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 801191c:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8011920:	fb0e c313 	mls	r3, lr, r3, ip
 8011924:	4473      	add	r3, lr
 8011926:	fb80 2003 	smull	r2, r0, r0, r3
 801192a:	4418      	add	r0, r3
 801192c:	17da      	asrs	r2, r3, #31
 801192e:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011932:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8011936:	2a5a      	cmp	r2, #90	; 0x5a
 8011938:	dd57      	ble.n	80119ea <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1ee>
        if (i <= 180)
 801193a:	2ab4      	cmp	r2, #180	; 0xb4
 801193c:	dd6d      	ble.n	8011a1a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x21e>
        if (i <= 270)
 801193e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011942:	dd70      	ble.n	8011a26 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x22a>
        return Q15(-int32_t(sineTable[360 - i]));
 8011944:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8011948:	4b5b      	ldr	r3, [pc, #364]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 801194a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801194e:	4240      	negs	r0, r0
 8011950:	e04e      	b.n	80119f0 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1f4>
            return Q15(sineTable[180 - i]);
 8011952:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8011956:	4b58      	ldr	r3, [pc, #352]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8011958:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801195c:	e7a1      	b.n	80118a2 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xa6>
            return Q15(-int32_t(sineTable[i - 180]));
 801195e:	3ab4      	subs	r2, #180	; 0xb4
 8011960:	4b55      	ldr	r3, [pc, #340]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8011962:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011966:	4240      	negs	r0, r0
 8011968:	e79b      	b.n	80118a2 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xa6>
        Q15 sineHigh = sine(i.to<int>() + 1);
 801196a:	3701      	adds	r7, #1
        i = ((i % 360) + 360) % 360;
 801196c:	4a51      	ldr	r2, [pc, #324]	; (8011ab4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 801196e:	fb82 0307 	smull	r0, r3, r2, r7
 8011972:	19d8      	adds	r0, r3, r7
 8011974:	17fb      	asrs	r3, r7, #31
 8011976:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 801197a:	f44f 70b4 	mov.w	r0, #360	; 0x168
 801197e:	fb00 7313 	mls	r3, r0, r3, r7
 8011982:	4403      	add	r3, r0
 8011984:	fb82 7203 	smull	r7, r2, r2, r3
 8011988:	18d7      	adds	r7, r2, r3
 801198a:	17da      	asrs	r2, r3, #31
 801198c:	ebc2 2227 	rsb	r2, r2, r7, asr #8
 8011990:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8011994:	2a5a      	cmp	r2, #90	; 0x5a
 8011996:	dd0b      	ble.n	80119b0 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1b4>
        if (i <= 180)
 8011998:	2ab4      	cmp	r2, #180	; 0xb4
 801199a:	dd15      	ble.n	80119c8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1cc>
        if (i <= 270)
 801199c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80119a0:	dd18      	ble.n	80119d4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1d8>
        return Q15(-int32_t(sineTable[360 - i]));
 80119a2:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80119a6:	4b44      	ldr	r3, [pc, #272]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80119a8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80119ac:	4240      	negs	r0, r0
 80119ae:	e002      	b.n	80119b6 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1ba>
            return Q15(sineTable[i]);
 80119b0:	4b41      	ldr	r3, [pc, #260]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80119b2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80119b6:	ab01      	add	r3, sp, #4
 80119b8:	2220      	movs	r2, #32
 80119ba:	eba0 000a 	sub.w	r0, r0, sl
 80119be:	f00d fca8 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 80119c2:	eb0a 0100 	add.w	r1, sl, r0
 80119c6:	e770      	b.n	80118aa <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xae>
            return Q15(sineTable[180 - i]);
 80119c8:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80119cc:	4b3a      	ldr	r3, [pc, #232]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80119ce:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80119d2:	e7f0      	b.n	80119b6 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1ba>
            return Q15(-int32_t(sineTable[i - 180]));
 80119d4:	3ab4      	subs	r2, #180	; 0xb4
 80119d6:	4b38      	ldr	r3, [pc, #224]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80119d8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80119dc:	4240      	negs	r0, r0
 80119de:	e7ea      	b.n	80119b6 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1ba>
            return Q5(v / i);
 80119e0:	3001      	adds	r0, #1
 80119e2:	e76b      	b.n	80118bc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xc0>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80119e4:	f100 021f 	add.w	r2, r0, #31
 80119e8:	e78e      	b.n	8011908 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x10c>
            return Q15(sineTable[i]);
 80119ea:	4b33      	ldr	r3, [pc, #204]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80119ec:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80119f0:	4680      	mov	r8, r0
        if (fraction == 0)
 80119f2:	b9f1      	cbnz	r1, 8011a32 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x236>
            return sineLow;
 80119f4:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80119f6:	ab01      	add	r3, sp, #4
 80119f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80119fc:	6820      	ldr	r0, [r4, #0]
 80119fe:	f00d fc88 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 8011a02:	2800      	cmp	r0, #0
 8011a04:	db53      	blt.n	8011aae <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b2>
            return Q5(v - q5.v);
 8011a06:	6832      	ldr	r2, [r6, #0]
    canvas.lineTo(x + ((r2 * CWRUtil::sine(angle)) / 2), y - ((r2 * CWRUtil::cosine(angle)) / 2));
 8011a08:	eba2 0260 	sub.w	r2, r2, r0, asr #1
 8011a0c:	4639      	mov	r1, r7
 8011a0e:	4628      	mov	r0, r5
 8011a10:	f7ff f958 	bl	8010cc4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
}
 8011a14:	b002      	add	sp, #8
 8011a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return Q15(sineTable[180 - i]);
 8011a1a:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8011a1e:	4b26      	ldr	r3, [pc, #152]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8011a20:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011a24:	e7e4      	b.n	80119f0 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1f4>
            return Q15(-int32_t(sineTable[i - 180]));
 8011a26:	3ab4      	subs	r2, #180	; 0xb4
 8011a28:	4b23      	ldr	r3, [pc, #140]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8011a2a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011a2e:	4240      	negs	r0, r0
 8011a30:	e7de      	b.n	80119f0 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1f4>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8011a32:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8011a36:	4a1f      	ldr	r2, [pc, #124]	; (8011ab4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 8011a38:	fb82 030c 	smull	r0, r3, r2, ip
 8011a3c:	eb03 000c 	add.w	r0, r3, ip
 8011a40:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8011a44:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8011a48:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8011a4c:	fb0e c313 	mls	r3, lr, r3, ip
 8011a50:	4473      	add	r3, lr
 8011a52:	fb82 0203 	smull	r0, r2, r2, r3
 8011a56:	18d0      	adds	r0, r2, r3
 8011a58:	17da      	asrs	r2, r3, #31
 8011a5a:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011a5e:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8011a62:	2a5a      	cmp	r2, #90	; 0x5a
 8011a64:	dd0b      	ble.n	8011a7e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x282>
        if (i <= 180)
 8011a66:	2ab4      	cmp	r2, #180	; 0xb4
 8011a68:	dd15      	ble.n	8011a96 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x29a>
        if (i <= 270)
 8011a6a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011a6e:	dd18      	ble.n	8011aa2 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2a6>
        return Q15(-int32_t(sineTable[360 - i]));
 8011a70:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8011a74:	4b10      	ldr	r3, [pc, #64]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8011a76:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011a7a:	4240      	negs	r0, r0
 8011a7c:	e002      	b.n	8011a84 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x288>
            return Q15(sineTable[i]);
 8011a7e:	4b0e      	ldr	r3, [pc, #56]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8011a80:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8011a84:	ab01      	add	r3, sp, #4
 8011a86:	2220      	movs	r2, #32
 8011a88:	eba0 0008 	sub.w	r0, r0, r8
 8011a8c:	f00d fc41 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8011a90:	eb08 0100 	add.w	r1, r8, r0
 8011a94:	e7af      	b.n	80119f6 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1fa>
            return Q15(sineTable[180 - i]);
 8011a96:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8011a9a:	4b07      	ldr	r3, [pc, #28]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8011a9c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011aa0:	e7f0      	b.n	8011a84 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x288>
            return Q15(-int32_t(sineTable[i - 180]));
 8011aa2:	3ab4      	subs	r2, #180	; 0xb4
 8011aa4:	4b04      	ldr	r3, [pc, #16]	; (8011ab8 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8011aa6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011aaa:	4240      	negs	r0, r0
 8011aac:	e7ea      	b.n	8011a84 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x288>
            return Q5(v / i);
 8011aae:	3001      	adds	r0, #1
 8011ab0:	e7a9      	b.n	8011a06 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x20a>
 8011ab2:	bf00      	nop
 8011ab4:	b60b60b7 	.word	0xb60b60b7
 8011ab8:	08024ae8 	.word	0x08024ae8

08011abc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
{
 8011abc:	b510      	push	{r4, lr}
 8011abe:	b082      	sub	sp, #8
    lineToXYAR2(canvas, circleCenterX, circleCenterY, angle, r2);
 8011ac0:	9301      	str	r3, [sp, #4]
 8011ac2:	9200      	str	r2, [sp, #0]
 8011ac4:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8011ac8:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8011acc:	f7ff fe96 	bl	80117fc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
}
 8011ad0:	b002      	add	sp, #8
 8011ad2:	bd10      	pop	{r4, pc}

08011ad4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
    CWRUtil::Q5 yNew = circleCenterY - ((r2 * CWRUtil::cosine(a)) / 2);
    updateMinMaxXY(xNew, yNew, xMin, xMax, yMin, yMax);
}

void Circle::updateMinMaxXY(const CWRUtil::Q5& xNew, const CWRUtil::Q5& yNew, CWRUtil::Q5& xMin, CWRUtil::Q5& xMax, CWRUtil::Q5& yMin, CWRUtil::Q5& yMax) const
{
 8011ad4:	b4f0      	push	{r4, r5, r6, r7}
 8011ad6:	9d04      	ldr	r5, [sp, #16]
 8011ad8:	9c05      	ldr	r4, [sp, #20]
 8011ada:	9806      	ldr	r0, [sp, #24]
            return v;
 8011adc:	680f      	ldr	r7, [r1, #0]
 8011ade:	681e      	ldr	r6, [r3, #0]
    if (xNew < xMin)
 8011ae0:	42b7      	cmp	r7, r6
 8011ae2:	da00      	bge.n	8011ae6 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x12>
    {
        xMin = xNew;
 8011ae4:	601f      	str	r7, [r3, #0]
 8011ae6:	680e      	ldr	r6, [r1, #0]
 8011ae8:	682b      	ldr	r3, [r5, #0]
    }
    if (xNew > xMax)
 8011aea:	429e      	cmp	r6, r3
 8011aec:	dd00      	ble.n	8011af0 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1c>
    {
        xMax = xNew;
 8011aee:	602e      	str	r6, [r5, #0]
 8011af0:	6811      	ldr	r1, [r2, #0]
 8011af2:	6823      	ldr	r3, [r4, #0]
    }
    if (yNew < yMin)
 8011af4:	4299      	cmp	r1, r3
 8011af6:	da00      	bge.n	8011afa <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x26>
    {
        yMin = yNew;
 8011af8:	6021      	str	r1, [r4, #0]
 8011afa:	6811      	ldr	r1, [r2, #0]
 8011afc:	6803      	ldr	r3, [r0, #0]
    }
    if (yNew > yMax)
 8011afe:	4299      	cmp	r1, r3
 8011b00:	dd00      	ble.n	8011b04 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x30>
    {
        yMax = yNew;
 8011b02:	6001      	str	r1, [r0, #0]
    }
}
 8011b04:	bcf0      	pop	{r4, r5, r6, r7}
 8011b06:	4770      	bx	lr

08011b08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
{
 8011b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b0c:	b088      	sub	sp, #32
 8011b0e:	4604      	mov	r4, r0
 8011b10:	460f      	mov	r7, r1
 8011b12:	4615      	mov	r5, r2
 8011b14:	461e      	mov	r6, r3
 8011b16:	680a      	ldr	r2, [r1, #0]
        i = Q5(((i % _360) + _360) % _360);
 8011b18:	48ac      	ldr	r0, [pc, #688]	; (8011dcc <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 8011b1a:	fb80 1302 	smull	r1, r3, r0, r2
 8011b1e:	1899      	adds	r1, r3, r2
 8011b20:	17d3      	asrs	r3, r2, #31
 8011b22:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8011b26:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8011b2a:	fb01 2313 	mls	r3, r1, r3, r2
 8011b2e:	440b      	add	r3, r1
 8011b30:	fb80 2003 	smull	r2, r0, r0, r3
 8011b34:	18c2      	adds	r2, r0, r3
 8011b36:	17d8      	asrs	r0, r3, #31
 8011b38:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8011b3c:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8011b40:	4243      	negs	r3, r0
 8011b42:	f000 011f 	and.w	r1, r0, #31
 8011b46:	f003 031f 	and.w	r3, r3, #31
 8011b4a:	bf58      	it	pl
 8011b4c:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011b4e:	4602      	mov	r2, r0
 8011b50:	2800      	cmp	r0, #0
 8011b52:	db24      	blt.n	8011b9e <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x96>
 8011b54:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 8011b58:	489c      	ldr	r0, [pc, #624]	; (8011dcc <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 8011b5a:	fb80 e30c 	smull	lr, r3, r0, ip
 8011b5e:	eb03 0e0c 	add.w	lr, r3, ip
 8011b62:	17d3      	asrs	r3, r2, #31
 8011b64:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8011b68:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8011b6c:	fb0e c313 	mls	r3, lr, r3, ip
 8011b70:	4473      	add	r3, lr
 8011b72:	fb80 2003 	smull	r2, r0, r0, r3
 8011b76:	4418      	add	r0, r3
 8011b78:	17da      	asrs	r2, r3, #31
 8011b7a:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011b7e:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8011b82:	2a5a      	cmp	r2, #90	; 0x5a
 8011b84:	dd0e      	ble.n	8011ba4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x9c>
        if (i <= 180)
 8011b86:	2ab4      	cmp	r2, #180	; 0xb4
 8011b88:	dd65      	ble.n	8011c56 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x14e>
        if (i <= 270)
 8011b8a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011b8e:	dd68      	ble.n	8011c62 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x15a>
        return Q15(-int32_t(sineTable[360 - i]));
 8011b90:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8011b94:	4b8e      	ldr	r3, [pc, #568]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011b96:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011b9a:	4240      	negs	r0, r0
 8011b9c:	e005      	b.n	8011baa <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xa2>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011b9e:	f100 021f 	add.w	r2, r0, #31
 8011ba2:	e7d7      	b.n	8011b54 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x4c>
            return Q15(sineTable[i]);
 8011ba4:	4b8a      	ldr	r3, [pc, #552]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011ba6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011baa:	4680      	mov	r8, r0
        if (fraction == 0)
 8011bac:	2900      	cmp	r1, #0
 8011bae:	d15e      	bne.n	8011c6e <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x166>
            return sineLow;
 8011bb0:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8011bb2:	ab05      	add	r3, sp, #20
 8011bb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011bb8:	6828      	ldr	r0, [r5, #0]
 8011bba:	f00d fbaa 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	f2c0 8093 	blt.w	8011cea <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1e2>
            return Q5(v + q5.v);
 8011bc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011bc6:	eb03 0360 	add.w	r3, r3, r0, asr #1
    CWRUtil::Q5 xNew = circleCenterX + ((r2 * CWRUtil::sine(a)) / 2);
 8011bca:	9307      	str	r3, [sp, #28]
 8011bcc:	683a      	ldr	r2, [r7, #0]
            return Q5(v - q5.v);
 8011bce:	f5c2 6234 	rsb	r2, r2, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 8011bd2:	487e      	ldr	r0, [pc, #504]	; (8011dcc <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 8011bd4:	fb80 1302 	smull	r1, r3, r0, r2
 8011bd8:	1899      	adds	r1, r3, r2
 8011bda:	17d3      	asrs	r3, r2, #31
 8011bdc:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8011be0:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8011be4:	fb01 2313 	mls	r3, r1, r3, r2
 8011be8:	440b      	add	r3, r1
 8011bea:	fb80 2003 	smull	r2, r0, r0, r3
 8011bee:	18c2      	adds	r2, r0, r3
 8011bf0:	17d8      	asrs	r0, r3, #31
 8011bf2:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8011bf6:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8011bfa:	4243      	negs	r3, r0
 8011bfc:	f000 011f 	and.w	r1, r0, #31
 8011c00:	f003 031f 	and.w	r3, r3, #31
 8011c04:	bf58      	it	pl
 8011c06:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011c08:	4602      	mov	r2, r0
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	db6f      	blt.n	8011cee <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1e6>
 8011c0e:	1157      	asrs	r7, r2, #5
        i = ((i % 360) + 360) % 360;
 8011c10:	486e      	ldr	r0, [pc, #440]	; (8011dcc <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 8011c12:	fb80 c307 	smull	ip, r3, r0, r7
 8011c16:	eb03 0c07 	add.w	ip, r3, r7
 8011c1a:	17d3      	asrs	r3, r2, #31
 8011c1c:	ebc3 232c 	rsb	r3, r3, ip, asr #8
 8011c20:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8011c24:	fb0c 7313 	mls	r3, ip, r3, r7
 8011c28:	4463      	add	r3, ip
 8011c2a:	fb80 2003 	smull	r2, r0, r0, r3
 8011c2e:	4418      	add	r0, r3
 8011c30:	17da      	asrs	r2, r3, #31
 8011c32:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011c36:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 8011c3a:	2a5a      	cmp	r2, #90	; 0x5a
 8011c3c:	dd5a      	ble.n	8011cf4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1ec>
        if (i <= 180)
 8011c3e:	2ab4      	cmp	r2, #180	; 0xb4
 8011c40:	dd7a      	ble.n	8011d38 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x230>
        if (i <= 270)
 8011c42:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011c46:	dd7d      	ble.n	8011d44 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x23c>
        return Q15(-int32_t(sineTable[360 - i]));
 8011c48:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8011c4c:	4b60      	ldr	r3, [pc, #384]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011c4e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011c52:	4240      	negs	r0, r0
 8011c54:	e051      	b.n	8011cfa <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1f2>
            return Q15(sineTable[180 - i]);
 8011c56:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8011c5a:	4b5d      	ldr	r3, [pc, #372]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011c5c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011c60:	e7a3      	b.n	8011baa <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xa2>
            return Q15(-int32_t(sineTable[i - 180]));
 8011c62:	3ab4      	subs	r2, #180	; 0xb4
 8011c64:	4b5a      	ldr	r3, [pc, #360]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011c66:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011c6a:	4240      	negs	r0, r0
 8011c6c:	e79d      	b.n	8011baa <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xa2>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8011c6e:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8011c72:	4a56      	ldr	r2, [pc, #344]	; (8011dcc <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 8011c74:	fb82 030c 	smull	r0, r3, r2, ip
 8011c78:	eb03 000c 	add.w	r0, r3, ip
 8011c7c:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8011c80:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8011c84:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8011c88:	fb0e c313 	mls	r3, lr, r3, ip
 8011c8c:	4473      	add	r3, lr
 8011c8e:	fb82 0203 	smull	r0, r2, r2, r3
 8011c92:	18d0      	adds	r0, r2, r3
 8011c94:	17da      	asrs	r2, r3, #31
 8011c96:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011c9a:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8011c9e:	2a5a      	cmp	r2, #90	; 0x5a
 8011ca0:	dd0b      	ble.n	8011cba <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1b2>
        if (i <= 180)
 8011ca2:	2ab4      	cmp	r2, #180	; 0xb4
 8011ca4:	dd15      	ble.n	8011cd2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1ca>
        if (i <= 270)
 8011ca6:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011caa:	dd18      	ble.n	8011cde <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1d6>
        return Q15(-int32_t(sineTable[360 - i]));
 8011cac:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8011cb0:	4b47      	ldr	r3, [pc, #284]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011cb2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011cb6:	4240      	negs	r0, r0
 8011cb8:	e002      	b.n	8011cc0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1b8>
            return Q15(sineTable[i]);
 8011cba:	4b45      	ldr	r3, [pc, #276]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011cbc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8011cc0:	ab05      	add	r3, sp, #20
 8011cc2:	2220      	movs	r2, #32
 8011cc4:	eba0 0008 	sub.w	r0, r0, r8
 8011cc8:	f00d fb23 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8011ccc:	eb08 0100 	add.w	r1, r8, r0
 8011cd0:	e76f      	b.n	8011bb2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xaa>
            return Q15(sineTable[180 - i]);
 8011cd2:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8011cd6:	4b3e      	ldr	r3, [pc, #248]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011cd8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011cdc:	e7f0      	b.n	8011cc0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1b8>
            return Q15(-int32_t(sineTable[i - 180]));
 8011cde:	3ab4      	subs	r2, #180	; 0xb4
 8011ce0:	4b3b      	ldr	r3, [pc, #236]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011ce2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011ce6:	4240      	negs	r0, r0
 8011ce8:	e7ea      	b.n	8011cc0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1b8>
            return Q5(v / i);
 8011cea:	3001      	adds	r0, #1
 8011cec:	e76a      	b.n	8011bc4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xbc>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011cee:	f100 021f 	add.w	r2, r0, #31
 8011cf2:	e78c      	b.n	8011c0e <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x106>
            return Q15(sineTable[i]);
 8011cf4:	4b36      	ldr	r3, [pc, #216]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011cf6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011cfa:	4680      	mov	r8, r0
        if (fraction == 0)
 8011cfc:	bb41      	cbnz	r1, 8011d50 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x248>
            return sineLow;
 8011cfe:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8011d00:	ab05      	add	r3, sp, #20
 8011d02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011d06:	6828      	ldr	r0, [r5, #0]
 8011d08:	f00d fb03 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	db5a      	blt.n	8011dc6 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2be>
            return Q5(v - q5.v);
 8011d10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d12:	eba3 0360 	sub.w	r3, r3, r0, asr #1
    CWRUtil::Q5 yNew = circleCenterY - ((r2 * CWRUtil::cosine(a)) / 2);
 8011d16:	aa08      	add	r2, sp, #32
 8011d18:	f842 3d08 	str.w	r3, [r2, #-8]!
    updateMinMaxXY(xNew, yNew, xMin, xMax, yMin, yMax);
 8011d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d1e:	9302      	str	r3, [sp, #8]
 8011d20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d22:	9301      	str	r3, [sp, #4]
 8011d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d26:	9300      	str	r3, [sp, #0]
 8011d28:	4633      	mov	r3, r6
 8011d2a:	a907      	add	r1, sp, #28
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f7ff fed1 	bl	8011ad4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
}
 8011d32:	b008      	add	sp, #32
 8011d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return Q15(sineTable[180 - i]);
 8011d38:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8011d3c:	4b24      	ldr	r3, [pc, #144]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011d3e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011d42:	e7da      	b.n	8011cfa <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1f2>
            return Q15(-int32_t(sineTable[i - 180]));
 8011d44:	3ab4      	subs	r2, #180	; 0xb4
 8011d46:	4b22      	ldr	r3, [pc, #136]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011d48:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011d4c:	4240      	negs	r0, r0
 8011d4e:	e7d4      	b.n	8011cfa <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1f2>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8011d50:	3701      	adds	r7, #1
        i = ((i % 360) + 360) % 360;
 8011d52:	4a1e      	ldr	r2, [pc, #120]	; (8011dcc <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 8011d54:	fb82 0307 	smull	r0, r3, r2, r7
 8011d58:	19d8      	adds	r0, r3, r7
 8011d5a:	17fb      	asrs	r3, r7, #31
 8011d5c:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8011d60:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8011d64:	fb0c 7313 	mls	r3, ip, r3, r7
 8011d68:	4463      	add	r3, ip
 8011d6a:	fb82 0203 	smull	r0, r2, r2, r3
 8011d6e:	18d0      	adds	r0, r2, r3
 8011d70:	17da      	asrs	r2, r3, #31
 8011d72:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011d76:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 8011d7a:	2a5a      	cmp	r2, #90	; 0x5a
 8011d7c:	dd0b      	ble.n	8011d96 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x28e>
        if (i <= 180)
 8011d7e:	2ab4      	cmp	r2, #180	; 0xb4
 8011d80:	dd15      	ble.n	8011dae <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2a6>
        if (i <= 270)
 8011d82:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011d86:	dd18      	ble.n	8011dba <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2b2>
        return Q15(-int32_t(sineTable[360 - i]));
 8011d88:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8011d8c:	4b10      	ldr	r3, [pc, #64]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011d8e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011d92:	4240      	negs	r0, r0
 8011d94:	e002      	b.n	8011d9c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x294>
            return Q15(sineTable[i]);
 8011d96:	4b0e      	ldr	r3, [pc, #56]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011d98:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8011d9c:	ab05      	add	r3, sp, #20
 8011d9e:	2220      	movs	r2, #32
 8011da0:	eba0 0008 	sub.w	r0, r0, r8
 8011da4:	f00d fab5 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8011da8:	eb08 0100 	add.w	r1, r8, r0
 8011dac:	e7a8      	b.n	8011d00 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1f8>
            return Q15(sineTable[180 - i]);
 8011dae:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8011db2:	4b07      	ldr	r3, [pc, #28]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011db4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011db8:	e7f0      	b.n	8011d9c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x294>
            return Q15(-int32_t(sineTable[i - 180]));
 8011dba:	3ab4      	subs	r2, #180	; 0xb4
 8011dbc:	4b04      	ldr	r3, [pc, #16]	; (8011dd0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8011dbe:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011dc2:	4240      	negs	r0, r0
 8011dc4:	e7ea      	b.n	8011d9c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x294>
            return Q5(v / i);
 8011dc6:	3001      	adds	r0, #1
 8011dc8:	e7a2      	b.n	8011d10 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x208>
 8011dca:	bf00      	nop
 8011dcc:	b60b60b7 	.word	0xb60b60b7
 8011dd0:	08024ae8 	.word	0x08024ae8

08011dd4 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>:
    if (d < 0)
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	db00      	blt.n	8011dda <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_+0x6>
}
 8011dd8:	4770      	bx	lr
 8011dda:	4240      	negs	r0, r0
 8011ddc:	e7fc      	b.n	8011dd8 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_+0x4>
	...

08011de0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:

void Circle::calculateMinimalRect(CWRUtil::Q5 arcStart, CWRUtil::Q5 arcEnd, CWRUtil::Q5& xMin, CWRUtil::Q5& xMax, CWRUtil::Q5& yMin, CWRUtil::Q5& yMax) const
{
 8011de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de4:	b09b      	sub	sp, #108	; 0x6c
 8011de6:	4604      	mov	r4, r0
 8011de8:	9107      	str	r1, [sp, #28]
 8011dea:	9206      	str	r2, [sp, #24]
 8011dec:	9305      	str	r3, [sp, #20]
 8011dee:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8011df0:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8011df2:	9d26      	ldr	r5, [sp, #152]	; 0x98
    // Put start before end by swapping
    if (arcStart > arcEnd)
 8011df4:	4291      	cmp	r1, r2
 8011df6:	dd01      	ble.n	8011dfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1c>
    {
        CWRUtil::Q5 tmp = arcStart;
        arcStart = arcEnd;
 8011df8:	9207      	str	r2, [sp, #28]
        arcEnd = tmp;
 8011dfa:	9106      	str	r1, [sp, #24]
        explicit Q5(int i) : v(i) { }
 8011dfc:	f44f 6b34 	mov.w	fp, #2880	; 0xb40
 8011e00:	f44f 5834 	mov.w	r8, #11520	; 0x2d00
            return Q5(v - q5.v);
 8011e04:	9a07      	ldr	r2, [sp, #28]
 8011e06:	9b06      	ldr	r3, [sp, #24]
 8011e08:	1a9b      	subs	r3, r3, r2
    }

    CWRUtil::Q5 _90 = CWRUtil::toQ5<int>(90);
    CWRUtil::Q5 _360 = CWRUtil::toQ5<int>(360);

    if ((arcEnd - arcStart) >= _360)
 8011e0a:	4543      	cmp	r3, r8
 8011e0c:	db03      	blt.n	8011e16 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x36>
        explicit Q5(int i) : v(i) { }
 8011e0e:	2300      	movs	r3, #0
    {
        // The entire circle has to be drawn
        arcStart = CWRUtil::toQ5<int>(0);
 8011e10:	9307      	str	r3, [sp, #28]
        arcEnd = _360;
 8011e12:	f8cd 8018 	str.w	r8, [sp, #24]
            return Q5(v * i);
 8011e16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v + q5.v);
 8011e18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e1a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    }

    // Check start angle
    updateMinMaxAR(arcStart, (circleRadius * 2) + circleLineWidth, xMin, xMax, yMin, yMax);
 8011e1e:	aa1a      	add	r2, sp, #104	; 0x68
 8011e20:	f842 3d3c 	str.w	r3, [r2, #-60]!
 8011e24:	9502      	str	r5, [sp, #8]
 8011e26:	9701      	str	r7, [sp, #4]
 8011e28:	9600      	str	r6, [sp, #0]
 8011e2a:	9b05      	ldr	r3, [sp, #20]
 8011e2c:	a907      	add	r1, sp, #28
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f7ff fe6a 	bl	8011b08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
        Q5() : v(0) { }
 8011e34:	2300      	movs	r3, #0
 8011e36:	930a      	str	r3, [sp, #40]	; 0x28
            return Q5(v + q5.v);
 8011e38:	9b07      	ldr	r3, [sp, #28]
 8011e3a:	f103 0a20 	add.w	sl, r3, #32
    // Here we have a up to 4 approximation steps on angles divisible by 90
    CWRUtil::Q5 i;
    for (i = CWRUtil::Q5(ROUNDUP(arcStart + CWRUtil::toQ5<int>(1), _90)); i <= arcEnd; i = i + _90)
 8011e3e:	4658      	mov	r0, fp
 8011e40:	f7ff ffc8 	bl	8011dd4 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 8011e44:	4681      	mov	r9, r0
 8011e46:	4658      	mov	r0, fp
 8011e48:	f7ff ffc4 	bl	8011dd4 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 8011e4c:	fb9a f3f0 	sdiv	r3, sl, r0
 8011e50:	fb00 a013 	mls	r0, r0, r3, sl
 8011e54:	eba9 0900 	sub.w	r9, r9, r0
 8011e58:	4658      	mov	r0, fp
 8011e5a:	f7ff ffbb 	bl	8011dd4 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 8011e5e:	fb99 f3f0 	sdiv	r3, r9, r0
 8011e62:	fb00 9013 	mls	r0, r0, r3, r9
 8011e66:	4450      	add	r0, sl
 8011e68:	900a      	str	r0, [sp, #40]	; 0x28
            return v;
 8011e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e6c:	9a06      	ldr	r2, [sp, #24]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	db13      	blt.n	8011e9a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xba>
            return Q5(v * i);
 8011e72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v + q5.v);
 8011e74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e76:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    {
        updateMinMaxAR(i, (circleRadius * 2) + circleLineWidth, xMin, xMax, yMin, yMax);
 8011e7a:	aa1a      	add	r2, sp, #104	; 0x68
 8011e7c:	f842 3d38 	str.w	r3, [r2, #-56]!
 8011e80:	9502      	str	r5, [sp, #8]
 8011e82:	9701      	str	r7, [sp, #4]
 8011e84:	9600      	str	r6, [sp, #0]
 8011e86:	9b05      	ldr	r3, [sp, #20]
 8011e88:	a90a      	add	r1, sp, #40	; 0x28
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	f7ff fe3c 	bl	8011b08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8011e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e92:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
    for (i = CWRUtil::Q5(ROUNDUP(arcStart + CWRUtil::toQ5<int>(1), _90)); i <= arcEnd; i = i + _90)
 8011e96:	930a      	str	r3, [sp, #40]	; 0x28
 8011e98:	e7e7      	b.n	8011e6a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x8a>
            return Q5(v - q5.v);
 8011e9a:	f5a3 6334 	sub.w	r3, r3, #2880	; 0xb40
    }
    // Check end angle
    if ((i - _90) < arcEnd)
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	dc14      	bgt.n	8011ecc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>
            return v;
 8011ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    {
        updateMinMaxAR(arcEnd, (circleRadius * 2) + circleLineWidth, xMin, xMax, yMin, yMax);
    }

    if (circleLineWidth == CWRUtil::toQ5<int>(0))
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d12f      	bne.n	8011f08 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x128>
            return Q5(v - q5.v);
 8011ea8:	9b06      	ldr	r3, [sp, #24]
 8011eaa:	9a07      	ldr	r2, [sp, #28]
 8011eac:	1a9b      	subs	r3, r3, r2
    {
        // A filled circle / pie / pacman
        if ((arcEnd - arcStart) < _360)
 8011eae:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8011eb2:	db1b      	blt.n	8011eec <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x10c>
        updateMinMaxAR(arcStart, (circleRadius * 2) - circleLineWidth, xMin, xMax, yMin, yMax);
        updateMinMaxAR(arcEnd, (circleRadius * 2) - circleLineWidth, xMin, xMax, yMin, yMax);
    }

    // Check if circle cap extends the min/max further
    if ((circleCapArcIncrement < 180) && (arcEnd - arcStart < _360))
 8011eb4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8011eb8:	2bb3      	cmp	r3, #179	; 0xb3
 8011eba:	d804      	bhi.n	8011ec6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xe6>
 8011ebc:	9b06      	ldr	r3, [sp, #24]
 8011ebe:	9a07      	ldr	r2, [sp, #28]
 8011ec0:	1a9b      	subs	r3, r3, r2
 8011ec2:	4598      	cmp	r8, r3
 8011ec4:	dc40      	bgt.n	8011f48 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x168>
        capX = circleCenterX + (circleRadius * CWRUtil::sine(arcEnd));
        capY = circleCenterY - (circleRadius * CWRUtil::cosine(arcEnd));
        updateMinMaxXY(capX - (circleLineWidth / 2), capY - (circleLineWidth / 2), xMin, xMax, yMin, yMax);
        updateMinMaxXY(capX + (circleLineWidth / 2), capY + (circleLineWidth / 2), xMin, xMax, yMin, yMax);
    }
}
 8011ec6:	b01b      	add	sp, #108	; 0x6c
 8011ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return Q5(v * i);
 8011ecc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v + q5.v);
 8011ece:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011ed0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        updateMinMaxAR(arcEnd, (circleRadius * 2) + circleLineWidth, xMin, xMax, yMin, yMax);
 8011ed4:	aa1a      	add	r2, sp, #104	; 0x68
 8011ed6:	f842 3d34 	str.w	r3, [r2, #-52]!
 8011eda:	9502      	str	r5, [sp, #8]
 8011edc:	9701      	str	r7, [sp, #4]
 8011ede:	9600      	str	r6, [sp, #0]
 8011ee0:	9b05      	ldr	r3, [sp, #20]
 8011ee2:	a906      	add	r1, sp, #24
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f7ff fe0f 	bl	8011b08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8011eea:	e7da      	b.n	8011ea2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc2>
        explicit Q5(int i) : v(i) { }
 8011eec:	2300      	movs	r3, #0
            updateMinMaxAR(CWRUtil::toQ5<int>(0), CWRUtil::toQ5<int>(0), xMin, xMax, yMin, yMax);
 8011eee:	930e      	str	r3, [sp, #56]	; 0x38
 8011ef0:	aa1a      	add	r2, sp, #104	; 0x68
 8011ef2:	f842 3d2c 	str.w	r3, [r2, #-44]!
 8011ef6:	9502      	str	r5, [sp, #8]
 8011ef8:	9701      	str	r7, [sp, #4]
 8011efa:	9600      	str	r6, [sp, #0]
 8011efc:	9b05      	ldr	r3, [sp, #20]
 8011efe:	a90e      	add	r1, sp, #56	; 0x38
 8011f00:	4620      	mov	r0, r4
 8011f02:	f7ff fe01 	bl	8011b08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8011f06:	e7d5      	b.n	8011eb4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xd4>
            return Q5(v * i);
 8011f08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v - q5.v);
 8011f0a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
        updateMinMaxAR(arcStart, (circleRadius * 2) - circleLineWidth, xMin, xMax, yMin, yMax);
 8011f0e:	aa1a      	add	r2, sp, #104	; 0x68
 8011f10:	f842 3d28 	str.w	r3, [r2, #-40]!
 8011f14:	9502      	str	r5, [sp, #8]
 8011f16:	9701      	str	r7, [sp, #4]
 8011f18:	9600      	str	r6, [sp, #0]
 8011f1a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011f1e:	464b      	mov	r3, r9
 8011f20:	a907      	add	r1, sp, #28
 8011f22:	4620      	mov	r0, r4
 8011f24:	f7ff fdf0 	bl	8011b08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
            return Q5(v * i);
 8011f28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v - q5.v);
 8011f2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011f2c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
        updateMinMaxAR(arcEnd, (circleRadius * 2) - circleLineWidth, xMin, xMax, yMin, yMax);
 8011f30:	aa1a      	add	r2, sp, #104	; 0x68
 8011f32:	f842 3d24 	str.w	r3, [r2, #-36]!
 8011f36:	9502      	str	r5, [sp, #8]
 8011f38:	9701      	str	r7, [sp, #4]
 8011f3a:	9600      	str	r6, [sp, #0]
 8011f3c:	464b      	mov	r3, r9
 8011f3e:	a906      	add	r1, sp, #24
 8011f40:	4620      	mov	r0, r4
 8011f42:	f7ff fde1 	bl	8011b08 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8011f46:	e7b5      	b.n	8011eb4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xd4>
 8011f48:	4611      	mov	r1, r2
        i = Q5(((i % _360) + _360) % _360);
 8011f4a:	4acf      	ldr	r2, [pc, #828]	; (8012288 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8011f4c:	fb82 0301 	smull	r0, r3, r2, r1
 8011f50:	1858      	adds	r0, r3, r1
 8011f52:	17cb      	asrs	r3, r1, #31
 8011f54:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8011f58:	f44f 5c34 	mov.w	ip, #11520	; 0x2d00
 8011f5c:	fb0c 1313 	mls	r3, ip, r3, r1
 8011f60:	4463      	add	r3, ip
 8011f62:	fb82 1203 	smull	r1, r2, r2, r3
 8011f66:	441a      	add	r2, r3
 8011f68:	17d8      	asrs	r0, r3, #31
 8011f6a:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8011f6e:	fb0c 3010 	mls	r0, ip, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8011f72:	4243      	negs	r3, r0
 8011f74:	f000 011f 	and.w	r1, r0, #31
 8011f78:	f003 031f 	and.w	r3, r3, #31
 8011f7c:	bf58      	it	pl
 8011f7e:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011f80:	4602      	mov	r2, r0
 8011f82:	2800      	cmp	r0, #0
 8011f84:	db24      	blt.n	8011fd0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f0>
 8011f86:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 8011f8a:	48bf      	ldr	r0, [pc, #764]	; (8012288 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8011f8c:	fb80 e30c 	smull	lr, r3, r0, ip
 8011f90:	eb03 0e0c 	add.w	lr, r3, ip
 8011f94:	17d3      	asrs	r3, r2, #31
 8011f96:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8011f9a:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8011f9e:	fb0e c313 	mls	r3, lr, r3, ip
 8011fa2:	4473      	add	r3, lr
 8011fa4:	fb80 2003 	smull	r2, r0, r0, r3
 8011fa8:	4418      	add	r0, r3
 8011faa:	17da      	asrs	r2, r3, #31
 8011fac:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8011fb0:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8011fb4:	2a5a      	cmp	r2, #90	; 0x5a
 8011fb6:	dd0e      	ble.n	8011fd6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f6>
        if (i <= 180)
 8011fb8:	2ab4      	cmp	r2, #180	; 0xb4
 8011fba:	dd65      	ble.n	8012088 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2a8>
        if (i <= 270)
 8011fbc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8011fc0:	dd68      	ble.n	8012094 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2b4>
        return Q15(-int32_t(sineTable[360 - i]));
 8011fc2:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8011fc6:	4bb1      	ldr	r3, [pc, #708]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8011fc8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011fcc:	4240      	negs	r0, r0
 8011fce:	e005      	b.n	8011fdc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fc>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011fd0:	f100 021f 	add.w	r2, r0, #31
 8011fd4:	e7d7      	b.n	8011f86 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1a6>
            return Q15(sineTable[i]);
 8011fd6:	4bad      	ldr	r3, [pc, #692]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8011fd8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8011fdc:	4681      	mov	r9, r0
        if (fraction == 0)
 8011fde:	2900      	cmp	r1, #0
 8011fe0:	d15e      	bne.n	80120a0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c0>
            return sineLow;
 8011fe2:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8011fe4:	ab09      	add	r3, sp, #36	; 0x24
 8011fe6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011fea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8011fec:	f00d f991 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v + q5.v);
 8011ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ff2:	eb03 0900 	add.w	r9, r3, r0
 8011ff6:	9907      	ldr	r1, [sp, #28]
            return Q5(v - q5.v);
 8011ff8:	f5c1 6134 	rsb	r1, r1, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 8011ffc:	4aa2      	ldr	r2, [pc, #648]	; (8012288 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8011ffe:	fb82 0301 	smull	r0, r3, r2, r1
 8012002:	1858      	adds	r0, r3, r1
 8012004:	17cb      	asrs	r3, r1, #31
 8012006:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 801200a:	f44f 5034 	mov.w	r0, #11520	; 0x2d00
 801200e:	fb00 1313 	mls	r3, r0, r3, r1
 8012012:	4403      	add	r3, r0
 8012014:	fb82 1203 	smull	r1, r2, r2, r3
 8012018:	18d1      	adds	r1, r2, r3
 801201a:	17da      	asrs	r2, r3, #31
 801201c:	ebc2 3261 	rsb	r2, r2, r1, asr #13
 8012020:	fb00 3212 	mls	r2, r0, r2, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8012024:	4253      	negs	r3, r2
 8012026:	f002 011f 	and.w	r1, r2, #31
 801202a:	f003 031f 	and.w	r3, r3, #31
 801202e:	bf58      	it	pl
 8012030:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012032:	4610      	mov	r0, r2
 8012034:	2a00      	cmp	r2, #0
 8012036:	db72      	blt.n	801211e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x33e>
 8012038:	ea4f 1c60 	mov.w	ip, r0, asr #5
        i = ((i % 360) + 360) % 360;
 801203c:	4a92      	ldr	r2, [pc, #584]	; (8012288 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 801203e:	fb82 e30c 	smull	lr, r3, r2, ip
 8012042:	eb03 0e0c 	add.w	lr, r3, ip
 8012046:	17c3      	asrs	r3, r0, #31
 8012048:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 801204c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8012050:	fb00 c313 	mls	r3, r0, r3, ip
 8012054:	4403      	add	r3, r0
 8012056:	fb82 e203 	smull	lr, r2, r2, r3
 801205a:	eb02 0e03 	add.w	lr, r2, r3
 801205e:	17da      	asrs	r2, r3, #31
 8012060:	ebc2 222e 	rsb	r2, r2, lr, asr #8
 8012064:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012068:	2a5a      	cmp	r2, #90	; 0x5a
 801206a:	dd5b      	ble.n	8012124 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x344>
        if (i <= 180)
 801206c:	2ab4      	cmp	r2, #180	; 0xb4
 801206e:	f340 80d9 	ble.w	8012224 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x444>
        if (i <= 270)
 8012072:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012076:	f340 80db 	ble.w	8012230 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x450>
        return Q15(-int32_t(sineTable[360 - i]));
 801207a:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801207e:	4b83      	ldr	r3, [pc, #524]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012080:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012084:	4240      	negs	r0, r0
 8012086:	e050      	b.n	801212a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x34a>
            return Q15(sineTable[180 - i]);
 8012088:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801208c:	4b7f      	ldr	r3, [pc, #508]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 801208e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012092:	e7a3      	b.n	8011fdc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fc>
            return Q15(-int32_t(sineTable[i - 180]));
 8012094:	3ab4      	subs	r2, #180	; 0xb4
 8012096:	4b7d      	ldr	r3, [pc, #500]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012098:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801209c:	4240      	negs	r0, r0
 801209e:	e79d      	b.n	8011fdc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fc>
        Q15 sineHigh = sine(i.to<int>() + 1);
 80120a0:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 80120a4:	4a78      	ldr	r2, [pc, #480]	; (8012288 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 80120a6:	fb82 030c 	smull	r0, r3, r2, ip
 80120aa:	eb03 000c 	add.w	r0, r3, ip
 80120ae:	ea4f 73ec 	mov.w	r3, ip, asr #31
 80120b2:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80120b6:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80120ba:	fb00 c313 	mls	r3, r0, r3, ip
 80120be:	4403      	add	r3, r0
 80120c0:	fb82 c203 	smull	ip, r2, r2, r3
 80120c4:	eb02 0c03 	add.w	ip, r2, r3
 80120c8:	17da      	asrs	r2, r3, #31
 80120ca:	ebc2 222c 	rsb	r2, r2, ip, asr #8
 80120ce:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 80120d2:	2a5a      	cmp	r2, #90	; 0x5a
 80120d4:	dd0b      	ble.n	80120ee <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x30e>
        if (i <= 180)
 80120d6:	2ab4      	cmp	r2, #180	; 0xb4
 80120d8:	dd15      	ble.n	8012106 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x326>
        if (i <= 270)
 80120da:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80120de:	dd18      	ble.n	8012112 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x332>
        return Q15(-int32_t(sineTable[360 - i]));
 80120e0:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80120e4:	4b69      	ldr	r3, [pc, #420]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 80120e6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80120ea:	4240      	negs	r0, r0
 80120ec:	e002      	b.n	80120f4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x314>
            return Q15(sineTable[i]);
 80120ee:	4b67      	ldr	r3, [pc, #412]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 80120f0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80120f4:	ab09      	add	r3, sp, #36	; 0x24
 80120f6:	2220      	movs	r2, #32
 80120f8:	eba0 0009 	sub.w	r0, r0, r9
 80120fc:	f00d f909 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8012100:	eb09 0100 	add.w	r1, r9, r0
 8012104:	e76e      	b.n	8011fe4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x204>
            return Q15(sineTable[180 - i]);
 8012106:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801210a:	4b60      	ldr	r3, [pc, #384]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 801210c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012110:	e7f0      	b.n	80120f4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x314>
            return Q15(-int32_t(sineTable[i - 180]));
 8012112:	3ab4      	subs	r2, #180	; 0xb4
 8012114:	4b5d      	ldr	r3, [pc, #372]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012116:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801211a:	4240      	negs	r0, r0
 801211c:	e7ea      	b.n	80120f4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x314>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801211e:	f102 001f 	add.w	r0, r2, #31
 8012122:	e789      	b.n	8012038 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x258>
            return Q15(sineTable[i]);
 8012124:	4b59      	ldr	r3, [pc, #356]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012126:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801212a:	4682      	mov	sl, r0
        if (fraction == 0)
 801212c:	2900      	cmp	r1, #0
 801212e:	f040 8085 	bne.w	801223c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x45c>
            return sineLow;
 8012132:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012134:	ab09      	add	r3, sp, #36	; 0x24
 8012136:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801213a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801213c:	f00d f8e9 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v - q5.v);
 8012140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012142:	eba3 0a00 	sub.w	sl, r3, r0
            return Q5(v / i);
 8012146:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012148:	2b00      	cmp	r3, #0
 801214a:	f2c0 80b9 	blt.w	80122c0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4e0>
 801214e:	105b      	asrs	r3, r3, #1
            return Q5(v - q5.v);
 8012150:	eba9 0203 	sub.w	r2, r9, r3
        updateMinMaxXY(capX - (circleLineWidth / 2), capY - (circleLineWidth / 2), xMin, xMax, yMin, yMax);
 8012154:	9212      	str	r2, [sp, #72]	; 0x48
 8012156:	ebaa 0303 	sub.w	r3, sl, r3
 801215a:	aa1a      	add	r2, sp, #104	; 0x68
 801215c:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8012160:	9502      	str	r5, [sp, #8]
 8012162:	9701      	str	r7, [sp, #4]
 8012164:	9600      	str	r6, [sp, #0]
 8012166:	9b05      	ldr	r3, [sp, #20]
 8012168:	a912      	add	r1, sp, #72	; 0x48
 801216a:	4620      	mov	r0, r4
 801216c:	f7ff fcb2 	bl	8011ad4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
            return Q5(v / i);
 8012170:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012172:	2b00      	cmp	r3, #0
 8012174:	f2c0 80a6 	blt.w	80122c4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4e4>
 8012178:	105b      	asrs	r3, r3, #1
            return Q5(v + q5.v);
 801217a:	eb03 0209 	add.w	r2, r3, r9
        updateMinMaxXY(capX + (circleLineWidth / 2), capY + (circleLineWidth / 2), xMin, xMax, yMin, yMax);
 801217e:	9214      	str	r2, [sp, #80]	; 0x50
 8012180:	4453      	add	r3, sl
 8012182:	aa1a      	add	r2, sp, #104	; 0x68
 8012184:	f842 3d14 	str.w	r3, [r2, #-20]!
 8012188:	9502      	str	r5, [sp, #8]
 801218a:	9701      	str	r7, [sp, #4]
 801218c:	9600      	str	r6, [sp, #0]
 801218e:	9b05      	ldr	r3, [sp, #20]
 8012190:	a914      	add	r1, sp, #80	; 0x50
 8012192:	4620      	mov	r0, r4
 8012194:	f7ff fc9e 	bl	8011ad4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8012198:	9906      	ldr	r1, [sp, #24]
        i = Q5(((i % _360) + _360) % _360);
 801219a:	4a3b      	ldr	r2, [pc, #236]	; (8012288 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 801219c:	fb82 0301 	smull	r0, r3, r2, r1
 80121a0:	1858      	adds	r0, r3, r1
 80121a2:	17cb      	asrs	r3, r1, #31
 80121a4:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 80121a8:	f44f 5c34 	mov.w	ip, #11520	; 0x2d00
 80121ac:	fb0c 1313 	mls	r3, ip, r3, r1
 80121b0:	4463      	add	r3, ip
 80121b2:	fb82 1203 	smull	r1, r2, r2, r3
 80121b6:	441a      	add	r2, r3
 80121b8:	17d8      	asrs	r0, r3, #31
 80121ba:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 80121be:	fb0c 3010 	mls	r0, ip, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80121c2:	4243      	negs	r3, r0
 80121c4:	f000 011f 	and.w	r1, r0, #31
 80121c8:	f003 031f 	and.w	r3, r3, #31
 80121cc:	bf58      	it	pl
 80121ce:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80121d0:	4602      	mov	r2, r0
 80121d2:	2800      	cmp	r0, #0
 80121d4:	db78      	blt.n	80122c8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4e8>
 80121d6:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 80121da:	482b      	ldr	r0, [pc, #172]	; (8012288 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 80121dc:	fb80 e30c 	smull	lr, r3, r0, ip
 80121e0:	eb03 0e0c 	add.w	lr, r3, ip
 80121e4:	17d3      	asrs	r3, r2, #31
 80121e6:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 80121ea:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 80121ee:	fb0e c313 	mls	r3, lr, r3, ip
 80121f2:	4473      	add	r3, lr
 80121f4:	fb80 2003 	smull	r2, r0, r0, r3
 80121f8:	4418      	add	r0, r3
 80121fa:	17da      	asrs	r2, r3, #31
 80121fc:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012200:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8012204:	2a5a      	cmp	r2, #90	; 0x5a
 8012206:	dd62      	ble.n	80122ce <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ee>
        if (i <= 180)
 8012208:	2ab4      	cmp	r2, #180	; 0xb4
 801220a:	f340 80b9 	ble.w	8012380 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x5a0>
        if (i <= 270)
 801220e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012212:	f340 80bb 	ble.w	801238c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x5ac>
        return Q15(-int32_t(sineTable[360 - i]));
 8012216:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801221a:	4b1c      	ldr	r3, [pc, #112]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 801221c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012220:	4240      	negs	r0, r0
 8012222:	e057      	b.n	80122d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4f4>
            return Q15(sineTable[180 - i]);
 8012224:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012228:	4b18      	ldr	r3, [pc, #96]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 801222a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801222e:	e77c      	b.n	801212a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x34a>
            return Q15(-int32_t(sineTable[i - 180]));
 8012230:	3ab4      	subs	r2, #180	; 0xb4
 8012232:	4b16      	ldr	r3, [pc, #88]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012234:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012238:	4240      	negs	r0, r0
 801223a:	e776      	b.n	801212a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x34a>
        Q15 sineHigh = sine(i.to<int>() + 1);
 801223c:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8012240:	4a11      	ldr	r2, [pc, #68]	; (8012288 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8012242:	fb82 030c 	smull	r0, r3, r2, ip
 8012246:	eb03 000c 	add.w	r0, r3, ip
 801224a:	ea4f 73ec 	mov.w	r3, ip, asr #31
 801224e:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012252:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8012256:	fb0e c313 	mls	r3, lr, r3, ip
 801225a:	4473      	add	r3, lr
 801225c:	fb82 0203 	smull	r0, r2, r2, r3
 8012260:	18d0      	adds	r0, r2, r3
 8012262:	17da      	asrs	r2, r3, #31
 8012264:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012268:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 801226c:	2a5a      	cmp	r2, #90	; 0x5a
 801226e:	dd0f      	ble.n	8012290 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4b0>
        if (i <= 180)
 8012270:	2ab4      	cmp	r2, #180	; 0xb4
 8012272:	dd19      	ble.n	80122a8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4c8>
        if (i <= 270)
 8012274:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012278:	dd1c      	ble.n	80122b4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4d4>
        return Q15(-int32_t(sineTable[360 - i]));
 801227a:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801227e:	4b03      	ldr	r3, [pc, #12]	; (801228c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012280:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012284:	4240      	negs	r0, r0
 8012286:	e006      	b.n	8012296 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4b6>
 8012288:	b60b60b7 	.word	0xb60b60b7
 801228c:	08024ae8 	.word	0x08024ae8
            return Q15(sineTable[i]);
 8012290:	4ba5      	ldr	r3, [pc, #660]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012292:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012296:	ab09      	add	r3, sp, #36	; 0x24
 8012298:	2220      	movs	r2, #32
 801229a:	eba0 000a 	sub.w	r0, r0, sl
 801229e:	f00d f838 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 80122a2:	eb0a 0100 	add.w	r1, sl, r0
 80122a6:	e745      	b.n	8012134 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x354>
            return Q15(sineTable[180 - i]);
 80122a8:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80122ac:	4b9e      	ldr	r3, [pc, #632]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 80122ae:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80122b2:	e7f0      	b.n	8012296 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4b6>
            return Q15(-int32_t(sineTable[i - 180]));
 80122b4:	3ab4      	subs	r2, #180	; 0xb4
 80122b6:	4b9c      	ldr	r3, [pc, #624]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 80122b8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80122bc:	4240      	negs	r0, r0
 80122be:	e7ea      	b.n	8012296 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4b6>
            return Q5(v / i);
 80122c0:	3301      	adds	r3, #1
 80122c2:	e744      	b.n	801214e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x36e>
 80122c4:	3301      	adds	r3, #1
 80122c6:	e757      	b.n	8012178 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x398>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80122c8:	f100 021f 	add.w	r2, r0, #31
 80122cc:	e783      	b.n	80121d6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x3f6>
            return Q15(sineTable[i]);
 80122ce:	4b96      	ldr	r3, [pc, #600]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 80122d0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80122d4:	4681      	mov	r9, r0
        if (fraction == 0)
 80122d6:	2900      	cmp	r1, #0
 80122d8:	d15e      	bne.n	8012398 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x5b8>
            return sineLow;
 80122da:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80122dc:	ab09      	add	r3, sp, #36	; 0x24
 80122de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80122e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80122e4:	f00d f815 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v + q5.v);
 80122e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80122ea:	eb03 0900 	add.w	r9, r3, r0
 80122ee:	9906      	ldr	r1, [sp, #24]
            return Q5(v - q5.v);
 80122f0:	f5c1 6134 	rsb	r1, r1, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 80122f4:	4a8d      	ldr	r2, [pc, #564]	; (801252c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x74c>)
 80122f6:	fb82 0301 	smull	r0, r3, r2, r1
 80122fa:	1858      	adds	r0, r3, r1
 80122fc:	17cb      	asrs	r3, r1, #31
 80122fe:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8012302:	f44f 5034 	mov.w	r0, #11520	; 0x2d00
 8012306:	fb00 1313 	mls	r3, r0, r3, r1
 801230a:	4403      	add	r3, r0
 801230c:	fb82 1203 	smull	r1, r2, r2, r3
 8012310:	18d1      	adds	r1, r2, r3
 8012312:	17da      	asrs	r2, r3, #31
 8012314:	ebc2 3261 	rsb	r2, r2, r1, asr #13
 8012318:	fb00 3212 	mls	r2, r0, r2, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 801231c:	4253      	negs	r3, r2
 801231e:	f002 011f 	and.w	r1, r2, #31
 8012322:	f003 031f 	and.w	r3, r3, #31
 8012326:	bf58      	it	pl
 8012328:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801232a:	4610      	mov	r0, r2
 801232c:	2a00      	cmp	r2, #0
 801232e:	db72      	blt.n	8012416 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x636>
 8012330:	ea4f 1c60 	mov.w	ip, r0, asr #5
        i = ((i % 360) + 360) % 360;
 8012334:	4a7d      	ldr	r2, [pc, #500]	; (801252c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x74c>)
 8012336:	fb82 e30c 	smull	lr, r3, r2, ip
 801233a:	eb03 0e0c 	add.w	lr, r3, ip
 801233e:	17c3      	asrs	r3, r0, #31
 8012340:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8012344:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8012348:	fb00 c313 	mls	r3, r0, r3, ip
 801234c:	4403      	add	r3, r0
 801234e:	fb82 e203 	smull	lr, r2, r2, r3
 8012352:	eb02 0e03 	add.w	lr, r2, r3
 8012356:	17da      	asrs	r2, r3, #31
 8012358:	ebc2 222e 	rsb	r2, r2, lr, asr #8
 801235c:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012360:	2a5a      	cmp	r2, #90	; 0x5a
 8012362:	dd5b      	ble.n	801241c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x63c>
        if (i <= 180)
 8012364:	2ab4      	cmp	r2, #180	; 0xb4
 8012366:	f340 8091 	ble.w	801248c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x6ac>
        if (i <= 270)
 801236a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 801236e:	f340 8093 	ble.w	8012498 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x6b8>
        return Q15(-int32_t(sineTable[360 - i]));
 8012372:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012376:	4b6c      	ldr	r3, [pc, #432]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012378:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801237c:	4240      	negs	r0, r0
 801237e:	e050      	b.n	8012422 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x642>
            return Q15(sineTable[180 - i]);
 8012380:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012384:	4b68      	ldr	r3, [pc, #416]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012386:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801238a:	e7a3      	b.n	80122d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4f4>
            return Q15(-int32_t(sineTable[i - 180]));
 801238c:	3ab4      	subs	r2, #180	; 0xb4
 801238e:	4b66      	ldr	r3, [pc, #408]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012390:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012394:	4240      	negs	r0, r0
 8012396:	e79d      	b.n	80122d4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4f4>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012398:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 801239c:	4a63      	ldr	r2, [pc, #396]	; (801252c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x74c>)
 801239e:	fb82 030c 	smull	r0, r3, r2, ip
 80123a2:	eb03 000c 	add.w	r0, r3, ip
 80123a6:	ea4f 73ec 	mov.w	r3, ip, asr #31
 80123aa:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80123ae:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80123b2:	fb00 c313 	mls	r3, r0, r3, ip
 80123b6:	4403      	add	r3, r0
 80123b8:	fb82 c203 	smull	ip, r2, r2, r3
 80123bc:	eb02 0c03 	add.w	ip, r2, r3
 80123c0:	17da      	asrs	r2, r3, #31
 80123c2:	ebc2 222c 	rsb	r2, r2, ip, asr #8
 80123c6:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 80123ca:	2a5a      	cmp	r2, #90	; 0x5a
 80123cc:	dd0b      	ble.n	80123e6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x606>
        if (i <= 180)
 80123ce:	2ab4      	cmp	r2, #180	; 0xb4
 80123d0:	dd15      	ble.n	80123fe <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x61e>
        if (i <= 270)
 80123d2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80123d6:	dd18      	ble.n	801240a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x62a>
        return Q15(-int32_t(sineTable[360 - i]));
 80123d8:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80123dc:	4b52      	ldr	r3, [pc, #328]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 80123de:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80123e2:	4240      	negs	r0, r0
 80123e4:	e002      	b.n	80123ec <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x60c>
            return Q15(sineTable[i]);
 80123e6:	4b50      	ldr	r3, [pc, #320]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 80123e8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80123ec:	ab09      	add	r3, sp, #36	; 0x24
 80123ee:	2220      	movs	r2, #32
 80123f0:	eba0 0009 	sub.w	r0, r0, r9
 80123f4:	f00c ff8d 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 80123f8:	eb09 0100 	add.w	r1, r9, r0
 80123fc:	e76e      	b.n	80122dc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4fc>
            return Q15(sineTable[180 - i]);
 80123fe:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012402:	4b49      	ldr	r3, [pc, #292]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012404:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012408:	e7f0      	b.n	80123ec <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x60c>
            return Q15(-int32_t(sineTable[i - 180]));
 801240a:	3ab4      	subs	r2, #180	; 0xb4
 801240c:	4b46      	ldr	r3, [pc, #280]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 801240e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012412:	4240      	negs	r0, r0
 8012414:	e7ea      	b.n	80123ec <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x60c>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012416:	f102 001f 	add.w	r0, r2, #31
 801241a:	e789      	b.n	8012330 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x550>
            return Q15(sineTable[i]);
 801241c:	4b42      	ldr	r3, [pc, #264]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 801241e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012422:	4682      	mov	sl, r0
        if (fraction == 0)
 8012424:	2900      	cmp	r1, #0
 8012426:	d13d      	bne.n	80124a4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x6c4>
            return sineLow;
 8012428:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 801242a:	ab09      	add	r3, sp, #36	; 0x24
 801242c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012430:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8012432:	f00c ff6e 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v - q5.v);
 8012436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012438:	eba3 0a00 	sub.w	sl, r3, r0
            return Q5(v / i);
 801243c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801243e:	2b00      	cmp	r3, #0
 8012440:	db6e      	blt.n	8012520 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x740>
 8012442:	105b      	asrs	r3, r3, #1
            return Q5(v - q5.v);
 8012444:	eba9 0203 	sub.w	r2, r9, r3
        updateMinMaxXY(capX - (circleLineWidth / 2), capY - (circleLineWidth / 2), xMin, xMax, yMin, yMax);
 8012448:	9216      	str	r2, [sp, #88]	; 0x58
 801244a:	ebaa 0303 	sub.w	r3, sl, r3
 801244e:	aa1a      	add	r2, sp, #104	; 0x68
 8012450:	f842 3d0c 	str.w	r3, [r2, #-12]!
 8012454:	9502      	str	r5, [sp, #8]
 8012456:	9701      	str	r7, [sp, #4]
 8012458:	9600      	str	r6, [sp, #0]
 801245a:	9b05      	ldr	r3, [sp, #20]
 801245c:	a916      	add	r1, sp, #88	; 0x58
 801245e:	4620      	mov	r0, r4
 8012460:	f7ff fb38 	bl	8011ad4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
            return Q5(v / i);
 8012464:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012466:	2b00      	cmp	r3, #0
 8012468:	db5c      	blt.n	8012524 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x744>
 801246a:	105b      	asrs	r3, r3, #1
            return Q5(v + q5.v);
 801246c:	eb03 0209 	add.w	r2, r3, r9
        updateMinMaxXY(capX + (circleLineWidth / 2), capY + (circleLineWidth / 2), xMin, xMax, yMin, yMax);
 8012470:	9218      	str	r2, [sp, #96]	; 0x60
 8012472:	4453      	add	r3, sl
 8012474:	aa1a      	add	r2, sp, #104	; 0x68
 8012476:	f842 3d04 	str.w	r3, [r2, #-4]!
 801247a:	9502      	str	r5, [sp, #8]
 801247c:	9701      	str	r7, [sp, #4]
 801247e:	9600      	str	r6, [sp, #0]
 8012480:	9b05      	ldr	r3, [sp, #20]
 8012482:	a918      	add	r1, sp, #96	; 0x60
 8012484:	4620      	mov	r0, r4
 8012486:	f7ff fb25 	bl	8011ad4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
}
 801248a:	e51c      	b.n	8011ec6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xe6>
            return Q15(sineTable[180 - i]);
 801248c:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012490:	4b25      	ldr	r3, [pc, #148]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012492:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012496:	e7c4      	b.n	8012422 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x642>
            return Q15(-int32_t(sineTable[i - 180]));
 8012498:	3ab4      	subs	r2, #180	; 0xb4
 801249a:	4b23      	ldr	r3, [pc, #140]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 801249c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80124a0:	4240      	negs	r0, r0
 80124a2:	e7be      	b.n	8012422 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x642>
        Q15 sineHigh = sine(i.to<int>() + 1);
 80124a4:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 80124a8:	4a20      	ldr	r2, [pc, #128]	; (801252c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x74c>)
 80124aa:	fb82 030c 	smull	r0, r3, r2, ip
 80124ae:	eb03 000c 	add.w	r0, r3, ip
 80124b2:	ea4f 73ec 	mov.w	r3, ip, asr #31
 80124b6:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80124ba:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 80124be:	fb0e c313 	mls	r3, lr, r3, ip
 80124c2:	4473      	add	r3, lr
 80124c4:	fb82 0203 	smull	r0, r2, r2, r3
 80124c8:	18d0      	adds	r0, r2, r3
 80124ca:	17da      	asrs	r2, r3, #31
 80124cc:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80124d0:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 80124d4:	2a5a      	cmp	r2, #90	; 0x5a
 80124d6:	dd0b      	ble.n	80124f0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x710>
        if (i <= 180)
 80124d8:	2ab4      	cmp	r2, #180	; 0xb4
 80124da:	dd15      	ble.n	8012508 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x728>
        if (i <= 270)
 80124dc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80124e0:	dd18      	ble.n	8012514 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x734>
        return Q15(-int32_t(sineTable[360 - i]));
 80124e2:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80124e6:	4b10      	ldr	r3, [pc, #64]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 80124e8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80124ec:	4240      	negs	r0, r0
 80124ee:	e002      	b.n	80124f6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x716>
            return Q15(sineTable[i]);
 80124f0:	4b0d      	ldr	r3, [pc, #52]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 80124f2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80124f6:	ab09      	add	r3, sp, #36	; 0x24
 80124f8:	2220      	movs	r2, #32
 80124fa:	eba0 000a 	sub.w	r0, r0, sl
 80124fe:	f00c ff08 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8012502:	eb0a 0100 	add.w	r1, sl, r0
 8012506:	e790      	b.n	801242a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x64a>
            return Q15(sineTable[180 - i]);
 8012508:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801250c:	4b06      	ldr	r3, [pc, #24]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 801250e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012512:	e7f0      	b.n	80124f6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x716>
            return Q15(-int32_t(sineTable[i - 180]));
 8012514:	3ab4      	subs	r2, #180	; 0xb4
 8012516:	4b04      	ldr	r3, [pc, #16]	; (8012528 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012518:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801251c:	4240      	negs	r0, r0
 801251e:	e7ea      	b.n	80124f6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x716>
            return Q5(v / i);
 8012520:	3301      	adds	r3, #1
 8012522:	e78e      	b.n	8012442 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x662>
 8012524:	3301      	adds	r3, #1
 8012526:	e7a0      	b.n	801246a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x68a>
 8012528:	08024ae8 	.word	0x08024ae8
 801252c:	b60b60b7 	.word	0xb60b60b7

08012530 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
{
 8012530:	b530      	push	{r4, r5, lr}
 8012532:	b089      	sub	sp, #36	; 0x24
 8012534:	4604      	mov	r4, r0
 8012536:	4608      	mov	r0, r1
 8012538:	4611      	mov	r1, r2
 801253a:	461a      	mov	r2, r3
        return rect.width;
 801253c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012540:	015b      	lsls	r3, r3, #5
    CWRUtil::Q5 xMin = CWRUtil::toQ5<int>(getWidth());
 8012542:	9307      	str	r3, [sp, #28]
        explicit Q5(int i) : v(i) { }
 8012544:	2500      	movs	r5, #0
    CWRUtil::Q5 xMax = CWRUtil::toQ5<int>(0);
 8012546:	9506      	str	r5, [sp, #24]
        return rect.height;
 8012548:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801254c:	015b      	lsls	r3, r3, #5
    CWRUtil::Q5 yMin = CWRUtil::toQ5<int>(getHeight());
 801254e:	9305      	str	r3, [sp, #20]
    CWRUtil::Q5 yMax = CWRUtil::toQ5<int>(0);
 8012550:	9504      	str	r5, [sp, #16]
    calculateMinimalRect(arcStart, arcEnd, xMin, xMax, yMin, yMax);
 8012552:	ab04      	add	r3, sp, #16
 8012554:	9302      	str	r3, [sp, #8]
 8012556:	ab05      	add	r3, sp, #20
 8012558:	9301      	str	r3, [sp, #4]
 801255a:	ab06      	add	r3, sp, #24
 801255c:	9300      	str	r3, [sp, #0]
 801255e:	ab07      	add	r3, sp, #28
 8012560:	f7ff fc3e 	bl	8011de0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012564:	9b07      	ldr	r3, [sp, #28]
 8012566:	42ab      	cmp	r3, r5
 8012568:	db20      	blt.n	80125ac <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x7c>
    return Rect(xMin.to<int>() - 1, yMin.to<int>() - 1,
 801256a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 801256e:	1e58      	subs	r0, r3, #1
                xMax.to<int>() - xMin.to<int>() + 2, yMax.to<int>() - yMin.to<int>() + 2);
 8012570:	b200      	sxth	r0, r0
 8012572:	9a05      	ldr	r2, [sp, #20]
 8012574:	2a00      	cmp	r2, #0
 8012576:	db1b      	blt.n	80125b0 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x80>
    return Rect(xMin.to<int>() - 1, yMin.to<int>() - 1,
 8012578:	f3c2 124f 	ubfx	r2, r2, #5, #16
 801257c:	1e51      	subs	r1, r2, #1
                xMax.to<int>() - xMin.to<int>() + 2, yMax.to<int>() - yMin.to<int>() + 2);
 801257e:	b209      	sxth	r1, r1
 8012580:	9d06      	ldr	r5, [sp, #24]
 8012582:	2d00      	cmp	r5, #0
 8012584:	db16      	blt.n	80125b4 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x84>
 8012586:	ebc3 1365 	rsb	r3, r3, r5, asr #5
 801258a:	b29b      	uxth	r3, r3
 801258c:	3302      	adds	r3, #2
 801258e:	b21b      	sxth	r3, r3
 8012590:	9d04      	ldr	r5, [sp, #16]
 8012592:	2d00      	cmp	r5, #0
 8012594:	db10      	blt.n	80125b8 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x88>
 8012596:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 801259a:	b292      	uxth	r2, r2
 801259c:	3202      	adds	r2, #2
        this->x = x;
 801259e:	8020      	strh	r0, [r4, #0]
        this->y = y;
 80125a0:	8061      	strh	r1, [r4, #2]
        this->width = width;
 80125a2:	80a3      	strh	r3, [r4, #4]
        this->height = height;
 80125a4:	80e2      	strh	r2, [r4, #6]
}
 80125a6:	4620      	mov	r0, r4
 80125a8:	b009      	add	sp, #36	; 0x24
 80125aa:	bd30      	pop	{r4, r5, pc}
 80125ac:	331f      	adds	r3, #31
 80125ae:	e7dc      	b.n	801256a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x3a>
 80125b0:	321f      	adds	r2, #31
 80125b2:	e7e1      	b.n	8012578 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x48>
 80125b4:	351f      	adds	r5, #31
 80125b6:	e7e6      	b.n	8012586 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x56>
 80125b8:	351f      	adds	r5, #31
 80125ba:	e7ec      	b.n	8012596 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x66>

080125bc <_ZNK8touchgfx6Circle14getMinimalRectEv>:
{
 80125bc:	b510      	push	{r4, lr}
 80125be:	4604      	mov	r4, r0
    return getMinimalRect(circleArcAngleStart, circleArcAngleEnd);
 80125c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80125c2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80125c4:	f7ff ffb4 	bl	8012530 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
}
 80125c8:	4620      	mov	r0, r4
 80125ca:	bd10      	pop	{r4, pc}

080125cc <_ZN8touchgfx3absIiEET_S1_>:
    if (d < 0)
 80125cc:	2800      	cmp	r0, #0
 80125ce:	db00      	blt.n	80125d2 <_ZN8touchgfx3absIiEET_S1_+0x6>
}
 80125d0:	4770      	bx	lr
        return -d;
 80125d2:	4240      	negs	r0, r0
 80125d4:	e7fc      	b.n	80125d0 <_ZN8touchgfx3absIiEET_S1_+0x4>

080125d6 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>:
    }
    return getMinimalRect(minAngle, maxAngle);
}

touchgfx::Rect Circle::getMinimalRectForUpdatedEndAngle(CWRUtil::Q5& endAngleQ5)
{
 80125d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125d8:	b083      	sub	sp, #12
 80125da:	4607      	mov	r7, r0
 80125dc:	460c      	mov	r4, r1
        explicit Q5(int i) : v(i) { }
 80125de:	2300      	movs	r3, #0
 80125e0:	9300      	str	r3, [sp, #0]
            return v;
 80125e2:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 80125e4:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    CWRUtil::Q5 minAngle = CWRUtil::Q5(0); // Unused default value
    CWRUtil::Q5 maxAngle = CWRUtil::Q5(0); // Unused default value
    if (circleArcAngleStart < circleArcAngleEnd)
 80125e6:	42ae      	cmp	r6, r5
 80125e8:	da45      	bge.n	8012676 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xa0>
 80125ea:	6813      	ldr	r3, [r2, #0]
    {
        // start is smaller than end
        if (endAngleQ5 > circleArcAngleEnd)
 80125ec:	42ab      	cmp	r3, r5
 80125ee:	dd21      	ble.n	8012634 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x5e>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80125f0:	462b      	mov	r3, r5
 80125f2:	2d00      	cmp	r5, #0
 80125f4:	db19      	blt.n	801262a <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x54>
 80125f6:	115b      	asrs	r3, r3, #5
        {
            // end moved even higher
            minAngle = CWRUtil::toQ5<int>(circleArcAngleEnd.to<int>() / circleArcIncrement * circleArcIncrement);
 80125f8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80125fc:	fb93 f3f1 	sdiv	r3, r3, r1
 8012600:	fb03 f301 	mul.w	r3, r3, r1
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012604:	015b      	lsls	r3, r3, #5
 8012606:	9301      	str	r3, [sp, #4]
            minAngle = MAX(minAngle, circleArcAngleStart);
 8012608:	429e      	cmp	r6, r3
 801260a:	db11      	blt.n	8012630 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x5a>
 801260c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	9301      	str	r3, [sp, #4]
            maxAngle = endAngleQ5;
 8012614:	6813      	ldr	r3, [r2, #0]
 8012616:	9300      	str	r3, [sp, #0]
            // end moved past start
            minAngle = circleArcAngleEnd;
            maxAngle = endAngleQ5;
        }
    }
    return getMinimalRect(minAngle, maxAngle);
 8012618:	9b00      	ldr	r3, [sp, #0]
 801261a:	9a01      	ldr	r2, [sp, #4]
 801261c:	4621      	mov	r1, r4
 801261e:	4638      	mov	r0, r7
 8012620:	f7ff ff86 	bl	8012530 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
}
 8012624:	4638      	mov	r0, r7
 8012626:	b003      	add	sp, #12
 8012628:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801262a:	f105 031f 	add.w	r3, r5, #31
 801262e:	e7e2      	b.n	80125f6 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x20>
            minAngle = MAX(minAngle, circleArcAngleStart);
 8012630:	ab01      	add	r3, sp, #4
 8012632:	e7ed      	b.n	8012610 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x3a>
        else if (endAngleQ5 > circleArcAngleStart)
 8012634:	42b3      	cmp	r3, r6
 8012636:	dd19      	ble.n	801266c <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x96>
 8012638:	461a      	mov	r2, r3
 801263a:	2b00      	cmp	r3, #0
 801263c:	db11      	blt.n	8012662 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x8c>
 801263e:	1153      	asrs	r3, r2, #5
            minAngle = CWRUtil::toQ5<int>(endAngleQ5.to<int>() / circleArcIncrement * circleArcIncrement);
 8012640:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8012644:	fb93 f3f2 	sdiv	r3, r3, r2
 8012648:	fb03 f302 	mul.w	r3, r3, r2
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801264c:	015b      	lsls	r3, r3, #5
 801264e:	9301      	str	r3, [sp, #4]
            minAngle = MAX(minAngle, circleArcAngleStart); // No need to go lower than start
 8012650:	429e      	cmp	r6, r3
 8012652:	db09      	blt.n	8012668 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x92>
 8012654:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	9301      	str	r3, [sp, #4]
            maxAngle = circleArcAngleEnd;
 801265c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801265e:	9300      	str	r3, [sp, #0]
 8012660:	e7da      	b.n	8012618 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012662:	f103 021f 	add.w	r2, r3, #31
 8012666:	e7ea      	b.n	801263e <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x68>
            minAngle = MAX(minAngle, circleArcAngleStart); // No need to go lower than start
 8012668:	ab01      	add	r3, sp, #4
 801266a:	e7f5      	b.n	8012658 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x82>
            minAngle = endAngleQ5;
 801266c:	6813      	ldr	r3, [r2, #0]
 801266e:	9301      	str	r3, [sp, #4]
            maxAngle = circleArcAngleEnd;
 8012670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	e7d0      	b.n	8012618 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>
        CWRUtil::Q5 circleArcIncrementQ5 = CWRUtil::toQ5<int>(circleArcIncrement);
 8012676:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801267a:	0140      	lsls	r0, r0, #5
            return v;
 801267c:	6813      	ldr	r3, [r2, #0]
        if (endAngleQ5 < circleArcAngleEnd)
 801267e:	429d      	cmp	r5, r3
 8012680:	dd17      	ble.n	80126b2 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xdc>
            minAngle = endAngleQ5;
 8012682:	9301      	str	r3, [sp, #4]
            maxAngle = CWRUtil::Q5(ROUNDUP((int)circleArcAngleEnd, (int)circleArcIncrementQ5));
 8012684:	b158      	cbz	r0, 801269e <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xc8>
 8012686:	f7ff ffa1 	bl	80125cc <_ZN8touchgfx3absIiEET_S1_>
 801268a:	fb95 f3f0 	sdiv	r3, r5, r0
 801268e:	fb00 5313 	mls	r3, r0, r3, r5
 8012692:	1ac3      	subs	r3, r0, r3
 8012694:	fb93 f2f0 	sdiv	r2, r3, r0
 8012698:	fb00 3012 	mls	r0, r0, r2, r3
 801269c:	4405      	add	r5, r0
 801269e:	9500      	str	r5, [sp, #0]
            maxAngle = MIN(maxAngle, circleArcAngleStart); // No need to go higher than start
 80126a0:	42b5      	cmp	r5, r6
 80126a2:	db04      	blt.n	80126ae <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xd8>
 80126a4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	9300      	str	r3, [sp, #0]
 80126ac:	e7b4      	b.n	8012618 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>
 80126ae:	466b      	mov	r3, sp
 80126b0:	e7fa      	b.n	80126a8 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xd2>
        else if (endAngleQ5 < circleArcAngleStart)
 80126b2:	429e      	cmp	r6, r3
 80126b4:	dd1b      	ble.n	80126ee <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x118>
            minAngle = circleArcAngleEnd;
 80126b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80126b8:	9301      	str	r3, [sp, #4]
            maxAngle = CWRUtil::Q5(ROUNDUP((int)endAngleQ5, (int)circleArcIncrementQ5));
 80126ba:	b940      	cbnz	r0, 80126ce <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xf8>
 80126bc:	6813      	ldr	r3, [r2, #0]
 80126be:	9300      	str	r3, [sp, #0]
            maxAngle = MIN(maxAngle, circleArcAngleStart);
 80126c0:	42b3      	cmp	r3, r6
 80126c2:	db12      	blt.n	80126ea <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x114>
 80126c4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	e7a4      	b.n	8012618 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>
 80126ce:	6815      	ldr	r5, [r2, #0]
            maxAngle = CWRUtil::Q5(ROUNDUP((int)endAngleQ5, (int)circleArcIncrementQ5));
 80126d0:	f7ff ff7c 	bl	80125cc <_ZN8touchgfx3absIiEET_S1_>
 80126d4:	fb95 f2f0 	sdiv	r2, r5, r0
 80126d8:	fb00 5312 	mls	r3, r0, r2, r5
 80126dc:	1ac2      	subs	r2, r0, r3
 80126de:	fb92 f3f0 	sdiv	r3, r2, r0
 80126e2:	fb00 2313 	mls	r3, r0, r3, r2
 80126e6:	442b      	add	r3, r5
 80126e8:	e7e9      	b.n	80126be <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xe8>
            maxAngle = MIN(maxAngle, circleArcAngleStart);
 80126ea:	466b      	mov	r3, sp
 80126ec:	e7ec      	b.n	80126c8 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xf2>
            minAngle = circleArcAngleEnd;
 80126ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80126f0:	9301      	str	r3, [sp, #4]
            maxAngle = endAngleQ5;
 80126f2:	6813      	ldr	r3, [r2, #0]
 80126f4:	9300      	str	r3, [sp, #0]
 80126f6:	e78f      	b.n	8012618 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>

080126f8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
{
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	b0c1      	sub	sp, #260	; 0x104
 80126fe:	4604      	mov	r4, r0
 8012700:	460f      	mov	r7, r1
    CWRUtil::Q5 arcStart = circleArcAngleStart;
 8012702:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012704:	9239      	str	r2, [sp, #228]	; 0xe4
    CWRUtil::Q5 arcEnd = circleArcAngleEnd;
 8012706:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012708:	9338      	str	r3, [sp, #224]	; 0xe0
        explicit Q5(int i) : v(i) { }
 801270a:	f44f 5934 	mov.w	r9, #11520	; 0x2d00
    if (arcStart > arcEnd)
 801270e:	429a      	cmp	r2, r3
 8012710:	dd03      	ble.n	801271a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22>
        CWRUtil::Q5 tmp = arcStart;
 8012712:	4613      	mov	r3, r2
        arcStart = arcEnd;
 8012714:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8012716:	9239      	str	r2, [sp, #228]	; 0xe4
        arcEnd = tmp;
 8012718:	9338      	str	r3, [sp, #224]	; 0xe0
            return Q5(v - q5.v);
 801271a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 801271c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801271e:	1a9b      	subs	r3, r3, r2
    if ((arcEnd - arcStart) >= _360)
 8012720:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8012724:	db03      	blt.n	801272e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x36>
        explicit Q5(int i) : v(i) { }
 8012726:	2300      	movs	r3, #0
        arcStart = CWRUtil::toQ5<int>(0);
 8012728:	9339      	str	r3, [sp, #228]	; 0xe4
        arcEnd = _360;
 801272a:	f8cd 90e0 	str.w	r9, [sp, #224]	; 0xe0
            return v;
 801272e:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
    if (circleLineWidth != 0)
 8012732:	f1b8 0f00 	cmp.w	r8, #0
 8012736:	f000 8084 	beq.w	8012842 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x14a>
        int32_t x1 = int(CWRUtil::toQ5(invalidatedArea.x)); // Take the corners of the invalidated area
 801273a:	f9b7 0000 	ldrsh.w	r0, [r7]
        return x + width;
 801273e:	88be      	ldrh	r6, [r7, #4]
 8012740:	fa16 f680 	uxtah	r6, r6, r0
 8012744:	b236      	sxth	r6, r6
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012746:	0176      	lsls	r6, r6, #5
        int32_t y1 = int(CWRUtil::toQ5(invalidatedArea.y));
 8012748:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 801274c:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        return y + height;
 8012750:	88fb      	ldrh	r3, [r7, #6]
 8012752:	fa13 f585 	uxtah	r5, r3, r5
 8012756:	b22d      	sxth	r5, r5
 8012758:	016d      	lsls	r5, r5, #5
            return v;
 801275a:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
        int32_t dx1 = abs(int(circleCenterX) - x1); // Find distances between each corner and circle center
 801275e:	ebab 1040 	sub.w	r0, fp, r0, lsl #5
 8012762:	f7fd f815 	bl	800f790 <_ZN8touchgfx3absIlEET_S1_>
 8012766:	9003      	str	r0, [sp, #12]
        int32_t dx2 = abs(int(circleCenterX) - x2);
 8012768:	ebab 0006 	sub.w	r0, fp, r6
 801276c:	f7fd f810 	bl	800f790 <_ZN8touchgfx3absIlEET_S1_>
 8012770:	4606      	mov	r6, r0
 8012772:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
        int32_t dy1 = abs(int(circleCenterY) - y1);
 8012776:	ebab 000a 	sub.w	r0, fp, sl
 801277a:	f7fd f809 	bl	800f790 <_ZN8touchgfx3absIlEET_S1_>
 801277e:	4682      	mov	sl, r0
        int32_t dy2 = abs(int(circleCenterY) - y2);
 8012780:	ebab 0005 	sub.w	r0, fp, r5
 8012784:	f7fd f804 	bl	800f790 <_ZN8touchgfx3absIlEET_S1_>
        int32_t dx = CWRUtil::Q5(MAX(dx1, dx2)).to<int>() + 1; // Largest hor/vert distance (round up)
 8012788:	9b03      	ldr	r3, [sp, #12]
 801278a:	42b3      	cmp	r3, r6
 801278c:	dd00      	ble.n	8012790 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x98>
 801278e:	461e      	mov	r6, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012790:	4635      	mov	r5, r6
 8012792:	2e00      	cmp	r6, #0
 8012794:	db3c      	blt.n	8012810 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x118>
 8012796:	116d      	asrs	r5, r5, #5
 8012798:	3501      	adds	r5, #1
        int32_t dy = CWRUtil::Q5(MAX(dy1, dy2)).to<int>() + 1;
 801279a:	4582      	cmp	sl, r0
 801279c:	dd00      	ble.n	80127a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xa8>
 801279e:	4650      	mov	r0, sl
 80127a0:	4603      	mov	r3, r0
 80127a2:	2800      	cmp	r0, #0
 80127a4:	db37      	blt.n	8012816 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x11e>
 80127a6:	115b      	asrs	r3, r3, #5
 80127a8:	3301      	adds	r3, #1
        int32_t dsqr = (dx * dx) + (dy * dy); // Pythagoras
 80127aa:	fb03 f303 	mul.w	r3, r3, r3
 80127ae:	fb05 3505 	mla	r5, r5, r5, r3
            return Q5(v / i);
 80127b2:	4640      	mov	r0, r8
 80127b4:	f1b8 0f00 	cmp.w	r8, #0
 80127b8:	db30      	blt.n	801281c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x124>
            return Q5(v - q5.v);
 80127ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80127bc:	eba3 0060 	sub.w	r0, r3, r0, asr #1
        int32_t rmin = ((circleRadius - (circleLineWidth / 2)) * CWRUtil::cosine((circleArcIncrement + 1) / 2)).to<int>();
 80127c0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80127c4:	3201      	adds	r2, #1
 80127c6:	1052      	asrs	r2, r2, #1
     *
     * @see sine()
     */
    static Q15 cosine(int i)
    {
        return sine(90 - i);
 80127c8:	f1c2 025a 	rsb	r2, r2, #90	; 0x5a
        i = ((i % 360) + 360) % 360;
 80127cc:	49c3      	ldr	r1, [pc, #780]	; (8012adc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 80127ce:	fb81 6302 	smull	r6, r3, r1, r2
 80127d2:	189e      	adds	r6, r3, r2
 80127d4:	17d3      	asrs	r3, r2, #31
 80127d6:	ebc3 2326 	rsb	r3, r3, r6, asr #8
 80127da:	f44f 76b4 	mov.w	r6, #360	; 0x168
 80127de:	fb06 2313 	mls	r3, r6, r3, r2
 80127e2:	4433      	add	r3, r6
 80127e4:	fb81 2103 	smull	r2, r1, r1, r3
 80127e8:	4419      	add	r1, r3
 80127ea:	17da      	asrs	r2, r3, #31
 80127ec:	ebc2 2221 	rsb	r2, r2, r1, asr #8
 80127f0:	fb06 3212 	mls	r2, r6, r2, r3
        if (i <= 90)
 80127f4:	2a5a      	cmp	r2, #90	; 0x5a
 80127f6:	dd14      	ble.n	8012822 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x12a>
        if (i <= 180)
 80127f8:	2ab4      	cmp	r2, #180	; 0xb4
 80127fa:	dd5d      	ble.n	80128b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1c0>
        if (i <= 270)
 80127fc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012800:	dd60      	ble.n	80128c4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1cc>
        return Q15(-int32_t(sineTable[360 - i]));
 8012802:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012806:	4bb6      	ldr	r3, [pc, #728]	; (8012ae0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8012808:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801280c:	4249      	negs	r1, r1
 801280e:	e00b      	b.n	8012828 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012810:	f106 051f 	add.w	r5, r6, #31
 8012814:	e7bf      	b.n	8012796 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9e>
 8012816:	f100 031f 	add.w	r3, r0, #31
 801281a:	e7c4      	b.n	80127a6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xae>
            return Q5(v / i);
 801281c:	f108 0001 	add.w	r0, r8, #1
 8012820:	e7cb      	b.n	80127ba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xc2>
            return Q15(sineTable[i]);
 8012822:	4baf      	ldr	r3, [pc, #700]	; (8012ae0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8012824:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012828:	ab07      	add	r3, sp, #28
 801282a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801282e:	f00c fd70 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012832:	2800      	cmp	r0, #0
 8012834:	db4c      	blt.n	80128d0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d8>
 8012836:	1140      	asrs	r0, r0, #5
        if (dsqr < rmin * rmin)
 8012838:	fb00 f000 	mul.w	r0, r0, r0
 801283c:	42a8      	cmp	r0, r5
 801283e:	f300 837f 	bgt.w	8012f40 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x848>
    Canvas canvas(this, invalidatedArea);
 8012842:	463a      	mov	r2, r7
 8012844:	4621      	mov	r1, r4
 8012846:	a80a      	add	r0, sp, #40	; 0x28
 8012848:	f7fe f8d2 	bl	80109f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
    CWRUtil::Q5 radius = circleRadius;
 801284c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    CWRUtil::Q5 lineWidth = circleLineWidth;
 801284e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012850:	9309      	str	r3, [sp, #36]	; 0x24
            return Q5(v * i);
 8012852:	4632      	mov	r2, r6
    if (circleLineWidth > circleRadius * 2)
 8012854:	ebb3 0f46 	cmp.w	r3, r6, lsl #1
 8012858:	dd09      	ble.n	801286e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
            return Q5(v / i);
 801285a:	4619      	mov	r1, r3
 801285c:	2b00      	cmp	r3, #0
 801285e:	db39      	blt.n	80128d4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1dc>
            return Q5(v + q5.v);
 8012860:	eb02 0261 	add.w	r2, r2, r1, asr #1
        lineWidth = (circleRadius + circleLineWidth / 2);
 8012864:	9209      	str	r2, [sp, #36]	; 0x24
            return Q5(v / i);
 8012866:	4616      	mov	r6, r2
 8012868:	2a00      	cmp	r2, #0
 801286a:	db35      	blt.n	80128d8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e0>
        radius = lineWidth / 2;
 801286c:	1076      	asrs	r6, r6, #1
    CWRUtil::Q5 arc = arcStart;
 801286e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012870:	9308      	str	r3, [sp, #32]
    CWRUtil::Q5 circleArcIncrementQ5 = CWRUtil::toQ5<int>(circleArcIncrement);
 8012872:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012876:	016d      	lsls	r5, r5, #5
 8012878:	462f      	mov	r7, r5
            return Q5(v + q5.v);
 801287a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801287c:	eb03 0246 	add.w	r2, r3, r6, lsl #1
    moveToAR2(canvas, arc, (radius * 2) + lineWidth);
 8012880:	ab40      	add	r3, sp, #256	; 0x100
 8012882:	f843 2d18 	str.w	r2, [r3, #-24]!
 8012886:	aa08      	add	r2, sp, #32
 8012888:	a90a      	add	r1, sp, #40	; 0x28
 801288a:	4620      	mov	r0, r4
 801288c:	f7fe fe5a 	bl	8011544 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
    CWRUtil::Q5 nextArc = CWRUtil::Q5(ROUNDUP(arc + CWRUtil::toQ5<int>(1), circleArcIncrementQ5));
 8012890:	bb25      	cbnz	r5, 80128dc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e4>
 8012892:	9d08      	ldr	r5, [sp, #32]
 8012894:	3520      	adds	r5, #32
            return v;
 8012896:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    while (nextArc <= arcEnd)
 8012898:	42ab      	cmp	r3, r5
 801289a:	db38      	blt.n	801290e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x216>
        arc = nextArc;
 801289c:	9508      	str	r5, [sp, #32]
            return Q5(v + q5.v);
 801289e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128a0:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        lineToAR2(canvas, arc, (radius * 2) + lineWidth);
 80128a4:	ab40      	add	r3, sp, #256	; 0x100
 80128a6:	f843 2d14 	str.w	r2, [r3, #-20]!
 80128aa:	aa08      	add	r2, sp, #32
 80128ac:	a90a      	add	r1, sp, #40	; 0x28
 80128ae:	4620      	mov	r0, r4
 80128b0:	f7ff f904 	bl	8011abc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
        nextArc = nextArc + circleArcIncrementQ5;
 80128b4:	443d      	add	r5, r7
    while (nextArc <= arcEnd)
 80128b6:	e7ee      	b.n	8012896 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
            return Q15(sineTable[180 - i]);
 80128b8:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80128bc:	4b88      	ldr	r3, [pc, #544]	; (8012ae0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 80128be:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80128c2:	e7b1      	b.n	8012828 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
            return Q15(-int32_t(sineTable[i - 180]));
 80128c4:	3ab4      	subs	r2, #180	; 0xb4
 80128c6:	4b86      	ldr	r3, [pc, #536]	; (8012ae0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 80128c8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80128cc:	4249      	negs	r1, r1
 80128ce:	e7ab      	b.n	8012828 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80128d0:	301f      	adds	r0, #31
 80128d2:	e7b0      	b.n	8012836 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x13e>
            return Q5(v / i);
 80128d4:	1c59      	adds	r1, r3, #1
 80128d6:	e7c3      	b.n	8012860 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x168>
 80128d8:	1c56      	adds	r6, r2, #1
 80128da:	e7c7      	b.n	801286c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x174>
            return Q5(v + q5.v);
 80128dc:	9b08      	ldr	r3, [sp, #32]
 80128de:	f103 0820 	add.w	r8, r3, #32
    CWRUtil::Q5 nextArc = CWRUtil::Q5(ROUNDUP(arc + CWRUtil::toQ5<int>(1), circleArcIncrementQ5));
 80128e2:	4628      	mov	r0, r5
 80128e4:	f7ff fa76 	bl	8011dd4 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 80128e8:	4683      	mov	fp, r0
 80128ea:	4628      	mov	r0, r5
 80128ec:	f7ff fa72 	bl	8011dd4 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 80128f0:	fb98 faf0 	sdiv	sl, r8, r0
 80128f4:	fb00 8a1a 	mls	sl, r0, sl, r8
 80128f8:	ebab 0a0a 	sub.w	sl, fp, sl
 80128fc:	4628      	mov	r0, r5
 80128fe:	f7ff fa69 	bl	8011dd4 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 8012902:	fb9a f5f0 	sdiv	r5, sl, r0
 8012906:	fb00 a515 	mls	r5, r0, r5, sl
 801290a:	4445      	add	r5, r8
 801290c:	e7c3      	b.n	8012896 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
            return v;
 801290e:	9a08      	ldr	r2, [sp, #32]
    if (arc < arcEnd)
 8012910:	4293      	cmp	r3, r2
 8012912:	dc11      	bgt.n	8012938 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x240>
 8012914:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (lineWidth == CWRUtil::toQ5<int>(0))
 8012916:	bb0b      	cbnz	r3, 801295c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x264>
            return Q5(v - q5.v);
 8012918:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801291a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 801291c:	1a9b      	subs	r3, r3, r2
        if (arcEnd - arcStart < _360)
 801291e:	4599      	cmp	r9, r3
 8012920:	dc16      	bgt.n	8012950 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x258>
    return canvas.render();
 8012922:	a80a      	add	r0, sp, #40	; 0x28
 8012924:	f7fe faac 	bl	8010e80 <_ZN8touchgfx6Canvas6renderEv>
 8012928:	4604      	mov	r4, r0
    Canvas canvas(this, invalidatedArea);
 801292a:	a80a      	add	r0, sp, #40	; 0x28
 801292c:	f7fe fcb2 	bl	8011294 <_ZN8touchgfx6CanvasD1Ev>
}
 8012930:	4620      	mov	r0, r4
 8012932:	b041      	add	sp, #260	; 0x104
 8012934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return Q5(v + q5.v);
 8012938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801293a:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        lineToAR2(canvas, arcEnd, (radius * 2) + lineWidth);
 801293e:	ab40      	add	r3, sp, #256	; 0x100
 8012940:	f843 2d10 	str.w	r2, [r3, #-16]!
 8012944:	aa38      	add	r2, sp, #224	; 0xe0
 8012946:	a90a      	add	r1, sp, #40	; 0x28
 8012948:	4620      	mov	r0, r4
 801294a:	f7ff f8b7 	bl	8011abc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801294e:	e7e1      	b.n	8012914 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x21c>
            canvas.lineTo(circleCenterX, circleCenterY);
 8012950:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012952:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012954:	a80a      	add	r0, sp, #40	; 0x28
 8012956:	f7fe f9b5 	bl	8010cc4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801295a:	e7e2      	b.n	8012922 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
        CWRUtil::Q5 circleCapArcIncrementQ5 = CWRUtil::toQ5<int>(circleCapArcIncrement);
 801295c:	f894 8049 	ldrb.w	r8, [r4, #73]	; 0x49
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012960:	ea4f 1848 	mov.w	r8, r8, lsl #5
            return Q5(v - q5.v);
 8012964:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8012966:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8012968:	1a9b      	subs	r3, r3, r2
        if (arcEnd - arcStart < _360)
 801296a:	4599      	cmp	r9, r3
 801296c:	dc17      	bgt.n	801299e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a6>
            return v;
 801296e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
        if (arc < arcEnd)
 8012970:	9b08      	ldr	r3, [sp, #32]
 8012972:	429a      	cmp	r2, r3
 8012974:	f300 8171 	bgt.w	8012c5a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x562>
        nextArc = arc;
 8012978:	9d08      	ldr	r5, [sp, #32]
 801297a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
        while (nextArc >= arcStart)
 801297c:	42ab      	cmp	r3, r5
 801297e:	f300 8178 	bgt.w	8012c72 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x57a>
            arc = nextArc;
 8012982:	9508      	str	r5, [sp, #32]
            return Q5(v - q5.v);
 8012984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012986:	ebc3 0246 	rsb	r2, r3, r6, lsl #1
            lineToAR2(canvas, arc, (radius * 2) - lineWidth);
 801298a:	ab40      	add	r3, sp, #256	; 0x100
 801298c:	f843 2d08 	str.w	r2, [r3, #-8]!
 8012990:	aa08      	add	r2, sp, #32
 8012992:	a90a      	add	r1, sp, #40	; 0x28
 8012994:	4620      	mov	r0, r4
 8012996:	f7ff f891 	bl	8011abc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
            nextArc = nextArc - circleArcIncrementQ5;
 801299a:	1bed      	subs	r5, r5, r7
        while (nextArc >= arcStart)
 801299c:	e7ed      	b.n	801297a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x282>
 801299e:	9938      	ldr	r1, [sp, #224]	; 0xe0
        i = Q5(((i % _360) + _360) % _360);
 80129a0:	4a4e      	ldr	r2, [pc, #312]	; (8012adc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 80129a2:	fb82 0301 	smull	r0, r3, r2, r1
 80129a6:	1858      	adds	r0, r3, r1
 80129a8:	17cb      	asrs	r3, r1, #31
 80129aa:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 80129ae:	f44f 5534 	mov.w	r5, #11520	; 0x2d00
 80129b2:	fb05 1313 	mls	r3, r5, r3, r1
 80129b6:	442b      	add	r3, r5
 80129b8:	fb82 1203 	smull	r1, r2, r2, r3
 80129bc:	441a      	add	r2, r3
 80129be:	17d8      	asrs	r0, r3, #31
 80129c0:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 80129c4:	fb05 3010 	mls	r0, r5, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80129c8:	4243      	negs	r3, r0
 80129ca:	f000 011f 	and.w	r1, r0, #31
 80129ce:	f003 031f 	and.w	r3, r3, #31
 80129d2:	bf58      	it	pl
 80129d4:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80129d6:	4602      	mov	r2, r0
 80129d8:	2800      	cmp	r0, #0
 80129da:	db23      	blt.n	8012a24 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x32c>
 80129dc:	1155      	asrs	r5, r2, #5
        i = ((i % 360) + 360) % 360;
 80129de:	483f      	ldr	r0, [pc, #252]	; (8012adc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 80129e0:	fb80 c305 	smull	ip, r3, r0, r5
 80129e4:	eb03 0c05 	add.w	ip, r3, r5
 80129e8:	17d3      	asrs	r3, r2, #31
 80129ea:	ebc3 232c 	rsb	r3, r3, ip, asr #8
 80129ee:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 80129f2:	fb0c 5313 	mls	r3, ip, r3, r5
 80129f6:	4463      	add	r3, ip
 80129f8:	fb80 2003 	smull	r2, r0, r0, r3
 80129fc:	4418      	add	r0, r3
 80129fe:	17da      	asrs	r2, r3, #31
 8012a00:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012a04:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 8012a08:	2a5a      	cmp	r2, #90	; 0x5a
 8012a0a:	dd0e      	ble.n	8012a2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x332>
        if (i <= 180)
 8012a0c:	2ab4      	cmp	r2, #180	; 0xb4
 8012a0e:	dd69      	ble.n	8012ae4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ec>
        if (i <= 270)
 8012a10:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012a14:	dd6c      	ble.n	8012af0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3f8>
        return Q15(-int32_t(sineTable[360 - i]));
 8012a16:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012a1a:	4b31      	ldr	r3, [pc, #196]	; (8012ae0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8012a1c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012a20:	4240      	negs	r0, r0
 8012a22:	e005      	b.n	8012a30 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x338>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012a24:	f100 021f 	add.w	r2, r0, #31
 8012a28:	e7d8      	b.n	80129dc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2e4>
            return Q15(sineTable[i]);
 8012a2a:	4b2d      	ldr	r3, [pc, #180]	; (8012ae0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8012a2c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012a30:	4682      	mov	sl, r0
        if (fraction == 0)
 8012a32:	2900      	cmp	r1, #0
 8012a34:	d162      	bne.n	8012afc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x404>
            return sineLow;
 8012a36:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012a38:	4635      	mov	r5, r6
 8012a3a:	ab07      	add	r3, sp, #28
 8012a3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012a40:	4630      	mov	r0, r6
 8012a42:	f00c fc66 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v + q5.v);
 8012a46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012a48:	4418      	add	r0, r3
            CWRUtil::Q5 capX = circleCenterX + (radius * CWRUtil::sine(arcEnd));
 8012a4a:	9005      	str	r0, [sp, #20]
 8012a4c:	9938      	ldr	r1, [sp, #224]	; 0xe0
            return Q5(v - q5.v);
 8012a4e:	f5c1 6134 	rsb	r1, r1, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 8012a52:	4a22      	ldr	r2, [pc, #136]	; (8012adc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 8012a54:	fb82 0301 	smull	r0, r3, r2, r1
 8012a58:	1858      	adds	r0, r3, r1
 8012a5a:	17cb      	asrs	r3, r1, #31
 8012a5c:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8012a60:	f44f 5034 	mov.w	r0, #11520	; 0x2d00
 8012a64:	fb00 1313 	mls	r3, r0, r3, r1
 8012a68:	4403      	add	r3, r0
 8012a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8012a6e:	18d1      	adds	r1, r2, r3
 8012a70:	17da      	asrs	r2, r3, #31
 8012a72:	ebc2 3261 	rsb	r2, r2, r1, asr #13
 8012a76:	fb00 3212 	mls	r2, r0, r2, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8012a7a:	4253      	negs	r3, r2
 8012a7c:	f002 011f 	and.w	r1, r2, #31
 8012a80:	f003 031f 	and.w	r3, r3, #31
 8012a84:	bf58      	it	pl
 8012a86:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012a88:	4610      	mov	r0, r2
 8012a8a:	2a00      	cmp	r2, #0
 8012a8c:	db71      	blt.n	8012b72 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x47a>
 8012a8e:	ea4f 1c60 	mov.w	ip, r0, asr #5
        i = ((i % 360) + 360) % 360;
 8012a92:	4a12      	ldr	r2, [pc, #72]	; (8012adc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 8012a94:	fb82 e30c 	smull	lr, r3, r2, ip
 8012a98:	eb03 0e0c 	add.w	lr, r3, ip
 8012a9c:	17c3      	asrs	r3, r0, #31
 8012a9e:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8012aa2:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8012aa6:	fb00 c313 	mls	r3, r0, r3, ip
 8012aaa:	4403      	add	r3, r0
 8012aac:	fb82 e203 	smull	lr, r2, r2, r3
 8012ab0:	eb02 0e03 	add.w	lr, r2, r3
 8012ab4:	17da      	asrs	r2, r3, #31
 8012ab6:	ebc2 222e 	rsb	r2, r2, lr, asr #8
 8012aba:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012abe:	2a5a      	cmp	r2, #90	; 0x5a
 8012ac0:	dd5a      	ble.n	8012b78 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x480>
        if (i <= 180)
 8012ac2:	2ab4      	cmp	r2, #180	; 0xb4
 8012ac4:	dd7f      	ble.n	8012bc6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4ce>
        if (i <= 270)
 8012ac6:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012aca:	f340 8082 	ble.w	8012bd2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4da>
        return Q15(-int32_t(sineTable[360 - i]));
 8012ace:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012ad2:	4b03      	ldr	r3, [pc, #12]	; (8012ae0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8012ad4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012ad8:	4240      	negs	r0, r0
 8012ada:	e050      	b.n	8012b7e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x486>
 8012adc:	b60b60b7 	.word	0xb60b60b7
 8012ae0:	08024ae8 	.word	0x08024ae8
            return Q15(sineTable[180 - i]);
 8012ae4:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012ae8:	4bbf      	ldr	r3, [pc, #764]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012aea:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012aee:	e79f      	b.n	8012a30 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x338>
            return Q15(-int32_t(sineTable[i - 180]));
 8012af0:	3ab4      	subs	r2, #180	; 0xb4
 8012af2:	4bbd      	ldr	r3, [pc, #756]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012af4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012af8:	4240      	negs	r0, r0
 8012afa:	e799      	b.n	8012a30 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x338>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012afc:	3501      	adds	r5, #1
        i = ((i % 360) + 360) % 360;
 8012afe:	4abb      	ldr	r2, [pc, #748]	; (8012dec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8012b00:	fb82 0305 	smull	r0, r3, r2, r5
 8012b04:	1958      	adds	r0, r3, r5
 8012b06:	17eb      	asrs	r3, r5, #31
 8012b08:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012b0c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8012b10:	fb00 5313 	mls	r3, r0, r3, r5
 8012b14:	4403      	add	r3, r0
 8012b16:	fb82 5203 	smull	r5, r2, r2, r3
 8012b1a:	18d5      	adds	r5, r2, r3
 8012b1c:	17da      	asrs	r2, r3, #31
 8012b1e:	ebc2 2225 	rsb	r2, r2, r5, asr #8
 8012b22:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012b26:	2a5a      	cmp	r2, #90	; 0x5a
 8012b28:	dd0b      	ble.n	8012b42 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44a>
        if (i <= 180)
 8012b2a:	2ab4      	cmp	r2, #180	; 0xb4
 8012b2c:	dd15      	ble.n	8012b5a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x462>
        if (i <= 270)
 8012b2e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012b32:	dd18      	ble.n	8012b66 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x46e>
        return Q15(-int32_t(sineTable[360 - i]));
 8012b34:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012b38:	4bab      	ldr	r3, [pc, #684]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012b3a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b3e:	4240      	negs	r0, r0
 8012b40:	e002      	b.n	8012b48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x450>
            return Q15(sineTable[i]);
 8012b42:	4ba9      	ldr	r3, [pc, #676]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012b44:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012b48:	ab07      	add	r3, sp, #28
 8012b4a:	2220      	movs	r2, #32
 8012b4c:	eba0 000a 	sub.w	r0, r0, sl
 8012b50:	f00c fbdf 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8012b54:	eb0a 0100 	add.w	r1, sl, r0
 8012b58:	e76e      	b.n	8012a38 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x340>
            return Q15(sineTable[180 - i]);
 8012b5a:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012b5e:	4ba2      	ldr	r3, [pc, #648]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012b60:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b64:	e7f0      	b.n	8012b48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x450>
            return Q15(-int32_t(sineTable[i - 180]));
 8012b66:	3ab4      	subs	r2, #180	; 0xb4
 8012b68:	4b9f      	ldr	r3, [pc, #636]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012b6a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b6e:	4240      	negs	r0, r0
 8012b70:	e7ea      	b.n	8012b48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x450>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012b72:	f102 001f 	add.w	r0, r2, #31
 8012b76:	e78a      	b.n	8012a8e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x396>
            return Q15(sineTable[i]);
 8012b78:	4b9b      	ldr	r3, [pc, #620]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012b7a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b7e:	4682      	mov	sl, r0
        if (fraction == 0)
 8012b80:	bb69      	cbnz	r1, 8012bde <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e6>
            return sineLow;
 8012b82:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012b84:	ab07      	add	r3, sp, #28
 8012b86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	f00c fbc1 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v - q5.v);
 8012b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b92:	1a18      	subs	r0, r3, r0
            CWRUtil::Q5 capY = circleCenterY - (radius * CWRUtil::cosine(arcEnd));
 8012b94:	9006      	str	r0, [sp, #24]
            return Q5(v + q5.v);
 8012b96:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8012b98:	4443      	add	r3, r8
            for (CWRUtil::Q5 capAngle = arcEnd + circleCapArcIncrementQ5; capAngle < arcEnd + _180; capAngle = capAngle + circleCapArcIncrementQ5)
 8012b9a:	9307      	str	r3, [sp, #28]
 8012b9c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8012b9e:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8012ba2:	9a07      	ldr	r2, [sp, #28]
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	f77f aee2 	ble.w	801296e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x276>
                lineToXYAR2(canvas, capX, capY, capAngle, lineWidth);
 8012baa:	ab09      	add	r3, sp, #36	; 0x24
 8012bac:	9301      	str	r3, [sp, #4]
 8012bae:	ab07      	add	r3, sp, #28
 8012bb0:	9300      	str	r3, [sp, #0]
 8012bb2:	ab06      	add	r3, sp, #24
 8012bb4:	aa05      	add	r2, sp, #20
 8012bb6:	a90a      	add	r1, sp, #40	; 0x28
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f7fe fe1f 	bl	80117fc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8012bbe:	9b07      	ldr	r3, [sp, #28]
 8012bc0:	4443      	add	r3, r8
            for (CWRUtil::Q5 capAngle = arcEnd + circleCapArcIncrementQ5; capAngle < arcEnd + _180; capAngle = capAngle + circleCapArcIncrementQ5)
 8012bc2:	9307      	str	r3, [sp, #28]
 8012bc4:	e7ea      	b.n	8012b9c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4a4>
            return Q15(sineTable[180 - i]);
 8012bc6:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012bca:	4b87      	ldr	r3, [pc, #540]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012bcc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012bd0:	e7d5      	b.n	8012b7e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x486>
            return Q15(-int32_t(sineTable[i - 180]));
 8012bd2:	3ab4      	subs	r2, #180	; 0xb4
 8012bd4:	4b84      	ldr	r3, [pc, #528]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012bd6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012bda:	4240      	negs	r0, r0
 8012bdc:	e7cf      	b.n	8012b7e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x486>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012bde:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8012be2:	4a82      	ldr	r2, [pc, #520]	; (8012dec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8012be4:	fb82 030c 	smull	r0, r3, r2, ip
 8012be8:	eb03 000c 	add.w	r0, r3, ip
 8012bec:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8012bf0:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012bf4:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8012bf8:	fb0e c313 	mls	r3, lr, r3, ip
 8012bfc:	4473      	add	r3, lr
 8012bfe:	fb82 0203 	smull	r0, r2, r2, r3
 8012c02:	18d0      	adds	r0, r2, r3
 8012c04:	17da      	asrs	r2, r3, #31
 8012c06:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012c0a:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8012c0e:	2a5a      	cmp	r2, #90	; 0x5a
 8012c10:	dd0b      	ble.n	8012c2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x532>
        if (i <= 180)
 8012c12:	2ab4      	cmp	r2, #180	; 0xb4
 8012c14:	dd15      	ble.n	8012c42 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x54a>
        if (i <= 270)
 8012c16:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012c1a:	dd18      	ble.n	8012c4e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x556>
        return Q15(-int32_t(sineTable[360 - i]));
 8012c1c:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012c20:	4b71      	ldr	r3, [pc, #452]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012c22:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012c26:	4240      	negs	r0, r0
 8012c28:	e002      	b.n	8012c30 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x538>
            return Q15(sineTable[i]);
 8012c2a:	4b6f      	ldr	r3, [pc, #444]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012c2c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012c30:	ab07      	add	r3, sp, #28
 8012c32:	2220      	movs	r2, #32
 8012c34:	eba0 000a 	sub.w	r0, r0, sl
 8012c38:	f00c fb6b 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8012c3c:	eb0a 0100 	add.w	r1, sl, r0
 8012c40:	e7a0      	b.n	8012b84 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x48c>
            return Q15(sineTable[180 - i]);
 8012c42:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012c46:	4b68      	ldr	r3, [pc, #416]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012c48:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012c4c:	e7f0      	b.n	8012c30 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x538>
            return Q15(-int32_t(sineTable[i - 180]));
 8012c4e:	3ab4      	subs	r2, #180	; 0xb4
 8012c50:	4b65      	ldr	r3, [pc, #404]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012c52:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012c56:	4240      	negs	r0, r0
 8012c58:	e7ea      	b.n	8012c30 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x538>
            return Q5(v - q5.v);
 8012c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c5c:	ebc3 0246 	rsb	r2, r3, r6, lsl #1
            lineToAR2(canvas, arcEnd, (radius * 2) - lineWidth);
 8012c60:	ab40      	add	r3, sp, #256	; 0x100
 8012c62:	f843 2d0c 	str.w	r2, [r3, #-12]!
 8012c66:	aa38      	add	r2, sp, #224	; 0xe0
 8012c68:	a90a      	add	r1, sp, #40	; 0x28
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f7fe ff26 	bl	8011abc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8012c70:	e682      	b.n	8012978 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x280>
            return v;
 8012c72:	9a08      	ldr	r2, [sp, #32]
        if (arc > arcStart)
 8012c74:	4293      	cmp	r3, r2
 8012c76:	db47      	blt.n	8012d08 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x610>
            return Q5(v - q5.v);
 8012c78:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8012c7a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8012c7c:	1a9b      	subs	r3, r3, r2
        if (arcEnd - arcStart < _360)
 8012c7e:	4599      	cmp	r9, r3
 8012c80:	f77f ae4f 	ble.w	8012922 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8012c84:	4611      	mov	r1, r2
        i = Q5(((i % _360) + _360) % _360);
 8012c86:	4a59      	ldr	r2, [pc, #356]	; (8012dec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8012c88:	fb82 0301 	smull	r0, r3, r2, r1
 8012c8c:	1858      	adds	r0, r3, r1
 8012c8e:	17cb      	asrs	r3, r1, #31
 8012c90:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8012c94:	f44f 5534 	mov.w	r5, #11520	; 0x2d00
 8012c98:	fb05 1313 	mls	r3, r5, r3, r1
 8012c9c:	442b      	add	r3, r5
 8012c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8012ca2:	441a      	add	r2, r3
 8012ca4:	17d8      	asrs	r0, r3, #31
 8012ca6:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8012caa:	fb05 3010 	mls	r0, r5, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8012cae:	4243      	negs	r3, r0
 8012cb0:	f000 011f 	and.w	r1, r0, #31
 8012cb4:	f003 031f 	and.w	r3, r3, #31
 8012cb8:	bf58      	it	pl
 8012cba:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	db2e      	blt.n	8012d20 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x628>
 8012cc2:	1155      	asrs	r5, r2, #5
        i = ((i % 360) + 360) % 360;
 8012cc4:	4849      	ldr	r0, [pc, #292]	; (8012dec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8012cc6:	fb80 7305 	smull	r7, r3, r0, r5
 8012cca:	195f      	adds	r7, r3, r5
 8012ccc:	17d3      	asrs	r3, r2, #31
 8012cce:	ebc3 2327 	rsb	r3, r3, r7, asr #8
 8012cd2:	f44f 77b4 	mov.w	r7, #360	; 0x168
 8012cd6:	fb07 5313 	mls	r3, r7, r3, r5
 8012cda:	443b      	add	r3, r7
 8012cdc:	fb80 2003 	smull	r2, r0, r0, r3
 8012ce0:	4418      	add	r0, r3
 8012ce2:	17da      	asrs	r2, r3, #31
 8012ce4:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012ce8:	fb07 3212 	mls	r2, r7, r2, r3
        if (i <= 90)
 8012cec:	2a5a      	cmp	r2, #90	; 0x5a
 8012cee:	dd1a      	ble.n	8012d26 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x62e>
        if (i <= 180)
 8012cf0:	2ab4      	cmp	r2, #180	; 0xb4
 8012cf2:	dd6d      	ble.n	8012dd0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6d8>
        if (i <= 270)
 8012cf4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012cf8:	dd70      	ble.n	8012ddc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6e4>
        return Q15(-int32_t(sineTable[360 - i]));
 8012cfa:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012cfe:	4b3a      	ldr	r3, [pc, #232]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012d00:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012d04:	4240      	negs	r0, r0
 8012d06:	e011      	b.n	8012d2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x634>
            return Q5(v - q5.v);
 8012d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d0a:	ebc3 0246 	rsb	r2, r3, r6, lsl #1
            lineToAR2(canvas, arcStart, (radius * 2) - lineWidth);
 8012d0e:	ab40      	add	r3, sp, #256	; 0x100
 8012d10:	f843 2d04 	str.w	r2, [r3, #-4]!
 8012d14:	aa39      	add	r2, sp, #228	; 0xe4
 8012d16:	a90a      	add	r1, sp, #40	; 0x28
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f7fe fecf 	bl	8011abc <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8012d1e:	e7ab      	b.n	8012c78 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x580>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012d20:	f100 021f 	add.w	r2, r0, #31
 8012d24:	e7cd      	b.n	8012cc2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x5ca>
            return Q15(sineTable[i]);
 8012d26:	4b30      	ldr	r3, [pc, #192]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012d28:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012d2c:	4607      	mov	r7, r0
        if (fraction == 0)
 8012d2e:	2900      	cmp	r1, #0
 8012d30:	d15e      	bne.n	8012df0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f8>
            return sineLow;
 8012d32:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012d34:	4635      	mov	r5, r6
 8012d36:	ab07      	add	r3, sp, #28
 8012d38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	f00c fae8 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v + q5.v);
 8012d42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012d44:	4418      	add	r0, r3
            CWRUtil::Q5 capX = circleCenterX + (radius * CWRUtil::sine(arcStart));
 8012d46:	9005      	str	r0, [sp, #20]
 8012d48:	9939      	ldr	r1, [sp, #228]	; 0xe4
            return Q5(v - q5.v);
 8012d4a:	f5c1 6134 	rsb	r1, r1, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 8012d4e:	4a27      	ldr	r2, [pc, #156]	; (8012dec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8012d50:	fb82 0301 	smull	r0, r3, r2, r1
 8012d54:	1858      	adds	r0, r3, r1
 8012d56:	17cb      	asrs	r3, r1, #31
 8012d58:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8012d5c:	f44f 5634 	mov.w	r6, #11520	; 0x2d00
 8012d60:	fb06 1313 	mls	r3, r6, r3, r1
 8012d64:	4433      	add	r3, r6
 8012d66:	fb82 1203 	smull	r1, r2, r2, r3
 8012d6a:	441a      	add	r2, r3
 8012d6c:	17d8      	asrs	r0, r3, #31
 8012d6e:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8012d72:	fb06 3010 	mls	r0, r6, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8012d76:	4243      	negs	r3, r0
 8012d78:	f000 011f 	and.w	r1, r0, #31
 8012d7c:	f003 031f 	and.w	r3, r3, #31
 8012d80:	bf58      	it	pl
 8012d82:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012d84:	4602      	mov	r2, r0
 8012d86:	2800      	cmp	r0, #0
 8012d88:	db6b      	blt.n	8012e62 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x76a>
 8012d8a:	1156      	asrs	r6, r2, #5
        i = ((i % 360) + 360) % 360;
 8012d8c:	4817      	ldr	r0, [pc, #92]	; (8012dec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8012d8e:	fb80 7306 	smull	r7, r3, r0, r6
 8012d92:	199f      	adds	r7, r3, r6
 8012d94:	17d3      	asrs	r3, r2, #31
 8012d96:	ebc3 2327 	rsb	r3, r3, r7, asr #8
 8012d9a:	f44f 77b4 	mov.w	r7, #360	; 0x168
 8012d9e:	fb07 6313 	mls	r3, r7, r3, r6
 8012da2:	443b      	add	r3, r7
 8012da4:	fb80 2003 	smull	r2, r0, r0, r3
 8012da8:	4418      	add	r0, r3
 8012daa:	17da      	asrs	r2, r3, #31
 8012dac:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012db0:	fb07 3212 	mls	r2, r7, r2, r3
        if (i <= 90)
 8012db4:	2a5a      	cmp	r2, #90	; 0x5a
 8012db6:	dd57      	ble.n	8012e68 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x770>
        if (i <= 180)
 8012db8:	2ab4      	cmp	r2, #180	; 0xb4
 8012dba:	dd7c      	ble.n	8012eb6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x7be>
        if (i <= 270)
 8012dbc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012dc0:	dd7f      	ble.n	8012ec2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x7ca>
        return Q15(-int32_t(sineTable[360 - i]));
 8012dc2:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012dc6:	4b08      	ldr	r3, [pc, #32]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012dc8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012dcc:	4240      	negs	r0, r0
 8012dce:	e04e      	b.n	8012e6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x776>
            return Q15(sineTable[180 - i]);
 8012dd0:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012dd4:	4b04      	ldr	r3, [pc, #16]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012dd6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012dda:	e7a7      	b.n	8012d2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x634>
            return Q15(-int32_t(sineTable[i - 180]));
 8012ddc:	3ab4      	subs	r2, #180	; 0xb4
 8012dde:	4b02      	ldr	r3, [pc, #8]	; (8012de8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8012de0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012de4:	4240      	negs	r0, r0
 8012de6:	e7a1      	b.n	8012d2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x634>
 8012de8:	08024ae8 	.word	0x08024ae8
 8012dec:	b60b60b7 	.word	0xb60b60b7
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012df0:	3501      	adds	r5, #1
        i = ((i % 360) + 360) % 360;
 8012df2:	4a54      	ldr	r2, [pc, #336]	; (8012f44 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x84c>)
 8012df4:	fb82 0305 	smull	r0, r3, r2, r5
 8012df8:	1958      	adds	r0, r3, r5
 8012dfa:	17eb      	asrs	r3, r5, #31
 8012dfc:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012e00:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8012e04:	fb0c 5313 	mls	r3, ip, r3, r5
 8012e08:	4463      	add	r3, ip
 8012e0a:	fb82 0203 	smull	r0, r2, r2, r3
 8012e0e:	18d0      	adds	r0, r2, r3
 8012e10:	17da      	asrs	r2, r3, #31
 8012e12:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012e16:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 8012e1a:	2a5a      	cmp	r2, #90	; 0x5a
 8012e1c:	dd0b      	ble.n	8012e36 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x73e>
        if (i <= 180)
 8012e1e:	2ab4      	cmp	r2, #180	; 0xb4
 8012e20:	dd13      	ble.n	8012e4a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x752>
        if (i <= 270)
 8012e22:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012e26:	dd16      	ble.n	8012e56 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x75e>
        return Q15(-int32_t(sineTable[360 - i]));
 8012e28:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012e2c:	4b46      	ldr	r3, [pc, #280]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012e2e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e32:	4240      	negs	r0, r0
 8012e34:	e002      	b.n	8012e3c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x744>
            return Q15(sineTable[i]);
 8012e36:	4b44      	ldr	r3, [pc, #272]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012e38:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012e3c:	ab07      	add	r3, sp, #28
 8012e3e:	2220      	movs	r2, #32
 8012e40:	1bc0      	subs	r0, r0, r7
 8012e42:	f00c fa66 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8012e46:	1839      	adds	r1, r7, r0
 8012e48:	e774      	b.n	8012d34 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x63c>
            return Q15(sineTable[180 - i]);
 8012e4a:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012e4e:	4b3e      	ldr	r3, [pc, #248]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012e50:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e54:	e7f2      	b.n	8012e3c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x744>
            return Q15(-int32_t(sineTable[i - 180]));
 8012e56:	3ab4      	subs	r2, #180	; 0xb4
 8012e58:	4b3b      	ldr	r3, [pc, #236]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012e5a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e5e:	4240      	negs	r0, r0
 8012e60:	e7ec      	b.n	8012e3c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x744>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012e62:	f100 021f 	add.w	r2, r0, #31
 8012e66:	e790      	b.n	8012d8a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x692>
            return Q15(sineTable[i]);
 8012e68:	4b37      	ldr	r3, [pc, #220]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012e6a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e6e:	4607      	mov	r7, r0
        if (fraction == 0)
 8012e70:	bb69      	cbnz	r1, 8012ece <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x7d6>
            return sineLow;
 8012e72:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012e74:	ab07      	add	r3, sp, #28
 8012e76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	f00c fa49 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
            return Q5(v - q5.v);
 8012e80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e82:	1a18      	subs	r0, r3, r0
            CWRUtil::Q5 capY = circleCenterY - (radius * CWRUtil::cosine(arcStart));
 8012e84:	9006      	str	r0, [sp, #24]
 8012e86:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8012e88:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
            return Q5(v + q5.v);
 8012e8c:	4443      	add	r3, r8
            for (CWRUtil::Q5 capAngle = arcStart - _180 + circleCapArcIncrementQ5; capAngle < arcStart; capAngle = capAngle + circleCapArcIncrementQ5)
 8012e8e:	9307      	str	r3, [sp, #28]
            return v;
 8012e90:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8012e92:	9b07      	ldr	r3, [sp, #28]
 8012e94:	429a      	cmp	r2, r3
 8012e96:	f77f ad44 	ble.w	8012922 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
                lineToXYAR2(canvas, capX, capY, capAngle, lineWidth);
 8012e9a:	ab09      	add	r3, sp, #36	; 0x24
 8012e9c:	9301      	str	r3, [sp, #4]
 8012e9e:	ab07      	add	r3, sp, #28
 8012ea0:	9300      	str	r3, [sp, #0]
 8012ea2:	ab06      	add	r3, sp, #24
 8012ea4:	aa05      	add	r2, sp, #20
 8012ea6:	a90a      	add	r1, sp, #40	; 0x28
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	f7fe fca7 	bl	80117fc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
            return Q5(v + q5.v);
 8012eae:	9b07      	ldr	r3, [sp, #28]
 8012eb0:	4443      	add	r3, r8
            for (CWRUtil::Q5 capAngle = arcStart - _180 + circleCapArcIncrementQ5; capAngle < arcStart; capAngle = capAngle + circleCapArcIncrementQ5)
 8012eb2:	9307      	str	r3, [sp, #28]
 8012eb4:	e7ec      	b.n	8012e90 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x798>
            return Q15(sineTable[180 - i]);
 8012eb6:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012eba:	4b23      	ldr	r3, [pc, #140]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012ebc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012ec0:	e7d5      	b.n	8012e6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x776>
            return Q15(-int32_t(sineTable[i - 180]));
 8012ec2:	3ab4      	subs	r2, #180	; 0xb4
 8012ec4:	4b20      	ldr	r3, [pc, #128]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012ec6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012eca:	4240      	negs	r0, r0
 8012ecc:	e7cf      	b.n	8012e6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x776>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012ece:	3601      	adds	r6, #1
        i = ((i % 360) + 360) % 360;
 8012ed0:	4a1c      	ldr	r2, [pc, #112]	; (8012f44 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x84c>)
 8012ed2:	fb82 0306 	smull	r0, r3, r2, r6
 8012ed6:	1998      	adds	r0, r3, r6
 8012ed8:	17f3      	asrs	r3, r6, #31
 8012eda:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012ede:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8012ee2:	fb0c 6313 	mls	r3, ip, r3, r6
 8012ee6:	4463      	add	r3, ip
 8012ee8:	fb82 0203 	smull	r0, r2, r2, r3
 8012eec:	18d0      	adds	r0, r2, r3
 8012eee:	17da      	asrs	r2, r3, #31
 8012ef0:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012ef4:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 8012ef8:	2a5a      	cmp	r2, #90	; 0x5a
 8012efa:	dd0b      	ble.n	8012f14 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x81c>
        if (i <= 180)
 8012efc:	2ab4      	cmp	r2, #180	; 0xb4
 8012efe:	dd13      	ble.n	8012f28 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x830>
        if (i <= 270)
 8012f00:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012f04:	dd16      	ble.n	8012f34 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x83c>
        return Q15(-int32_t(sineTable[360 - i]));
 8012f06:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012f0a:	4b0f      	ldr	r3, [pc, #60]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012f0c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012f10:	4240      	negs	r0, r0
 8012f12:	e002      	b.n	8012f1a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x822>
            return Q15(sineTable[i]);
 8012f14:	4b0c      	ldr	r3, [pc, #48]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012f16:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012f1a:	ab07      	add	r3, sp, #28
 8012f1c:	2220      	movs	r2, #32
 8012f1e:	1bc0      	subs	r0, r0, r7
 8012f20:	f00c f9f7 	bl	801f312 <_ZN8touchgfx6muldivElllRl>
 8012f24:	1839      	adds	r1, r7, r0
 8012f26:	e7a5      	b.n	8012e74 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x77c>
            return Q15(sineTable[180 - i]);
 8012f28:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012f2c:	4b06      	ldr	r3, [pc, #24]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012f2e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012f32:	e7f2      	b.n	8012f1a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x822>
            return Q15(-int32_t(sineTable[i - 180]));
 8012f34:	3ab4      	subs	r2, #180	; 0xb4
 8012f36:	4b04      	ldr	r3, [pc, #16]	; (8012f48 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8012f38:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012f3c:	4240      	negs	r0, r0
 8012f3e:	e7ec      	b.n	8012f1a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x822>
            return true;
 8012f40:	2401      	movs	r4, #1
 8012f42:	e4f5      	b.n	8012930 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x238>
 8012f44:	b60b60b7 	.word	0xb60b60b7
 8012f48:	08024ae8 	.word	0x08024ae8

08012f4c <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_>:

    return true;
}

bool PainterRGB565Bitmap::renderNext(uint8_t& red, uint8_t& green, uint8_t& blue, uint8_t& alpha)
{
 8012f4c:	b470      	push	{r4, r5, r6}
 8012f4e:	9c03      	ldr	r4, [sp, #12]
    if (currentX >= bitmapRectToFrameBuffer.width)
 8012f50:	68c6      	ldr	r6, [r0, #12]
 8012f52:	f9b0 5026 	ldrsh.w	r5, [r0, #38]	; 0x26
 8012f56:	42ae      	cmp	r6, r5
 8012f58:	da3b      	bge.n	8012fd2 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x86>
    {
        return false;
    }

    if (bitmapARGB8888Pointer != 0)
 8012f5a:	6945      	ldr	r5, [r0, #20]
 8012f5c:	b1c5      	cbz	r5, 8012f90 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x44>
    {
        uint32_t argb8888 = *bitmapARGB8888Pointer++;
 8012f5e:	1d2e      	adds	r6, r5, #4
 8012f60:	6146      	str	r6, [r0, #20]
 8012f62:	682d      	ldr	r5, [r5, #0]
        alpha = (argb8888 >> 24) & 0xFF;
 8012f64:	0e2e      	lsrs	r6, r5, #24
 8012f66:	7026      	strb	r6, [r4, #0]
        red = (argb8888 >> 16) & 0xFF;
 8012f68:	0c2e      	lsrs	r6, r5, #16
 8012f6a:	700e      	strb	r6, [r1, #0]
        green = (argb8888 >> 8) & 0xFF;
 8012f6c:	0a29      	lsrs	r1, r5, #8
 8012f6e:	7011      	strb	r1, [r2, #0]
        blue = (argb8888) & 0xFF;
 8012f70:	701d      	strb	r5, [r3, #0]
        else
        {
            alpha = 255; // No alpha per pixel in the image, it is solid
        }
    }
    if (painterAlpha < 255)
 8012f72:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8012f76:	2bff      	cmp	r3, #255	; 0xff
 8012f78:	d02e      	beq.n	8012fd8 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x8c>
    {
        // Apply given alpha from setAlpha()
        alpha = (((uint16_t)alpha) * ((uint16_t)painterAlpha)) / 255;
 8012f7a:	7822      	ldrb	r2, [r4, #0]
 8012f7c:	fb03 f202 	mul.w	r2, r3, r2
 8012f80:	4b16      	ldr	r3, [pc, #88]	; (8012fdc <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x90>)
 8012f82:	fb83 1302 	smull	r1, r3, r3, r2
 8012f86:	4413      	add	r3, r2
 8012f88:	11db      	asrs	r3, r3, #7
 8012f8a:	7023      	strb	r3, [r4, #0]
    }
    return true;
 8012f8c:	2001      	movs	r0, #1
 8012f8e:	e021      	b.n	8012fd4 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x88>
    else if (bitmapRGB565Pointer != 0)
 8012f90:	6985      	ldr	r5, [r0, #24]
 8012f92:	2d00      	cmp	r5, #0
 8012f94:	d0ed      	beq.n	8012f72 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x26>
        uint16_t rgb565 = *bitmapRGB565Pointer++;
 8012f96:	1cae      	adds	r6, r5, #2
 8012f98:	6186      	str	r6, [r0, #24]
 8012f9a:	882d      	ldrh	r5, [r5, #0]
        red = (rgb565 & 0xF800) >> 8;
 8012f9c:	122e      	asrs	r6, r5, #8
 8012f9e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
        red |= red >> 5; // To get full range 0-0xFF, not just 0-0xF8
 8012fa2:	ea46 1666 	orr.w	r6, r6, r6, asr #5
 8012fa6:	700e      	strb	r6, [r1, #0]
        green = (rgb565 & 0x07E0) >> 3;
 8012fa8:	10e9      	asrs	r1, r5, #3
 8012faa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
        green |= green >> 6; // To get full range 0-0xFF, not just 0-0xFC
 8012fae:	ea41 11a1 	orr.w	r1, r1, r1, asr #6
 8012fb2:	7011      	strb	r1, [r2, #0]
        blue = (rgb565 & 0x001F) << 3;
 8012fb4:	00ed      	lsls	r5, r5, #3
 8012fb6:	b2ed      	uxtb	r5, r5
        blue |= (blue >> 5); // To get full range 0-0xFF, not just 0-0xF8
 8012fb8:	ea45 1565 	orr.w	r5, r5, r5, asr #5
 8012fbc:	701d      	strb	r5, [r3, #0]
        if (bitmapAlphaPointer)
 8012fbe:	69c3      	ldr	r3, [r0, #28]
 8012fc0:	b123      	cbz	r3, 8012fcc <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x80>
            alpha = *bitmapAlphaPointer++;
 8012fc2:	1c5a      	adds	r2, r3, #1
 8012fc4:	61c2      	str	r2, [r0, #28]
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	7023      	strb	r3, [r4, #0]
 8012fca:	e7d2      	b.n	8012f72 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x26>
            alpha = 255; // No alpha per pixel in the image, it is solid
 8012fcc:	23ff      	movs	r3, #255	; 0xff
 8012fce:	7023      	strb	r3, [r4, #0]
 8012fd0:	e7cf      	b.n	8012f72 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x26>
        return false;
 8012fd2:	2000      	movs	r0, #0
}
 8012fd4:	bc70      	pop	{r4, r5, r6}
 8012fd6:	4770      	bx	lr
    return true;
 8012fd8:	2001      	movs	r0, #1
 8012fda:	e7fb      	b.n	8012fd4 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x88>
 8012fdc:	80808081 	.word	0x80808081

08012fe0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh>:
{
 8012fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe4:	4680      	mov	r8, r0
 8012fe6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012fe8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    uint16_t* p = reinterpret_cast<uint16_t*>(ptr) + (x + xAdjust);
 8012fea:	4413      	add	r3, r2
 8012fec:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    currentX = x + areaOffsetX;
 8012ff0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012ff4:	441a      	add	r2, r3
 8012ff6:	60c2      	str	r2, [r0, #12]
    currentY = y + areaOffsetY;
 8012ff8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012ffc:	9a08      	ldr	r2, [sp, #32]
 8012ffe:	4413      	add	r3, r2
 8013000:	6103      	str	r3, [r0, #16]
    if (!renderInit())
 8013002:	6803      	ldr	r3, [r0, #0]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	4798      	blx	r3
 8013008:	2800      	cmp	r0, #0
 801300a:	f000 8120 	beq.w	801324e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
    if (currentX + (int)count > bitmapRectToFrameBuffer.width)
 801300e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013012:	1959      	adds	r1, r3, r5
 8013014:	f9b8 2026 	ldrsh.w	r2, [r8, #38]	; 0x26
 8013018:	4291      	cmp	r1, r2
 801301a:	dd00      	ble.n	801301e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3e>
        count = bitmapRectToFrameBuffer.width - currentX;
 801301c:	1ad5      	subs	r5, r2, r3
    uint8_t totalAlpha = (widgetAlpha * painterAlpha) / 255u;
 801301e:	f898 3008 	ldrb.w	r3, [r8, #8]
 8013022:	f898 702a 	ldrb.w	r7, [r8, #42]	; 0x2a
 8013026:	fb07 f703 	mul.w	r7, r7, r3
 801302a:	4bd4      	ldr	r3, [pc, #848]	; (801337c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x39c>)
 801302c:	fba3 3707 	umull	r3, r7, r3, r7
 8013030:	09ff      	lsrs	r7, r7, #7
 8013032:	fa5f f987 	uxtb.w	r9, r7
    if (bitmap.getFormat() == Bitmap::RGB565)
 8013036:	f108 0a20 	add.w	sl, r8, #32
 801303a:	4650      	mov	r0, sl
 801303c:	f00d fd86 	bl	8020b4c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013040:	2800      	cmp	r0, #0
 8013042:	f040 80ff 	bne.w	8013244 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x264>
        const uint16_t* src = bitmapRGB565Pointer;
 8013046:	f8d8 3018 	ldr.w	r3, [r8, #24]
        const uint8_t* srcAlpha = bitmapAlphaPointer;
 801304a:	f8d8 001c 	ldr.w	r0, [r8, #28]
        if (srcAlpha)
 801304e:	2800      	cmp	r0, #0
 8013050:	f000 8088 	beq.w	8013164 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x184>
            if (totalAlpha == 255)
 8013054:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013058:	d148      	bne.n	80130ec <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x10c>
 801305a:	e006      	b.n	801306a <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x8a>
                        *p = *src;
 801305c:	881a      	ldrh	r2, [r3, #0]
 801305e:	8022      	strh	r2, [r4, #0]
                    p++;
 8013060:	3402      	adds	r4, #2
                    src++;
 8013062:	3302      	adds	r3, #2
                while (--count != 0);
 8013064:	3d01      	subs	r5, #1
 8013066:	f000 80f2 	beq.w	801324e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                    uint32_t alpha = (*covers) * (*srcAlpha);
 801306a:	f816 2b01 	ldrb.w	r2, [r6], #1
 801306e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013072:	fb01 f202 	mul.w	r2, r1, r2
                    if (alpha == 255u * 255u)
 8013076:	f64f 6101 	movw	r1, #65025	; 0xfe01
 801307a:	428a      	cmp	r2, r1
 801307c:	d0ee      	beq.n	801305c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x7c>
                    else if (alpha)
 801307e:	2a00      	cmp	r2, #0
 8013080:	d0ee      	beq.n	8013060 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x80>
                        *p = mixColors(*src, *p, alpha, 16);
 8013082:	f8b3 8000 	ldrh.w	r8, [r3]
 8013086:	f8b4 e000 	ldrh.w	lr, [r4]
        return mixColors(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha, shift);
 801308a:	49bd      	ldr	r1, [pc, #756]	; (8013380 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>)
 801308c:	ea08 0a01 	and.w	sl, r8, r1
 8013090:	f408 69fc 	and.w	r9, r8, #2016	; 0x7e0
 8013094:	f008 081f 	and.w	r8, r8, #31
 8013098:	ea0e 0701 	and.w	r7, lr, r1
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 801309c:	ebaa 0a07 	sub.w	sl, sl, r7
 80130a0:	fa1f fc82 	uxth.w	ip, r2
 80130a4:	fb0c f20a 	mul.w	r2, ip, sl
 80130a8:	eb07 4722 	add.w	r7, r7, r2, asr #16
 80130ac:	b23f      	sxth	r7, r7
 80130ae:	ea07 0201 	and.w	r2, r7, r1
 80130b2:	f40e 61fc 	and.w	r1, lr, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 80130b6:	eba9 0901 	sub.w	r9, r9, r1
 80130ba:	fb0c f909 	mul.w	r9, ip, r9
 80130be:	eb01 4129 	add.w	r1, r1, r9, asr #16
 80130c2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 80130c6:	4311      	orrs	r1, r2
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 80130c8:	f00e 021f 	and.w	r2, lr, #31
 80130cc:	eba8 0202 	sub.w	r2, r8, r2
 80130d0:	fb0c f202 	mul.w	r2, ip, r2
 80130d4:	eb0e 4222 	add.w	r2, lr, r2, asr #16
 80130d8:	f002 021f 	and.w	r2, r2, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 80130dc:	430a      	orrs	r2, r1
 80130de:	8022      	strh	r2, [r4, #0]
 80130e0:	e7be      	b.n	8013060 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x80>
                    p++;
 80130e2:	3402      	adds	r4, #2
                    src++;
 80130e4:	3302      	adds	r3, #2
                while (--count != 0);
 80130e6:	3d01      	subs	r5, #1
 80130e8:	f000 80b1 	beq.w	801324e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                    uint32_t alpha = ((*covers) * (*srcAlpha) * totalAlpha) >> 8;
 80130ec:	f816 1b01 	ldrb.w	r1, [r6], #1
 80130f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130f4:	fb02 f201 	mul.w	r2, r2, r1
 80130f8:	b2f9      	uxtb	r1, r7
 80130fa:	fb02 f201 	mul.w	r2, r2, r1
                    if (alpha) // This can never get to max=255u*255u as widgetAlpha<255
 80130fe:	1212      	asrs	r2, r2, #8
 8013100:	d0ef      	beq.n	80130e2 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x102>
                        *p = mixColors(*src, *p, alpha, 16);
 8013102:	f8b3 8000 	ldrh.w	r8, [r3]
 8013106:	f8b4 c000 	ldrh.w	ip, [r4]
        return mixColors(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha, shift);
 801310a:	499d      	ldr	r1, [pc, #628]	; (8013380 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>)
 801310c:	ea08 0a01 	and.w	sl, r8, r1
 8013110:	f408 69fc 	and.w	r9, r8, #2016	; 0x7e0
 8013114:	f008 081f 	and.w	r8, r8, #31
 8013118:	ea0c 0e01 	and.w	lr, ip, r1
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 801311c:	ebaa 0a0e 	sub.w	sl, sl, lr
 8013120:	b292      	uxth	r2, r2
 8013122:	fb02 fa0a 	mul.w	sl, r2, sl
 8013126:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 801312a:	fa0f fe8e 	sxth.w	lr, lr
 801312e:	ea0e 0e01 	and.w	lr, lr, r1
 8013132:	f40c 61fc 	and.w	r1, ip, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013136:	eba9 0901 	sub.w	r9, r9, r1
 801313a:	fb02 f909 	mul.w	r9, r2, r9
 801313e:	eb01 4129 	add.w	r1, r1, r9, asr #16
 8013142:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013146:	ea4e 0101 	orr.w	r1, lr, r1
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 801314a:	f00c 0e1f 	and.w	lr, ip, #31
 801314e:	eba8 080e 	sub.w	r8, r8, lr
 8013152:	fb02 f208 	mul.w	r2, r2, r8
 8013156:	eb0c 4222 	add.w	r2, ip, r2, asr #16
 801315a:	f002 021f 	and.w	r2, r2, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 801315e:	430a      	orrs	r2, r1
 8013160:	8022      	strh	r2, [r4, #0]
 8013162:	e7be      	b.n	80130e2 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x102>
            if (totalAlpha == 255)
 8013164:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013168:	d03b      	beq.n	80131e2 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x202>
                    uint32_t alpha = (*covers) * totalAlpha;
 801316a:	f816 ab01 	ldrb.w	sl, [r6], #1
 801316e:	fa5f fe87 	uxtb.w	lr, r7
                    *p = mixColors(*src, *p, alpha, 16);
 8013172:	f833 8b02 	ldrh.w	r8, [r3], #2
 8013176:	f8b4 c000 	ldrh.w	ip, [r4]
        return mixColors(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha, shift);
 801317a:	4981      	ldr	r1, [pc, #516]	; (8013380 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>)
 801317c:	ea08 0901 	and.w	r9, r8, r1
 8013180:	f408 62fc 	and.w	r2, r8, #2016	; 0x7e0
 8013184:	f008 081f 	and.w	r8, r8, #31
 8013188:	ea0c 0001 	and.w	r0, ip, r1
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 801318c:	eba9 0900 	sub.w	r9, r9, r0
 8013190:	fb0a fe0e 	mul.w	lr, sl, lr
 8013194:	fb0e f909 	mul.w	r9, lr, r9
 8013198:	eb00 4029 	add.w	r0, r0, r9, asr #16
 801319c:	b200      	sxth	r0, r0
 801319e:	4008      	ands	r0, r1
 80131a0:	f40c 61fc 	and.w	r1, ip, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 80131a4:	1a52      	subs	r2, r2, r1
 80131a6:	fb0e f202 	mul.w	r2, lr, r2
 80131aa:	eb01 4122 	add.w	r1, r1, r2, asr #16
 80131ae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 80131b2:	4301      	orrs	r1, r0
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 80131b4:	f00c 021f 	and.w	r2, ip, #31
 80131b8:	eba8 0202 	sub.w	r2, r8, r2
 80131bc:	fb0e f202 	mul.w	r2, lr, r2
 80131c0:	eb0c 4222 	add.w	r2, ip, r2, asr #16
 80131c4:	f002 021f 	and.w	r2, r2, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 80131c8:	430a      	orrs	r2, r1
 80131ca:	f824 2b02 	strh.w	r2, [r4], #2
                while (--count != 0);
 80131ce:	3d01      	subs	r5, #1
 80131d0:	d1cb      	bne.n	801316a <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x18a>
 80131d2:	e03c      	b.n	801324e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                        *p = *src;
 80131d4:	881a      	ldrh	r2, [r3, #0]
 80131d6:	8022      	strh	r2, [r4, #0]
                    p++;
 80131d8:	3402      	adds	r4, #2
                    src++;
 80131da:	3302      	adds	r3, #2
                    uint32_t alpha = *covers++;
 80131dc:	463e      	mov	r6, r7
                while (--count != 0);
 80131de:	3d01      	subs	r5, #1
 80131e0:	d035      	beq.n	801324e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                    uint32_t alpha = *covers++;
 80131e2:	1c77      	adds	r7, r6, #1
 80131e4:	f896 c000 	ldrb.w	ip, [r6]
                    if (alpha == 255u)
 80131e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80131ec:	d0f2      	beq.n	80131d4 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x1f4>
                        *p = mixColors(*src, *p, alpha, 8);
 80131ee:	8818      	ldrh	r0, [r3, #0]
 80131f0:	8821      	ldrh	r1, [r4, #0]
        return mixColors(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha, shift);
 80131f2:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8013380 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>
 80131f6:	ea00 0608 	and.w	r6, r0, r8
 80131fa:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 80131fe:	f000 001f 	and.w	r0, r0, #31
 8013202:	ea01 0208 	and.w	r2, r1, r8
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013206:	1ab6      	subs	r6, r6, r2
 8013208:	fb0c f606 	mul.w	r6, ip, r6
 801320c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013210:	b212      	sxth	r2, r2
 8013212:	ea02 0208 	and.w	r2, r2, r8
 8013216:	f401 66fc 	and.w	r6, r1, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 801321a:	ebae 0e06 	sub.w	lr, lr, r6
 801321e:	fb0e fe0c 	mul.w	lr, lr, ip
 8013222:	eb06 262e 	add.w	r6, r6, lr, asr #8
 8013226:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 801322a:	4332      	orrs	r2, r6
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 801322c:	f001 061f 	and.w	r6, r1, #31
 8013230:	1b80      	subs	r0, r0, r6
 8013232:	fb00 fc0c 	mul.w	ip, r0, ip
 8013236:	eb01 212c 	add.w	r1, r1, ip, asr #8
 801323a:	f001 011f 	and.w	r1, r1, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 801323e:	430a      	orrs	r2, r1
 8013240:	8022      	strh	r2, [r4, #0]
 8013242:	e7c9      	b.n	80131d8 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x1f8>
    else if (bitmap.getFormat() == Bitmap::ARGB8888)
 8013244:	4650      	mov	r0, sl
 8013246:	f00d fc81 	bl	8020b4c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801324a:	2802      	cmp	r0, #2
 801324c:	d001      	beq.n	8013252 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x272>
}
 801324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        const uint32_t* src = bitmapARGB8888Pointer;
 8013252:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (totalAlpha == 255)
 8013256:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801325a:	d152      	bne.n	8013302 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x322>
 801325c:	e00f      	b.n	801327e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x29e>
                    *p = ((newpix >> 8) & RMASK) | ((newpix >> 5) & GMASK) | ((newpix >> 3) & BMASK);
 801325e:	4b48      	ldr	r3, [pc, #288]	; (8013380 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>)
 8013260:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8013264:	b29b      	uxth	r3, r3
 8013266:	0948      	lsrs	r0, r1, #5
 8013268:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801326c:	4303      	orrs	r3, r0
 801326e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8013272:	4319      	orrs	r1, r3
 8013274:	8021      	strh	r1, [r4, #0]
                p++;
 8013276:	3402      	adds	r4, #2
                src++;
 8013278:	3204      	adds	r2, #4
            while (--count != 0);
 801327a:	3d01      	subs	r5, #1
 801327c:	d0e7      	beq.n	801324e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                uint8_t srcAlpha = *src >> 24;
 801327e:	6811      	ldr	r1, [r2, #0]
 8013280:	0e0b      	lsrs	r3, r1, #24
                uint32_t alpha = (*covers) * srcAlpha;
 8013282:	f816 0b01 	ldrb.w	r0, [r6], #1
 8013286:	fb00 f303 	mul.w	r3, r0, r3
                if (alpha == 255u * 255u)
 801328a:	f64f 6001 	movw	r0, #65025	; 0xfe01
 801328e:	4283      	cmp	r3, r0
 8013290:	d0e5      	beq.n	801325e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x27e>
                else if (alpha)
 8013292:	2b00      	cmp	r3, #0
 8013294:	d0ef      	beq.n	8013276 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x296>
                    *p = mixColors((newpix >> 8) & RMASK, (newpix >> 5) & GMASK, (newpix >> 3) & BMASK, *p, alpha, 16);
 8013296:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 8013380 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>
 801329a:	ea0e 2811 	and.w	r8, lr, r1, lsr #8
 801329e:	fa1f f888 	uxth.w	r8, r8
 80132a2:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 80132a6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80132aa:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80132ae:	8827      	ldrh	r7, [r4, #0]
 80132b0:	ea07 000e 	and.w	r0, r7, lr
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 80132b4:	eba8 0800 	sub.w	r8, r8, r0
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	fb08 f803 	mul.w	r8, r8, r3
 80132be:	eb00 4028 	add.w	r0, r0, r8, asr #16
 80132c2:	b200      	sxth	r0, r0
 80132c4:	ea00 000e 	and.w	r0, r0, lr
 80132c8:	f407 6efc 	and.w	lr, r7, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 80132cc:	ebac 0c0e 	sub.w	ip, ip, lr
 80132d0:	fb0c fc03 	mul.w	ip, ip, r3
 80132d4:	eb0e 4e2c 	add.w	lr, lr, ip, asr #16
 80132d8:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 80132dc:	ea40 000e 	orr.w	r0, r0, lr
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 80132e0:	f007 0c1f 	and.w	ip, r7, #31
 80132e4:	eba1 010c 	sub.w	r1, r1, ip
 80132e8:	fb01 f303 	mul.w	r3, r1, r3
 80132ec:	eb07 4323 	add.w	r3, r7, r3, asr #16
 80132f0:	f003 031f 	and.w	r3, r3, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 80132f4:	4303      	orrs	r3, r0
 80132f6:	8023      	strh	r3, [r4, #0]
 80132f8:	e7bd      	b.n	8013276 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x296>
                p++;
 80132fa:	3402      	adds	r4, #2
                src++;
 80132fc:	3204      	adds	r2, #4
            while (--count != 0);
 80132fe:	3d01      	subs	r5, #1
 8013300:	d0a5      	beq.n	801324e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                uint8_t srcAlpha = *src >> 24;
 8013302:	6810      	ldr	r0, [r2, #0]
 8013304:	0e01      	lsrs	r1, r0, #24
                uint32_t alpha = ((*covers) * srcAlpha * totalAlpha) >> 8;
 8013306:	f816 3b01 	ldrb.w	r3, [r6], #1
 801330a:	fb03 f301 	mul.w	r3, r3, r1
 801330e:	b2f9      	uxtb	r1, r7
 8013310:	fb03 f301 	mul.w	r3, r3, r1
                if (alpha)
 8013314:	121b      	asrs	r3, r3, #8
 8013316:	d0f0      	beq.n	80132fa <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x31a>
                    *p = mixColors((newpix >> 8) & RMASK, (newpix >> 5) & GMASK, (newpix >> 3) & BMASK, *p, alpha, 16);
 8013318:	f8df e064 	ldr.w	lr, [pc, #100]	; 8013380 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>
 801331c:	ea0e 2110 	and.w	r1, lr, r0, lsr #8
 8013320:	b289      	uxth	r1, r1
 8013322:	ea4f 1850 	mov.w	r8, r0, lsr #5
 8013326:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801332a:	f3c0 09c4 	ubfx	r9, r0, #3, #5
 801332e:	f8b4 c000 	ldrh.w	ip, [r4]
 8013332:	ea0c 000e 	and.w	r0, ip, lr
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013336:	1a09      	subs	r1, r1, r0
 8013338:	b29b      	uxth	r3, r3
 801333a:	fb03 f101 	mul.w	r1, r3, r1
 801333e:	eb00 4121 	add.w	r1, r0, r1, asr #16
 8013342:	b209      	sxth	r1, r1
 8013344:	ea01 010e 	and.w	r1, r1, lr
 8013348:	f40c 6afc 	and.w	sl, ip, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 801334c:	eba8 080a 	sub.w	r8, r8, sl
 8013350:	fb03 f808 	mul.w	r8, r3, r8
 8013354:	eb0a 4a28 	add.w	sl, sl, r8, asr #16
 8013358:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 801335c:	ea41 0a0a 	orr.w	sl, r1, sl
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 8013360:	f00c 001f 	and.w	r0, ip, #31
 8013364:	eba9 0000 	sub.w	r0, r9, r0
 8013368:	fb03 f300 	mul.w	r3, r3, r0
 801336c:	eb0c 4323 	add.w	r3, ip, r3, asr #16
 8013370:	f003 031f 	and.w	r3, r3, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013374:	ea4a 0303 	orr.w	r3, sl, r3
 8013378:	8023      	strh	r3, [r4, #0]
 801337a:	e7be      	b.n	80132fa <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x31a>
 801337c:	80808081 	.word	0x80808081
 8013380:	fffff800 	.word	0xfffff800

08013384 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv>:
{
 8013384:	b538      	push	{r3, r4, r5, lr}
    bitmapARGB8888Pointer = 0;
 8013386:	2300      	movs	r3, #0
 8013388:	6143      	str	r3, [r0, #20]
    bitmapRGB565Pointer = 0;
 801338a:	6183      	str	r3, [r0, #24]
    bitmapAlphaPointer = 0;
 801338c:	61c3      	str	r3, [r0, #28]
    if ((currentX >= bitmapRectToFrameBuffer.width) ||
 801338e:	68c2      	ldr	r2, [r0, #12]
 8013390:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8013394:	429a      	cmp	r2, r3
 8013396:	da3b      	bge.n	8013410 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8c>
            (currentY >= bitmapRectToFrameBuffer.height))
 8013398:	6902      	ldr	r2, [r0, #16]
 801339a:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
    if ((currentX >= bitmapRectToFrameBuffer.width) ||
 801339e:	429a      	cmp	r2, r3
 80133a0:	db01      	blt.n	80133a6 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x22>
        return false;
 80133a2:	2000      	movs	r0, #0
 80133a4:	e035      	b.n	8013412 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
 80133a6:	4604      	mov	r4, r0
    if (bitmap.getFormat() == Bitmap::ARGB8888)
 80133a8:	f100 0520 	add.w	r5, r0, #32
 80133ac:	4628      	mov	r0, r5
 80133ae:	f00d fbcd 	bl	8020b4c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80133b2:	2802      	cmp	r0, #2
 80133b4:	d01c      	beq.n	80133f0 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x6c>
        bitmapRGB565Pointer = (const uint16_t*)bitmap.getData();
 80133b6:	4628      	mov	r0, r5
 80133b8:	f00d fb70 	bl	8020a9c <_ZNK8touchgfx6Bitmap7getDataEv>
 80133bc:	61a0      	str	r0, [r4, #24]
        if (!bitmapRGB565Pointer)
 80133be:	b358      	cbz	r0, 8013418 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x94>
        bitmapRGB565Pointer += currentX + currentY * bitmapRectToFrameBuffer.width;
 80133c0:	68e2      	ldr	r2, [r4, #12]
 80133c2:	6923      	ldr	r3, [r4, #16]
 80133c4:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 80133c8:	fb01 2303 	mla	r3, r1, r3, r2
 80133cc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80133d0:	61a0      	str	r0, [r4, #24]
        bitmapAlphaPointer = (const uint8_t*)bitmap.getAlphaData();
 80133d2:	4628      	mov	r0, r5
 80133d4:	f00d fb92 	bl	8020afc <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 80133d8:	61e0      	str	r0, [r4, #28]
        if (bitmapAlphaPointer)
 80133da:	b1f8      	cbz	r0, 801341c <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x98>
            bitmapAlphaPointer += currentX + currentY * bitmapRectToFrameBuffer.width;
 80133dc:	68e2      	ldr	r2, [r4, #12]
 80133de:	6923      	ldr	r3, [r4, #16]
 80133e0:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 80133e4:	fb01 2303 	mla	r3, r1, r3, r2
 80133e8:	4418      	add	r0, r3
 80133ea:	61e0      	str	r0, [r4, #28]
    return true;
 80133ec:	2001      	movs	r0, #1
 80133ee:	e010      	b.n	8013412 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
        bitmapARGB8888Pointer = (const uint32_t*)bitmap.getData();
 80133f0:	4628      	mov	r0, r5
 80133f2:	f00d fb53 	bl	8020a9c <_ZNK8touchgfx6Bitmap7getDataEv>
 80133f6:	6160      	str	r0, [r4, #20]
        if (!bitmapARGB8888Pointer)
 80133f8:	b160      	cbz	r0, 8013414 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x90>
        bitmapARGB8888Pointer += currentX + currentY * bitmapRectToFrameBuffer.width;
 80133fa:	68e2      	ldr	r2, [r4, #12]
 80133fc:	6923      	ldr	r3, [r4, #16]
 80133fe:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 8013402:	fb01 2303 	mla	r3, r1, r3, r2
 8013406:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801340a:	6160      	str	r0, [r4, #20]
    return true;
 801340c:	2001      	movs	r0, #1
 801340e:	e000      	b.n	8013412 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
        return false;
 8013410:	2000      	movs	r0, #0
}
 8013412:	bd38      	pop	{r3, r4, r5, pc}
            return false;
 8013414:	2000      	movs	r0, #0
 8013416:	e7fc      	b.n	8013412 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
            return false;
 8013418:	2000      	movs	r0, #0
 801341a:	e7fa      	b.n	8013412 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
    return true;
 801341c:	2001      	movs	r0, #1
 801341e:	e7f8      	b.n	8013412 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>

08013420 <_ZN8touchgfx19PainterRGB565BitmapD1Ev>:
 *        might specify for a Canvas Widget (e.g. Shape) is not applied to the bitmap as CWR is
 *        not aware of this rotation.
 *
 * @see AbstractPainter
 */
class PainterRGB565Bitmap : public AbstractPainterRGB565
 8013420:	b510      	push	{r4, lr}
 8013422:	4604      	mov	r4, r0
    virtual ~AbstractPainterRGB565() {}
 8013424:	4b02      	ldr	r3, [pc, #8]	; (8013430 <_ZN8touchgfx19PainterRGB565BitmapD1Ev+0x10>)
 8013426:	6003      	str	r3, [r0, #0]
 8013428:	f7fd fa36 	bl	8010898 <_ZN8touchgfx15AbstractPainterD1Ev>
 801342c:	4620      	mov	r0, r4
 801342e:	bd10      	pop	{r4, pc}
 8013430:	08024ad0 	.word	0x08024ad0

08013434 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>:
 8013434:	b510      	push	{r4, lr}
 8013436:	4604      	mov	r4, r0
 8013438:	4b04      	ldr	r3, [pc, #16]	; (801344c <_ZN8touchgfx19PainterRGB565BitmapD0Ev+0x18>)
 801343a:	6003      	str	r3, [r0, #0]
 801343c:	f7fd fa2c 	bl	8010898 <_ZN8touchgfx15AbstractPainterD1Ev>
 8013440:	212c      	movs	r1, #44	; 0x2c
 8013442:	4620      	mov	r0, r4
 8013444:	f00f fb5c 	bl	8022b00 <_ZdlPvj>
 8013448:	4620      	mov	r0, r4
 801344a:	bd10      	pop	{r4, pc}
 801344c:	08024ad0 	.word	0x08024ad0

08013450 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
{
 8013450:	b570      	push	{r4, r5, r6, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	4605      	mov	r5, r0
    bitmap = bmp;
 8013456:	880b      	ldrh	r3, [r1, #0]
 8013458:	4604      	mov	r4, r0
 801345a:	f824 3f20 	strh.w	r3, [r4, #32]!
        return Rect(0, 0, getWidth(), getHeight());
 801345e:	4620      	mov	r0, r4
 8013460:	f00d fa1e 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013464:	b206      	sxth	r6, r0
 8013466:	4620      	mov	r0, r4
 8013468:	f00d fa52 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
        this->x = x;
 801346c:	2300      	movs	r3, #0
 801346e:	f8ad 3000 	strh.w	r3, [sp]
        this->y = y;
 8013472:	f8ad 3002 	strh.w	r3, [sp, #2]
        this->width = width;
 8013476:	f8ad 6004 	strh.w	r6, [sp, #4]
        this->height = height;
 801347a:	f8ad 0006 	strh.w	r0, [sp, #6]
    bitmapRectToFrameBuffer = bitmap.getRect();
 801347e:	f105 0222 	add.w	r2, r5, #34	; 0x22
 8013482:	466b      	mov	r3, sp
 8013484:	cb03      	ldmia	r3!, {r0, r1}
 8013486:	f8c5 0022 	str.w	r0, [r5, #34]	; 0x22
 801348a:	f8c5 1026 	str.w	r1, [r5, #38]	; 0x26
    DisplayTransformation::transformDisplayToFrameBuffer(bitmapRectToFrameBuffer);
 801348e:	4610      	mov	r0, r2
 8013490:	f00b f8b6 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
}
 8013494:	b002      	add	sp, #8
 8013496:	bd70      	pop	{r4, r5, r6, pc}

08013498 <_ZN8touchgfx19PainterRGB565Bitmap8setAlphaEh>:
    painterAlpha = alpha;
 8013498:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
}
 801349c:	4770      	bx	lr
	...

080134a0 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh>:
PainterRGB565Bitmap::PainterRGB565Bitmap(const Bitmap& bmp, uint8_t alpha) :
 80134a0:	b570      	push	{r4, r5, r6, lr}
 80134a2:	4604      	mov	r4, r0
 80134a4:	460e      	mov	r6, r1
 80134a6:	4615      	mov	r5, r2
    {
 80134a8:	f7fd f9ec 	bl	8010884 <_ZN8touchgfx15AbstractPainterC1Ev>
 80134ac:	4b13      	ldr	r3, [pc, #76]	; (80134fc <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x5c>)
 80134ae:	6023      	str	r3, [r4, #0]
        return instance->lcdRef;
 80134b0:	4b13      	ldr	r3, [pc, #76]	; (8013500 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x60>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	6898      	ldr	r0, [r3, #8]
        assert(HAL::lcd().bitDepth() == 16 && "The chosen painter only works with 16bpp displays");
 80134b6:	6803      	ldr	r3, [r0, #0]
 80134b8:	6a1b      	ldr	r3, [r3, #32]
 80134ba:	4798      	blx	r3
 80134bc:	2810      	cmp	r0, #16
 80134be:	d116      	bne.n	80134ee <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x4e>
    AbstractPainterRGB565(), bitmapARGB8888Pointer(0), bitmapRGB565Pointer(0), bitmapAlphaPointer(0)
 80134c0:	4b10      	ldr	r3, [pc, #64]	; (8013504 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x64>)
 80134c2:	6023      	str	r3, [r4, #0]
 80134c4:	2300      	movs	r3, #0
 80134c6:	6163      	str	r3, [r4, #20]
 80134c8:	61a3      	str	r3, [r4, #24]
 80134ca:	61e3      	str	r3, [r4, #28]
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 80134cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134d0:	8422      	strh	r2, [r4, #32]
        this->x = 0;
 80134d2:	8463      	strh	r3, [r4, #34]	; 0x22
        this->y = 0;
 80134d4:	84a3      	strh	r3, [r4, #36]	; 0x24
        this->width = 0;
 80134d6:	84e3      	strh	r3, [r4, #38]	; 0x26
        this->height = 0;
 80134d8:	8523      	strh	r3, [r4, #40]	; 0x28
    setBitmap(bmp);
 80134da:	4631      	mov	r1, r6
 80134dc:	4620      	mov	r0, r4
 80134de:	f7ff ffb7 	bl	8013450 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    setAlpha(alpha);
 80134e2:	4629      	mov	r1, r5
 80134e4:	4620      	mov	r0, r4
 80134e6:	f7ff ffd7 	bl	8013498 <_ZN8touchgfx19PainterRGB565Bitmap8setAlphaEh>
}
 80134ea:	4620      	mov	r0, r4
 80134ec:	bd70      	pop	{r4, r5, r6, pc}
 80134ee:	4b06      	ldr	r3, [pc, #24]	; (8013508 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x68>)
 80134f0:	4a06      	ldr	r2, [pc, #24]	; (801350c <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x6c>)
 80134f2:	212d      	movs	r1, #45	; 0x2d
 80134f4:	4806      	ldr	r0, [pc, #24]	; (8013510 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x70>)
 80134f6:	f00f fb1f 	bl	8022b38 <__assert_func>
 80134fa:	bf00      	nop
 80134fc:	08024ad0 	.word	0x08024ad0
 8013500:	2000ba4c 	.word	0x2000ba4c
 8013504:	08024f78 	.word	0x08024f78
 8013508:	08024eb4 	.word	0x08024eb4
 801350c:	08024f90 	.word	0x08024f90
 8013510:	08024f08 	.word	0x08024f08

08013514 <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 8013514:	b508      	push	{r3, lr}
    if ((int)p) //idle task sched out
 8013516:	b130      	cbz	r0, 8013526 <_ZL12IdleTaskHookPv+0x12>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8013518:	2101      	movs	r1, #1
 801351a:	4b06      	ldr	r3, [pc, #24]	; (8013534 <_ZL12IdleTaskHookPv+0x20>)
 801351c:	6818      	ldr	r0, [r3, #0]
 801351e:	f008 fee5 	bl	801c2ec <_ZN8touchgfx3HAL12setMCUActiveEb>
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
    }
    return pdTRUE;
}
 8013522:	2001      	movs	r0, #1
 8013524:	bd08      	pop	{r3, pc}
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8013526:	2100      	movs	r1, #0
 8013528:	4b02      	ldr	r3, [pc, #8]	; (8013534 <_ZL12IdleTaskHookPv+0x20>)
 801352a:	6818      	ldr	r0, [r3, #0]
 801352c:	f008 fede 	bl	801c2ec <_ZN8touchgfx3HAL12setMCUActiveEb>
 8013530:	e7f7      	b.n	8013522 <_ZL12IdleTaskHookPv+0xe>
 8013532:	bf00      	nop
 8013534:	2000ba4c 	.word	0x2000ba4c

08013538 <_ZN8touchgfx10OSWrappers10initializeEv>:
{
 8013538:	b508      	push	{r3, lr}
    vSemaphoreCreateBinary(frame_buffer_sem);
 801353a:	2203      	movs	r2, #3
 801353c:	2100      	movs	r1, #0
 801353e:	2001      	movs	r0, #1
 8013540:	f001 f930 	bl	80147a4 <xQueueGenericCreate>
 8013544:	4b07      	ldr	r3, [pc, #28]	; (8013564 <_ZN8touchgfx10OSWrappers10initializeEv+0x2c>)
 8013546:	6018      	str	r0, [r3, #0]
 8013548:	b120      	cbz	r0, 8013554 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
 801354a:	2300      	movs	r3, #0
 801354c:	461a      	mov	r2, r3
 801354e:	4619      	mov	r1, r3
 8013550:	f001 f9b8 	bl	80148c4 <xQueueGenericSend>
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8013554:	2200      	movs	r2, #0
 8013556:	2101      	movs	r1, #1
 8013558:	4608      	mov	r0, r1
 801355a:	f001 f923 	bl	80147a4 <xQueueGenericCreate>
 801355e:	4b02      	ldr	r3, [pc, #8]	; (8013568 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>)
 8013560:	6018      	str	r0, [r3, #0]
}
 8013562:	bd08      	pop	{r3, pc}
 8013564:	20000108 	.word	0x20000108
 8013568:	2000010c 	.word	0x2000010c

0801356c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
{
 801356c:	b508      	push	{r3, lr}
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 801356e:	f04f 31ff 	mov.w	r1, #4294967295
 8013572:	4b02      	ldr	r3, [pc, #8]	; (801357c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8013574:	6818      	ldr	r0, [r3, #0]
 8013576:	f001 fcb7 	bl	8014ee8 <xQueueSemaphoreTake>
}
 801357a:	bd08      	pop	{r3, pc}
 801357c:	20000108 	.word	0x20000108

08013580 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
{
 8013580:	b508      	push	{r3, lr}
    xSemaphoreGive(frame_buffer_sem);
 8013582:	2300      	movs	r3, #0
 8013584:	461a      	mov	r2, r3
 8013586:	4619      	mov	r1, r3
 8013588:	4802      	ldr	r0, [pc, #8]	; (8013594 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801358a:	6800      	ldr	r0, [r0, #0]
 801358c:	f001 f99a 	bl	80148c4 <xQueueGenericSend>
}
 8013590:	bd08      	pop	{r3, pc}
 8013592:	bf00      	nop
 8013594:	20000108 	.word	0x20000108

08013598 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
{
 8013598:	b508      	push	{r3, lr}
    xSemaphoreTake(frame_buffer_sem, 0);
 801359a:	2100      	movs	r1, #0
 801359c:	4b02      	ldr	r3, [pc, #8]	; (80135a8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 801359e:	6818      	ldr	r0, [r3, #0]
 80135a0:	f001 fca2 	bl	8014ee8 <xQueueSemaphoreTake>
}
 80135a4:	bd08      	pop	{r3, pc}
 80135a6:	bf00      	nop
 80135a8:	20000108 	.word	0x20000108

080135ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
{
 80135ac:	b500      	push	{lr}
 80135ae:	b083      	sub	sp, #12
    portBASE_TYPE px = pdFALSE;
 80135b0:	a902      	add	r1, sp, #8
 80135b2:	2300      	movs	r3, #0
 80135b4:	f841 3d04 	str.w	r3, [r1, #-4]!
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80135b8:	4b08      	ldr	r3, [pc, #32]	; (80135dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 80135ba:	6818      	ldr	r0, [r3, #0]
 80135bc:	f001 fb20 	bl	8014c00 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80135c0:	9b01      	ldr	r3, [sp, #4]
 80135c2:	b13b      	cbz	r3, 80135d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
 80135c4:	4b06      	ldr	r3, [pc, #24]	; (80135e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 80135c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ca:	601a      	str	r2, [r3, #0]
 80135cc:	f3bf 8f4f 	dsb	sy
 80135d0:	f3bf 8f6f 	isb	sy
}
 80135d4:	b003      	add	sp, #12
 80135d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80135da:	bf00      	nop
 80135dc:	20000108 	.word	0x20000108
 80135e0:	e000ed04 	.word	0xe000ed04

080135e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    if (vsync_q)
 80135e4:	4b0c      	ldr	r3, [pc, #48]	; (8013618 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 80135e6:	6818      	ldr	r0, [r3, #0]
 80135e8:	b1a8      	cbz	r0, 8013616 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x32>
{
 80135ea:	b500      	push	{lr}
 80135ec:	b083      	sub	sp, #12
        portBASE_TYPE px = pdFALSE;
 80135ee:	2300      	movs	r3, #0
 80135f0:	aa02      	add	r2, sp, #8
 80135f2:	f842 3d04 	str.w	r3, [r2, #-4]!
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80135f6:	4909      	ldr	r1, [pc, #36]	; (801361c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
 80135f8:	f001 fa66 	bl	8014ac8 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 80135fc:	9b01      	ldr	r3, [sp, #4]
 80135fe:	b13b      	cbz	r3, 8013610 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
 8013600:	4b07      	ldr	r3, [pc, #28]	; (8013620 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x3c>)
 8013602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013606:	601a      	str	r2, [r3, #0]
 8013608:	f3bf 8f4f 	dsb	sy
 801360c:	f3bf 8f6f 	isb	sy
}
 8013610:	b003      	add	sp, #12
 8013612:	f85d fb04 	ldr.w	pc, [sp], #4
 8013616:	4770      	bx	lr
 8013618:	2000010c 	.word	0x2000010c
 801361c:	2000004c 	.word	0x2000004c
 8013620:	e000ed04 	.word	0xe000ed04

08013624 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
{
 8013624:	b538      	push	{r3, r4, r5, lr}
    xQueueReceive(vsync_q, &dummy, 0);
 8013626:	4d07      	ldr	r5, [pc, #28]	; (8013644 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x20>)
 8013628:	4c07      	ldr	r4, [pc, #28]	; (8013648 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 801362a:	2200      	movs	r2, #0
 801362c:	4629      	mov	r1, r5
 801362e:	6820      	ldr	r0, [r4, #0]
 8013630:	f001 fb78 	bl	8014d24 <xQueueReceive>
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8013634:	f04f 32ff 	mov.w	r2, #4294967295
 8013638:	4629      	mov	r1, r5
 801363a:	6820      	ldr	r0, [r4, #0]
 801363c:	f001 fb72 	bl	8014d24 <xQueueReceive>
}
 8013640:	bd38      	pop	{r3, r4, r5, pc}
 8013642:	bf00      	nop
 8013644:	2000004c 	.word	0x2000004c
 8013648:	2000010c 	.word	0x2000010c

0801364c <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 801364c:	e7fe      	b.n	801364c <vApplicationStackOverflowHook>

0801364e <vApplicationMallocFailedHook>:
        while (1);
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 801364e:	e7fe      	b.n	801364e <vApplicationMallocFailedHook>

08013650 <vApplicationIdleHook>:
        while (1);
    }

    void vApplicationIdleHook(void)
    {
 8013650:	b508      	push	{r3, lr}
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8013652:	4902      	ldr	r1, [pc, #8]	; (801365c <vApplicationIdleHook+0xc>)
 8013654:	2000      	movs	r0, #0
 8013656:	f002 fa8d 	bl	8015b74 <vTaskSetApplicationTaskTag>
    }
 801365a:	bd08      	pop	{r3, pc}
 801365c:	08013515 	.word	0x08013515

08013660 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	4603      	mov	r3, r0
 8013668:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801366a:	79fb      	ldrb	r3, [r7, #7]
 801366c:	4a08      	ldr	r2, [pc, #32]	; (8013690 <disk_status+0x30>)
 801366e:	009b      	lsls	r3, r3, #2
 8013670:	4413      	add	r3, r2
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	685b      	ldr	r3, [r3, #4]
 8013676:	79fa      	ldrb	r2, [r7, #7]
 8013678:	4905      	ldr	r1, [pc, #20]	; (8013690 <disk_status+0x30>)
 801367a:	440a      	add	r2, r1
 801367c:	7a12      	ldrb	r2, [r2, #8]
 801367e:	4610      	mov	r0, r2
 8013680:	4798      	blx	r3
 8013682:	4603      	mov	r3, r0
 8013684:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013686:	7bfb      	ldrb	r3, [r7, #15]
}
 8013688:	4618      	mov	r0, r3
 801368a:	3710      	adds	r7, #16
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}
 8013690:	20000138 	.word	0x20000138

08013694 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	4603      	mov	r3, r0
 801369c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801369e:	2300      	movs	r3, #0
 80136a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80136a2:	79fb      	ldrb	r3, [r7, #7]
 80136a4:	4a0d      	ldr	r2, [pc, #52]	; (80136dc <disk_initialize+0x48>)
 80136a6:	5cd3      	ldrb	r3, [r2, r3]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d111      	bne.n	80136d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80136ac:	79fb      	ldrb	r3, [r7, #7]
 80136ae:	4a0b      	ldr	r2, [pc, #44]	; (80136dc <disk_initialize+0x48>)
 80136b0:	2101      	movs	r1, #1
 80136b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80136b4:	79fb      	ldrb	r3, [r7, #7]
 80136b6:	4a09      	ldr	r2, [pc, #36]	; (80136dc <disk_initialize+0x48>)
 80136b8:	009b      	lsls	r3, r3, #2
 80136ba:	4413      	add	r3, r2
 80136bc:	685b      	ldr	r3, [r3, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	79fa      	ldrb	r2, [r7, #7]
 80136c2:	4906      	ldr	r1, [pc, #24]	; (80136dc <disk_initialize+0x48>)
 80136c4:	440a      	add	r2, r1
 80136c6:	7a12      	ldrb	r2, [r2, #8]
 80136c8:	4610      	mov	r0, r2
 80136ca:	4798      	blx	r3
 80136cc:	4603      	mov	r3, r0
 80136ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80136d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3710      	adds	r7, #16
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	20000138 	.word	0x20000138

080136e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80136e0:	b590      	push	{r4, r7, lr}
 80136e2:	b087      	sub	sp, #28
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	60b9      	str	r1, [r7, #8]
 80136e8:	607a      	str	r2, [r7, #4]
 80136ea:	603b      	str	r3, [r7, #0]
 80136ec:	4603      	mov	r3, r0
 80136ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80136f0:	7bfb      	ldrb	r3, [r7, #15]
 80136f2:	4a0a      	ldr	r2, [pc, #40]	; (801371c <disk_read+0x3c>)
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	4413      	add	r3, r2
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	689c      	ldr	r4, [r3, #8]
 80136fc:	7bfb      	ldrb	r3, [r7, #15]
 80136fe:	4a07      	ldr	r2, [pc, #28]	; (801371c <disk_read+0x3c>)
 8013700:	4413      	add	r3, r2
 8013702:	7a18      	ldrb	r0, [r3, #8]
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	68b9      	ldr	r1, [r7, #8]
 801370a:	47a0      	blx	r4
 801370c:	4603      	mov	r3, r0
 801370e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013710:	7dfb      	ldrb	r3, [r7, #23]
}
 8013712:	4618      	mov	r0, r3
 8013714:	371c      	adds	r7, #28
 8013716:	46bd      	mov	sp, r7
 8013718:	bd90      	pop	{r4, r7, pc}
 801371a:	bf00      	nop
 801371c:	20000138 	.word	0x20000138

08013720 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013720:	b590      	push	{r4, r7, lr}
 8013722:	b087      	sub	sp, #28
 8013724:	af00      	add	r7, sp, #0
 8013726:	60b9      	str	r1, [r7, #8]
 8013728:	607a      	str	r2, [r7, #4]
 801372a:	603b      	str	r3, [r7, #0]
 801372c:	4603      	mov	r3, r0
 801372e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013730:	7bfb      	ldrb	r3, [r7, #15]
 8013732:	4a0a      	ldr	r2, [pc, #40]	; (801375c <disk_write+0x3c>)
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	4413      	add	r3, r2
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	68dc      	ldr	r4, [r3, #12]
 801373c:	7bfb      	ldrb	r3, [r7, #15]
 801373e:	4a07      	ldr	r2, [pc, #28]	; (801375c <disk_write+0x3c>)
 8013740:	4413      	add	r3, r2
 8013742:	7a18      	ldrb	r0, [r3, #8]
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	68b9      	ldr	r1, [r7, #8]
 801374a:	47a0      	blx	r4
 801374c:	4603      	mov	r3, r0
 801374e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013750:	7dfb      	ldrb	r3, [r7, #23]
}
 8013752:	4618      	mov	r0, r3
 8013754:	371c      	adds	r7, #28
 8013756:	46bd      	mov	sp, r7
 8013758:	bd90      	pop	{r4, r7, pc}
 801375a:	bf00      	nop
 801375c:	20000138 	.word	0x20000138

08013760 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013760:	b480      	push	{r7}
 8013762:	b085      	sub	sp, #20
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	3301      	adds	r3, #1
 801376c:	781b      	ldrb	r3, [r3, #0]
 801376e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013770:	89fb      	ldrh	r3, [r7, #14]
 8013772:	021b      	lsls	r3, r3, #8
 8013774:	b21a      	sxth	r2, r3
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	b21b      	sxth	r3, r3
 801377c:	4313      	orrs	r3, r2
 801377e:	b21b      	sxth	r3, r3
 8013780:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013782:	89fb      	ldrh	r3, [r7, #14]
}
 8013784:	4618      	mov	r0, r3
 8013786:	3714      	adds	r7, #20
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr

08013790 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013790:	b480      	push	{r7}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	3303      	adds	r3, #3
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	021b      	lsls	r3, r3, #8
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	3202      	adds	r2, #2
 80137a8:	7812      	ldrb	r2, [r2, #0]
 80137aa:	4313      	orrs	r3, r2
 80137ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	021b      	lsls	r3, r3, #8
 80137b2:	687a      	ldr	r2, [r7, #4]
 80137b4:	3201      	adds	r2, #1
 80137b6:	7812      	ldrb	r2, [r2, #0]
 80137b8:	4313      	orrs	r3, r2
 80137ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	021b      	lsls	r3, r3, #8
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	7812      	ldrb	r2, [r2, #0]
 80137c4:	4313      	orrs	r3, r2
 80137c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80137c8:	68fb      	ldr	r3, [r7, #12]
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3714      	adds	r7, #20
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr

080137d6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80137d6:	b580      	push	{r7, lr}
 80137d8:	b082      	sub	sp, #8
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d009      	beq.n	80137f8 <lock_fs+0x22>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 fc92 	bl	8014112 <ff_req_grant>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d001      	beq.n	80137f8 <lock_fs+0x22>
 80137f4:	2301      	movs	r3, #1
 80137f6:	e000      	b.n	80137fa <lock_fs+0x24>
 80137f8:	2300      	movs	r3, #0
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3708      	adds	r7, #8
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013802:	b580      	push	{r7, lr}
 8013804:	b082      	sub	sp, #8
 8013806:	af00      	add	r7, sp, #0
 8013808:	6078      	str	r0, [r7, #4]
 801380a:	460b      	mov	r3, r1
 801380c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00d      	beq.n	8013830 <unlock_fs+0x2e>
 8013814:	78fb      	ldrb	r3, [r7, #3]
 8013816:	2b0c      	cmp	r3, #12
 8013818:	d00a      	beq.n	8013830 <unlock_fs+0x2e>
 801381a:	78fb      	ldrb	r3, [r7, #3]
 801381c:	2b0b      	cmp	r3, #11
 801381e:	d007      	beq.n	8013830 <unlock_fs+0x2e>
 8013820:	78fb      	ldrb	r3, [r7, #3]
 8013822:	2b0f      	cmp	r3, #15
 8013824:	d004      	beq.n	8013830 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	4618      	mov	r0, r3
 801382c:	f000 fc86 	bl	801413c <ff_rel_grant>
	}
}
 8013830:	bf00      	nop
 8013832:	3708      	adds	r7, #8
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}

08013838 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013838:	b480      	push	{r7}
 801383a:	b085      	sub	sp, #20
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013840:	2300      	movs	r3, #0
 8013842:	60fb      	str	r3, [r7, #12]
 8013844:	e010      	b.n	8013868 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013846:	4a0d      	ldr	r2, [pc, #52]	; (801387c <clear_lock+0x44>)
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	011b      	lsls	r3, r3, #4
 801384c:	4413      	add	r3, r2
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	687a      	ldr	r2, [r7, #4]
 8013852:	429a      	cmp	r2, r3
 8013854:	d105      	bne.n	8013862 <clear_lock+0x2a>
 8013856:	4a09      	ldr	r2, [pc, #36]	; (801387c <clear_lock+0x44>)
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	011b      	lsls	r3, r3, #4
 801385c:	4413      	add	r3, r2
 801385e:	2200      	movs	r2, #0
 8013860:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	3301      	adds	r3, #1
 8013866:	60fb      	str	r3, [r7, #12]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d9eb      	bls.n	8013846 <clear_lock+0xe>
	}
}
 801386e:	bf00      	nop
 8013870:	3714      	adds	r7, #20
 8013872:	46bd      	mov	sp, r7
 8013874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013878:	4770      	bx	lr
 801387a:	bf00      	nop
 801387c:	20000118 	.word	0x20000118

08013880 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b086      	sub	sp, #24
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013888:	2300      	movs	r3, #0
 801388a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	78db      	ldrb	r3, [r3, #3]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d034      	beq.n	80138fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013898:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	7858      	ldrb	r0, [r3, #1]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80138a4:	2301      	movs	r3, #1
 80138a6:	697a      	ldr	r2, [r7, #20]
 80138a8:	f7ff ff3a 	bl	8013720 <disk_write>
 80138ac:	4603      	mov	r3, r0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d002      	beq.n	80138b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80138b2:	2301      	movs	r3, #1
 80138b4:	73fb      	strb	r3, [r7, #15]
 80138b6:	e022      	b.n	80138fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2200      	movs	r2, #0
 80138bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138c2:	697a      	ldr	r2, [r7, #20]
 80138c4:	1ad2      	subs	r2, r2, r3
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	69db      	ldr	r3, [r3, #28]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d217      	bcs.n	80138fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	789b      	ldrb	r3, [r3, #2]
 80138d2:	613b      	str	r3, [r7, #16]
 80138d4:	e010      	b.n	80138f8 <sync_window+0x78>
					wsect += fs->fsize;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	69db      	ldr	r3, [r3, #28]
 80138da:	697a      	ldr	r2, [r7, #20]
 80138dc:	4413      	add	r3, r2
 80138de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	7858      	ldrb	r0, [r3, #1]
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80138ea:	2301      	movs	r3, #1
 80138ec:	697a      	ldr	r2, [r7, #20]
 80138ee:	f7ff ff17 	bl	8013720 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	3b01      	subs	r3, #1
 80138f6:	613b      	str	r3, [r7, #16]
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	d8eb      	bhi.n	80138d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80138fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013900:	4618      	mov	r0, r3
 8013902:	3718      	adds	r7, #24
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013912:	2300      	movs	r3, #0
 8013914:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801391a:	683a      	ldr	r2, [r7, #0]
 801391c:	429a      	cmp	r2, r3
 801391e:	d01b      	beq.n	8013958 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f7ff ffad 	bl	8013880 <sync_window>
 8013926:	4603      	mov	r3, r0
 8013928:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801392a:	7bfb      	ldrb	r3, [r7, #15]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d113      	bne.n	8013958 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	7858      	ldrb	r0, [r3, #1]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801393a:	2301      	movs	r3, #1
 801393c:	683a      	ldr	r2, [r7, #0]
 801393e:	f7ff fecf 	bl	80136e0 <disk_read>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d004      	beq.n	8013952 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013948:	f04f 33ff 	mov.w	r3, #4294967295
 801394c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801394e:	2301      	movs	r3, #1
 8013950:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	683a      	ldr	r2, [r7, #0]
 8013956:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013958:	7bfb      	ldrb	r3, [r7, #15]
}
 801395a:	4618      	mov	r0, r3
 801395c:	3710      	adds	r7, #16
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}

08013962 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013962:	b480      	push	{r7}
 8013964:	b087      	sub	sp, #28
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801396a:	f04f 33ff 	mov.w	r3, #4294967295
 801396e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d031      	beq.n	80139dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	617b      	str	r3, [r7, #20]
 801397e:	e002      	b.n	8013986 <get_ldnumber+0x24>
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	3301      	adds	r3, #1
 8013984:	617b      	str	r3, [r7, #20]
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	2b20      	cmp	r3, #32
 801398c:	d903      	bls.n	8013996 <get_ldnumber+0x34>
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	2b3a      	cmp	r3, #58	; 0x3a
 8013994:	d1f4      	bne.n	8013980 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	2b3a      	cmp	r3, #58	; 0x3a
 801399c:	d11c      	bne.n	80139d8 <get_ldnumber+0x76>
			tp = *path;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	1c5a      	adds	r2, r3, #1
 80139a8:	60fa      	str	r2, [r7, #12]
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	3b30      	subs	r3, #48	; 0x30
 80139ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	2b09      	cmp	r3, #9
 80139b4:	d80e      	bhi.n	80139d4 <get_ldnumber+0x72>
 80139b6:	68fa      	ldr	r2, [r7, #12]
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d10a      	bne.n	80139d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d107      	bne.n	80139d4 <get_ldnumber+0x72>
					vol = (int)i;
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	3301      	adds	r3, #1
 80139cc:	617b      	str	r3, [r7, #20]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	697a      	ldr	r2, [r7, #20]
 80139d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	e002      	b.n	80139de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80139d8:	2300      	movs	r3, #0
 80139da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80139dc:	693b      	ldr	r3, [r7, #16]
}
 80139de:	4618      	mov	r0, r3
 80139e0:	371c      	adds	r7, #28
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr
	...

080139ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b082      	sub	sp, #8
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2200      	movs	r2, #0
 80139fa:	70da      	strb	r2, [r3, #3]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013a02:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013a04:	6839      	ldr	r1, [r7, #0]
 8013a06:	6878      	ldr	r0, [r7, #4]
 8013a08:	f7ff ff7e 	bl	8013908 <move_window>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d001      	beq.n	8013a16 <check_fs+0x2a>
 8013a12:	2304      	movs	r3, #4
 8013a14:	e038      	b.n	8013a88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	3334      	adds	r3, #52	; 0x34
 8013a1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7ff fe9e 	bl	8013760 <ld_word>
 8013a24:	4603      	mov	r3, r0
 8013a26:	461a      	mov	r2, r3
 8013a28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d001      	beq.n	8013a34 <check_fs+0x48>
 8013a30:	2303      	movs	r3, #3
 8013a32:	e029      	b.n	8013a88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013a3a:	2be9      	cmp	r3, #233	; 0xe9
 8013a3c:	d009      	beq.n	8013a52 <check_fs+0x66>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013a44:	2beb      	cmp	r3, #235	; 0xeb
 8013a46:	d11e      	bne.n	8013a86 <check_fs+0x9a>
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013a4e:	2b90      	cmp	r3, #144	; 0x90
 8013a50:	d119      	bne.n	8013a86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	3334      	adds	r3, #52	; 0x34
 8013a56:	3336      	adds	r3, #54	; 0x36
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7ff fe99 	bl	8013790 <ld_dword>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013a64:	4a0a      	ldr	r2, [pc, #40]	; (8013a90 <check_fs+0xa4>)
 8013a66:	4293      	cmp	r3, r2
 8013a68:	d101      	bne.n	8013a6e <check_fs+0x82>
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	e00c      	b.n	8013a88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	3334      	adds	r3, #52	; 0x34
 8013a72:	3352      	adds	r3, #82	; 0x52
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7ff fe8b 	bl	8013790 <ld_dword>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	4b05      	ldr	r3, [pc, #20]	; (8013a94 <check_fs+0xa8>)
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	d101      	bne.n	8013a86 <check_fs+0x9a>
 8013a82:	2300      	movs	r3, #0
 8013a84:	e000      	b.n	8013a88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013a86:	2302      	movs	r3, #2
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	00544146 	.word	0x00544146
 8013a94:	33544146 	.word	0x33544146

08013a98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b096      	sub	sp, #88	; 0x58
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	60f8      	str	r0, [r7, #12]
 8013aa0:	60b9      	str	r1, [r7, #8]
 8013aa2:	4613      	mov	r3, r2
 8013aa4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013aac:	68f8      	ldr	r0, [r7, #12]
 8013aae:	f7ff ff58 	bl	8013962 <get_ldnumber>
 8013ab2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	da01      	bge.n	8013abe <find_volume+0x26>
 8013aba:	230b      	movs	r3, #11
 8013abc:	e236      	b.n	8013f2c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013abe:	4aac      	ldr	r2, [pc, #688]	; (8013d70 <find_volume+0x2d8>)
 8013ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ac6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d101      	bne.n	8013ad2 <find_volume+0x3a>
 8013ace:	230c      	movs	r3, #12
 8013ad0:	e22c      	b.n	8013f2c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8013ad2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013ad4:	f7ff fe7f 	bl	80137d6 <lock_fs>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d101      	bne.n	8013ae2 <find_volume+0x4a>
 8013ade:	230f      	movs	r3, #15
 8013ae0:	e224      	b.n	8013f2c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ae6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013ae8:	79fb      	ldrb	r3, [r7, #7]
 8013aea:	f023 0301 	bic.w	r3, r3, #1
 8013aee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af2:	781b      	ldrb	r3, [r3, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d01a      	beq.n	8013b2e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013afa:	785b      	ldrb	r3, [r3, #1]
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7ff fdaf 	bl	8013660 <disk_status>
 8013b02:	4603      	mov	r3, r0
 8013b04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d10c      	bne.n	8013b2e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013b14:	79fb      	ldrb	r3, [r7, #7]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d007      	beq.n	8013b2a <find_volume+0x92>
 8013b1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b1e:	f003 0304 	and.w	r3, r3, #4
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d001      	beq.n	8013b2a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013b26:	230a      	movs	r3, #10
 8013b28:	e200      	b.n	8013f2c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	e1fe      	b.n	8013f2c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b30:	2200      	movs	r2, #0
 8013b32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b36:	b2da      	uxtb	r2, r3
 8013b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b3e:	785b      	ldrb	r3, [r3, #1]
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7ff fda7 	bl	8013694 <disk_initialize>
 8013b46:	4603      	mov	r3, r0
 8013b48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013b4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b50:	f003 0301 	and.w	r3, r3, #1
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d001      	beq.n	8013b5c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013b58:	2303      	movs	r3, #3
 8013b5a:	e1e7      	b.n	8013f2c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013b5c:	79fb      	ldrb	r3, [r7, #7]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d007      	beq.n	8013b72 <find_volume+0xda>
 8013b62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b66:	f003 0304 	and.w	r3, r3, #4
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d001      	beq.n	8013b72 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013b6e:	230a      	movs	r3, #10
 8013b70:	e1dc      	b.n	8013f2c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013b72:	2300      	movs	r3, #0
 8013b74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013b76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b7a:	f7ff ff37 	bl	80139ec <check_fs>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013b84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b88:	2b02      	cmp	r3, #2
 8013b8a:	d14b      	bne.n	8013c24 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8013b90:	e01f      	b.n	8013bd2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b9a:	011b      	lsls	r3, r3, #4
 8013b9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013ba0:	4413      	add	r3, r2
 8013ba2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba6:	3304      	adds	r3, #4
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d006      	beq.n	8013bbc <find_volume+0x124>
 8013bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb0:	3308      	adds	r3, #8
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7ff fdec 	bl	8013790 <ld_dword>
 8013bb8:	4602      	mov	r2, r0
 8013bba:	e000      	b.n	8013bbe <find_volume+0x126>
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013bc6:	440b      	add	r3, r1
 8013bc8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bce:	3301      	adds	r3, #1
 8013bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8013bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bd4:	2b03      	cmp	r3, #3
 8013bd6:	d9dc      	bls.n	8013b92 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013bd8:	2300      	movs	r3, #0
 8013bda:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d002      	beq.n	8013be8 <find_volume+0x150>
 8013be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013be4:	3b01      	subs	r3, #1
 8013be6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013bf0:	4413      	add	r3, r2
 8013bf2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013bf6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d005      	beq.n	8013c0a <find_volume+0x172>
 8013bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013c00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c02:	f7ff fef3 	bl	80139ec <check_fs>
 8013c06:	4603      	mov	r3, r0
 8013c08:	e000      	b.n	8013c0c <find_volume+0x174>
 8013c0a:	2303      	movs	r3, #3
 8013c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	d905      	bls.n	8013c24 <find_volume+0x18c>
 8013c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8013c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c20:	2b03      	cmp	r3, #3
 8013c22:	d9e1      	bls.n	8013be8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013c24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c28:	2b04      	cmp	r3, #4
 8013c2a:	d101      	bne.n	8013c30 <find_volume+0x198>
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	e17d      	b.n	8013f2c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	d901      	bls.n	8013c3c <find_volume+0x1a4>
 8013c38:	230d      	movs	r3, #13
 8013c3a:	e177      	b.n	8013f2c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3e:	3334      	adds	r3, #52	; 0x34
 8013c40:	330b      	adds	r3, #11
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ff fd8c 	bl	8013760 <ld_word>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c4e:	d001      	beq.n	8013c54 <find_volume+0x1bc>
 8013c50:	230d      	movs	r3, #13
 8013c52:	e16b      	b.n	8013f2c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c56:	3334      	adds	r3, #52	; 0x34
 8013c58:	3316      	adds	r3, #22
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7ff fd80 	bl	8013760 <ld_word>
 8013c60:	4603      	mov	r3, r0
 8013c62:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d106      	bne.n	8013c78 <find_volume+0x1e0>
 8013c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c6c:	3334      	adds	r3, #52	; 0x34
 8013c6e:	3324      	adds	r3, #36	; 0x24
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff fd8d 	bl	8013790 <ld_dword>
 8013c76:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013c7c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c80:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c8a:	789b      	ldrb	r3, [r3, #2]
 8013c8c:	2b01      	cmp	r3, #1
 8013c8e:	d005      	beq.n	8013c9c <find_volume+0x204>
 8013c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c92:	789b      	ldrb	r3, [r3, #2]
 8013c94:	2b02      	cmp	r3, #2
 8013c96:	d001      	beq.n	8013c9c <find_volume+0x204>
 8013c98:	230d      	movs	r3, #13
 8013c9a:	e147      	b.n	8013f2c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c9e:	789b      	ldrb	r3, [r3, #2]
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ca4:	fb02 f303 	mul.w	r3, r2, r3
 8013ca8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb8:	895b      	ldrh	r3, [r3, #10]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d008      	beq.n	8013cd0 <find_volume+0x238>
 8013cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc0:	895b      	ldrh	r3, [r3, #10]
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc6:	895b      	ldrh	r3, [r3, #10]
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	4013      	ands	r3, r2
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d001      	beq.n	8013cd4 <find_volume+0x23c>
 8013cd0:	230d      	movs	r3, #13
 8013cd2:	e12b      	b.n	8013f2c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd6:	3334      	adds	r3, #52	; 0x34
 8013cd8:	3311      	adds	r3, #17
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7ff fd40 	bl	8013760 <ld_word>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ce6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cea:	891b      	ldrh	r3, [r3, #8]
 8013cec:	f003 030f 	and.w	r3, r3, #15
 8013cf0:	b29b      	uxth	r3, r3
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d001      	beq.n	8013cfa <find_volume+0x262>
 8013cf6:	230d      	movs	r3, #13
 8013cf8:	e118      	b.n	8013f2c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cfc:	3334      	adds	r3, #52	; 0x34
 8013cfe:	3313      	adds	r3, #19
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7ff fd2d 	bl	8013760 <ld_word>
 8013d06:	4603      	mov	r3, r0
 8013d08:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d106      	bne.n	8013d1e <find_volume+0x286>
 8013d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d12:	3334      	adds	r3, #52	; 0x34
 8013d14:	3320      	adds	r3, #32
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7ff fd3a 	bl	8013790 <ld_dword>
 8013d1c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d20:	3334      	adds	r3, #52	; 0x34
 8013d22:	330e      	adds	r3, #14
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7ff fd1b 	bl	8013760 <ld_word>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013d2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d101      	bne.n	8013d38 <find_volume+0x2a0>
 8013d34:	230d      	movs	r3, #13
 8013d36:	e0f9      	b.n	8013f2c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013d38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d3c:	4413      	add	r3, r2
 8013d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d40:	8912      	ldrh	r2, [r2, #8]
 8013d42:	0912      	lsrs	r2, r2, #4
 8013d44:	b292      	uxth	r2, r2
 8013d46:	4413      	add	r3, r2
 8013d48:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d201      	bcs.n	8013d56 <find_volume+0x2be>
 8013d52:	230d      	movs	r3, #13
 8013d54:	e0ea      	b.n	8013f2c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5a:	1ad3      	subs	r3, r2, r3
 8013d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d5e:	8952      	ldrh	r2, [r2, #10]
 8013d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d64:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d103      	bne.n	8013d74 <find_volume+0x2dc>
 8013d6c:	230d      	movs	r3, #13
 8013d6e:	e0dd      	b.n	8013f2c <find_volume+0x494>
 8013d70:	20000110 	.word	0x20000110
		fmt = FS_FAT32;
 8013d74:	2303      	movs	r3, #3
 8013d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013d80:	4293      	cmp	r3, r2
 8013d82:	d802      	bhi.n	8013d8a <find_volume+0x2f2>
 8013d84:	2302      	movs	r3, #2
 8013d86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013d90:	4293      	cmp	r3, r2
 8013d92:	d802      	bhi.n	8013d9a <find_volume+0x302>
 8013d94:	2301      	movs	r3, #1
 8013d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9c:	1c9a      	adds	r2, r3, #2
 8013d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8013da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013da6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013da8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dac:	441a      	add	r2, r3
 8013dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8013db2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db6:	441a      	add	r2, r3
 8013db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dba:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8013dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dc0:	2b03      	cmp	r3, #3
 8013dc2:	d11e      	bne.n	8013e02 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc6:	3334      	adds	r3, #52	; 0x34
 8013dc8:	332a      	adds	r3, #42	; 0x2a
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7ff fcc8 	bl	8013760 <ld_word>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d001      	beq.n	8013dda <find_volume+0x342>
 8013dd6:	230d      	movs	r3, #13
 8013dd8:	e0a8      	b.n	8013f2c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ddc:	891b      	ldrh	r3, [r3, #8]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d001      	beq.n	8013de6 <find_volume+0x34e>
 8013de2:	230d      	movs	r3, #13
 8013de4:	e0a2      	b.n	8013f2c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de8:	3334      	adds	r3, #52	; 0x34
 8013dea:	332c      	adds	r3, #44	; 0x2c
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7ff fccf 	bl	8013790 <ld_dword>
 8013df2:	4602      	mov	r2, r0
 8013df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dfa:	699b      	ldr	r3, [r3, #24]
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8013e00:	e01f      	b.n	8013e42 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e04:	891b      	ldrh	r3, [r3, #8]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d101      	bne.n	8013e0e <find_volume+0x376>
 8013e0a:	230d      	movs	r3, #13
 8013e0c:	e08e      	b.n	8013f2c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e14:	441a      	add	r2, r3
 8013e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e18:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e1e:	2b02      	cmp	r3, #2
 8013e20:	d103      	bne.n	8013e2a <find_volume+0x392>
 8013e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e24:	699b      	ldr	r3, [r3, #24]
 8013e26:	005b      	lsls	r3, r3, #1
 8013e28:	e00a      	b.n	8013e40 <find_volume+0x3a8>
 8013e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2c:	699a      	ldr	r2, [r3, #24]
 8013e2e:	4613      	mov	r3, r2
 8013e30:	005b      	lsls	r3, r3, #1
 8013e32:	4413      	add	r3, r2
 8013e34:	085a      	lsrs	r2, r3, #1
 8013e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e38:	699b      	ldr	r3, [r3, #24]
 8013e3a:	f003 0301 	and.w	r3, r3, #1
 8013e3e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013e40:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e44:	69da      	ldr	r2, [r3, #28]
 8013e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013e4c:	0a5b      	lsrs	r3, r3, #9
 8013e4e:	429a      	cmp	r2, r3
 8013e50:	d201      	bcs.n	8013e56 <find_volume+0x3be>
 8013e52:	230d      	movs	r3, #13
 8013e54:	e06a      	b.n	8013f2c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e58:	f04f 32ff 	mov.w	r2, #4294967295
 8013e5c:	615a      	str	r2, [r3, #20]
 8013e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e60:	695a      	ldr	r2, [r3, #20]
 8013e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e64:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e68:	2280      	movs	r2, #128	; 0x80
 8013e6a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e70:	2b03      	cmp	r3, #3
 8013e72:	d149      	bne.n	8013f08 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e76:	3334      	adds	r3, #52	; 0x34
 8013e78:	3330      	adds	r3, #48	; 0x30
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7ff fc70 	bl	8013760 <ld_word>
 8013e80:	4603      	mov	r3, r0
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d140      	bne.n	8013f08 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e88:	3301      	adds	r3, #1
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e8e:	f7ff fd3b 	bl	8013908 <move_window>
 8013e92:	4603      	mov	r3, r0
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d137      	bne.n	8013f08 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8013e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea0:	3334      	adds	r3, #52	; 0x34
 8013ea2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7ff fc5a 	bl	8013760 <ld_word>
 8013eac:	4603      	mov	r3, r0
 8013eae:	461a      	mov	r2, r3
 8013eb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d127      	bne.n	8013f08 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eba:	3334      	adds	r3, #52	; 0x34
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7ff fc67 	bl	8013790 <ld_dword>
 8013ec2:	4602      	mov	r2, r0
 8013ec4:	4b1b      	ldr	r3, [pc, #108]	; (8013f34 <find_volume+0x49c>)
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	d11e      	bne.n	8013f08 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ecc:	3334      	adds	r3, #52	; 0x34
 8013ece:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ff fc5c 	bl	8013790 <ld_dword>
 8013ed8:	4602      	mov	r2, r0
 8013eda:	4b17      	ldr	r3, [pc, #92]	; (8013f38 <find_volume+0x4a0>)
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d113      	bne.n	8013f08 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee2:	3334      	adds	r3, #52	; 0x34
 8013ee4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7ff fc51 	bl	8013790 <ld_dword>
 8013eee:	4602      	mov	r2, r0
 8013ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef6:	3334      	adds	r3, #52	; 0x34
 8013ef8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7ff fc47 	bl	8013790 <ld_dword>
 8013f02:	4602      	mov	r2, r0
 8013f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f06:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f0a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013f0e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013f10:	4b0a      	ldr	r3, [pc, #40]	; (8013f3c <find_volume+0x4a4>)
 8013f12:	881b      	ldrh	r3, [r3, #0]
 8013f14:	3301      	adds	r3, #1
 8013f16:	b29a      	uxth	r2, r3
 8013f18:	4b08      	ldr	r3, [pc, #32]	; (8013f3c <find_volume+0x4a4>)
 8013f1a:	801a      	strh	r2, [r3, #0]
 8013f1c:	4b07      	ldr	r3, [pc, #28]	; (8013f3c <find_volume+0x4a4>)
 8013f1e:	881a      	ldrh	r2, [r3, #0]
 8013f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f22:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013f24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f26:	f7ff fc87 	bl	8013838 <clear_lock>
#endif
	return FR_OK;
 8013f2a:	2300      	movs	r3, #0
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3758      	adds	r7, #88	; 0x58
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	41615252 	.word	0x41615252
 8013f38:	61417272 	.word	0x61417272
 8013f3c:	20000114 	.word	0x20000114

08013f40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b088      	sub	sp, #32
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013f52:	f107 0310 	add.w	r3, r7, #16
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7ff fd03 	bl	8013962 <get_ldnumber>
 8013f5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	da01      	bge.n	8013f68 <f_mount+0x28>
 8013f64:	230b      	movs	r3, #11
 8013f66:	e048      	b.n	8013ffa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013f68:	4a26      	ldr	r2, [pc, #152]	; (8014004 <f_mount+0xc4>)
 8013f6a:	69fb      	ldr	r3, [r7, #28]
 8013f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d00f      	beq.n	8013f98 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013f78:	69b8      	ldr	r0, [r7, #24]
 8013f7a:	f7ff fc5d 	bl	8013838 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	68db      	ldr	r3, [r3, #12]
 8013f82:	4618      	mov	r0, r3
 8013f84:	f000 f8b9 	bl	80140fa <ff_del_syncobj>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d101      	bne.n	8013f92 <f_mount+0x52>
 8013f8e:	2302      	movs	r3, #2
 8013f90:	e033      	b.n	8013ffa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	2200      	movs	r2, #0
 8013f96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00f      	beq.n	8013fbe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	b2da      	uxtb	r2, r3
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	330c      	adds	r3, #12
 8013fac:	4619      	mov	r1, r3
 8013fae:	4610      	mov	r0, r2
 8013fb0:	f000 f885 	bl	80140be <ff_cre_syncobj>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d101      	bne.n	8013fbe <f_mount+0x7e>
 8013fba:	2302      	movs	r3, #2
 8013fbc:	e01d      	b.n	8013ffa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013fbe:	68fa      	ldr	r2, [r7, #12]
 8013fc0:	4910      	ldr	r1, [pc, #64]	; (8014004 <f_mount+0xc4>)
 8013fc2:	69fb      	ldr	r3, [r7, #28]
 8013fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d002      	beq.n	8013fd4 <f_mount+0x94>
 8013fce:	79fb      	ldrb	r3, [r7, #7]
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	d001      	beq.n	8013fd8 <f_mount+0x98>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	e010      	b.n	8013ffa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013fd8:	f107 010c 	add.w	r1, r7, #12
 8013fdc:	f107 0308 	add.w	r3, r7, #8
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7ff fd58 	bl	8013a98 <find_volume>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	7dfa      	ldrb	r2, [r7, #23]
 8013ff0:	4611      	mov	r1, r2
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7ff fc05 	bl	8013802 <unlock_fs>
 8013ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3720      	adds	r7, #32
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
 8014002:	bf00      	nop
 8014004:	20000110 	.word	0x20000110

08014008 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014008:	b480      	push	{r7}
 801400a:	b087      	sub	sp, #28
 801400c:	af00      	add	r7, sp, #0
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	4613      	mov	r3, r2
 8014014:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014016:	2301      	movs	r3, #1
 8014018:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801401a:	2300      	movs	r3, #0
 801401c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801401e:	4b1f      	ldr	r3, [pc, #124]	; (801409c <FATFS_LinkDriverEx+0x94>)
 8014020:	7a5b      	ldrb	r3, [r3, #9]
 8014022:	b2db      	uxtb	r3, r3
 8014024:	2b00      	cmp	r3, #0
 8014026:	d131      	bne.n	801408c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014028:	4b1c      	ldr	r3, [pc, #112]	; (801409c <FATFS_LinkDriverEx+0x94>)
 801402a:	7a5b      	ldrb	r3, [r3, #9]
 801402c:	b2db      	uxtb	r3, r3
 801402e:	461a      	mov	r2, r3
 8014030:	4b1a      	ldr	r3, [pc, #104]	; (801409c <FATFS_LinkDriverEx+0x94>)
 8014032:	2100      	movs	r1, #0
 8014034:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014036:	4b19      	ldr	r3, [pc, #100]	; (801409c <FATFS_LinkDriverEx+0x94>)
 8014038:	7a5b      	ldrb	r3, [r3, #9]
 801403a:	b2db      	uxtb	r3, r3
 801403c:	4a17      	ldr	r2, [pc, #92]	; (801409c <FATFS_LinkDriverEx+0x94>)
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	4413      	add	r3, r2
 8014042:	68fa      	ldr	r2, [r7, #12]
 8014044:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014046:	4b15      	ldr	r3, [pc, #84]	; (801409c <FATFS_LinkDriverEx+0x94>)
 8014048:	7a5b      	ldrb	r3, [r3, #9]
 801404a:	b2db      	uxtb	r3, r3
 801404c:	461a      	mov	r2, r3
 801404e:	4b13      	ldr	r3, [pc, #76]	; (801409c <FATFS_LinkDriverEx+0x94>)
 8014050:	4413      	add	r3, r2
 8014052:	79fa      	ldrb	r2, [r7, #7]
 8014054:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014056:	4b11      	ldr	r3, [pc, #68]	; (801409c <FATFS_LinkDriverEx+0x94>)
 8014058:	7a5b      	ldrb	r3, [r3, #9]
 801405a:	b2db      	uxtb	r3, r3
 801405c:	1c5a      	adds	r2, r3, #1
 801405e:	b2d1      	uxtb	r1, r2
 8014060:	4a0e      	ldr	r2, [pc, #56]	; (801409c <FATFS_LinkDriverEx+0x94>)
 8014062:	7251      	strb	r1, [r2, #9]
 8014064:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014066:	7dbb      	ldrb	r3, [r7, #22]
 8014068:	3330      	adds	r3, #48	; 0x30
 801406a:	b2da      	uxtb	r2, r3
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	3301      	adds	r3, #1
 8014074:	223a      	movs	r2, #58	; 0x3a
 8014076:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	3302      	adds	r3, #2
 801407c:	222f      	movs	r2, #47	; 0x2f
 801407e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	3303      	adds	r3, #3
 8014084:	2200      	movs	r2, #0
 8014086:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014088:	2300      	movs	r3, #0
 801408a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801408c:	7dfb      	ldrb	r3, [r7, #23]
}
 801408e:	4618      	mov	r0, r3
 8014090:	371c      	adds	r7, #28
 8014092:	46bd      	mov	sp, r7
 8014094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014098:	4770      	bx	lr
 801409a:	bf00      	nop
 801409c:	20000138 	.word	0x20000138

080140a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80140aa:	2200      	movs	r2, #0
 80140ac:	6839      	ldr	r1, [r7, #0]
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f7ff ffaa 	bl	8014008 <FATFS_LinkDriverEx>
 80140b4:	4603      	mov	r3, r0
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3708      	adds	r7, #8
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}

080140be <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80140be:	b580      	push	{r7, lr}
 80140c0:	b084      	sub	sp, #16
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	4603      	mov	r3, r0
 80140c6:	6039      	str	r1, [r7, #0]
 80140c8:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 80140ca:	2300      	movs	r3, #0
 80140cc:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80140ce:	f107 0308 	add.w	r3, r7, #8
 80140d2:	2101      	movs	r1, #1
 80140d4:	4618      	mov	r0, r3
 80140d6:	f000 f8c4 	bl	8014262 <osSemaphoreCreate>
 80140da:	4602      	mov	r2, r0
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	bf14      	ite	ne
 80140e8:	2301      	movne	r3, #1
 80140ea:	2300      	moveq	r3, #0
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	60fb      	str	r3, [r7, #12]

    return ret;
 80140f0:	68fb      	ldr	r3, [r7, #12]
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}

080140fa <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80140fa:	b580      	push	{r7, lr}
 80140fc:	b082      	sub	sp, #8
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f000 f956 	bl	80143b4 <osSemaphoreDelete>
    return 1;
 8014108:	2301      	movs	r3, #1
}
 801410a:	4618      	mov	r0, r3
 801410c:	3708      	adds	r7, #8
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}

08014112 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8014112:	b580      	push	{r7, lr}
 8014114:	b084      	sub	sp, #16
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801411a:	2300      	movs	r3, #0
 801411c:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801411e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f000 f8c2 	bl	80142ac <osSemaphoreWait>
 8014128:	4603      	mov	r3, r0
 801412a:	2b00      	cmp	r3, #0
 801412c:	d101      	bne.n	8014132 <ff_req_grant+0x20>
  {
    ret = 1;
 801412e:	2301      	movs	r3, #1
 8014130:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014132:	68fb      	ldr	r3, [r7, #12]
}
 8014134:	4618      	mov	r0, r3
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}

0801413c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f000 f8ff 	bl	8014348 <osSemaphoreRelease>
}
 801414a:	bf00      	nop
 801414c:	3708      	adds	r7, #8
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}

08014152 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014152:	b480      	push	{r7}
 8014154:	b085      	sub	sp, #20
 8014156:	af00      	add	r7, sp, #0
 8014158:	4603      	mov	r3, r0
 801415a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801415c:	2300      	movs	r3, #0
 801415e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014164:	2b84      	cmp	r3, #132	; 0x84
 8014166:	d005      	beq.n	8014174 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014168:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	4413      	add	r3, r2
 8014170:	3303      	adds	r3, #3
 8014172:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014174:	68fb      	ldr	r3, [r7, #12]
}
 8014176:	4618      	mov	r0, r3
 8014178:	3714      	adds	r7, #20
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr

08014182 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014182:	b480      	push	{r7}
 8014184:	b083      	sub	sp, #12
 8014186:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014188:	f3ef 8305 	mrs	r3, IPSR
 801418c:	607b      	str	r3, [r7, #4]
  return(result);
 801418e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014190:	2b00      	cmp	r3, #0
 8014192:	bf14      	ite	ne
 8014194:	2301      	movne	r3, #1
 8014196:	2300      	moveq	r3, #0
 8014198:	b2db      	uxtb	r3, r3
}
 801419a:	4618      	mov	r0, r3
 801419c:	370c      	adds	r7, #12
 801419e:	46bd      	mov	sp, r7
 80141a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a4:	4770      	bx	lr

080141a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80141a6:	b580      	push	{r7, lr}
 80141a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80141aa:	f001 fb0d 	bl	80157c8 <vTaskStartScheduler>
  
  return osOK;
 80141ae:	2300      	movs	r3, #0
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	bd80      	pop	{r7, pc}

080141b4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80141b8:	f001 ff74 	bl	80160a4 <xTaskGetSchedulerState>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b01      	cmp	r3, #1
 80141c0:	d101      	bne.n	80141c6 <osKernelRunning+0x12>
    return 0;
 80141c2:	2300      	movs	r3, #0
 80141c4:	e000      	b.n	80141c8 <osKernelRunning+0x14>
  else
    return 1;
 80141c6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	bd80      	pop	{r7, pc}

080141cc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80141d0:	f7ff ffd7 	bl	8014182 <inHandlerMode>
 80141d4:	4603      	mov	r3, r0
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d003      	beq.n	80141e2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80141da:	f001 fbfb 	bl	80159d4 <xTaskGetTickCountFromISR>
 80141de:	4603      	mov	r3, r0
 80141e0:	e002      	b.n	80141e8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80141e2:	f001 fbe7 	bl	80159b4 <xTaskGetTickCount>
 80141e6:	4603      	mov	r3, r0
  }
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	bd80      	pop	{r7, pc}

080141ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80141ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ee:	b087      	sub	sp, #28
 80141f0:	af02      	add	r7, sp, #8
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	685c      	ldr	r4, [r3, #4]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014202:	b29e      	uxth	r6, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801420a:	4618      	mov	r0, r3
 801420c:	f7ff ffa1 	bl	8014152 <makeFreeRtosPriority>
 8014210:	4602      	mov	r2, r0
 8014212:	f107 030c 	add.w	r3, r7, #12
 8014216:	9301      	str	r3, [sp, #4]
 8014218:	9200      	str	r2, [sp, #0]
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	4632      	mov	r2, r6
 801421e:	4629      	mov	r1, r5
 8014220:	4620      	mov	r0, r4
 8014222:	f001 f965 	bl	80154f0 <xTaskCreate>
 8014226:	4603      	mov	r3, r0
 8014228:	2b01      	cmp	r3, #1
 801422a:	d001      	beq.n	8014230 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 801422c:	2300      	movs	r3, #0
 801422e:	e000      	b.n	8014232 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8014230:	68fb      	ldr	r3, [r7, #12]
}
 8014232:	4618      	mov	r0, r3
 8014234:	3714      	adds	r7, #20
 8014236:	46bd      	mov	sp, r7
 8014238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801423a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801423a:	b580      	push	{r7, lr}
 801423c:	b084      	sub	sp, #16
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d001      	beq.n	8014250 <osDelay+0x16>
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	e000      	b.n	8014252 <osDelay+0x18>
 8014250:	2301      	movs	r3, #1
 8014252:	4618      	mov	r0, r3
 8014254:	f001 fa82 	bl	801575c <vTaskDelay>
  
  return osOK;
 8014258:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801425a:	4618      	mov	r0, r3
 801425c:	3710      	adds	r7, #16
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}

08014262 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014262:	b580      	push	{r7, lr}
 8014264:	b084      	sub	sp, #16
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
 801426a:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	2b01      	cmp	r3, #1
 8014270:	d110      	bne.n	8014294 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8014272:	2203      	movs	r2, #3
 8014274:	2100      	movs	r1, #0
 8014276:	2001      	movs	r0, #1
 8014278:	f000 fa94 	bl	80147a4 <xQueueGenericCreate>
 801427c:	60f8      	str	r0, [r7, #12]
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d005      	beq.n	8014290 <osSemaphoreCreate+0x2e>
 8014284:	2300      	movs	r3, #0
 8014286:	2200      	movs	r2, #0
 8014288:	2100      	movs	r1, #0
 801428a:	68f8      	ldr	r0, [r7, #12]
 801428c:	f000 fb1a 	bl	80148c4 <xQueueGenericSend>
    return sema;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	e006      	b.n	80142a2 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	683a      	ldr	r2, [r7, #0]
 8014298:	4611      	mov	r1, r2
 801429a:	4618      	mov	r0, r3
 801429c:	f000 fadc 	bl	8014858 <xQueueCreateCountingSemaphore>
 80142a0:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
	...

080142ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b084      	sub	sp, #16
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80142b6:	2300      	movs	r3, #0
 80142b8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d101      	bne.n	80142c4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80142c0:	2380      	movs	r3, #128	; 0x80
 80142c2:	e03a      	b.n	801433a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80142c4:	2300      	movs	r3, #0
 80142c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ce:	d103      	bne.n	80142d8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80142d0:	f04f 33ff 	mov.w	r3, #4294967295
 80142d4:	60fb      	str	r3, [r7, #12]
 80142d6:	e009      	b.n	80142ec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d006      	beq.n	80142ec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d101      	bne.n	80142ec <osSemaphoreWait+0x40>
      ticks = 1;
 80142e8:	2301      	movs	r3, #1
 80142ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80142ec:	f7ff ff49 	bl	8014182 <inHandlerMode>
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d017      	beq.n	8014326 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80142f6:	f107 0308 	add.w	r3, r7, #8
 80142fa:	461a      	mov	r2, r3
 80142fc:	2100      	movs	r1, #0
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f000 ff02 	bl	8015108 <xQueueReceiveFromISR>
 8014304:	4603      	mov	r3, r0
 8014306:	2b01      	cmp	r3, #1
 8014308:	d001      	beq.n	801430e <osSemaphoreWait+0x62>
      return osErrorOS;
 801430a:	23ff      	movs	r3, #255	; 0xff
 801430c:	e015      	b.n	801433a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d011      	beq.n	8014338 <osSemaphoreWait+0x8c>
 8014314:	4b0b      	ldr	r3, [pc, #44]	; (8014344 <osSemaphoreWait+0x98>)
 8014316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801431a:	601a      	str	r2, [r3, #0]
 801431c:	f3bf 8f4f 	dsb	sy
 8014320:	f3bf 8f6f 	isb	sy
 8014324:	e008      	b.n	8014338 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014326:	68f9      	ldr	r1, [r7, #12]
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f000 fddd 	bl	8014ee8 <xQueueSemaphoreTake>
 801432e:	4603      	mov	r3, r0
 8014330:	2b01      	cmp	r3, #1
 8014332:	d001      	beq.n	8014338 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014334:	23ff      	movs	r3, #255	; 0xff
 8014336:	e000      	b.n	801433a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014338:	2300      	movs	r3, #0
}
 801433a:	4618      	mov	r0, r3
 801433c:	3710      	adds	r7, #16
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}
 8014342:	bf00      	nop
 8014344:	e000ed04 	.word	0xe000ed04

08014348 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014350:	2300      	movs	r3, #0
 8014352:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014354:	2300      	movs	r3, #0
 8014356:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014358:	f7ff ff13 	bl	8014182 <inHandlerMode>
 801435c:	4603      	mov	r3, r0
 801435e:	2b00      	cmp	r3, #0
 8014360:	d016      	beq.n	8014390 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014362:	f107 0308 	add.w	r3, r7, #8
 8014366:	4619      	mov	r1, r3
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f000 fc49 	bl	8014c00 <xQueueGiveFromISR>
 801436e:	4603      	mov	r3, r0
 8014370:	2b01      	cmp	r3, #1
 8014372:	d001      	beq.n	8014378 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014374:	23ff      	movs	r3, #255	; 0xff
 8014376:	e017      	b.n	80143a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d013      	beq.n	80143a6 <osSemaphoreRelease+0x5e>
 801437e:	4b0c      	ldr	r3, [pc, #48]	; (80143b0 <osSemaphoreRelease+0x68>)
 8014380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014384:	601a      	str	r2, [r3, #0]
 8014386:	f3bf 8f4f 	dsb	sy
 801438a:	f3bf 8f6f 	isb	sy
 801438e:	e00a      	b.n	80143a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014390:	2300      	movs	r3, #0
 8014392:	2200      	movs	r2, #0
 8014394:	2100      	movs	r1, #0
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 fa94 	bl	80148c4 <xQueueGenericSend>
 801439c:	4603      	mov	r3, r0
 801439e:	2b01      	cmp	r3, #1
 80143a0:	d001      	beq.n	80143a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80143a2:	23ff      	movs	r3, #255	; 0xff
 80143a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80143a6:	68fb      	ldr	r3, [r7, #12]
}
 80143a8:	4618      	mov	r0, r3
 80143aa:	3710      	adds	r7, #16
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}
 80143b0:	e000ed04 	.word	0xe000ed04

080143b4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b082      	sub	sp, #8
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80143bc:	f7ff fee1 	bl	8014182 <inHandlerMode>
 80143c0:	4603      	mov	r3, r0
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d001      	beq.n	80143ca <osSemaphoreDelete+0x16>
    return osErrorISR;
 80143c6:	2382      	movs	r3, #130	; 0x82
 80143c8:	e003      	b.n	80143d2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f000 ff1f 	bl	801520e <vQueueDelete>

  return osOK; 
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3708      	adds	r7, #8
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}

080143da <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80143da:	b580      	push	{r7, lr}
 80143dc:	b082      	sub	sp, #8
 80143de:	af00      	add	r7, sp, #0
 80143e0:	6078      	str	r0, [r7, #4]
 80143e2:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6818      	ldr	r0, [r3, #0]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	685b      	ldr	r3, [r3, #4]
 80143ec:	2200      	movs	r2, #0
 80143ee:	4619      	mov	r1, r3
 80143f0:	f000 f9d8 	bl	80147a4 <xQueueGenericCreate>
 80143f4:	4603      	mov	r3, r0
#endif
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3708      	adds	r7, #8
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
	...

08014400 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b086      	sub	sp, #24
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801440c:	2300      	movs	r3, #0
 801440e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d101      	bne.n	801441e <osMessagePut+0x1e>
    ticks = 1;
 801441a:	2301      	movs	r3, #1
 801441c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801441e:	f7ff feb0 	bl	8014182 <inHandlerMode>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d018      	beq.n	801445a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014428:	f107 0210 	add.w	r2, r7, #16
 801442c:	f107 0108 	add.w	r1, r7, #8
 8014430:	2300      	movs	r3, #0
 8014432:	68f8      	ldr	r0, [r7, #12]
 8014434:	f000 fb48 	bl	8014ac8 <xQueueGenericSendFromISR>
 8014438:	4603      	mov	r3, r0
 801443a:	2b01      	cmp	r3, #1
 801443c:	d001      	beq.n	8014442 <osMessagePut+0x42>
      return osErrorOS;
 801443e:	23ff      	movs	r3, #255	; 0xff
 8014440:	e018      	b.n	8014474 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d014      	beq.n	8014472 <osMessagePut+0x72>
 8014448:	4b0c      	ldr	r3, [pc, #48]	; (801447c <osMessagePut+0x7c>)
 801444a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801444e:	601a      	str	r2, [r3, #0]
 8014450:	f3bf 8f4f 	dsb	sy
 8014454:	f3bf 8f6f 	isb	sy
 8014458:	e00b      	b.n	8014472 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801445a:	f107 0108 	add.w	r1, r7, #8
 801445e:	2300      	movs	r3, #0
 8014460:	697a      	ldr	r2, [r7, #20]
 8014462:	68f8      	ldr	r0, [r7, #12]
 8014464:	f000 fa2e 	bl	80148c4 <xQueueGenericSend>
 8014468:	4603      	mov	r3, r0
 801446a:	2b01      	cmp	r3, #1
 801446c:	d001      	beq.n	8014472 <osMessagePut+0x72>
      return osErrorOS;
 801446e:	23ff      	movs	r3, #255	; 0xff
 8014470:	e000      	b.n	8014474 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3718      	adds	r7, #24
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	e000ed04 	.word	0xe000ed04

08014480 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014480:	b590      	push	{r4, r7, lr}
 8014482:	b08b      	sub	sp, #44	; 0x2c
 8014484:	af00      	add	r7, sp, #0
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	60b9      	str	r1, [r7, #8]
 801448a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014490:	2300      	movs	r3, #0
 8014492:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d10a      	bne.n	80144b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801449a:	2380      	movs	r3, #128	; 0x80
 801449c:	617b      	str	r3, [r7, #20]
    return event;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	461c      	mov	r4, r3
 80144a2:	f107 0314 	add.w	r3, r7, #20
 80144a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80144aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80144ae:	e054      	b.n	801455a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80144b0:	2300      	movs	r3, #0
 80144b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80144b4:	2300      	movs	r3, #0
 80144b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144be:	d103      	bne.n	80144c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80144c0:	f04f 33ff 	mov.w	r3, #4294967295
 80144c4:	627b      	str	r3, [r7, #36]	; 0x24
 80144c6:	e009      	b.n	80144dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d006      	beq.n	80144dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80144d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d101      	bne.n	80144dc <osMessageGet+0x5c>
      ticks = 1;
 80144d8:	2301      	movs	r3, #1
 80144da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80144dc:	f7ff fe51 	bl	8014182 <inHandlerMode>
 80144e0:	4603      	mov	r3, r0
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d01c      	beq.n	8014520 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80144e6:	f107 0220 	add.w	r2, r7, #32
 80144ea:	f107 0314 	add.w	r3, r7, #20
 80144ee:	3304      	adds	r3, #4
 80144f0:	4619      	mov	r1, r3
 80144f2:	68b8      	ldr	r0, [r7, #8]
 80144f4:	f000 fe08 	bl	8015108 <xQueueReceiveFromISR>
 80144f8:	4603      	mov	r3, r0
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	d102      	bne.n	8014504 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80144fe:	2310      	movs	r3, #16
 8014500:	617b      	str	r3, [r7, #20]
 8014502:	e001      	b.n	8014508 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014504:	2300      	movs	r3, #0
 8014506:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014508:	6a3b      	ldr	r3, [r7, #32]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d01d      	beq.n	801454a <osMessageGet+0xca>
 801450e:	4b15      	ldr	r3, [pc, #84]	; (8014564 <osMessageGet+0xe4>)
 8014510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014514:	601a      	str	r2, [r3, #0]
 8014516:	f3bf 8f4f 	dsb	sy
 801451a:	f3bf 8f6f 	isb	sy
 801451e:	e014      	b.n	801454a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014520:	f107 0314 	add.w	r3, r7, #20
 8014524:	3304      	adds	r3, #4
 8014526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014528:	4619      	mov	r1, r3
 801452a:	68b8      	ldr	r0, [r7, #8]
 801452c:	f000 fbfa 	bl	8014d24 <xQueueReceive>
 8014530:	4603      	mov	r3, r0
 8014532:	2b01      	cmp	r3, #1
 8014534:	d102      	bne.n	801453c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014536:	2310      	movs	r3, #16
 8014538:	617b      	str	r3, [r7, #20]
 801453a:	e006      	b.n	801454a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453e:	2b00      	cmp	r3, #0
 8014540:	d101      	bne.n	8014546 <osMessageGet+0xc6>
 8014542:	2300      	movs	r3, #0
 8014544:	e000      	b.n	8014548 <osMessageGet+0xc8>
 8014546:	2340      	movs	r3, #64	; 0x40
 8014548:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	461c      	mov	r4, r3
 801454e:	f107 0314 	add.w	r3, r7, #20
 8014552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801455a:	68f8      	ldr	r0, [r7, #12]
 801455c:	372c      	adds	r7, #44	; 0x2c
 801455e:	46bd      	mov	sp, r7
 8014560:	bd90      	pop	{r4, r7, pc}
 8014562:	bf00      	nop
 8014564:	e000ed04 	.word	0xe000ed04

08014568 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f103 0208 	add.w	r2, r3, #8
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f04f 32ff 	mov.w	r2, #4294967295
 8014580:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f103 0208 	add.w	r2, r3, #8
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f103 0208 	add.w	r2, r3, #8
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2200      	movs	r2, #0
 801459a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801459c:	bf00      	nop
 801459e:	370c      	adds	r7, #12
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80145a8:	b480      	push	{r7}
 80145aa:	b083      	sub	sp, #12
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2200      	movs	r2, #0
 80145b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80145b6:	bf00      	nop
 80145b8:	370c      	adds	r7, #12
 80145ba:	46bd      	mov	sp, r7
 80145bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c0:	4770      	bx	lr

080145c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80145c2:	b480      	push	{r7}
 80145c4:	b085      	sub	sp, #20
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
 80145ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	68fa      	ldr	r2, [r7, #12]
 80145d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	689a      	ldr	r2, [r3, #8]
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	689b      	ldr	r3, [r3, #8]
 80145e4:	683a      	ldr	r2, [r7, #0]
 80145e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	683a      	ldr	r2, [r7, #0]
 80145ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	687a      	ldr	r2, [r7, #4]
 80145f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	1c5a      	adds	r2, r3, #1
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	601a      	str	r2, [r3, #0]
}
 80145fe:	bf00      	nop
 8014600:	3714      	adds	r7, #20
 8014602:	46bd      	mov	sp, r7
 8014604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014608:	4770      	bx	lr

0801460a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801460a:	b480      	push	{r7}
 801460c:	b085      	sub	sp, #20
 801460e:	af00      	add	r7, sp, #0
 8014610:	6078      	str	r0, [r7, #4]
 8014612:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014620:	d103      	bne.n	801462a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	691b      	ldr	r3, [r3, #16]
 8014626:	60fb      	str	r3, [r7, #12]
 8014628:	e00c      	b.n	8014644 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	3308      	adds	r3, #8
 801462e:	60fb      	str	r3, [r7, #12]
 8014630:	e002      	b.n	8014638 <vListInsert+0x2e>
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	60fb      	str	r3, [r7, #12]
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	685b      	ldr	r3, [r3, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68ba      	ldr	r2, [r7, #8]
 8014640:	429a      	cmp	r2, r3
 8014642:	d2f6      	bcs.n	8014632 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	685a      	ldr	r2, [r3, #4]
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	683a      	ldr	r2, [r7, #0]
 8014652:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	683a      	ldr	r2, [r7, #0]
 801465e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	1c5a      	adds	r2, r3, #1
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	601a      	str	r2, [r3, #0]
}
 8014670:	bf00      	nop
 8014672:	3714      	adds	r7, #20
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr

0801467c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801467c:	b480      	push	{r7}
 801467e:	b085      	sub	sp, #20
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	691b      	ldr	r3, [r3, #16]
 8014688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	685b      	ldr	r3, [r3, #4]
 801468e:	687a      	ldr	r2, [r7, #4]
 8014690:	6892      	ldr	r2, [r2, #8]
 8014692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	689b      	ldr	r3, [r3, #8]
 8014698:	687a      	ldr	r2, [r7, #4]
 801469a:	6852      	ldr	r2, [r2, #4]
 801469c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d103      	bne.n	80146b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	689a      	ldr	r2, [r3, #8]
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2200      	movs	r2, #0
 80146b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	1e5a      	subs	r2, r3, #1
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	681b      	ldr	r3, [r3, #0]
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3714      	adds	r7, #20
 80146c8:	46bd      	mov	sp, r7
 80146ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ce:	4770      	bx	lr

080146d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b084      	sub	sp, #16
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d10b      	bne.n	80146fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80146e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e8:	b672      	cpsid	i
 80146ea:	f383 8811 	msr	BASEPRI, r3
 80146ee:	f3bf 8f6f 	isb	sy
 80146f2:	f3bf 8f4f 	dsb	sy
 80146f6:	b662      	cpsie	i
 80146f8:	60bb      	str	r3, [r7, #8]
 80146fa:	e7fe      	b.n	80146fa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80146fc:	f002 f824 	bl	8016748 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014708:	68f9      	ldr	r1, [r7, #12]
 801470a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801470c:	fb01 f303 	mul.w	r3, r1, r3
 8014710:	441a      	add	r2, r3
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	2200      	movs	r2, #0
 801471a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	681a      	ldr	r2, [r3, #0]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801472c:	3b01      	subs	r3, #1
 801472e:	68f9      	ldr	r1, [r7, #12]
 8014730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014732:	fb01 f303 	mul.w	r3, r1, r3
 8014736:	441a      	add	r2, r3
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	22ff      	movs	r2, #255	; 0xff
 8014740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	22ff      	movs	r2, #255	; 0xff
 8014748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d114      	bne.n	801477c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	691b      	ldr	r3, [r3, #16]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d01a      	beq.n	8014790 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	3310      	adds	r3, #16
 801475e:	4618      	mov	r0, r3
 8014760:	f001 fafa 	bl	8015d58 <xTaskRemoveFromEventList>
 8014764:	4603      	mov	r3, r0
 8014766:	2b00      	cmp	r3, #0
 8014768:	d012      	beq.n	8014790 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801476a:	4b0d      	ldr	r3, [pc, #52]	; (80147a0 <xQueueGenericReset+0xd0>)
 801476c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014770:	601a      	str	r2, [r3, #0]
 8014772:	f3bf 8f4f 	dsb	sy
 8014776:	f3bf 8f6f 	isb	sy
 801477a:	e009      	b.n	8014790 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	3310      	adds	r3, #16
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff fef1 	bl	8014568 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	3324      	adds	r3, #36	; 0x24
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff feec 	bl	8014568 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014790:	f002 f80c 	bl	80167ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014794:	2301      	movs	r3, #1
}
 8014796:	4618      	mov	r0, r3
 8014798:	3710      	adds	r7, #16
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	e000ed04 	.word	0xe000ed04

080147a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b08a      	sub	sp, #40	; 0x28
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	4613      	mov	r3, r2
 80147b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d10b      	bne.n	80147d0 <xQueueGenericCreate+0x2c>
 80147b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147bc:	b672      	cpsid	i
 80147be:	f383 8811 	msr	BASEPRI, r3
 80147c2:	f3bf 8f6f 	isb	sy
 80147c6:	f3bf 8f4f 	dsb	sy
 80147ca:	b662      	cpsie	i
 80147cc:	613b      	str	r3, [r7, #16]
 80147ce:	e7fe      	b.n	80147ce <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d102      	bne.n	80147dc <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80147d6:	2300      	movs	r3, #0
 80147d8:	61fb      	str	r3, [r7, #28]
 80147da:	e004      	b.n	80147e6 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	68ba      	ldr	r2, [r7, #8]
 80147e0:	fb02 f303 	mul.w	r3, r2, r3
 80147e4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80147e6:	69fb      	ldr	r3, [r7, #28]
 80147e8:	3348      	adds	r3, #72	; 0x48
 80147ea:	4618      	mov	r0, r3
 80147ec:	f002 f8ce 	bl	801698c <pvPortMalloc>
 80147f0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80147f2:	69bb      	ldr	r3, [r7, #24]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d00b      	beq.n	8014810 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80147f8:	69bb      	ldr	r3, [r7, #24]
 80147fa:	3348      	adds	r3, #72	; 0x48
 80147fc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80147fe:	79fa      	ldrb	r2, [r7, #7]
 8014800:	69bb      	ldr	r3, [r7, #24]
 8014802:	9300      	str	r3, [sp, #0]
 8014804:	4613      	mov	r3, r2
 8014806:	697a      	ldr	r2, [r7, #20]
 8014808:	68b9      	ldr	r1, [r7, #8]
 801480a:	68f8      	ldr	r0, [r7, #12]
 801480c:	f000 f805 	bl	801481a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8014810:	69bb      	ldr	r3, [r7, #24]
	}
 8014812:	4618      	mov	r0, r3
 8014814:	3720      	adds	r7, #32
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801481a:	b580      	push	{r7, lr}
 801481c:	b084      	sub	sp, #16
 801481e:	af00      	add	r7, sp, #0
 8014820:	60f8      	str	r0, [r7, #12]
 8014822:	60b9      	str	r1, [r7, #8]
 8014824:	607a      	str	r2, [r7, #4]
 8014826:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d103      	bne.n	8014836 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801482e:	69bb      	ldr	r3, [r7, #24]
 8014830:	69ba      	ldr	r2, [r7, #24]
 8014832:	601a      	str	r2, [r3, #0]
 8014834:	e002      	b.n	801483c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014836:	69bb      	ldr	r3, [r7, #24]
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801483c:	69bb      	ldr	r3, [r7, #24]
 801483e:	68fa      	ldr	r2, [r7, #12]
 8014840:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014842:	69bb      	ldr	r3, [r7, #24]
 8014844:	68ba      	ldr	r2, [r7, #8]
 8014846:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014848:	2101      	movs	r1, #1
 801484a:	69b8      	ldr	r0, [r7, #24]
 801484c:	f7ff ff40 	bl	80146d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014850:	bf00      	nop
 8014852:	3710      	adds	r7, #16
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d10b      	bne.n	8014880 <xQueueCreateCountingSemaphore+0x28>
 8014868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801486c:	b672      	cpsid	i
 801486e:	f383 8811 	msr	BASEPRI, r3
 8014872:	f3bf 8f6f 	isb	sy
 8014876:	f3bf 8f4f 	dsb	sy
 801487a:	b662      	cpsie	i
 801487c:	613b      	str	r3, [r7, #16]
 801487e:	e7fe      	b.n	801487e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014880:	683a      	ldr	r2, [r7, #0]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	429a      	cmp	r2, r3
 8014886:	d90b      	bls.n	80148a0 <xQueueCreateCountingSemaphore+0x48>
 8014888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801488c:	b672      	cpsid	i
 801488e:	f383 8811 	msr	BASEPRI, r3
 8014892:	f3bf 8f6f 	isb	sy
 8014896:	f3bf 8f4f 	dsb	sy
 801489a:	b662      	cpsie	i
 801489c:	60fb      	str	r3, [r7, #12]
 801489e:	e7fe      	b.n	801489e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80148a0:	2202      	movs	r2, #2
 80148a2:	2100      	movs	r1, #0
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f7ff ff7d 	bl	80147a4 <xQueueGenericCreate>
 80148aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d002      	beq.n	80148b8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	683a      	ldr	r2, [r7, #0]
 80148b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80148b8:	697b      	ldr	r3, [r7, #20]
	}
 80148ba:	4618      	mov	r0, r3
 80148bc:	3718      	adds	r7, #24
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd80      	pop	{r7, pc}
	...

080148c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b08e      	sub	sp, #56	; 0x38
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	607a      	str	r2, [r7, #4]
 80148d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80148d2:	2300      	movs	r3, #0
 80148d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80148da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d10b      	bne.n	80148f8 <xQueueGenericSend+0x34>
 80148e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e4:	b672      	cpsid	i
 80148e6:	f383 8811 	msr	BASEPRI, r3
 80148ea:	f3bf 8f6f 	isb	sy
 80148ee:	f3bf 8f4f 	dsb	sy
 80148f2:	b662      	cpsie	i
 80148f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80148f6:	e7fe      	b.n	80148f6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d103      	bne.n	8014906 <xQueueGenericSend+0x42>
 80148fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014902:	2b00      	cmp	r3, #0
 8014904:	d101      	bne.n	801490a <xQueueGenericSend+0x46>
 8014906:	2301      	movs	r3, #1
 8014908:	e000      	b.n	801490c <xQueueGenericSend+0x48>
 801490a:	2300      	movs	r3, #0
 801490c:	2b00      	cmp	r3, #0
 801490e:	d10b      	bne.n	8014928 <xQueueGenericSend+0x64>
 8014910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014914:	b672      	cpsid	i
 8014916:	f383 8811 	msr	BASEPRI, r3
 801491a:	f3bf 8f6f 	isb	sy
 801491e:	f3bf 8f4f 	dsb	sy
 8014922:	b662      	cpsie	i
 8014924:	627b      	str	r3, [r7, #36]	; 0x24
 8014926:	e7fe      	b.n	8014926 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	2b02      	cmp	r3, #2
 801492c:	d103      	bne.n	8014936 <xQueueGenericSend+0x72>
 801492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014932:	2b01      	cmp	r3, #1
 8014934:	d101      	bne.n	801493a <xQueueGenericSend+0x76>
 8014936:	2301      	movs	r3, #1
 8014938:	e000      	b.n	801493c <xQueueGenericSend+0x78>
 801493a:	2300      	movs	r3, #0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d10b      	bne.n	8014958 <xQueueGenericSend+0x94>
 8014940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014944:	b672      	cpsid	i
 8014946:	f383 8811 	msr	BASEPRI, r3
 801494a:	f3bf 8f6f 	isb	sy
 801494e:	f3bf 8f4f 	dsb	sy
 8014952:	b662      	cpsie	i
 8014954:	623b      	str	r3, [r7, #32]
 8014956:	e7fe      	b.n	8014956 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014958:	f001 fba4 	bl	80160a4 <xTaskGetSchedulerState>
 801495c:	4603      	mov	r3, r0
 801495e:	2b00      	cmp	r3, #0
 8014960:	d102      	bne.n	8014968 <xQueueGenericSend+0xa4>
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d101      	bne.n	801496c <xQueueGenericSend+0xa8>
 8014968:	2301      	movs	r3, #1
 801496a:	e000      	b.n	801496e <xQueueGenericSend+0xaa>
 801496c:	2300      	movs	r3, #0
 801496e:	2b00      	cmp	r3, #0
 8014970:	d10b      	bne.n	801498a <xQueueGenericSend+0xc6>
 8014972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014976:	b672      	cpsid	i
 8014978:	f383 8811 	msr	BASEPRI, r3
 801497c:	f3bf 8f6f 	isb	sy
 8014980:	f3bf 8f4f 	dsb	sy
 8014984:	b662      	cpsie	i
 8014986:	61fb      	str	r3, [r7, #28]
 8014988:	e7fe      	b.n	8014988 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801498a:	f001 fedd 	bl	8016748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014996:	429a      	cmp	r2, r3
 8014998:	d302      	bcc.n	80149a0 <xQueueGenericSend+0xdc>
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	2b02      	cmp	r3, #2
 801499e:	d129      	bne.n	80149f4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80149a0:	683a      	ldr	r2, [r7, #0]
 80149a2:	68b9      	ldr	r1, [r7, #8]
 80149a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149a6:	f000 fc69 	bl	801527c <prvCopyDataToQueue>
 80149aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80149ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d010      	beq.n	80149d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80149b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b6:	3324      	adds	r3, #36	; 0x24
 80149b8:	4618      	mov	r0, r3
 80149ba:	f001 f9cd 	bl	8015d58 <xTaskRemoveFromEventList>
 80149be:	4603      	mov	r3, r0
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d013      	beq.n	80149ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80149c4:	4b3f      	ldr	r3, [pc, #252]	; (8014ac4 <xQueueGenericSend+0x200>)
 80149c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149ca:	601a      	str	r2, [r3, #0]
 80149cc:	f3bf 8f4f 	dsb	sy
 80149d0:	f3bf 8f6f 	isb	sy
 80149d4:	e00a      	b.n	80149ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80149d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d007      	beq.n	80149ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80149dc:	4b39      	ldr	r3, [pc, #228]	; (8014ac4 <xQueueGenericSend+0x200>)
 80149de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149e2:	601a      	str	r2, [r3, #0]
 80149e4:	f3bf 8f4f 	dsb	sy
 80149e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80149ec:	f001 fede 	bl	80167ac <vPortExitCritical>
				return pdPASS;
 80149f0:	2301      	movs	r3, #1
 80149f2:	e063      	b.n	8014abc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d103      	bne.n	8014a02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80149fa:	f001 fed7 	bl	80167ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80149fe:	2300      	movs	r3, #0
 8014a00:	e05c      	b.n	8014abc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d106      	bne.n	8014a16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014a08:	f107 0314 	add.w	r3, r7, #20
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f001 fa07 	bl	8015e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014a12:	2301      	movs	r3, #1
 8014a14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014a16:	f001 fec9 	bl	80167ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014a1a:	f000 ff1f 	bl	801585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014a1e:	f001 fe93 	bl	8016748 <vPortEnterCritical>
 8014a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a28:	b25b      	sxtb	r3, r3
 8014a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a2e:	d103      	bne.n	8014a38 <xQueueGenericSend+0x174>
 8014a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a32:	2200      	movs	r2, #0
 8014a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a3e:	b25b      	sxtb	r3, r3
 8014a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a44:	d103      	bne.n	8014a4e <xQueueGenericSend+0x18a>
 8014a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a48:	2200      	movs	r2, #0
 8014a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014a4e:	f001 fead 	bl	80167ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014a52:	1d3a      	adds	r2, r7, #4
 8014a54:	f107 0314 	add.w	r3, r7, #20
 8014a58:	4611      	mov	r1, r2
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f001 f9f6 	bl	8015e4c <xTaskCheckForTimeOut>
 8014a60:	4603      	mov	r3, r0
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d124      	bne.n	8014ab0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a68:	f000 fd00 	bl	801546c <prvIsQueueFull>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d018      	beq.n	8014aa4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a74:	3310      	adds	r3, #16
 8014a76:	687a      	ldr	r2, [r7, #4]
 8014a78:	4611      	mov	r1, r2
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f001 f946 	bl	8015d0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a82:	f000 fc8b 	bl	801539c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014a86:	f000 fef7 	bl	8015878 <xTaskResumeAll>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	f47f af7c 	bne.w	801498a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014a92:	4b0c      	ldr	r3, [pc, #48]	; (8014ac4 <xQueueGenericSend+0x200>)
 8014a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a98:	601a      	str	r2, [r3, #0]
 8014a9a:	f3bf 8f4f 	dsb	sy
 8014a9e:	f3bf 8f6f 	isb	sy
 8014aa2:	e772      	b.n	801498a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014aa6:	f000 fc79 	bl	801539c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014aaa:	f000 fee5 	bl	8015878 <xTaskResumeAll>
 8014aae:	e76c      	b.n	801498a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ab2:	f000 fc73 	bl	801539c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ab6:	f000 fedf 	bl	8015878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014aba:	2300      	movs	r3, #0
		}
	}
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3738      	adds	r7, #56	; 0x38
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	e000ed04 	.word	0xe000ed04

08014ac8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08e      	sub	sp, #56	; 0x38
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	607a      	str	r2, [r7, #4]
 8014ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d10b      	bne.n	8014af8 <xQueueGenericSendFromISR+0x30>
 8014ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ae4:	b672      	cpsid	i
 8014ae6:	f383 8811 	msr	BASEPRI, r3
 8014aea:	f3bf 8f6f 	isb	sy
 8014aee:	f3bf 8f4f 	dsb	sy
 8014af2:	b662      	cpsie	i
 8014af4:	627b      	str	r3, [r7, #36]	; 0x24
 8014af6:	e7fe      	b.n	8014af6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d103      	bne.n	8014b06 <xQueueGenericSendFromISR+0x3e>
 8014afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d101      	bne.n	8014b0a <xQueueGenericSendFromISR+0x42>
 8014b06:	2301      	movs	r3, #1
 8014b08:	e000      	b.n	8014b0c <xQueueGenericSendFromISR+0x44>
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d10b      	bne.n	8014b28 <xQueueGenericSendFromISR+0x60>
 8014b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b14:	b672      	cpsid	i
 8014b16:	f383 8811 	msr	BASEPRI, r3
 8014b1a:	f3bf 8f6f 	isb	sy
 8014b1e:	f3bf 8f4f 	dsb	sy
 8014b22:	b662      	cpsie	i
 8014b24:	623b      	str	r3, [r7, #32]
 8014b26:	e7fe      	b.n	8014b26 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d103      	bne.n	8014b36 <xQueueGenericSendFromISR+0x6e>
 8014b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d101      	bne.n	8014b3a <xQueueGenericSendFromISR+0x72>
 8014b36:	2301      	movs	r3, #1
 8014b38:	e000      	b.n	8014b3c <xQueueGenericSendFromISR+0x74>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d10b      	bne.n	8014b58 <xQueueGenericSendFromISR+0x90>
 8014b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b44:	b672      	cpsid	i
 8014b46:	f383 8811 	msr	BASEPRI, r3
 8014b4a:	f3bf 8f6f 	isb	sy
 8014b4e:	f3bf 8f4f 	dsb	sy
 8014b52:	b662      	cpsie	i
 8014b54:	61fb      	str	r3, [r7, #28]
 8014b56:	e7fe      	b.n	8014b56 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b58:	f001 fed6 	bl	8016908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8014b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b64:	b672      	cpsid	i
 8014b66:	f383 8811 	msr	BASEPRI, r3
 8014b6a:	f3bf 8f6f 	isb	sy
 8014b6e:	f3bf 8f4f 	dsb	sy
 8014b72:	b662      	cpsie	i
 8014b74:	61ba      	str	r2, [r7, #24]
 8014b76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014b78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d302      	bcc.n	8014b8e <xQueueGenericSendFromISR+0xc6>
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	2b02      	cmp	r3, #2
 8014b8c:	d12c      	bne.n	8014be8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014b98:	683a      	ldr	r2, [r7, #0]
 8014b9a:	68b9      	ldr	r1, [r7, #8]
 8014b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b9e:	f000 fb6d 	bl	801527c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014ba2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014baa:	d112      	bne.n	8014bd2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d016      	beq.n	8014be2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb6:	3324      	adds	r3, #36	; 0x24
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f001 f8cd 	bl	8015d58 <xTaskRemoveFromEventList>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d00e      	beq.n	8014be2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d00b      	beq.n	8014be2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2201      	movs	r2, #1
 8014bce:	601a      	str	r2, [r3, #0]
 8014bd0:	e007      	b.n	8014be2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	b2db      	uxtb	r3, r3
 8014bda:	b25a      	sxtb	r2, r3
 8014bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014be2:	2301      	movs	r3, #1
 8014be4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8014be6:	e001      	b.n	8014bec <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014be8:	2300      	movs	r3, #0
 8014bea:	637b      	str	r3, [r7, #52]	; 0x34
 8014bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3738      	adds	r7, #56	; 0x38
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}

08014c00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b08e      	sub	sp, #56	; 0x38
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
 8014c08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d10b      	bne.n	8014c2c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8014c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c18:	b672      	cpsid	i
 8014c1a:	f383 8811 	msr	BASEPRI, r3
 8014c1e:	f3bf 8f6f 	isb	sy
 8014c22:	f3bf 8f4f 	dsb	sy
 8014c26:	b662      	cpsie	i
 8014c28:	623b      	str	r3, [r7, #32]
 8014c2a:	e7fe      	b.n	8014c2a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d00b      	beq.n	8014c4c <xQueueGiveFromISR+0x4c>
 8014c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c38:	b672      	cpsid	i
 8014c3a:	f383 8811 	msr	BASEPRI, r3
 8014c3e:	f3bf 8f6f 	isb	sy
 8014c42:	f3bf 8f4f 	dsb	sy
 8014c46:	b662      	cpsie	i
 8014c48:	61fb      	str	r3, [r7, #28]
 8014c4a:	e7fe      	b.n	8014c4a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8014c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d103      	bne.n	8014c5c <xQueueGiveFromISR+0x5c>
 8014c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d101      	bne.n	8014c60 <xQueueGiveFromISR+0x60>
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	e000      	b.n	8014c62 <xQueueGiveFromISR+0x62>
 8014c60:	2300      	movs	r3, #0
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d10b      	bne.n	8014c7e <xQueueGiveFromISR+0x7e>
 8014c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c6a:	b672      	cpsid	i
 8014c6c:	f383 8811 	msr	BASEPRI, r3
 8014c70:	f3bf 8f6f 	isb	sy
 8014c74:	f3bf 8f4f 	dsb	sy
 8014c78:	b662      	cpsie	i
 8014c7a:	61bb      	str	r3, [r7, #24]
 8014c7c:	e7fe      	b.n	8014c7c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014c7e:	f001 fe43 	bl	8016908 <vPortValidateInterruptPriority>
	__asm volatile
 8014c82:	f3ef 8211 	mrs	r2, BASEPRI
 8014c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c8a:	b672      	cpsid	i
 8014c8c:	f383 8811 	msr	BASEPRI, r3
 8014c90:	f3bf 8f6f 	isb	sy
 8014c94:	f3bf 8f4f 	dsb	sy
 8014c98:	b662      	cpsie	i
 8014c9a:	617a      	str	r2, [r7, #20]
 8014c9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014c9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ca6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d22b      	bcs.n	8014d0a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cbe:	1c5a      	adds	r2, r3, #1
 8014cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014cc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ccc:	d112      	bne.n	8014cf4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d016      	beq.n	8014d04 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd8:	3324      	adds	r3, #36	; 0x24
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f001 f83c 	bl	8015d58 <xTaskRemoveFromEventList>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d00e      	beq.n	8014d04 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d00b      	beq.n	8014d04 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	2201      	movs	r2, #1
 8014cf0:	601a      	str	r2, [r3, #0]
 8014cf2:	e007      	b.n	8014d04 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	b2db      	uxtb	r3, r3
 8014cfc:	b25a      	sxtb	r2, r3
 8014cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014d04:	2301      	movs	r3, #1
 8014d06:	637b      	str	r3, [r7, #52]	; 0x34
 8014d08:	e001      	b.n	8014d0e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8014d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3738      	adds	r7, #56	; 0x38
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}
	...

08014d24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b08c      	sub	sp, #48	; 0x30
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	60b9      	str	r1, [r7, #8]
 8014d2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014d30:	2300      	movs	r3, #0
 8014d32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d10b      	bne.n	8014d56 <xQueueReceive+0x32>
	__asm volatile
 8014d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d42:	b672      	cpsid	i
 8014d44:	f383 8811 	msr	BASEPRI, r3
 8014d48:	f3bf 8f6f 	isb	sy
 8014d4c:	f3bf 8f4f 	dsb	sy
 8014d50:	b662      	cpsie	i
 8014d52:	623b      	str	r3, [r7, #32]
 8014d54:	e7fe      	b.n	8014d54 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d103      	bne.n	8014d64 <xQueueReceive+0x40>
 8014d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d101      	bne.n	8014d68 <xQueueReceive+0x44>
 8014d64:	2301      	movs	r3, #1
 8014d66:	e000      	b.n	8014d6a <xQueueReceive+0x46>
 8014d68:	2300      	movs	r3, #0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d10b      	bne.n	8014d86 <xQueueReceive+0x62>
 8014d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d72:	b672      	cpsid	i
 8014d74:	f383 8811 	msr	BASEPRI, r3
 8014d78:	f3bf 8f6f 	isb	sy
 8014d7c:	f3bf 8f4f 	dsb	sy
 8014d80:	b662      	cpsie	i
 8014d82:	61fb      	str	r3, [r7, #28]
 8014d84:	e7fe      	b.n	8014d84 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014d86:	f001 f98d 	bl	80160a4 <xTaskGetSchedulerState>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d102      	bne.n	8014d96 <xQueueReceive+0x72>
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d101      	bne.n	8014d9a <xQueueReceive+0x76>
 8014d96:	2301      	movs	r3, #1
 8014d98:	e000      	b.n	8014d9c <xQueueReceive+0x78>
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d10b      	bne.n	8014db8 <xQueueReceive+0x94>
 8014da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da4:	b672      	cpsid	i
 8014da6:	f383 8811 	msr	BASEPRI, r3
 8014daa:	f3bf 8f6f 	isb	sy
 8014dae:	f3bf 8f4f 	dsb	sy
 8014db2:	b662      	cpsie	i
 8014db4:	61bb      	str	r3, [r7, #24]
 8014db6:	e7fe      	b.n	8014db6 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8014db8:	f001 fcc6 	bl	8016748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dc0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d01f      	beq.n	8014e08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014dc8:	68b9      	ldr	r1, [r7, #8]
 8014dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014dcc:	f000 fac0 	bl	8015350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd2:	1e5a      	subs	r2, r3, #1
 8014dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dda:	691b      	ldr	r3, [r3, #16]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d00f      	beq.n	8014e00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de2:	3310      	adds	r3, #16
 8014de4:	4618      	mov	r0, r3
 8014de6:	f000 ffb7 	bl	8015d58 <xTaskRemoveFromEventList>
 8014dea:	4603      	mov	r3, r0
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d007      	beq.n	8014e00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014df0:	4b3c      	ldr	r3, [pc, #240]	; (8014ee4 <xQueueReceive+0x1c0>)
 8014df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014df6:	601a      	str	r2, [r3, #0]
 8014df8:	f3bf 8f4f 	dsb	sy
 8014dfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014e00:	f001 fcd4 	bl	80167ac <vPortExitCritical>
				return pdPASS;
 8014e04:	2301      	movs	r3, #1
 8014e06:	e069      	b.n	8014edc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d103      	bne.n	8014e16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014e0e:	f001 fccd 	bl	80167ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014e12:	2300      	movs	r3, #0
 8014e14:	e062      	b.n	8014edc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d106      	bne.n	8014e2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e1c:	f107 0310 	add.w	r3, r7, #16
 8014e20:	4618      	mov	r0, r3
 8014e22:	f000 fffd 	bl	8015e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014e26:	2301      	movs	r3, #1
 8014e28:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014e2a:	f001 fcbf 	bl	80167ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014e2e:	f000 fd15 	bl	801585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014e32:	f001 fc89 	bl	8016748 <vPortEnterCritical>
 8014e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014e3c:	b25b      	sxtb	r3, r3
 8014e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e42:	d103      	bne.n	8014e4c <xQueueReceive+0x128>
 8014e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e46:	2200      	movs	r2, #0
 8014e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014e52:	b25b      	sxtb	r3, r3
 8014e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e58:	d103      	bne.n	8014e62 <xQueueReceive+0x13e>
 8014e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014e62:	f001 fca3 	bl	80167ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014e66:	1d3a      	adds	r2, r7, #4
 8014e68:	f107 0310 	add.w	r3, r7, #16
 8014e6c:	4611      	mov	r1, r2
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f000 ffec 	bl	8015e4c <xTaskCheckForTimeOut>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d123      	bne.n	8014ec2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e7c:	f000 fae0 	bl	8015440 <prvIsQueueEmpty>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d017      	beq.n	8014eb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e88:	3324      	adds	r3, #36	; 0x24
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	4611      	mov	r1, r2
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f000 ff3c 	bl	8015d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e96:	f000 fa81 	bl	801539c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014e9a:	f000 fced 	bl	8015878 <xTaskResumeAll>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d189      	bne.n	8014db8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014ea4:	4b0f      	ldr	r3, [pc, #60]	; (8014ee4 <xQueueReceive+0x1c0>)
 8014ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eaa:	601a      	str	r2, [r3, #0]
 8014eac:	f3bf 8f4f 	dsb	sy
 8014eb0:	f3bf 8f6f 	isb	sy
 8014eb4:	e780      	b.n	8014db8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014eb8:	f000 fa70 	bl	801539c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014ebc:	f000 fcdc 	bl	8015878 <xTaskResumeAll>
 8014ec0:	e77a      	b.n	8014db8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ec4:	f000 fa6a 	bl	801539c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ec8:	f000 fcd6 	bl	8015878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ece:	f000 fab7 	bl	8015440 <prvIsQueueEmpty>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	f43f af6f 	beq.w	8014db8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014eda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3730      	adds	r7, #48	; 0x30
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	e000ed04 	.word	0xe000ed04

08014ee8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b08e      	sub	sp, #56	; 0x38
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014efa:	2300      	movs	r3, #0
 8014efc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d10b      	bne.n	8014f1c <xQueueSemaphoreTake+0x34>
 8014f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f08:	b672      	cpsid	i
 8014f0a:	f383 8811 	msr	BASEPRI, r3
 8014f0e:	f3bf 8f6f 	isb	sy
 8014f12:	f3bf 8f4f 	dsb	sy
 8014f16:	b662      	cpsie	i
 8014f18:	623b      	str	r3, [r7, #32]
 8014f1a:	e7fe      	b.n	8014f1a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d00b      	beq.n	8014f3c <xQueueSemaphoreTake+0x54>
 8014f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f28:	b672      	cpsid	i
 8014f2a:	f383 8811 	msr	BASEPRI, r3
 8014f2e:	f3bf 8f6f 	isb	sy
 8014f32:	f3bf 8f4f 	dsb	sy
 8014f36:	b662      	cpsie	i
 8014f38:	61fb      	str	r3, [r7, #28]
 8014f3a:	e7fe      	b.n	8014f3a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014f3c:	f001 f8b2 	bl	80160a4 <xTaskGetSchedulerState>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d102      	bne.n	8014f4c <xQueueSemaphoreTake+0x64>
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d101      	bne.n	8014f50 <xQueueSemaphoreTake+0x68>
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	e000      	b.n	8014f52 <xQueueSemaphoreTake+0x6a>
 8014f50:	2300      	movs	r3, #0
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d10b      	bne.n	8014f6e <xQueueSemaphoreTake+0x86>
 8014f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5a:	b672      	cpsid	i
 8014f5c:	f383 8811 	msr	BASEPRI, r3
 8014f60:	f3bf 8f6f 	isb	sy
 8014f64:	f3bf 8f4f 	dsb	sy
 8014f68:	b662      	cpsie	i
 8014f6a:	61bb      	str	r3, [r7, #24]
 8014f6c:	e7fe      	b.n	8014f6c <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8014f6e:	f001 fbeb 	bl	8016748 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f76:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d024      	beq.n	8014fc8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f80:	1e5a      	subs	r2, r3, #1
 8014f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f84:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d104      	bne.n	8014f98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8014f8e:	f001 fa57 	bl	8016440 <pvTaskIncrementMutexHeldCount>
 8014f92:	4602      	mov	r2, r0
 8014f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f96:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f9a:	691b      	ldr	r3, [r3, #16]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d00f      	beq.n	8014fc0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa2:	3310      	adds	r3, #16
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f000 fed7 	bl	8015d58 <xTaskRemoveFromEventList>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d007      	beq.n	8014fc0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014fb0:	4b54      	ldr	r3, [pc, #336]	; (8015104 <xQueueSemaphoreTake+0x21c>)
 8014fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fb6:	601a      	str	r2, [r3, #0]
 8014fb8:	f3bf 8f4f 	dsb	sy
 8014fbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014fc0:	f001 fbf4 	bl	80167ac <vPortExitCritical>
				return pdPASS;
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	e098      	b.n	80150fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d112      	bne.n	8014ff4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d00b      	beq.n	8014fec <xQueueSemaphoreTake+0x104>
 8014fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd8:	b672      	cpsid	i
 8014fda:	f383 8811 	msr	BASEPRI, r3
 8014fde:	f3bf 8f6f 	isb	sy
 8014fe2:	f3bf 8f4f 	dsb	sy
 8014fe6:	b662      	cpsie	i
 8014fe8:	617b      	str	r3, [r7, #20]
 8014fea:	e7fe      	b.n	8014fea <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014fec:	f001 fbde 	bl	80167ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	e082      	b.n	80150fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d106      	bne.n	8015008 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014ffa:	f107 030c 	add.w	r3, r7, #12
 8014ffe:	4618      	mov	r0, r3
 8015000:	f000 ff0e 	bl	8015e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015004:	2301      	movs	r3, #1
 8015006:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015008:	f001 fbd0 	bl	80167ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801500c:	f000 fc26 	bl	801585c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015010:	f001 fb9a 	bl	8016748 <vPortEnterCritical>
 8015014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801501a:	b25b      	sxtb	r3, r3
 801501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015020:	d103      	bne.n	801502a <xQueueSemaphoreTake+0x142>
 8015022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015024:	2200      	movs	r2, #0
 8015026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015030:	b25b      	sxtb	r3, r3
 8015032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015036:	d103      	bne.n	8015040 <xQueueSemaphoreTake+0x158>
 8015038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801503a:	2200      	movs	r2, #0
 801503c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015040:	f001 fbb4 	bl	80167ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015044:	463a      	mov	r2, r7
 8015046:	f107 030c 	add.w	r3, r7, #12
 801504a:	4611      	mov	r1, r2
 801504c:	4618      	mov	r0, r3
 801504e:	f000 fefd 	bl	8015e4c <xTaskCheckForTimeOut>
 8015052:	4603      	mov	r3, r0
 8015054:	2b00      	cmp	r3, #0
 8015056:	d132      	bne.n	80150be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801505a:	f000 f9f1 	bl	8015440 <prvIsQueueEmpty>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d026      	beq.n	80150b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d109      	bne.n	8015080 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801506c:	f001 fb6c 	bl	8016748 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8015070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	4618      	mov	r0, r3
 8015076:	f001 f833 	bl	80160e0 <xTaskPriorityInherit>
 801507a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801507c:	f001 fb96 	bl	80167ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015082:	3324      	adds	r3, #36	; 0x24
 8015084:	683a      	ldr	r2, [r7, #0]
 8015086:	4611      	mov	r1, r2
 8015088:	4618      	mov	r0, r3
 801508a:	f000 fe3f 	bl	8015d0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801508e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015090:	f000 f984 	bl	801539c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015094:	f000 fbf0 	bl	8015878 <xTaskResumeAll>
 8015098:	4603      	mov	r3, r0
 801509a:	2b00      	cmp	r3, #0
 801509c:	f47f af67 	bne.w	8014f6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80150a0:	4b18      	ldr	r3, [pc, #96]	; (8015104 <xQueueSemaphoreTake+0x21c>)
 80150a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150a6:	601a      	str	r2, [r3, #0]
 80150a8:	f3bf 8f4f 	dsb	sy
 80150ac:	f3bf 8f6f 	isb	sy
 80150b0:	e75d      	b.n	8014f6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80150b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150b4:	f000 f972 	bl	801539c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80150b8:	f000 fbde 	bl	8015878 <xTaskResumeAll>
 80150bc:	e757      	b.n	8014f6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80150be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150c0:	f000 f96c 	bl	801539c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80150c4:	f000 fbd8 	bl	8015878 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80150c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150ca:	f000 f9b9 	bl	8015440 <prvIsQueueEmpty>
 80150ce:	4603      	mov	r3, r0
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	f43f af4c 	beq.w	8014f6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80150d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d00d      	beq.n	80150f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80150dc:	f001 fb34 	bl	8016748 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80150e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80150e2:	f000 f8b3 	bl	801524c <prvGetDisinheritPriorityAfterTimeout>
 80150e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80150e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ea:	685b      	ldr	r3, [r3, #4]
 80150ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80150ee:	4618      	mov	r0, r3
 80150f0:	f001 f904 	bl	80162fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80150f4:	f001 fb5a 	bl	80167ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80150f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3738      	adds	r7, #56	; 0x38
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	e000ed04 	.word	0xe000ed04

08015108 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b08e      	sub	sp, #56	; 0x38
 801510c:	af00      	add	r7, sp, #0
 801510e:	60f8      	str	r0, [r7, #12]
 8015110:	60b9      	str	r1, [r7, #8]
 8015112:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511a:	2b00      	cmp	r3, #0
 801511c:	d10b      	bne.n	8015136 <xQueueReceiveFromISR+0x2e>
 801511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015122:	b672      	cpsid	i
 8015124:	f383 8811 	msr	BASEPRI, r3
 8015128:	f3bf 8f6f 	isb	sy
 801512c:	f3bf 8f4f 	dsb	sy
 8015130:	b662      	cpsie	i
 8015132:	623b      	str	r3, [r7, #32]
 8015134:	e7fe      	b.n	8015134 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d103      	bne.n	8015144 <xQueueReceiveFromISR+0x3c>
 801513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015140:	2b00      	cmp	r3, #0
 8015142:	d101      	bne.n	8015148 <xQueueReceiveFromISR+0x40>
 8015144:	2301      	movs	r3, #1
 8015146:	e000      	b.n	801514a <xQueueReceiveFromISR+0x42>
 8015148:	2300      	movs	r3, #0
 801514a:	2b00      	cmp	r3, #0
 801514c:	d10b      	bne.n	8015166 <xQueueReceiveFromISR+0x5e>
 801514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015152:	b672      	cpsid	i
 8015154:	f383 8811 	msr	BASEPRI, r3
 8015158:	f3bf 8f6f 	isb	sy
 801515c:	f3bf 8f4f 	dsb	sy
 8015160:	b662      	cpsie	i
 8015162:	61fb      	str	r3, [r7, #28]
 8015164:	e7fe      	b.n	8015164 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015166:	f001 fbcf 	bl	8016908 <vPortValidateInterruptPriority>
	__asm volatile
 801516a:	f3ef 8211 	mrs	r2, BASEPRI
 801516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015172:	b672      	cpsid	i
 8015174:	f383 8811 	msr	BASEPRI, r3
 8015178:	f3bf 8f6f 	isb	sy
 801517c:	f3bf 8f4f 	dsb	sy
 8015180:	b662      	cpsie	i
 8015182:	61ba      	str	r2, [r7, #24]
 8015184:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015186:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015188:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801518e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015192:	2b00      	cmp	r3, #0
 8015194:	d02f      	beq.n	80151f6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801519c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80151a0:	68b9      	ldr	r1, [r7, #8]
 80151a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151a4:	f000 f8d4 	bl	8015350 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80151a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151aa:	1e5a      	subs	r2, r3, #1
 80151ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80151b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80151b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151b8:	d112      	bne.n	80151e0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80151ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151bc:	691b      	ldr	r3, [r3, #16]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d016      	beq.n	80151f0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c4:	3310      	adds	r3, #16
 80151c6:	4618      	mov	r0, r3
 80151c8:	f000 fdc6 	bl	8015d58 <xTaskRemoveFromEventList>
 80151cc:	4603      	mov	r3, r0
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d00e      	beq.n	80151f0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d00b      	beq.n	80151f0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2201      	movs	r2, #1
 80151dc:	601a      	str	r2, [r3, #0]
 80151de:	e007      	b.n	80151f0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80151e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151e4:	3301      	adds	r3, #1
 80151e6:	b2db      	uxtb	r3, r3
 80151e8:	b25a      	sxtb	r2, r3
 80151ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80151f0:	2301      	movs	r3, #1
 80151f2:	637b      	str	r3, [r7, #52]	; 0x34
 80151f4:	e001      	b.n	80151fa <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80151f6:	2300      	movs	r3, #0
 80151f8:	637b      	str	r3, [r7, #52]	; 0x34
 80151fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015206:	4618      	mov	r0, r3
 8015208:	3738      	adds	r7, #56	; 0x38
 801520a:	46bd      	mov	sp, r7
 801520c:	bd80      	pop	{r7, pc}

0801520e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801520e:	b580      	push	{r7, lr}
 8015210:	b084      	sub	sp, #16
 8015212:	af00      	add	r7, sp, #0
 8015214:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d10b      	bne.n	8015238 <vQueueDelete+0x2a>
	__asm volatile
 8015220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015224:	b672      	cpsid	i
 8015226:	f383 8811 	msr	BASEPRI, r3
 801522a:	f3bf 8f6f 	isb	sy
 801522e:	f3bf 8f4f 	dsb	sy
 8015232:	b662      	cpsie	i
 8015234:	60bb      	str	r3, [r7, #8]
 8015236:	e7fe      	b.n	8015236 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015238:	68f8      	ldr	r0, [r7, #12]
 801523a:	f000 f92f 	bl	801549c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 801523e:	68f8      	ldr	r0, [r7, #12]
 8015240:	f001 fc70 	bl	8016b24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015244:	bf00      	nop
 8015246:	3710      	adds	r7, #16
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801524c:	b480      	push	{r7}
 801524e:	b085      	sub	sp, #20
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015258:	2b00      	cmp	r3, #0
 801525a:	d006      	beq.n	801526a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f1c3 0307 	rsb	r3, r3, #7
 8015266:	60fb      	str	r3, [r7, #12]
 8015268:	e001      	b.n	801526e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801526a:	2300      	movs	r3, #0
 801526c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801526e:	68fb      	ldr	r3, [r7, #12]
	}
 8015270:	4618      	mov	r0, r3
 8015272:	3714      	adds	r7, #20
 8015274:	46bd      	mov	sp, r7
 8015276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527a:	4770      	bx	lr

0801527c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b086      	sub	sp, #24
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015288:	2300      	movs	r3, #0
 801528a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015296:	2b00      	cmp	r3, #0
 8015298:	d10d      	bne.n	80152b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d14d      	bne.n	801533e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	685b      	ldr	r3, [r3, #4]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f000 ffa0 	bl	80161ec <xTaskPriorityDisinherit>
 80152ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	2200      	movs	r2, #0
 80152b2:	605a      	str	r2, [r3, #4]
 80152b4:	e043      	b.n	801533e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d119      	bne.n	80152f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	6898      	ldr	r0, [r3, #8]
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152c4:	461a      	mov	r2, r3
 80152c6:	68b9      	ldr	r1, [r7, #8]
 80152c8:	f00d fca6 	bl	8022c18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	689a      	ldr	r2, [r3, #8]
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152d4:	441a      	add	r2, r3
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	689a      	ldr	r2, [r3, #8]
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d32b      	bcc.n	801533e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	609a      	str	r2, [r3, #8]
 80152ee:	e026      	b.n	801533e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	68d8      	ldr	r0, [r3, #12]
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152f8:	461a      	mov	r2, r3
 80152fa:	68b9      	ldr	r1, [r7, #8]
 80152fc:	f00d fc8c 	bl	8022c18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	68da      	ldr	r2, [r3, #12]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015308:	425b      	negs	r3, r3
 801530a:	441a      	add	r2, r3
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	68da      	ldr	r2, [r3, #12]
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	429a      	cmp	r2, r3
 801531a:	d207      	bcs.n	801532c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	685a      	ldr	r2, [r3, #4]
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015324:	425b      	negs	r3, r3
 8015326:	441a      	add	r2, r3
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2b02      	cmp	r3, #2
 8015330:	d105      	bne.n	801533e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015332:	693b      	ldr	r3, [r7, #16]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d002      	beq.n	801533e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	3b01      	subs	r3, #1
 801533c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	1c5a      	adds	r2, r3, #1
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015346:	697b      	ldr	r3, [r7, #20]
}
 8015348:	4618      	mov	r0, r3
 801534a:	3718      	adds	r7, #24
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}

08015350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801535e:	2b00      	cmp	r3, #0
 8015360:	d018      	beq.n	8015394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	68da      	ldr	r2, [r3, #12]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801536a:	441a      	add	r2, r3
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	68da      	ldr	r2, [r3, #12]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	429a      	cmp	r2, r3
 801537a:	d303      	bcc.n	8015384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681a      	ldr	r2, [r3, #0]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	68d9      	ldr	r1, [r3, #12]
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801538c:	461a      	mov	r2, r3
 801538e:	6838      	ldr	r0, [r7, #0]
 8015390:	f00d fc42 	bl	8022c18 <memcpy>
	}
}
 8015394:	bf00      	nop
 8015396:	3708      	adds	r7, #8
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}

0801539c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80153a4:	f001 f9d0 	bl	8016748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153b0:	e011      	b.n	80153d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d012      	beq.n	80153e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	3324      	adds	r3, #36	; 0x24
 80153be:	4618      	mov	r0, r3
 80153c0:	f000 fcca 	bl	8015d58 <xTaskRemoveFromEventList>
 80153c4:	4603      	mov	r3, r0
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d001      	beq.n	80153ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80153ca:	f000 fda3 	bl	8015f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80153ce:	7bfb      	ldrb	r3, [r7, #15]
 80153d0:	3b01      	subs	r3, #1
 80153d2:	b2db      	uxtb	r3, r3
 80153d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80153d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	dce9      	bgt.n	80153b2 <prvUnlockQueue+0x16>
 80153de:	e000      	b.n	80153e2 <prvUnlockQueue+0x46>
					break;
 80153e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	22ff      	movs	r2, #255	; 0xff
 80153e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80153ea:	f001 f9df 	bl	80167ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80153ee:	f001 f9ab 	bl	8016748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80153f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80153fa:	e011      	b.n	8015420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	691b      	ldr	r3, [r3, #16]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d012      	beq.n	801542a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	3310      	adds	r3, #16
 8015408:	4618      	mov	r0, r3
 801540a:	f000 fca5 	bl	8015d58 <xTaskRemoveFromEventList>
 801540e:	4603      	mov	r3, r0
 8015410:	2b00      	cmp	r3, #0
 8015412:	d001      	beq.n	8015418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015414:	f000 fd7e 	bl	8015f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015418:	7bbb      	ldrb	r3, [r7, #14]
 801541a:	3b01      	subs	r3, #1
 801541c:	b2db      	uxtb	r3, r3
 801541e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015424:	2b00      	cmp	r3, #0
 8015426:	dce9      	bgt.n	80153fc <prvUnlockQueue+0x60>
 8015428:	e000      	b.n	801542c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801542a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	22ff      	movs	r2, #255	; 0xff
 8015430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015434:	f001 f9ba 	bl	80167ac <vPortExitCritical>
}
 8015438:	bf00      	nop
 801543a:	3710      	adds	r7, #16
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}

08015440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015448:	f001 f97e 	bl	8016748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015450:	2b00      	cmp	r3, #0
 8015452:	d102      	bne.n	801545a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015454:	2301      	movs	r3, #1
 8015456:	60fb      	str	r3, [r7, #12]
 8015458:	e001      	b.n	801545e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801545a:	2300      	movs	r3, #0
 801545c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801545e:	f001 f9a5 	bl	80167ac <vPortExitCritical>

	return xReturn;
 8015462:	68fb      	ldr	r3, [r7, #12]
}
 8015464:	4618      	mov	r0, r3
 8015466:	3710      	adds	r7, #16
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}

0801546c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b084      	sub	sp, #16
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015474:	f001 f968 	bl	8016748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015480:	429a      	cmp	r2, r3
 8015482:	d102      	bne.n	801548a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015484:	2301      	movs	r3, #1
 8015486:	60fb      	str	r3, [r7, #12]
 8015488:	e001      	b.n	801548e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801548a:	2300      	movs	r3, #0
 801548c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801548e:	f001 f98d 	bl	80167ac <vPortExitCritical>

	return xReturn;
 8015492:	68fb      	ldr	r3, [r7, #12]
}
 8015494:	4618      	mov	r0, r3
 8015496:	3710      	adds	r7, #16
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}

0801549c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801549c:	b480      	push	{r7}
 801549e:	b085      	sub	sp, #20
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80154a4:	2300      	movs	r3, #0
 80154a6:	60fb      	str	r3, [r7, #12]
 80154a8:	e016      	b.n	80154d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80154aa:	4a10      	ldr	r2, [pc, #64]	; (80154ec <vQueueUnregisterQueue+0x50>)
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	00db      	lsls	r3, r3, #3
 80154b0:	4413      	add	r3, r2
 80154b2:	685b      	ldr	r3, [r3, #4]
 80154b4:	687a      	ldr	r2, [r7, #4]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d10b      	bne.n	80154d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80154ba:	4a0c      	ldr	r2, [pc, #48]	; (80154ec <vQueueUnregisterQueue+0x50>)
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	2100      	movs	r1, #0
 80154c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80154c4:	4a09      	ldr	r2, [pc, #36]	; (80154ec <vQueueUnregisterQueue+0x50>)
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	00db      	lsls	r3, r3, #3
 80154ca:	4413      	add	r3, r2
 80154cc:	2200      	movs	r2, #0
 80154ce:	605a      	str	r2, [r3, #4]
				break;
 80154d0:	e005      	b.n	80154de <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	3301      	adds	r3, #1
 80154d6:	60fb      	str	r3, [r7, #12]
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	2b07      	cmp	r3, #7
 80154dc:	d9e5      	bls.n	80154aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80154de:	bf00      	nop
 80154e0:	3714      	adds	r7, #20
 80154e2:	46bd      	mov	sp, r7
 80154e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e8:	4770      	bx	lr
 80154ea:	bf00      	nop
 80154ec:	2000bba4 	.word	0x2000bba4

080154f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b08c      	sub	sp, #48	; 0x30
 80154f4:	af04      	add	r7, sp, #16
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	60b9      	str	r1, [r7, #8]
 80154fa:	603b      	str	r3, [r7, #0]
 80154fc:	4613      	mov	r3, r2
 80154fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015500:	88fb      	ldrh	r3, [r7, #6]
 8015502:	009b      	lsls	r3, r3, #2
 8015504:	4618      	mov	r0, r3
 8015506:	f001 fa41 	bl	801698c <pvPortMalloc>
 801550a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d00e      	beq.n	8015530 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8015512:	2058      	movs	r0, #88	; 0x58
 8015514:	f001 fa3a 	bl	801698c <pvPortMalloc>
 8015518:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801551a:	69fb      	ldr	r3, [r7, #28]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d003      	beq.n	8015528 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015520:	69fb      	ldr	r3, [r7, #28]
 8015522:	697a      	ldr	r2, [r7, #20]
 8015524:	631a      	str	r2, [r3, #48]	; 0x30
 8015526:	e005      	b.n	8015534 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015528:	6978      	ldr	r0, [r7, #20]
 801552a:	f001 fafb 	bl	8016b24 <vPortFree>
 801552e:	e001      	b.n	8015534 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015530:	2300      	movs	r3, #0
 8015532:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015534:	69fb      	ldr	r3, [r7, #28]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d013      	beq.n	8015562 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801553a:	88fa      	ldrh	r2, [r7, #6]
 801553c:	2300      	movs	r3, #0
 801553e:	9303      	str	r3, [sp, #12]
 8015540:	69fb      	ldr	r3, [r7, #28]
 8015542:	9302      	str	r3, [sp, #8]
 8015544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015546:	9301      	str	r3, [sp, #4]
 8015548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554a:	9300      	str	r3, [sp, #0]
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	68b9      	ldr	r1, [r7, #8]
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f000 f80e 	bl	8015572 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015556:	69f8      	ldr	r0, [r7, #28]
 8015558:	f000 f896 	bl	8015688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801555c:	2301      	movs	r3, #1
 801555e:	61bb      	str	r3, [r7, #24]
 8015560:	e002      	b.n	8015568 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015562:	f04f 33ff 	mov.w	r3, #4294967295
 8015566:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015568:	69bb      	ldr	r3, [r7, #24]
	}
 801556a:	4618      	mov	r0, r3
 801556c:	3720      	adds	r7, #32
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}

08015572 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015572:	b580      	push	{r7, lr}
 8015574:	b088      	sub	sp, #32
 8015576:	af00      	add	r7, sp, #0
 8015578:	60f8      	str	r0, [r7, #12]
 801557a:	60b9      	str	r1, [r7, #8]
 801557c:	607a      	str	r2, [r7, #4]
 801557e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015582:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	009b      	lsls	r3, r3, #2
 8015588:	461a      	mov	r2, r3
 801558a:	21a5      	movs	r1, #165	; 0xa5
 801558c:	f00d fb4f 	bl	8022c2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8015590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015594:	6879      	ldr	r1, [r7, #4]
 8015596:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801559a:	440b      	add	r3, r1
 801559c:	009b      	lsls	r3, r3, #2
 801559e:	4413      	add	r3, r2
 80155a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80155a2:	69bb      	ldr	r3, [r7, #24]
 80155a4:	f023 0307 	bic.w	r3, r3, #7
 80155a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80155aa:	69bb      	ldr	r3, [r7, #24]
 80155ac:	f003 0307 	and.w	r3, r3, #7
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d00b      	beq.n	80155cc <prvInitialiseNewTask+0x5a>
 80155b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155b8:	b672      	cpsid	i
 80155ba:	f383 8811 	msr	BASEPRI, r3
 80155be:	f3bf 8f6f 	isb	sy
 80155c2:	f3bf 8f4f 	dsb	sy
 80155c6:	b662      	cpsie	i
 80155c8:	617b      	str	r3, [r7, #20]
 80155ca:	e7fe      	b.n	80155ca <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80155cc:	2300      	movs	r3, #0
 80155ce:	61fb      	str	r3, [r7, #28]
 80155d0:	e012      	b.n	80155f8 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80155d2:	68ba      	ldr	r2, [r7, #8]
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	4413      	add	r3, r2
 80155d8:	7819      	ldrb	r1, [r3, #0]
 80155da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	4413      	add	r3, r2
 80155e0:	3334      	adds	r3, #52	; 0x34
 80155e2:	460a      	mov	r2, r1
 80155e4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80155e6:	68ba      	ldr	r2, [r7, #8]
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	4413      	add	r3, r2
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d006      	beq.n	8015600 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80155f2:	69fb      	ldr	r3, [r7, #28]
 80155f4:	3301      	adds	r3, #1
 80155f6:	61fb      	str	r3, [r7, #28]
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	2b0f      	cmp	r3, #15
 80155fc:	d9e9      	bls.n	80155d2 <prvInitialiseNewTask+0x60>
 80155fe:	e000      	b.n	8015602 <prvInitialiseNewTask+0x90>
		{
			break;
 8015600:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015604:	2200      	movs	r2, #0
 8015606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801560c:	2b06      	cmp	r3, #6
 801560e:	d901      	bls.n	8015614 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015610:	2306      	movs	r3, #6
 8015612:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015618:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801561c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801561e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015622:	2200      	movs	r2, #0
 8015624:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015628:	3304      	adds	r3, #4
 801562a:	4618      	mov	r0, r3
 801562c:	f7fe ffbc 	bl	80145a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015632:	3318      	adds	r3, #24
 8015634:	4618      	mov	r0, r3
 8015636:	f7fe ffb7 	bl	80145a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801563e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015642:	f1c3 0207 	rsb	r2, r3, #7
 8015646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015648:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801564c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801564e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8015650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015652:	2200      	movs	r2, #0
 8015654:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015658:	2200      	movs	r2, #0
 801565a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801565e:	2200      	movs	r2, #0
 8015660:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015664:	683a      	ldr	r2, [r7, #0]
 8015666:	68f9      	ldr	r1, [r7, #12]
 8015668:	69b8      	ldr	r0, [r7, #24]
 801566a:	f000 ff63 	bl	8016534 <pxPortInitialiseStack>
 801566e:	4602      	mov	r2, r0
 8015670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015672:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8015674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015676:	2b00      	cmp	r3, #0
 8015678:	d002      	beq.n	8015680 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801567e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015680:	bf00      	nop
 8015682:	3720      	adds	r7, #32
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}

08015688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b082      	sub	sp, #8
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015690:	f001 f85a 	bl	8016748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015694:	4b2a      	ldr	r3, [pc, #168]	; (8015740 <prvAddNewTaskToReadyList+0xb8>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	3301      	adds	r3, #1
 801569a:	4a29      	ldr	r2, [pc, #164]	; (8015740 <prvAddNewTaskToReadyList+0xb8>)
 801569c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801569e:	4b29      	ldr	r3, [pc, #164]	; (8015744 <prvAddNewTaskToReadyList+0xbc>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d109      	bne.n	80156ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80156a6:	4a27      	ldr	r2, [pc, #156]	; (8015744 <prvAddNewTaskToReadyList+0xbc>)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80156ac:	4b24      	ldr	r3, [pc, #144]	; (8015740 <prvAddNewTaskToReadyList+0xb8>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	2b01      	cmp	r3, #1
 80156b2:	d110      	bne.n	80156d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80156b4:	f000 fc54 	bl	8015f60 <prvInitialiseTaskLists>
 80156b8:	e00d      	b.n	80156d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80156ba:	4b23      	ldr	r3, [pc, #140]	; (8015748 <prvAddNewTaskToReadyList+0xc0>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d109      	bne.n	80156d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80156c2:	4b20      	ldr	r3, [pc, #128]	; (8015744 <prvAddNewTaskToReadyList+0xbc>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156cc:	429a      	cmp	r2, r3
 80156ce:	d802      	bhi.n	80156d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80156d0:	4a1c      	ldr	r2, [pc, #112]	; (8015744 <prvAddNewTaskToReadyList+0xbc>)
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80156d6:	4b1d      	ldr	r3, [pc, #116]	; (801574c <prvAddNewTaskToReadyList+0xc4>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	3301      	adds	r3, #1
 80156dc:	4a1b      	ldr	r2, [pc, #108]	; (801574c <prvAddNewTaskToReadyList+0xc4>)
 80156de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156e4:	2201      	movs	r2, #1
 80156e6:	409a      	lsls	r2, r3
 80156e8:	4b19      	ldr	r3, [pc, #100]	; (8015750 <prvAddNewTaskToReadyList+0xc8>)
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	4313      	orrs	r3, r2
 80156ee:	4a18      	ldr	r2, [pc, #96]	; (8015750 <prvAddNewTaskToReadyList+0xc8>)
 80156f0:	6013      	str	r3, [r2, #0]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156f6:	4613      	mov	r3, r2
 80156f8:	009b      	lsls	r3, r3, #2
 80156fa:	4413      	add	r3, r2
 80156fc:	009b      	lsls	r3, r3, #2
 80156fe:	4a15      	ldr	r2, [pc, #84]	; (8015754 <prvAddNewTaskToReadyList+0xcc>)
 8015700:	441a      	add	r2, r3
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	3304      	adds	r3, #4
 8015706:	4619      	mov	r1, r3
 8015708:	4610      	mov	r0, r2
 801570a:	f7fe ff5a 	bl	80145c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801570e:	f001 f84d 	bl	80167ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015712:	4b0d      	ldr	r3, [pc, #52]	; (8015748 <prvAddNewTaskToReadyList+0xc0>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d00e      	beq.n	8015738 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801571a:	4b0a      	ldr	r3, [pc, #40]	; (8015744 <prvAddNewTaskToReadyList+0xbc>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015724:	429a      	cmp	r2, r3
 8015726:	d207      	bcs.n	8015738 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015728:	4b0b      	ldr	r3, [pc, #44]	; (8015758 <prvAddNewTaskToReadyList+0xd0>)
 801572a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801572e:	601a      	str	r2, [r3, #0]
 8015730:	f3bf 8f4f 	dsb	sy
 8015734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015738:	bf00      	nop
 801573a:	3708      	adds	r7, #8
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}
 8015740:	20000244 	.word	0x20000244
 8015744:	20000144 	.word	0x20000144
 8015748:	20000250 	.word	0x20000250
 801574c:	20000260 	.word	0x20000260
 8015750:	2000024c 	.word	0x2000024c
 8015754:	20000148 	.word	0x20000148
 8015758:	e000ed04 	.word	0xe000ed04

0801575c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801575c:	b580      	push	{r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015764:	2300      	movs	r3, #0
 8015766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d018      	beq.n	80157a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801576e:	4b14      	ldr	r3, [pc, #80]	; (80157c0 <vTaskDelay+0x64>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d00b      	beq.n	801578e <vTaskDelay+0x32>
 8015776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801577a:	b672      	cpsid	i
 801577c:	f383 8811 	msr	BASEPRI, r3
 8015780:	f3bf 8f6f 	isb	sy
 8015784:	f3bf 8f4f 	dsb	sy
 8015788:	b662      	cpsie	i
 801578a:	60bb      	str	r3, [r7, #8]
 801578c:	e7fe      	b.n	801578c <vTaskDelay+0x30>
			vTaskSuspendAll();
 801578e:	f000 f865 	bl	801585c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015792:	2100      	movs	r1, #0
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 fe67 	bl	8016468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801579a:	f000 f86d 	bl	8015878 <xTaskResumeAll>
 801579e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d107      	bne.n	80157b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80157a6:	4b07      	ldr	r3, [pc, #28]	; (80157c4 <vTaskDelay+0x68>)
 80157a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157ac:	601a      	str	r2, [r3, #0]
 80157ae:	f3bf 8f4f 	dsb	sy
 80157b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80157b6:	bf00      	nop
 80157b8:	3710      	adds	r7, #16
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}
 80157be:	bf00      	nop
 80157c0:	2000026c 	.word	0x2000026c
 80157c4:	e000ed04 	.word	0xe000ed04

080157c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b086      	sub	sp, #24
 80157cc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80157ce:	4b1d      	ldr	r3, [pc, #116]	; (8015844 <vTaskStartScheduler+0x7c>)
 80157d0:	9301      	str	r3, [sp, #4]
 80157d2:	2300      	movs	r3, #0
 80157d4:	9300      	str	r3, [sp, #0]
 80157d6:	2300      	movs	r3, #0
 80157d8:	2280      	movs	r2, #128	; 0x80
 80157da:	491b      	ldr	r1, [pc, #108]	; (8015848 <vTaskStartScheduler+0x80>)
 80157dc:	481b      	ldr	r0, [pc, #108]	; (801584c <vTaskStartScheduler+0x84>)
 80157de:	f7ff fe87 	bl	80154f0 <xTaskCreate>
 80157e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	d117      	bne.n	801581a <vTaskStartScheduler+0x52>
 80157ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ee:	b672      	cpsid	i
 80157f0:	f383 8811 	msr	BASEPRI, r3
 80157f4:	f3bf 8f6f 	isb	sy
 80157f8:	f3bf 8f4f 	dsb	sy
 80157fc:	b662      	cpsie	i
 80157fe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015800:	4b13      	ldr	r3, [pc, #76]	; (8015850 <vTaskStartScheduler+0x88>)
 8015802:	f04f 32ff 	mov.w	r2, #4294967295
 8015806:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015808:	4b12      	ldr	r3, [pc, #72]	; (8015854 <vTaskStartScheduler+0x8c>)
 801580a:	2201      	movs	r2, #1
 801580c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801580e:	4b12      	ldr	r3, [pc, #72]	; (8015858 <vTaskStartScheduler+0x90>)
 8015810:	2200      	movs	r2, #0
 8015812:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015814:	f000 ff1c 	bl	8016650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015818:	e00f      	b.n	801583a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015820:	d10b      	bne.n	801583a <vTaskStartScheduler+0x72>
 8015822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015826:	b672      	cpsid	i
 8015828:	f383 8811 	msr	BASEPRI, r3
 801582c:	f3bf 8f6f 	isb	sy
 8015830:	f3bf 8f4f 	dsb	sy
 8015834:	b662      	cpsie	i
 8015836:	607b      	str	r3, [r7, #4]
 8015838:	e7fe      	b.n	8015838 <vTaskStartScheduler+0x70>
}
 801583a:	bf00      	nop
 801583c:	3710      	adds	r7, #16
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	20000268 	.word	0x20000268
 8015848:	08023b6c 	.word	0x08023b6c
 801584c:	08015f2d 	.word	0x08015f2d
 8015850:	20000264 	.word	0x20000264
 8015854:	20000250 	.word	0x20000250
 8015858:	20000248 	.word	0x20000248

0801585c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801585c:	b480      	push	{r7}
 801585e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015860:	4b04      	ldr	r3, [pc, #16]	; (8015874 <vTaskSuspendAll+0x18>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	3301      	adds	r3, #1
 8015866:	4a03      	ldr	r2, [pc, #12]	; (8015874 <vTaskSuspendAll+0x18>)
 8015868:	6013      	str	r3, [r2, #0]
}
 801586a:	bf00      	nop
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr
 8015874:	2000026c 	.word	0x2000026c

08015878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b084      	sub	sp, #16
 801587c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801587e:	2300      	movs	r3, #0
 8015880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015882:	2300      	movs	r3, #0
 8015884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015886:	4b42      	ldr	r3, [pc, #264]	; (8015990 <xTaskResumeAll+0x118>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d10b      	bne.n	80158a6 <xTaskResumeAll+0x2e>
 801588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015892:	b672      	cpsid	i
 8015894:	f383 8811 	msr	BASEPRI, r3
 8015898:	f3bf 8f6f 	isb	sy
 801589c:	f3bf 8f4f 	dsb	sy
 80158a0:	b662      	cpsie	i
 80158a2:	603b      	str	r3, [r7, #0]
 80158a4:	e7fe      	b.n	80158a4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80158a6:	f000 ff4f 	bl	8016748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80158aa:	4b39      	ldr	r3, [pc, #228]	; (8015990 <xTaskResumeAll+0x118>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	3b01      	subs	r3, #1
 80158b0:	4a37      	ldr	r2, [pc, #220]	; (8015990 <xTaskResumeAll+0x118>)
 80158b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80158b4:	4b36      	ldr	r3, [pc, #216]	; (8015990 <xTaskResumeAll+0x118>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d161      	bne.n	8015980 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80158bc:	4b35      	ldr	r3, [pc, #212]	; (8015994 <xTaskResumeAll+0x11c>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d05d      	beq.n	8015980 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80158c4:	e02e      	b.n	8015924 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80158c6:	4b34      	ldr	r3, [pc, #208]	; (8015998 <xTaskResumeAll+0x120>)
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	68db      	ldr	r3, [r3, #12]
 80158cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	3318      	adds	r3, #24
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7fe fed2 	bl	801467c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	3304      	adds	r3, #4
 80158dc:	4618      	mov	r0, r3
 80158de:	f7fe fecd 	bl	801467c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158e6:	2201      	movs	r2, #1
 80158e8:	409a      	lsls	r2, r3
 80158ea:	4b2c      	ldr	r3, [pc, #176]	; (801599c <xTaskResumeAll+0x124>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	4313      	orrs	r3, r2
 80158f0:	4a2a      	ldr	r2, [pc, #168]	; (801599c <xTaskResumeAll+0x124>)
 80158f2:	6013      	str	r3, [r2, #0]
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158f8:	4613      	mov	r3, r2
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	4413      	add	r3, r2
 80158fe:	009b      	lsls	r3, r3, #2
 8015900:	4a27      	ldr	r2, [pc, #156]	; (80159a0 <xTaskResumeAll+0x128>)
 8015902:	441a      	add	r2, r3
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	3304      	adds	r3, #4
 8015908:	4619      	mov	r1, r3
 801590a:	4610      	mov	r0, r2
 801590c:	f7fe fe59 	bl	80145c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015914:	4b23      	ldr	r3, [pc, #140]	; (80159a4 <xTaskResumeAll+0x12c>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801591a:	429a      	cmp	r2, r3
 801591c:	d302      	bcc.n	8015924 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801591e:	4b22      	ldr	r3, [pc, #136]	; (80159a8 <xTaskResumeAll+0x130>)
 8015920:	2201      	movs	r2, #1
 8015922:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015924:	4b1c      	ldr	r3, [pc, #112]	; (8015998 <xTaskResumeAll+0x120>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d1cc      	bne.n	80158c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d001      	beq.n	8015936 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015932:	f000 fb91 	bl	8016058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015936:	4b1d      	ldr	r3, [pc, #116]	; (80159ac <xTaskResumeAll+0x134>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d010      	beq.n	8015964 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015942:	f000 f859 	bl	80159f8 <xTaskIncrementTick>
 8015946:	4603      	mov	r3, r0
 8015948:	2b00      	cmp	r3, #0
 801594a:	d002      	beq.n	8015952 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801594c:	4b16      	ldr	r3, [pc, #88]	; (80159a8 <xTaskResumeAll+0x130>)
 801594e:	2201      	movs	r2, #1
 8015950:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	3b01      	subs	r3, #1
 8015956:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d1f1      	bne.n	8015942 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 801595e:	4b13      	ldr	r3, [pc, #76]	; (80159ac <xTaskResumeAll+0x134>)
 8015960:	2200      	movs	r2, #0
 8015962:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015964:	4b10      	ldr	r3, [pc, #64]	; (80159a8 <xTaskResumeAll+0x130>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d009      	beq.n	8015980 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801596c:	2301      	movs	r3, #1
 801596e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015970:	4b0f      	ldr	r3, [pc, #60]	; (80159b0 <xTaskResumeAll+0x138>)
 8015972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015976:	601a      	str	r2, [r3, #0]
 8015978:	f3bf 8f4f 	dsb	sy
 801597c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015980:	f000 ff14 	bl	80167ac <vPortExitCritical>

	return xAlreadyYielded;
 8015984:	68bb      	ldr	r3, [r7, #8]
}
 8015986:	4618      	mov	r0, r3
 8015988:	3710      	adds	r7, #16
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
 801598e:	bf00      	nop
 8015990:	2000026c 	.word	0x2000026c
 8015994:	20000244 	.word	0x20000244
 8015998:	20000204 	.word	0x20000204
 801599c:	2000024c 	.word	0x2000024c
 80159a0:	20000148 	.word	0x20000148
 80159a4:	20000144 	.word	0x20000144
 80159a8:	20000258 	.word	0x20000258
 80159ac:	20000254 	.word	0x20000254
 80159b0:	e000ed04 	.word	0xe000ed04

080159b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80159b4:	b480      	push	{r7}
 80159b6:	b083      	sub	sp, #12
 80159b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80159ba:	4b05      	ldr	r3, [pc, #20]	; (80159d0 <xTaskGetTickCount+0x1c>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80159c0:	687b      	ldr	r3, [r7, #4]
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	370c      	adds	r7, #12
 80159c6:	46bd      	mov	sp, r7
 80159c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159cc:	4770      	bx	lr
 80159ce:	bf00      	nop
 80159d0:	20000248 	.word	0x20000248

080159d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b082      	sub	sp, #8
 80159d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80159da:	f000 ff95 	bl	8016908 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80159de:	2300      	movs	r3, #0
 80159e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80159e2:	4b04      	ldr	r3, [pc, #16]	; (80159f4 <xTaskGetTickCountFromISR+0x20>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80159e8:	683b      	ldr	r3, [r7, #0]
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	20000248 	.word	0x20000248

080159f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b086      	sub	sp, #24
 80159fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80159fe:	2300      	movs	r3, #0
 8015a00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a02:	4b51      	ldr	r3, [pc, #324]	; (8015b48 <xTaskIncrementTick+0x150>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	f040 808e 	bne.w	8015b28 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015a0c:	4b4f      	ldr	r3, [pc, #316]	; (8015b4c <xTaskIncrementTick+0x154>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	3301      	adds	r3, #1
 8015a12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015a14:	4a4d      	ldr	r2, [pc, #308]	; (8015b4c <xTaskIncrementTick+0x154>)
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015a1a:	693b      	ldr	r3, [r7, #16]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d121      	bne.n	8015a64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015a20:	4b4b      	ldr	r3, [pc, #300]	; (8015b50 <xTaskIncrementTick+0x158>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d00b      	beq.n	8015a42 <xTaskIncrementTick+0x4a>
 8015a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a2e:	b672      	cpsid	i
 8015a30:	f383 8811 	msr	BASEPRI, r3
 8015a34:	f3bf 8f6f 	isb	sy
 8015a38:	f3bf 8f4f 	dsb	sy
 8015a3c:	b662      	cpsie	i
 8015a3e:	603b      	str	r3, [r7, #0]
 8015a40:	e7fe      	b.n	8015a40 <xTaskIncrementTick+0x48>
 8015a42:	4b43      	ldr	r3, [pc, #268]	; (8015b50 <xTaskIncrementTick+0x158>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	60fb      	str	r3, [r7, #12]
 8015a48:	4b42      	ldr	r3, [pc, #264]	; (8015b54 <xTaskIncrementTick+0x15c>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	4a40      	ldr	r2, [pc, #256]	; (8015b50 <xTaskIncrementTick+0x158>)
 8015a4e:	6013      	str	r3, [r2, #0]
 8015a50:	4a40      	ldr	r2, [pc, #256]	; (8015b54 <xTaskIncrementTick+0x15c>)
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	6013      	str	r3, [r2, #0]
 8015a56:	4b40      	ldr	r3, [pc, #256]	; (8015b58 <xTaskIncrementTick+0x160>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	4a3e      	ldr	r2, [pc, #248]	; (8015b58 <xTaskIncrementTick+0x160>)
 8015a5e:	6013      	str	r3, [r2, #0]
 8015a60:	f000 fafa 	bl	8016058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015a64:	4b3d      	ldr	r3, [pc, #244]	; (8015b5c <xTaskIncrementTick+0x164>)
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	693a      	ldr	r2, [r7, #16]
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d34d      	bcc.n	8015b0a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a6e:	4b38      	ldr	r3, [pc, #224]	; (8015b50 <xTaskIncrementTick+0x158>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d101      	bne.n	8015a7c <xTaskIncrementTick+0x84>
 8015a78:	2301      	movs	r3, #1
 8015a7a:	e000      	b.n	8015a7e <xTaskIncrementTick+0x86>
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d004      	beq.n	8015a8c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a82:	4b36      	ldr	r3, [pc, #216]	; (8015b5c <xTaskIncrementTick+0x164>)
 8015a84:	f04f 32ff 	mov.w	r2, #4294967295
 8015a88:	601a      	str	r2, [r3, #0]
					break;
 8015a8a:	e03e      	b.n	8015b0a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8015a8c:	4b30      	ldr	r3, [pc, #192]	; (8015b50 <xTaskIncrementTick+0x158>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	68db      	ldr	r3, [r3, #12]
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015a9c:	693a      	ldr	r2, [r7, #16]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d203      	bcs.n	8015aac <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015aa4:	4a2d      	ldr	r2, [pc, #180]	; (8015b5c <xTaskIncrementTick+0x164>)
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	6013      	str	r3, [r2, #0]
						break;
 8015aaa:	e02e      	b.n	8015b0a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015aac:	68bb      	ldr	r3, [r7, #8]
 8015aae:	3304      	adds	r3, #4
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7fe fde3 	bl	801467c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d004      	beq.n	8015ac8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	3318      	adds	r3, #24
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7fe fdda 	bl	801467c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015acc:	2201      	movs	r2, #1
 8015ace:	409a      	lsls	r2, r3
 8015ad0:	4b23      	ldr	r3, [pc, #140]	; (8015b60 <xTaskIncrementTick+0x168>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	4313      	orrs	r3, r2
 8015ad6:	4a22      	ldr	r2, [pc, #136]	; (8015b60 <xTaskIncrementTick+0x168>)
 8015ad8:	6013      	str	r3, [r2, #0]
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ade:	4613      	mov	r3, r2
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	4413      	add	r3, r2
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	4a1f      	ldr	r2, [pc, #124]	; (8015b64 <xTaskIncrementTick+0x16c>)
 8015ae8:	441a      	add	r2, r3
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	3304      	adds	r3, #4
 8015aee:	4619      	mov	r1, r3
 8015af0:	4610      	mov	r0, r2
 8015af2:	f7fe fd66 	bl	80145c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015afa:	4b1b      	ldr	r3, [pc, #108]	; (8015b68 <xTaskIncrementTick+0x170>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d3b4      	bcc.n	8015a6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015b04:	2301      	movs	r3, #1
 8015b06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b08:	e7b1      	b.n	8015a6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015b0a:	4b17      	ldr	r3, [pc, #92]	; (8015b68 <xTaskIncrementTick+0x170>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b10:	4914      	ldr	r1, [pc, #80]	; (8015b64 <xTaskIncrementTick+0x16c>)
 8015b12:	4613      	mov	r3, r2
 8015b14:	009b      	lsls	r3, r3, #2
 8015b16:	4413      	add	r3, r2
 8015b18:	009b      	lsls	r3, r3, #2
 8015b1a:	440b      	add	r3, r1
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	2b01      	cmp	r3, #1
 8015b20:	d907      	bls.n	8015b32 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8015b22:	2301      	movs	r3, #1
 8015b24:	617b      	str	r3, [r7, #20]
 8015b26:	e004      	b.n	8015b32 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015b28:	4b10      	ldr	r3, [pc, #64]	; (8015b6c <xTaskIncrementTick+0x174>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	3301      	adds	r3, #1
 8015b2e:	4a0f      	ldr	r2, [pc, #60]	; (8015b6c <xTaskIncrementTick+0x174>)
 8015b30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015b32:	4b0f      	ldr	r3, [pc, #60]	; (8015b70 <xTaskIncrementTick+0x178>)
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d001      	beq.n	8015b3e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015b3e:	697b      	ldr	r3, [r7, #20]
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3718      	adds	r7, #24
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}
 8015b48:	2000026c 	.word	0x2000026c
 8015b4c:	20000248 	.word	0x20000248
 8015b50:	200001fc 	.word	0x200001fc
 8015b54:	20000200 	.word	0x20000200
 8015b58:	2000025c 	.word	0x2000025c
 8015b5c:	20000264 	.word	0x20000264
 8015b60:	2000024c 	.word	0x2000024c
 8015b64:	20000148 	.word	0x20000148
 8015b68:	20000144 	.word	0x20000144
 8015b6c:	20000254 	.word	0x20000254
 8015b70:	20000258 	.word	0x20000258

08015b74 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b084      	sub	sp, #16
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d103      	bne.n	8015b8c <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8015b84:	4b08      	ldr	r3, [pc, #32]	; (8015ba8 <vTaskSetApplicationTaskTag+0x34>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	60fb      	str	r3, [r7, #12]
 8015b8a:	e001      	b.n	8015b90 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8015b90:	f000 fdda 	bl	8016748 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	683a      	ldr	r2, [r7, #0]
 8015b98:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8015b9a:	f000 fe07 	bl	80167ac <vPortExitCritical>
	}
 8015b9e:	bf00      	nop
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	20000144 	.word	0x20000144

08015bac <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d103      	bne.n	8015bc4 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8015bbc:	4b0b      	ldr	r3, [pc, #44]	; (8015bec <xTaskCallApplicationTaskHook+0x40>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	60fb      	str	r3, [r7, #12]
 8015bc2:	e001      	b.n	8015bc8 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d005      	beq.n	8015bdc <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015bd4:	6838      	ldr	r0, [r7, #0]
 8015bd6:	4798      	blx	r3
 8015bd8:	60b8      	str	r0, [r7, #8]
 8015bda:	e001      	b.n	8015be0 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8015be0:	68bb      	ldr	r3, [r7, #8]
	}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3710      	adds	r7, #16
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}
 8015bea:	bf00      	nop
 8015bec:	20000144 	.word	0x20000144

08015bf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b088      	sub	sp, #32
 8015bf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015bf6:	4b40      	ldr	r3, [pc, #256]	; (8015cf8 <vTaskSwitchContext+0x108>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d003      	beq.n	8015c06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015bfe:	4b3f      	ldr	r3, [pc, #252]	; (8015cfc <vTaskSwitchContext+0x10c>)
 8015c00:	2201      	movs	r2, #1
 8015c02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015c04:	e073      	b.n	8015cee <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 8015c06:	4b3d      	ldr	r3, [pc, #244]	; (8015cfc <vTaskSwitchContext+0x10c>)
 8015c08:	2200      	movs	r2, #0
 8015c0a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8015c0c:	4b3c      	ldr	r3, [pc, #240]	; (8015d00 <vTaskSwitchContext+0x110>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2101      	movs	r1, #1
 8015c12:	4618      	mov	r0, r3
 8015c14:	f7ff ffca 	bl	8015bac <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 8015c18:	4b39      	ldr	r3, [pc, #228]	; (8015d00 <vTaskSwitchContext+0x110>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c1e:	61fb      	str	r3, [r7, #28]
 8015c20:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8015c24:	61bb      	str	r3, [r7, #24]
 8015c26:	69fb      	ldr	r3, [r7, #28]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	69ba      	ldr	r2, [r7, #24]
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d111      	bne.n	8015c54 <vTaskSwitchContext+0x64>
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	3304      	adds	r3, #4
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	69ba      	ldr	r2, [r7, #24]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d10b      	bne.n	8015c54 <vTaskSwitchContext+0x64>
 8015c3c:	69fb      	ldr	r3, [r7, #28]
 8015c3e:	3308      	adds	r3, #8
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	69ba      	ldr	r2, [r7, #24]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d105      	bne.n	8015c54 <vTaskSwitchContext+0x64>
 8015c48:	69fb      	ldr	r3, [r7, #28]
 8015c4a:	330c      	adds	r3, #12
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	69ba      	ldr	r2, [r7, #24]
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d008      	beq.n	8015c66 <vTaskSwitchContext+0x76>
 8015c54:	4b2a      	ldr	r3, [pc, #168]	; (8015d00 <vTaskSwitchContext+0x110>)
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	4b29      	ldr	r3, [pc, #164]	; (8015d00 <vTaskSwitchContext+0x110>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	3334      	adds	r3, #52	; 0x34
 8015c5e:	4619      	mov	r1, r3
 8015c60:	4610      	mov	r0, r2
 8015c62:	f7fd fcf3 	bl	801364c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8015c66:	4b27      	ldr	r3, [pc, #156]	; (8015d04 <vTaskSwitchContext+0x114>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	fab3 f383 	clz	r3, r3
 8015c72:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015c74:	7afb      	ldrb	r3, [r7, #11]
 8015c76:	f1c3 031f 	rsb	r3, r3, #31
 8015c7a:	617b      	str	r3, [r7, #20]
 8015c7c:	4922      	ldr	r1, [pc, #136]	; (8015d08 <vTaskSwitchContext+0x118>)
 8015c7e:	697a      	ldr	r2, [r7, #20]
 8015c80:	4613      	mov	r3, r2
 8015c82:	009b      	lsls	r3, r3, #2
 8015c84:	4413      	add	r3, r2
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	440b      	add	r3, r1
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d10b      	bne.n	8015ca8 <vTaskSwitchContext+0xb8>
	__asm volatile
 8015c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c94:	b672      	cpsid	i
 8015c96:	f383 8811 	msr	BASEPRI, r3
 8015c9a:	f3bf 8f6f 	isb	sy
 8015c9e:	f3bf 8f4f 	dsb	sy
 8015ca2:	b662      	cpsie	i
 8015ca4:	607b      	str	r3, [r7, #4]
 8015ca6:	e7fe      	b.n	8015ca6 <vTaskSwitchContext+0xb6>
 8015ca8:	697a      	ldr	r2, [r7, #20]
 8015caa:	4613      	mov	r3, r2
 8015cac:	009b      	lsls	r3, r3, #2
 8015cae:	4413      	add	r3, r2
 8015cb0:	009b      	lsls	r3, r3, #2
 8015cb2:	4a15      	ldr	r2, [pc, #84]	; (8015d08 <vTaskSwitchContext+0x118>)
 8015cb4:	4413      	add	r3, r2
 8015cb6:	613b      	str	r3, [r7, #16]
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	685b      	ldr	r3, [r3, #4]
 8015cbc:	685a      	ldr	r2, [r3, #4]
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	605a      	str	r2, [r3, #4]
 8015cc2:	693b      	ldr	r3, [r7, #16]
 8015cc4:	685a      	ldr	r2, [r3, #4]
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	3308      	adds	r3, #8
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d104      	bne.n	8015cd8 <vTaskSwitchContext+0xe8>
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	685a      	ldr	r2, [r3, #4]
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	605a      	str	r2, [r3, #4]
 8015cd8:	693b      	ldr	r3, [r7, #16]
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	68db      	ldr	r3, [r3, #12]
 8015cde:	4a08      	ldr	r2, [pc, #32]	; (8015d00 <vTaskSwitchContext+0x110>)
 8015ce0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8015ce2:	4b07      	ldr	r3, [pc, #28]	; (8015d00 <vTaskSwitchContext+0x110>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	2100      	movs	r1, #0
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7ff ff5f 	bl	8015bac <xTaskCallApplicationTaskHook>
}
 8015cee:	bf00      	nop
 8015cf0:	3720      	adds	r7, #32
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}
 8015cf6:	bf00      	nop
 8015cf8:	2000026c 	.word	0x2000026c
 8015cfc:	20000258 	.word	0x20000258
 8015d00:	20000144 	.word	0x20000144
 8015d04:	2000024c 	.word	0x2000024c
 8015d08:	20000148 	.word	0x20000148

08015d0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d10b      	bne.n	8015d34 <vTaskPlaceOnEventList+0x28>
 8015d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d20:	b672      	cpsid	i
 8015d22:	f383 8811 	msr	BASEPRI, r3
 8015d26:	f3bf 8f6f 	isb	sy
 8015d2a:	f3bf 8f4f 	dsb	sy
 8015d2e:	b662      	cpsie	i
 8015d30:	60fb      	str	r3, [r7, #12]
 8015d32:	e7fe      	b.n	8015d32 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d34:	4b07      	ldr	r3, [pc, #28]	; (8015d54 <vTaskPlaceOnEventList+0x48>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	3318      	adds	r3, #24
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f7fe fc64 	bl	801460a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d42:	2101      	movs	r1, #1
 8015d44:	6838      	ldr	r0, [r7, #0]
 8015d46:	f000 fb8f 	bl	8016468 <prvAddCurrentTaskToDelayedList>
}
 8015d4a:	bf00      	nop
 8015d4c:	3710      	adds	r7, #16
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	20000144 	.word	0x20000144

08015d58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b086      	sub	sp, #24
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	68db      	ldr	r3, [r3, #12]
 8015d64:	68db      	ldr	r3, [r3, #12]
 8015d66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d10b      	bne.n	8015d86 <xTaskRemoveFromEventList+0x2e>
 8015d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d72:	b672      	cpsid	i
 8015d74:	f383 8811 	msr	BASEPRI, r3
 8015d78:	f3bf 8f6f 	isb	sy
 8015d7c:	f3bf 8f4f 	dsb	sy
 8015d80:	b662      	cpsie	i
 8015d82:	60fb      	str	r3, [r7, #12]
 8015d84:	e7fe      	b.n	8015d84 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015d86:	693b      	ldr	r3, [r7, #16]
 8015d88:	3318      	adds	r3, #24
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fe fc76 	bl	801467c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d90:	4b1d      	ldr	r3, [pc, #116]	; (8015e08 <xTaskRemoveFromEventList+0xb0>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d11c      	bne.n	8015dd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015d98:	693b      	ldr	r3, [r7, #16]
 8015d9a:	3304      	adds	r3, #4
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f7fe fc6d 	bl	801467c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015da6:	2201      	movs	r2, #1
 8015da8:	409a      	lsls	r2, r3
 8015daa:	4b18      	ldr	r3, [pc, #96]	; (8015e0c <xTaskRemoveFromEventList+0xb4>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	4313      	orrs	r3, r2
 8015db0:	4a16      	ldr	r2, [pc, #88]	; (8015e0c <xTaskRemoveFromEventList+0xb4>)
 8015db2:	6013      	str	r3, [r2, #0]
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015db8:	4613      	mov	r3, r2
 8015dba:	009b      	lsls	r3, r3, #2
 8015dbc:	4413      	add	r3, r2
 8015dbe:	009b      	lsls	r3, r3, #2
 8015dc0:	4a13      	ldr	r2, [pc, #76]	; (8015e10 <xTaskRemoveFromEventList+0xb8>)
 8015dc2:	441a      	add	r2, r3
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	3304      	adds	r3, #4
 8015dc8:	4619      	mov	r1, r3
 8015dca:	4610      	mov	r0, r2
 8015dcc:	f7fe fbf9 	bl	80145c2 <vListInsertEnd>
 8015dd0:	e005      	b.n	8015dde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	3318      	adds	r3, #24
 8015dd6:	4619      	mov	r1, r3
 8015dd8:	480e      	ldr	r0, [pc, #56]	; (8015e14 <xTaskRemoveFromEventList+0xbc>)
 8015dda:	f7fe fbf2 	bl	80145c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015dde:	693b      	ldr	r3, [r7, #16]
 8015de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015de2:	4b0d      	ldr	r3, [pc, #52]	; (8015e18 <xTaskRemoveFromEventList+0xc0>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015de8:	429a      	cmp	r2, r3
 8015dea:	d905      	bls.n	8015df8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015dec:	2301      	movs	r3, #1
 8015dee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015df0:	4b0a      	ldr	r3, [pc, #40]	; (8015e1c <xTaskRemoveFromEventList+0xc4>)
 8015df2:	2201      	movs	r2, #1
 8015df4:	601a      	str	r2, [r3, #0]
 8015df6:	e001      	b.n	8015dfc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8015dfc:	697b      	ldr	r3, [r7, #20]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3718      	adds	r7, #24
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	2000026c 	.word	0x2000026c
 8015e0c:	2000024c 	.word	0x2000024c
 8015e10:	20000148 	.word	0x20000148
 8015e14:	20000204 	.word	0x20000204
 8015e18:	20000144 	.word	0x20000144
 8015e1c:	20000258 	.word	0x20000258

08015e20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015e20:	b480      	push	{r7}
 8015e22:	b083      	sub	sp, #12
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015e28:	4b06      	ldr	r3, [pc, #24]	; (8015e44 <vTaskInternalSetTimeOutState+0x24>)
 8015e2a:	681a      	ldr	r2, [r3, #0]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015e30:	4b05      	ldr	r3, [pc, #20]	; (8015e48 <vTaskInternalSetTimeOutState+0x28>)
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	605a      	str	r2, [r3, #4]
}
 8015e38:	bf00      	nop
 8015e3a:	370c      	adds	r7, #12
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e42:	4770      	bx	lr
 8015e44:	2000025c 	.word	0x2000025c
 8015e48:	20000248 	.word	0x20000248

08015e4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b088      	sub	sp, #32
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d10b      	bne.n	8015e74 <xTaskCheckForTimeOut+0x28>
 8015e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e60:	b672      	cpsid	i
 8015e62:	f383 8811 	msr	BASEPRI, r3
 8015e66:	f3bf 8f6f 	isb	sy
 8015e6a:	f3bf 8f4f 	dsb	sy
 8015e6e:	b662      	cpsie	i
 8015e70:	613b      	str	r3, [r7, #16]
 8015e72:	e7fe      	b.n	8015e72 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d10b      	bne.n	8015e92 <xTaskCheckForTimeOut+0x46>
 8015e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7e:	b672      	cpsid	i
 8015e80:	f383 8811 	msr	BASEPRI, r3
 8015e84:	f3bf 8f6f 	isb	sy
 8015e88:	f3bf 8f4f 	dsb	sy
 8015e8c:	b662      	cpsie	i
 8015e8e:	60fb      	str	r3, [r7, #12]
 8015e90:	e7fe      	b.n	8015e90 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8015e92:	f000 fc59 	bl	8016748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015e96:	4b1d      	ldr	r3, [pc, #116]	; (8015f0c <xTaskCheckForTimeOut+0xc0>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	69ba      	ldr	r2, [r7, #24]
 8015ea2:	1ad3      	subs	r3, r2, r3
 8015ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eae:	d102      	bne.n	8015eb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	61fb      	str	r3, [r7, #28]
 8015eb4:	e023      	b.n	8015efe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	4b15      	ldr	r3, [pc, #84]	; (8015f10 <xTaskCheckForTimeOut+0xc4>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d007      	beq.n	8015ed2 <xTaskCheckForTimeOut+0x86>
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	685b      	ldr	r3, [r3, #4]
 8015ec6:	69ba      	ldr	r2, [r7, #24]
 8015ec8:	429a      	cmp	r2, r3
 8015eca:	d302      	bcc.n	8015ed2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015ecc:	2301      	movs	r3, #1
 8015ece:	61fb      	str	r3, [r7, #28]
 8015ed0:	e015      	b.n	8015efe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	697a      	ldr	r2, [r7, #20]
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d20b      	bcs.n	8015ef4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015edc:	683b      	ldr	r3, [r7, #0]
 8015ede:	681a      	ldr	r2, [r3, #0]
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	1ad2      	subs	r2, r2, r3
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f7ff ff99 	bl	8015e20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	61fb      	str	r3, [r7, #28]
 8015ef2:	e004      	b.n	8015efe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015efa:	2301      	movs	r3, #1
 8015efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015efe:	f000 fc55 	bl	80167ac <vPortExitCritical>

	return xReturn;
 8015f02:	69fb      	ldr	r3, [r7, #28]
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3720      	adds	r7, #32
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}
 8015f0c:	20000248 	.word	0x20000248
 8015f10:	2000025c 	.word	0x2000025c

08015f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015f14:	b480      	push	{r7}
 8015f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015f18:	4b03      	ldr	r3, [pc, #12]	; (8015f28 <vTaskMissedYield+0x14>)
 8015f1a:	2201      	movs	r2, #1
 8015f1c:	601a      	str	r2, [r3, #0]
}
 8015f1e:	bf00      	nop
 8015f20:	46bd      	mov	sp, r7
 8015f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f26:	4770      	bx	lr
 8015f28:	20000258 	.word	0x20000258

08015f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015f34:	f000 f854 	bl	8015fe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015f38:	4b07      	ldr	r3, [pc, #28]	; (8015f58 <prvIdleTask+0x2c>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d907      	bls.n	8015f50 <prvIdleTask+0x24>
			{
				taskYIELD();
 8015f40:	4b06      	ldr	r3, [pc, #24]	; (8015f5c <prvIdleTask+0x30>)
 8015f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f46:	601a      	str	r2, [r3, #0]
 8015f48:	f3bf 8f4f 	dsb	sy
 8015f4c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015f50:	f7fd fb7e 	bl	8013650 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8015f54:	e7ee      	b.n	8015f34 <prvIdleTask+0x8>
 8015f56:	bf00      	nop
 8015f58:	20000148 	.word	0x20000148
 8015f5c:	e000ed04 	.word	0xe000ed04

08015f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015f66:	2300      	movs	r3, #0
 8015f68:	607b      	str	r3, [r7, #4]
 8015f6a:	e00c      	b.n	8015f86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015f6c:	687a      	ldr	r2, [r7, #4]
 8015f6e:	4613      	mov	r3, r2
 8015f70:	009b      	lsls	r3, r3, #2
 8015f72:	4413      	add	r3, r2
 8015f74:	009b      	lsls	r3, r3, #2
 8015f76:	4a12      	ldr	r2, [pc, #72]	; (8015fc0 <prvInitialiseTaskLists+0x60>)
 8015f78:	4413      	add	r3, r2
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f7fe faf4 	bl	8014568 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	3301      	adds	r3, #1
 8015f84:	607b      	str	r3, [r7, #4]
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2b06      	cmp	r3, #6
 8015f8a:	d9ef      	bls.n	8015f6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015f8c:	480d      	ldr	r0, [pc, #52]	; (8015fc4 <prvInitialiseTaskLists+0x64>)
 8015f8e:	f7fe faeb 	bl	8014568 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015f92:	480d      	ldr	r0, [pc, #52]	; (8015fc8 <prvInitialiseTaskLists+0x68>)
 8015f94:	f7fe fae8 	bl	8014568 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015f98:	480c      	ldr	r0, [pc, #48]	; (8015fcc <prvInitialiseTaskLists+0x6c>)
 8015f9a:	f7fe fae5 	bl	8014568 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015f9e:	480c      	ldr	r0, [pc, #48]	; (8015fd0 <prvInitialiseTaskLists+0x70>)
 8015fa0:	f7fe fae2 	bl	8014568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015fa4:	480b      	ldr	r0, [pc, #44]	; (8015fd4 <prvInitialiseTaskLists+0x74>)
 8015fa6:	f7fe fadf 	bl	8014568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015faa:	4b0b      	ldr	r3, [pc, #44]	; (8015fd8 <prvInitialiseTaskLists+0x78>)
 8015fac:	4a05      	ldr	r2, [pc, #20]	; (8015fc4 <prvInitialiseTaskLists+0x64>)
 8015fae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015fb0:	4b0a      	ldr	r3, [pc, #40]	; (8015fdc <prvInitialiseTaskLists+0x7c>)
 8015fb2:	4a05      	ldr	r2, [pc, #20]	; (8015fc8 <prvInitialiseTaskLists+0x68>)
 8015fb4:	601a      	str	r2, [r3, #0]
}
 8015fb6:	bf00      	nop
 8015fb8:	3708      	adds	r7, #8
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}
 8015fbe:	bf00      	nop
 8015fc0:	20000148 	.word	0x20000148
 8015fc4:	200001d4 	.word	0x200001d4
 8015fc8:	200001e8 	.word	0x200001e8
 8015fcc:	20000204 	.word	0x20000204
 8015fd0:	20000218 	.word	0x20000218
 8015fd4:	20000230 	.word	0x20000230
 8015fd8:	200001fc 	.word	0x200001fc
 8015fdc:	20000200 	.word	0x20000200

08015fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b082      	sub	sp, #8
 8015fe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015fe6:	e019      	b.n	801601c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015fe8:	f000 fbae 	bl	8016748 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8015fec:	4b0f      	ldr	r3, [pc, #60]	; (801602c <prvCheckTasksWaitingTermination+0x4c>)
 8015fee:	68db      	ldr	r3, [r3, #12]
 8015ff0:	68db      	ldr	r3, [r3, #12]
 8015ff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7fe fb3f 	bl	801467c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015ffe:	4b0c      	ldr	r3, [pc, #48]	; (8016030 <prvCheckTasksWaitingTermination+0x50>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	3b01      	subs	r3, #1
 8016004:	4a0a      	ldr	r2, [pc, #40]	; (8016030 <prvCheckTasksWaitingTermination+0x50>)
 8016006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016008:	4b0a      	ldr	r3, [pc, #40]	; (8016034 <prvCheckTasksWaitingTermination+0x54>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	3b01      	subs	r3, #1
 801600e:	4a09      	ldr	r2, [pc, #36]	; (8016034 <prvCheckTasksWaitingTermination+0x54>)
 8016010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016012:	f000 fbcb 	bl	80167ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f000 f80e 	bl	8016038 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801601c:	4b05      	ldr	r3, [pc, #20]	; (8016034 <prvCheckTasksWaitingTermination+0x54>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d1e1      	bne.n	8015fe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016024:	bf00      	nop
 8016026:	3708      	adds	r7, #8
 8016028:	46bd      	mov	sp, r7
 801602a:	bd80      	pop	{r7, pc}
 801602c:	20000218 	.word	0x20000218
 8016030:	20000244 	.word	0x20000244
 8016034:	2000022c 	.word	0x2000022c

08016038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016038:	b580      	push	{r7, lr}
 801603a:	b082      	sub	sp, #8
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016044:	4618      	mov	r0, r3
 8016046:	f000 fd6d 	bl	8016b24 <vPortFree>
			vPortFree( pxTCB );
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f000 fd6a 	bl	8016b24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016050:	bf00      	nop
 8016052:	3708      	adds	r7, #8
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016058:	b480      	push	{r7}
 801605a:	b083      	sub	sp, #12
 801605c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801605e:	4b0f      	ldr	r3, [pc, #60]	; (801609c <prvResetNextTaskUnblockTime+0x44>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d101      	bne.n	801606c <prvResetNextTaskUnblockTime+0x14>
 8016068:	2301      	movs	r3, #1
 801606a:	e000      	b.n	801606e <prvResetNextTaskUnblockTime+0x16>
 801606c:	2300      	movs	r3, #0
 801606e:	2b00      	cmp	r3, #0
 8016070:	d004      	beq.n	801607c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016072:	4b0b      	ldr	r3, [pc, #44]	; (80160a0 <prvResetNextTaskUnblockTime+0x48>)
 8016074:	f04f 32ff 	mov.w	r2, #4294967295
 8016078:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801607a:	e008      	b.n	801608e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801607c:	4b07      	ldr	r3, [pc, #28]	; (801609c <prvResetNextTaskUnblockTime+0x44>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	68db      	ldr	r3, [r3, #12]
 8016082:	68db      	ldr	r3, [r3, #12]
 8016084:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	4a05      	ldr	r2, [pc, #20]	; (80160a0 <prvResetNextTaskUnblockTime+0x48>)
 801608c:	6013      	str	r3, [r2, #0]
}
 801608e:	bf00      	nop
 8016090:	370c      	adds	r7, #12
 8016092:	46bd      	mov	sp, r7
 8016094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016098:	4770      	bx	lr
 801609a:	bf00      	nop
 801609c:	200001fc 	.word	0x200001fc
 80160a0:	20000264 	.word	0x20000264

080160a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80160a4:	b480      	push	{r7}
 80160a6:	b083      	sub	sp, #12
 80160a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80160aa:	4b0b      	ldr	r3, [pc, #44]	; (80160d8 <xTaskGetSchedulerState+0x34>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d102      	bne.n	80160b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80160b2:	2301      	movs	r3, #1
 80160b4:	607b      	str	r3, [r7, #4]
 80160b6:	e008      	b.n	80160ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80160b8:	4b08      	ldr	r3, [pc, #32]	; (80160dc <xTaskGetSchedulerState+0x38>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d102      	bne.n	80160c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80160c0:	2302      	movs	r3, #2
 80160c2:	607b      	str	r3, [r7, #4]
 80160c4:	e001      	b.n	80160ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80160c6:	2300      	movs	r3, #0
 80160c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80160ca:	687b      	ldr	r3, [r7, #4]
	}
 80160cc:	4618      	mov	r0, r3
 80160ce:	370c      	adds	r7, #12
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr
 80160d8:	20000250 	.word	0x20000250
 80160dc:	2000026c 	.word	0x2000026c

080160e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b084      	sub	sp, #16
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80160ec:	2300      	movs	r3, #0
 80160ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d06e      	beq.n	80161d4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160fa:	4b39      	ldr	r3, [pc, #228]	; (80161e0 <xTaskPriorityInherit+0x100>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016100:	429a      	cmp	r2, r3
 8016102:	d25e      	bcs.n	80161c2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	699b      	ldr	r3, [r3, #24]
 8016108:	2b00      	cmp	r3, #0
 801610a:	db06      	blt.n	801611a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801610c:	4b34      	ldr	r3, [pc, #208]	; (80161e0 <xTaskPriorityInherit+0x100>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016112:	f1c3 0207 	rsb	r2, r3, #7
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801611a:	68bb      	ldr	r3, [r7, #8]
 801611c:	6959      	ldr	r1, [r3, #20]
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016122:	4613      	mov	r3, r2
 8016124:	009b      	lsls	r3, r3, #2
 8016126:	4413      	add	r3, r2
 8016128:	009b      	lsls	r3, r3, #2
 801612a:	4a2e      	ldr	r2, [pc, #184]	; (80161e4 <xTaskPriorityInherit+0x104>)
 801612c:	4413      	add	r3, r2
 801612e:	4299      	cmp	r1, r3
 8016130:	d101      	bne.n	8016136 <xTaskPriorityInherit+0x56>
 8016132:	2301      	movs	r3, #1
 8016134:	e000      	b.n	8016138 <xTaskPriorityInherit+0x58>
 8016136:	2300      	movs	r3, #0
 8016138:	2b00      	cmp	r3, #0
 801613a:	d03a      	beq.n	80161b2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	3304      	adds	r3, #4
 8016140:	4618      	mov	r0, r3
 8016142:	f7fe fa9b 	bl	801467c <uxListRemove>
 8016146:	4603      	mov	r3, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	d115      	bne.n	8016178 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016150:	4924      	ldr	r1, [pc, #144]	; (80161e4 <xTaskPriorityInherit+0x104>)
 8016152:	4613      	mov	r3, r2
 8016154:	009b      	lsls	r3, r3, #2
 8016156:	4413      	add	r3, r2
 8016158:	009b      	lsls	r3, r3, #2
 801615a:	440b      	add	r3, r1
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d10a      	bne.n	8016178 <xTaskPriorityInherit+0x98>
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016166:	2201      	movs	r2, #1
 8016168:	fa02 f303 	lsl.w	r3, r2, r3
 801616c:	43da      	mvns	r2, r3
 801616e:	4b1e      	ldr	r3, [pc, #120]	; (80161e8 <xTaskPriorityInherit+0x108>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	4013      	ands	r3, r2
 8016174:	4a1c      	ldr	r2, [pc, #112]	; (80161e8 <xTaskPriorityInherit+0x108>)
 8016176:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016178:	4b19      	ldr	r3, [pc, #100]	; (80161e0 <xTaskPriorityInherit+0x100>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016186:	2201      	movs	r2, #1
 8016188:	409a      	lsls	r2, r3
 801618a:	4b17      	ldr	r3, [pc, #92]	; (80161e8 <xTaskPriorityInherit+0x108>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	4313      	orrs	r3, r2
 8016190:	4a15      	ldr	r2, [pc, #84]	; (80161e8 <xTaskPriorityInherit+0x108>)
 8016192:	6013      	str	r3, [r2, #0]
 8016194:	68bb      	ldr	r3, [r7, #8]
 8016196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016198:	4613      	mov	r3, r2
 801619a:	009b      	lsls	r3, r3, #2
 801619c:	4413      	add	r3, r2
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	4a10      	ldr	r2, [pc, #64]	; (80161e4 <xTaskPriorityInherit+0x104>)
 80161a2:	441a      	add	r2, r3
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	3304      	adds	r3, #4
 80161a8:	4619      	mov	r1, r3
 80161aa:	4610      	mov	r0, r2
 80161ac:	f7fe fa09 	bl	80145c2 <vListInsertEnd>
 80161b0:	e004      	b.n	80161bc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80161b2:	4b0b      	ldr	r3, [pc, #44]	; (80161e0 <xTaskPriorityInherit+0x100>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161b8:	68bb      	ldr	r3, [r7, #8]
 80161ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80161bc:	2301      	movs	r3, #1
 80161be:	60fb      	str	r3, [r7, #12]
 80161c0:	e008      	b.n	80161d4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80161c6:	4b06      	ldr	r3, [pc, #24]	; (80161e0 <xTaskPriorityInherit+0x100>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d201      	bcs.n	80161d4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80161d0:	2301      	movs	r3, #1
 80161d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80161d4:	68fb      	ldr	r3, [r7, #12]
	}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3710      	adds	r7, #16
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	20000144 	.word	0x20000144
 80161e4:	20000148 	.word	0x20000148
 80161e8:	2000024c 	.word	0x2000024c

080161ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b086      	sub	sp, #24
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80161f8:	2300      	movs	r3, #0
 80161fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d070      	beq.n	80162e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016202:	4b3b      	ldr	r3, [pc, #236]	; (80162f0 <xTaskPriorityDisinherit+0x104>)
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	693a      	ldr	r2, [r7, #16]
 8016208:	429a      	cmp	r2, r3
 801620a:	d00b      	beq.n	8016224 <xTaskPriorityDisinherit+0x38>
 801620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016210:	b672      	cpsid	i
 8016212:	f383 8811 	msr	BASEPRI, r3
 8016216:	f3bf 8f6f 	isb	sy
 801621a:	f3bf 8f4f 	dsb	sy
 801621e:	b662      	cpsie	i
 8016220:	60fb      	str	r3, [r7, #12]
 8016222:	e7fe      	b.n	8016222 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016228:	2b00      	cmp	r3, #0
 801622a:	d10b      	bne.n	8016244 <xTaskPriorityDisinherit+0x58>
 801622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016230:	b672      	cpsid	i
 8016232:	f383 8811 	msr	BASEPRI, r3
 8016236:	f3bf 8f6f 	isb	sy
 801623a:	f3bf 8f4f 	dsb	sy
 801623e:	b662      	cpsie	i
 8016240:	60bb      	str	r3, [r7, #8]
 8016242:	e7fe      	b.n	8016242 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016248:	1e5a      	subs	r2, r3, #1
 801624a:	693b      	ldr	r3, [r7, #16]
 801624c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016256:	429a      	cmp	r2, r3
 8016258:	d044      	beq.n	80162e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801625e:	2b00      	cmp	r3, #0
 8016260:	d140      	bne.n	80162e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	3304      	adds	r3, #4
 8016266:	4618      	mov	r0, r3
 8016268:	f7fe fa08 	bl	801467c <uxListRemove>
 801626c:	4603      	mov	r3, r0
 801626e:	2b00      	cmp	r3, #0
 8016270:	d115      	bne.n	801629e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016272:	693b      	ldr	r3, [r7, #16]
 8016274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016276:	491f      	ldr	r1, [pc, #124]	; (80162f4 <xTaskPriorityDisinherit+0x108>)
 8016278:	4613      	mov	r3, r2
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	4413      	add	r3, r2
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	440b      	add	r3, r1
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d10a      	bne.n	801629e <xTaskPriorityDisinherit+0xb2>
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801628c:	2201      	movs	r2, #1
 801628e:	fa02 f303 	lsl.w	r3, r2, r3
 8016292:	43da      	mvns	r2, r3
 8016294:	4b18      	ldr	r3, [pc, #96]	; (80162f8 <xTaskPriorityDisinherit+0x10c>)
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	4013      	ands	r3, r2
 801629a:	4a17      	ldr	r2, [pc, #92]	; (80162f8 <xTaskPriorityDisinherit+0x10c>)
 801629c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162aa:	f1c3 0207 	rsb	r2, r3, #7
 80162ae:	693b      	ldr	r3, [r7, #16]
 80162b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80162b2:	693b      	ldr	r3, [r7, #16]
 80162b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162b6:	2201      	movs	r2, #1
 80162b8:	409a      	lsls	r2, r3
 80162ba:	4b0f      	ldr	r3, [pc, #60]	; (80162f8 <xTaskPriorityDisinherit+0x10c>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	4313      	orrs	r3, r2
 80162c0:	4a0d      	ldr	r2, [pc, #52]	; (80162f8 <xTaskPriorityDisinherit+0x10c>)
 80162c2:	6013      	str	r3, [r2, #0]
 80162c4:	693b      	ldr	r3, [r7, #16]
 80162c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162c8:	4613      	mov	r3, r2
 80162ca:	009b      	lsls	r3, r3, #2
 80162cc:	4413      	add	r3, r2
 80162ce:	009b      	lsls	r3, r3, #2
 80162d0:	4a08      	ldr	r2, [pc, #32]	; (80162f4 <xTaskPriorityDisinherit+0x108>)
 80162d2:	441a      	add	r2, r3
 80162d4:	693b      	ldr	r3, [r7, #16]
 80162d6:	3304      	adds	r3, #4
 80162d8:	4619      	mov	r1, r3
 80162da:	4610      	mov	r0, r2
 80162dc:	f7fe f971 	bl	80145c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80162e0:	2301      	movs	r3, #1
 80162e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80162e4:	697b      	ldr	r3, [r7, #20]
	}
 80162e6:	4618      	mov	r0, r3
 80162e8:	3718      	adds	r7, #24
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}
 80162ee:	bf00      	nop
 80162f0:	20000144 	.word	0x20000144
 80162f4:	20000148 	.word	0x20000148
 80162f8:	2000024c 	.word	0x2000024c

080162fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b088      	sub	sp, #32
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801630a:	2301      	movs	r3, #1
 801630c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	2b00      	cmp	r3, #0
 8016312:	f000 808a 	beq.w	801642a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016316:	69bb      	ldr	r3, [r7, #24]
 8016318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801631a:	2b00      	cmp	r3, #0
 801631c:	d10b      	bne.n	8016336 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 801631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016322:	b672      	cpsid	i
 8016324:	f383 8811 	msr	BASEPRI, r3
 8016328:	f3bf 8f6f 	isb	sy
 801632c:	f3bf 8f4f 	dsb	sy
 8016330:	b662      	cpsie	i
 8016332:	60fb      	str	r3, [r7, #12]
 8016334:	e7fe      	b.n	8016334 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801633a:	683a      	ldr	r2, [r7, #0]
 801633c:	429a      	cmp	r2, r3
 801633e:	d902      	bls.n	8016346 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	61fb      	str	r3, [r7, #28]
 8016344:	e002      	b.n	801634c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016346:	69bb      	ldr	r3, [r7, #24]
 8016348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801634a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016350:	69fa      	ldr	r2, [r7, #28]
 8016352:	429a      	cmp	r2, r3
 8016354:	d069      	beq.n	801642a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016356:	69bb      	ldr	r3, [r7, #24]
 8016358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801635a:	697a      	ldr	r2, [r7, #20]
 801635c:	429a      	cmp	r2, r3
 801635e:	d164      	bne.n	801642a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016360:	4b34      	ldr	r3, [pc, #208]	; (8016434 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	69ba      	ldr	r2, [r7, #24]
 8016366:	429a      	cmp	r2, r3
 8016368:	d10b      	bne.n	8016382 <vTaskPriorityDisinheritAfterTimeout+0x86>
 801636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801636e:	b672      	cpsid	i
 8016370:	f383 8811 	msr	BASEPRI, r3
 8016374:	f3bf 8f6f 	isb	sy
 8016378:	f3bf 8f4f 	dsb	sy
 801637c:	b662      	cpsie	i
 801637e:	60bb      	str	r3, [r7, #8]
 8016380:	e7fe      	b.n	8016380 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016382:	69bb      	ldr	r3, [r7, #24]
 8016384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016386:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	69fa      	ldr	r2, [r7, #28]
 801638c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801638e:	69bb      	ldr	r3, [r7, #24]
 8016390:	699b      	ldr	r3, [r3, #24]
 8016392:	2b00      	cmp	r3, #0
 8016394:	db04      	blt.n	80163a0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016396:	69fb      	ldr	r3, [r7, #28]
 8016398:	f1c3 0207 	rsb	r2, r3, #7
 801639c:	69bb      	ldr	r3, [r7, #24]
 801639e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80163a0:	69bb      	ldr	r3, [r7, #24]
 80163a2:	6959      	ldr	r1, [r3, #20]
 80163a4:	693a      	ldr	r2, [r7, #16]
 80163a6:	4613      	mov	r3, r2
 80163a8:	009b      	lsls	r3, r3, #2
 80163aa:	4413      	add	r3, r2
 80163ac:	009b      	lsls	r3, r3, #2
 80163ae:	4a22      	ldr	r2, [pc, #136]	; (8016438 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80163b0:	4413      	add	r3, r2
 80163b2:	4299      	cmp	r1, r3
 80163b4:	d101      	bne.n	80163ba <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80163b6:	2301      	movs	r3, #1
 80163b8:	e000      	b.n	80163bc <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80163ba:	2300      	movs	r3, #0
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d034      	beq.n	801642a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80163c0:	69bb      	ldr	r3, [r7, #24]
 80163c2:	3304      	adds	r3, #4
 80163c4:	4618      	mov	r0, r3
 80163c6:	f7fe f959 	bl	801467c <uxListRemove>
 80163ca:	4603      	mov	r3, r0
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d115      	bne.n	80163fc <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80163d0:	69bb      	ldr	r3, [r7, #24]
 80163d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163d4:	4918      	ldr	r1, [pc, #96]	; (8016438 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80163d6:	4613      	mov	r3, r2
 80163d8:	009b      	lsls	r3, r3, #2
 80163da:	4413      	add	r3, r2
 80163dc:	009b      	lsls	r3, r3, #2
 80163de:	440b      	add	r3, r1
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d10a      	bne.n	80163fc <vTaskPriorityDisinheritAfterTimeout+0x100>
 80163e6:	69bb      	ldr	r3, [r7, #24]
 80163e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163ea:	2201      	movs	r2, #1
 80163ec:	fa02 f303 	lsl.w	r3, r2, r3
 80163f0:	43da      	mvns	r2, r3
 80163f2:	4b12      	ldr	r3, [pc, #72]	; (801643c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	4013      	ands	r3, r2
 80163f8:	4a10      	ldr	r2, [pc, #64]	; (801643c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80163fa:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80163fc:	69bb      	ldr	r3, [r7, #24]
 80163fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016400:	2201      	movs	r2, #1
 8016402:	409a      	lsls	r2, r3
 8016404:	4b0d      	ldr	r3, [pc, #52]	; (801643c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	4313      	orrs	r3, r2
 801640a:	4a0c      	ldr	r2, [pc, #48]	; (801643c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801640c:	6013      	str	r3, [r2, #0]
 801640e:	69bb      	ldr	r3, [r7, #24]
 8016410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016412:	4613      	mov	r3, r2
 8016414:	009b      	lsls	r3, r3, #2
 8016416:	4413      	add	r3, r2
 8016418:	009b      	lsls	r3, r3, #2
 801641a:	4a07      	ldr	r2, [pc, #28]	; (8016438 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801641c:	441a      	add	r2, r3
 801641e:	69bb      	ldr	r3, [r7, #24]
 8016420:	3304      	adds	r3, #4
 8016422:	4619      	mov	r1, r3
 8016424:	4610      	mov	r0, r2
 8016426:	f7fe f8cc 	bl	80145c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801642a:	bf00      	nop
 801642c:	3720      	adds	r7, #32
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	20000144 	.word	0x20000144
 8016438:	20000148 	.word	0x20000148
 801643c:	2000024c 	.word	0x2000024c

08016440 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8016440:	b480      	push	{r7}
 8016442:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016444:	4b07      	ldr	r3, [pc, #28]	; (8016464 <pvTaskIncrementMutexHeldCount+0x24>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d004      	beq.n	8016456 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801644c:	4b05      	ldr	r3, [pc, #20]	; (8016464 <pvTaskIncrementMutexHeldCount+0x24>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016452:	3201      	adds	r2, #1
 8016454:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016456:	4b03      	ldr	r3, [pc, #12]	; (8016464 <pvTaskIncrementMutexHeldCount+0x24>)
 8016458:	681b      	ldr	r3, [r3, #0]
	}
 801645a:	4618      	mov	r0, r3
 801645c:	46bd      	mov	sp, r7
 801645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016462:	4770      	bx	lr
 8016464:	20000144 	.word	0x20000144

08016468 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b084      	sub	sp, #16
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016472:	4b29      	ldr	r3, [pc, #164]	; (8016518 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016478:	4b28      	ldr	r3, [pc, #160]	; (801651c <prvAddCurrentTaskToDelayedList+0xb4>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	3304      	adds	r3, #4
 801647e:	4618      	mov	r0, r3
 8016480:	f7fe f8fc 	bl	801467c <uxListRemove>
 8016484:	4603      	mov	r3, r0
 8016486:	2b00      	cmp	r3, #0
 8016488:	d10b      	bne.n	80164a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801648a:	4b24      	ldr	r3, [pc, #144]	; (801651c <prvAddCurrentTaskToDelayedList+0xb4>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016490:	2201      	movs	r2, #1
 8016492:	fa02 f303 	lsl.w	r3, r2, r3
 8016496:	43da      	mvns	r2, r3
 8016498:	4b21      	ldr	r3, [pc, #132]	; (8016520 <prvAddCurrentTaskToDelayedList+0xb8>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	4013      	ands	r3, r2
 801649e:	4a20      	ldr	r2, [pc, #128]	; (8016520 <prvAddCurrentTaskToDelayedList+0xb8>)
 80164a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164a8:	d10a      	bne.n	80164c0 <prvAddCurrentTaskToDelayedList+0x58>
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d007      	beq.n	80164c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80164b0:	4b1a      	ldr	r3, [pc, #104]	; (801651c <prvAddCurrentTaskToDelayedList+0xb4>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	3304      	adds	r3, #4
 80164b6:	4619      	mov	r1, r3
 80164b8:	481a      	ldr	r0, [pc, #104]	; (8016524 <prvAddCurrentTaskToDelayedList+0xbc>)
 80164ba:	f7fe f882 	bl	80145c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80164be:	e026      	b.n	801650e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80164c0:	68fa      	ldr	r2, [r7, #12]
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	4413      	add	r3, r2
 80164c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80164c8:	4b14      	ldr	r3, [pc, #80]	; (801651c <prvAddCurrentTaskToDelayedList+0xb4>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	68ba      	ldr	r2, [r7, #8]
 80164ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80164d0:	68ba      	ldr	r2, [r7, #8]
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d209      	bcs.n	80164ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80164d8:	4b13      	ldr	r3, [pc, #76]	; (8016528 <prvAddCurrentTaskToDelayedList+0xc0>)
 80164da:	681a      	ldr	r2, [r3, #0]
 80164dc:	4b0f      	ldr	r3, [pc, #60]	; (801651c <prvAddCurrentTaskToDelayedList+0xb4>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	3304      	adds	r3, #4
 80164e2:	4619      	mov	r1, r3
 80164e4:	4610      	mov	r0, r2
 80164e6:	f7fe f890 	bl	801460a <vListInsert>
}
 80164ea:	e010      	b.n	801650e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80164ec:	4b0f      	ldr	r3, [pc, #60]	; (801652c <prvAddCurrentTaskToDelayedList+0xc4>)
 80164ee:	681a      	ldr	r2, [r3, #0]
 80164f0:	4b0a      	ldr	r3, [pc, #40]	; (801651c <prvAddCurrentTaskToDelayedList+0xb4>)
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	3304      	adds	r3, #4
 80164f6:	4619      	mov	r1, r3
 80164f8:	4610      	mov	r0, r2
 80164fa:	f7fe f886 	bl	801460a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80164fe:	4b0c      	ldr	r3, [pc, #48]	; (8016530 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	68ba      	ldr	r2, [r7, #8]
 8016504:	429a      	cmp	r2, r3
 8016506:	d202      	bcs.n	801650e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016508:	4a09      	ldr	r2, [pc, #36]	; (8016530 <prvAddCurrentTaskToDelayedList+0xc8>)
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	6013      	str	r3, [r2, #0]
}
 801650e:	bf00      	nop
 8016510:	3710      	adds	r7, #16
 8016512:	46bd      	mov	sp, r7
 8016514:	bd80      	pop	{r7, pc}
 8016516:	bf00      	nop
 8016518:	20000248 	.word	0x20000248
 801651c:	20000144 	.word	0x20000144
 8016520:	2000024c 	.word	0x2000024c
 8016524:	20000230 	.word	0x20000230
 8016528:	20000200 	.word	0x20000200
 801652c:	200001fc 	.word	0x200001fc
 8016530:	20000264 	.word	0x20000264

08016534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016534:	b480      	push	{r7}
 8016536:	b085      	sub	sp, #20
 8016538:	af00      	add	r7, sp, #0
 801653a:	60f8      	str	r0, [r7, #12]
 801653c:	60b9      	str	r1, [r7, #8]
 801653e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	3b04      	subs	r3, #4
 8016544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801654c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	3b04      	subs	r3, #4
 8016552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	f023 0201 	bic.w	r2, r3, #1
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	3b04      	subs	r3, #4
 8016562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016564:	4a0c      	ldr	r2, [pc, #48]	; (8016598 <pxPortInitialiseStack+0x64>)
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	3b14      	subs	r3, #20
 801656e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016570:	687a      	ldr	r2, [r7, #4]
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	3b04      	subs	r3, #4
 801657a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	f06f 0202 	mvn.w	r2, #2
 8016582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	3b20      	subs	r3, #32
 8016588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801658a:	68fb      	ldr	r3, [r7, #12]
}
 801658c:	4618      	mov	r0, r3
 801658e:	3714      	adds	r7, #20
 8016590:	46bd      	mov	sp, r7
 8016592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016596:	4770      	bx	lr
 8016598:	0801659d 	.word	0x0801659d

0801659c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801659c:	b480      	push	{r7}
 801659e:	b085      	sub	sp, #20
 80165a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80165a2:	2300      	movs	r3, #0
 80165a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80165a6:	4b13      	ldr	r3, [pc, #76]	; (80165f4 <prvTaskExitError+0x58>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165ae:	d00b      	beq.n	80165c8 <prvTaskExitError+0x2c>
 80165b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165b4:	b672      	cpsid	i
 80165b6:	f383 8811 	msr	BASEPRI, r3
 80165ba:	f3bf 8f6f 	isb	sy
 80165be:	f3bf 8f4f 	dsb	sy
 80165c2:	b662      	cpsie	i
 80165c4:	60fb      	str	r3, [r7, #12]
 80165c6:	e7fe      	b.n	80165c6 <prvTaskExitError+0x2a>
 80165c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165cc:	b672      	cpsid	i
 80165ce:	f383 8811 	msr	BASEPRI, r3
 80165d2:	f3bf 8f6f 	isb	sy
 80165d6:	f3bf 8f4f 	dsb	sy
 80165da:	b662      	cpsie	i
 80165dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80165de:	bf00      	nop
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d0fc      	beq.n	80165e0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80165e6:	bf00      	nop
 80165e8:	3714      	adds	r7, #20
 80165ea:	46bd      	mov	sp, r7
 80165ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f0:	4770      	bx	lr
 80165f2:	bf00      	nop
 80165f4:	20000050 	.word	0x20000050
	...

08016600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016600:	4b07      	ldr	r3, [pc, #28]	; (8016620 <pxCurrentTCBConst2>)
 8016602:	6819      	ldr	r1, [r3, #0]
 8016604:	6808      	ldr	r0, [r1, #0]
 8016606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801660a:	f380 8809 	msr	PSP, r0
 801660e:	f3bf 8f6f 	isb	sy
 8016612:	f04f 0000 	mov.w	r0, #0
 8016616:	f380 8811 	msr	BASEPRI, r0
 801661a:	4770      	bx	lr
 801661c:	f3af 8000 	nop.w

08016620 <pxCurrentTCBConst2>:
 8016620:	20000144 	.word	0x20000144
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016624:	bf00      	nop
 8016626:	bf00      	nop

08016628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016628:	4808      	ldr	r0, [pc, #32]	; (801664c <prvPortStartFirstTask+0x24>)
 801662a:	6800      	ldr	r0, [r0, #0]
 801662c:	6800      	ldr	r0, [r0, #0]
 801662e:	f380 8808 	msr	MSP, r0
 8016632:	f04f 0000 	mov.w	r0, #0
 8016636:	f380 8814 	msr	CONTROL, r0
 801663a:	b662      	cpsie	i
 801663c:	b661      	cpsie	f
 801663e:	f3bf 8f4f 	dsb	sy
 8016642:	f3bf 8f6f 	isb	sy
 8016646:	df00      	svc	0
 8016648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801664a:	bf00      	nop
 801664c:	e000ed08 	.word	0xe000ed08

08016650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b084      	sub	sp, #16
 8016654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016656:	4b36      	ldr	r3, [pc, #216]	; (8016730 <xPortStartScheduler+0xe0>)
 8016658:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	b2db      	uxtb	r3, r3
 8016660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	22ff      	movs	r2, #255	; 0xff
 8016666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	781b      	ldrb	r3, [r3, #0]
 801666c:	b2db      	uxtb	r3, r3
 801666e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016670:	78fb      	ldrb	r3, [r7, #3]
 8016672:	b2db      	uxtb	r3, r3
 8016674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016678:	b2da      	uxtb	r2, r3
 801667a:	4b2e      	ldr	r3, [pc, #184]	; (8016734 <xPortStartScheduler+0xe4>)
 801667c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801667e:	4b2e      	ldr	r3, [pc, #184]	; (8016738 <xPortStartScheduler+0xe8>)
 8016680:	2207      	movs	r2, #7
 8016682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016684:	e009      	b.n	801669a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016686:	4b2c      	ldr	r3, [pc, #176]	; (8016738 <xPortStartScheduler+0xe8>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	3b01      	subs	r3, #1
 801668c:	4a2a      	ldr	r2, [pc, #168]	; (8016738 <xPortStartScheduler+0xe8>)
 801668e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016690:	78fb      	ldrb	r3, [r7, #3]
 8016692:	b2db      	uxtb	r3, r3
 8016694:	005b      	lsls	r3, r3, #1
 8016696:	b2db      	uxtb	r3, r3
 8016698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801669a:	78fb      	ldrb	r3, [r7, #3]
 801669c:	b2db      	uxtb	r3, r3
 801669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80166a2:	2b80      	cmp	r3, #128	; 0x80
 80166a4:	d0ef      	beq.n	8016686 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80166a6:	4b24      	ldr	r3, [pc, #144]	; (8016738 <xPortStartScheduler+0xe8>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	f1c3 0307 	rsb	r3, r3, #7
 80166ae:	2b04      	cmp	r3, #4
 80166b0:	d00b      	beq.n	80166ca <xPortStartScheduler+0x7a>
 80166b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b6:	b672      	cpsid	i
 80166b8:	f383 8811 	msr	BASEPRI, r3
 80166bc:	f3bf 8f6f 	isb	sy
 80166c0:	f3bf 8f4f 	dsb	sy
 80166c4:	b662      	cpsie	i
 80166c6:	60bb      	str	r3, [r7, #8]
 80166c8:	e7fe      	b.n	80166c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80166ca:	4b1b      	ldr	r3, [pc, #108]	; (8016738 <xPortStartScheduler+0xe8>)
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	021b      	lsls	r3, r3, #8
 80166d0:	4a19      	ldr	r2, [pc, #100]	; (8016738 <xPortStartScheduler+0xe8>)
 80166d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80166d4:	4b18      	ldr	r3, [pc, #96]	; (8016738 <xPortStartScheduler+0xe8>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80166dc:	4a16      	ldr	r2, [pc, #88]	; (8016738 <xPortStartScheduler+0xe8>)
 80166de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	b2da      	uxtb	r2, r3
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80166e8:	4b14      	ldr	r3, [pc, #80]	; (801673c <xPortStartScheduler+0xec>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4a13      	ldr	r2, [pc, #76]	; (801673c <xPortStartScheduler+0xec>)
 80166ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80166f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80166f4:	4b11      	ldr	r3, [pc, #68]	; (801673c <xPortStartScheduler+0xec>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	4a10      	ldr	r2, [pc, #64]	; (801673c <xPortStartScheduler+0xec>)
 80166fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80166fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016700:	f000 f8d4 	bl	80168ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016704:	4b0e      	ldr	r3, [pc, #56]	; (8016740 <xPortStartScheduler+0xf0>)
 8016706:	2200      	movs	r2, #0
 8016708:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801670a:	f000 f8f3 	bl	80168f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801670e:	4b0d      	ldr	r3, [pc, #52]	; (8016744 <xPortStartScheduler+0xf4>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	4a0c      	ldr	r2, [pc, #48]	; (8016744 <xPortStartScheduler+0xf4>)
 8016714:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016718:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801671a:	f7ff ff85 	bl	8016628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801671e:	f7ff fa67 	bl	8015bf0 <vTaskSwitchContext>
	prvTaskExitError();
 8016722:	f7ff ff3b 	bl	801659c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016726:	2300      	movs	r3, #0
}
 8016728:	4618      	mov	r0, r3
 801672a:	3710      	adds	r7, #16
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	e000e400 	.word	0xe000e400
 8016734:	20000270 	.word	0x20000270
 8016738:	20000274 	.word	0x20000274
 801673c:	e000ed20 	.word	0xe000ed20
 8016740:	20000050 	.word	0x20000050
 8016744:	e000ef34 	.word	0xe000ef34

08016748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016748:	b480      	push	{r7}
 801674a:	b083      	sub	sp, #12
 801674c:	af00      	add	r7, sp, #0
 801674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016752:	b672      	cpsid	i
 8016754:	f383 8811 	msr	BASEPRI, r3
 8016758:	f3bf 8f6f 	isb	sy
 801675c:	f3bf 8f4f 	dsb	sy
 8016760:	b662      	cpsie	i
 8016762:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016764:	4b0f      	ldr	r3, [pc, #60]	; (80167a4 <vPortEnterCritical+0x5c>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	3301      	adds	r3, #1
 801676a:	4a0e      	ldr	r2, [pc, #56]	; (80167a4 <vPortEnterCritical+0x5c>)
 801676c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801676e:	4b0d      	ldr	r3, [pc, #52]	; (80167a4 <vPortEnterCritical+0x5c>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	2b01      	cmp	r3, #1
 8016774:	d110      	bne.n	8016798 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016776:	4b0c      	ldr	r3, [pc, #48]	; (80167a8 <vPortEnterCritical+0x60>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	b2db      	uxtb	r3, r3
 801677c:	2b00      	cmp	r3, #0
 801677e:	d00b      	beq.n	8016798 <vPortEnterCritical+0x50>
 8016780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016784:	b672      	cpsid	i
 8016786:	f383 8811 	msr	BASEPRI, r3
 801678a:	f3bf 8f6f 	isb	sy
 801678e:	f3bf 8f4f 	dsb	sy
 8016792:	b662      	cpsie	i
 8016794:	603b      	str	r3, [r7, #0]
 8016796:	e7fe      	b.n	8016796 <vPortEnterCritical+0x4e>
	}
}
 8016798:	bf00      	nop
 801679a:	370c      	adds	r7, #12
 801679c:	46bd      	mov	sp, r7
 801679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a2:	4770      	bx	lr
 80167a4:	20000050 	.word	0x20000050
 80167a8:	e000ed04 	.word	0xe000ed04

080167ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80167ac:	b480      	push	{r7}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80167b2:	4b12      	ldr	r3, [pc, #72]	; (80167fc <vPortExitCritical+0x50>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d10b      	bne.n	80167d2 <vPortExitCritical+0x26>
 80167ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167be:	b672      	cpsid	i
 80167c0:	f383 8811 	msr	BASEPRI, r3
 80167c4:	f3bf 8f6f 	isb	sy
 80167c8:	f3bf 8f4f 	dsb	sy
 80167cc:	b662      	cpsie	i
 80167ce:	607b      	str	r3, [r7, #4]
 80167d0:	e7fe      	b.n	80167d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80167d2:	4b0a      	ldr	r3, [pc, #40]	; (80167fc <vPortExitCritical+0x50>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	3b01      	subs	r3, #1
 80167d8:	4a08      	ldr	r2, [pc, #32]	; (80167fc <vPortExitCritical+0x50>)
 80167da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80167dc:	4b07      	ldr	r3, [pc, #28]	; (80167fc <vPortExitCritical+0x50>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d104      	bne.n	80167ee <vPortExitCritical+0x42>
 80167e4:	2300      	movs	r3, #0
 80167e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80167ee:	bf00      	nop
 80167f0:	370c      	adds	r7, #12
 80167f2:	46bd      	mov	sp, r7
 80167f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f8:	4770      	bx	lr
 80167fa:	bf00      	nop
 80167fc:	20000050 	.word	0x20000050

08016800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016800:	f3ef 8009 	mrs	r0, PSP
 8016804:	f3bf 8f6f 	isb	sy
 8016808:	4b15      	ldr	r3, [pc, #84]	; (8016860 <pxCurrentTCBConst>)
 801680a:	681a      	ldr	r2, [r3, #0]
 801680c:	f01e 0f10 	tst.w	lr, #16
 8016810:	bf08      	it	eq
 8016812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801681a:	6010      	str	r0, [r2, #0]
 801681c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016824:	b672      	cpsid	i
 8016826:	f380 8811 	msr	BASEPRI, r0
 801682a:	f3bf 8f4f 	dsb	sy
 801682e:	f3bf 8f6f 	isb	sy
 8016832:	b662      	cpsie	i
 8016834:	f7ff f9dc 	bl	8015bf0 <vTaskSwitchContext>
 8016838:	f04f 0000 	mov.w	r0, #0
 801683c:	f380 8811 	msr	BASEPRI, r0
 8016840:	bc09      	pop	{r0, r3}
 8016842:	6819      	ldr	r1, [r3, #0]
 8016844:	6808      	ldr	r0, [r1, #0]
 8016846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801684a:	f01e 0f10 	tst.w	lr, #16
 801684e:	bf08      	it	eq
 8016850:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016854:	f380 8809 	msr	PSP, r0
 8016858:	f3bf 8f6f 	isb	sy
 801685c:	4770      	bx	lr
 801685e:	bf00      	nop

08016860 <pxCurrentTCBConst>:
 8016860:	20000144 	.word	0x20000144
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016864:	bf00      	nop
 8016866:	bf00      	nop

08016868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
	__asm volatile
 801686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016872:	b672      	cpsid	i
 8016874:	f383 8811 	msr	BASEPRI, r3
 8016878:	f3bf 8f6f 	isb	sy
 801687c:	f3bf 8f4f 	dsb	sy
 8016880:	b662      	cpsie	i
 8016882:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016884:	f7ff f8b8 	bl	80159f8 <xTaskIncrementTick>
 8016888:	4603      	mov	r3, r0
 801688a:	2b00      	cmp	r3, #0
 801688c:	d003      	beq.n	8016896 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801688e:	4b06      	ldr	r3, [pc, #24]	; (80168a8 <SysTick_Handler+0x40>)
 8016890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016894:	601a      	str	r2, [r3, #0]
 8016896:	2300      	movs	r3, #0
 8016898:	603b      	str	r3, [r7, #0]
	__asm volatile
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80168a0:	bf00      	nop
 80168a2:	3708      	adds	r7, #8
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	e000ed04 	.word	0xe000ed04

080168ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80168ac:	b480      	push	{r7}
 80168ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80168b0:	4b0b      	ldr	r3, [pc, #44]	; (80168e0 <vPortSetupTimerInterrupt+0x34>)
 80168b2:	2200      	movs	r2, #0
 80168b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80168b6:	4b0b      	ldr	r3, [pc, #44]	; (80168e4 <vPortSetupTimerInterrupt+0x38>)
 80168b8:	2200      	movs	r2, #0
 80168ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80168bc:	4b0a      	ldr	r3, [pc, #40]	; (80168e8 <vPortSetupTimerInterrupt+0x3c>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	4a0a      	ldr	r2, [pc, #40]	; (80168ec <vPortSetupTimerInterrupt+0x40>)
 80168c2:	fba2 2303 	umull	r2, r3, r2, r3
 80168c6:	099b      	lsrs	r3, r3, #6
 80168c8:	4a09      	ldr	r2, [pc, #36]	; (80168f0 <vPortSetupTimerInterrupt+0x44>)
 80168ca:	3b01      	subs	r3, #1
 80168cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80168ce:	4b04      	ldr	r3, [pc, #16]	; (80168e0 <vPortSetupTimerInterrupt+0x34>)
 80168d0:	2207      	movs	r2, #7
 80168d2:	601a      	str	r2, [r3, #0]
}
 80168d4:	bf00      	nop
 80168d6:	46bd      	mov	sp, r7
 80168d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168dc:	4770      	bx	lr
 80168de:	bf00      	nop
 80168e0:	e000e010 	.word	0xe000e010
 80168e4:	e000e018 	.word	0xe000e018
 80168e8:	20000060 	.word	0x20000060
 80168ec:	10624dd3 	.word	0x10624dd3
 80168f0:	e000e014 	.word	0xe000e014

080168f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80168f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016904 <vPortEnableVFP+0x10>
 80168f8:	6801      	ldr	r1, [r0, #0]
 80168fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80168fe:	6001      	str	r1, [r0, #0]
 8016900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016902:	bf00      	nop
 8016904:	e000ed88 	.word	0xe000ed88

08016908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016908:	b480      	push	{r7}
 801690a:	b085      	sub	sp, #20
 801690c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801690e:	f3ef 8305 	mrs	r3, IPSR
 8016912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	2b0f      	cmp	r3, #15
 8016918:	d915      	bls.n	8016946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801691a:	4a18      	ldr	r2, [pc, #96]	; (801697c <vPortValidateInterruptPriority+0x74>)
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	4413      	add	r3, r2
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016924:	4b16      	ldr	r3, [pc, #88]	; (8016980 <vPortValidateInterruptPriority+0x78>)
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	7afa      	ldrb	r2, [r7, #11]
 801692a:	429a      	cmp	r2, r3
 801692c:	d20b      	bcs.n	8016946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016932:	b672      	cpsid	i
 8016934:	f383 8811 	msr	BASEPRI, r3
 8016938:	f3bf 8f6f 	isb	sy
 801693c:	f3bf 8f4f 	dsb	sy
 8016940:	b662      	cpsie	i
 8016942:	607b      	str	r3, [r7, #4]
 8016944:	e7fe      	b.n	8016944 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016946:	4b0f      	ldr	r3, [pc, #60]	; (8016984 <vPortValidateInterruptPriority+0x7c>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801694e:	4b0e      	ldr	r3, [pc, #56]	; (8016988 <vPortValidateInterruptPriority+0x80>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	429a      	cmp	r2, r3
 8016954:	d90b      	bls.n	801696e <vPortValidateInterruptPriority+0x66>
 8016956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801695a:	b672      	cpsid	i
 801695c:	f383 8811 	msr	BASEPRI, r3
 8016960:	f3bf 8f6f 	isb	sy
 8016964:	f3bf 8f4f 	dsb	sy
 8016968:	b662      	cpsie	i
 801696a:	603b      	str	r3, [r7, #0]
 801696c:	e7fe      	b.n	801696c <vPortValidateInterruptPriority+0x64>
	}
 801696e:	bf00      	nop
 8016970:	3714      	adds	r7, #20
 8016972:	46bd      	mov	sp, r7
 8016974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016978:	4770      	bx	lr
 801697a:	bf00      	nop
 801697c:	e000e3f0 	.word	0xe000e3f0
 8016980:	20000270 	.word	0x20000270
 8016984:	e000ed0c 	.word	0xe000ed0c
 8016988:	20000274 	.word	0x20000274

0801698c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b08a      	sub	sp, #40	; 0x28
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016994:	2300      	movs	r3, #0
 8016996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016998:	f7fe ff60 	bl	801585c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801699c:	4b5c      	ldr	r3, [pc, #368]	; (8016b10 <pvPortMalloc+0x184>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d101      	bne.n	80169a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80169a4:	f000 f91a 	bl	8016bdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80169a8:	4b5a      	ldr	r3, [pc, #360]	; (8016b14 <pvPortMalloc+0x188>)
 80169aa:	681a      	ldr	r2, [r3, #0]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	4013      	ands	r3, r2
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	f040 8090 	bne.w	8016ad6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d01e      	beq.n	80169fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80169bc:	2208      	movs	r2, #8
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	4413      	add	r3, r2
 80169c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f003 0307 	and.w	r3, r3, #7
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d015      	beq.n	80169fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f023 0307 	bic.w	r3, r3, #7
 80169d4:	3308      	adds	r3, #8
 80169d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f003 0307 	and.w	r3, r3, #7
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d00b      	beq.n	80169fa <pvPortMalloc+0x6e>
 80169e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169e6:	b672      	cpsid	i
 80169e8:	f383 8811 	msr	BASEPRI, r3
 80169ec:	f3bf 8f6f 	isb	sy
 80169f0:	f3bf 8f4f 	dsb	sy
 80169f4:	b662      	cpsie	i
 80169f6:	617b      	str	r3, [r7, #20]
 80169f8:	e7fe      	b.n	80169f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d06a      	beq.n	8016ad6 <pvPortMalloc+0x14a>
 8016a00:	4b45      	ldr	r3, [pc, #276]	; (8016b18 <pvPortMalloc+0x18c>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d865      	bhi.n	8016ad6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016a0a:	4b44      	ldr	r3, [pc, #272]	; (8016b1c <pvPortMalloc+0x190>)
 8016a0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016a0e:	4b43      	ldr	r3, [pc, #268]	; (8016b1c <pvPortMalloc+0x190>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a14:	e004      	b.n	8016a20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	687a      	ldr	r2, [r7, #4]
 8016a26:	429a      	cmp	r2, r3
 8016a28:	d903      	bls.n	8016a32 <pvPortMalloc+0xa6>
 8016a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d1f1      	bne.n	8016a16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016a32:	4b37      	ldr	r3, [pc, #220]	; (8016b10 <pvPortMalloc+0x184>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d04c      	beq.n	8016ad6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016a3c:	6a3b      	ldr	r3, [r7, #32]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	2208      	movs	r2, #8
 8016a42:	4413      	add	r3, r2
 8016a44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a48:	681a      	ldr	r2, [r3, #0]
 8016a4a:	6a3b      	ldr	r3, [r7, #32]
 8016a4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a50:	685a      	ldr	r2, [r3, #4]
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	1ad2      	subs	r2, r2, r3
 8016a56:	2308      	movs	r3, #8
 8016a58:	005b      	lsls	r3, r3, #1
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	d920      	bls.n	8016aa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	4413      	add	r3, r2
 8016a64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	f003 0307 	and.w	r3, r3, #7
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d00b      	beq.n	8016a88 <pvPortMalloc+0xfc>
 8016a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a74:	b672      	cpsid	i
 8016a76:	f383 8811 	msr	BASEPRI, r3
 8016a7a:	f3bf 8f6f 	isb	sy
 8016a7e:	f3bf 8f4f 	dsb	sy
 8016a82:	b662      	cpsie	i
 8016a84:	613b      	str	r3, [r7, #16]
 8016a86:	e7fe      	b.n	8016a86 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a8a:	685a      	ldr	r2, [r3, #4]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	1ad2      	subs	r2, r2, r3
 8016a90:	69bb      	ldr	r3, [r7, #24]
 8016a92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016a9a:	69b8      	ldr	r0, [r7, #24]
 8016a9c:	f000 f900 	bl	8016ca0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016aa0:	4b1d      	ldr	r3, [pc, #116]	; (8016b18 <pvPortMalloc+0x18c>)
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	1ad3      	subs	r3, r2, r3
 8016aaa:	4a1b      	ldr	r2, [pc, #108]	; (8016b18 <pvPortMalloc+0x18c>)
 8016aac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016aae:	4b1a      	ldr	r3, [pc, #104]	; (8016b18 <pvPortMalloc+0x18c>)
 8016ab0:	681a      	ldr	r2, [r3, #0]
 8016ab2:	4b1b      	ldr	r3, [pc, #108]	; (8016b20 <pvPortMalloc+0x194>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d203      	bcs.n	8016ac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016aba:	4b17      	ldr	r3, [pc, #92]	; (8016b18 <pvPortMalloc+0x18c>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	4a18      	ldr	r2, [pc, #96]	; (8016b20 <pvPortMalloc+0x194>)
 8016ac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac4:	685a      	ldr	r2, [r3, #4]
 8016ac6:	4b13      	ldr	r3, [pc, #76]	; (8016b14 <pvPortMalloc+0x188>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	431a      	orrs	r2, r3
 8016acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016ad6:	f7fe fecf 	bl	8015878 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8016ada:	69fb      	ldr	r3, [r7, #28]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d101      	bne.n	8016ae4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016ae0:	f7fc fdb5 	bl	801364e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ae4:	69fb      	ldr	r3, [r7, #28]
 8016ae6:	f003 0307 	and.w	r3, r3, #7
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d00b      	beq.n	8016b06 <pvPortMalloc+0x17a>
 8016aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016af2:	b672      	cpsid	i
 8016af4:	f383 8811 	msr	BASEPRI, r3
 8016af8:	f3bf 8f6f 	isb	sy
 8016afc:	f3bf 8f4f 	dsb	sy
 8016b00:	b662      	cpsie	i
 8016b02:	60fb      	str	r3, [r7, #12]
 8016b04:	e7fe      	b.n	8016b04 <pvPortMalloc+0x178>
	return pvReturn;
 8016b06:	69fb      	ldr	r3, [r7, #28]
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3728      	adds	r7, #40	; 0x28
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}
 8016b10:	20008280 	.word	0x20008280
 8016b14:	2000828c 	.word	0x2000828c
 8016b18:	20008284 	.word	0x20008284
 8016b1c:	20008278 	.word	0x20008278
 8016b20:	20008288 	.word	0x20008288

08016b24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b086      	sub	sp, #24
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d04a      	beq.n	8016bcc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016b36:	2308      	movs	r3, #8
 8016b38:	425b      	negs	r3, r3
 8016b3a:	697a      	ldr	r2, [r7, #20]
 8016b3c:	4413      	add	r3, r2
 8016b3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016b44:	693b      	ldr	r3, [r7, #16]
 8016b46:	685a      	ldr	r2, [r3, #4]
 8016b48:	4b22      	ldr	r3, [pc, #136]	; (8016bd4 <vPortFree+0xb0>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	4013      	ands	r3, r2
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d10b      	bne.n	8016b6a <vPortFree+0x46>
 8016b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b56:	b672      	cpsid	i
 8016b58:	f383 8811 	msr	BASEPRI, r3
 8016b5c:	f3bf 8f6f 	isb	sy
 8016b60:	f3bf 8f4f 	dsb	sy
 8016b64:	b662      	cpsie	i
 8016b66:	60fb      	str	r3, [r7, #12]
 8016b68:	e7fe      	b.n	8016b68 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d00b      	beq.n	8016b8a <vPortFree+0x66>
 8016b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b76:	b672      	cpsid	i
 8016b78:	f383 8811 	msr	BASEPRI, r3
 8016b7c:	f3bf 8f6f 	isb	sy
 8016b80:	f3bf 8f4f 	dsb	sy
 8016b84:	b662      	cpsie	i
 8016b86:	60bb      	str	r3, [r7, #8]
 8016b88:	e7fe      	b.n	8016b88 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	685a      	ldr	r2, [r3, #4]
 8016b8e:	4b11      	ldr	r3, [pc, #68]	; (8016bd4 <vPortFree+0xb0>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	4013      	ands	r3, r2
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d019      	beq.n	8016bcc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d115      	bne.n	8016bcc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	685a      	ldr	r2, [r3, #4]
 8016ba4:	4b0b      	ldr	r3, [pc, #44]	; (8016bd4 <vPortFree+0xb0>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	43db      	mvns	r3, r3
 8016baa:	401a      	ands	r2, r3
 8016bac:	693b      	ldr	r3, [r7, #16]
 8016bae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016bb0:	f7fe fe54 	bl	801585c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016bb4:	693b      	ldr	r3, [r7, #16]
 8016bb6:	685a      	ldr	r2, [r3, #4]
 8016bb8:	4b07      	ldr	r3, [pc, #28]	; (8016bd8 <vPortFree+0xb4>)
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	4413      	add	r3, r2
 8016bbe:	4a06      	ldr	r2, [pc, #24]	; (8016bd8 <vPortFree+0xb4>)
 8016bc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016bc2:	6938      	ldr	r0, [r7, #16]
 8016bc4:	f000 f86c 	bl	8016ca0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016bc8:	f7fe fe56 	bl	8015878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016bcc:	bf00      	nop
 8016bce:	3718      	adds	r7, #24
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}
 8016bd4:	2000828c 	.word	0x2000828c
 8016bd8:	20008284 	.word	0x20008284

08016bdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b085      	sub	sp, #20
 8016be0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016be6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016be8:	4b27      	ldr	r3, [pc, #156]	; (8016c88 <prvHeapInit+0xac>)
 8016bea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	f003 0307 	and.w	r3, r3, #7
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d00c      	beq.n	8016c10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	3307      	adds	r3, #7
 8016bfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	f023 0307 	bic.w	r3, r3, #7
 8016c02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016c04:	68ba      	ldr	r2, [r7, #8]
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	1ad3      	subs	r3, r2, r3
 8016c0a:	4a1f      	ldr	r2, [pc, #124]	; (8016c88 <prvHeapInit+0xac>)
 8016c0c:	4413      	add	r3, r2
 8016c0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016c14:	4a1d      	ldr	r2, [pc, #116]	; (8016c8c <prvHeapInit+0xb0>)
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016c1a:	4b1c      	ldr	r3, [pc, #112]	; (8016c8c <prvHeapInit+0xb0>)
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	68ba      	ldr	r2, [r7, #8]
 8016c24:	4413      	add	r3, r2
 8016c26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016c28:	2208      	movs	r2, #8
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	1a9b      	subs	r3, r3, r2
 8016c2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	f023 0307 	bic.w	r3, r3, #7
 8016c36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	4a15      	ldr	r2, [pc, #84]	; (8016c90 <prvHeapInit+0xb4>)
 8016c3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016c3e:	4b14      	ldr	r3, [pc, #80]	; (8016c90 <prvHeapInit+0xb4>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	2200      	movs	r2, #0
 8016c44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016c46:	4b12      	ldr	r3, [pc, #72]	; (8016c90 <prvHeapInit+0xb4>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	68fa      	ldr	r2, [r7, #12]
 8016c56:	1ad2      	subs	r2, r2, r3
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016c5c:	4b0c      	ldr	r3, [pc, #48]	; (8016c90 <prvHeapInit+0xb4>)
 8016c5e:	681a      	ldr	r2, [r3, #0]
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	685b      	ldr	r3, [r3, #4]
 8016c68:	4a0a      	ldr	r2, [pc, #40]	; (8016c94 <prvHeapInit+0xb8>)
 8016c6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	685b      	ldr	r3, [r3, #4]
 8016c70:	4a09      	ldr	r2, [pc, #36]	; (8016c98 <prvHeapInit+0xbc>)
 8016c72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016c74:	4b09      	ldr	r3, [pc, #36]	; (8016c9c <prvHeapInit+0xc0>)
 8016c76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016c7a:	601a      	str	r2, [r3, #0]
}
 8016c7c:	bf00      	nop
 8016c7e:	3714      	adds	r7, #20
 8016c80:	46bd      	mov	sp, r7
 8016c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c86:	4770      	bx	lr
 8016c88:	20000278 	.word	0x20000278
 8016c8c:	20008278 	.word	0x20008278
 8016c90:	20008280 	.word	0x20008280
 8016c94:	20008288 	.word	0x20008288
 8016c98:	20008284 	.word	0x20008284
 8016c9c:	2000828c 	.word	0x2000828c

08016ca0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016ca8:	4b28      	ldr	r3, [pc, #160]	; (8016d4c <prvInsertBlockIntoFreeList+0xac>)
 8016caa:	60fb      	str	r3, [r7, #12]
 8016cac:	e002      	b.n	8016cb4 <prvInsertBlockIntoFreeList+0x14>
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	60fb      	str	r3, [r7, #12]
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	687a      	ldr	r2, [r7, #4]
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d8f7      	bhi.n	8016cae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	685b      	ldr	r3, [r3, #4]
 8016cc6:	68ba      	ldr	r2, [r7, #8]
 8016cc8:	4413      	add	r3, r2
 8016cca:	687a      	ldr	r2, [r7, #4]
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d108      	bne.n	8016ce2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	685a      	ldr	r2, [r3, #4]
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	441a      	add	r2, r3
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	68ba      	ldr	r2, [r7, #8]
 8016cec:	441a      	add	r2, r3
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d118      	bne.n	8016d28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	681a      	ldr	r2, [r3, #0]
 8016cfa:	4b15      	ldr	r3, [pc, #84]	; (8016d50 <prvInsertBlockIntoFreeList+0xb0>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d00d      	beq.n	8016d1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	685a      	ldr	r2, [r3, #4]
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	685b      	ldr	r3, [r3, #4]
 8016d0c:	441a      	add	r2, r3
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	681a      	ldr	r2, [r3, #0]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	601a      	str	r2, [r3, #0]
 8016d1c:	e008      	b.n	8016d30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016d1e:	4b0c      	ldr	r3, [pc, #48]	; (8016d50 <prvInsertBlockIntoFreeList+0xb0>)
 8016d20:	681a      	ldr	r2, [r3, #0]
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	601a      	str	r2, [r3, #0]
 8016d26:	e003      	b.n	8016d30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016d30:	68fa      	ldr	r2, [r7, #12]
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	d002      	beq.n	8016d3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	687a      	ldr	r2, [r7, #4]
 8016d3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d3e:	bf00      	nop
 8016d40:	3714      	adds	r7, #20
 8016d42:	46bd      	mov	sp, r7
 8016d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop
 8016d4c:	20008278 	.word	0x20008278
 8016d50:	20008280 	.word	0x20008280

08016d54 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b08c      	sub	sp, #48	; 0x30
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	4a51      	ldr	r2, [pc, #324]	; (8016ea4 <I2Cx_MspInit+0x150>)
 8016d60:	4293      	cmp	r3, r2
 8016d62:	d14d      	bne.n	8016e00 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8016d64:	4b50      	ldr	r3, [pc, #320]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d68:	4a4f      	ldr	r2, [pc, #316]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8016d70:	4b4d      	ldr	r3, [pc, #308]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d78:	61bb      	str	r3, [r7, #24]
 8016d7a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8016d7c:	2380      	movs	r3, #128	; 0x80
 8016d7e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8016d80:	2312      	movs	r3, #18
 8016d82:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8016d84:	2300      	movs	r3, #0
 8016d86:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8016d88:	2302      	movs	r3, #2
 8016d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8016d8c:	2304      	movs	r3, #4
 8016d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8016d90:	f107 031c 	add.w	r3, r7, #28
 8016d94:	4619      	mov	r1, r3
 8016d96:	4845      	ldr	r0, [pc, #276]	; (8016eac <I2Cx_MspInit+0x158>)
 8016d98:	f7eb fcda 	bl	8002750 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8016d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8016da2:	f107 031c 	add.w	r3, r7, #28
 8016da6:	4619      	mov	r1, r3
 8016da8:	4840      	ldr	r0, [pc, #256]	; (8016eac <I2Cx_MspInit+0x158>)
 8016daa:	f7eb fcd1 	bl	8002750 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8016dae:	4b3e      	ldr	r3, [pc, #248]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016db2:	4a3d      	ldr	r2, [pc, #244]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016db8:	6413      	str	r3, [r2, #64]	; 0x40
 8016dba:	4b3b      	ldr	r3, [pc, #236]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016dc2:	617b      	str	r3, [r7, #20]
 8016dc4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8016dc6:	4b38      	ldr	r3, [pc, #224]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016dc8:	6a1b      	ldr	r3, [r3, #32]
 8016dca:	4a37      	ldr	r2, [pc, #220]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016dcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016dd0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8016dd2:	4b35      	ldr	r3, [pc, #212]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016dd4:	6a1b      	ldr	r3, [r3, #32]
 8016dd6:	4a34      	ldr	r2, [pc, #208]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016dd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016ddc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8016dde:	2200      	movs	r2, #0
 8016de0:	210f      	movs	r1, #15
 8016de2:	2048      	movs	r0, #72	; 0x48
 8016de4:	f7ea fa22 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8016de8:	2048      	movs	r0, #72	; 0x48
 8016dea:	f7ea fa3b 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8016dee:	2200      	movs	r2, #0
 8016df0:	210f      	movs	r1, #15
 8016df2:	2049      	movs	r0, #73	; 0x49
 8016df4:	f7ea fa1a 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8016df8:	2049      	movs	r0, #73	; 0x49
 8016dfa:	f7ea fa33 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8016dfe:	e04d      	b.n	8016e9c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8016e00:	4b29      	ldr	r3, [pc, #164]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e04:	4a28      	ldr	r2, [pc, #160]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e06:	f043 0302 	orr.w	r3, r3, #2
 8016e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8016e0c:	4b26      	ldr	r3, [pc, #152]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e10:	f003 0302 	and.w	r3, r3, #2
 8016e14:	613b      	str	r3, [r7, #16]
 8016e16:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8016e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016e1c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8016e1e:	2312      	movs	r3, #18
 8016e20:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8016e22:	2300      	movs	r3, #0
 8016e24:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8016e26:	2302      	movs	r3, #2
 8016e28:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8016e2a:	2304      	movs	r3, #4
 8016e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8016e2e:	f107 031c 	add.w	r3, r7, #28
 8016e32:	4619      	mov	r1, r3
 8016e34:	481e      	ldr	r0, [pc, #120]	; (8016eb0 <I2Cx_MspInit+0x15c>)
 8016e36:	f7eb fc8b 	bl	8002750 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8016e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8016e40:	f107 031c 	add.w	r3, r7, #28
 8016e44:	4619      	mov	r1, r3
 8016e46:	481a      	ldr	r0, [pc, #104]	; (8016eb0 <I2Cx_MspInit+0x15c>)
 8016e48:	f7eb fc82 	bl	8002750 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8016e4c:	4b16      	ldr	r3, [pc, #88]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e50:	4a15      	ldr	r2, [pc, #84]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016e56:	6413      	str	r3, [r2, #64]	; 0x40
 8016e58:	4b13      	ldr	r3, [pc, #76]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016e60:	60fb      	str	r3, [r7, #12]
 8016e62:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8016e64:	4b10      	ldr	r3, [pc, #64]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e66:	6a1b      	ldr	r3, [r3, #32]
 8016e68:	4a0f      	ldr	r2, [pc, #60]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016e6e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8016e70:	4b0d      	ldr	r3, [pc, #52]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e72:	6a1b      	ldr	r3, [r3, #32]
 8016e74:	4a0c      	ldr	r2, [pc, #48]	; (8016ea8 <I2Cx_MspInit+0x154>)
 8016e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016e7a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	210f      	movs	r1, #15
 8016e80:	201f      	movs	r0, #31
 8016e82:	f7ea f9d3 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8016e86:	201f      	movs	r0, #31
 8016e88:	f7ea f9ec 	bl	8001264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	210f      	movs	r1, #15
 8016e90:	2020      	movs	r0, #32
 8016e92:	f7ea f9cb 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8016e96:	2020      	movs	r0, #32
 8016e98:	f7ea f9e4 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 8016e9c:	bf00      	nop
 8016e9e:	3730      	adds	r7, #48	; 0x30
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	20008290 	.word	0x20008290
 8016ea8:	40023800 	.word	0x40023800
 8016eac:	40021c00 	.word	0x40021c00
 8016eb0:	40020400 	.word	0x40020400

08016eb4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b082      	sub	sp, #8
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8016ebc:	6878      	ldr	r0, [r7, #4]
 8016ebe:	f7ed fe75 	bl	8004bac <HAL_I2C_GetState>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d125      	bne.n	8016f14 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	4a14      	ldr	r2, [pc, #80]	; (8016f1c <I2Cx_Init+0x68>)
 8016ecc:	4293      	cmp	r3, r2
 8016ece:	d103      	bne.n	8016ed8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	4a13      	ldr	r2, [pc, #76]	; (8016f20 <I2Cx_Init+0x6c>)
 8016ed4:	601a      	str	r2, [r3, #0]
 8016ed6:	e002      	b.n	8016ede <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	4a12      	ldr	r2, [pc, #72]	; (8016f24 <I2Cx_Init+0x70>)
 8016edc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	4a11      	ldr	r2, [pc, #68]	; (8016f28 <I2Cx_Init+0x74>)
 8016ee2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2201      	movs	r2, #1
 8016eee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2200      	movs	r2, #0
 8016efa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2200      	movs	r2, #0
 8016f00:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2200      	movs	r2, #0
 8016f06:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8016f08:	6878      	ldr	r0, [r7, #4]
 8016f0a:	f7ff ff23 	bl	8016d54 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f7ed fb5e 	bl	80045d0 <HAL_I2C_Init>
  }
}
 8016f14:	bf00      	nop
 8016f16:	3708      	adds	r7, #8
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}
 8016f1c:	20008290 	.word	0x20008290
 8016f20:	40005c00 	.word	0x40005c00
 8016f24:	40005400 	.word	0x40005400
 8016f28:	40912732 	.word	0x40912732

08016f2c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b08a      	sub	sp, #40	; 0x28
 8016f30:	af04      	add	r7, sp, #16
 8016f32:	60f8      	str	r0, [r7, #12]
 8016f34:	4608      	mov	r0, r1
 8016f36:	4611      	mov	r1, r2
 8016f38:	461a      	mov	r2, r3
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	72fb      	strb	r3, [r7, #11]
 8016f3e:	460b      	mov	r3, r1
 8016f40:	813b      	strh	r3, [r7, #8]
 8016f42:	4613      	mov	r3, r2
 8016f44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8016f46:	2300      	movs	r3, #0
 8016f48:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8016f4a:	7afb      	ldrb	r3, [r7, #11]
 8016f4c:	b299      	uxth	r1, r3
 8016f4e:	88f8      	ldrh	r0, [r7, #6]
 8016f50:	893a      	ldrh	r2, [r7, #8]
 8016f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016f56:	9302      	str	r3, [sp, #8]
 8016f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f5a:	9301      	str	r3, [sp, #4]
 8016f5c:	6a3b      	ldr	r3, [r7, #32]
 8016f5e:	9300      	str	r3, [sp, #0]
 8016f60:	4603      	mov	r3, r0
 8016f62:	68f8      	ldr	r0, [r7, #12]
 8016f64:	f7ed fd08 	bl	8004978 <HAL_I2C_Mem_Read>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8016f6c:	7dfb      	ldrb	r3, [r7, #23]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d004      	beq.n	8016f7c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8016f72:	7afb      	ldrb	r3, [r7, #11]
 8016f74:	4619      	mov	r1, r3
 8016f76:	68f8      	ldr	r0, [r7, #12]
 8016f78:	f000 f832 	bl	8016fe0 <I2Cx_Error>
  }
  return status;    
 8016f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f7e:	4618      	mov	r0, r3
 8016f80:	3718      	adds	r7, #24
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd80      	pop	{r7, pc}

08016f86 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8016f86:	b580      	push	{r7, lr}
 8016f88:	b08a      	sub	sp, #40	; 0x28
 8016f8a:	af04      	add	r7, sp, #16
 8016f8c:	60f8      	str	r0, [r7, #12]
 8016f8e:	4608      	mov	r0, r1
 8016f90:	4611      	mov	r1, r2
 8016f92:	461a      	mov	r2, r3
 8016f94:	4603      	mov	r3, r0
 8016f96:	72fb      	strb	r3, [r7, #11]
 8016f98:	460b      	mov	r3, r1
 8016f9a:	813b      	strh	r3, [r7, #8]
 8016f9c:	4613      	mov	r3, r2
 8016f9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8016fa4:	7afb      	ldrb	r3, [r7, #11]
 8016fa6:	b299      	uxth	r1, r3
 8016fa8:	88f8      	ldrh	r0, [r7, #6]
 8016faa:	893a      	ldrh	r2, [r7, #8]
 8016fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016fb0:	9302      	str	r3, [sp, #8]
 8016fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016fb4:	9301      	str	r3, [sp, #4]
 8016fb6:	6a3b      	ldr	r3, [r7, #32]
 8016fb8:	9300      	str	r3, [sp, #0]
 8016fba:	4603      	mov	r3, r0
 8016fbc:	68f8      	ldr	r0, [r7, #12]
 8016fbe:	f7ed fbc7 	bl	8004750 <HAL_I2C_Mem_Write>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8016fc6:	7dfb      	ldrb	r3, [r7, #23]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d004      	beq.n	8016fd6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8016fcc:	7afb      	ldrb	r3, [r7, #11]
 8016fce:	4619      	mov	r1, r3
 8016fd0:	68f8      	ldr	r0, [r7, #12]
 8016fd2:	f000 f805 	bl	8016fe0 <I2Cx_Error>
  }
  return status;
 8016fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3718      	adds	r7, #24
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}

08016fe0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b082      	sub	sp, #8
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
 8016fe8:	460b      	mov	r3, r1
 8016fea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8016fec:	6878      	ldr	r0, [r7, #4]
 8016fee:	f7ed fb7f 	bl	80046f0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f7ff ff5e 	bl	8016eb4 <I2Cx_Init>
}
 8016ff8:	bf00      	nop
 8016ffa:	3708      	adds	r7, #8
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd80      	pop	{r7, pc}

08017000 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8017004:	4802      	ldr	r0, [pc, #8]	; (8017010 <TS_IO_Init+0x10>)
 8017006:	f7ff ff55 	bl	8016eb4 <I2Cx_Init>
}
 801700a:	bf00      	nop
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	20008290 	.word	0x20008290

08017014 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b084      	sub	sp, #16
 8017018:	af02      	add	r7, sp, #8
 801701a:	4603      	mov	r3, r0
 801701c:	71fb      	strb	r3, [r7, #7]
 801701e:	460b      	mov	r3, r1
 8017020:	71bb      	strb	r3, [r7, #6]
 8017022:	4613      	mov	r3, r2
 8017024:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8017026:	79bb      	ldrb	r3, [r7, #6]
 8017028:	b29a      	uxth	r2, r3
 801702a:	79f9      	ldrb	r1, [r7, #7]
 801702c:	2301      	movs	r3, #1
 801702e:	9301      	str	r3, [sp, #4]
 8017030:	1d7b      	adds	r3, r7, #5
 8017032:	9300      	str	r3, [sp, #0]
 8017034:	2301      	movs	r3, #1
 8017036:	4803      	ldr	r0, [pc, #12]	; (8017044 <TS_IO_Write+0x30>)
 8017038:	f7ff ffa5 	bl	8016f86 <I2Cx_WriteMultiple>
}
 801703c:	bf00      	nop
 801703e:	3708      	adds	r7, #8
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	20008290 	.word	0x20008290

08017048 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b086      	sub	sp, #24
 801704c:	af02      	add	r7, sp, #8
 801704e:	4603      	mov	r3, r0
 8017050:	460a      	mov	r2, r1
 8017052:	71fb      	strb	r3, [r7, #7]
 8017054:	4613      	mov	r3, r2
 8017056:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8017058:	2300      	movs	r3, #0
 801705a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 801705c:	79bb      	ldrb	r3, [r7, #6]
 801705e:	b29a      	uxth	r2, r3
 8017060:	79f9      	ldrb	r1, [r7, #7]
 8017062:	2301      	movs	r3, #1
 8017064:	9301      	str	r3, [sp, #4]
 8017066:	f107 030f 	add.w	r3, r7, #15
 801706a:	9300      	str	r3, [sp, #0]
 801706c:	2301      	movs	r3, #1
 801706e:	4804      	ldr	r0, [pc, #16]	; (8017080 <TS_IO_Read+0x38>)
 8017070:	f7ff ff5c 	bl	8016f2c <I2Cx_ReadMultiple>

  return read_value;
 8017074:	7bfb      	ldrb	r3, [r7, #15]
}
 8017076:	4618      	mov	r0, r3
 8017078:	3710      	adds	r7, #16
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
 801707e:	bf00      	nop
 8017080:	20008290 	.word	0x20008290

08017084 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b082      	sub	sp, #8
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f7e9 fd5f 	bl	8000b50 <HAL_Delay>
}
 8017092:	bf00      	nop
 8017094:	3708      	adds	r7, #8
 8017096:	46bd      	mov	sp, r7
 8017098:	bd80      	pop	{r7, pc}
	...

0801709c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	4603      	mov	r3, r0
 80170a4:	460a      	mov	r2, r1
 80170a6:	80fb      	strh	r3, [r7, #6]
 80170a8:	4613      	mov	r3, r2
 80170aa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80170ac:	2300      	movs	r3, #0
 80170ae:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80170b0:	4a14      	ldr	r2, [pc, #80]	; (8017104 <BSP_TS_Init+0x68>)
 80170b2:	88fb      	ldrh	r3, [r7, #6]
 80170b4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80170b6:	4a14      	ldr	r2, [pc, #80]	; (8017108 <BSP_TS_Init+0x6c>)
 80170b8:	88bb      	ldrh	r3, [r7, #4]
 80170ba:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80170bc:	4b13      	ldr	r3, [pc, #76]	; (801710c <BSP_TS_Init+0x70>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	2070      	movs	r0, #112	; 0x70
 80170c2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80170c4:	4b11      	ldr	r3, [pc, #68]	; (801710c <BSP_TS_Init+0x70>)
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	2070      	movs	r0, #112	; 0x70
 80170ca:	4798      	blx	r3
 80170cc:	4603      	mov	r3, r0
 80170ce:	2b51      	cmp	r3, #81	; 0x51
 80170d0:	d111      	bne.n	80170f6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80170d2:	4b0f      	ldr	r3, [pc, #60]	; (8017110 <BSP_TS_Init+0x74>)
 80170d4:	4a0d      	ldr	r2, [pc, #52]	; (801710c <BSP_TS_Init+0x70>)
 80170d6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80170d8:	4b0e      	ldr	r3, [pc, #56]	; (8017114 <BSP_TS_Init+0x78>)
 80170da:	2270      	movs	r2, #112	; 0x70
 80170dc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80170de:	4b0e      	ldr	r3, [pc, #56]	; (8017118 <BSP_TS_Init+0x7c>)
 80170e0:	2208      	movs	r2, #8
 80170e2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80170e4:	4b0a      	ldr	r3, [pc, #40]	; (8017110 <BSP_TS_Init+0x74>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	68db      	ldr	r3, [r3, #12]
 80170ea:	4a0a      	ldr	r2, [pc, #40]	; (8017114 <BSP_TS_Init+0x78>)
 80170ec:	7812      	ldrb	r2, [r2, #0]
 80170ee:	b292      	uxth	r2, r2
 80170f0:	4610      	mov	r0, r2
 80170f2:	4798      	blx	r3
 80170f4:	e001      	b.n	80170fa <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80170f6:	2303      	movs	r3, #3
 80170f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80170fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80170fc:	4618      	mov	r0, r3
 80170fe:	3710      	adds	r7, #16
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}
 8017104:	200082e0 	.word	0x200082e0
 8017108:	200082e2 	.word	0x200082e2
 801710c:	20000000 	.word	0x20000000
 8017110:	200082dc 	.word	0x200082dc
 8017114:	200082e5 	.word	0x200082e5
 8017118:	200082e4 	.word	0x200082e4

0801711c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 801711c:	b590      	push	{r4, r7, lr}
 801711e:	b097      	sub	sp, #92	; 0x5c
 8017120:	af02      	add	r7, sp, #8
 8017122:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8017124:	2300      	movs	r3, #0
 8017126:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 801712a:	2300      	movs	r3, #0
 801712c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 801712e:	2300      	movs	r3, #0
 8017130:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8017132:	2300      	movs	r3, #0
 8017134:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8017136:	4b97      	ldr	r3, [pc, #604]	; (8017394 <BSP_TS_GetState+0x278>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	691b      	ldr	r3, [r3, #16]
 801713c:	4a96      	ldr	r2, [pc, #600]	; (8017398 <BSP_TS_GetState+0x27c>)
 801713e:	7812      	ldrb	r2, [r2, #0]
 8017140:	b292      	uxth	r2, r2
 8017142:	4610      	mov	r0, r2
 8017144:	4798      	blx	r3
 8017146:	4603      	mov	r3, r0
 8017148:	461a      	mov	r2, r3
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	2b00      	cmp	r3, #0
 8017154:	f000 81a8 	beq.w	80174a8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8017158:	2300      	movs	r3, #0
 801715a:	64bb      	str	r3, [r7, #72]	; 0x48
 801715c:	e197      	b.n	801748e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 801715e:	4b8d      	ldr	r3, [pc, #564]	; (8017394 <BSP_TS_GetState+0x278>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	695b      	ldr	r3, [r3, #20]
 8017164:	4a8c      	ldr	r2, [pc, #560]	; (8017398 <BSP_TS_GetState+0x27c>)
 8017166:	7812      	ldrb	r2, [r2, #0]
 8017168:	b290      	uxth	r0, r2
 801716a:	f107 0120 	add.w	r1, r7, #32
 801716e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017170:	0052      	lsls	r2, r2, #1
 8017172:	188c      	adds	r4, r1, r2
 8017174:	f107 0114 	add.w	r1, r7, #20
 8017178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801717a:	0052      	lsls	r2, r2, #1
 801717c:	440a      	add	r2, r1
 801717e:	4621      	mov	r1, r4
 8017180:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8017182:	4b86      	ldr	r3, [pc, #536]	; (801739c <BSP_TS_GetState+0x280>)
 8017184:	781b      	ldrb	r3, [r3, #0]
 8017186:	2b01      	cmp	r3, #1
 8017188:	d11b      	bne.n	80171c2 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 801718a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801718c:	005b      	lsls	r3, r3, #1
 801718e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017192:	4413      	add	r3, r2
 8017194:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8017198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801719a:	005b      	lsls	r3, r3, #1
 801719c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80171a0:	440b      	add	r3, r1
 80171a2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80171a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171a8:	005b      	lsls	r3, r3, #1
 80171aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80171ae:	4413      	add	r3, r2
 80171b0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80171b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171b6:	005b      	lsls	r3, r3, #1
 80171b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80171bc:	440b      	add	r3, r1
 80171be:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80171c2:	4b76      	ldr	r3, [pc, #472]	; (801739c <BSP_TS_GetState+0x280>)
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	f003 0302 	and.w	r3, r3, #2
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d010      	beq.n	80171f0 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80171ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171d0:	005b      	lsls	r3, r3, #1
 80171d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80171d6:	4413      	add	r3, r2
 80171d8:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80171dc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80171e0:	b29a      	uxth	r2, r3
 80171e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171e4:	005b      	lsls	r3, r3, #1
 80171e6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80171ea:	440b      	add	r3, r1
 80171ec:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80171f0:	4b6a      	ldr	r3, [pc, #424]	; (801739c <BSP_TS_GetState+0x280>)
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	f003 0304 	and.w	r3, r3, #4
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d010      	beq.n	801721e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80171fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171fe:	005b      	lsls	r3, r3, #1
 8017200:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017204:	4413      	add	r3, r2
 8017206:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 801720a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801720e:	b29a      	uxth	r2, r3
 8017210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017212:	005b      	lsls	r3, r3, #1
 8017214:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017218:	440b      	add	r3, r1
 801721a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 801721e:	4b5f      	ldr	r3, [pc, #380]	; (801739c <BSP_TS_GetState+0x280>)
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	f003 0308 	and.w	r3, r3, #8
 8017226:	2b00      	cmp	r3, #0
 8017228:	d01b      	beq.n	8017262 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 801722a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801722c:	005b      	lsls	r3, r3, #1
 801722e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017232:	4413      	add	r3, r2
 8017234:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8017238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801723a:	005b      	lsls	r3, r3, #1
 801723c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017240:	440b      	add	r3, r1
 8017242:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8017246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017248:	005b      	lsls	r3, r3, #1
 801724a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801724e:	4413      	add	r3, r2
 8017250:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8017254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017256:	005b      	lsls	r3, r3, #1
 8017258:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801725c:	440b      	add	r3, r1
 801725e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8017262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017264:	005b      	lsls	r3, r3, #1
 8017266:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801726a:	4413      	add	r3, r2
 801726c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8017270:	4619      	mov	r1, r3
 8017272:	4a4b      	ldr	r2, [pc, #300]	; (80173a0 <BSP_TS_GetState+0x284>)
 8017274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801727a:	4299      	cmp	r1, r3
 801727c:	d90e      	bls.n	801729c <BSP_TS_GetState+0x180>
 801727e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017280:	005b      	lsls	r3, r3, #1
 8017282:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017286:	4413      	add	r3, r2
 8017288:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801728c:	4944      	ldr	r1, [pc, #272]	; (80173a0 <BSP_TS_GetState+0x284>)
 801728e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8017294:	b29b      	uxth	r3, r3
 8017296:	1ad3      	subs	r3, r2, r3
 8017298:	b29b      	uxth	r3, r3
 801729a:	e00d      	b.n	80172b8 <BSP_TS_GetState+0x19c>
 801729c:	4a40      	ldr	r2, [pc, #256]	; (80173a0 <BSP_TS_GetState+0x284>)
 801729e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172a4:	b29a      	uxth	r2, r3
 80172a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172a8:	005b      	lsls	r3, r3, #1
 80172aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80172ae:	440b      	add	r3, r1
 80172b0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80172b4:	1ad3      	subs	r3, r2, r3
 80172b6:	b29b      	uxth	r3, r3
 80172b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80172bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172be:	005b      	lsls	r3, r3, #1
 80172c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80172c4:	4413      	add	r3, r2
 80172c6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80172ca:	4619      	mov	r1, r3
 80172cc:	4a35      	ldr	r2, [pc, #212]	; (80173a4 <BSP_TS_GetState+0x288>)
 80172ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172d4:	4299      	cmp	r1, r3
 80172d6:	d90e      	bls.n	80172f6 <BSP_TS_GetState+0x1da>
 80172d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172da:	005b      	lsls	r3, r3, #1
 80172dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80172e0:	4413      	add	r3, r2
 80172e2:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80172e6:	492f      	ldr	r1, [pc, #188]	; (80173a4 <BSP_TS_GetState+0x288>)
 80172e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	1ad3      	subs	r3, r2, r3
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	e00d      	b.n	8017312 <BSP_TS_GetState+0x1f6>
 80172f6:	4a2b      	ldr	r2, [pc, #172]	; (80173a4 <BSP_TS_GetState+0x288>)
 80172f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172fe:	b29a      	uxth	r2, r3
 8017300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017302:	005b      	lsls	r3, r3, #1
 8017304:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8017308:	440b      	add	r3, r1
 801730a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801730e:	1ad3      	subs	r3, r2, r3
 8017310:	b29b      	uxth	r3, r3
 8017312:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8017316:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801731a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801731e:	4413      	add	r3, r2
 8017320:	2b05      	cmp	r3, #5
 8017322:	dd17      	ble.n	8017354 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8017324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017326:	005b      	lsls	r3, r3, #1
 8017328:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801732c:	4413      	add	r3, r2
 801732e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8017332:	4619      	mov	r1, r3
 8017334:	4a1a      	ldr	r2, [pc, #104]	; (80173a0 <BSP_TS_GetState+0x284>)
 8017336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 801733c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801733e:	005b      	lsls	r3, r3, #1
 8017340:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017344:	4413      	add	r3, r2
 8017346:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801734a:	4619      	mov	r1, r3
 801734c:	4a15      	ldr	r2, [pc, #84]	; (80173a4 <BSP_TS_GetState+0x288>)
 801734e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017350:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8017354:	4b10      	ldr	r3, [pc, #64]	; (8017398 <BSP_TS_GetState+0x27c>)
 8017356:	781b      	ldrb	r3, [r3, #0]
 8017358:	2b70      	cmp	r3, #112	; 0x70
 801735a:	d125      	bne.n	80173a8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 801735c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801735e:	005b      	lsls	r3, r3, #1
 8017360:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8017364:	4413      	add	r3, r2
 8017366:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 801736a:	687a      	ldr	r2, [r7, #4]
 801736c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801736e:	005b      	lsls	r3, r3, #1
 8017370:	4413      	add	r3, r2
 8017372:	460a      	mov	r2, r1
 8017374:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8017376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017378:	005b      	lsls	r3, r3, #1
 801737a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801737e:	4413      	add	r3, r2
 8017380:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8017384:	687a      	ldr	r2, [r7, #4]
 8017386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017388:	3304      	adds	r3, #4
 801738a:	005b      	lsls	r3, r3, #1
 801738c:	4413      	add	r3, r2
 801738e:	460a      	mov	r2, r1
 8017390:	809a      	strh	r2, [r3, #4]
 8017392:	e02c      	b.n	80173ee <BSP_TS_GetState+0x2d2>
 8017394:	200082dc 	.word	0x200082dc
 8017398:	200082e5 	.word	0x200082e5
 801739c:	200082e4 	.word	0x200082e4
 80173a0:	200082e8 	.word	0x200082e8
 80173a4:	200082fc 	.word	0x200082fc
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80173a8:	4b42      	ldr	r3, [pc, #264]	; (80174b4 <BSP_TS_GetState+0x398>)
 80173aa:	881b      	ldrh	r3, [r3, #0]
 80173ac:	4619      	mov	r1, r3
 80173ae:	4a42      	ldr	r2, [pc, #264]	; (80174b8 <BSP_TS_GetState+0x39c>)
 80173b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173b6:	fb03 f301 	mul.w	r3, r3, r1
 80173ba:	0b1b      	lsrs	r3, r3, #12
 80173bc:	b299      	uxth	r1, r3
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173c2:	005b      	lsls	r3, r3, #1
 80173c4:	4413      	add	r3, r2
 80173c6:	460a      	mov	r2, r1
 80173c8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80173ca:	4b3c      	ldr	r3, [pc, #240]	; (80174bc <BSP_TS_GetState+0x3a0>)
 80173cc:	881b      	ldrh	r3, [r3, #0]
 80173ce:	4619      	mov	r1, r3
 80173d0:	4a3b      	ldr	r2, [pc, #236]	; (80174c0 <BSP_TS_GetState+0x3a4>)
 80173d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173d8:	fb03 f301 	mul.w	r3, r3, r1
 80173dc:	0b1b      	lsrs	r3, r3, #12
 80173de:	b299      	uxth	r1, r3
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173e4:	3304      	adds	r3, #4
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	4413      	add	r3, r2
 80173ea:	460a      	mov	r2, r1
 80173ec:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80173ee:	4b35      	ldr	r3, [pc, #212]	; (80174c4 <BSP_TS_GetState+0x3a8>)
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	b298      	uxth	r0, r3
 80173f4:	f107 010c 	add.w	r1, r7, #12
 80173f8:	f107 0210 	add.w	r2, r7, #16
 80173fc:	f107 0308 	add.w	r3, r7, #8
 8017400:	9300      	str	r3, [sp, #0]
 8017402:	460b      	mov	r3, r1
 8017404:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017406:	f7e9 fa9d 	bl	8000944 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 801740a:	693b      	ldr	r3, [r7, #16]
 801740c:	b2d9      	uxtb	r1, r3
 801740e:	687a      	ldr	r2, [r7, #4]
 8017410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017412:	4413      	add	r3, r2
 8017414:	3316      	adds	r3, #22
 8017416:	460a      	mov	r2, r1
 8017418:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	b2d9      	uxtb	r1, r3
 801741e:	687a      	ldr	r2, [r7, #4]
 8017420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017422:	4413      	add	r3, r2
 8017424:	3320      	adds	r3, #32
 8017426:	460a      	mov	r2, r1
 8017428:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 801742a:	68bb      	ldr	r3, [r7, #8]
 801742c:	2b03      	cmp	r3, #3
 801742e:	d827      	bhi.n	8017480 <BSP_TS_GetState+0x364>
 8017430:	a201      	add	r2, pc, #4	; (adr r2, 8017438 <BSP_TS_GetState+0x31c>)
 8017432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017436:	bf00      	nop
 8017438:	08017449 	.word	0x08017449
 801743c:	08017457 	.word	0x08017457
 8017440:	08017465 	.word	0x08017465
 8017444:	08017473 	.word	0x08017473
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8017448:	687a      	ldr	r2, [r7, #4]
 801744a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801744c:	4413      	add	r3, r2
 801744e:	331b      	adds	r3, #27
 8017450:	2201      	movs	r2, #1
 8017452:	701a      	strb	r2, [r3, #0]
          break;
 8017454:	e018      	b.n	8017488 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801745a:	4413      	add	r3, r2
 801745c:	331b      	adds	r3, #27
 801745e:	2202      	movs	r2, #2
 8017460:	701a      	strb	r2, [r3, #0]
          break;
 8017462:	e011      	b.n	8017488 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017468:	4413      	add	r3, r2
 801746a:	331b      	adds	r3, #27
 801746c:	2203      	movs	r2, #3
 801746e:	701a      	strb	r2, [r3, #0]
          break;
 8017470:	e00a      	b.n	8017488 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8017472:	687a      	ldr	r2, [r7, #4]
 8017474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017476:	4413      	add	r3, r2
 8017478:	331b      	adds	r3, #27
 801747a:	2200      	movs	r2, #0
 801747c:	701a      	strb	r2, [r3, #0]
          break;
 801747e:	e003      	b.n	8017488 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8017480:	2301      	movs	r3, #1
 8017482:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8017486:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8017488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801748a:	3301      	adds	r3, #1
 801748c:	64bb      	str	r3, [r7, #72]	; 0x48
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	781b      	ldrb	r3, [r3, #0]
 8017492:	461a      	mov	r2, r3
 8017494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017496:	4293      	cmp	r3, r2
 8017498:	f4ff ae61 	bcc.w	801715e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f000 f813 	bl	80174c8 <BSP_TS_Get_GestureId>
 80174a2:	4603      	mov	r3, r0
 80174a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80174a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80174ac:	4618      	mov	r0, r3
 80174ae:	3754      	adds	r7, #84	; 0x54
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd90      	pop	{r4, r7, pc}
 80174b4:	200082e0 	.word	0x200082e0
 80174b8:	200082e8 	.word	0x200082e8
 80174bc:	200082e2 	.word	0x200082e2
 80174c0:	200082fc 	.word	0x200082fc
 80174c4:	200082e5 	.word	0x200082e5

080174c8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b084      	sub	sp, #16
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80174d0:	2300      	movs	r3, #0
 80174d2:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80174d4:	2300      	movs	r3, #0
 80174d6:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80174d8:	4b1f      	ldr	r3, [pc, #124]	; (8017558 <BSP_TS_Get_GestureId+0x90>)
 80174da:	781b      	ldrb	r3, [r3, #0]
 80174dc:	b29b      	uxth	r3, r3
 80174de:	f107 0208 	add.w	r2, r7, #8
 80174e2:	4611      	mov	r1, r2
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7e9 fa14 	bl	8000912 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	2b18      	cmp	r3, #24
 80174ee:	d01b      	beq.n	8017528 <BSP_TS_Get_GestureId+0x60>
 80174f0:	2b18      	cmp	r3, #24
 80174f2:	d806      	bhi.n	8017502 <BSP_TS_Get_GestureId+0x3a>
 80174f4:	2b10      	cmp	r3, #16
 80174f6:	d00f      	beq.n	8017518 <BSP_TS_Get_GestureId+0x50>
 80174f8:	2b14      	cmp	r3, #20
 80174fa:	d011      	beq.n	8017520 <BSP_TS_Get_GestureId+0x58>
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d007      	beq.n	8017510 <BSP_TS_Get_GestureId+0x48>
 8017500:	e022      	b.n	8017548 <BSP_TS_Get_GestureId+0x80>
 8017502:	2b40      	cmp	r3, #64	; 0x40
 8017504:	d018      	beq.n	8017538 <BSP_TS_Get_GestureId+0x70>
 8017506:	2b49      	cmp	r3, #73	; 0x49
 8017508:	d01a      	beq.n	8017540 <BSP_TS_Get_GestureId+0x78>
 801750a:	2b1c      	cmp	r3, #28
 801750c:	d010      	beq.n	8017530 <BSP_TS_Get_GestureId+0x68>
 801750e:	e01b      	b.n	8017548 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2200      	movs	r2, #0
 8017514:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8017516:	e01a      	b.n	801754e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	2201      	movs	r2, #1
 801751c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801751e:	e016      	b.n	801754e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2202      	movs	r2, #2
 8017524:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8017526:	e012      	b.n	801754e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2203      	movs	r2, #3
 801752c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801752e:	e00e      	b.n	801754e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2204      	movs	r2, #4
 8017534:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8017536:	e00a      	b.n	801754e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2205      	movs	r2, #5
 801753c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801753e:	e006      	b.n	801754e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	2206      	movs	r2, #6
 8017544:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8017546:	e002      	b.n	801754e <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8017548:	2301      	movs	r3, #1
 801754a:	73fb      	strb	r3, [r7, #15]
      break;
 801754c:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 801754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017550:	4618      	mov	r0, r3
 8017552:	3710      	adds	r7, #16
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}
 8017558:	200082e5 	.word	0x200082e5

0801755c <__tcf_1>:
static Texts texts; ///< The texts

template <class T>
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
{
    static T hal(dma, display, tc, width, height);
 801755c:	4770      	bx	lr

0801755e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 801755e:	2001      	movs	r0, #1
 8017560:	4770      	bx	lr

08017562 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8017562:	200c      	movs	r0, #12
 8017564:	4770      	bx	lr

08017566 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8017566:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801756a:	008b      	lsls	r3, r1, #2
 801756c:	3308      	adds	r3, #8
    }
 801756e:	4418      	add	r0, r3
 8017570:	4770      	bx	lr

08017572 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8017572:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017576:	008b      	lsls	r3, r1, #2
 8017578:	3308      	adds	r3, #8
    }
 801757a:	4418      	add	r0, r3
 801757c:	4770      	bx	lr

0801757e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 801757e:	2001      	movs	r0, #1
 8017580:	4770      	bx	lr

08017582 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8017582:	f242 000c 	movw	r0, #8204	; 0x200c
 8017586:	4770      	bx	lr

08017588 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8017588:	f242 030c 	movw	r3, #8204	; 0x200c
 801758c:	fb03 f101 	mul.w	r1, r3, r1
 8017590:	3108      	adds	r1, #8
    }
 8017592:	4408      	add	r0, r1
 8017594:	4770      	bx	lr

08017596 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8017596:	f242 030c 	movw	r3, #8204	; 0x200c
 801759a:	fb03 f101 	mul.w	r1, r3, r1
 801759e:	3108      	adds	r1, #8
    }
 80175a0:	4408      	add	r0, r1
 80175a2:	4770      	bx	lr

080175a4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80175a4:	2001      	movs	r0, #1
 80175a6:	4770      	bx	lr

080175a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80175a8:	2010      	movs	r0, #16
 80175aa:	4770      	bx	lr

080175ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80175ac:	0109      	lsls	r1, r1, #4
 80175ae:	3108      	adds	r1, #8
    }
 80175b0:	4408      	add	r0, r1
 80175b2:	4770      	bx	lr

080175b4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80175b4:	0109      	lsls	r1, r1, #4
 80175b6:	3108      	adds	r1, #8
    }
 80175b8:	4408      	add	r0, r1
 80175ba:	4770      	bx	lr

080175bc <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80175bc:	b508      	push	{r3, lr}
    {
        app.gotoScreen3ScreenNoTransition();
 80175be:	4608      	mov	r0, r1
 80175c0:	f003 fd2a 	bl	801b018 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
    }
 80175c4:	bd08      	pop	{r3, pc}
	...

080175c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80175c8:	b510      	push	{r4, lr}
 80175ca:	4604      	mov	r4, r0
    }
 80175cc:	4b02      	ldr	r3, [pc, #8]	; (80175d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80175ce:	6003      	str	r3, [r0, #0]
 80175d0:	f004 fab4 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80175d4:	4620      	mov	r0, r4
 80175d6:	bd10      	pop	{r4, pc}
 80175d8:	0802503c 	.word	0x0802503c

080175dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80175dc:	b510      	push	{r4, lr}
 80175de:	4604      	mov	r4, r0
    }
 80175e0:	4b04      	ldr	r3, [pc, #16]	; (80175f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80175e2:	6003      	str	r3, [r0, #0]
 80175e4:	f004 faaa 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80175e8:	2114      	movs	r1, #20
 80175ea:	4620      	mov	r0, r4
 80175ec:	f00b fa88 	bl	8022b00 <_ZdlPvj>
 80175f0:	4620      	mov	r0, r4
 80175f2:	bd10      	pop	{r4, pc}
 80175f4:	0802503c 	.word	0x0802503c

080175f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80175f8:	b510      	push	{r4, lr}
 80175fa:	4604      	mov	r4, r0
    }
 80175fc:	4b02      	ldr	r3, [pc, #8]	; (8017608 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80175fe:	6003      	str	r3, [r0, #0]
 8017600:	f004 fa9c 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017604:	4620      	mov	r0, r4
 8017606:	bd10      	pop	{r4, pc}
 8017608:	08025008 	.word	0x08025008

0801760c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801760c:	b510      	push	{r4, lr}
 801760e:	4604      	mov	r4, r0
    }
 8017610:	4b05      	ldr	r3, [pc, #20]	; (8017628 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 8017612:	6003      	str	r3, [r0, #0]
 8017614:	f004 fa92 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017618:	f242 0114 	movw	r1, #8212	; 0x2014
 801761c:	4620      	mov	r0, r4
 801761e:	f00b fa6f 	bl	8022b00 <_ZdlPvj>
 8017622:	4620      	mov	r0, r4
 8017624:	bd10      	pop	{r4, pc}
 8017626:	bf00      	nop
 8017628:	08025008 	.word	0x08025008

0801762c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801762c:	b510      	push	{r4, lr}
 801762e:	4604      	mov	r4, r0
    }
 8017630:	4b02      	ldr	r3, [pc, #8]	; (801763c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8017632:	6003      	str	r3, [r0, #0]
 8017634:	f004 fa82 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017638:	4620      	mov	r0, r4
 801763a:	bd10      	pop	{r4, pc}
 801763c:	08024fd4 	.word	0x08024fd4

08017640 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017640:	b510      	push	{r4, lr}
 8017642:	4604      	mov	r4, r0
    }
 8017644:	4b04      	ldr	r3, [pc, #16]	; (8017658 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8017646:	6003      	str	r3, [r0, #0]
 8017648:	f004 fa78 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801764c:	2118      	movs	r1, #24
 801764e:	4620      	mov	r0, r4
 8017650:	f00b fa56 	bl	8022b00 <_ZdlPvj>
 8017654:	4620      	mov	r0, r4
 8017656:	bd10      	pop	{r4, pc}
 8017658:	08024fd4 	.word	0x08024fd4

0801765c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 801765c:	b510      	push	{r4, lr}
 801765e:	4604      	mov	r4, r0
 8017660:	4b0a      	ldr	r3, [pc, #40]	; (801768c <_ZN12FrontendHeapD1Ev+0x30>)
 8017662:	6003      	str	r3, [r0, #0]
 8017664:	f500 5001 	add.w	r0, r0, #8256	; 0x2040
 8017668:	4b09      	ldr	r3, [pc, #36]	; (8017690 <_ZN12FrontendHeapD1Ev+0x34>)
 801766a:	6003      	str	r3, [r0, #0]
 801766c:	f004 fa66 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017670:	4620      	mov	r0, r4
 8017672:	4b08      	ldr	r3, [pc, #32]	; (8017694 <_ZN12FrontendHeapD1Ev+0x38>)
 8017674:	f840 3f2c 	str.w	r3, [r0, #44]!
 8017678:	f004 fa60 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801767c:	4620      	mov	r0, r4
 801767e:	4b06      	ldr	r3, [pc, #24]	; (8017698 <_ZN12FrontendHeapD1Ev+0x3c>)
 8017680:	f840 3f14 	str.w	r3, [r0, #20]!
 8017684:	f004 fa5a 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017688:	4620      	mov	r0, r4
 801768a:	bd10      	pop	{r4, pc}
 801768c:	08025070 	.word	0x08025070
 8017690:	0802503c 	.word	0x0802503c
 8017694:	08025008 	.word	0x08025008
 8017698:	08024fd4 	.word	0x08024fd4

0801769c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801769c:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 801769e:	4c0b      	ldr	r4, [pc, #44]	; (80176cc <__tcf_0+0x30>)
 80176a0:	4b0b      	ldr	r3, [pc, #44]	; (80176d0 <__tcf_0+0x34>)
 80176a2:	6023      	str	r3, [r4, #0]
 80176a4:	f504 5001 	add.w	r0, r4, #8256	; 0x2040
 80176a8:	4b0a      	ldr	r3, [pc, #40]	; (80176d4 <__tcf_0+0x38>)
 80176aa:	6003      	str	r3, [r0, #0]
 80176ac:	f004 fa46 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80176b0:	4620      	mov	r0, r4
 80176b2:	4b09      	ldr	r3, [pc, #36]	; (80176d8 <__tcf_0+0x3c>)
 80176b4:	f840 3f2c 	str.w	r3, [r0, #44]!
 80176b8:	f004 fa40 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80176bc:	4620      	mov	r0, r4
 80176be:	4b07      	ldr	r3, [pc, #28]	; (80176dc <__tcf_0+0x40>)
 80176c0:	f840 3f14 	str.w	r3, [r0, #20]!
 80176c4:	f004 fa3a 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
        static FrontendHeap instance;
 80176c8:	bd10      	pop	{r4, pc}
 80176ca:	bf00      	nop
 80176cc:	20008380 	.word	0x20008380
 80176d0:	08025070 	.word	0x08025070
 80176d4:	0802503c 	.word	0x0802503c
 80176d8:	08025008 	.word	0x08025008
 80176dc:	08024fd4 	.word	0x08024fd4

080176e0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80176e0:	b510      	push	{r4, lr}
 80176e2:	4604      	mov	r4, r0
 80176e4:	4b0d      	ldr	r3, [pc, #52]	; (801771c <_ZN12FrontendHeapD0Ev+0x3c>)
 80176e6:	6003      	str	r3, [r0, #0]
 80176e8:	f500 5001 	add.w	r0, r0, #8256	; 0x2040
 80176ec:	4b0c      	ldr	r3, [pc, #48]	; (8017720 <_ZN12FrontendHeapD0Ev+0x40>)
 80176ee:	6003      	str	r3, [r0, #0]
 80176f0:	f004 fa24 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80176f4:	4620      	mov	r0, r4
 80176f6:	4b0b      	ldr	r3, [pc, #44]	; (8017724 <_ZN12FrontendHeapD0Ev+0x44>)
 80176f8:	f840 3f2c 	str.w	r3, [r0, #44]!
 80176fc:	f004 fa1e 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017700:	4620      	mov	r0, r4
 8017702:	4b09      	ldr	r3, [pc, #36]	; (8017728 <_ZN12FrontendHeapD0Ev+0x48>)
 8017704:	f840 3f14 	str.w	r3, [r0, #20]!
 8017708:	f004 fa18 	bl	801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801770c:	f242 11a8 	movw	r1, #8616	; 0x21a8
 8017710:	4620      	mov	r0, r4
 8017712:	f00b f9f5 	bl	8022b00 <_ZdlPvj>
 8017716:	4620      	mov	r0, r4
 8017718:	bd10      	pop	{r4, pc}
 801771a:	bf00      	nop
 801771c:	08025070 	.word	0x08025070
 8017720:	0802503c 	.word	0x0802503c
 8017724:	08025008 	.word	0x08025008
 8017728:	08024fd4 	.word	0x08024fd4

0801772c <LCD_GetXSize>:
extern "C" {

uint32_t LCD_GetXSize(void)
{
  return 480;
}
 801772c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8017730:	4770      	bx	lr

08017732 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
  return 272;
}
 8017732:	f44f 7088 	mov.w	r0, #272	; 0x110
 8017736:	4770      	bx	lr

08017738 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 8017738:	b508      	push	{r3, lr}
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 801773a:	f000 fa3f 	bl	8017bbc <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 801773e:	f000 fa6f 	bl	8017c20 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 8017742:	f000 f9db 	bl	8017afc <_Z11MX_LCD_Initv>
    GPIO::init();
 8017746:	f000 f967 	bl	8017a18 <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 801774a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 801774e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8017752:	601a      	str	r2, [r3, #0]
}
 8017754:	bd08      	pop	{r3, pc}
	...

08017758 <_Z17GRAPHICS_MainTaskv>:
{
   touchgfx::touchgfx_init();
}

void GRAPHICS_MainTask(void)
{
 8017758:	b508      	push	{r3, lr}
        return instance;
 801775a:	4b03      	ldr	r3, [pc, #12]	; (8017768 <_Z17GRAPHICS_MainTaskv+0x10>)
 801775c:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->taskEntry();
 801775e:	6803      	ldr	r3, [r0, #0]
 8017760:	68db      	ldr	r3, [r3, #12]
 8017762:	4798      	blx	r3
}
 8017764:	bd08      	pop	{r3, pc}
 8017766:	bf00      	nop
 8017768:	2000ba4c 	.word	0x2000ba4c

0801776c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 801776c:	b538      	push	{r3, r4, r5, lr}
    static T hal(dma, display, tc, width, height);
 801776e:	4c2c      	ldr	r4, [pc, #176]	; (8017820 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb4>)
 8017770:	6824      	ldr	r4, [r4, #0]
 8017772:	f014 0f01 	tst.w	r4, #1
 8017776:	d001      	beq.n	801777c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x10>
    return hal;
}
 8017778:	482a      	ldr	r0, [pc, #168]	; (8017824 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb8>)
 801777a:	bd38      	pop	{r3, r4, r5, pc}
    static T hal(dma, display, tc, width, height);
 801777c:	b29b      	uxth	r3, r3
 801777e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
        displayOrientationChangeRequested(false)
 8017782:	4c28      	ldr	r4, [pc, #160]	; (8017824 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb8>)
 8017784:	6060      	str	r0, [r4, #4]
 8017786:	60a1      	str	r1, [r4, #8]
 8017788:	60e2      	str	r2, [r4, #12]
 801778a:	2200      	movs	r2, #0
 801778c:	6122      	str	r2, [r4, #16]
 801778e:	6162      	str	r2, [r4, #20]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8017790:	8322      	strh	r2, [r4, #24]
 8017792:	8362      	strh	r2, [r4, #26]
 8017794:	83a2      	strh	r2, [r4, #28]
 8017796:	83e2      	strh	r2, [r4, #30]
 8017798:	8422      	strh	r2, [r4, #32]
 801779a:	8462      	strh	r2, [r4, #34]	; 0x22
 801779c:	84a2      	strh	r2, [r4, #36]	; 0x24
 801779e:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80177a2:	62a2      	str	r2, [r4, #40]	; 0x28
 80177a4:	85a2      	strh	r2, [r4, #44]	; 0x2c
 80177a6:	6362      	str	r2, [r4, #52]	; 0x34
 80177a8:	63a2      	str	r2, [r4, #56]	; 0x38
 80177aa:	63e2      	str	r2, [r4, #60]	; 0x3c
 80177ac:	6422      	str	r2, [r4, #64]	; 0x40
 80177ae:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80177b2:	2101      	movs	r1, #1
 80177b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80177b8:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 80177bc:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 80177c0:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 80177c4:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
 80177c8:	f884 1057 	strb.w	r1, [r4, #87]	; 0x57
 80177cc:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80177d0:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80177d4:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 80177d8:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
 80177dc:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
 80177e0:	6622      	str	r2, [r4, #96]	; 0x60
 80177e2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
        instance = this;
 80177e6:	4910      	ldr	r1, [pc, #64]	; (8017828 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xbc>)
 80177e8:	600c      	str	r4, [r1, #0]
        DISPLAY_WIDTH = width;
 80177ea:	4910      	ldr	r1, [pc, #64]	; (801782c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xc0>)
 80177ec:	800b      	strh	r3, [r1, #0]
        DISPLAY_HEIGHT = height;
 80177ee:	4910      	ldr	r1, [pc, #64]	; (8017830 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xc4>)
 80177f0:	800d      	strh	r5, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 80177f2:	4910      	ldr	r1, [pc, #64]	; (8017834 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xc8>)
 80177f4:	700a      	strb	r2, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80177f6:	4a10      	ldr	r2, [pc, #64]	; (8017838 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xcc>)
 80177f8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80177fa:	4a10      	ldr	r2, [pc, #64]	; (801783c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xd0>)
 80177fc:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80177fe:	42ab      	cmp	r3, r5
 8017800:	d20c      	bcs.n	801781c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb0>
 8017802:	2201      	movs	r2, #1
 8017804:	4b07      	ldr	r3, [pc, #28]	; (8017824 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb8>)
 8017806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 801780a:	4a0d      	ldr	r2, [pc, #52]	; (8017840 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xd4>)
 801780c:	601a      	str	r2, [r3, #0]
 801780e:	4b04      	ldr	r3, [pc, #16]	; (8017820 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb4>)
 8017810:	2201      	movs	r2, #1
 8017812:	601a      	str	r2, [r3, #0]
 8017814:	480b      	ldr	r0, [pc, #44]	; (8017844 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xd8>)
 8017816:	f00b f9ad 	bl	8022b74 <atexit>
 801781a:	e7ad      	b.n	8017778 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xc>
 801781c:	2200      	movs	r2, #0
 801781e:	e7f1      	b.n	8017804 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x98>
 8017820:	20008310 	.word	0x20008310
 8017824:	20008314 	.word	0x20008314
 8017828:	2000ba4c 	.word	0x2000ba4c
 801782c:	2000ba40 	.word	0x2000ba40
 8017830:	2000ba42 	.word	0x2000ba42
 8017834:	2000ba44 	.word	0x2000ba44
 8017838:	2000ba46 	.word	0x2000ba46
 801783c:	2000ba48 	.word	0x2000ba48
 8017840:	08025154 	.word	0x08025154
 8017844:	0801755d 	.word	0x0801755d

08017848 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8017848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801784c:	b082      	sub	sp, #8
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 801784e:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8017852:	9400      	str	r4, [sp, #0]
 8017854:	f7ff ff8a 	bl	801776c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 8017858:	4605      	mov	r5, r0
    hal.initialize();
 801785a:	f004 fb41 	bl	801bee0 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 801785e:	f003 ffe7 	bl	801b830 <_ZN14BitmapDatabase11getInstanceEv>
 8017862:	4604      	mov	r4, r0
 8017864:	f003 ffe8 	bl	801b838 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8017868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801786a:	9300      	str	r3, [sp, #0]
 801786c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801786e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017870:	4601      	mov	r1, r0
 8017872:	4620      	mov	r0, r4
 8017874:	f009 f800 	bl	8020878 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
        texts = t;
 8017878:	4b25      	ldr	r3, [pc, #148]	; (8017910 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xc8>)
 801787a:	4a26      	ldr	r2, [pc, #152]	; (8017914 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xcc>)
 801787c:	601a      	str	r2, [r3, #0]
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 801787e:	2000      	movs	r0, #0
 8017880:	f003 ffec 	bl	801b85c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8017884:	4824      	ldr	r0, [pc, #144]	; (8017918 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xd0>)
 8017886:	f008 ff61 	bl	802074c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 801788a:	4b24      	ldr	r3, [pc, #144]	; (801791c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xd4>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	f013 0f01 	tst.w	r3, #1
 8017892:	d00a      	beq.n	80178aa <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x62>

    FrontendHeap& heap = FrontendHeap::getInstance();
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8017894:	682b      	ldr	r3, [r5, #0]
 8017896:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8017898:	f007 f894 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801789c:	4601      	mov	r1, r0
 801789e:	4628      	mov	r0, r5
 80178a0:	47a0      	blx	r4

    return hal;
}
 80178a2:	4628      	mov	r0, r5
 80178a4:	b002      	add	sp, #8
 80178a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80178aa:	4c1d      	ldr	r4, [pc, #116]	; (8017920 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xd8>)
 80178ac:	f104 0014 	add.w	r0, r4, #20
 80178b0:	6060      	str	r0, [r4, #4]
 80178b2:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80178b6:	f8c4 8008 	str.w	r8, [r4, #8]
 80178ba:	f504 5701 	add.w	r7, r4, #8256	; 0x2040
 80178be:	60e7      	str	r7, [r4, #12]
 80178c0:	f500 5601 	add.w	r6, r0, #8256	; 0x2040
 80178c4:	6126      	str	r6, [r4, #16]
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80178c6:	4b17      	ldr	r3, [pc, #92]	; (8017924 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xdc>)
 80178c8:	6023      	str	r3, [r4, #0]
    Partition() : AbstractPartition()
 80178ca:	f004 f939 	bl	801bb40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80178ce:	4b16      	ldr	r3, [pc, #88]	; (8017928 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xe0>)
 80178d0:	6163      	str	r3, [r4, #20]
 80178d2:	4640      	mov	r0, r8
 80178d4:	f004 f934 	bl	801bb40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80178d8:	4b14      	ldr	r3, [pc, #80]	; (801792c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xe4>)
 80178da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80178dc:	4638      	mov	r0, r7
 80178de:	f004 f92f 	bl	801bb40 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80178e2:	4b13      	ldr	r3, [pc, #76]	; (8017930 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xe8>)
 80178e4:	603b      	str	r3, [r7, #0]
 80178e6:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 80178ea:	4622      	mov	r2, r4
 80178ec:	4639      	mov	r1, r7
 80178ee:	4630      	mov	r0, r6
 80178f0:	f004 f818 	bl	801b924 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80178f4:	4638      	mov	r0, r7
 80178f6:	f004 f81f 	bl	801b938 <_ZN5ModelC1Ev>
        app.gotoScreen3ScreenNoTransition();
 80178fa:	4630      	mov	r0, r6
 80178fc:	f003 fb8c 	bl	801b018 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
        static FrontendHeap instance;
 8017900:	4b06      	ldr	r3, [pc, #24]	; (801791c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xd4>)
 8017902:	2201      	movs	r2, #1
 8017904:	601a      	str	r2, [r3, #0]
 8017906:	480b      	ldr	r0, [pc, #44]	; (8017934 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xec>)
 8017908:	f00b f934 	bl	8022b74 <atexit>
 801790c:	e7c2      	b.n	8017894 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x4c>
 801790e:	bf00      	nop
 8017910:	2000bad8 	.word	0x2000bad8
 8017914:	2000a528 	.word	0x2000a528
 8017918:	20000054 	.word	0x20000054
 801791c:	2000837c 	.word	0x2000837c
 8017920:	20008380 	.word	0x20008380
 8017924:	08025070 	.word	0x08025070
 8017928:	08024fd4 	.word	0x08024fd4
 801792c:	08025008 	.word	0x08025008
 8017930:	0802503c 	.word	0x0802503c
 8017934:	0801769d 	.word	0x0801769d

08017938 <_ZN8touchgfx13touchgfx_initEv>:
{
 8017938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801793a:	b085      	sub	sp, #20
                                               0, 0);
 801793c:	2500      	movs	r5, #0
 801793e:	9503      	str	r5, [sp, #12]
 8017940:	9502      	str	r5, [sp, #8]
 8017942:	9501      	str	r5, [sp, #4]
 8017944:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017948:	9300      	str	r3, [sp, #0]
 801794a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801794e:	4a10      	ldr	r2, [pc, #64]	; (8017990 <_ZN8touchgfx13touchgfx_initEv+0x58>)
 8017950:	4910      	ldr	r1, [pc, #64]	; (8017994 <_ZN8touchgfx13touchgfx_initEv+0x5c>)
 8017952:	4811      	ldr	r0, [pc, #68]	; (8017998 <_ZN8touchgfx13touchgfx_initEv+0x60>)
 8017954:	f7ff ff78 	bl	8017848 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 8017958:	4604      	mov	r4, r0
    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 801795a:	6803      	ldr	r3, [r0, #0]
 801795c:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 801795e:	2601      	movs	r6, #1
 8017960:	9600      	str	r6, [sp, #0]
 8017962:	4633      	mov	r3, r6
 8017964:	2210      	movs	r2, #16
 8017966:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801796a:	47b8      	blx	r7
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
    {
        if (sampleRateInTicks > 0)
        {
            touchSampleRate = sampleRateInTicks;
 801796c:	2302      	movs	r3, #2
 801796e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
    {
        fingerSize = size;
 8017972:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
        vSyncCompensationEnabled = enabled;
 8017976:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        lockDMAToPorch = enableLock;
 801797a:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
    mcuInstr.init();
 801797e:	4d07      	ldr	r5, [pc, #28]	; (801799c <_ZN8touchgfx13touchgfx_initEv+0x64>)
 8017980:	4628      	mov	r0, r5
 8017982:	f000 fe41 	bl	8018608 <_ZN8touchgfx22STM32F7Instrumentation4initEv>
        mcuInstrumentation = mcuInstr;
 8017986:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8017988:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
}
 801798c:	b005      	add	sp, #20
 801798e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017990:	2000afdc 	.word	0x2000afdc
 8017994:	20000058 	.word	0x20000058
 8017998:	2000a52c 	.word	0x2000a52c
 801799c:	2000afcc 	.word	0x2000afcc

080179a0 <_Z13GRAPHICS_Initv>:
{
 80179a0:	b508      	push	{r3, lr}
   touchgfx::touchgfx_init();
 80179a2:	f7ff ffc9 	bl	8017938 <_ZN8touchgfx13touchgfx_initEv>
}
 80179a6:	bd08      	pop	{r3, pc}

080179a8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80179a8:	b538      	push	{r3, r4, r5, lr}
 80179aa:	4604      	mov	r4, r0
 80179ac:	460d      	mov	r5, r1
 80179ae:	2801      	cmp	r0, #1
 80179b0:	d005      	beq.n	80179be <_Z41__static_initialization_and_destruction_0ii+0x16>
static LCD16bpp display;
 80179b2:	b91c      	cbnz	r4, 80179bc <_Z41__static_initialization_and_destruction_0ii+0x14>
 80179b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179b8:	429d      	cmp	r5, r3
 80179ba:	d011      	beq.n	80179e0 <_Z41__static_initialization_and_destruction_0ii+0x38>
}
 80179bc:	bd38      	pop	{r3, r4, r5, pc}
 80179be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179c2:	4299      	cmp	r1, r3
 80179c4:	d1f5      	bne.n	80179b2 <_Z41__static_initialization_and_destruction_0ii+0xa>
STM32F7DMA dma;
 80179c6:	4808      	ldr	r0, [pc, #32]	; (80179e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80179c8:	f000 fc5c 	bl	8018284 <_ZN10STM32F7DMAC1Ev>
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 80179cc:	4b07      	ldr	r3, [pc, #28]	; (80179ec <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80179ce:	4a08      	ldr	r2, [pc, #32]	; (80179f0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80179d0:	601a      	str	r2, [r3, #0]
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
        cc_consumed(0),
        cc_in(0)
 80179d2:	4b08      	ldr	r3, [pc, #32]	; (80179f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80179d4:	2200      	movs	r2, #0
 80179d6:	605a      	str	r2, [r3, #4]
 80179d8:	609a      	str	r2, [r3, #8]
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 80179da:	4a07      	ldr	r2, [pc, #28]	; (80179f8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80179dc:	601a      	str	r2, [r3, #0]
 80179de:	e7e8      	b.n	80179b2 <_Z41__static_initialization_and_destruction_0ii+0xa>
 80179e0:	4801      	ldr	r0, [pc, #4]	; (80179e8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80179e2:	f000 faa5 	bl	8017f30 <_ZN10STM32F7DMAD1Ev>
}
 80179e6:	e7e9      	b.n	80179bc <_Z41__static_initialization_and_destruction_0ii+0x14>
 80179e8:	2000a52c 	.word	0x2000a52c
 80179ec:	2000afdc 	.word	0x2000afdc
 80179f0:	080252c8 	.word	0x080252c8
 80179f4:	2000afcc 	.word	0x2000afcc
 80179f8:	080252a0 	.word	0x080252a0

080179fc <_GLOBAL__sub_I_LCD_GetXSize>:
 80179fc:	b508      	push	{r3, lr}
 80179fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017a02:	2001      	movs	r0, #1
 8017a04:	f7ff ffd0 	bl	80179a8 <_Z41__static_initialization_and_destruction_0ii>
 8017a08:	bd08      	pop	{r3, pc}

08017a0a <_GLOBAL__sub_D_LCD_GetXSize>:
 8017a0a:	b508      	push	{r3, lr}
 8017a0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017a10:	2000      	movs	r0, #0
 8017a12:	f7ff ffc9 	bl	80179a8 <_Z41__static_initialization_and_destruction_0ii>
 8017a16:	bd08      	pop	{r3, pc}

08017a18 <_ZN8touchgfx4GPIO4initEv>:

using namespace touchgfx;

void GPIO::init()
{
}
 8017a18:	4770      	bx	lr

08017a1a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO_ID id)
{
}
 8017a1a:	4770      	bx	lr

08017a1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO_ID id)
{
}
 8017a1c:	4770      	bx	lr

08017a1e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO_ID id)
{
}
 8017a1e:	4770      	bx	lr

08017a20 <_ZL15HAL_FMC_MspInitv>:
  }
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8017a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a22:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8017a24:	2300      	movs	r3, #0
 8017a26:	9301      	str	r3, [sp, #4]
 8017a28:	9302      	str	r3, [sp, #8]
 8017a2a:	9303      	str	r3, [sp, #12]
 8017a2c:	9304      	str	r3, [sp, #16]
 8017a2e:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8017a30:	4b2a      	ldr	r3, [pc, #168]	; (8017adc <_ZL15HAL_FMC_MspInitv+0xbc>)
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	b10b      	cbz	r3, 8017a3a <_ZL15HAL_FMC_MspInitv+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8017a36:	b007      	add	sp, #28
 8017a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8017a3a:	4b28      	ldr	r3, [pc, #160]	; (8017adc <_ZL15HAL_FMC_MspInitv+0xbc>)
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8017a40:	4b27      	ldr	r3, [pc, #156]	; (8017ae0 <_ZL15HAL_FMC_MspInitv+0xc0>)
 8017a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017a44:	f042 0201 	orr.w	r2, r2, #1
 8017a48:	639a      	str	r2, [r3, #56]	; 0x38
 8017a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a4c:	f003 0301 	and.w	r3, r3, #1
 8017a50:	9300      	str	r3, [sp, #0]
 8017a52:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8017a54:	f64f 7383 	movw	r3, #65411	; 0xff83
 8017a58:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a5a:	2602      	movs	r6, #2
 8017a5c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a5e:	2503      	movs	r5, #3
 8017a60:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017a62:	240c      	movs	r4, #12
 8017a64:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8017a66:	a901      	add	r1, sp, #4
 8017a68:	481e      	ldr	r0, [pc, #120]	; (8017ae4 <_ZL15HAL_FMC_MspInitv+0xc4>)
 8017a6a:	f7ea fe71 	bl	8002750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8017a6e:	f248 1333 	movw	r3, #33075	; 0x8133
 8017a72:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a74:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a76:	2700      	movs	r7, #0
 8017a78:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a7a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017a7c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017a7e:	a901      	add	r1, sp, #4
 8017a80:	4819      	ldr	r0, [pc, #100]	; (8017ae8 <_ZL15HAL_FMC_MspInitv+0xc8>)
 8017a82:	f7ea fe65 	bl	8002750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8017a86:	f24c 7303 	movw	r3, #50947	; 0xc703
 8017a8a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a8c:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a8e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a90:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017a92:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017a94:	a901      	add	r1, sp, #4
 8017a96:	4815      	ldr	r0, [pc, #84]	; (8017aec <_ZL15HAL_FMC_MspInitv+0xcc>)
 8017a98:	f7ea fe5a 	bl	8002750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8017a9c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8017aa0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017aa2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017aa4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017aa6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017aa8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017aaa:	a901      	add	r1, sp, #4
 8017aac:	4810      	ldr	r0, [pc, #64]	; (8017af0 <_ZL15HAL_FMC_MspInitv+0xd0>)
 8017aae:	f7ea fe4f 	bl	8002750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8017ab2:	2328      	movs	r3, #40	; 0x28
 8017ab4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017ab6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ab8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017aba:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017abc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8017abe:	a901      	add	r1, sp, #4
 8017ac0:	480c      	ldr	r0, [pc, #48]	; (8017af4 <_ZL15HAL_FMC_MspInitv+0xd4>)
 8017ac2:	f7ea fe45 	bl	8002750 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8017ac6:	2308      	movs	r3, #8
 8017ac8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017aca:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017acc:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017ace:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017ad0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8017ad2:	a901      	add	r1, sp, #4
 8017ad4:	4808      	ldr	r0, [pc, #32]	; (8017af8 <_ZL15HAL_FMC_MspInitv+0xd8>)
 8017ad6:	f7ea fe3b 	bl	8002750 <HAL_GPIO_Init>
 8017ada:	e7ac      	b.n	8017a36 <_ZL15HAL_FMC_MspInitv+0x16>
 8017adc:	2000afe0 	.word	0x2000afe0
 8017ae0:	40023800 	.word	0x40023800
 8017ae4:	40021000 	.word	0x40021000
 8017ae8:	40021800 	.word	0x40021800
 8017aec:	40020c00 	.word	0x40020c00
 8017af0:	40021400 	.word	0x40021400
 8017af4:	40021c00 	.word	0x40021c00
 8017af8:	40020800 	.word	0x40020800

08017afc <_Z11MX_LCD_Initv>:
{ 
 8017afc:	b510      	push	{r4, lr}
 8017afe:	b08e      	sub	sp, #56	; 0x38
  HAL_LTDC_DeInit(&hltdc);
 8017b00:	4c2c      	ldr	r4, [pc, #176]	; (8017bb4 <_Z11MX_LCD_Initv+0xb8>)
 8017b02:	4620      	mov	r0, r4
 8017b04:	f7ed fbe4 	bl	80052d0 <HAL_LTDC_DeInit>
  hltdc.Instance = LTDC;
 8017b08:	4b2b      	ldr	r3, [pc, #172]	; (8017bb8 <_Z11MX_LCD_Initv+0xbc>)
 8017b0a:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	6063      	str	r3, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8017b10:	60a3      	str	r3, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8017b12:	60e3      	str	r3, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8017b14:	6123      	str	r3, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8017b16:	2228      	movs	r2, #40	; 0x28
 8017b18:	6162      	str	r2, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8017b1a:	2209      	movs	r2, #9
 8017b1c:	61a2      	str	r2, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8017b1e:	2235      	movs	r2, #53	; 0x35
 8017b20:	61e2      	str	r2, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8017b22:	220b      	movs	r2, #11
 8017b24:	6222      	str	r2, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8017b26:	f240 2215 	movw	r2, #533	; 0x215
 8017b2a:	6262      	str	r2, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8017b2c:	f240 121b 	movw	r2, #283	; 0x11b
 8017b30:	62a2      	str	r2, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8017b32:	f240 2235 	movw	r2, #565	; 0x235
 8017b36:	62e2      	str	r2, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8017b38:	f240 121d 	movw	r2, #285	; 0x11d
 8017b3c:	6322      	str	r2, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8017b3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8017b42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8017b46:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	f7ed faf0 	bl	8005130 <HAL_LTDC_Init>
 8017b50:	bb50      	cbnz	r0, 8017ba8 <_Z11MX_LCD_Initv+0xac>
  pLayerCfg.WindowX0 = 0;
 8017b52:	2200      	movs	r2, #0
 8017b54:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8017b56:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8017b5a:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8017b5c:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8017b5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017b62:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8017b64:	2002      	movs	r0, #2
 8017b66:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8017b68:	20ff      	movs	r0, #255	; 0xff
 8017b6a:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8017b6c:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8017b6e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8017b72:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8017b74:	2007      	movs	r0, #7
 8017b76:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8017b78:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8017b7c:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8017b7e:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8017b80:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8017b82:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8017b86:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8017b8a:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8017b8e:	a901      	add	r1, sp, #4
 8017b90:	4808      	ldr	r0, [pc, #32]	; (8017bb4 <_Z11MX_LCD_Initv+0xb8>)
 8017b92:	f7ed fc6d 	bl	8005470 <HAL_LTDC_ConfigLayer>
 8017b96:	b950      	cbnz	r0, 8017bae <_Z11MX_LCD_Initv+0xb2>
 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 8017b98:	2200      	movs	r2, #0
 8017b9a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8017b9e:	4805      	ldr	r0, [pc, #20]	; (8017bb4 <_Z11MX_LCD_Initv+0xb8>)
 8017ba0:	f7ed fca4 	bl	80054ec <HAL_LTDC_SetPitch>
}
 8017ba4:	b00e      	add	sp, #56	; 0x38
 8017ba6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8017ba8:	f001 fbd4 	bl	8019354 <Error_Handler>
 8017bac:	e7d1      	b.n	8017b52 <_Z11MX_LCD_Initv+0x56>
    Error_Handler( );
 8017bae:	f001 fbd1 	bl	8019354 <Error_Handler>
 8017bb2:	e7f1      	b.n	8017b98 <_Z11MX_LCD_Initv+0x9c>
 8017bb4:	2000b034 	.word	0x2000b034
 8017bb8:	40016800 	.word	0x40016800

08017bbc <_Z11MX_FMC_Initv>:
{  
 8017bbc:	b500      	push	{lr}
 8017bbe:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8017bc0:	4815      	ldr	r0, [pc, #84]	; (8017c18 <_Z11MX_FMC_Initv+0x5c>)
 8017bc2:	4b16      	ldr	r3, [pc, #88]	; (8017c1c <_Z11MX_FMC_Initv+0x60>)
 8017bc4:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8017bca:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8017bcc:	2104      	movs	r1, #4
 8017bce:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8017bd0:	2210      	movs	r2, #16
 8017bd2:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8017bd4:	2240      	movs	r2, #64	; 0x40
 8017bd6:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8017bd8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8017bdc:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8017bde:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8017be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017be4:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8017be6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017bea:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8017bec:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8017bee:	2302      	movs	r3, #2
 8017bf0:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8017bf2:	2207      	movs	r2, #7
 8017bf4:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8017bf6:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8017bf8:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8017bfa:	2203      	movs	r2, #3
 8017bfc:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8017bfe:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8017c00:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8017c02:	4469      	add	r1, sp
 8017c04:	f7f0 ffb6 	bl	8008b74 <HAL_SDRAM_Init>
 8017c08:	b910      	cbnz	r0, 8017c10 <_Z11MX_FMC_Initv+0x54>
}
 8017c0a:	b009      	add	sp, #36	; 0x24
 8017c0c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8017c10:	f001 fba0 	bl	8019354 <Error_Handler>
}
 8017c14:	e7f9      	b.n	8017c0a <_Z11MX_FMC_Initv+0x4e>
 8017c16:	bf00      	nop
 8017c18:	2000b0dc 	.word	0x2000b0dc
 8017c1c:	a0000140 	.word	0xa0000140

08017c20 <_Z15MX_SDRAM_InitExv>:
{
 8017c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c24:	b082      	sub	sp, #8
  __IO uint32_t tmpmrd = 0;
 8017c26:	f04f 0800 	mov.w	r8, #0
 8017c2a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8017c2e:	4c21      	ldr	r4, [pc, #132]	; (8017cb4 <_Z15MX_SDRAM_InitExv+0x94>)
 8017c30:	2601      	movs	r6, #1
 8017c32:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8017c34:	2710      	movs	r7, #16
 8017c36:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8017c38:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8017c3a:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8017c3e:	4d1e      	ldr	r5, [pc, #120]	; (8017cb8 <_Z15MX_SDRAM_InitExv+0x98>)
 8017c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c44:	4621      	mov	r1, r4
 8017c46:	4628      	mov	r0, r5
 8017c48:	f7f0 ffc8 	bl	8008bdc <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8017c4c:	4630      	mov	r0, r6
 8017c4e:	f7e8 ff7f 	bl	8000b50 <HAL_Delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8017c52:	2302      	movs	r3, #2
 8017c54:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8017c56:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8017c58:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8017c5a:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8017c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c62:	4621      	mov	r1, r4
 8017c64:	4628      	mov	r0, r5
 8017c66:	f7f0 ffb9 	bl	8008bdc <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8017c6a:	2303      	movs	r3, #3
 8017c6c:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8017c6e:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8017c70:	2308      	movs	r3, #8
 8017c72:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8017c74:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8017c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c7c:	4621      	mov	r1, r4
 8017c7e:	4628      	mov	r0, r5
 8017c80:	f7f0 ffac 	bl	8008bdc <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8017c84:	f44f 730c 	mov.w	r3, #560	; 0x230
 8017c88:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8017c8a:	2304      	movs	r3, #4
 8017c8c:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8017c8e:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8017c90:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8017c92:	9b01      	ldr	r3, [sp, #4]
 8017c94:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8017c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c9a:	4621      	mov	r1, r4
 8017c9c:	4628      	mov	r0, r5
 8017c9e:	f7f0 ff9d 	bl	8008bdc <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8017ca2:	f240 6173 	movw	r1, #1651	; 0x673
 8017ca6:	4628      	mov	r0, r5
 8017ca8:	f7f0 ffc3 	bl	8008c32 <HAL_SDRAM_ProgramRefreshRate>
}
 8017cac:	b002      	add	sp, #8
 8017cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cb2:	bf00      	nop
 8017cb4:	2000afe4 	.word	0x2000afe4
 8017cb8:	2000b0dc 	.word	0x2000b0dc

08017cbc <HAL_LTDC_MspInit>:
{
 8017cbc:	b570      	push	{r4, r5, r6, lr}
 8017cbe:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	9307      	str	r3, [sp, #28]
 8017cc4:	9308      	str	r3, [sp, #32]
 8017cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8017cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8017cca:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ltdcHandle->Instance==LTDC)
 8017ccc:	6802      	ldr	r2, [r0, #0]
 8017cce:	4b3e      	ldr	r3, [pc, #248]	; (8017dc8 <HAL_LTDC_MspInit+0x10c>)
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d001      	beq.n	8017cd8 <HAL_LTDC_MspInit+0x1c>
}
 8017cd4:	b00c      	add	sp, #48	; 0x30
 8017cd6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8017cd8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8017cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017cde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8017ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8017ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017ce6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8017cea:	9201      	str	r2, [sp, #4]
 8017cec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8017cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017cf0:	f042 0210 	orr.w	r2, r2, #16
 8017cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8017cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017cf8:	f002 0210 	and.w	r2, r2, #16
 8017cfc:	9202      	str	r2, [sp, #8]
 8017cfe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8017d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d06:	631a      	str	r2, [r3, #48]	; 0x30
 8017d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017d0a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8017d0e:	9203      	str	r2, [sp, #12]
 8017d10:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8017d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017d18:	631a      	str	r2, [r3, #48]	; 0x30
 8017d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017d1c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8017d20:	9204      	str	r2, [sp, #16]
 8017d22:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8017d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017d2e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8017d32:	9205      	str	r2, [sp, #20]
 8017d34:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8017d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8017d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d44:	9306      	str	r3, [sp, #24]
 8017d46:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8017d48:	2310      	movs	r3, #16
 8017d4a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d4c:	2502      	movs	r5, #2
 8017d4e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017d50:	260e      	movs	r6, #14
 8017d52:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8017d54:	a907      	add	r1, sp, #28
 8017d56:	481d      	ldr	r0, [pc, #116]	; (8017dcc <HAL_LTDC_MspInit+0x110>)
 8017d58:	f7ea fcfa 	bl	8002750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8017d5c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8017d60:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d62:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d64:	2400      	movs	r4, #0
 8017d66:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d68:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017d6a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8017d6c:	a907      	add	r1, sp, #28
 8017d6e:	4818      	ldr	r0, [pc, #96]	; (8017dd0 <HAL_LTDC_MspInit+0x114>)
 8017d70:	f7ea fcee 	bl	8002750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8017d74:	23f7      	movs	r3, #247	; 0xf7
 8017d76:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d78:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d7a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d7c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017d7e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8017d80:	a907      	add	r1, sp, #28
 8017d82:	4814      	ldr	r0, [pc, #80]	; (8017dd4 <HAL_LTDC_MspInit+0x118>)
 8017d84:	f7ea fce4 	bl	8002750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8017d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017d8c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d8e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d90:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d92:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8017d94:	2309      	movs	r3, #9
 8017d96:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8017d98:	a907      	add	r1, sp, #28
 8017d9a:	480f      	ldr	r0, [pc, #60]	; (8017dd8 <HAL_LTDC_MspInit+0x11c>)
 8017d9c:	f7ea fcd8 	bl	8002750 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8017da0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8017da4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017da6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017da8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017daa:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017dac:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8017dae:	a907      	add	r1, sp, #28
 8017db0:	480a      	ldr	r0, [pc, #40]	; (8017ddc <HAL_LTDC_MspInit+0x120>)
 8017db2:	f7ea fccd 	bl	8002750 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8017db6:	4622      	mov	r2, r4
 8017db8:	2105      	movs	r1, #5
 8017dba:	2058      	movs	r0, #88	; 0x58
 8017dbc:	f7e9 fa36 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8017dc0:	2058      	movs	r0, #88	; 0x58
 8017dc2:	f7e9 fa4f 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 8017dc6:	e785      	b.n	8017cd4 <HAL_LTDC_MspInit+0x18>
 8017dc8:	40016800 	.word	0x40016800
 8017dcc:	40021000 	.word	0x40021000
 8017dd0:	40022400 	.word	0x40022400
 8017dd4:	40022800 	.word	0x40022800
 8017dd8:	40021800 	.word	0x40021800
 8017ddc:	40022000 	.word	0x40022000

08017de0 <HAL_LTDC_MspDeInit>:
{
 8017de0:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 8017de2:	6802      	ldr	r2, [r0, #0]
 8017de4:	4b11      	ldr	r3, [pc, #68]	; (8017e2c <HAL_LTDC_MspDeInit+0x4c>)
 8017de6:	429a      	cmp	r2, r3
 8017de8:	d000      	beq.n	8017dec <HAL_LTDC_MspDeInit+0xc>
}
 8017dea:	bd08      	pop	{r3, pc}
    __HAL_RCC_LTDC_CLK_DISABLE();
 8017dec:	4a10      	ldr	r2, [pc, #64]	; (8017e30 <HAL_LTDC_MspDeInit+0x50>)
 8017dee:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8017df0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017df4:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8017df6:	2110      	movs	r1, #16
 8017df8:	480e      	ldr	r0, [pc, #56]	; (8017e34 <HAL_LTDC_MspDeInit+0x54>)
 8017dfa:	f7ea fe53 	bl	8002aa4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8017dfe:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8017e02:	480d      	ldr	r0, [pc, #52]	; (8017e38 <HAL_LTDC_MspDeInit+0x58>)
 8017e04:	f7ea fe4e 	bl	8002aa4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8017e08:	21f7      	movs	r1, #247	; 0xf7
 8017e0a:	480c      	ldr	r0, [pc, #48]	; (8017e3c <HAL_LTDC_MspDeInit+0x5c>)
 8017e0c:	f7ea fe4a 	bl	8002aa4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8017e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8017e14:	480a      	ldr	r0, [pc, #40]	; (8017e40 <HAL_LTDC_MspDeInit+0x60>)
 8017e16:	f7ea fe45 	bl	8002aa4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8017e1a:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8017e1e:	4809      	ldr	r0, [pc, #36]	; (8017e44 <HAL_LTDC_MspDeInit+0x64>)
 8017e20:	f7ea fe40 	bl	8002aa4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8017e24:	2058      	movs	r0, #88	; 0x58
 8017e26:	f7e9 fa2b 	bl	8001280 <HAL_NVIC_DisableIRQ>
}
 8017e2a:	e7de      	b.n	8017dea <HAL_LTDC_MspDeInit+0xa>
 8017e2c:	40016800 	.word	0x40016800
 8017e30:	40023800 	.word	0x40023800
 8017e34:	40021000 	.word	0x40021000
 8017e38:	40022400 	.word	0x40022400
 8017e3c:	40022800 	.word	0x40022800
 8017e40:	40021800 	.word	0x40021800
 8017e44:	40022000 	.word	0x40022000

08017e48 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8017e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8017e4a:	f7ff fde9 	bl	8017a20 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8017e4e:	bd08      	pop	{r3, pc}

08017e50 <HAL_DMA2D_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
  if(dma2dHandle->Instance==DMA2D)
 8017e50:	6802      	ldr	r2, [r0, #0]
 8017e52:	4b0e      	ldr	r3, [pc, #56]	; (8017e8c <HAL_DMA2D_MspInit+0x3c>)
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d000      	beq.n	8017e5a <HAL_DMA2D_MspInit+0xa>
 8017e58:	4770      	bx	lr
{
 8017e5a:	b500      	push	{lr}
 8017e5c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8017e5e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8017e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017e64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8017e68:	631a      	str	r2, [r3, #48]	; 0x30
 8017e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017e70:	9301      	str	r3, [sp, #4]
 8017e72:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8017e74:	2200      	movs	r2, #0
 8017e76:	2105      	movs	r1, #5
 8017e78:	205a      	movs	r0, #90	; 0x5a
 8017e7a:	f7e9 f9d7 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8017e7e:	205a      	movs	r0, #90	; 0x5a
 8017e80:	f7e9 f9f0 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8017e84:	b003      	add	sp, #12
 8017e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e8a:	bf00      	nop
 8017e8c:	4002b000 	.word	0x4002b000

08017e90 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8017e90:	b508      	push	{r3, lr}
  if(dma2dHandle->Instance==DMA2D)
 8017e92:	6802      	ldr	r2, [r0, #0]
 8017e94:	4b06      	ldr	r3, [pc, #24]	; (8017eb0 <HAL_DMA2D_MspDeInit+0x20>)
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d000      	beq.n	8017e9c <HAL_DMA2D_MspDeInit+0xc>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 8017e9a:	bd08      	pop	{r3, pc}
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8017e9c:	4a05      	ldr	r2, [pc, #20]	; (8017eb4 <HAL_DMA2D_MspDeInit+0x24>)
 8017e9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8017ea0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8017ea4:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8017ea6:	205a      	movs	r0, #90	; 0x5a
 8017ea8:	f7e9 f9ea 	bl	8001280 <HAL_NVIC_DisableIRQ>
}
 8017eac:	e7f5      	b.n	8017e9a <HAL_DMA2D_MspDeInit+0xa>
 8017eae:	bf00      	nop
 8017eb0:	4002b000 	.word	0x4002b000
 8017eb4:	40023800 	.word	0x40023800

08017eb8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8017eb8:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 8017eba:	6803      	ldr	r3, [r0, #0]
 8017ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ebe:	4798      	blx	r3
    }
 8017ec0:	bd08      	pop	{r3, pc}

08017ec2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8017ec2:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8017ec4:	6803      	ldr	r3, [r0, #0]
 8017ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ec8:	4798      	blx	r3
    }
 8017eca:	bd08      	pop	{r3, pc}

08017ecc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8017ecc:	b430      	push	{r4, r5}
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8017ece:	6805      	ldr	r5, [r0, #0]
 8017ed0:	682c      	ldr	r4, [r5, #0]
 8017ed2:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
 8017ed6:	4321      	orrs	r1, r4
 8017ed8:	6029      	str	r1, [r5, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8017eda:	6804      	ldr	r4, [r0, #0]
 8017edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ede:	f021 0107 	bic.w	r1, r1, #7
 8017ee2:	430a      	orrs	r2, r1
 8017ee4:	6362      	str	r2, [r4, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8017ee6:	6801      	ldr	r1, [r0, #0]
 8017ee8:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8017eea:	4a03      	ldr	r2, [pc, #12]	; (8017ef8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x2c>)
 8017eec:	4002      	ands	r2, r0
 8017eee:	4313      	orrs	r3, r2
 8017ef0:	640b      	str	r3, [r1, #64]	; 0x40

    return HAL_OK;
}
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	bc30      	pop	{r4, r5}
 8017ef6:	4770      	bx	lr
 8017ef8:	ffffc000 	.word	0xffffc000

08017efc <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8017efc:	b508      	push	{r3, lr}
        return instance;
 8017efe:	4b03      	ldr	r3, [pc, #12]	; (8017f0c <DMA2D_XferCpltCallback+0x10>)
 8017f00:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8017f02:	6858      	ldr	r0, [r3, #4]
 8017f04:	6803      	ldr	r3, [r0, #0]
 8017f06:	695b      	ldr	r3, [r3, #20]
 8017f08:	4798      	blx	r3
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
}
 8017f0a:	bd08      	pop	{r3, pc}
 8017f0c:	2000ba4c 	.word	0x2000ba4c

08017f10 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
    //assert(0);
}
 8017f10:	4770      	bx	lr
	...

08017f14 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
    if (disableChromArt)
 8017f14:	4b03      	ldr	r3, [pc, #12]	; (8017f24 <_ZN10STM32F7DMA11getBlitCapsEv+0x10>)
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	b10b      	cbz	r3, 8017f1e <_ZN10STM32F7DMA11getBlitCapsEv+0xa>
    {
        return static_cast<BlitOperations>(0);
 8017f1a:	2000      	movs	r0, #0
 8017f1c:	4770      	bx	lr
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 8017f1e:	f240 10ef 	movw	r0, #495	; 0x1ef
    }
}
 8017f22:	4770      	bx	lr
 8017f24:	2000b110 	.word	0x2000b110

08017f28 <_ZN10STM32F7DMA5startEv>:
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}

void STM32F7DMA::start()
{
 8017f28:	b508      	push	{r3, lr}
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 8017f2a:	f004 faf7 	bl	801c51c <_ZN8touchgfx13DMA_Interface5startEv>
}
 8017f2e:	bd08      	pop	{r3, pc}

08017f30 <_ZN10STM32F7DMAD1Ev>:
STM32F7DMA::~STM32F7DMA()
 8017f30:	b510      	push	{r4, lr}
 8017f32:	4604      	mov	r4, r0
 8017f34:	4b07      	ldr	r3, [pc, #28]	; (8017f54 <_ZN10STM32F7DMAD1Ev+0x24>)
 8017f36:	6003      	str	r3, [r0, #0]
    HAL_DMA2D_DeInit(&hdma2d);
 8017f38:	4807      	ldr	r0, [pc, #28]	; (8017f58 <_ZN10STM32F7DMAD1Ev+0x28>)
 8017f3a:	f7e9 fbef 	bl	800171c <HAL_DMA2D_DeInit>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017f3e:	4b07      	ldr	r3, [pc, #28]	; (8017f5c <_ZN10STM32F7DMAD1Ev+0x2c>)
 8017f40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8017f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8017f48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017f4c:	f3bf 8f6f 	isb	sy
}
 8017f50:	4620      	mov	r0, r4
 8017f52:	bd10      	pop	{r4, pc}
 8017f54:	08025084 	.word	0x08025084
 8017f58:	2000aff4 	.word	0x2000aff4
 8017f5c:	e000e100 	.word	0xe000e100

08017f60 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8017f60:	b510      	push	{r4, lr}
 8017f62:	4604      	mov	r4, r0
}
 8017f64:	f7ff ffe4 	bl	8017f30 <_ZN10STM32F7DMAD1Ev>
 8017f68:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	f00a fdc7 	bl	8022b00 <_ZdlPvj>
 8017f72:	4620      	mov	r0, r4
 8017f74:	bd10      	pop	{r4, pc}
	...

08017f78 <_ZN10STM32F7DMA10initializeEv>:
{
 8017f78:	b510      	push	{r4, lr}
    hdma2d.Instance = DMA2D;
 8017f7a:	4c07      	ldr	r4, [pc, #28]	; (8017f98 <_ZN10STM32F7DMA10initializeEv+0x20>)
 8017f7c:	4b07      	ldr	r3, [pc, #28]	; (8017f9c <_ZN10STM32F7DMA10initializeEv+0x24>)
 8017f7e:	6023      	str	r3, [r4, #0]
    HAL_DMA2D_Init(&hdma2d);
 8017f80:	4620      	mov	r0, r4
 8017f82:	f7e9 fb81 	bl	8001688 <HAL_DMA2D_Init>
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8017f86:	4b06      	ldr	r3, [pc, #24]	; (8017fa0 <_ZN10STM32F7DMA10initializeEv+0x28>)
 8017f88:	6123      	str	r3, [r4, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8017f8a:	4b06      	ldr	r3, [pc, #24]	; (8017fa4 <_ZN10STM32F7DMA10initializeEv+0x2c>)
 8017f8c:	6163      	str	r3, [r4, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017f8e:	4b06      	ldr	r3, [pc, #24]	; (8017fa8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8017f90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8017f94:	609a      	str	r2, [r3, #8]
}
 8017f96:	bd10      	pop	{r4, pc}
 8017f98:	2000aff4 	.word	0x2000aff4
 8017f9c:	4002b000 	.word	0x4002b000
 8017fa0:	08017efd 	.word	0x08017efd
 8017fa4:	08017f11 	.word	0x08017f11
 8017fa8:	e000e100 	.word	0xe000e100

08017fac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8017fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fb0:	b082      	sub	sp, #8
 8017fb2:	460c      	mov	r4, r1
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8017fb4:	680d      	ldr	r5, [r1, #0]
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8017fb6:	2d40      	cmp	r5, #64	; 0x40
 8017fb8:	bf18      	it	ne
 8017fba:	2d20      	cmpne	r5, #32
 8017fbc:	bf0c      	ite	eq
 8017fbe:	2701      	moveq	r7, #1
 8017fc0:	2700      	movne	r7, #0
 8017fc2:	d001      	beq.n	8017fc8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>
 8017fc4:	2d04      	cmp	r5, #4
 8017fc6:	d01b      	beq.n	8018000 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x54>
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8017fc8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8017fcc:	bf18      	it	ne
 8017fce:	2d80      	cmpne	r5, #128	; 0x80
 8017fd0:	bf0c      	ite	eq
 8017fd2:	2501      	moveq	r5, #1
 8017fd4:	2500      	movne	r5, #0
        return instance->lcdRef;
 8017fd6:	4b60      	ldr	r3, [pc, #384]	; (8018158 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	6898      	ldr	r0, [r3, #8]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8017fdc:	6803      	ldr	r3, [r0, #0]
 8017fde:	6a1b      	ldr	r3, [r3, #32]
 8017fe0:	4798      	blx	r3
 8017fe2:	4680      	mov	r8, r0
    switch (blitOp.operation)
 8017fe4:	6823      	ldr	r3, [r4, #0]
 8017fe6:	2b40      	cmp	r3, #64	; 0x40
 8017fe8:	d06f      	beq.n	80180ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11e>
 8017fea:	d90b      	bls.n	8018004 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x58>
 8017fec:	2b80      	cmp	r3, #128	; 0x80
 8017fee:	d014      	beq.n	801801a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6e>
 8017ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017ff4:	d10a      	bne.n	801800c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x60>
        dma2dColorMode = CM_A8;
 8017ff6:	f04f 0a09 	mov.w	sl, #9
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8017ffa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8017ffe:	e010      	b.n	8018022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8018000:	2701      	movs	r7, #1
 8018002:	e7e1      	b.n	8017fc8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>
    switch (blitOp.operation)
 8018004:	2b04      	cmp	r3, #4
 8018006:	d054      	beq.n	80180b2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8018008:	2b20      	cmp	r3, #32
 801800a:	d05e      	beq.n	80180ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11e>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801800c:	f1b8 0f10 	cmp.w	r8, #16
 8018010:	d060      	beq.n	80180d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 8018012:	f04f 0a01 	mov.w	sl, #1
        dma2dTransferMode = DMA2D_M2M;
 8018016:	2100      	movs	r1, #0
 8018018:	e003      	b.n	8018022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
        dma2dColorMode = CM_A4;
 801801a:	f04f 0a0a 	mov.w	sl, #10
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801801e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma2d.Init.Mode = dma2dTransferMode;
 8018022:	4b4e      	ldr	r3, [pc, #312]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 8018024:	6059      	str	r1, [r3, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8018026:	f1b8 0f10 	cmp.w	r8, #16
 801802a:	d057      	beq.n	80180dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
 801802c:	f04f 0901 	mov.w	r9, #1
 8018030:	4e4a      	ldr	r6, [pc, #296]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 8018032:	f8c6 9008 	str.w	r9, [r6, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8018036:	8a63      	ldrh	r3, [r4, #18]
 8018038:	89a2      	ldrh	r2, [r4, #12]
 801803a:	1a9a      	subs	r2, r3, r2
 801803c:	60f2      	str	r2, [r6, #12]
                      blitOp.dstLoopStride - blitOp.nSteps);
 801803e:	89a2      	ldrh	r2, [r4, #12]
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8018040:	1a9b      	subs	r3, r3, r2
 8018042:	464a      	mov	r2, r9
 8018044:	4630      	mov	r0, r6
 8018046:	f7ff ff41 	bl	8017ecc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>
    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801804a:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801804e:	8a23      	ldrh	r3, [r4, #16]
 8018050:	89a2      	ldrh	r2, [r4, #12]
 8018052:	1a9b      	subs	r3, r3, r2
 8018054:	62b3      	str	r3, [r6, #40]	; 0x28
    if (blendingImage || blendingText)
 8018056:	432f      	orrs	r7, r5
 8018058:	d01a      	beq.n	8018090 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe4>
        if (blitOp.alpha < 255)
 801805a:	7e23      	ldrb	r3, [r4, #24]
 801805c:	2bff      	cmp	r3, #255	; 0xff
 801805e:	d040      	beq.n	80180e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8018060:	2202      	movs	r2, #2
 8018062:	6332      	str	r2, [r6, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8018064:	7e22      	ldrb	r2, [r4, #24]
 8018066:	6372      	str	r2, [r6, #52]	; 0x34
        if (blendingText)
 8018068:	b145      	cbz	r5, 801807c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
            if (bitDepth == 16)
 801806a:	f1b8 0f10 	cmp.w	r8, #16
 801806e:	d03c      	beq.n	80180ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
        return color;
 8018070:	6963      	ldr	r3, [r4, #20]
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8018072:	7e22      	ldrb	r2, [r4, #24]
 8018074:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018078:	4a38      	ldr	r2, [pc, #224]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801807a:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801807c:	8a63      	ldrh	r3, [r4, #18]
 801807e:	89a2      	ldrh	r2, [r4, #12]
 8018080:	1a9b      	subs	r3, r3, r2
 8018082:	4836      	ldr	r0, [pc, #216]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 8018084:	6183      	str	r3, [r0, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8018086:	f8c0 901c 	str.w	r9, [r0, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801808a:	2100      	movs	r1, #0
 801808c:	f7e9 fdc6 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8018090:	2101      	movs	r1, #1
 8018092:	4832      	ldr	r0, [pc, #200]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 8018094:	f7e9 fdc2 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
    if (blendingImage || blendingText)
 8018098:	2f00      	cmp	r7, #0
 801809a:	d151      	bne.n	8018140 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>
                           (unsigned int)blitOp.pSrc,
 801809c:	6861      	ldr	r1, [r4, #4]
                           (unsigned int)blitOp.pDst,
 801809e:	68a2      	ldr	r2, [r4, #8]
                           blitOp.nSteps, blitOp.nLoops);
 80180a0:	89a3      	ldrh	r3, [r4, #12]
 80180a2:	89e0      	ldrh	r0, [r4, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 80180a4:	9000      	str	r0, [sp, #0]
 80180a6:	482d      	ldr	r0, [pc, #180]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 80180a8:	f7e9 fba8 	bl	80017fc <HAL_DMA2D_Start_IT>
}
 80180ac:	b002      	add	sp, #8
 80180ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80180b2:	2810      	cmp	r0, #16
 80180b4:	d004      	beq.n	80180c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x114>
 80180b6:	f04f 0a01 	mov.w	sl, #1
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80180ba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80180be:	e7b0      	b.n	8018022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80180c0:	f04f 0a02 	mov.w	sl, #2
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80180c4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80180c8:	e7ab      	b.n	8018022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
        dma2dColorMode = CM_ARGB8888;
 80180ca:	f04f 0a00 	mov.w	sl, #0
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80180ce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        break;
 80180d2:	e7a6      	b.n	8018022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80180d4:	f04f 0a02 	mov.w	sl, #2
        dma2dTransferMode = DMA2D_M2M;
 80180d8:	2100      	movs	r1, #0
 80180da:	e7a2      	b.n	8018022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80180dc:	f04f 0902 	mov.w	r9, #2
 80180e0:	e7a6      	b.n	8018030 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80180e2:	4b1e      	ldr	r3, [pc, #120]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 80180e4:	2200      	movs	r2, #0
 80180e6:	631a      	str	r2, [r3, #48]	; 0x30
 80180e8:	e7be      	b.n	8018068 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
        return (uint16_t)color;
 80180ea:	6963      	ldr	r3, [r4, #20]
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80180ec:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 80180f0:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80180f4:	481a      	ldr	r0, [pc, #104]	; (8018160 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>)
 80180f6:	fb80 5201 	smull	r5, r2, r0, r1
 80180fa:	1855      	adds	r5, r2, r1
 80180fc:	17ca      	asrs	r2, r1, #31
 80180fe:	ebc2 1225 	rsb	r2, r2, r5, asr #4
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8018102:	f3c3 1145 	ubfx	r1, r3, #5, #6
 8018106:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 801810a:	4d16      	ldr	r5, [pc, #88]	; (8018164 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
 801810c:	fb85 6501 	smull	r6, r5, r5, r1
 8018110:	440d      	add	r5, r1
 8018112:	17c9      	asrs	r1, r1, #31
 8018114:	ebc1 1165 	rsb	r1, r1, r5, asr #5
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8018118:	f003 031f 	and.w	r3, r3, #31
 801811c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8018120:	fb80 5003 	smull	r5, r0, r0, r3
 8018124:	4418      	add	r0, r3
 8018126:	17db      	asrs	r3, r3, #31
 8018128:	ebc3 1320 	rsb	r3, r3, r0, asr #4
                uint32_t alpha = blitOp.alpha;
 801812c:	7e20      	ldrb	r0, [r4, #24]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801812e:	0412      	lsls	r2, r2, #16
 8018130:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8018134:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8018138:	4313      	orrs	r3, r2
 801813a:	4a08      	ldr	r2, [pc, #32]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801813c:	6353      	str	r3, [r2, #52]	; 0x34
 801813e:	e79d      	b.n	801807c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
                                   (unsigned int)blitOp.pSrc,
 8018140:	6861      	ldr	r1, [r4, #4]
                                   (unsigned int)blitOp.pDst,
 8018142:	68a2      	ldr	r2, [r4, #8]
                                   blitOp.nSteps, blitOp.nLoops);
 8018144:	89a3      	ldrh	r3, [r4, #12]
 8018146:	89e0      	ldrh	r0, [r4, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8018148:	9001      	str	r0, [sp, #4]
 801814a:	9300      	str	r3, [sp, #0]
 801814c:	4613      	mov	r3, r2
 801814e:	4803      	ldr	r0, [pc, #12]	; (801815c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 8018150:	f7e9 fb87 	bl	8001862 <HAL_DMA2D_BlendingStart_IT>
 8018154:	e7aa      	b.n	80180ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8018156:	bf00      	nop
 8018158:	2000ba4c 	.word	0x2000ba4c
 801815c:	2000aff4 	.word	0x2000aff4
 8018160:	84210843 	.word	0x84210843
 8018164:	82082083 	.word	0x82082083

08018168 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
{
 8018168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801816a:	b083      	sub	sp, #12
 801816c:	460c      	mov	r4, r1
 801816e:	4b41      	ldr	r3, [pc, #260]	; (8018274 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	6898      	ldr	r0, [r3, #8]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8018174:	6803      	ldr	r3, [r0, #0]
 8018176:	6a1b      	ldr	r3, [r3, #32]
 8018178:	4798      	blx	r3
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801817a:	2810      	cmp	r0, #16
 801817c:	d030      	beq.n	80181e0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x78>
 801817e:	2601      	movs	r6, #1
    if (bitDepth == 16)
 8018180:	2810      	cmp	r0, #16
 8018182:	d02f      	beq.n	80181e4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x7c>
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8018184:	7e23      	ldrb	r3, [r4, #24]
        return color;
 8018186:	6965      	ldr	r5, [r4, #20]
 8018188:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    switch (blitOp.operation)
 801818c:	6823      	ldr	r3, [r4, #0]
 801818e:	2b08      	cmp	r3, #8
 8018190:	d152      	bne.n	8018238 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8018192:	f44f 3700 	mov.w	r7, #131072	; 0x20000
    hdma2d.Init.Mode = dma2dTransferMode;
 8018196:	4838      	ldr	r0, [pc, #224]	; (8018278 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8018198:	6047      	str	r7, [r0, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801819a:	6086      	str	r6, [r0, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801819c:	8a63      	ldrh	r3, [r4, #18]
 801819e:	89a2      	ldrh	r2, [r4, #12]
 80181a0:	1a9a      	subs	r2, r3, r2
 80181a2:	60c2      	str	r2, [r0, #12]
                      blitOp.dstLoopStride - blitOp.nSteps);
 80181a4:	89a2      	ldrh	r2, [r4, #12]
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80181a6:	1a9b      	subs	r3, r3, r2
 80181a8:	4632      	mov	r2, r6
 80181aa:	4639      	mov	r1, r7
 80181ac:	f7ff fe8e 	bl	8017ecc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>
    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80181b0:	f5b7 3f00 	cmp.w	r7, #131072	; 0x20000
 80181b4:	d043      	beq.n	801823e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd6>
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80181b6:	4b30      	ldr	r3, [pc, #192]	; (8018278 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80181b8:	62de      	str	r6, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80181ba:	2200      	movs	r2, #0
 80181bc:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80181be:	2101      	movs	r1, #1
 80181c0:	482d      	ldr	r0, [pc, #180]	; (8018278 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80181c2:	f7e9 fd2b 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80181c6:	f5b7 3f00 	cmp.w	r7, #131072	; 0x20000
 80181ca:	d047      	beq.n	801825c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80181cc:	68a2      	ldr	r2, [r4, #8]
                           blitOp.nSteps, blitOp.nLoops);
 80181ce:	89a3      	ldrh	r3, [r4, #12]
 80181d0:	89e1      	ldrh	r1, [r4, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80181d2:	9100      	str	r1, [sp, #0]
 80181d4:	4629      	mov	r1, r5
 80181d6:	4828      	ldr	r0, [pc, #160]	; (8018278 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80181d8:	f7e9 fb10 	bl	80017fc <HAL_DMA2D_Start_IT>
}
 80181dc:	b003      	add	sp, #12
 80181de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80181e0:	2602      	movs	r6, #2
 80181e2:	e7cd      	b.n	8018180 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>
        return (uint16_t)color;
 80181e4:	6963      	ldr	r3, [r4, #20]
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80181e6:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 80181ea:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80181ee:	4923      	ldr	r1, [pc, #140]	; (801827c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80181f0:	fb81 0502 	smull	r0, r5, r1, r2
 80181f4:	4415      	add	r5, r2
 80181f6:	17d2      	asrs	r2, r2, #31
 80181f8:	ebc2 1525 	rsb	r5, r2, r5, asr #4
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80181fc:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8018200:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8018204:	481e      	ldr	r0, [pc, #120]	; (8018280 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 8018206:	fb80 7002 	smull	r7, r0, r0, r2
 801820a:	4410      	add	r0, r2
 801820c:	17d2      	asrs	r2, r2, #31
 801820e:	ebc2 1260 	rsb	r2, r2, r0, asr #5
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8018212:	f003 031f 	and.w	r3, r3, #31
 8018216:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 801821a:	fb81 0103 	smull	r0, r1, r1, r3
 801821e:	4419      	add	r1, r3
 8018220:	17db      	asrs	r3, r3, #31
 8018222:	ebc3 1321 	rsb	r3, r3, r1, asr #4
        uint32_t alpha = blitOp.alpha;
 8018226:	7e21      	ldrb	r1, [r4, #24]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8018228:	042d      	lsls	r5, r5, #16
 801822a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 801822e:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 8018232:	ea42 0503 	orr.w	r5, r2, r3
 8018236:	e7a9      	b.n	801818c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x24>
        dma2dTransferMode = DMA2D_R2M;
 8018238:	f44f 3740 	mov.w	r7, #196608	; 0x30000
 801823c:	e7ab      	b.n	8018196 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801823e:	480e      	ldr	r0, [pc, #56]	; (8018278 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8018240:	2301      	movs	r3, #1
 8018242:	6303      	str	r3, [r0, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8018244:	6345      	str	r5, [r0, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8018246:	2309      	movs	r3, #9
 8018248:	62c3      	str	r3, [r0, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801824a:	8a63      	ldrh	r3, [r4, #18]
 801824c:	89a2      	ldrh	r2, [r4, #12]
 801824e:	1a9b      	subs	r3, r3, r2
 8018250:	6183      	str	r3, [r0, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8018252:	61c6      	str	r6, [r0, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8018254:	2100      	movs	r1, #0
 8018256:	f7e9 fce1 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
 801825a:	e7b0      	b.n	80181be <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x56>
                                   (unsigned int)blitOp.pDst,
 801825c:	68a1      	ldr	r1, [r4, #8]
                                   blitOp.nSteps, blitOp.nLoops);
 801825e:	89a3      	ldrh	r3, [r4, #12]
 8018260:	89e2      	ldrh	r2, [r4, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8018262:	9201      	str	r2, [sp, #4]
 8018264:	9300      	str	r3, [sp, #0]
 8018266:	460b      	mov	r3, r1
 8018268:	460a      	mov	r2, r1
 801826a:	4803      	ldr	r0, [pc, #12]	; (8018278 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801826c:	f7e9 faf9 	bl	8001862 <HAL_DMA2D_BlendingStart_IT>
 8018270:	e7b4      	b.n	80181dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>
 8018272:	bf00      	nop
 8018274:	2000ba4c 	.word	0x2000ba4c
 8018278:	2000aff4 	.word	0x2000aff4
 801827c:	84210843 	.word	0x84210843
 8018280:	82082083 	.word	0x82082083

08018284 <_ZN10STM32F7DMAC1Ev>:
STM32F7DMA::STM32F7DMA()
 8018284:	b538      	push	{r3, r4, r5, lr}
 8018286:	4605      	mov	r5, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8018288:	300c      	adds	r0, #12
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801828a:	6068      	str	r0, [r5, #4]
 801828c:	2300      	movs	r3, #0
 801828e:	722b      	strb	r3, [r5, #8]
 8018290:	726b      	strb	r3, [r5, #9]
 8018292:	462c      	mov	r4, r5
 8018294:	4b08      	ldr	r3, [pc, #32]	; (80182b8 <_ZN10STM32F7DMAC1Ev+0x34>)
 8018296:	f844 3b20 	str.w	r3, [r4], #32
 801829a:	2260      	movs	r2, #96	; 0x60
 801829c:	4621      	mov	r1, r4
 801829e:	f004 f94f 	bl	801c540 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80182a2:	235f      	movs	r3, #95	; 0x5f
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	db04      	blt.n	80182b2 <_ZN10STM32F7DMAC1Ev+0x2e>
    colortype() : color(0) {}
 80182a8:	2200      	movs	r2, #0
 80182aa:	6162      	str	r2, [r4, #20]
 80182ac:	341c      	adds	r4, #28
 80182ae:	3b01      	subs	r3, #1
 80182b0:	e7f8      	b.n	80182a4 <_ZN10STM32F7DMAC1Ev+0x20>
{}
 80182b2:	4628      	mov	r0, r5
 80182b4:	bd38      	pop	{r3, r4, r5, pc}
 80182b6:	bf00      	nop
 80182b8:	08025084 	.word	0x08025084

080182bc <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
        requestedOrientation = orientation;
 80182bc:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
        displayOrientationChangeRequested = true;
 80182c0:	2301      	movs	r3, #1
 80182c2:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    }
 80182c6:	4770      	bx	lr

080182c8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80182c8:	b508      	push	{r3, lr}
        return dma.getBlitCaps();
 80182ca:	6840      	ldr	r0, [r0, #4]
 80182cc:	6803      	ldr	r3, [r0, #0]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	4798      	blx	r3
    };
 80182d2:	bd08      	pop	{r3, pc}

080182d4 <_ZN8touchgfx3HAL9sampleKeyERh>:
    }
 80182d4:	2000      	movs	r0, #0
 80182d6:	4770      	bx	lr

080182d8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80182d8:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 80182da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80182dc:	b10b      	cbz	r3, 80182e2 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
 80182de:	4608      	mov	r0, r1
        {
            taskDelayFunc(ms);
 80182e0:	4798      	blx	r3
        }
    }
 80182e2:	bd08      	pop	{r3, pc}

080182e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80182e4:	b410      	push	{r4}
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80182e6:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 80182ea:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80182ee:	429a      	cmp	r2, r3
 80182f0:	d012      	beq.n	8018318 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x34>
        {
            if (DISPLAY_ROTATION == rotate0)
 80182f2:	4b12      	ldr	r3, [pc, #72]	; (801833c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 80182f4:	781b      	ldrb	r3, [r3, #0]
 80182f6:	b963      	cbnz	r3, 8018312 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80182f8:	4b11      	ldr	r3, [pc, #68]	; (8018340 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 80182fa:	8818      	ldrh	r0, [r3, #0]
 80182fc:	4a11      	ldr	r2, [pc, #68]	; (8018344 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 80182fe:	8010      	strh	r0, [r2, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8018300:	4911      	ldr	r1, [pc, #68]	; (8018348 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 8018302:	880a      	ldrh	r2, [r1, #0]
 8018304:	4c11      	ldr	r4, [pc, #68]	; (801834c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 8018306:	8022      	strh	r2, [r4, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8018308:	8008      	strh	r0, [r1, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801830a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801830c:	4b0b      	ldr	r3, [pc, #44]	; (801833c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 801830e:	2201      	movs	r2, #1
 8018310:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8018312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018316:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
 8018318:	4b08      	ldr	r3, [pc, #32]	; (801833c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d0f8      	beq.n	8018312 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8018320:	4909      	ldr	r1, [pc, #36]	; (8018348 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 8018322:	880a      	ldrh	r2, [r1, #0]
 8018324:	4b07      	ldr	r3, [pc, #28]	; (8018344 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 8018326:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8018328:	4b05      	ldr	r3, [pc, #20]	; (8018340 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 801832a:	8818      	ldrh	r0, [r3, #0]
 801832c:	4c07      	ldr	r4, [pc, #28]	; (801834c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 801832e:	8020      	strh	r0, [r4, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8018330:	8008      	strh	r0, [r1, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8018332:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8018334:	4b01      	ldr	r3, [pc, #4]	; (801833c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8018336:	2200      	movs	r2, #0
 8018338:	701a      	strb	r2, [r3, #0]
    }
 801833a:	e7ea      	b.n	8018312 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
 801833c:	2000ba44 	.word	0x2000ba44
 8018340:	2000ba40 	.word	0x2000ba40
 8018344:	2000ba46 	.word	0x2000ba46
 8018348:	2000ba42 	.word	0x2000ba42
 801834c:	2000ba48 	.word	0x2000ba48

08018350 <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8018350:	4b01      	ldr	r3, [pc, #4]	; (8018358 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x8>)
 8018352:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8018354:	4770      	bx	lr
 8018356:	bf00      	nop
 8018358:	40016884 	.word	0x40016884

0801835c <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801835c:	4b02      	ldr	r3, [pc, #8]	; (8018368 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0xc>)
 801835e:	6299      	str	r1, [r3, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8018360:	3b84      	subs	r3, #132	; 0x84
 8018362:	2201      	movs	r2, #1
 8018364:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018366:	4770      	bx	lr
 8018368:	40016884 	.word	0x40016884

0801836c <_ZN10STM32F7HAL17getTFTCurrentLineEv>:
{
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801836c:	4b06      	ldr	r3, [pc, #24]	; (8018388 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x1c>)
 801836e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018370:	b280      	uxth	r0, r0
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8018372:	68db      	ldr	r3, [r3, #12]
 8018374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018378:	3301      	adds	r3, #1

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801837a:	4298      	cmp	r0, r3
 801837c:	d302      	bcc.n	8018384 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x18>
    {
        return 0;
    }
    else
    {
        return curr - backPorchY;
 801837e:	1ac0      	subs	r0, r0, r3
 8018380:	b280      	uxth	r0, r0
 8018382:	4770      	bx	lr
        return 0;
 8018384:	2000      	movs	r0, #0
    }
}
 8018386:	4770      	bx	lr
 8018388:	40016800 	.word	0x40016800

0801838c <_ZN10STM32F7HAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801838c:	4b03      	ldr	r3, [pc, #12]	; (801839c <_ZN10STM32F7HAL19configureInterruptsEv+0x10>)
 801838e:	2290      	movs	r2, #144	; 0x90
 8018390:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8018394:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
void STM32F7HAL::configureInterrupts()
{
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8018398:	4770      	bx	lr
 801839a:	bf00      	nop
 801839c:	e000e100 	.word	0xe000e100

080183a0 <_ZN10STM32F7HAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80183a0:	4b0c      	ldr	r3, [pc, #48]	; (80183d4 <_ZN10STM32F7HAL17disableInterruptsEv+0x34>)
 80183a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80183a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80183aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80183ae:	f3bf 8f6f 	isb	sy
 80183b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80183b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80183ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80183be:	f3bf 8f6f 	isb	sy
 80183c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80183c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80183ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80183ce:	f3bf 8f6f 	isb	sy
void STM32F7HAL::disableInterrupts()
{
    NVIC_DisableIRQ(LTDC_IRQn);
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_ER_IRQn);
}
 80183d2:	4770      	bx	lr
 80183d4:	e000e100 	.word	0xe000e100

080183d8 <_ZN10STM32F7HAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80183d8:	4b05      	ldr	r3, [pc, #20]	; (80183f0 <_ZN10STM32F7HAL16enableInterruptsEv+0x18>)
 80183da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80183de:	609a      	str	r2, [r3, #8]
 80183e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80183e4:	609a      	str	r2, [r3, #8]
 80183e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80183ea:	609a      	str	r2, [r3, #8]
void STM32F7HAL::enableInterrupts()
{
    NVIC_EnableIRQ(LTDC_IRQn);
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_ER_IRQn);
}
 80183ec:	4770      	bx	lr
 80183ee:	bf00      	nop
 80183f0:	e000e100 	.word	0xe000e100

080183f4 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 80183f4:	4770      	bx	lr
	...

080183f8 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
{
 80183f8:	b510      	push	{r4, lr}
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80183fa:	4b0c      	ldr	r3, [pc, #48]	; (801842c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x34>)
 80183fc:	68d9      	ldr	r1, [r3, #12]
 80183fe:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8018402:	3901      	subs	r1, #1
 8018404:	b289      	uxth	r1, r1
 8018406:	4a0a      	ldr	r2, [pc, #40]	; (8018430 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x38>)
 8018408:	8011      	strh	r1, [r2, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801840a:	691b      	ldr	r3, [r3, #16]
 801840c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018410:	3b01      	subs	r3, #1
 8018412:	4a08      	ldr	r2, [pc, #32]	; (8018434 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x3c>)
 8018414:	8013      	strh	r3, [r2, #0]
    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8018416:	4c08      	ldr	r4, [pc, #32]	; (8018438 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x40>)
 8018418:	4620      	mov	r0, r4
 801841a:	f7ed f8ed 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 801841e:	6822      	ldr	r2, [r4, #0]
 8018420:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8018422:	f043 0303 	orr.w	r3, r3, #3
 8018426:	6353      	str	r3, [r2, #52]	; 0x34
}
 8018428:	bd10      	pop	{r4, pc}
 801842a:	bf00      	nop
 801842c:	40016800 	.word	0x40016800
 8018430:	2000b114 	.word	0x2000b114
 8018434:	2000b112 	.word	0x2000b112
 8018438:	2000b034 	.word	0x2000b034

0801843c <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801843c:	b508      	push	{r3, lr}
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 801843e:	f003 fb8d 	bl	801bb5c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8018442:	bd08      	pop	{r3, pc}

08018444 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8018444:	b510      	push	{r4, lr}
 8018446:	4604      	mov	r4, r0
        swapFrameBuffers();
 8018448:	f003 ff36 	bl	801c2b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801844c:	6823      	ldr	r3, [r4, #0]
 801844e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018452:	4620      	mov	r0, r4
 8018454:	4798      	blx	r3
    }
 8018456:	bd10      	pop	{r4, pc}

08018458 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8018458:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801845a:	b169      	cbz	r1, 8018478 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x20>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801845c:	6381      	str	r1, [r0, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801845e:	63c2      	str	r2, [r0, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8018460:	6403      	str	r3, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8018462:	3200      	adds	r2, #0
 8018464:	bf18      	it	ne
 8018466:	2201      	movne	r2, #1
 8018468:	4907      	ldr	r1, [pc, #28]	; (8018488 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 801846a:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801846c:	3300      	adds	r3, #0
 801846e:	bf18      	it	ne
 8018470:	2301      	movne	r3, #1
 8018472:	4a06      	ldr	r2, [pc, #24]	; (801848c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8018474:	7013      	strb	r3, [r2, #0]
    }
 8018476:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8018478:	4b05      	ldr	r3, [pc, #20]	; (8018490 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 801847a:	4a06      	ldr	r2, [pc, #24]	; (8018494 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 801847c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8018480:	4805      	ldr	r0, [pc, #20]	; (8018498 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8018482:	f00a fb59 	bl	8022b38 <__assert_func>
 8018486:	bf00      	nop
 8018488:	2000ba4a 	.word	0x2000ba4a
 801848c:	2000ba4b 	.word	0x2000ba4b
 8018490:	080250c8 	.word	0x080250c8
 8018494:	08025248 	.word	0x08025248
 8018498:	08025100 	.word	0x08025100

0801849c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 801849c:	b570      	push	{r4, r5, r6, lr}
 801849e:	f89d 4010 	ldrb.w	r4, [sp, #16]
        switch (depth)
 80184a2:	1e55      	subs	r5, r2, #1
 80184a4:	2d1f      	cmp	r5, #31
 80184a6:	d834      	bhi.n	8018512 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x76>
 80184a8:	e8df f005 	tbb	[pc, r5]
 80184ac:	25332525 	.word	0x25332525
 80184b0:	10333333 	.word	0x10333333
 80184b4:	33333333 	.word	0x33333333
 80184b8:	10333333 	.word	0x10333333
 80184bc:	33333333 	.word	0x33333333
 80184c0:	10333333 	.word	0x10333333
 80184c4:	33333333 	.word	0x33333333
 80184c8:	10333333 	.word	0x10333333
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 80184cc:	4d17      	ldr	r5, [pc, #92]	; (801852c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>)
 80184ce:	882e      	ldrh	r6, [r5, #0]
 80184d0:	4d17      	ldr	r5, [pc, #92]	; (8018530 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x94>)
 80184d2:	882d      	ldrh	r5, [r5, #0]
 80184d4:	fb05 f506 	mul.w	r5, r5, r6
 80184d8:	08d2      	lsrs	r2, r2, #3
 80184da:	fb02 f205 	mul.w	r2, r2, r5
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 80184de:	6381      	str	r1, [r0, #56]	; 0x38
        if (useDoubleBuffering)
 80184e0:	b1f3      	cbz	r3, 8018520 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x84>
            buffer += bufferSizeInBytes;
 80184e2:	4411      	add	r1, r2
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 80184e4:	63c1      	str	r1, [r0, #60]	; 0x3c
        if (useAnimationStorage)
 80184e6:	b9f4      	cbnz	r4, 8018526 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x8a>
            frameBuffer2 = 0;
 80184e8:	2200      	movs	r2, #0
 80184ea:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 80184ec:	4a11      	ldr	r2, [pc, #68]	; (8018534 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x98>)
 80184ee:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 80184f0:	4b11      	ldr	r3, [pc, #68]	; (8018538 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9c>)
 80184f2:	701c      	strb	r4, [r3, #0]
    }
 80184f4:	bd70      	pop	{r4, r5, r6, pc}
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 80184f6:	4d0d      	ldr	r5, [pc, #52]	; (801852c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>)
 80184f8:	882d      	ldrh	r5, [r5, #0]
 80184fa:	fb02 f205 	mul.w	r2, r2, r5
 80184fe:	3207      	adds	r2, #7
 8018500:	d405      	bmi.n	801850e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x72>
 8018502:	10d2      	asrs	r2, r2, #3
 8018504:	4d0a      	ldr	r5, [pc, #40]	; (8018530 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x94>)
 8018506:	882d      	ldrh	r5, [r5, #0]
 8018508:	fb02 f205 	mul.w	r2, r2, r5
            break;
 801850c:	e7e7      	b.n	80184de <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x42>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 801850e:	3207      	adds	r2, #7
 8018510:	e7f7      	b.n	8018502 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x66>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 8018512:	4b0a      	ldr	r3, [pc, #40]	; (801853c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xa0>)
 8018514:	4a0a      	ldr	r2, [pc, #40]	; (8018540 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xa4>)
 8018516:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 801851a:	480a      	ldr	r0, [pc, #40]	; (8018544 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xa8>)
 801851c:	f00a fb0c 	bl	8022b38 <__assert_func>
            frameBuffer1 = 0;
 8018520:	2500      	movs	r5, #0
 8018522:	63c5      	str	r5, [r0, #60]	; 0x3c
 8018524:	e7df      	b.n	80184e6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x4a>
            buffer += bufferSizeInBytes;
 8018526:	440a      	add	r2, r1
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 8018528:	6402      	str	r2, [r0, #64]	; 0x40
 801852a:	e7df      	b.n	80184ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x50>
 801852c:	2000ba40 	.word	0x2000ba40
 8018530:	2000ba42 	.word	0x2000ba42
 8018534:	2000ba4a 	.word	0x2000ba4a
 8018538:	2000ba4b 	.word	0x2000ba4b
 801853c:	08024c54 	.word	0x08024c54
 8018540:	080251f4 	.word	0x080251f4
 8018544:	08025100 	.word	0x08025100

08018548 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8018548:	b508      	push	{r3, lr}
    {
        HAL::flushFrameBuffer();
 801854a:	f003 fb01 	bl	801bb50 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801854e:	bd08      	pop	{r3, pc}

08018550 <_ZN10STM32F7HALD0Ev>:
class STM32F7HAL : public touchgfx::HAL
 8018550:	b510      	push	{r4, lr}
 8018552:	4604      	mov	r4, r0
 8018554:	2168      	movs	r1, #104	; 0x68
 8018556:	f00a fad3 	bl	8022b00 <_ZdlPvj>
 801855a:	4620      	mov	r0, r4
 801855c:	bd10      	pop	{r4, pc}
	...

08018560 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8018560:	b510      	push	{r4, lr}
    if (LTDC->LIPCR == lcd_int_active_line)
 8018562:	4b12      	ldr	r3, [pc, #72]	; (80185ac <HAL_LTDC_LineEventCallback+0x4c>)
 8018564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018566:	4a12      	ldr	r2, [pc, #72]	; (80185b0 <HAL_LTDC_LineEventCallback+0x50>)
 8018568:	8811      	ldrh	r1, [r2, #0]
 801856a:	428b      	cmp	r3, r1
 801856c:	d00a      	beq.n	8018584 <HAL_LTDC_LineEventCallback+0x24>
        GPIO::set(GPIO::VSYNC_FREQ);
    }
    else
    {
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801856e:	f7ed f843 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 8018572:	2000      	movs	r0, #0
 8018574:	f7ff fa52 	bl	8017a1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8018578:	4b0e      	ldr	r3, [pc, #56]	; (80185b4 <HAL_LTDC_LineEventCallback+0x54>)
 801857a:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 801857c:	6803      	ldr	r3, [r0, #0]
 801857e:	699b      	ldr	r3, [r3, #24]
 8018580:	4798      	blx	r3
        HAL::getInstance()->frontPorchEntered();
    }
}
 8018582:	bd10      	pop	{r4, pc}
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8018584:	4b0c      	ldr	r3, [pc, #48]	; (80185b8 <HAL_LTDC_LineEventCallback+0x58>)
 8018586:	8819      	ldrh	r1, [r3, #0]
 8018588:	f7ed f836 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
        return instance;
 801858c:	4c09      	ldr	r4, [pc, #36]	; (80185b4 <HAL_LTDC_LineEventCallback+0x54>)
 801858e:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8018590:	f892 3056 	ldrb.w	r3, [r2, #86]	; 0x56
 8018594:	3301      	adds	r3, #1
 8018596:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
        OSWrappers::signalVSync();
 801859a:	f7fb f823 	bl	80135e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        HAL::getInstance()->swapFrameBuffers();
 801859e:	6820      	ldr	r0, [r4, #0]
 80185a0:	f003 fe8a 	bl	801c2b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 80185a4:	2000      	movs	r0, #0
 80185a6:	f7ff fa38 	bl	8017a1a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80185aa:	e7ea      	b.n	8018582 <HAL_LTDC_LineEventCallback+0x22>
 80185ac:	40016800 	.word	0x40016800
 80185b0:	2000b114 	.word	0x2000b114
 80185b4:	2000ba4c 	.word	0x2000ba4c
 80185b8:	2000b112 	.word	0x2000b112

080185bc <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80185bc:	6840      	ldr	r0, [r0, #4]
    }
 80185be:	4770      	bx	lr

080185c0 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80185c0:	6041      	str	r1, [r0, #4]
    }
 80185c2:	4770      	bx	lr

080185c4 <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:
}

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80185c4:	1a52      	subs	r2, r2, r1
 80185c6:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 80185ca:	fbb2 f0f3 	udiv	r0, r2, r3
 80185ce:	4770      	bx	lr

080185d0 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 80185d0:	4b03      	ldr	r3, [pc, #12]	; (80185e0 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x10>)
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185d6:	68c0      	ldr	r0, [r0, #12]
}
 80185d8:	fb00 f003 	mul.w	r0, r0, r3
 80185dc:	4770      	bx	lr
 80185de:	bf00      	nop
 80185e0:	2000b118 	.word	0x2000b118

080185e4 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 80185e4:	b510      	push	{r4, lr}
 80185e6:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80185e8:	b921      	cbnz	r1, 80185f4 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x10>
    {
        cc_consumed += getCPUCycles() - cc_in;
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
 80185ea:	6803      	ldr	r3, [r0, #0]
 80185ec:	691b      	ldr	r3, [r3, #16]
 80185ee:	4798      	blx	r3
 80185f0:	60a0      	str	r0, [r4, #8]
    }
}
 80185f2:	bd10      	pop	{r4, pc}
        cc_consumed += getCPUCycles() - cc_in;
 80185f4:	6803      	ldr	r3, [r0, #0]
 80185f6:	691b      	ldr	r3, [r3, #16]
 80185f8:	4798      	blx	r3
 80185fa:	68a3      	ldr	r3, [r4, #8]
 80185fc:	1ac0      	subs	r0, r0, r3
 80185fe:	6863      	ldr	r3, [r4, #4]
 8018600:	4418      	add	r0, r3
 8018602:	6060      	str	r0, [r4, #4]
 8018604:	e7f5      	b.n	80185f2 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0xe>

08018606 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 8018606:	4770      	bx	lr

08018608 <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
{
 8018608:	b530      	push	{r4, r5, lr}
 801860a:	b0a1      	sub	sp, #132	; 0x84
 801860c:	4605      	mov	r5, r0
    __TIM2_CLK_ENABLE();
 801860e:	4b4d      	ldr	r3, [pc, #308]	; (8018744 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>)
 8018610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018612:	f042 0201 	orr.w	r2, r2, #1
 8018616:	641a      	str	r2, [r3, #64]	; 0x40
 8018618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801861a:	f003 0301 	and.w	r3, r3, #1
 801861e:	9300      	str	r3, [sp, #0]
 8018620:	9b00      	ldr	r3, [sp, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018622:	2400      	movs	r4, #0
 8018624:	9416      	str	r4, [sp, #88]	; 0x58
 8018626:	9417      	str	r4, [sp, #92]	; 0x5c
 8018628:	9418      	str	r4, [sp, #96]	; 0x60
 801862a:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801862c:	9413      	str	r4, [sp, #76]	; 0x4c
 801862e:	9414      	str	r4, [sp, #80]	; 0x50
 8018630:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8018632:	940c      	str	r4, [sp, #48]	; 0x30
 8018634:	940d      	str	r4, [sp, #52]	; 0x34
 8018636:	940e      	str	r4, [sp, #56]	; 0x38
 8018638:	940f      	str	r4, [sp, #60]	; 0x3c
 801863a:	9410      	str	r4, [sp, #64]	; 0x40
 801863c:	9411      	str	r4, [sp, #68]	; 0x44
 801863e:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8018640:	222c      	movs	r2, #44	; 0x2c
 8018642:	4621      	mov	r1, r4
 8018644:	a801      	add	r0, sp, #4
 8018646:	f00a faf2 	bl	8022c2e <memset>
  htim1.Instance = TIM1;
 801864a:	483f      	ldr	r0, [pc, #252]	; (8018748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801864c:	4b3f      	ldr	r3, [pc, #252]	; (801874c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x144>)
 801864e:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8018650:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018652:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 8018654:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018656:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8018658:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801865a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801865c:	f7f0 fbf8 	bl	8008e50 <HAL_TIM_Base_Init>
 8018660:	2800      	cmp	r0, #0
 8018662:	d158      	bne.n	8018716 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x10e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8018664:	a920      	add	r1, sp, #128	; 0x80
 8018666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801866a:	f841 3d28 	str.w	r3, [r1, #-40]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 801866e:	4836      	ldr	r0, [pc, #216]	; (8018748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 8018670:	f7f0 fed0 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8018674:	2800      	cmp	r0, #0
 8018676:	d151      	bne.n	801871c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x114>
  htim1.Instance = TIM1;
 8018678:	4833      	ldr	r0, [pc, #204]	; (8018748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801867a:	4b34      	ldr	r3, [pc, #208]	; (801874c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x144>)
 801867c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 801867e:	2300      	movs	r3, #0
 8018680:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018682:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 8018684:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018686:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8018688:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801868a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 801868c:	f7f0 fc60 	bl	8008f50 <HAL_TIM_PWM_Init>
 8018690:	2800      	cmp	r0, #0
 8018692:	d146      	bne.n	8018722 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x11a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018694:	2300      	movs	r3, #0
 8018696:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8018698:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801869a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801869c:	a913      	add	r1, sp, #76	; 0x4c
 801869e:	482a      	ldr	r0, [pc, #168]	; (8018748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 80186a0:	f7f1 fb32 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 80186a4:	2800      	cmp	r0, #0
 80186a6:	d13f      	bne.n	8018728 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x120>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80186a8:	2360      	movs	r3, #96	; 0x60
 80186aa:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80186ac:	2200      	movs	r2, #0
 80186ae:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80186b0:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80186b2:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80186b4:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80186b6:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80186b8:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80186ba:	a90c      	add	r1, sp, #48	; 0x30
 80186bc:	4822      	ldr	r0, [pc, #136]	; (8018748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 80186be:	f7f0 fd91 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 80186c2:	2800      	cmp	r0, #0
 80186c4:	d133      	bne.n	801872e <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x126>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80186c6:	2300      	movs	r3, #0
 80186c8:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80186ca:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80186cc:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80186ce:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80186d0:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80186d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80186d6:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80186d8:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80186da:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80186dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80186e0:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80186e2:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80186e4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80186e6:	a901      	add	r1, sp, #4
 80186e8:	4817      	ldr	r0, [pc, #92]	; (8018748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 80186ea:	f7f1 fb69 	bl	8009dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 80186ee:	bb08      	cbnz	r0, 8018734 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x12c>
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80186f0:	a91a      	add	r1, sp, #104	; 0x68
 80186f2:	a81b      	add	r0, sp, #108	; 0x6c
 80186f4:	f7ed fec0 	bl	8006478 <HAL_RCC_GetClockConfig>
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80186f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80186fa:	b1f3      	cbz	r3, 801873a <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x132>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 80186fc:	f7ed fe94 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 8018700:	0044      	lsls	r4, r0, #1
    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 8018702:	f7ed fe85 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8018706:	fbb0 f0f4 	udiv	r0, r0, r4
 801870a:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Start(&htim1);
 801870c:	480e      	ldr	r0, [pc, #56]	; (8018748 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801870e:	f7f0 fbcb 	bl	8008ea8 <HAL_TIM_Base_Start>
}
 8018712:	b021      	add	sp, #132	; 0x84
 8018714:	bd30      	pop	{r4, r5, pc}
    Error_Handler( );
 8018716:	f000 fe1d 	bl	8019354 <Error_Handler>
 801871a:	e7a3      	b.n	8018664 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x5c>
    Error_Handler( );
 801871c:	f000 fe1a 	bl	8019354 <Error_Handler>
 8018720:	e7aa      	b.n	8018678 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x70>
    Error_Handler( );
 8018722:	f000 fe17 	bl	8019354 <Error_Handler>
 8018726:	e7b5      	b.n	8018694 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x8c>
    Error_Handler( );
 8018728:	f000 fe14 	bl	8019354 <Error_Handler>
 801872c:	e7bc      	b.n	80186a8 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa0>
    Error_Handler( );
 801872e:	f000 fe11 	bl	8019354 <Error_Handler>
 8018732:	e7c8      	b.n	80186c6 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xbe>
    Error_Handler( );
 8018734:	f000 fe0e 	bl	8019354 <Error_Handler>
 8018738:	e7da      	b.n	80186f0 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe8>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 801873a:	f7ed fe75 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 801873e:	4604      	mov	r4, r0
 8018740:	e7df      	b.n	8018702 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xfa>
 8018742:	bf00      	nop
 8018744:	40023800 	.word	0x40023800
 8018748:	2000b118 	.word	0x2000b118
 801874c:	40010000 	.word	0x40010000

08018750 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 8018750:	b510      	push	{r4, lr}
 8018752:	4604      	mov	r4, r0
 8018754:	2110      	movs	r1, #16
 8018756:	f00a f9d3 	bl	8022b00 <_ZdlPvj>
 801875a:	4620      	mov	r0, r4
 801875c:	bd10      	pop	{r4, pc}

0801875e <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
#include <platform/driver/touch/TouchController.hpp>
#include <main.h>
                 
namespace touchgfx
{
class STM32F7TouchController: public TouchController
 801875e:	4770      	bx	lr

08018760 <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 8018760:	b510      	push	{r4, lr}
 /* USER CODE BEGIN F4TouchController_init */

  /* Add code for touch controller Initialization */
  BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 8018762:	f7fe ffe3 	bl	801772c <LCD_GetXSize>
 8018766:	4604      	mov	r4, r0
 8018768:	f7fe ffe3 	bl	8017732 <LCD_GetYSize>
 801876c:	b281      	uxth	r1, r0
 801876e:	b2a0      	uxth	r0, r4
 8018770:	f7fe fc94 	bl	801709c <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 8018774:	bd10      	pop	{r4, pc}

08018776 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8018776:	b530      	push	{r4, r5, lr}
 8018778:	b08d      	sub	sp, #52	; 0x34
 801877a:	460d      	mov	r5, r1
 801877c:	4614      	mov	r4, r2
/* USER CODE BEGIN  F4TouchController_sampleTouch  */

 TS_StateTypeDef state = { 0 };
 801877e:	222c      	movs	r2, #44	; 0x2c
 8018780:	2100      	movs	r1, #0
 8018782:	a801      	add	r0, sp, #4
 8018784:	f00a fa53 	bl	8022c2e <memset>
    BSP_TS_GetState(&state);
 8018788:	a801      	add	r0, sp, #4
 801878a:	f7fe fcc7 	bl	801711c <BSP_TS_GetState>
    if (state.touchDetected)
 801878e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018792:	b143      	cbz	r3, 80187a6 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x30>
    {
        x = state.touchX[0];
 8018794:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018798:	602b      	str	r3, [r5, #0]
        y = state.touchY[0];
 801879a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801879e:	6023      	str	r3, [r4, #0]

        return true;
 80187a0:	2001      	movs	r0, #1
    }
    return false; 

/* USER CODE END F4TouchController_sampleTouch  */
}
 80187a2:	b00d      	add	sp, #52	; 0x34
 80187a4:	bd30      	pop	{r4, r5, pc}
    return false; 
 80187a6:	2000      	movs	r0, #0
 80187a8:	e7fb      	b.n	80187a2 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x2c>

080187aa <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 80187aa:	b510      	push	{r4, lr}
 80187ac:	4604      	mov	r4, r0
 80187ae:	2104      	movs	r1, #4
 80187b0:	f00a f9a6 	bl	8022b00 <_ZdlPvj>
 80187b4:	4620      	mov	r0, r4
 80187b6:	bd10      	pop	{r4, pc}

080187b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b082      	sub	sp, #8
 80187bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80187be:	2300      	movs	r3, #0
 80187c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80187c2:	f000 f87b 	bl	80188bc <BSP_SD_IsDetected>
 80187c6:	4603      	mov	r3, r0
 80187c8:	2b01      	cmp	r3, #1
 80187ca:	d001      	beq.n	80187d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80187cc:	2302      	movs	r3, #2
 80187ce:	e012      	b.n	80187f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80187d0:	480b      	ldr	r0, [pc, #44]	; (8018800 <BSP_SD_Init+0x48>)
 80187d2:	f7ef f90f 	bl	80079f4 <HAL_SD_Init>
 80187d6:	4603      	mov	r3, r0
 80187d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80187da:	79fb      	ldrb	r3, [r7, #7]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d109      	bne.n	80187f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80187e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80187e4:	4806      	ldr	r0, [pc, #24]	; (8018800 <BSP_SD_Init+0x48>)
 80187e6:	f7ef fd8f 	bl	8008308 <HAL_SD_ConfigWideBusOperation>
 80187ea:	4603      	mov	r3, r0
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d001      	beq.n	80187f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80187f0:	2301      	movs	r3, #1
 80187f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80187f4:	79fb      	ldrb	r3, [r7, #7]
}
 80187f6:	4618      	mov	r0, r3
 80187f8:	3708      	adds	r7, #8
 80187fa:	46bd      	mov	sp, r7
 80187fc:	bd80      	pop	{r7, pc}
 80187fe:	bf00      	nop
 8018800:	2000b46c 	.word	0x2000b46c

08018804 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b086      	sub	sp, #24
 8018808:	af00      	add	r7, sp, #0
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8018810:	2300      	movs	r3, #0
 8018812:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	68ba      	ldr	r2, [r7, #8]
 8018818:	68f9      	ldr	r1, [r7, #12]
 801881a:	4806      	ldr	r0, [pc, #24]	; (8018834 <BSP_SD_ReadBlocks_DMA+0x30>)
 801881c:	f7ef f97a 	bl	8007b14 <HAL_SD_ReadBlocks_DMA>
 8018820:	4603      	mov	r3, r0
 8018822:	2b00      	cmp	r3, #0
 8018824:	d001      	beq.n	801882a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8018826:	2301      	movs	r3, #1
 8018828:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801882a:	7dfb      	ldrb	r3, [r7, #23]
}
 801882c:	4618      	mov	r0, r3
 801882e:	3718      	adds	r7, #24
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}
 8018834:	2000b46c 	.word	0x2000b46c

08018838 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b086      	sub	sp, #24
 801883c:	af00      	add	r7, sp, #0
 801883e:	60f8      	str	r0, [r7, #12]
 8018840:	60b9      	str	r1, [r7, #8]
 8018842:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8018844:	2300      	movs	r3, #0
 8018846:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	68ba      	ldr	r2, [r7, #8]
 801884c:	68f9      	ldr	r1, [r7, #12]
 801884e:	4806      	ldr	r0, [pc, #24]	; (8018868 <BSP_SD_WriteBlocks_DMA+0x30>)
 8018850:	f7ef fa2e 	bl	8007cb0 <HAL_SD_WriteBlocks_DMA>
 8018854:	4603      	mov	r3, r0
 8018856:	2b00      	cmp	r3, #0
 8018858:	d001      	beq.n	801885e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801885a:	2301      	movs	r3, #1
 801885c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801885e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018860:	4618      	mov	r0, r3
 8018862:	3718      	adds	r7, #24
 8018864:	46bd      	mov	sp, r7
 8018866:	bd80      	pop	{r7, pc}
 8018868:	2000b46c 	.word	0x2000b46c

0801886c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8018870:	4805      	ldr	r0, [pc, #20]	; (8018888 <BSP_SD_GetCardState+0x1c>)
 8018872:	f7ef fdc5 	bl	8008400 <HAL_SD_GetCardState>
 8018876:	4603      	mov	r3, r0
 8018878:	2b04      	cmp	r3, #4
 801887a:	bf14      	ite	ne
 801887c:	2301      	movne	r3, #1
 801887e:	2300      	moveq	r3, #0
 8018880:	b2db      	uxtb	r3, r3
}
 8018882:	4618      	mov	r0, r3
 8018884:	bd80      	pop	{r7, pc}
 8018886:	bf00      	nop
 8018888:	2000b46c 	.word	0x2000b46c

0801888c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8018894:	6879      	ldr	r1, [r7, #4]
 8018896:	4803      	ldr	r0, [pc, #12]	; (80188a4 <BSP_SD_GetCardInfo+0x18>)
 8018898:	f7ef fd0a 	bl	80082b0 <HAL_SD_GetCardInfo>
}
 801889c:	bf00      	nop
 801889e:	3708      	adds	r7, #8
 80188a0:	46bd      	mov	sp, r7
 80188a2:	bd80      	pop	{r7, pc}
 80188a4:	2000b46c 	.word	0x2000b46c

080188a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80188b0:	f000 ff56 	bl	8019760 <BSP_SD_ReadCpltCallback>
}
 80188b4:	bf00      	nop
 80188b6:	3708      	adds	r7, #8
 80188b8:	46bd      	mov	sp, r7
 80188ba:	bd80      	pop	{r7, pc}

080188bc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80188c2:	2301      	movs	r3, #1
 80188c4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80188c6:	f000 f827 	bl	8018918 <BSP_PlatformIsDetected>
 80188ca:	4603      	mov	r3, r0
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d101      	bne.n	80188d4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80188d0:	2300      	movs	r3, #0
 80188d2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80188d4:	79fb      	ldrb	r3, [r7, #7]
 80188d6:	b2db      	uxtb	r3, r3
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3708      	adds	r7, #8
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}

080188e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80188e4:	4907      	ldr	r1, [pc, #28]	; (8018904 <MX_FATFS_Init+0x24>)
 80188e6:	4808      	ldr	r0, [pc, #32]	; (8018908 <MX_FATFS_Init+0x28>)
 80188e8:	f7fb fbda 	bl	80140a0 <FATFS_LinkDriver>
 80188ec:	4603      	mov	r3, r0
 80188ee:	461a      	mov	r2, r3
 80188f0:	4b06      	ldr	r3, [pc, #24]	; (801890c <MX_FATFS_Init+0x2c>)
 80188f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */

  f_mount(&SDFatFS, "",0); //mounting file system in lazy mode
 80188f4:	2200      	movs	r2, #0
 80188f6:	4906      	ldr	r1, [pc, #24]	; (8018910 <MX_FATFS_Init+0x30>)
 80188f8:	4806      	ldr	r0, [pc, #24]	; (8018914 <MX_FATFS_Init+0x34>)
 80188fa:	f7fb fb21 	bl	8013f40 <f_mount>

  /* USER CODE END Init */
}
 80188fe:	bf00      	nop
 8018900:	bd80      	pop	{r7, pc}
 8018902:	bf00      	nop
 8018904:	2000c048 	.word	0x2000c048
 8018908:	080252e4 	.word	0x080252e4
 801890c:	2000c04c 	.word	0x2000c04c
 8018910:	08023b74 	.word	0x08023b74
 8018914:	2000bbe4 	.word	0x2000bbe4

08018918 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8018918:	b580      	push	{r7, lr}
 801891a:	b082      	sub	sp, #8
 801891c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801891e:	2301      	movs	r3, #1
 8018920:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8018922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018926:	4806      	ldr	r0, [pc, #24]	; (8018940 <BSP_PlatformIsDetected+0x28>)
 8018928:	f7ea f9c6 	bl	8002cb8 <HAL_GPIO_ReadPin>
 801892c:	4603      	mov	r3, r0
 801892e:	2b00      	cmp	r3, #0
 8018930:	d001      	beq.n	8018936 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8018932:	2300      	movs	r3, #0
 8018934:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8018936:	79fb      	ldrb	r3, [r7, #7]
}  
 8018938:	4618      	mov	r0, r3
 801893a:	3708      	adds	r7, #8
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}
 8018940:	40020800 	.word	0x40020800

08018944 <_ZL17MX_SDMMC1_SD_Initv>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8018944:	4b05      	ldr	r3, [pc, #20]	; (801895c <_ZL17MX_SDMMC1_SD_Initv+0x18>)
 8018946:	4a06      	ldr	r2, [pc, #24]	; (8018960 <_ZL17MX_SDMMC1_SD_Initv+0x1c>)
 8018948:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801894a:	2200      	movs	r2, #0
 801894c:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 801894e:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8018950:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8018952:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8018954:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8018956:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8018958:	4770      	bx	lr
 801895a:	bf00      	nop
 801895c:	2000b46c 	.word	0x2000b46c
 8018960:	40012c00 	.word	0x40012c00

08018964 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8018964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018968:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801896a:	2400      	movs	r4, #0
 801896c:	940b      	str	r4, [sp, #44]	; 0x2c
 801896e:	940c      	str	r4, [sp, #48]	; 0x30
 8018970:	940d      	str	r4, [sp, #52]	; 0x34
 8018972:	940e      	str	r4, [sp, #56]	; 0x38
 8018974:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8018976:	4b9f      	ldr	r3, [pc, #636]	; (8018bf4 <_ZL12MX_GPIO_Initv+0x290>)
 8018978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801897a:	f042 0210 	orr.w	r2, r2, #16
 801897e:	631a      	str	r2, [r3, #48]	; 0x30
 8018980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018982:	f002 0210 	and.w	r2, r2, #16
 8018986:	9200      	str	r2, [sp, #0]
 8018988:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801898a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801898c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018990:	631a      	str	r2, [r3, #48]	; 0x30
 8018992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018994:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8018998:	9201      	str	r2, [sp, #4]
 801899a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801899c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801899e:	f042 0202 	orr.w	r2, r2, #2
 80189a2:	631a      	str	r2, [r3, #48]	; 0x30
 80189a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189a6:	f002 0202 	and.w	r2, r2, #2
 80189aa:	9202      	str	r2, [sp, #8]
 80189ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80189ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189b0:	f042 0208 	orr.w	r2, r2, #8
 80189b4:	631a      	str	r2, [r3, #48]	; 0x30
 80189b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189b8:	f002 0208 	and.w	r2, r2, #8
 80189bc:	9203      	str	r2, [sp, #12]
 80189be:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80189c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189c2:	f042 0204 	orr.w	r2, r2, #4
 80189c6:	631a      	str	r2, [r3, #48]	; 0x30
 80189c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189ca:	f002 0204 	and.w	r2, r2, #4
 80189ce:	9204      	str	r2, [sp, #16]
 80189d0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80189d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189d4:	f042 0201 	orr.w	r2, r2, #1
 80189d8:	631a      	str	r2, [r3, #48]	; 0x30
 80189da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189dc:	f002 0201 	and.w	r2, r2, #1
 80189e0:	9205      	str	r2, [sp, #20]
 80189e2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80189e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80189ea:	631a      	str	r2, [r3, #48]	; 0x30
 80189ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189ee:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80189f2:	9206      	str	r2, [sp, #24]
 80189f4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80189f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80189f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80189fc:	631a      	str	r2, [r3, #48]	; 0x30
 80189fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018a00:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018a04:	9207      	str	r2, [sp, #28]
 8018a06:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8018a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8018a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018a12:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8018a16:	9208      	str	r2, [sp, #32]
 8018a18:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8018a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018a1c:	f042 0220 	orr.w	r2, r2, #32
 8018a20:	631a      	str	r2, [r3, #48]	; 0x30
 8018a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018a24:	f002 0220 	and.w	r2, r2, #32
 8018a28:	9209      	str	r2, [sp, #36]	; 0x24
 8018a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8018a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018a2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018a32:	631a      	str	r2, [r3, #48]	; 0x30
 8018a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8018a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8018a3e:	2201      	movs	r2, #1
 8018a40:	2120      	movs	r1, #32
 8018a42:	486d      	ldr	r0, [pc, #436]	; (8018bf8 <_ZL12MX_GPIO_Initv+0x294>)
 8018a44:	f7ea f950 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8018a48:	4622      	mov	r2, r4
 8018a4a:	210c      	movs	r1, #12
 8018a4c:	486b      	ldr	r0, [pc, #428]	; (8018bfc <_ZL12MX_GPIO_Initv+0x298>)
 8018a4e:	f7ea f94b 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8018a52:	2201      	movs	r2, #1
 8018a54:	2108      	movs	r1, #8
 8018a56:	486a      	ldr	r0, [pc, #424]	; (8018c00 <_ZL12MX_GPIO_Initv+0x29c>)
 8018a58:	f7ea f946 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8018a5c:	2201      	movs	r2, #1
 8018a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018a62:	4866      	ldr	r0, [pc, #408]	; (8018bfc <_ZL12MX_GPIO_Initv+0x298>)
 8018a64:	f7ea f940 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8018a68:	4622      	mov	r2, r4
 8018a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018a6e:	4865      	ldr	r0, [pc, #404]	; (8018c04 <_ZL12MX_GPIO_Initv+0x2a0>)
 8018a70:	f7ea f93a 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8018a74:	4622      	mov	r2, r4
 8018a76:	21c8      	movs	r1, #200	; 0xc8
 8018a78:	4863      	ldr	r0, [pc, #396]	; (8018c08 <_ZL12MX_GPIO_Initv+0x2a4>)
 8018a7a:	f7ea f935 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8018a7e:	f04f 0a08 	mov.w	sl, #8
 8018a82:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018a86:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a88:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8018a8a:	a90b      	add	r1, sp, #44	; 0x2c
 8018a8c:	485f      	ldr	r0, [pc, #380]	; (8018c0c <_ZL12MX_GPIO_Initv+0x2a8>)
 8018a8e:	f7e9 fe5f 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8018a92:	f643 4323 	movw	r3, #15395	; 0x3c23
 8018a96:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a98:	2602      	movs	r6, #2
 8018a9a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a9c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018a9e:	f04f 0803 	mov.w	r8, #3
 8018aa2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8018aa6:	270a      	movs	r7, #10
 8018aa8:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018aaa:	a90b      	add	r1, sp, #44	; 0x2c
 8018aac:	4858      	ldr	r0, [pc, #352]	; (8018c10 <_ZL12MX_GPIO_Initv+0x2ac>)
 8018aae:	f7e9 fe4f 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8018ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018ab6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ab8:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018aba:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018abc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8018abe:	2501      	movs	r5, #1
 8018ac0:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8018ac2:	a90b      	add	r1, sp, #44	; 0x2c
 8018ac4:	4853      	ldr	r0, [pc, #332]	; (8018c14 <_ZL12MX_GPIO_Initv+0x2b0>)
 8018ac6:	f7e9 fe43 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8018aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018ace:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018ad0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ad2:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8018ad4:	a90b      	add	r1, sp, #44	; 0x2c
 8018ad6:	4850      	ldr	r0, [pc, #320]	; (8018c18 <_ZL12MX_GPIO_Initv+0x2b4>)
 8018ad8:	f7e9 fe3a 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8018adc:	2340      	movs	r3, #64	; 0x40
 8018ade:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8018ae0:	f8df b13c 	ldr.w	fp, [pc, #316]	; 8018c20 <_ZL12MX_GPIO_Initv+0x2bc>
 8018ae4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ae8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8018aea:	a90b      	add	r1, sp, #44	; 0x2c
 8018aec:	4842      	ldr	r0, [pc, #264]	; (8018bf8 <_ZL12MX_GPIO_Initv+0x294>)
 8018aee:	f7e9 fe2f 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8018af2:	2320      	movs	r3, #32
 8018af4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018af6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018af8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018afa:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8018afc:	a90b      	add	r1, sp, #44	; 0x2c
 8018afe:	483e      	ldr	r0, [pc, #248]	; (8018bf8 <_ZL12MX_GPIO_Initv+0x294>)
 8018b00:	f7e9 fe26 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8018b04:	f241 030c 	movw	r3, #4108	; 0x100c
 8018b08:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018b0a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b0c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018b0e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8018b10:	a90b      	add	r1, sp, #44	; 0x2c
 8018b12:	483a      	ldr	r0, [pc, #232]	; (8018bfc <_ZL12MX_GPIO_Initv+0x298>)
 8018b14:	f7e9 fe1c 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8018b18:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 8018b1c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018b20:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b22:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8018b24:	a90b      	add	r1, sp, #44	; 0x2c
 8018b26:	483d      	ldr	r0, [pc, #244]	; (8018c1c <_ZL12MX_GPIO_Initv+0x2b8>)
 8018b28:	f7e9 fe12 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8018b2c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018b30:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b32:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018b34:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8018b36:	a90b      	add	r1, sp, #44	; 0x2c
 8018b38:	4831      	ldr	r0, [pc, #196]	; (8018c00 <_ZL12MX_GPIO_Initv+0x29c>)
 8018b3a:	f7e9 fe09 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8018b3e:	f04f 0a10 	mov.w	sl, #16
 8018b42:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018b46:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b48:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8018b4a:	a90b      	add	r1, sp, #44	; 0x2c
 8018b4c:	482a      	ldr	r0, [pc, #168]	; (8018bf8 <_ZL12MX_GPIO_Initv+0x294>)
 8018b4e:	f7e9 fdff 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8018b52:	f248 0304 	movw	r3, #32772	; 0x8004
 8018b56:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018b58:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b5a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018b5c:	a90b      	add	r1, sp, #44	; 0x2c
 8018b5e:	4829      	ldr	r0, [pc, #164]	; (8018c04 <_ZL12MX_GPIO_Initv+0x2a0>)
 8018b60:	f7e9 fdf6 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8018b64:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018b68:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b6a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018b6c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8018b6e:	a90b      	add	r1, sp, #44	; 0x2c
 8018b70:	4824      	ldr	r0, [pc, #144]	; (8018c04 <_ZL12MX_GPIO_Initv+0x2a0>)
 8018b72:	f7e9 fded 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8018b76:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8018b7a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b7e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8018b80:	a90b      	add	r1, sp, #44	; 0x2c
 8018b82:	481e      	ldr	r0, [pc, #120]	; (8018bfc <_ZL12MX_GPIO_Initv+0x298>)
 8018b84:	f7e9 fde4 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8018b88:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018b8c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b8e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018b90:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8018b94:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8018b96:	a90b      	add	r1, sp, #44	; 0x2c
 8018b98:	481a      	ldr	r0, [pc, #104]	; (8018c04 <_ZL12MX_GPIO_Initv+0x2a0>)
 8018b9a:	f7e9 fdd9 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8018b9e:	23c8      	movs	r3, #200	; 0xc8
 8018ba0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018ba2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ba4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018ba6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8018ba8:	a90b      	add	r1, sp, #44	; 0x2c
 8018baa:	4817      	ldr	r0, [pc, #92]	; (8018c08 <_ZL12MX_GPIO_Initv+0x2a4>)
 8018bac:	f7e9 fdd0 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8018bb0:	2305      	movs	r3, #5
 8018bb2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bb4:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bb6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018bb8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8018bbc:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018bbe:	a90b      	add	r1, sp, #44	; 0x2c
 8018bc0:	4816      	ldr	r0, [pc, #88]	; (8018c1c <_ZL12MX_GPIO_Initv+0x2b8>)
 8018bc2:	f7e9 fdc5 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8018bc6:	2304      	movs	r3, #4
 8018bc8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018bca:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bcc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8018bce:	a90b      	add	r1, sp, #44	; 0x2c
 8018bd0:	480d      	ldr	r0, [pc, #52]	; (8018c08 <_ZL12MX_GPIO_Initv+0x2a4>)
 8018bd2:	f7e9 fdbd 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8018bd6:	2328      	movs	r3, #40	; 0x28
 8018bd8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bda:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bdc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018bde:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8018be2:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018be4:	a90b      	add	r1, sp, #44	; 0x2c
 8018be6:	480b      	ldr	r0, [pc, #44]	; (8018c14 <_ZL12MX_GPIO_Initv+0x2b0>)
 8018be8:	f7e9 fdb2 	bl	8002750 <HAL_GPIO_Init>

}
 8018bec:	b011      	add	sp, #68	; 0x44
 8018bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bf2:	bf00      	nop
 8018bf4:	40023800 	.word	0x40023800
 8018bf8:	40020c00 	.word	0x40020c00
 8018bfc:	40022000 	.word	0x40022000
 8018c00:	40022800 	.word	0x40022800
 8018c04:	40021c00 	.word	0x40021c00
 8018c08:	40021800 	.word	0x40021800
 8018c0c:	40021000 	.word	0x40021000
 8018c10:	40020400 	.word	0x40020400
 8018c14:	40020000 	.word	0x40020000
 8018c18:	40022400 	.word	0x40022400
 8018c1c:	40020800 	.word	0x40020800
 8018c20:	10120000 	.word	0x10120000

08018c24 <_ZL12MX_ADC3_Initv>:
{
 8018c24:	b570      	push	{r4, r5, r6, lr}
 8018c26:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8018c28:	2500      	movs	r5, #0
 8018c2a:	9500      	str	r5, [sp, #0]
 8018c2c:	9501      	str	r5, [sp, #4]
 8018c2e:	9502      	str	r5, [sp, #8]
 8018c30:	9503      	str	r5, [sp, #12]
  hadc3.Instance = ADC3;
 8018c32:	4c10      	ldr	r4, [pc, #64]	; (8018c74 <_ZL12MX_ADC3_Initv+0x50>)
 8018c34:	4b10      	ldr	r3, [pc, #64]	; (8018c78 <_ZL12MX_ADC3_Initv+0x54>)
 8018c36:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8018c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8018c3c:	6063      	str	r3, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8018c3e:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8018c40:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8018c42:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8018c44:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8018c48:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8018c4a:	4b0c      	ldr	r3, [pc, #48]	; (8018c7c <_ZL12MX_ADC3_Initv+0x58>)
 8018c4c:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8018c4e:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 8018c50:	2601      	movs	r6, #1
 8018c52:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8018c54:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8018c58:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	f7e7 ff9a 	bl	8000b94 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 8018c60:	2304      	movs	r3, #4
 8018c62:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8018c64:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8018c66:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8018c68:	4669      	mov	r1, sp
 8018c6a:	4620      	mov	r0, r4
 8018c6c:	f7e7 ffd6 	bl	8000c1c <HAL_ADC_ConfigChannel>
}
 8018c70:	b004      	add	sp, #16
 8018c72:	bd70      	pop	{r4, r5, r6, pc}
 8018c74:	2000b15c 	.word	0x2000b15c
 8018c78:	40012200 	.word	0x40012200
 8018c7c:	0f000001 	.word	0x0f000001

08018c80 <_ZL11MX_CRC_Initv>:
{
 8018c80:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8018c82:	4806      	ldr	r0, [pc, #24]	; (8018c9c <_ZL11MX_CRC_Initv+0x1c>)
 8018c84:	4b06      	ldr	r3, [pc, #24]	; (8018ca0 <_ZL11MX_CRC_Initv+0x20>)
 8018c86:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8018c88:	2300      	movs	r3, #0
 8018c8a:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8018c8c:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8018c8e:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8018c90:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8018c92:	2301      	movs	r3, #1
 8018c94:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8018c96:	f7e8 fb01 	bl	800129c <HAL_CRC_Init>
}
 8018c9a:	bd08      	pop	{r3, pc}
 8018c9c:	2000b1a4 	.word	0x2000b1a4
 8018ca0:	40023000 	.word	0x40023000

08018ca4 <_ZL12MX_DCMI_Initv>:
{
 8018ca4:	b508      	push	{r3, lr}
  hdcmi.Instance = DCMI;
 8018ca6:	4809      	ldr	r0, [pc, #36]	; (8018ccc <_ZL12MX_DCMI_Initv+0x28>)
 8018ca8:	4b09      	ldr	r3, [pc, #36]	; (8018cd0 <_ZL12MX_DCMI_Initv+0x2c>)
 8018caa:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8018cac:	2300      	movs	r3, #0
 8018cae:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8018cb0:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8018cb2:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8018cb4:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8018cb6:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8018cb8:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8018cba:	6203      	str	r3, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8018cbc:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8018cbe:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8018cc0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8018cc2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8018cc4:	f7e8 fbd4 	bl	8001470 <HAL_DCMI_Init>
}
 8018cc8:	bd08      	pop	{r3, pc}
 8018cca:	bf00      	nop
 8018ccc:	2000b1c8 	.word	0x2000b1c8
 8018cd0:	50050000 	.word	0x50050000

08018cd4 <_ZL11MX_ETH_Initv>:
{
 8018cd4:	b500      	push	{lr}
 8018cd6:	b083      	sub	sp, #12
  heth.Instance = ETH;
 8018cd8:	4810      	ldr	r0, [pc, #64]	; (8018d1c <_ZL11MX_ETH_Initv+0x48>)
 8018cda:	4b11      	ldr	r3, [pc, #68]	; (8018d20 <_ZL11MX_ETH_Initv+0x4c>)
 8018cdc:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8018cde:	2301      	movs	r3, #1
 8018ce0:	6043      	str	r3, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8018ce6:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8018cea:	2280      	movs	r2, #128	; 0x80
 8018cec:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 8018cf0:	22e1      	movs	r2, #225	; 0xe1
 8018cf2:	f88d 2002 	strb.w	r2, [sp, #2]
  MACAddr[3] = 0x00;
 8018cf6:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 8018cfa:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 8018cfe:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8018d02:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8018d06:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8018d08:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8018d0a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8018d0e:	6203      	str	r3, [r0, #32]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8018d10:	f7e9 f8b2 	bl	8001e78 <HAL_ETH_Init>
}
 8018d14:	b003      	add	sp, #12
 8018d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d1a:	bf00      	nop
 8018d1c:	2000b218 	.word	0x2000b218
 8018d20:	40028000 	.word	0x40028000

08018d24 <_ZL12MX_I2C1_Initv>:
{
 8018d24:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 8018d26:	4c0d      	ldr	r4, [pc, #52]	; (8018d5c <_ZL12MX_I2C1_Initv+0x38>)
 8018d28:	4b0d      	ldr	r3, [pc, #52]	; (8018d60 <_ZL12MX_I2C1_Initv+0x3c>)
 8018d2a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8018d2c:	4b0d      	ldr	r3, [pc, #52]	; (8018d64 <_ZL12MX_I2C1_Initv+0x40>)
 8018d2e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8018d30:	2500      	movs	r5, #0
 8018d32:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8018d34:	2301      	movs	r3, #1
 8018d36:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8018d38:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8018d3a:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8018d3c:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8018d3e:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8018d40:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8018d42:	4620      	mov	r0, r4
 8018d44:	f7eb fc44 	bl	80045d0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8018d48:	4629      	mov	r1, r5
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	f7ec f958 	bl	8005000 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8018d50:	4629      	mov	r1, r5
 8018d52:	4620      	mov	r0, r4
 8018d54:	f7ec f99f 	bl	8005096 <HAL_I2CEx_ConfigDigitalFilter>
}
 8018d58:	bd38      	pop	{r3, r4, r5, pc}
 8018d5a:	bf00      	nop
 8018d5c:	2000b260 	.word	0x2000b260
 8018d60:	40005400 	.word	0x40005400
 8018d64:	00c0eaff 	.word	0x00c0eaff

08018d68 <_ZL12MX_I2C3_Initv>:
{
 8018d68:	b538      	push	{r3, r4, r5, lr}
  hi2c3.Instance = I2C3;
 8018d6a:	4c0d      	ldr	r4, [pc, #52]	; (8018da0 <_ZL12MX_I2C3_Initv+0x38>)
 8018d6c:	4b0d      	ldr	r3, [pc, #52]	; (8018da4 <_ZL12MX_I2C3_Initv+0x3c>)
 8018d6e:	6023      	str	r3, [r4, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8018d70:	4b0d      	ldr	r3, [pc, #52]	; (8018da8 <_ZL12MX_I2C3_Initv+0x40>)
 8018d72:	6063      	str	r3, [r4, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8018d74:	2500      	movs	r5, #0
 8018d76:	60a5      	str	r5, [r4, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8018d78:	2301      	movs	r3, #1
 8018d7a:	60e3      	str	r3, [r4, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8018d7c:	6125      	str	r5, [r4, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8018d7e:	6165      	str	r5, [r4, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8018d80:	61a5      	str	r5, [r4, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8018d82:	61e5      	str	r5, [r4, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8018d84:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8018d86:	4620      	mov	r0, r4
 8018d88:	f7eb fc22 	bl	80045d0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8018d8c:	4629      	mov	r1, r5
 8018d8e:	4620      	mov	r0, r4
 8018d90:	f7ec f936 	bl	8005000 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8018d94:	4629      	mov	r1, r5
 8018d96:	4620      	mov	r0, r4
 8018d98:	f7ec f97d 	bl	8005096 <HAL_I2CEx_ConfigDigitalFilter>
}
 8018d9c:	bd38      	pop	{r3, r4, r5, pc}
 8018d9e:	bf00      	nop
 8018da0:	2000b2ac 	.word	0x2000b2ac
 8018da4:	40005c00 	.word	0x40005c00
 8018da8:	00c0eaff 	.word	0x00c0eaff

08018dac <_ZL15MX_QUADSPI_Initv>:
{
 8018dac:	b508      	push	{r3, lr}
  hqspi.Instance = QUADSPI;
 8018dae:	4808      	ldr	r0, [pc, #32]	; (8018dd0 <_ZL15MX_QUADSPI_Initv+0x24>)
 8018db0:	4b08      	ldr	r3, [pc, #32]	; (8018dd4 <_ZL15MX_QUADSPI_Initv+0x28>)
 8018db2:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 255;
 8018db4:	23ff      	movs	r3, #255	; 0xff
 8018db6:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8018db8:	2201      	movs	r2, #1
 8018dba:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8018dc0:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8018dc2:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8018dc4:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8018dc6:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8018dc8:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8018dca:	f7ec fe47 	bl	8005a5c <HAL_QSPI_Init>
}
 8018dce:	bd08      	pop	{r3, pc}
 8018dd0:	2000b2f8 	.word	0x2000b2f8
 8018dd4:	a0001000 	.word	0xa0001000

08018dd8 <_ZL11MX_RTC_Initv>:
{
 8018dd8:	b570      	push	{r4, r5, r6, lr}
 8018dda:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 8018ddc:	2400      	movs	r4, #0
 8018dde:	940c      	str	r4, [sp, #48]	; 0x30
 8018de0:	940d      	str	r4, [sp, #52]	; 0x34
 8018de2:	940e      	str	r4, [sp, #56]	; 0x38
 8018de4:	940f      	str	r4, [sp, #60]	; 0x3c
 8018de6:	9410      	str	r4, [sp, #64]	; 0x40
 8018de8:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 8018dea:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8018dec:	222c      	movs	r2, #44	; 0x2c
 8018dee:	4621      	mov	r1, r4
 8018df0:	4668      	mov	r0, sp
 8018df2:	f009 ff1c 	bl	8022c2e <memset>
  hrtc.Instance = RTC;
 8018df6:	4d28      	ldr	r5, [pc, #160]	; (8018e98 <_ZL11MX_RTC_Initv+0xc0>)
 8018df8:	4b28      	ldr	r3, [pc, #160]	; (8018e9c <_ZL11MX_RTC_Initv+0xc4>)
 8018dfa:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8018dfc:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 8018dfe:	237f      	movs	r3, #127	; 0x7f
 8018e00:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8018e02:	23ff      	movs	r3, #255	; 0xff
 8018e04:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8018e06:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8018e08:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8018e0a:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	f7ee f887 	bl	8006f20 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8018e12:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 8018e16:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 8018e1a:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8018e1e:	9410      	str	r4, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8018e20:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8018e22:	2201      	movs	r2, #1
 8018e24:	a90c      	add	r1, sp, #48	; 0x30
 8018e26:	4628      	mov	r0, r5
 8018e28:	f7ee f8f6 	bl	8007018 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8018e2c:	2601      	movs	r6, #1
 8018e2e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8018e32:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 8018e36:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 8018e3a:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8018e3e:	4632      	mov	r2, r6
 8018e40:	a90b      	add	r1, sp, #44	; 0x2c
 8018e42:	4628      	mov	r0, r5
 8018e44:	f7ee f9a6 	bl	8007194 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Hours = 0x0;
 8018e48:	f88d 4000 	strb.w	r4, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8018e4c:	f88d 4001 	strb.w	r4, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8018e50:	f88d 4002 	strb.w	r4, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8018e54:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8018e56:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8018e58:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8018e5a:	9406      	str	r4, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8018e5c:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8018e5e:	9408      	str	r4, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8018e60:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8018e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018e68:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8018e6a:	4632      	mov	r2, r6
 8018e6c:	4669      	mov	r1, sp
 8018e6e:	4628      	mov	r0, r5
 8018e70:	f7ee fa38 	bl	80072e4 <HAL_RTC_SetAlarm>
  sAlarm.AlarmDateWeekDay = 0x1;
 8018e74:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8018e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018e7c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8018e7e:	4632      	mov	r2, r6
 8018e80:	4669      	mov	r1, sp
 8018e82:	4628      	mov	r0, r5
 8018e84:	f7ee fa2e 	bl	80072e4 <HAL_RTC_SetAlarm>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8018e88:	2202      	movs	r2, #2
 8018e8a:	4621      	mov	r1, r4
 8018e8c:	4628      	mov	r0, r5
 8018e8e:	f7ee fbb3 	bl	80075f8 <HAL_RTCEx_SetTimeStamp>
}
 8018e92:	b012      	add	sp, #72	; 0x48
 8018e94:	bd70      	pop	{r4, r5, r6, pc}
 8018e96:	bf00      	nop
 8018e98:	2000b344 	.word	0x2000b344
 8018e9c:	40002800 	.word	0x40002800

08018ea0 <_ZL12MX_SAI2_Initv>:
{
 8018ea0:	b570      	push	{r4, r5, r6, lr}
  hsai_BlockA2.Instance = SAI2_Block_A;
 8018ea2:	481f      	ldr	r0, [pc, #124]	; (8018f20 <_ZL12MX_SAI2_Initv+0x80>)
 8018ea4:	4b1f      	ldr	r3, [pc, #124]	; (8018f24 <_ZL12MX_SAI2_Initv+0x84>)
 8018ea6:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8018ea8:	2400      	movs	r4, #0
 8018eaa:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8018eac:	6044      	str	r4, [r0, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8018eae:	2640      	movs	r6, #64	; 0x40
 8018eb0:	6346      	str	r6, [r0, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8018eb2:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8018eb4:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8018eb6:	6084      	str	r4, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8018eb8:	6104      	str	r4, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8018eba:	6144      	str	r4, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8018ebc:	6184      	str	r4, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8018ebe:	4b1a      	ldr	r3, [pc, #104]	; (8018f28 <_ZL12MX_SAI2_Initv+0x88>)
 8018ec0:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8018ec2:	60c4      	str	r4, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8018ec4:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8018ec6:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8018ec8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8018eca:	2308      	movs	r3, #8
 8018ecc:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8018ece:	2501      	movs	r5, #1
 8018ed0:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8018ed2:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8018ed4:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8018ed6:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8018ed8:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8018eda:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8018edc:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8018ede:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8018ee0:	f7ee fbe0 	bl	80076a4 <HAL_SAI_Init>
  hsai_BlockB2.Instance = SAI2_Block_B;
 8018ee4:	4811      	ldr	r0, [pc, #68]	; (8018f2c <_ZL12MX_SAI2_Initv+0x8c>)
 8018ee6:	4b12      	ldr	r3, [pc, #72]	; (8018f30 <_ZL12MX_SAI2_Initv+0x90>)
 8018ee8:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8018eea:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8018eec:	2303      	movs	r3, #3
 8018eee:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8018ef0:	6346      	str	r6, [r0, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8018ef2:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8018ef4:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8018ef6:	6085      	str	r5, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8018ef8:	6104      	str	r4, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8018efa:	6184      	str	r4, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8018efc:	60c4      	str	r4, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8018efe:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8018f00:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8018f02:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 8018f04:	2318      	movs	r3, #24
 8018f06:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8018f08:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8018f0a:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8018f0c:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8018f0e:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8018f10:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8018f12:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8018f14:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8018f16:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8018f18:	f7ee fbc4 	bl	80076a4 <HAL_SAI_Init>
}
 8018f1c:	bd70      	pop	{r4, r5, r6, pc}
 8018f1e:	bf00      	nop
 8018f20:	2000b364 	.word	0x2000b364
 8018f24:	40015c04 	.word	0x40015c04
 8018f28:	0002ee00 	.word	0x0002ee00
 8018f2c:	2000b3e8 	.word	0x2000b3e8
 8018f30:	40015c24 	.word	0x40015c24

08018f34 <_ZL15MX_SPDIFRX_Initv>:
{
 8018f34:	b508      	push	{r3, lr}
  hspdif.Instance = SPDIFRX;
 8018f36:	4809      	ldr	r0, [pc, #36]	; (8018f5c <_ZL15MX_SPDIFRX_Initv+0x28>)
 8018f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8018f3c:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8018f3e:	2300      	movs	r3, #0
 8018f40:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8018f42:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8018f44:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8018f46:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8018f48:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8018f4a:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8018f4c:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8018f4e:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8018f50:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8018f52:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8018f54:	f7ef fe8e 	bl	8008c74 <HAL_SPDIFRX_Init>
}
 8018f58:	bd08      	pop	{r3, pc}
 8018f5a:	bf00      	nop
 8018f5c:	2000b4f0 	.word	0x2000b4f0

08018f60 <_ZL12MX_SPI2_Initv>:
{
 8018f60:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8018f62:	480e      	ldr	r0, [pc, #56]	; (8018f9c <_ZL12MX_SPI2_Initv+0x3c>)
 8018f64:	4b0e      	ldr	r3, [pc, #56]	; (8018fa0 <_ZL12MX_SPI2_Initv+0x40>)
 8018f66:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8018f68:	f44f 7382 	mov.w	r3, #260	; 0x104
 8018f6c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8018f72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8018f76:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8018f78:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8018f7a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8018f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018f80:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8018f82:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8018f84:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8018f86:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018f88:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8018f8a:	2207      	movs	r2, #7
 8018f8c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8018f8e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8018f90:	2308      	movs	r3, #8
 8018f92:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8018f94:	f7ef feca 	bl	8008d2c <HAL_SPI_Init>
}
 8018f98:	bd08      	pop	{r3, pc}
 8018f9a:	bf00      	nop
 8018f9c:	2000b53c 	.word	0x2000b53c
 8018fa0:	40003800 	.word	0x40003800

08018fa4 <_ZL12MX_TIM8_Initv>:
{
 8018fa4:	b530      	push	{r4, r5, lr}
 8018fa6:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018fa8:	2400      	movs	r4, #0
 8018faa:	9404      	str	r4, [sp, #16]
 8018fac:	9405      	str	r4, [sp, #20]
 8018fae:	9406      	str	r4, [sp, #24]
 8018fb0:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8018fb2:	9401      	str	r4, [sp, #4]
 8018fb4:	9402      	str	r4, [sp, #8]
 8018fb6:	9403      	str	r4, [sp, #12]
  htim8.Instance = TIM8;
 8018fb8:	4d0d      	ldr	r5, [pc, #52]	; (8018ff0 <_ZL12MX_TIM8_Initv+0x4c>)
 8018fba:	4b0e      	ldr	r3, [pc, #56]	; (8018ff4 <_ZL12MX_TIM8_Initv+0x50>)
 8018fbc:	602b      	str	r3, [r5, #0]
  htim8.Init.Prescaler = 0;
 8018fbe:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018fc0:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 0;
 8018fc2:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018fc4:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 8018fc6:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8018fc8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8018fca:	4628      	mov	r0, r5
 8018fcc:	f7ef ff40 	bl	8008e50 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8018fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018fd4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8018fd6:	a904      	add	r1, sp, #16
 8018fd8:	4628      	mov	r0, r5
 8018fda:	f7f0 fa1b 	bl	8009414 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018fde:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8018fe0:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8018fe2:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8018fe4:	a901      	add	r1, sp, #4
 8018fe6:	4628      	mov	r0, r5
 8018fe8:	f7f0 fe8e 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
}
 8018fec:	b009      	add	sp, #36	; 0x24
 8018fee:	bd30      	pop	{r4, r5, pc}
 8018ff0:	2000b660 	.word	0x2000b660
 8018ff4:	40010400 	.word	0x40010400

08018ff8 <_ZL12MX_TIM3_Initv>:
{
 8018ff8:	b530      	push	{r4, r5, lr}
 8018ffa:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018ffc:	2400      	movs	r4, #0
 8018ffe:	940a      	str	r4, [sp, #40]	; 0x28
 8019000:	940b      	str	r4, [sp, #44]	; 0x2c
 8019002:	940c      	str	r4, [sp, #48]	; 0x30
 8019004:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8019006:	9407      	str	r4, [sp, #28]
 8019008:	9408      	str	r4, [sp, #32]
 801900a:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 801900c:	9400      	str	r4, [sp, #0]
 801900e:	9401      	str	r4, [sp, #4]
 8019010:	9402      	str	r4, [sp, #8]
 8019012:	9403      	str	r4, [sp, #12]
 8019014:	9404      	str	r4, [sp, #16]
 8019016:	9405      	str	r4, [sp, #20]
 8019018:	9406      	str	r4, [sp, #24]
  htim3.Instance = TIM3;
 801901a:	4d15      	ldr	r5, [pc, #84]	; (8019070 <_ZL12MX_TIM3_Initv+0x78>)
 801901c:	4b15      	ldr	r3, [pc, #84]	; (8019074 <_ZL12MX_TIM3_Initv+0x7c>)
 801901e:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 8019020:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019022:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
 8019024:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8019026:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8019028:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801902a:	4628      	mov	r0, r5
 801902c:	f7ef ff10 	bl	8008e50 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8019030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019034:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8019036:	a90a      	add	r1, sp, #40	; 0x28
 8019038:	4628      	mov	r0, r5
 801903a:	f7f0 f9eb 	bl	8009414 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801903e:	4628      	mov	r0, r5
 8019040:	f7ef ff86 	bl	8008f50 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8019044:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8019046:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8019048:	a907      	add	r1, sp, #28
 801904a:	4628      	mov	r0, r5
 801904c:	f7f0 fe5c 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8019050:	2360      	movs	r3, #96	; 0x60
 8019052:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8019054:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8019056:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8019058:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801905a:	4622      	mov	r2, r4
 801905c:	4669      	mov	r1, sp
 801905e:	4628      	mov	r0, r5
 8019060:	f7f0 f8c0 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8019064:	4628      	mov	r0, r5
 8019066:	f001 f859 	bl	801a11c <HAL_TIM_MspPostInit>
}
 801906a:	b00f      	add	sp, #60	; 0x3c
 801906c:	bd30      	pop	{r4, r5, pc}
 801906e:	bf00      	nop
 8019070:	2000b5e0 	.word	0x2000b5e0
 8019074:	40000400 	.word	0x40000400

08019078 <_ZL12MX_TIM5_Initv>:
{
 8019078:	b530      	push	{r4, r5, lr}
 801907a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801907c:	2400      	movs	r4, #0
 801907e:	940a      	str	r4, [sp, #40]	; 0x28
 8019080:	940b      	str	r4, [sp, #44]	; 0x2c
 8019082:	940c      	str	r4, [sp, #48]	; 0x30
 8019084:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8019086:	9407      	str	r4, [sp, #28]
 8019088:	9408      	str	r4, [sp, #32]
 801908a:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 801908c:	9400      	str	r4, [sp, #0]
 801908e:	9401      	str	r4, [sp, #4]
 8019090:	9402      	str	r4, [sp, #8]
 8019092:	9403      	str	r4, [sp, #12]
 8019094:	9404      	str	r4, [sp, #16]
 8019096:	9405      	str	r4, [sp, #20]
 8019098:	9406      	str	r4, [sp, #24]
  htim5.Instance = TIM5;
 801909a:	4d15      	ldr	r5, [pc, #84]	; (80190f0 <_ZL12MX_TIM5_Initv+0x78>)
 801909c:	4b15      	ldr	r3, [pc, #84]	; (80190f4 <_ZL12MX_TIM5_Initv+0x7c>)
 801909e:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 80190a0:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80190a2:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 80190a4:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80190a6:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80190a8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80190aa:	4628      	mov	r0, r5
 80190ac:	f7ef fed0 	bl	8008e50 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80190b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80190b4:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80190b6:	a90a      	add	r1, sp, #40	; 0x28
 80190b8:	4628      	mov	r0, r5
 80190ba:	f7f0 f9ab 	bl	8009414 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80190be:	4628      	mov	r0, r5
 80190c0:	f7ef ff46 	bl	8008f50 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80190c4:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80190c6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80190c8:	a907      	add	r1, sp, #28
 80190ca:	4628      	mov	r0, r5
 80190cc:	f7f0 fe1c 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80190d0:	2360      	movs	r3, #96	; 0x60
 80190d2:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 80190d4:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80190d6:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80190d8:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80190da:	220c      	movs	r2, #12
 80190dc:	4669      	mov	r1, sp
 80190de:	4628      	mov	r0, r5
 80190e0:	f7f0 f880 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 80190e4:	4628      	mov	r0, r5
 80190e6:	f001 f819 	bl	801a11c <HAL_TIM_MspPostInit>
}
 80190ea:	b00f      	add	sp, #60	; 0x3c
 80190ec:	bd30      	pop	{r4, r5, pc}
 80190ee:	bf00      	nop
 80190f0:	2000b620 	.word	0x2000b620
 80190f4:	40000c00 	.word	0x40000c00

080190f8 <_ZL13MX_TIM12_Initv>:
{
 80190f8:	b530      	push	{r4, r5, lr}
 80190fa:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80190fc:	2400      	movs	r4, #0
 80190fe:	9401      	str	r4, [sp, #4]
 8019100:	9402      	str	r4, [sp, #8]
 8019102:	9403      	str	r4, [sp, #12]
 8019104:	9404      	str	r4, [sp, #16]
 8019106:	9405      	str	r4, [sp, #20]
 8019108:	9406      	str	r4, [sp, #24]
 801910a:	9407      	str	r4, [sp, #28]
  htim12.Instance = TIM12;
 801910c:	4d0c      	ldr	r5, [pc, #48]	; (8019140 <_ZL13MX_TIM12_Initv+0x48>)
 801910e:	4b0d      	ldr	r3, [pc, #52]	; (8019144 <_ZL13MX_TIM12_Initv+0x4c>)
 8019110:	602b      	str	r3, [r5, #0]
  htim12.Init.Prescaler = 0;
 8019112:	606c      	str	r4, [r5, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019114:	60ac      	str	r4, [r5, #8]
  htim12.Init.Period = 0;
 8019116:	60ec      	str	r4, [r5, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8019118:	612c      	str	r4, [r5, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801911a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 801911c:	4628      	mov	r0, r5
 801911e:	f7ef ff17 	bl	8008f50 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8019122:	2360      	movs	r3, #96	; 0x60
 8019124:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8019126:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8019128:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801912a:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801912c:	4622      	mov	r2, r4
 801912e:	a901      	add	r1, sp, #4
 8019130:	4628      	mov	r0, r5
 8019132:	f7f0 f857 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 8019136:	4628      	mov	r0, r5
 8019138:	f000 fff0 	bl	801a11c <HAL_TIM_MspPostInit>
}
 801913c:	b009      	add	sp, #36	; 0x24
 801913e:	bd30      	pop	{r4, r5, pc}
 8019140:	2000b5a0 	.word	0x2000b5a0
 8019144:	40001800 	.word	0x40001800

08019148 <_ZL19MX_USART1_UART_Initv>:
{
 8019148:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 801914a:	4809      	ldr	r0, [pc, #36]	; (8019170 <_ZL19MX_USART1_UART_Initv+0x28>)
 801914c:	4b09      	ldr	r3, [pc, #36]	; (8019174 <_ZL19MX_USART1_UART_Initv+0x2c>)
 801914e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8019150:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8019154:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8019156:	2300      	movs	r3, #0
 8019158:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801915a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801915c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801915e:	220c      	movs	r2, #12
 8019160:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8019162:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8019164:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8019166:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8019168:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801916a:	f7f0 fec5 	bl	8009ef8 <HAL_UART_Init>
}
 801916e:	bd08      	pop	{r3, pc}
 8019170:	2000b6a0 	.word	0x2000b6a0
 8019174:	40011000 	.word	0x40011000

08019178 <_ZL19MX_USART6_UART_Initv>:
{
 8019178:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 801917a:	4809      	ldr	r0, [pc, #36]	; (80191a0 <_ZL19MX_USART6_UART_Initv+0x28>)
 801917c:	4b09      	ldr	r3, [pc, #36]	; (80191a4 <_ZL19MX_USART6_UART_Initv+0x2c>)
 801917e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8019180:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8019184:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8019186:	2300      	movs	r3, #0
 8019188:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 801918a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 801918c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801918e:	220c      	movs	r2, #12
 8019190:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8019192:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8019194:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8019196:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8019198:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801919a:	f7f0 fead 	bl	8009ef8 <HAL_UART_Init>
}
 801919e:	bd08      	pop	{r3, pc}
 80191a0:	2000b720 	.word	0x2000b720
 80191a4:	40011400 	.word	0x40011400

080191a8 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80191a8:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 80191aa:	f7ff fb99 	bl	80188e0 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80191ae:	f001 fae9 	bl	801a784 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 80191b2:	f7fe fad1 	bl	8017758 <_Z17GRAPHICS_MainTaskv>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80191b6:	2001      	movs	r0, #1
 80191b8:	f7fb f83f 	bl	801423a <osDelay>
 80191bc:	e7fb      	b.n	80191b6 <_Z16StartDefaultTaskPKv+0xe>
	...

080191c0 <SystemClock_Config>:
{
 80191c0:	b570      	push	{r4, r5, r6, lr}
 80191c2:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80191c4:	2230      	movs	r2, #48	; 0x30
 80191c6:	2100      	movs	r1, #0
 80191c8:	a828      	add	r0, sp, #160	; 0xa0
 80191ca:	f009 fd30 	bl	8022c2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80191ce:	2400      	movs	r4, #0
 80191d0:	9423      	str	r4, [sp, #140]	; 0x8c
 80191d2:	9424      	str	r4, [sp, #144]	; 0x90
 80191d4:	9425      	str	r4, [sp, #148]	; 0x94
 80191d6:	9426      	str	r4, [sp, #152]	; 0x98
 80191d8:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80191da:	2284      	movs	r2, #132	; 0x84
 80191dc:	4621      	mov	r1, r4
 80191de:	a802      	add	r0, sp, #8
 80191e0:	f009 fd25 	bl	8022c2e <memset>
  HAL_PWR_EnableBkUpAccess();
 80191e4:	f7ec fbda 	bl	800599c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80191e8:	4b2f      	ldr	r3, [pc, #188]	; (80192a8 <SystemClock_Config+0xe8>)
 80191ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80191ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80191f0:	641a      	str	r2, [r3, #64]	; 0x40
 80191f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80191f8:	9300      	str	r3, [sp, #0]
 80191fa:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80191fc:	4b2b      	ldr	r3, [pc, #172]	; (80192ac <SystemClock_Config+0xec>)
 80191fe:	681a      	ldr	r2, [r3, #0]
 8019200:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8019204:	601a      	str	r2, [r3, #0]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801920c:	9301      	str	r3, [sp, #4]
 801920e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8019210:	2309      	movs	r3, #9
 8019212:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8019214:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8019218:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801921a:	2601      	movs	r6, #1
 801921c:	962d      	str	r6, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801921e:	2502      	movs	r5, #2
 8019220:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8019222:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8019226:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8019228:	2219      	movs	r2, #25
 801922a:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 801922c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8019230:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8019232:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8019234:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8019236:	a828      	add	r0, sp, #160	; 0xa0
 8019238:	f7ec fce0 	bl	8005bfc <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801923c:	f7ec fbbe 	bl	80059bc <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8019240:	230f      	movs	r3, #15
 8019242:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8019244:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8019246:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8019248:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801924c:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801924e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019252:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8019254:	2106      	movs	r1, #6
 8019256:	a823      	add	r0, sp, #140	; 0x8c
 8019258:	f7ec ff40 	bl	80060dc <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 801925c:	4b14      	ldr	r3, [pc, #80]	; (80192b0 <SystemClock_Config+0xf0>)
 801925e:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8019260:	2364      	movs	r3, #100	; 0x64
 8019262:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8019264:	9506      	str	r5, [sp, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8019266:	9504      	str	r5, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8019268:	9505      	str	r5, [sp, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 801926a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801926e:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8019270:	2305      	movs	r3, #5
 8019272:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8019274:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8019276:	2303      	movs	r3, #3
 8019278:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 801927a:	960b      	str	r6, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 801927c:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 801927e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019282:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8019284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019288:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 801928a:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801928c:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 801928e:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8019290:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8019292:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8019294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8019298:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 801929a:	9422      	str	r4, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801929c:	a802      	add	r0, sp, #8
 801929e:	f7ed f91d 	bl	80064dc <HAL_RCCEx_PeriphCLKConfig>
}
 80192a2:	b034      	add	sp, #208	; 0xd0
 80192a4:	bd70      	pop	{r4, r5, r6, pc}
 80192a6:	bf00      	nop
 80192a8:	40023800 	.word	0x40023800
 80192ac:	40007000 	.word	0x40007000
 80192b0:	01b14868 	.word	0x01b14868

080192b4 <main>:
{
 80192b4:	b500      	push	{lr}
 80192b6:	b087      	sub	sp, #28
  HAL_Init();
 80192b8:	f7e7 fc1c 	bl	8000af4 <HAL_Init>
  SystemClock_Config();
 80192bc:	f7ff ff80 	bl	80191c0 <SystemClock_Config>
  MX_GPIO_Init();
 80192c0:	f7ff fb50 	bl	8018964 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 80192c4:	f7ff fcae 	bl	8018c24 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 80192c8:	f7ff fcda 	bl	8018c80 <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 80192cc:	f7ff fcea 	bl	8018ca4 <_ZL12MX_DCMI_Initv>
  MX_ETH_Init();
 80192d0:	f7ff fd00 	bl	8018cd4 <_ZL11MX_ETH_Initv>
  MX_I2C1_Init();
 80192d4:	f7ff fd26 	bl	8018d24 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 80192d8:	f7ff fd46 	bl	8018d68 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 80192dc:	f7ff fd66 	bl	8018dac <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 80192e0:	f7ff fd7a 	bl	8018dd8 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 80192e4:	f7ff fddc 	bl	8018ea0 <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 80192e8:	f7ff fb2c 	bl	8018944 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 80192ec:	f7ff fe22 	bl	8018f34 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 80192f0:	f7ff fe36 	bl	8018f60 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 80192f4:	f7ff fe80 	bl	8018ff8 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 80192f8:	f7ff febe 	bl	8019078 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 80192fc:	f7ff fe52 	bl	8018fa4 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 8019300:	f7ff fefa 	bl	80190f8 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8019304:	f7ff ff20 	bl	8019148 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8019308:	f7ff ff36 	bl	8019178 <_ZL19MX_USART6_UART_Initv>
  GRAPHICS_HW_Init();
 801930c:	f7fe fa14 	bl	8017738 <_Z16GRAPHICS_HW_Initv>
  GRAPHICS_Init();
 8019310:	f7fe fb46 	bl	80179a0 <_Z13GRAPHICS_Initv>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8019314:	ac01      	add	r4, sp, #4
 8019316:	4d07      	ldr	r5, [pc, #28]	; (8019334 <main+0x80>)
 8019318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801931a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801931c:	682b      	ldr	r3, [r5, #0]
 801931e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8019320:	2100      	movs	r1, #0
 8019322:	a801      	add	r0, sp, #4
 8019324:	f7fa ff62 	bl	80141ec <osThreadCreate>
 8019328:	4b03      	ldr	r3, [pc, #12]	; (8019338 <main+0x84>)
 801932a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 801932c:	f7fa ff3b 	bl	80141a6 <osKernelStart>
 8019330:	e7fe      	b.n	8019330 <main+0x7c>
 8019332:	bf00      	nop
 8019334:	08023b78 	.word	0x08023b78
 8019338:	2000b158 	.word	0x2000b158

0801933c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801933c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 801933e:	6802      	ldr	r2, [r0, #0]
 8019340:	4b03      	ldr	r3, [pc, #12]	; (8019350 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8019342:	429a      	cmp	r2, r3
 8019344:	d000      	beq.n	8019348 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8019346:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8019348:	f7e7 fbe2 	bl	8000b10 <HAL_IncTick>
}
 801934c:	e7fb      	b.n	8019346 <HAL_TIM_PeriodElapsedCallback+0xa>
 801934e:	bf00      	nop
 8019350:	40001000 	.word	0x40001000

08019354 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8019354:	4770      	bx	lr

08019356 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8019356:	b580      	push	{r7, lr}
 8019358:	b084      	sub	sp, #16
 801935a:	af00      	add	r7, sp, #0
 801935c:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 801935e:	f7fa ff35 	bl	80141cc <osKernelSysTick>
 8019362:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8019364:	e006      	b.n	8019374 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8019366:	f7ff fa81 	bl	801886c <BSP_SD_GetCardState>
 801936a:	4603      	mov	r3, r0
 801936c:	2b00      	cmp	r3, #0
 801936e:	d101      	bne.n	8019374 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8019370:	2300      	movs	r3, #0
 8019372:	e009      	b.n	8019388 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8019374:	f7fa ff2a 	bl	80141cc <osKernelSysTick>
 8019378:	4602      	mov	r2, r0
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	1ad3      	subs	r3, r2, r3
 801937e:	687a      	ldr	r2, [r7, #4]
 8019380:	429a      	cmp	r2, r3
 8019382:	d8f0      	bhi.n	8019366 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8019384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019388:	4618      	mov	r0, r3
 801938a:	3710      	adds	r7, #16
 801938c:	46bd      	mov	sp, r7
 801938e:	bd80      	pop	{r7, pc}

08019390 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b082      	sub	sp, #8
 8019394:	af00      	add	r7, sp, #0
 8019396:	4603      	mov	r3, r0
 8019398:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801939a:	4b0b      	ldr	r3, [pc, #44]	; (80193c8 <SD_CheckStatus+0x38>)
 801939c:	2201      	movs	r2, #1
 801939e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80193a0:	f7ff fa64 	bl	801886c <BSP_SD_GetCardState>
 80193a4:	4603      	mov	r3, r0
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d107      	bne.n	80193ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80193aa:	4b07      	ldr	r3, [pc, #28]	; (80193c8 <SD_CheckStatus+0x38>)
 80193ac:	781b      	ldrb	r3, [r3, #0]
 80193ae:	b2db      	uxtb	r3, r3
 80193b0:	f023 0301 	bic.w	r3, r3, #1
 80193b4:	b2da      	uxtb	r2, r3
 80193b6:	4b04      	ldr	r3, [pc, #16]	; (80193c8 <SD_CheckStatus+0x38>)
 80193b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80193ba:	4b03      	ldr	r3, [pc, #12]	; (80193c8 <SD_CheckStatus+0x38>)
 80193bc:	781b      	ldrb	r3, [r3, #0]
 80193be:	b2db      	uxtb	r3, r3
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	3708      	adds	r7, #8
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd80      	pop	{r7, pc}
 80193c8:	2000005c 	.word	0x2000005c

080193cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b084      	sub	sp, #16
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	4603      	mov	r3, r0
 80193d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80193d6:	4b1a      	ldr	r3, [pc, #104]	; (8019440 <SD_initialize+0x74>)
 80193d8:	2201      	movs	r2, #1
 80193da:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80193dc:	f7fa feea 	bl	80141b4 <osKernelRunning>
 80193e0:	4603      	mov	r3, r0
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d025      	beq.n	8019432 <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80193e6:	f7ff f9e7 	bl	80187b8 <BSP_SD_Init>
 80193ea:	4603      	mov	r3, r0
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d107      	bne.n	8019400 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80193f0:	79fb      	ldrb	r3, [r7, #7]
 80193f2:	4618      	mov	r0, r3
 80193f4:	f7ff ffcc 	bl	8019390 <SD_CheckStatus>
 80193f8:	4603      	mov	r3, r0
 80193fa:	461a      	mov	r2, r3
 80193fc:	4b10      	ldr	r3, [pc, #64]	; (8019440 <SD_initialize+0x74>)
 80193fe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8019400:	4b0f      	ldr	r3, [pc, #60]	; (8019440 <SD_initialize+0x74>)
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	b2db      	uxtb	r3, r3
 8019406:	2b01      	cmp	r3, #1
 8019408:	d013      	beq.n	8019432 <SD_initialize+0x66>
 801940a:	4b0e      	ldr	r3, [pc, #56]	; (8019444 <SD_initialize+0x78>)
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d10f      	bne.n	8019432 <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8019412:	4a0d      	ldr	r2, [pc, #52]	; (8019448 <SD_initialize+0x7c>)
 8019414:	f107 0308 	add.w	r3, r7, #8
 8019418:	e892 0003 	ldmia.w	r2, {r0, r1}
 801941c:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8019420:	f107 0308 	add.w	r3, r7, #8
 8019424:	2100      	movs	r1, #0
 8019426:	4618      	mov	r0, r3
 8019428:	f7fa ffd7 	bl	80143da <osMessageCreate>
 801942c:	4602      	mov	r2, r0
 801942e:	4b05      	ldr	r3, [pc, #20]	; (8019444 <SD_initialize+0x78>)
 8019430:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 8019432:	4b03      	ldr	r3, [pc, #12]	; (8019440 <SD_initialize+0x74>)
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	b2db      	uxtb	r3, r3
}
 8019438:	4618      	mov	r0, r3
 801943a:	3710      	adds	r7, #16
 801943c:	46bd      	mov	sp, r7
 801943e:	bd80      	pop	{r7, pc}
 8019440:	2000005c 	.word	0x2000005c
 8019444:	2000b9a0 	.word	0x2000b9a0
 8019448:	08023b8c 	.word	0x08023b8c

0801944c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b082      	sub	sp, #8
 8019450:	af00      	add	r7, sp, #0
 8019452:	4603      	mov	r3, r0
 8019454:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8019456:	79fb      	ldrb	r3, [r7, #7]
 8019458:	4618      	mov	r0, r3
 801945a:	f7ff ff99 	bl	8019390 <SD_CheckStatus>
 801945e:	4603      	mov	r3, r0
}
 8019460:	4618      	mov	r0, r3
 8019462:	3708      	adds	r7, #8
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}

08019468 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b08e      	sub	sp, #56	; 0x38
 801946c:	af00      	add	r7, sp, #0
 801946e:	61b9      	str	r1, [r7, #24]
 8019470:	617a      	str	r2, [r7, #20]
 8019472:	613b      	str	r3, [r7, #16]
 8019474:	4603      	mov	r3, r0
 8019476:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8019478:	2301      	movs	r3, #1
 801947a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801947e:	f247 5030 	movw	r0, #30000	; 0x7530
 8019482:	f7ff ff68 	bl	8019356 <SD_CheckStatusWithTimeout>
 8019486:	4603      	mov	r3, r0
 8019488:	2b00      	cmp	r3, #0
 801948a:	da02      	bge.n	8019492 <SD_read+0x2a>
  {
    return res;
 801948c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019490:	e06c      	b.n	801956c <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8019492:	69bb      	ldr	r3, [r7, #24]
 8019494:	f003 0303 	and.w	r3, r3, #3
 8019498:	2b00      	cmp	r3, #0
 801949a:	d11e      	bne.n	80194da <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801949c:	693a      	ldr	r2, [r7, #16]
 801949e:	6979      	ldr	r1, [r7, #20]
 80194a0:	69b8      	ldr	r0, [r7, #24]
 80194a2:	f7ff f9af 	bl	8018804 <BSP_SD_ReadBlocks_DMA>
 80194a6:	4603      	mov	r3, r0
 80194a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 80194ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d159      	bne.n	8019568 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80194b4:	4b2f      	ldr	r3, [pc, #188]	; (8019574 <SD_read+0x10c>)
 80194b6:	6819      	ldr	r1, [r3, #0]
 80194b8:	f107 0320 	add.w	r3, r7, #32
 80194bc:	f247 5230 	movw	r2, #30000	; 0x7530
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7fa ffdd 	bl	8014480 <osMessageGet>
      if (event.status == osEventMessage) {
 80194c6:	6a3b      	ldr	r3, [r7, #32]
 80194c8:	2b10      	cmp	r3, #16
 80194ca:	d14d      	bne.n	8019568 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 80194cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194ce:	2b01      	cmp	r3, #1
 80194d0:	d14a      	bne.n	8019568 <SD_read+0x100>
          res = RES_OK;
 80194d2:	2300      	movs	r3, #0
 80194d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80194d8:	e046      	b.n	8019568 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 80194da:	2300      	movs	r3, #0
 80194dc:	633b      	str	r3, [r7, #48]	; 0x30
 80194de:	e032      	b.n	8019546 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80194e0:	697b      	ldr	r3, [r7, #20]
 80194e2:	1c5a      	adds	r2, r3, #1
 80194e4:	617a      	str	r2, [r7, #20]
 80194e6:	2201      	movs	r2, #1
 80194e8:	4619      	mov	r1, r3
 80194ea:	4823      	ldr	r0, [pc, #140]	; (8019578 <SD_read+0x110>)
 80194ec:	f7ff f98a 	bl	8018804 <BSP_SD_ReadBlocks_DMA>
 80194f0:	4603      	mov	r3, r0
 80194f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 80194f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d128      	bne.n	8019550 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80194fe:	4b1d      	ldr	r3, [pc, #116]	; (8019574 <SD_read+0x10c>)
 8019500:	6819      	ldr	r1, [r3, #0]
 8019502:	463b      	mov	r3, r7
 8019504:	f247 5230 	movw	r2, #30000	; 0x7530
 8019508:	4618      	mov	r0, r3
 801950a:	f7fa ffb9 	bl	8014480 <osMessageGet>
 801950e:	f107 0320 	add.w	r3, r7, #32
 8019512:	463a      	mov	r2, r7
 8019514:	ca07      	ldmia	r2, {r0, r1, r2}
 8019516:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801951a:	6a3b      	ldr	r3, [r7, #32]
 801951c:	2b10      	cmp	r3, #16
 801951e:	d10f      	bne.n	8019540 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8019520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019522:	2b01      	cmp	r3, #1
 8019524:	d10c      	bne.n	8019540 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8019526:	69bb      	ldr	r3, [r7, #24]
 8019528:	4a13      	ldr	r2, [pc, #76]	; (8019578 <SD_read+0x110>)
 801952a:	4618      	mov	r0, r3
 801952c:	4611      	mov	r1, r2
 801952e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019532:	461a      	mov	r2, r3
 8019534:	f009 fb70 	bl	8022c18 <memcpy>
            buff += BLOCKSIZE;
 8019538:	69bb      	ldr	r3, [r7, #24]
 801953a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801953e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8019540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019542:	3301      	adds	r3, #1
 8019544:	633b      	str	r3, [r7, #48]	; 0x30
 8019546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019548:	693a      	ldr	r2, [r7, #16]
 801954a:	429a      	cmp	r2, r3
 801954c:	d8c8      	bhi.n	80194e0 <SD_read+0x78>
 801954e:	e000      	b.n	8019552 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8019550:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8019552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019554:	693a      	ldr	r2, [r7, #16]
 8019556:	429a      	cmp	r2, r3
 8019558:	d106      	bne.n	8019568 <SD_read+0x100>
 801955a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801955e:	2b00      	cmp	r3, #0
 8019560:	d102      	bne.n	8019568 <SD_read+0x100>
      res = RES_OK;
 8019562:	2300      	movs	r3, #0
 8019564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8019568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 801956c:	4618      	mov	r0, r3
 801956e:	3738      	adds	r7, #56	; 0x38
 8019570:	46bd      	mov	sp, r7
 8019572:	bd80      	pop	{r7, pc}
 8019574:	2000b9a0 	.word	0x2000b9a0
 8019578:	2000b7a0 	.word	0x2000b7a0

0801957c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b090      	sub	sp, #64	; 0x40
 8019580:	af00      	add	r7, sp, #0
 8019582:	61b9      	str	r1, [r7, #24]
 8019584:	617a      	str	r2, [r7, #20]
 8019586:	613b      	str	r3, [r7, #16]
 8019588:	4603      	mov	r3, r0
 801958a:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 801958c:	2301      	movs	r3, #1
 801958e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8019592:	f247 5030 	movw	r0, #30000	; 0x7530
 8019596:	f7ff fede 	bl	8019356 <SD_CheckStatusWithTimeout>
 801959a:	4603      	mov	r3, r0
 801959c:	2b00      	cmp	r3, #0
 801959e:	da02      	bge.n	80195a6 <SD_write+0x2a>
  {
    return res;
 80195a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195a4:	e07c      	b.n	80196a0 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80195a6:	69bb      	ldr	r3, [r7, #24]
 80195a8:	f003 0303 	and.w	r3, r3, #3
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d12e      	bne.n	801960e <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80195b0:	693a      	ldr	r2, [r7, #16]
 80195b2:	6979      	ldr	r1, [r7, #20]
 80195b4:	69b8      	ldr	r0, [r7, #24]
 80195b6:	f7ff f93f 	bl	8018838 <BSP_SD_WriteBlocks_DMA>
 80195ba:	4603      	mov	r3, r0
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d16d      	bne.n	801969c <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80195c0:	4b39      	ldr	r3, [pc, #228]	; (80196a8 <SD_write+0x12c>)
 80195c2:	6819      	ldr	r1, [r3, #0]
 80195c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80195c8:	f247 5230 	movw	r2, #30000	; 0x7530
 80195cc:	4618      	mov	r0, r3
 80195ce:	f7fa ff57 	bl	8014480 <osMessageGet>

      if (event.status == osEventMessage)
 80195d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d4:	2b10      	cmp	r3, #16
 80195d6:	d161      	bne.n	801969c <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 80195d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195da:	2b02      	cmp	r3, #2
 80195dc:	d15e      	bne.n	801969c <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 80195de:	f7fa fdf5 	bl	80141cc <osKernelSysTick>
 80195e2:	4602      	mov	r2, r0
 80195e4:	f247 5330 	movw	r3, #30000	; 0x7530
 80195e8:	4413      	add	r3, r2
 80195ea:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 80195ec:	e008      	b.n	8019600 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80195ee:	f7ff f93d 	bl	801886c <BSP_SD_GetCardState>
 80195f2:	4603      	mov	r3, r0
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d103      	bne.n	8019600 <SD_write+0x84>
            {
              res = RES_OK;
 80195f8:	2300      	movs	r3, #0
 80195fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80195fe:	e04d      	b.n	801969c <SD_write+0x120>
          while(timer > osKernelSysTick())
 8019600:	f7fa fde4 	bl	80141cc <osKernelSysTick>
 8019604:	4602      	mov	r2, r0
 8019606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019608:	4293      	cmp	r3, r2
 801960a:	d8f0      	bhi.n	80195ee <SD_write+0x72>
 801960c:	e046      	b.n	801969c <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 801960e:	2300      	movs	r3, #0
 8019610:	63bb      	str	r3, [r7, #56]	; 0x38
 8019612:	e032      	b.n	801967a <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8019614:	697b      	ldr	r3, [r7, #20]
 8019616:	1c5a      	adds	r2, r3, #1
 8019618:	617a      	str	r2, [r7, #20]
 801961a:	2201      	movs	r2, #1
 801961c:	4619      	mov	r1, r3
 801961e:	4823      	ldr	r0, [pc, #140]	; (80196ac <SD_write+0x130>)
 8019620:	f7ff f90a 	bl	8018838 <BSP_SD_WriteBlocks_DMA>
 8019624:	4603      	mov	r3, r0
 8019626:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 801962a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801962e:	2b00      	cmp	r3, #0
 8019630:	d128      	bne.n	8019684 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8019632:	4b1d      	ldr	r3, [pc, #116]	; (80196a8 <SD_write+0x12c>)
 8019634:	6819      	ldr	r1, [r3, #0]
 8019636:	463b      	mov	r3, r7
 8019638:	f247 5230 	movw	r2, #30000	; 0x7530
 801963c:	4618      	mov	r0, r3
 801963e:	f7fa ff1f 	bl	8014480 <osMessageGet>
 8019642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019646:	463a      	mov	r2, r7
 8019648:	ca07      	ldmia	r2, {r0, r1, r2}
 801964a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019650:	2b10      	cmp	r3, #16
 8019652:	d10f      	bne.n	8019674 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8019654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019656:	2b02      	cmp	r3, #2
 8019658:	d10c      	bne.n	8019674 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 801965a:	69bb      	ldr	r3, [r7, #24]
 801965c:	4a13      	ldr	r2, [pc, #76]	; (80196ac <SD_write+0x130>)
 801965e:	4618      	mov	r0, r3
 8019660:	4611      	mov	r1, r2
 8019662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019666:	461a      	mov	r2, r3
 8019668:	f009 fad6 	bl	8022c18 <memcpy>
            buff += BLOCKSIZE;
 801966c:	69bb      	ldr	r3, [r7, #24]
 801966e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019672:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8019674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019676:	3301      	adds	r3, #1
 8019678:	63bb      	str	r3, [r7, #56]	; 0x38
 801967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801967c:	693a      	ldr	r2, [r7, #16]
 801967e:	429a      	cmp	r2, r3
 8019680:	d8c8      	bhi.n	8019614 <SD_write+0x98>
 8019682:	e000      	b.n	8019686 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8019684:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8019686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019688:	693a      	ldr	r2, [r7, #16]
 801968a:	429a      	cmp	r2, r3
 801968c:	d106      	bne.n	801969c <SD_write+0x120>
 801968e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019692:	2b00      	cmp	r3, #0
 8019694:	d102      	bne.n	801969c <SD_write+0x120>
      res = RES_OK;
 8019696:	2300      	movs	r3, #0
 8019698:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 801969c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 80196a0:	4618      	mov	r0, r3
 80196a2:	3740      	adds	r7, #64	; 0x40
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}
 80196a8:	2000b9a0 	.word	0x2000b9a0
 80196ac:	2000b7a0 	.word	0x2000b7a0

080196b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b08c      	sub	sp, #48	; 0x30
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	4603      	mov	r3, r0
 80196b8:	603a      	str	r2, [r7, #0]
 80196ba:	71fb      	strb	r3, [r7, #7]
 80196bc:	460b      	mov	r3, r1
 80196be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80196c0:	2301      	movs	r3, #1
 80196c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80196c6:	4b25      	ldr	r3, [pc, #148]	; (801975c <SD_ioctl+0xac>)
 80196c8:	781b      	ldrb	r3, [r3, #0]
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	f003 0301 	and.w	r3, r3, #1
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d001      	beq.n	80196d8 <SD_ioctl+0x28>
 80196d4:	2303      	movs	r3, #3
 80196d6:	e03c      	b.n	8019752 <SD_ioctl+0xa2>

  switch (cmd)
 80196d8:	79bb      	ldrb	r3, [r7, #6]
 80196da:	2b03      	cmp	r3, #3
 80196dc:	d834      	bhi.n	8019748 <SD_ioctl+0x98>
 80196de:	a201      	add	r2, pc, #4	; (adr r2, 80196e4 <SD_ioctl+0x34>)
 80196e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196e4:	080196f5 	.word	0x080196f5
 80196e8:	080196fd 	.word	0x080196fd
 80196ec:	08019715 	.word	0x08019715
 80196f0:	0801972f 	.word	0x0801972f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80196f4:	2300      	movs	r3, #0
 80196f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80196fa:	e028      	b.n	801974e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80196fc:	f107 030c 	add.w	r3, r7, #12
 8019700:	4618      	mov	r0, r3
 8019702:	f7ff f8c3 	bl	801888c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8019706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801970c:	2300      	movs	r3, #0
 801970e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8019712:	e01c      	b.n	801974e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8019714:	f107 030c 	add.w	r3, r7, #12
 8019718:	4618      	mov	r0, r3
 801971a:	f7ff f8b7 	bl	801888c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019720:	b29a      	uxth	r2, r3
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8019726:	2300      	movs	r3, #0
 8019728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801972c:	e00f      	b.n	801974e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801972e:	f107 030c 	add.w	r3, r7, #12
 8019732:	4618      	mov	r0, r3
 8019734:	f7ff f8aa 	bl	801888c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8019738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801973a:	0a5a      	lsrs	r2, r3, #9
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8019740:	2300      	movs	r3, #0
 8019742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8019746:	e002      	b.n	801974e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8019748:	2304      	movs	r3, #4
 801974a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801974e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8019752:	4618      	mov	r0, r3
 8019754:	3730      	adds	r7, #48	; 0x30
 8019756:	46bd      	mov	sp, r7
 8019758:	bd80      	pop	{r7, pc}
 801975a:	bf00      	nop
 801975c:	2000005c 	.word	0x2000005c

08019760 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8019764:	4b04      	ldr	r3, [pc, #16]	; (8019778 <BSP_SD_ReadCpltCallback+0x18>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	f04f 32ff 	mov.w	r2, #4294967295
 801976c:	2101      	movs	r1, #1
 801976e:	4618      	mov	r0, r3
 8019770:	f7fa fe46 	bl	8014400 <osMessagePut>
}
 8019774:	bf00      	nop
 8019776:	bd80      	pop	{r7, pc}
 8019778:	2000b9a0 	.word	0x2000b9a0

0801977c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b082      	sub	sp, #8
 8019780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8019782:	4b11      	ldr	r3, [pc, #68]	; (80197c8 <HAL_MspInit+0x4c>)
 8019784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019786:	4a10      	ldr	r2, [pc, #64]	; (80197c8 <HAL_MspInit+0x4c>)
 8019788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801978c:	6413      	str	r3, [r2, #64]	; 0x40
 801978e:	4b0e      	ldr	r3, [pc, #56]	; (80197c8 <HAL_MspInit+0x4c>)
 8019790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019796:	607b      	str	r3, [r7, #4]
 8019798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801979a:	4b0b      	ldr	r3, [pc, #44]	; (80197c8 <HAL_MspInit+0x4c>)
 801979c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801979e:	4a0a      	ldr	r2, [pc, #40]	; (80197c8 <HAL_MspInit+0x4c>)
 80197a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80197a4:	6453      	str	r3, [r2, #68]	; 0x44
 80197a6:	4b08      	ldr	r3, [pc, #32]	; (80197c8 <HAL_MspInit+0x4c>)
 80197a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80197ae:	603b      	str	r3, [r7, #0]
 80197b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80197b2:	2200      	movs	r2, #0
 80197b4:	210f      	movs	r1, #15
 80197b6:	f06f 0001 	mvn.w	r0, #1
 80197ba:	f7e7 fd37 	bl	800122c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80197be:	bf00      	nop
 80197c0:	3708      	adds	r7, #8
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bd80      	pop	{r7, pc}
 80197c6:	bf00      	nop
 80197c8:	40023800 	.word	0x40023800

080197cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b08a      	sub	sp, #40	; 0x28
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80197d4:	f107 0314 	add.w	r3, r7, #20
 80197d8:	2200      	movs	r2, #0
 80197da:	601a      	str	r2, [r3, #0]
 80197dc:	605a      	str	r2, [r3, #4]
 80197de:	609a      	str	r2, [r3, #8]
 80197e0:	60da      	str	r2, [r3, #12]
 80197e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	4a21      	ldr	r2, [pc, #132]	; (8019870 <HAL_ADC_MspInit+0xa4>)
 80197ea:	4293      	cmp	r3, r2
 80197ec:	d13c      	bne.n	8019868 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80197ee:	4b21      	ldr	r3, [pc, #132]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 80197f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197f2:	4a20      	ldr	r2, [pc, #128]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 80197f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80197f8:	6453      	str	r3, [r2, #68]	; 0x44
 80197fa:	4b1e      	ldr	r3, [pc, #120]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 80197fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019802:	613b      	str	r3, [r7, #16]
 8019804:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8019806:	4b1b      	ldr	r3, [pc, #108]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 8019808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801980a:	4a1a      	ldr	r2, [pc, #104]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 801980c:	f043 0320 	orr.w	r3, r3, #32
 8019810:	6313      	str	r3, [r2, #48]	; 0x30
 8019812:	4b18      	ldr	r3, [pc, #96]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 8019814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019816:	f003 0320 	and.w	r3, r3, #32
 801981a:	60fb      	str	r3, [r7, #12]
 801981c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801981e:	4b15      	ldr	r3, [pc, #84]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 8019820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019822:	4a14      	ldr	r2, [pc, #80]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 8019824:	f043 0301 	orr.w	r3, r3, #1
 8019828:	6313      	str	r3, [r2, #48]	; 0x30
 801982a:	4b12      	ldr	r3, [pc, #72]	; (8019874 <HAL_ADC_MspInit+0xa8>)
 801982c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801982e:	f003 0301 	and.w	r3, r3, #1
 8019832:	60bb      	str	r3, [r7, #8]
 8019834:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8019836:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801983a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801983c:	2303      	movs	r3, #3
 801983e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019840:	2300      	movs	r3, #0
 8019842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019844:	f107 0314 	add.w	r3, r7, #20
 8019848:	4619      	mov	r1, r3
 801984a:	480b      	ldr	r0, [pc, #44]	; (8019878 <HAL_ADC_MspInit+0xac>)
 801984c:	f7e8 ff80 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8019850:	2301      	movs	r3, #1
 8019852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8019854:	2303      	movs	r3, #3
 8019856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019858:	2300      	movs	r3, #0
 801985a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 801985c:	f107 0314 	add.w	r3, r7, #20
 8019860:	4619      	mov	r1, r3
 8019862:	4806      	ldr	r0, [pc, #24]	; (801987c <HAL_ADC_MspInit+0xb0>)
 8019864:	f7e8 ff74 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8019868:	bf00      	nop
 801986a:	3728      	adds	r7, #40	; 0x28
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}
 8019870:	40012200 	.word	0x40012200
 8019874:	40023800 	.word	0x40023800
 8019878:	40021400 	.word	0x40021400
 801987c:	40020000 	.word	0x40020000

08019880 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8019880:	b480      	push	{r7}
 8019882:	b085      	sub	sp, #20
 8019884:	af00      	add	r7, sp, #0
 8019886:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	4a0a      	ldr	r2, [pc, #40]	; (80198b8 <HAL_CRC_MspInit+0x38>)
 801988e:	4293      	cmp	r3, r2
 8019890:	d10b      	bne.n	80198aa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8019892:	4b0a      	ldr	r3, [pc, #40]	; (80198bc <HAL_CRC_MspInit+0x3c>)
 8019894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019896:	4a09      	ldr	r2, [pc, #36]	; (80198bc <HAL_CRC_MspInit+0x3c>)
 8019898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801989c:	6313      	str	r3, [r2, #48]	; 0x30
 801989e:	4b07      	ldr	r3, [pc, #28]	; (80198bc <HAL_CRC_MspInit+0x3c>)
 80198a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80198a6:	60fb      	str	r3, [r7, #12]
 80198a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80198aa:	bf00      	nop
 80198ac:	3714      	adds	r7, #20
 80198ae:	46bd      	mov	sp, r7
 80198b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b4:	4770      	bx	lr
 80198b6:	bf00      	nop
 80198b8:	40023000 	.word	0x40023000
 80198bc:	40023800 	.word	0x40023800

080198c0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b08e      	sub	sp, #56	; 0x38
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80198c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80198cc:	2200      	movs	r2, #0
 80198ce:	601a      	str	r2, [r3, #0]
 80198d0:	605a      	str	r2, [r3, #4]
 80198d2:	609a      	str	r2, [r3, #8]
 80198d4:	60da      	str	r2, [r3, #12]
 80198d6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	4a50      	ldr	r2, [pc, #320]	; (8019a20 <HAL_DCMI_MspInit+0x160>)
 80198de:	4293      	cmp	r3, r2
 80198e0:	f040 809a 	bne.w	8019a18 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80198e4:	4b4f      	ldr	r3, [pc, #316]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 80198e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198e8:	4a4e      	ldr	r2, [pc, #312]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 80198ea:	f043 0301 	orr.w	r3, r3, #1
 80198ee:	6353      	str	r3, [r2, #52]	; 0x34
 80198f0:	4b4c      	ldr	r3, [pc, #304]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 80198f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198f4:	f003 0301 	and.w	r3, r3, #1
 80198f8:	623b      	str	r3, [r7, #32]
 80198fa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80198fc:	4b49      	ldr	r3, [pc, #292]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 80198fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019900:	4a48      	ldr	r2, [pc, #288]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 8019902:	f043 0310 	orr.w	r3, r3, #16
 8019906:	6313      	str	r3, [r2, #48]	; 0x30
 8019908:	4b46      	ldr	r3, [pc, #280]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 801990a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801990c:	f003 0310 	and.w	r3, r3, #16
 8019910:	61fb      	str	r3, [r7, #28]
 8019912:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8019914:	4b43      	ldr	r3, [pc, #268]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 8019916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019918:	4a42      	ldr	r2, [pc, #264]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 801991a:	f043 0308 	orr.w	r3, r3, #8
 801991e:	6313      	str	r3, [r2, #48]	; 0x30
 8019920:	4b40      	ldr	r3, [pc, #256]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 8019922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019924:	f003 0308 	and.w	r3, r3, #8
 8019928:	61bb      	str	r3, [r7, #24]
 801992a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801992c:	4b3d      	ldr	r3, [pc, #244]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 801992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019930:	4a3c      	ldr	r2, [pc, #240]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 8019932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019936:	6313      	str	r3, [r2, #48]	; 0x30
 8019938:	4b3a      	ldr	r3, [pc, #232]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 801993a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801993c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019940:	617b      	str	r3, [r7, #20]
 8019942:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8019944:	4b37      	ldr	r3, [pc, #220]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 8019946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019948:	4a36      	ldr	r2, [pc, #216]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 801994a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801994e:	6313      	str	r3, [r2, #48]	; 0x30
 8019950:	4b34      	ldr	r3, [pc, #208]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 8019952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019958:	613b      	str	r3, [r7, #16]
 801995a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801995c:	4b31      	ldr	r3, [pc, #196]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 801995e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019960:	4a30      	ldr	r2, [pc, #192]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 8019962:	f043 0301 	orr.w	r3, r3, #1
 8019966:	6313      	str	r3, [r2, #48]	; 0x30
 8019968:	4b2e      	ldr	r3, [pc, #184]	; (8019a24 <HAL_DCMI_MspInit+0x164>)
 801996a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801996c:	f003 0301 	and.w	r3, r3, #1
 8019970:	60fb      	str	r3, [r7, #12]
 8019972:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8019974:	2360      	movs	r3, #96	; 0x60
 8019976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019978:	2302      	movs	r3, #2
 801997a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801997c:	2300      	movs	r3, #0
 801997e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019980:	2300      	movs	r3, #0
 8019982:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8019984:	230d      	movs	r3, #13
 8019986:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8019988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801998c:	4619      	mov	r1, r3
 801998e:	4826      	ldr	r0, [pc, #152]	; (8019a28 <HAL_DCMI_MspInit+0x168>)
 8019990:	f7e8 fede 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8019994:	2308      	movs	r3, #8
 8019996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019998:	2302      	movs	r3, #2
 801999a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801999c:	2300      	movs	r3, #0
 801999e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80199a0:	2300      	movs	r3, #0
 80199a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80199a4:	230d      	movs	r3, #13
 80199a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80199a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80199ac:	4619      	mov	r1, r3
 80199ae:	481f      	ldr	r0, [pc, #124]	; (8019a2c <HAL_DCMI_MspInit+0x16c>)
 80199b0:	f7e8 fece 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80199b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80199b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80199ba:	2302      	movs	r3, #2
 80199bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80199be:	2300      	movs	r3, #0
 80199c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80199c2:	2300      	movs	r3, #0
 80199c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80199c6:	230d      	movs	r3, #13
 80199c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80199ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80199ce:	4619      	mov	r1, r3
 80199d0:	4817      	ldr	r0, [pc, #92]	; (8019a30 <HAL_DCMI_MspInit+0x170>)
 80199d2:	f7e8 febd 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80199d6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80199da:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80199dc:	2302      	movs	r3, #2
 80199de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80199e0:	2300      	movs	r3, #0
 80199e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80199e4:	2300      	movs	r3, #0
 80199e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80199e8:	230d      	movs	r3, #13
 80199ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80199ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80199f0:	4619      	mov	r1, r3
 80199f2:	4810      	ldr	r0, [pc, #64]	; (8019a34 <HAL_DCMI_MspInit+0x174>)
 80199f4:	f7e8 feac 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80199f8:	2350      	movs	r3, #80	; 0x50
 80199fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80199fc:	2302      	movs	r3, #2
 80199fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019a00:	2300      	movs	r3, #0
 8019a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019a04:	2300      	movs	r3, #0
 8019a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8019a08:	230d      	movs	r3, #13
 8019a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a10:	4619      	mov	r1, r3
 8019a12:	4809      	ldr	r0, [pc, #36]	; (8019a38 <HAL_DCMI_MspInit+0x178>)
 8019a14:	f7e8 fe9c 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8019a18:	bf00      	nop
 8019a1a:	3738      	adds	r7, #56	; 0x38
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	bd80      	pop	{r7, pc}
 8019a20:	50050000 	.word	0x50050000
 8019a24:	40023800 	.word	0x40023800
 8019a28:	40021000 	.word	0x40021000
 8019a2c:	40020c00 	.word	0x40020c00
 8019a30:	40021800 	.word	0x40021800
 8019a34:	40021c00 	.word	0x40021c00
 8019a38:	40020000 	.word	0x40020000

08019a3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b08e      	sub	sp, #56	; 0x38
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a48:	2200      	movs	r2, #0
 8019a4a:	601a      	str	r2, [r3, #0]
 8019a4c:	605a      	str	r2, [r3, #4]
 8019a4e:	609a      	str	r2, [r3, #8]
 8019a50:	60da      	str	r2, [r3, #12]
 8019a52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	4a3f      	ldr	r2, [pc, #252]	; (8019b58 <HAL_ETH_MspInit+0x11c>)
 8019a5a:	4293      	cmp	r3, r2
 8019a5c:	d178      	bne.n	8019b50 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8019a5e:	4b3f      	ldr	r3, [pc, #252]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a62:	4a3e      	ldr	r2, [pc, #248]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019a68:	6313      	str	r3, [r2, #48]	; 0x30
 8019a6a:	4b3c      	ldr	r3, [pc, #240]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019a72:	623b      	str	r3, [r7, #32]
 8019a74:	6a3b      	ldr	r3, [r7, #32]
 8019a76:	4b39      	ldr	r3, [pc, #228]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a7a:	4a38      	ldr	r2, [pc, #224]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019a80:	6313      	str	r3, [r2, #48]	; 0x30
 8019a82:	4b36      	ldr	r3, [pc, #216]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019a8a:	61fb      	str	r3, [r7, #28]
 8019a8c:	69fb      	ldr	r3, [r7, #28]
 8019a8e:	4b33      	ldr	r3, [pc, #204]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a92:	4a32      	ldr	r2, [pc, #200]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019a98:	6313      	str	r3, [r2, #48]	; 0x30
 8019a9a:	4b30      	ldr	r3, [pc, #192]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019aa2:	61bb      	str	r3, [r7, #24]
 8019aa4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8019aa6:	4b2d      	ldr	r3, [pc, #180]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019aaa:	4a2c      	ldr	r2, [pc, #176]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8019ab2:	4b2a      	ldr	r3, [pc, #168]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019aba:	617b      	str	r3, [r7, #20]
 8019abc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8019abe:	4b27      	ldr	r3, [pc, #156]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ac2:	4a26      	ldr	r2, [pc, #152]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019ac4:	f043 0304 	orr.w	r3, r3, #4
 8019ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8019aca:	4b24      	ldr	r3, [pc, #144]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ace:	f003 0304 	and.w	r3, r3, #4
 8019ad2:	613b      	str	r3, [r7, #16]
 8019ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019ad6:	4b21      	ldr	r3, [pc, #132]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ada:	4a20      	ldr	r2, [pc, #128]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019adc:	f043 0301 	orr.w	r3, r3, #1
 8019ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8019ae2:	4b1e      	ldr	r3, [pc, #120]	; (8019b5c <HAL_ETH_MspInit+0x120>)
 8019ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ae6:	f003 0301 	and.w	r3, r3, #1
 8019aea:	60fb      	str	r3, [r7, #12]
 8019aec:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8019aee:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8019af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019af4:	2302      	movs	r3, #2
 8019af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019af8:	2300      	movs	r3, #0
 8019afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019afc:	2303      	movs	r3, #3
 8019afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8019b00:	230b      	movs	r3, #11
 8019b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8019b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019b08:	4619      	mov	r1, r3
 8019b0a:	4815      	ldr	r0, [pc, #84]	; (8019b60 <HAL_ETH_MspInit+0x124>)
 8019b0c:	f7e8 fe20 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8019b10:	2332      	movs	r3, #50	; 0x32
 8019b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019b14:	2302      	movs	r3, #2
 8019b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019b18:	2300      	movs	r3, #0
 8019b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019b1c:	2303      	movs	r3, #3
 8019b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8019b20:	230b      	movs	r3, #11
 8019b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8019b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019b28:	4619      	mov	r1, r3
 8019b2a:	480e      	ldr	r0, [pc, #56]	; (8019b64 <HAL_ETH_MspInit+0x128>)
 8019b2c:	f7e8 fe10 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8019b30:	2386      	movs	r3, #134	; 0x86
 8019b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019b34:	2302      	movs	r3, #2
 8019b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019b38:	2300      	movs	r3, #0
 8019b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019b3c:	2303      	movs	r3, #3
 8019b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8019b40:	230b      	movs	r3, #11
 8019b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019b48:	4619      	mov	r1, r3
 8019b4a:	4807      	ldr	r0, [pc, #28]	; (8019b68 <HAL_ETH_MspInit+0x12c>)
 8019b4c:	f7e8 fe00 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8019b50:	bf00      	nop
 8019b52:	3738      	adds	r7, #56	; 0x38
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}
 8019b58:	40028000 	.word	0x40028000
 8019b5c:	40023800 	.word	0x40023800
 8019b60:	40021800 	.word	0x40021800
 8019b64:	40020800 	.word	0x40020800
 8019b68:	40020000 	.word	0x40020000

08019b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b08c      	sub	sp, #48	; 0x30
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019b74:	f107 031c 	add.w	r3, r7, #28
 8019b78:	2200      	movs	r2, #0
 8019b7a:	601a      	str	r2, [r3, #0]
 8019b7c:	605a      	str	r2, [r3, #4]
 8019b7e:	609a      	str	r2, [r3, #8]
 8019b80:	60da      	str	r2, [r3, #12]
 8019b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	4a2f      	ldr	r2, [pc, #188]	; (8019c48 <HAL_I2C_MspInit+0xdc>)
 8019b8a:	4293      	cmp	r3, r2
 8019b8c:	d129      	bne.n	8019be2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019b8e:	4b2f      	ldr	r3, [pc, #188]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b92:	4a2e      	ldr	r2, [pc, #184]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019b94:	f043 0302 	orr.w	r3, r3, #2
 8019b98:	6313      	str	r3, [r2, #48]	; 0x30
 8019b9a:	4b2c      	ldr	r3, [pc, #176]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b9e:	f003 0302 	and.w	r3, r3, #2
 8019ba2:	61bb      	str	r3, [r7, #24]
 8019ba4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8019ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8019bac:	2312      	movs	r3, #18
 8019bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8019bb8:	2304      	movs	r3, #4
 8019bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019bbc:	f107 031c 	add.w	r3, r7, #28
 8019bc0:	4619      	mov	r1, r3
 8019bc2:	4823      	ldr	r0, [pc, #140]	; (8019c50 <HAL_I2C_MspInit+0xe4>)
 8019bc4:	f7e8 fdc4 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8019bc8:	4b20      	ldr	r3, [pc, #128]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bcc:	4a1f      	ldr	r2, [pc, #124]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8019bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8019bd4:	4b1d      	ldr	r3, [pc, #116]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019bdc:	617b      	str	r3, [r7, #20]
 8019bde:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8019be0:	e02d      	b.n	8019c3e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	4a1b      	ldr	r2, [pc, #108]	; (8019c54 <HAL_I2C_MspInit+0xe8>)
 8019be8:	4293      	cmp	r3, r2
 8019bea:	d128      	bne.n	8019c3e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8019bec:	4b17      	ldr	r3, [pc, #92]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bf0:	4a16      	ldr	r2, [pc, #88]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8019bf8:	4b14      	ldr	r3, [pc, #80]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019c00:	613b      	str	r3, [r7, #16]
 8019c02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8019c04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8019c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8019c0a:	2312      	movs	r3, #18
 8019c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8019c0e:	2301      	movs	r3, #1
 8019c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019c12:	2303      	movs	r3, #3
 8019c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8019c16:	2304      	movs	r3, #4
 8019c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8019c1a:	f107 031c 	add.w	r3, r7, #28
 8019c1e:	4619      	mov	r1, r3
 8019c20:	480d      	ldr	r0, [pc, #52]	; (8019c58 <HAL_I2C_MspInit+0xec>)
 8019c22:	f7e8 fd95 	bl	8002750 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8019c26:	4b09      	ldr	r3, [pc, #36]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c2a:	4a08      	ldr	r2, [pc, #32]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019c30:	6413      	str	r3, [r2, #64]	; 0x40
 8019c32:	4b06      	ldr	r3, [pc, #24]	; (8019c4c <HAL_I2C_MspInit+0xe0>)
 8019c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019c3a:	60fb      	str	r3, [r7, #12]
 8019c3c:	68fb      	ldr	r3, [r7, #12]
}
 8019c3e:	bf00      	nop
 8019c40:	3730      	adds	r7, #48	; 0x30
 8019c42:	46bd      	mov	sp, r7
 8019c44:	bd80      	pop	{r7, pc}
 8019c46:	bf00      	nop
 8019c48:	40005400 	.word	0x40005400
 8019c4c:	40023800 	.word	0x40023800
 8019c50:	40020400 	.word	0x40020400
 8019c54:	40005c00 	.word	0x40005c00
 8019c58:	40021c00 	.word	0x40021c00

08019c5c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b082      	sub	sp, #8
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	4a11      	ldr	r2, [pc, #68]	; (8019cb0 <HAL_I2C_MspDeInit+0x54>)
 8019c6a:	4293      	cmp	r3, r2
 8019c6c:	d10b      	bne.n	8019c86 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8019c6e:	4b11      	ldr	r3, [pc, #68]	; (8019cb4 <HAL_I2C_MspDeInit+0x58>)
 8019c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c72:	4a10      	ldr	r2, [pc, #64]	; (8019cb4 <HAL_I2C_MspDeInit+0x58>)
 8019c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8019c78:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8019c7a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8019c7e:	480e      	ldr	r0, [pc, #56]	; (8019cb8 <HAL_I2C_MspDeInit+0x5c>)
 8019c80:	f7e8 ff10 	bl	8002aa4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8019c84:	e00f      	b.n	8019ca6 <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	4a0c      	ldr	r2, [pc, #48]	; (8019cbc <HAL_I2C_MspDeInit+0x60>)
 8019c8c:	4293      	cmp	r3, r2
 8019c8e:	d10a      	bne.n	8019ca6 <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8019c90:	4b08      	ldr	r3, [pc, #32]	; (8019cb4 <HAL_I2C_MspDeInit+0x58>)
 8019c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c94:	4a07      	ldr	r2, [pc, #28]	; (8019cb4 <HAL_I2C_MspDeInit+0x58>)
 8019c96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019c9a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8019c9c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019ca0:	4807      	ldr	r0, [pc, #28]	; (8019cc0 <HAL_I2C_MspDeInit+0x64>)
 8019ca2:	f7e8 feff 	bl	8002aa4 <HAL_GPIO_DeInit>
}
 8019ca6:	bf00      	nop
 8019ca8:	3708      	adds	r7, #8
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}
 8019cae:	bf00      	nop
 8019cb0:	40005400 	.word	0x40005400
 8019cb4:	40023800 	.word	0x40023800
 8019cb8:	40020400 	.word	0x40020400
 8019cbc:	40005c00 	.word	0x40005c00
 8019cc0:	40021c00 	.word	0x40021c00

08019cc4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b08c      	sub	sp, #48	; 0x30
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ccc:	f107 031c 	add.w	r3, r7, #28
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	601a      	str	r2, [r3, #0]
 8019cd4:	605a      	str	r2, [r3, #4]
 8019cd6:	609a      	str	r2, [r3, #8]
 8019cd8:	60da      	str	r2, [r3, #12]
 8019cda:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	4a3b      	ldr	r2, [pc, #236]	; (8019dd0 <HAL_QSPI_MspInit+0x10c>)
 8019ce2:	4293      	cmp	r3, r2
 8019ce4:	d170      	bne.n	8019dc8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8019ce6:	4b3b      	ldr	r3, [pc, #236]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cea:	4a3a      	ldr	r2, [pc, #232]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019cec:	f043 0302 	orr.w	r3, r3, #2
 8019cf0:	6393      	str	r3, [r2, #56]	; 0x38
 8019cf2:	4b38      	ldr	r3, [pc, #224]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cf6:	f003 0302 	and.w	r3, r3, #2
 8019cfa:	61bb      	str	r3, [r7, #24]
 8019cfc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8019cfe:	4b35      	ldr	r3, [pc, #212]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d02:	4a34      	ldr	r2, [pc, #208]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d04:	f043 0310 	orr.w	r3, r3, #16
 8019d08:	6313      	str	r3, [r2, #48]	; 0x30
 8019d0a:	4b32      	ldr	r3, [pc, #200]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d0e:	f003 0310 	and.w	r3, r3, #16
 8019d12:	617b      	str	r3, [r7, #20]
 8019d14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019d16:	4b2f      	ldr	r3, [pc, #188]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d1a:	4a2e      	ldr	r2, [pc, #184]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d1c:	f043 0302 	orr.w	r3, r3, #2
 8019d20:	6313      	str	r3, [r2, #48]	; 0x30
 8019d22:	4b2c      	ldr	r3, [pc, #176]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d26:	f003 0302 	and.w	r3, r3, #2
 8019d2a:	613b      	str	r3, [r7, #16]
 8019d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8019d2e:	4b29      	ldr	r3, [pc, #164]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d32:	4a28      	ldr	r2, [pc, #160]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d34:	f043 0308 	orr.w	r3, r3, #8
 8019d38:	6313      	str	r3, [r2, #48]	; 0x30
 8019d3a:	4b26      	ldr	r3, [pc, #152]	; (8019dd4 <HAL_QSPI_MspInit+0x110>)
 8019d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d3e:	f003 0308 	and.w	r3, r3, #8
 8019d42:	60fb      	str	r3, [r7, #12]
 8019d44:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8019d46:	2304      	movs	r3, #4
 8019d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019d4a:	2302      	movs	r3, #2
 8019d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019d4e:	2300      	movs	r3, #0
 8019d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019d52:	2303      	movs	r3, #3
 8019d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8019d56:	2309      	movs	r3, #9
 8019d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8019d5a:	f107 031c 	add.w	r3, r7, #28
 8019d5e:	4619      	mov	r1, r3
 8019d60:	481d      	ldr	r0, [pc, #116]	; (8019dd8 <HAL_QSPI_MspInit+0x114>)
 8019d62:	f7e8 fcf5 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8019d66:	2340      	movs	r3, #64	; 0x40
 8019d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019d6a:	2302      	movs	r3, #2
 8019d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019d6e:	2300      	movs	r3, #0
 8019d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019d72:	2303      	movs	r3, #3
 8019d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8019d76:	230a      	movs	r3, #10
 8019d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8019d7a:	f107 031c 	add.w	r3, r7, #28
 8019d7e:	4619      	mov	r1, r3
 8019d80:	4816      	ldr	r0, [pc, #88]	; (8019ddc <HAL_QSPI_MspInit+0x118>)
 8019d82:	f7e8 fce5 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8019d86:	2304      	movs	r3, #4
 8019d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019d8a:	2302      	movs	r3, #2
 8019d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019d8e:	2300      	movs	r3, #0
 8019d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019d92:	2303      	movs	r3, #3
 8019d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8019d96:	2309      	movs	r3, #9
 8019d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019d9a:	f107 031c 	add.w	r3, r7, #28
 8019d9e:	4619      	mov	r1, r3
 8019da0:	480e      	ldr	r0, [pc, #56]	; (8019ddc <HAL_QSPI_MspInit+0x118>)
 8019da2:	f7e8 fcd5 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8019da6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8019daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019dac:	2302      	movs	r3, #2
 8019dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019db0:	2300      	movs	r3, #0
 8019db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019db4:	2303      	movs	r3, #3
 8019db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8019db8:	2309      	movs	r3, #9
 8019dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8019dbc:	f107 031c 	add.w	r3, r7, #28
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	4807      	ldr	r0, [pc, #28]	; (8019de0 <HAL_QSPI_MspInit+0x11c>)
 8019dc4:	f7e8 fcc4 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8019dc8:	bf00      	nop
 8019dca:	3730      	adds	r7, #48	; 0x30
 8019dcc:	46bd      	mov	sp, r7
 8019dce:	bd80      	pop	{r7, pc}
 8019dd0:	a0001000 	.word	0xa0001000
 8019dd4:	40023800 	.word	0x40023800
 8019dd8:	40021000 	.word	0x40021000
 8019ddc:	40020400 	.word	0x40020400
 8019de0:	40020c00 	.word	0x40020c00

08019de4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8019de4:	b480      	push	{r7}
 8019de6:	b083      	sub	sp, #12
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	4a07      	ldr	r2, [pc, #28]	; (8019e10 <HAL_RTC_MspInit+0x2c>)
 8019df2:	4293      	cmp	r3, r2
 8019df4:	d105      	bne.n	8019e02 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8019df6:	4b07      	ldr	r3, [pc, #28]	; (8019e14 <HAL_RTC_MspInit+0x30>)
 8019df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019dfa:	4a06      	ldr	r2, [pc, #24]	; (8019e14 <HAL_RTC_MspInit+0x30>)
 8019dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019e00:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8019e02:	bf00      	nop
 8019e04:	370c      	adds	r7, #12
 8019e06:	46bd      	mov	sp, r7
 8019e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0c:	4770      	bx	lr
 8019e0e:	bf00      	nop
 8019e10:	40002800 	.word	0x40002800
 8019e14:	40023800 	.word	0x40023800

08019e18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8019e18:	b580      	push	{r7, lr}
 8019e1a:	b08a      	sub	sp, #40	; 0x28
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019e20:	f107 0314 	add.w	r3, r7, #20
 8019e24:	2200      	movs	r2, #0
 8019e26:	601a      	str	r2, [r3, #0]
 8019e28:	605a      	str	r2, [r3, #4]
 8019e2a:	609a      	str	r2, [r3, #8]
 8019e2c:	60da      	str	r2, [r3, #12]
 8019e2e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	4a25      	ldr	r2, [pc, #148]	; (8019ecc <HAL_SD_MspInit+0xb4>)
 8019e36:	4293      	cmp	r3, r2
 8019e38:	d144      	bne.n	8019ec4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8019e3a:	4b25      	ldr	r3, [pc, #148]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e3e:	4a24      	ldr	r2, [pc, #144]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019e44:	6453      	str	r3, [r2, #68]	; 0x44
 8019e46:	4b22      	ldr	r3, [pc, #136]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019e4e:	613b      	str	r3, [r7, #16]
 8019e50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8019e52:	4b1f      	ldr	r3, [pc, #124]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e56:	4a1e      	ldr	r2, [pc, #120]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e58:	f043 0304 	orr.w	r3, r3, #4
 8019e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8019e5e:	4b1c      	ldr	r3, [pc, #112]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e62:	f003 0304 	and.w	r3, r3, #4
 8019e66:	60fb      	str	r3, [r7, #12]
 8019e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8019e6a:	4b19      	ldr	r3, [pc, #100]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e6e:	4a18      	ldr	r2, [pc, #96]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e70:	f043 0308 	orr.w	r3, r3, #8
 8019e74:	6313      	str	r3, [r2, #48]	; 0x30
 8019e76:	4b16      	ldr	r3, [pc, #88]	; (8019ed0 <HAL_SD_MspInit+0xb8>)
 8019e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e7a:	f003 0308 	and.w	r3, r3, #8
 8019e7e:	60bb      	str	r3, [r7, #8]
 8019e80:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8019e82:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8019e86:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019e88:	2302      	movs	r3, #2
 8019e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019e90:	2303      	movs	r3, #3
 8019e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8019e94:	230c      	movs	r3, #12
 8019e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8019e98:	f107 0314 	add.w	r3, r7, #20
 8019e9c:	4619      	mov	r1, r3
 8019e9e:	480d      	ldr	r0, [pc, #52]	; (8019ed4 <HAL_SD_MspInit+0xbc>)
 8019ea0:	f7e8 fc56 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8019ea4:	2304      	movs	r3, #4
 8019ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019ea8:	2302      	movs	r3, #2
 8019eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019eac:	2300      	movs	r3, #0
 8019eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019eb0:	2303      	movs	r3, #3
 8019eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8019eb4:	230c      	movs	r3, #12
 8019eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8019eb8:	f107 0314 	add.w	r3, r7, #20
 8019ebc:	4619      	mov	r1, r3
 8019ebe:	4806      	ldr	r0, [pc, #24]	; (8019ed8 <HAL_SD_MspInit+0xc0>)
 8019ec0:	f7e8 fc46 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8019ec4:	bf00      	nop
 8019ec6:	3728      	adds	r7, #40	; 0x28
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}
 8019ecc:	40012c00 	.word	0x40012c00
 8019ed0:	40023800 	.word	0x40023800
 8019ed4:	40020800 	.word	0x40020800
 8019ed8:	40020c00 	.word	0x40020c00

08019edc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b08a      	sub	sp, #40	; 0x28
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ee4:	f107 0314 	add.w	r3, r7, #20
 8019ee8:	2200      	movs	r2, #0
 8019eea:	601a      	str	r2, [r3, #0]
 8019eec:	605a      	str	r2, [r3, #4]
 8019eee:	609a      	str	r2, [r3, #8]
 8019ef0:	60da      	str	r2, [r3, #12]
 8019ef2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8019efc:	d127      	bne.n	8019f4e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8019efe:	4b16      	ldr	r3, [pc, #88]	; (8019f58 <HAL_SPDIFRX_MspInit+0x7c>)
 8019f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f02:	4a15      	ldr	r2, [pc, #84]	; (8019f58 <HAL_SPDIFRX_MspInit+0x7c>)
 8019f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019f08:	6413      	str	r3, [r2, #64]	; 0x40
 8019f0a:	4b13      	ldr	r3, [pc, #76]	; (8019f58 <HAL_SPDIFRX_MspInit+0x7c>)
 8019f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019f12:	613b      	str	r3, [r7, #16]
 8019f14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8019f16:	4b10      	ldr	r3, [pc, #64]	; (8019f58 <HAL_SPDIFRX_MspInit+0x7c>)
 8019f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f1a:	4a0f      	ldr	r2, [pc, #60]	; (8019f58 <HAL_SPDIFRX_MspInit+0x7c>)
 8019f1c:	f043 0308 	orr.w	r3, r3, #8
 8019f20:	6313      	str	r3, [r2, #48]	; 0x30
 8019f22:	4b0d      	ldr	r3, [pc, #52]	; (8019f58 <HAL_SPDIFRX_MspInit+0x7c>)
 8019f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f26:	f003 0308 	and.w	r3, r3, #8
 8019f2a:	60fb      	str	r3, [r7, #12]
 8019f2c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8019f2e:	2380      	movs	r3, #128	; 0x80
 8019f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019f32:	2302      	movs	r3, #2
 8019f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019f36:	2300      	movs	r3, #0
 8019f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8019f3e:	2308      	movs	r3, #8
 8019f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8019f42:	f107 0314 	add.w	r3, r7, #20
 8019f46:	4619      	mov	r1, r3
 8019f48:	4804      	ldr	r0, [pc, #16]	; (8019f5c <HAL_SPDIFRX_MspInit+0x80>)
 8019f4a:	f7e8 fc01 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8019f4e:	bf00      	nop
 8019f50:	3728      	adds	r7, #40	; 0x28
 8019f52:	46bd      	mov	sp, r7
 8019f54:	bd80      	pop	{r7, pc}
 8019f56:	bf00      	nop
 8019f58:	40023800 	.word	0x40023800
 8019f5c:	40020c00 	.word	0x40020c00

08019f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b08a      	sub	sp, #40	; 0x28
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019f68:	f107 0314 	add.w	r3, r7, #20
 8019f6c:	2200      	movs	r2, #0
 8019f6e:	601a      	str	r2, [r3, #0]
 8019f70:	605a      	str	r2, [r3, #4]
 8019f72:	609a      	str	r2, [r3, #8]
 8019f74:	60da      	str	r2, [r3, #12]
 8019f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	4a25      	ldr	r2, [pc, #148]	; (801a014 <HAL_SPI_MspInit+0xb4>)
 8019f7e:	4293      	cmp	r3, r2
 8019f80:	d144      	bne.n	801a00c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8019f82:	4b25      	ldr	r3, [pc, #148]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f86:	4a24      	ldr	r2, [pc, #144]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8019f8e:	4b22      	ldr	r3, [pc, #136]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019f96:	613b      	str	r3, [r7, #16]
 8019f98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8019f9a:	4b1f      	ldr	r3, [pc, #124]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f9e:	4a1e      	ldr	r2, [pc, #120]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8019fa6:	4b1c      	ldr	r3, [pc, #112]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019fae:	60fb      	str	r3, [r7, #12]
 8019fb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019fb2:	4b19      	ldr	r3, [pc, #100]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019fb6:	4a18      	ldr	r2, [pc, #96]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019fb8:	f043 0302 	orr.w	r3, r3, #2
 8019fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8019fbe:	4b16      	ldr	r3, [pc, #88]	; (801a018 <HAL_SPI_MspInit+0xb8>)
 8019fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019fc2:	f003 0302 	and.w	r3, r3, #2
 8019fc6:	60bb      	str	r3, [r7, #8]
 8019fc8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8019fca:	2302      	movs	r3, #2
 8019fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019fce:	2302      	movs	r3, #2
 8019fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019fd2:	2300      	movs	r3, #0
 8019fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8019fda:	2305      	movs	r3, #5
 8019fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8019fde:	f107 0314 	add.w	r3, r7, #20
 8019fe2:	4619      	mov	r1, r3
 8019fe4:	480d      	ldr	r0, [pc, #52]	; (801a01c <HAL_SPI_MspInit+0xbc>)
 8019fe6:	f7e8 fbb3 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8019fea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8019fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019ff0:	2302      	movs	r3, #2
 8019ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8019ffc:	2305      	movs	r3, #5
 8019ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801a000:	f107 0314 	add.w	r3, r7, #20
 801a004:	4619      	mov	r1, r3
 801a006:	4806      	ldr	r0, [pc, #24]	; (801a020 <HAL_SPI_MspInit+0xc0>)
 801a008:	f7e8 fba2 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 801a00c:	bf00      	nop
 801a00e:	3728      	adds	r7, #40	; 0x28
 801a010:	46bd      	mov	sp, r7
 801a012:	bd80      	pop	{r7, pc}
 801a014:	40003800 	.word	0x40003800
 801a018:	40023800 	.word	0x40023800
 801a01c:	40022000 	.word	0x40022000
 801a020:	40020400 	.word	0x40020400

0801a024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801a024:	b480      	push	{r7}
 801a026:	b087      	sub	sp, #28
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	4a25      	ldr	r2, [pc, #148]	; (801a0c8 <HAL_TIM_Base_MspInit+0xa4>)
 801a032:	4293      	cmp	r3, r2
 801a034:	d10c      	bne.n	801a050 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801a036:	4b25      	ldr	r3, [pc, #148]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a03a:	4a24      	ldr	r2, [pc, #144]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a03c:	f043 0301 	orr.w	r3, r3, #1
 801a040:	6453      	str	r3, [r2, #68]	; 0x44
 801a042:	4b22      	ldr	r3, [pc, #136]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a046:	f003 0301 	and.w	r3, r3, #1
 801a04a:	617b      	str	r3, [r7, #20]
 801a04c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801a04e:	e034      	b.n	801a0ba <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	4a1e      	ldr	r2, [pc, #120]	; (801a0d0 <HAL_TIM_Base_MspInit+0xac>)
 801a056:	4293      	cmp	r3, r2
 801a058:	d10c      	bne.n	801a074 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801a05a:	4b1c      	ldr	r3, [pc, #112]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a05e:	4a1b      	ldr	r2, [pc, #108]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a060:	f043 0302 	orr.w	r3, r3, #2
 801a064:	6413      	str	r3, [r2, #64]	; 0x40
 801a066:	4b19      	ldr	r3, [pc, #100]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a06a:	f003 0302 	and.w	r3, r3, #2
 801a06e:	613b      	str	r3, [r7, #16]
 801a070:	693b      	ldr	r3, [r7, #16]
}
 801a072:	e022      	b.n	801a0ba <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	4a16      	ldr	r2, [pc, #88]	; (801a0d4 <HAL_TIM_Base_MspInit+0xb0>)
 801a07a:	4293      	cmp	r3, r2
 801a07c:	d10c      	bne.n	801a098 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801a07e:	4b13      	ldr	r3, [pc, #76]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a082:	4a12      	ldr	r2, [pc, #72]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a084:	f043 0308 	orr.w	r3, r3, #8
 801a088:	6413      	str	r3, [r2, #64]	; 0x40
 801a08a:	4b10      	ldr	r3, [pc, #64]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a08e:	f003 0308 	and.w	r3, r3, #8
 801a092:	60fb      	str	r3, [r7, #12]
 801a094:	68fb      	ldr	r3, [r7, #12]
}
 801a096:	e010      	b.n	801a0ba <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	4a0e      	ldr	r2, [pc, #56]	; (801a0d8 <HAL_TIM_Base_MspInit+0xb4>)
 801a09e:	4293      	cmp	r3, r2
 801a0a0:	d10b      	bne.n	801a0ba <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801a0a2:	4b0a      	ldr	r3, [pc, #40]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0a6:	4a09      	ldr	r2, [pc, #36]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a0a8:	f043 0302 	orr.w	r3, r3, #2
 801a0ac:	6453      	str	r3, [r2, #68]	; 0x44
 801a0ae:	4b07      	ldr	r3, [pc, #28]	; (801a0cc <HAL_TIM_Base_MspInit+0xa8>)
 801a0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0b2:	f003 0302 	and.w	r3, r3, #2
 801a0b6:	60bb      	str	r3, [r7, #8]
 801a0b8:	68bb      	ldr	r3, [r7, #8]
}
 801a0ba:	bf00      	nop
 801a0bc:	371c      	adds	r7, #28
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c4:	4770      	bx	lr
 801a0c6:	bf00      	nop
 801a0c8:	40010000 	.word	0x40010000
 801a0cc:	40023800 	.word	0x40023800
 801a0d0:	40000400 	.word	0x40000400
 801a0d4:	40000c00 	.word	0x40000c00
 801a0d8:	40010400 	.word	0x40010400

0801a0dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 801a0dc:	b480      	push	{r7}
 801a0de:	b085      	sub	sp, #20
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	4a0a      	ldr	r2, [pc, #40]	; (801a114 <HAL_TIM_PWM_MspInit+0x38>)
 801a0ea:	4293      	cmp	r3, r2
 801a0ec:	d10b      	bne.n	801a106 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 801a0ee:	4b0a      	ldr	r3, [pc, #40]	; (801a118 <HAL_TIM_PWM_MspInit+0x3c>)
 801a0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0f2:	4a09      	ldr	r2, [pc, #36]	; (801a118 <HAL_TIM_PWM_MspInit+0x3c>)
 801a0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0f8:	6413      	str	r3, [r2, #64]	; 0x40
 801a0fa:	4b07      	ldr	r3, [pc, #28]	; (801a118 <HAL_TIM_PWM_MspInit+0x3c>)
 801a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a102:	60fb      	str	r3, [r7, #12]
 801a104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 801a106:	bf00      	nop
 801a108:	3714      	adds	r7, #20
 801a10a:	46bd      	mov	sp, r7
 801a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a110:	4770      	bx	lr
 801a112:	bf00      	nop
 801a114:	40001800 	.word	0x40001800
 801a118:	40023800 	.word	0x40023800

0801a11c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b08c      	sub	sp, #48	; 0x30
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a124:	f107 031c 	add.w	r3, r7, #28
 801a128:	2200      	movs	r2, #0
 801a12a:	601a      	str	r2, [r3, #0]
 801a12c:	605a      	str	r2, [r3, #4]
 801a12e:	609a      	str	r2, [r3, #8]
 801a130:	60da      	str	r2, [r3, #12]
 801a132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	4a44      	ldr	r2, [pc, #272]	; (801a24c <HAL_TIM_MspPostInit+0x130>)
 801a13a:	4293      	cmp	r3, r2
 801a13c:	d11d      	bne.n	801a17a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a13e:	4b44      	ldr	r3, [pc, #272]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a142:	4a43      	ldr	r2, [pc, #268]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a144:	f043 0301 	orr.w	r3, r3, #1
 801a148:	6313      	str	r3, [r2, #48]	; 0x30
 801a14a:	4b41      	ldr	r3, [pc, #260]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a14e:	f003 0301 	and.w	r3, r3, #1
 801a152:	61bb      	str	r3, [r7, #24]
 801a154:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 801a156:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a15a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a15c:	2302      	movs	r3, #2
 801a15e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a160:	2300      	movs	r3, #0
 801a162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a164:	2300      	movs	r3, #0
 801a166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801a168:	2301      	movs	r3, #1
 801a16a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 801a16c:	f107 031c 	add.w	r3, r7, #28
 801a170:	4619      	mov	r1, r3
 801a172:	4838      	ldr	r0, [pc, #224]	; (801a254 <HAL_TIM_MspPostInit+0x138>)
 801a174:	f7e8 faec 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 801a178:	e064      	b.n	801a244 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	4a36      	ldr	r2, [pc, #216]	; (801a258 <HAL_TIM_MspPostInit+0x13c>)
 801a180:	4293      	cmp	r3, r2
 801a182:	d11c      	bne.n	801a1be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801a184:	4b32      	ldr	r3, [pc, #200]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a188:	4a31      	ldr	r2, [pc, #196]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a18a:	f043 0302 	orr.w	r3, r3, #2
 801a18e:	6313      	str	r3, [r2, #48]	; 0x30
 801a190:	4b2f      	ldr	r3, [pc, #188]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a194:	f003 0302 	and.w	r3, r3, #2
 801a198:	617b      	str	r3, [r7, #20]
 801a19a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 801a19c:	2310      	movs	r3, #16
 801a19e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a1a0:	2302      	movs	r3, #2
 801a1a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801a1ac:	2302      	movs	r3, #2
 801a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 801a1b0:	f107 031c 	add.w	r3, r7, #28
 801a1b4:	4619      	mov	r1, r3
 801a1b6:	4829      	ldr	r0, [pc, #164]	; (801a25c <HAL_TIM_MspPostInit+0x140>)
 801a1b8:	f7e8 faca 	bl	8002750 <HAL_GPIO_Init>
}
 801a1bc:	e042      	b.n	801a244 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	4a27      	ldr	r2, [pc, #156]	; (801a260 <HAL_TIM_MspPostInit+0x144>)
 801a1c4:	4293      	cmp	r3, r2
 801a1c6:	d11c      	bne.n	801a202 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801a1c8:	4b21      	ldr	r3, [pc, #132]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1cc:	4a20      	ldr	r2, [pc, #128]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a1ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a1d2:	6313      	str	r3, [r2, #48]	; 0x30
 801a1d4:	4b1e      	ldr	r3, [pc, #120]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a1dc:	613b      	str	r3, [r7, #16]
 801a1de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 801a1e0:	2301      	movs	r3, #1
 801a1e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a1e4:	2302      	movs	r3, #2
 801a1e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a1e8:	2300      	movs	r3, #0
 801a1ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801a1f0:	2302      	movs	r3, #2
 801a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 801a1f4:	f107 031c 	add.w	r3, r7, #28
 801a1f8:	4619      	mov	r1, r3
 801a1fa:	481a      	ldr	r0, [pc, #104]	; (801a264 <HAL_TIM_MspPostInit+0x148>)
 801a1fc:	f7e8 faa8 	bl	8002750 <HAL_GPIO_Init>
}
 801a200:	e020      	b.n	801a244 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	4a18      	ldr	r2, [pc, #96]	; (801a268 <HAL_TIM_MspPostInit+0x14c>)
 801a208:	4293      	cmp	r3, r2
 801a20a:	d11b      	bne.n	801a244 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801a20c:	4b10      	ldr	r3, [pc, #64]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a210:	4a0f      	ldr	r2, [pc, #60]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a216:	6313      	str	r3, [r2, #48]	; 0x30
 801a218:	4b0d      	ldr	r3, [pc, #52]	; (801a250 <HAL_TIM_MspPostInit+0x134>)
 801a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a21c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a220:	60fb      	str	r3, [r7, #12]
 801a222:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 801a224:	2340      	movs	r3, #64	; 0x40
 801a226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a228:	2302      	movs	r3, #2
 801a22a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a22c:	2300      	movs	r3, #0
 801a22e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a230:	2300      	movs	r3, #0
 801a232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 801a234:	2309      	movs	r3, #9
 801a236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 801a238:	f107 031c 	add.w	r3, r7, #28
 801a23c:	4619      	mov	r1, r3
 801a23e:	480b      	ldr	r0, [pc, #44]	; (801a26c <HAL_TIM_MspPostInit+0x150>)
 801a240:	f7e8 fa86 	bl	8002750 <HAL_GPIO_Init>
}
 801a244:	bf00      	nop
 801a246:	3730      	adds	r7, #48	; 0x30
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}
 801a24c:	40010000 	.word	0x40010000
 801a250:	40023800 	.word	0x40023800
 801a254:	40020000 	.word	0x40020000
 801a258:	40000400 	.word	0x40000400
 801a25c:	40020400 	.word	0x40020400
 801a260:	40000c00 	.word	0x40000c00
 801a264:	40022000 	.word	0x40022000
 801a268:	40001800 	.word	0x40001800
 801a26c:	40021c00 	.word	0x40021c00

0801a270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b08c      	sub	sp, #48	; 0x30
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a278:	f107 031c 	add.w	r3, r7, #28
 801a27c:	2200      	movs	r2, #0
 801a27e:	601a      	str	r2, [r3, #0]
 801a280:	605a      	str	r2, [r3, #4]
 801a282:	609a      	str	r2, [r3, #8]
 801a284:	60da      	str	r2, [r3, #12]
 801a286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	4a3c      	ldr	r2, [pc, #240]	; (801a380 <HAL_UART_MspInit+0x110>)
 801a28e:	4293      	cmp	r3, r2
 801a290:	d145      	bne.n	801a31e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801a292:	4b3c      	ldr	r3, [pc, #240]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a296:	4a3b      	ldr	r2, [pc, #236]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a298:	f043 0310 	orr.w	r3, r3, #16
 801a29c:	6453      	str	r3, [r2, #68]	; 0x44
 801a29e:	4b39      	ldr	r3, [pc, #228]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a2a2:	f003 0310 	and.w	r3, r3, #16
 801a2a6:	61bb      	str	r3, [r7, #24]
 801a2a8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801a2aa:	4b36      	ldr	r3, [pc, #216]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2ae:	4a35      	ldr	r2, [pc, #212]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a2b0:	f043 0302 	orr.w	r3, r3, #2
 801a2b4:	6313      	str	r3, [r2, #48]	; 0x30
 801a2b6:	4b33      	ldr	r3, [pc, #204]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2ba:	f003 0302 	and.w	r3, r3, #2
 801a2be:	617b      	str	r3, [r7, #20]
 801a2c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a2c2:	4b30      	ldr	r3, [pc, #192]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2c6:	4a2f      	ldr	r2, [pc, #188]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a2c8:	f043 0301 	orr.w	r3, r3, #1
 801a2cc:	6313      	str	r3, [r2, #48]	; 0x30
 801a2ce:	4b2d      	ldr	r3, [pc, #180]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2d2:	f003 0301 	and.w	r3, r3, #1
 801a2d6:	613b      	str	r3, [r7, #16]
 801a2d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 801a2da:	2380      	movs	r3, #128	; 0x80
 801a2dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a2de:	2302      	movs	r3, #2
 801a2e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801a2ea:	2307      	movs	r3, #7
 801a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 801a2ee:	f107 031c 	add.w	r3, r7, #28
 801a2f2:	4619      	mov	r1, r3
 801a2f4:	4824      	ldr	r0, [pc, #144]	; (801a388 <HAL_UART_MspInit+0x118>)
 801a2f6:	f7e8 fa2b 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 801a2fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a2fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a300:	2302      	movs	r3, #2
 801a302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a304:	2300      	movs	r3, #0
 801a306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a308:	2300      	movs	r3, #0
 801a30a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801a30c:	2307      	movs	r3, #7
 801a30e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 801a310:	f107 031c 	add.w	r3, r7, #28
 801a314:	4619      	mov	r1, r3
 801a316:	481d      	ldr	r0, [pc, #116]	; (801a38c <HAL_UART_MspInit+0x11c>)
 801a318:	f7e8 fa1a 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 801a31c:	e02c      	b.n	801a378 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	4a1b      	ldr	r2, [pc, #108]	; (801a390 <HAL_UART_MspInit+0x120>)
 801a324:	4293      	cmp	r3, r2
 801a326:	d127      	bne.n	801a378 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 801a328:	4b16      	ldr	r3, [pc, #88]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a32c:	4a15      	ldr	r2, [pc, #84]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a32e:	f043 0320 	orr.w	r3, r3, #32
 801a332:	6453      	str	r3, [r2, #68]	; 0x44
 801a334:	4b13      	ldr	r3, [pc, #76]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a338:	f003 0320 	and.w	r3, r3, #32
 801a33c:	60fb      	str	r3, [r7, #12]
 801a33e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801a340:	4b10      	ldr	r3, [pc, #64]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a344:	4a0f      	ldr	r2, [pc, #60]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a346:	f043 0304 	orr.w	r3, r3, #4
 801a34a:	6313      	str	r3, [r2, #48]	; 0x30
 801a34c:	4b0d      	ldr	r3, [pc, #52]	; (801a384 <HAL_UART_MspInit+0x114>)
 801a34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a350:	f003 0304 	and.w	r3, r3, #4
 801a354:	60bb      	str	r3, [r7, #8]
 801a356:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 801a358:	23c0      	movs	r3, #192	; 0xc0
 801a35a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a35c:	2302      	movs	r3, #2
 801a35e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a360:	2300      	movs	r3, #0
 801a362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a364:	2303      	movs	r3, #3
 801a366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801a368:	2308      	movs	r3, #8
 801a36a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801a36c:	f107 031c 	add.w	r3, r7, #28
 801a370:	4619      	mov	r1, r3
 801a372:	4808      	ldr	r0, [pc, #32]	; (801a394 <HAL_UART_MspInit+0x124>)
 801a374:	f7e8 f9ec 	bl	8002750 <HAL_GPIO_Init>
}
 801a378:	bf00      	nop
 801a37a:	3730      	adds	r7, #48	; 0x30
 801a37c:	46bd      	mov	sp, r7
 801a37e:	bd80      	pop	{r7, pc}
 801a380:	40011000 	.word	0x40011000
 801a384:	40023800 	.word	0x40023800
 801a388:	40020400 	.word	0x40020400
 801a38c:	40020000 	.word	0x40020000
 801a390:	40011400 	.word	0x40011400
 801a394:	40020800 	.word	0x40020800

0801a398 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b08a      	sub	sp, #40	; 0x28
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	4a2b      	ldr	r2, [pc, #172]	; (801a454 <HAL_SAI_MspInit+0xbc>)
 801a3a6:	4293      	cmp	r3, r2
 801a3a8:	d124      	bne.n	801a3f4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 801a3aa:	4b2b      	ldr	r3, [pc, #172]	; (801a458 <HAL_SAI_MspInit+0xc0>)
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d10b      	bne.n	801a3ca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 801a3b2:	4b2a      	ldr	r3, [pc, #168]	; (801a45c <HAL_SAI_MspInit+0xc4>)
 801a3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3b6:	4a29      	ldr	r2, [pc, #164]	; (801a45c <HAL_SAI_MspInit+0xc4>)
 801a3b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a3bc:	6453      	str	r3, [r2, #68]	; 0x44
 801a3be:	4b27      	ldr	r3, [pc, #156]	; (801a45c <HAL_SAI_MspInit+0xc4>)
 801a3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a3c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a3c6:	613b      	str	r3, [r7, #16]
 801a3c8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 801a3ca:	4b23      	ldr	r3, [pc, #140]	; (801a458 <HAL_SAI_MspInit+0xc0>)
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	3301      	adds	r3, #1
 801a3d0:	4a21      	ldr	r2, [pc, #132]	; (801a458 <HAL_SAI_MspInit+0xc0>)
 801a3d2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 801a3d4:	23f0      	movs	r3, #240	; 0xf0
 801a3d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a3d8:	2302      	movs	r3, #2
 801a3da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a3dc:	2300      	movs	r3, #0
 801a3de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 801a3e4:	230a      	movs	r3, #10
 801a3e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801a3e8:	f107 0314 	add.w	r3, r7, #20
 801a3ec:	4619      	mov	r1, r3
 801a3ee:	481c      	ldr	r0, [pc, #112]	; (801a460 <HAL_SAI_MspInit+0xc8>)
 801a3f0:	f7e8 f9ae 	bl	8002750 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	4a1a      	ldr	r2, [pc, #104]	; (801a464 <HAL_SAI_MspInit+0xcc>)
 801a3fa:	4293      	cmp	r3, r2
 801a3fc:	d125      	bne.n	801a44a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 801a3fe:	4b16      	ldr	r3, [pc, #88]	; (801a458 <HAL_SAI_MspInit+0xc0>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d10b      	bne.n	801a41e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 801a406:	4b15      	ldr	r3, [pc, #84]	; (801a45c <HAL_SAI_MspInit+0xc4>)
 801a408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a40a:	4a14      	ldr	r2, [pc, #80]	; (801a45c <HAL_SAI_MspInit+0xc4>)
 801a40c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a410:	6453      	str	r3, [r2, #68]	; 0x44
 801a412:	4b12      	ldr	r3, [pc, #72]	; (801a45c <HAL_SAI_MspInit+0xc4>)
 801a414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a41a:	60fb      	str	r3, [r7, #12]
 801a41c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 801a41e:	4b0e      	ldr	r3, [pc, #56]	; (801a458 <HAL_SAI_MspInit+0xc0>)
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	3301      	adds	r3, #1
 801a424:	4a0c      	ldr	r2, [pc, #48]	; (801a458 <HAL_SAI_MspInit+0xc0>)
 801a426:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 801a428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a42c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a42e:	2302      	movs	r3, #2
 801a430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a432:	2300      	movs	r3, #0
 801a434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a436:	2300      	movs	r3, #0
 801a438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 801a43a:	230a      	movs	r3, #10
 801a43c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 801a43e:	f107 0314 	add.w	r3, r7, #20
 801a442:	4619      	mov	r1, r3
 801a444:	4808      	ldr	r0, [pc, #32]	; (801a468 <HAL_SAI_MspInit+0xd0>)
 801a446:	f7e8 f983 	bl	8002750 <HAL_GPIO_Init>

    }
}
 801a44a:	bf00      	nop
 801a44c:	3728      	adds	r7, #40	; 0x28
 801a44e:	46bd      	mov	sp, r7
 801a450:	bd80      	pop	{r7, pc}
 801a452:	bf00      	nop
 801a454:	40015c04 	.word	0x40015c04
 801a458:	2000b9a4 	.word	0x2000b9a4
 801a45c:	40023800 	.word	0x40023800
 801a460:	40022000 	.word	0x40022000
 801a464:	40015c24 	.word	0x40015c24
 801a468:	40021800 	.word	0x40021800

0801a46c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a46c:	b580      	push	{r7, lr}
 801a46e:	b08c      	sub	sp, #48	; 0x30
 801a470:	af00      	add	r7, sp, #0
 801a472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801a474:	2300      	movs	r3, #0
 801a476:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 801a478:	2300      	movs	r3, #0
 801a47a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 801a47c:	2200      	movs	r2, #0
 801a47e:	6879      	ldr	r1, [r7, #4]
 801a480:	2036      	movs	r0, #54	; 0x36
 801a482:	f7e6 fed3 	bl	800122c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 801a486:	2036      	movs	r0, #54	; 0x36
 801a488:	f7e6 feec 	bl	8001264 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801a48c:	4b1f      	ldr	r3, [pc, #124]	; (801a50c <HAL_InitTick+0xa0>)
 801a48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a490:	4a1e      	ldr	r2, [pc, #120]	; (801a50c <HAL_InitTick+0xa0>)
 801a492:	f043 0310 	orr.w	r3, r3, #16
 801a496:	6413      	str	r3, [r2, #64]	; 0x40
 801a498:	4b1c      	ldr	r3, [pc, #112]	; (801a50c <HAL_InitTick+0xa0>)
 801a49a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a49c:	f003 0310 	and.w	r3, r3, #16
 801a4a0:	60fb      	str	r3, [r7, #12]
 801a4a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801a4a4:	f107 0210 	add.w	r2, r7, #16
 801a4a8:	f107 0314 	add.w	r3, r7, #20
 801a4ac:	4611      	mov	r1, r2
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	f7eb ffe2 	bl	8006478 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 801a4b4:	f7eb ffb8 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	005b      	lsls	r3, r3, #1
 801a4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c0:	4a13      	ldr	r2, [pc, #76]	; (801a510 <HAL_InitTick+0xa4>)
 801a4c2:	fba2 2303 	umull	r2, r3, r2, r3
 801a4c6:	0c9b      	lsrs	r3, r3, #18
 801a4c8:	3b01      	subs	r3, #1
 801a4ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801a4cc:	4b11      	ldr	r3, [pc, #68]	; (801a514 <HAL_InitTick+0xa8>)
 801a4ce:	4a12      	ldr	r2, [pc, #72]	; (801a518 <HAL_InitTick+0xac>)
 801a4d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 801a4d2:	4b10      	ldr	r3, [pc, #64]	; (801a514 <HAL_InitTick+0xa8>)
 801a4d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 801a4d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801a4da:	4a0e      	ldr	r2, [pc, #56]	; (801a514 <HAL_InitTick+0xa8>)
 801a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801a4e0:	4b0c      	ldr	r3, [pc, #48]	; (801a514 <HAL_InitTick+0xa8>)
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801a4e6:	4b0b      	ldr	r3, [pc, #44]	; (801a514 <HAL_InitTick+0xa8>)
 801a4e8:	2200      	movs	r2, #0
 801a4ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801a4ec:	4809      	ldr	r0, [pc, #36]	; (801a514 <HAL_InitTick+0xa8>)
 801a4ee:	f7ee fcaf 	bl	8008e50 <HAL_TIM_Base_Init>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d104      	bne.n	801a502 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801a4f8:	4806      	ldr	r0, [pc, #24]	; (801a514 <HAL_InitTick+0xa8>)
 801a4fa:	f7ee fcff 	bl	8008efc <HAL_TIM_Base_Start_IT>
 801a4fe:	4603      	mov	r3, r0
 801a500:	e000      	b.n	801a504 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801a502:	2301      	movs	r3, #1
}
 801a504:	4618      	mov	r0, r3
 801a506:	3730      	adds	r7, #48	; 0x30
 801a508:	46bd      	mov	sp, r7
 801a50a:	bd80      	pop	{r7, pc}
 801a50c:	40023800 	.word	0x40023800
 801a510:	431bde83 	.word	0x431bde83
 801a514:	2000c050 	.word	0x2000c050
 801a518:	40001000 	.word	0x40001000

0801a51c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801a51c:	b480      	push	{r7}
 801a51e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801a520:	bf00      	nop
 801a522:	46bd      	mov	sp, r7
 801a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a528:	4770      	bx	lr

0801a52a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801a52a:	b480      	push	{r7}
 801a52c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801a52e:	e7fe      	b.n	801a52e <HardFault_Handler+0x4>

0801a530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801a530:	b480      	push	{r7}
 801a532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801a534:	e7fe      	b.n	801a534 <MemManage_Handler+0x4>

0801a536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801a536:	b480      	push	{r7}
 801a538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801a53a:	e7fe      	b.n	801a53a <BusFault_Handler+0x4>

0801a53c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801a53c:	b480      	push	{r7}
 801a53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801a540:	e7fe      	b.n	801a540 <UsageFault_Handler+0x4>

0801a542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801a542:	b480      	push	{r7}
 801a544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801a546:	bf00      	nop
 801a548:	46bd      	mov	sp, r7
 801a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a54e:	4770      	bx	lr

0801a550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801a550:	b580      	push	{r7, lr}
 801a552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801a554:	4802      	ldr	r0, [pc, #8]	; (801a560 <TIM6_DAC_IRQHandler+0x10>)
 801a556:	f7ee fd26 	bl	8008fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801a55a:	bf00      	nop
 801a55c:	bd80      	pop	{r7, pc}
 801a55e:	bf00      	nop
 801a560:	2000c050 	.word	0x2000c050

0801a564 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801a568:	4802      	ldr	r0, [pc, #8]	; (801a574 <OTG_FS_IRQHandler+0x10>)
 801a56a:	f7e8 fe4f 	bl	800320c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801a56e:	bf00      	nop
 801a570:	bd80      	pop	{r7, pc}
 801a572:	bf00      	nop
 801a574:	2000c468 	.word	0x2000c468

0801a578 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 801a578:	b580      	push	{r7, lr}
 801a57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 801a57c:	4802      	ldr	r0, [pc, #8]	; (801a588 <LTDC_IRQHandler+0x10>)
 801a57e:	f7ea febf 	bl	8005300 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 801a582:	bf00      	nop
 801a584:	bd80      	pop	{r7, pc}
 801a586:	bf00      	nop
 801a588:	2000b034 	.word	0x2000b034

0801a58c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 801a590:	4802      	ldr	r0, [pc, #8]	; (801a59c <DMA2D_IRQHandler+0x10>)
 801a592:	f7e7 fa32 	bl	80019fa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 801a596:	bf00      	nop
 801a598:	bd80      	pop	{r7, pc}
 801a59a:	bf00      	nop
 801a59c:	2000aff4 	.word	0x2000aff4

0801a5a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801a5a0:	b480      	push	{r7}
 801a5a2:	af00      	add	r7, sp, #0
	return 1;
 801a5a4:	2301      	movs	r3, #1
}
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ae:	4770      	bx	lr

0801a5b0 <_kill>:

int _kill(int pid, int sig)
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b082      	sub	sp, #8
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]
 801a5b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801a5ba:	f008 fae1 	bl	8022b80 <__errno>
 801a5be:	4602      	mov	r2, r0
 801a5c0:	2316      	movs	r3, #22
 801a5c2:	6013      	str	r3, [r2, #0]
	return -1;
 801a5c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	3708      	adds	r7, #8
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}

0801a5d0 <_exit>:

void _exit (int status)
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b082      	sub	sp, #8
 801a5d4:	af00      	add	r7, sp, #0
 801a5d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801a5d8:	f04f 31ff 	mov.w	r1, #4294967295
 801a5dc:	6878      	ldr	r0, [r7, #4]
 801a5de:	f7ff ffe7 	bl	801a5b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 801a5e2:	e7fe      	b.n	801a5e2 <_exit+0x12>

0801a5e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b086      	sub	sp, #24
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	60f8      	str	r0, [r7, #12]
 801a5ec:	60b9      	str	r1, [r7, #8]
 801a5ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	617b      	str	r3, [r7, #20]
 801a5f4:	e00a      	b.n	801a60c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801a5f6:	f3af 8000 	nop.w
 801a5fa:	4601      	mov	r1, r0
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	1c5a      	adds	r2, r3, #1
 801a600:	60ba      	str	r2, [r7, #8]
 801a602:	b2ca      	uxtb	r2, r1
 801a604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801a606:	697b      	ldr	r3, [r7, #20]
 801a608:	3301      	adds	r3, #1
 801a60a:	617b      	str	r3, [r7, #20]
 801a60c:	697a      	ldr	r2, [r7, #20]
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	429a      	cmp	r2, r3
 801a612:	dbf0      	blt.n	801a5f6 <_read+0x12>
	}

return len;
 801a614:	687b      	ldr	r3, [r7, #4]
}
 801a616:	4618      	mov	r0, r3
 801a618:	3718      	adds	r7, #24
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd80      	pop	{r7, pc}

0801a61e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801a61e:	b580      	push	{r7, lr}
 801a620:	b086      	sub	sp, #24
 801a622:	af00      	add	r7, sp, #0
 801a624:	60f8      	str	r0, [r7, #12]
 801a626:	60b9      	str	r1, [r7, #8]
 801a628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801a62a:	2300      	movs	r3, #0
 801a62c:	617b      	str	r3, [r7, #20]
 801a62e:	e009      	b.n	801a644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	1c5a      	adds	r2, r3, #1
 801a634:	60ba      	str	r2, [r7, #8]
 801a636:	781b      	ldrb	r3, [r3, #0]
 801a638:	4618      	mov	r0, r3
 801a63a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	3301      	adds	r3, #1
 801a642:	617b      	str	r3, [r7, #20]
 801a644:	697a      	ldr	r2, [r7, #20]
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	429a      	cmp	r2, r3
 801a64a:	dbf1      	blt.n	801a630 <_write+0x12>
	}
	return len;
 801a64c:	687b      	ldr	r3, [r7, #4]
}
 801a64e:	4618      	mov	r0, r3
 801a650:	3718      	adds	r7, #24
 801a652:	46bd      	mov	sp, r7
 801a654:	bd80      	pop	{r7, pc}

0801a656 <_close>:

int _close(int file)
{
 801a656:	b480      	push	{r7}
 801a658:	b083      	sub	sp, #12
 801a65a:	af00      	add	r7, sp, #0
 801a65c:	6078      	str	r0, [r7, #4]
	return -1;
 801a65e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a662:	4618      	mov	r0, r3
 801a664:	370c      	adds	r7, #12
 801a666:	46bd      	mov	sp, r7
 801a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66c:	4770      	bx	lr

0801a66e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801a66e:	b480      	push	{r7}
 801a670:	b083      	sub	sp, #12
 801a672:	af00      	add	r7, sp, #0
 801a674:	6078      	str	r0, [r7, #4]
 801a676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801a67e:	605a      	str	r2, [r3, #4]
	return 0;
 801a680:	2300      	movs	r3, #0
}
 801a682:	4618      	mov	r0, r3
 801a684:	370c      	adds	r7, #12
 801a686:	46bd      	mov	sp, r7
 801a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a68c:	4770      	bx	lr

0801a68e <_isatty>:

int _isatty(int file)
{
 801a68e:	b480      	push	{r7}
 801a690:	b083      	sub	sp, #12
 801a692:	af00      	add	r7, sp, #0
 801a694:	6078      	str	r0, [r7, #4]
	return 1;
 801a696:	2301      	movs	r3, #1
}
 801a698:	4618      	mov	r0, r3
 801a69a:	370c      	adds	r7, #12
 801a69c:	46bd      	mov	sp, r7
 801a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a2:	4770      	bx	lr

0801a6a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801a6a4:	b480      	push	{r7}
 801a6a6:	b085      	sub	sp, #20
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	60f8      	str	r0, [r7, #12]
 801a6ac:	60b9      	str	r1, [r7, #8]
 801a6ae:	607a      	str	r2, [r7, #4]
	return 0;
 801a6b0:	2300      	movs	r3, #0
}
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	3714      	adds	r7, #20
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6bc:	4770      	bx	lr
	...

0801a6c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b084      	sub	sp, #16
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801a6c8:	4b11      	ldr	r3, [pc, #68]	; (801a710 <_sbrk+0x50>)
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d102      	bne.n	801a6d6 <_sbrk+0x16>
		heap_end = &end;
 801a6d0:	4b0f      	ldr	r3, [pc, #60]	; (801a710 <_sbrk+0x50>)
 801a6d2:	4a10      	ldr	r2, [pc, #64]	; (801a714 <_sbrk+0x54>)
 801a6d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801a6d6:	4b0e      	ldr	r3, [pc, #56]	; (801a710 <_sbrk+0x50>)
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801a6dc:	4b0c      	ldr	r3, [pc, #48]	; (801a710 <_sbrk+0x50>)
 801a6de:	681a      	ldr	r2, [r3, #0]
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	4413      	add	r3, r2
 801a6e4:	466a      	mov	r2, sp
 801a6e6:	4293      	cmp	r3, r2
 801a6e8:	d907      	bls.n	801a6fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801a6ea:	f008 fa49 	bl	8022b80 <__errno>
 801a6ee:	4602      	mov	r2, r0
 801a6f0:	230c      	movs	r3, #12
 801a6f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 801a6f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a6f8:	e006      	b.n	801a708 <_sbrk+0x48>
	}

	heap_end += incr;
 801a6fa:	4b05      	ldr	r3, [pc, #20]	; (801a710 <_sbrk+0x50>)
 801a6fc:	681a      	ldr	r2, [r3, #0]
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	4413      	add	r3, r2
 801a702:	4a03      	ldr	r2, [pc, #12]	; (801a710 <_sbrk+0x50>)
 801a704:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801a706:	68fb      	ldr	r3, [r7, #12]
}
 801a708:	4618      	mov	r0, r3
 801a70a:	3710      	adds	r7, #16
 801a70c:	46bd      	mov	sp, r7
 801a70e:	bd80      	pop	{r7, pc}
 801a710:	2000b9a8 	.word	0x2000b9a8
 801a714:	2000c730 	.word	0x2000c730

0801a718 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801a718:	b480      	push	{r7}
 801a71a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801a71c:	4b15      	ldr	r3, [pc, #84]	; (801a774 <SystemInit+0x5c>)
 801a71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a722:	4a14      	ldr	r2, [pc, #80]	; (801a774 <SystemInit+0x5c>)
 801a724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801a72c:	4b12      	ldr	r3, [pc, #72]	; (801a778 <SystemInit+0x60>)
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	4a11      	ldr	r2, [pc, #68]	; (801a778 <SystemInit+0x60>)
 801a732:	f043 0301 	orr.w	r3, r3, #1
 801a736:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801a738:	4b0f      	ldr	r3, [pc, #60]	; (801a778 <SystemInit+0x60>)
 801a73a:	2200      	movs	r2, #0
 801a73c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801a73e:	4b0e      	ldr	r3, [pc, #56]	; (801a778 <SystemInit+0x60>)
 801a740:	681a      	ldr	r2, [r3, #0]
 801a742:	490d      	ldr	r1, [pc, #52]	; (801a778 <SystemInit+0x60>)
 801a744:	4b0d      	ldr	r3, [pc, #52]	; (801a77c <SystemInit+0x64>)
 801a746:	4013      	ands	r3, r2
 801a748:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801a74a:	4b0b      	ldr	r3, [pc, #44]	; (801a778 <SystemInit+0x60>)
 801a74c:	4a0c      	ldr	r2, [pc, #48]	; (801a780 <SystemInit+0x68>)
 801a74e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801a750:	4b09      	ldr	r3, [pc, #36]	; (801a778 <SystemInit+0x60>)
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	4a08      	ldr	r2, [pc, #32]	; (801a778 <SystemInit+0x60>)
 801a756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a75a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801a75c:	4b06      	ldr	r3, [pc, #24]	; (801a778 <SystemInit+0x60>)
 801a75e:	2200      	movs	r2, #0
 801a760:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801a762:	4b04      	ldr	r3, [pc, #16]	; (801a774 <SystemInit+0x5c>)
 801a764:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801a768:	609a      	str	r2, [r3, #8]
#endif
}
 801a76a:	bf00      	nop
 801a76c:	46bd      	mov	sp, r7
 801a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a772:	4770      	bx	lr
 801a774:	e000ed00 	.word	0xe000ed00
 801a778:	40023800 	.word	0x40023800
 801a77c:	fef6ffff 	.word	0xfef6ffff
 801a780:	24003010 	.word	0x24003010

0801a784 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801a784:	b580      	push	{r7, lr}
 801a786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801a788:	2201      	movs	r2, #1
 801a78a:	490e      	ldr	r1, [pc, #56]	; (801a7c4 <MX_USB_HOST_Init+0x40>)
 801a78c:	480e      	ldr	r0, [pc, #56]	; (801a7c8 <MX_USB_HOST_Init+0x44>)
 801a78e:	f7f2 f923 	bl	800c9d8 <USBH_Init>
 801a792:	4603      	mov	r3, r0
 801a794:	2b00      	cmp	r3, #0
 801a796:	d001      	beq.n	801a79c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801a798:	f7fe fddc 	bl	8019354 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801a79c:	490b      	ldr	r1, [pc, #44]	; (801a7cc <MX_USB_HOST_Init+0x48>)
 801a79e:	480a      	ldr	r0, [pc, #40]	; (801a7c8 <MX_USB_HOST_Init+0x44>)
 801a7a0:	f7f2 f9b5 	bl	800cb0e <USBH_RegisterClass>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d001      	beq.n	801a7ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801a7aa:	f7fe fdd3 	bl	8019354 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801a7ae:	4806      	ldr	r0, [pc, #24]	; (801a7c8 <MX_USB_HOST_Init+0x44>)
 801a7b0:	f7f2 fa3a 	bl	800cc28 <USBH_Start>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d001      	beq.n	801a7be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801a7ba:	f7fe fdcb 	bl	8019354 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801a7be:	bf00      	nop
 801a7c0:	bd80      	pop	{r7, pc}
 801a7c2:	bf00      	nop
 801a7c4:	0801a7d1 	.word	0x0801a7d1
 801a7c8:	2000c090 	.word	0x2000c090
 801a7cc:	2000002c 	.word	0x2000002c

0801a7d0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801a7d0:	b480      	push	{r7}
 801a7d2:	b083      	sub	sp, #12
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	460b      	mov	r3, r1
 801a7da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801a7dc:	78fb      	ldrb	r3, [r7, #3]
 801a7de:	3b01      	subs	r3, #1
 801a7e0:	2b04      	cmp	r3, #4
 801a7e2:	d819      	bhi.n	801a818 <USBH_UserProcess+0x48>
 801a7e4:	a201      	add	r2, pc, #4	; (adr r2, 801a7ec <USBH_UserProcess+0x1c>)
 801a7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7ea:	bf00      	nop
 801a7ec:	0801a819 	.word	0x0801a819
 801a7f0:	0801a809 	.word	0x0801a809
 801a7f4:	0801a819 	.word	0x0801a819
 801a7f8:	0801a811 	.word	0x0801a811
 801a7fc:	0801a801 	.word	0x0801a801
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801a800:	4b09      	ldr	r3, [pc, #36]	; (801a828 <USBH_UserProcess+0x58>)
 801a802:	2203      	movs	r2, #3
 801a804:	701a      	strb	r2, [r3, #0]
  break;
 801a806:	e008      	b.n	801a81a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801a808:	4b07      	ldr	r3, [pc, #28]	; (801a828 <USBH_UserProcess+0x58>)
 801a80a:	2202      	movs	r2, #2
 801a80c:	701a      	strb	r2, [r3, #0]
  break;
 801a80e:	e004      	b.n	801a81a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801a810:	4b05      	ldr	r3, [pc, #20]	; (801a828 <USBH_UserProcess+0x58>)
 801a812:	2201      	movs	r2, #1
 801a814:	701a      	strb	r2, [r3, #0]
  break;
 801a816:	e000      	b.n	801a81a <USBH_UserProcess+0x4a>

  default:
  break;
 801a818:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801a81a:	bf00      	nop
 801a81c:	370c      	adds	r7, #12
 801a81e:	46bd      	mov	sp, r7
 801a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a824:	4770      	bx	lr
 801a826:	bf00      	nop
 801a828:	2000b9ac 	.word	0x2000b9ac

0801a82c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b08a      	sub	sp, #40	; 0x28
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a834:	f107 0314 	add.w	r3, r7, #20
 801a838:	2200      	movs	r2, #0
 801a83a:	601a      	str	r2, [r3, #0]
 801a83c:	605a      	str	r2, [r3, #4]
 801a83e:	609a      	str	r2, [r3, #8]
 801a840:	60da      	str	r2, [r3, #12]
 801a842:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a84c:	d13c      	bne.n	801a8c8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a84e:	4b20      	ldr	r3, [pc, #128]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a852:	4a1f      	ldr	r2, [pc, #124]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a854:	f043 0301 	orr.w	r3, r3, #1
 801a858:	6313      	str	r3, [r2, #48]	; 0x30
 801a85a:	4b1d      	ldr	r3, [pc, #116]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a85e:	f003 0301 	and.w	r3, r3, #1
 801a862:	613b      	str	r3, [r7, #16]
 801a864:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801a866:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801a86a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a86c:	2302      	movs	r3, #2
 801a86e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a870:	2300      	movs	r3, #0
 801a872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a874:	2303      	movs	r3, #3
 801a876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a878:	230a      	movs	r3, #10
 801a87a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a87c:	f107 0314 	add.w	r3, r7, #20
 801a880:	4619      	mov	r1, r3
 801a882:	4814      	ldr	r0, [pc, #80]	; (801a8d4 <HAL_HCD_MspInit+0xa8>)
 801a884:	f7e7 ff64 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a888:	4b11      	ldr	r3, [pc, #68]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a88c:	4a10      	ldr	r2, [pc, #64]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a892:	6353      	str	r3, [r2, #52]	; 0x34
 801a894:	4b0e      	ldr	r3, [pc, #56]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a89c:	60fb      	str	r3, [r7, #12]
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	4b0b      	ldr	r3, [pc, #44]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8a4:	4a0a      	ldr	r2, [pc, #40]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a8a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a8aa:	6453      	str	r3, [r2, #68]	; 0x44
 801a8ac:	4b08      	ldr	r3, [pc, #32]	; (801a8d0 <HAL_HCD_MspInit+0xa4>)
 801a8ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a8b4:	60bb      	str	r3, [r7, #8]
 801a8b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	2105      	movs	r1, #5
 801a8bc:	2043      	movs	r0, #67	; 0x43
 801a8be:	f7e6 fcb5 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a8c2:	2043      	movs	r0, #67	; 0x43
 801a8c4:	f7e6 fcce 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a8c8:	bf00      	nop
 801a8ca:	3728      	adds	r7, #40	; 0x28
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	bd80      	pop	{r7, pc}
 801a8d0:	40023800 	.word	0x40023800
 801a8d4:	40020000 	.word	0x40020000

0801a8d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b082      	sub	sp, #8
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	f7f2 fcf1 	bl	800d2ce <USBH_LL_IncTimer>
}
 801a8ec:	bf00      	nop
 801a8ee:	3708      	adds	r7, #8
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}

0801a8f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b082      	sub	sp, #8
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a902:	4618      	mov	r0, r3
 801a904:	f7f2 fd36 	bl	800d374 <USBH_LL_Connect>
}
 801a908:	bf00      	nop
 801a90a:	3708      	adds	r7, #8
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bd80      	pop	{r7, pc}

0801a910 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b082      	sub	sp, #8
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a91e:	4618      	mov	r0, r3
 801a920:	f7f2 fd5c 	bl	800d3dc <USBH_LL_Disconnect>
}
 801a924:	bf00      	nop
 801a926:	3708      	adds	r7, #8
 801a928:	46bd      	mov	sp, r7
 801a92a:	bd80      	pop	{r7, pc}

0801a92c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	b082      	sub	sp, #8
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
 801a934:	460b      	mov	r3, r1
 801a936:	70fb      	strb	r3, [r7, #3]
 801a938:	4613      	mov	r3, r2
 801a93a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a942:	4618      	mov	r0, r3
 801a944:	f7f2 fd9a 	bl	800d47c <USBH_LL_NotifyURBChange>
#endif
}
 801a948:	bf00      	nop
 801a94a:	3708      	adds	r7, #8
 801a94c:	46bd      	mov	sp, r7
 801a94e:	bd80      	pop	{r7, pc}

0801a950 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801a950:	b580      	push	{r7, lr}
 801a952:	b082      	sub	sp, #8
 801a954:	af00      	add	r7, sp, #0
 801a956:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a95e:	4618      	mov	r0, r3
 801a960:	f7f2 fcdf 	bl	800d322 <USBH_LL_PortEnabled>
} 
 801a964:	bf00      	nop
 801a966:	3708      	adds	r7, #8
 801a968:	46bd      	mov	sp, r7
 801a96a:	bd80      	pop	{r7, pc}

0801a96c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b082      	sub	sp, #8
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a97a:	4618      	mov	r0, r3
 801a97c:	f7f2 fcdf 	bl	800d33e <USBH_LL_PortDisabled>
} 
 801a980:	bf00      	nop
 801a982:	3708      	adds	r7, #8
 801a984:	46bd      	mov	sp, r7
 801a986:	bd80      	pop	{r7, pc}

0801a988 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b082      	sub	sp, #8
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801a996:	2b01      	cmp	r3, #1
 801a998:	d12a      	bne.n	801a9f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801a99a:	4a18      	ldr	r2, [pc, #96]	; (801a9fc <USBH_LL_Init+0x74>)
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	4a15      	ldr	r2, [pc, #84]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a9aa:	4b14      	ldr	r3, [pc, #80]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a9b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801a9b2:	4b12      	ldr	r3, [pc, #72]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9b4:	2208      	movs	r2, #8
 801a9b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801a9b8:	4b10      	ldr	r3, [pc, #64]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9ba:	2203      	movs	r2, #3
 801a9bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a9be:	4b0f      	ldr	r3, [pc, #60]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9c0:	2200      	movs	r2, #0
 801a9c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801a9c4:	4b0d      	ldr	r3, [pc, #52]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9c6:	2202      	movs	r2, #2
 801a9c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a9ca:	4b0c      	ldr	r3, [pc, #48]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801a9d0:	480a      	ldr	r0, [pc, #40]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9d2:	f7e8 f9a2 	bl	8002d1a <HAL_HCD_Init>
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d001      	beq.n	801a9e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801a9dc:	f7fe fcba 	bl	8019354 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801a9e0:	4806      	ldr	r0, [pc, #24]	; (801a9fc <USBH_LL_Init+0x74>)
 801a9e2:	f7e8 fd91 	bl	8003508 <HAL_HCD_GetCurrentFrame>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	4619      	mov	r1, r3
 801a9ea:	6878      	ldr	r0, [r7, #4]
 801a9ec:	f7f2 fc60 	bl	800d2b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801a9f0:	2300      	movs	r3, #0
}
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	3708      	adds	r7, #8
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	bd80      	pop	{r7, pc}
 801a9fa:	bf00      	nop
 801a9fc:	2000c468 	.word	0x2000c468

0801aa00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b084      	sub	sp, #16
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa08:	2300      	movs	r3, #0
 801aa0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801aa16:	4618      	mov	r0, r3
 801aa18:	f7e8 fcfe 	bl	8003418 <HAL_HCD_Start>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801aa20:	7bfb      	ldrb	r3, [r7, #15]
 801aa22:	4618      	mov	r0, r3
 801aa24:	f000 f95c 	bl	801ace0 <USBH_Get_USB_Status>
 801aa28:	4603      	mov	r3, r0
 801aa2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801aa2c:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa2e:	4618      	mov	r0, r3
 801aa30:	3710      	adds	r7, #16
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}

0801aa36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801aa36:	b580      	push	{r7, lr}
 801aa38:	b084      	sub	sp, #16
 801aa3a:	af00      	add	r7, sp, #0
 801aa3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa3e:	2300      	movs	r3, #0
 801aa40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801aa42:	2300      	movs	r3, #0
 801aa44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	f7e8 fd06 	bl	800345e <HAL_HCD_Stop>
 801aa52:	4603      	mov	r3, r0
 801aa54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801aa56:	7bfb      	ldrb	r3, [r7, #15]
 801aa58:	4618      	mov	r0, r3
 801aa5a:	f000 f941 	bl	801ace0 <USBH_Get_USB_Status>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801aa62:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa64:	4618      	mov	r0, r3
 801aa66:	3710      	adds	r7, #16
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	bd80      	pop	{r7, pc}

0801aa6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b084      	sub	sp, #16
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801aa74:	2301      	movs	r3, #1
 801aa76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801aa7e:	4618      	mov	r0, r3
 801aa80:	f7e8 fd50 	bl	8003524 <HAL_HCD_GetCurrentSpeed>
 801aa84:	4603      	mov	r3, r0
 801aa86:	2b01      	cmp	r3, #1
 801aa88:	d007      	beq.n	801aa9a <USBH_LL_GetSpeed+0x2e>
 801aa8a:	2b01      	cmp	r3, #1
 801aa8c:	d302      	bcc.n	801aa94 <USBH_LL_GetSpeed+0x28>
 801aa8e:	2b02      	cmp	r3, #2
 801aa90:	d006      	beq.n	801aaa0 <USBH_LL_GetSpeed+0x34>
 801aa92:	e008      	b.n	801aaa6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801aa94:	2300      	movs	r3, #0
 801aa96:	73fb      	strb	r3, [r7, #15]
    break;
 801aa98:	e008      	b.n	801aaac <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801aa9a:	2301      	movs	r3, #1
 801aa9c:	73fb      	strb	r3, [r7, #15]
    break;
 801aa9e:	e005      	b.n	801aaac <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 801aaa0:	2302      	movs	r3, #2
 801aaa2:	73fb      	strb	r3, [r7, #15]
    break;
 801aaa4:	e002      	b.n	801aaac <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801aaa6:	2301      	movs	r3, #1
 801aaa8:	73fb      	strb	r3, [r7, #15]
    break;
 801aaaa:	bf00      	nop
  }
  return  speed;
 801aaac:	7bfb      	ldrb	r3, [r7, #15]
}
 801aaae:	4618      	mov	r0, r3
 801aab0:	3710      	adds	r7, #16
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd80      	pop	{r7, pc}

0801aab6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801aab6:	b580      	push	{r7, lr}
 801aab8:	b084      	sub	sp, #16
 801aaba:	af00      	add	r7, sp, #0
 801aabc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aabe:	2300      	movs	r3, #0
 801aac0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801aac2:	2300      	movs	r3, #0
 801aac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801aacc:	4618      	mov	r0, r3
 801aace:	f7e8 fce3 	bl	8003498 <HAL_HCD_ResetPort>
 801aad2:	4603      	mov	r3, r0
 801aad4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801aad6:	7bfb      	ldrb	r3, [r7, #15]
 801aad8:	4618      	mov	r0, r3
 801aada:	f000 f901 	bl	801ace0 <USBH_Get_USB_Status>
 801aade:	4603      	mov	r3, r0
 801aae0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801aae2:	7bbb      	ldrb	r3, [r7, #14]
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	3710      	adds	r7, #16
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}

0801aaec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b082      	sub	sp, #8
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
 801aaf4:	460b      	mov	r3, r1
 801aaf6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801aafe:	78fa      	ldrb	r2, [r7, #3]
 801ab00:	4611      	mov	r1, r2
 801ab02:	4618      	mov	r0, r3
 801ab04:	f7e8 fceb 	bl	80034de <HAL_HCD_HC_GetXferCount>
 801ab08:	4603      	mov	r3, r0
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	3708      	adds	r7, #8
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}

0801ab12 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801ab12:	b590      	push	{r4, r7, lr}
 801ab14:	b089      	sub	sp, #36	; 0x24
 801ab16:	af04      	add	r7, sp, #16
 801ab18:	6078      	str	r0, [r7, #4]
 801ab1a:	4608      	mov	r0, r1
 801ab1c:	4611      	mov	r1, r2
 801ab1e:	461a      	mov	r2, r3
 801ab20:	4603      	mov	r3, r0
 801ab22:	70fb      	strb	r3, [r7, #3]
 801ab24:	460b      	mov	r3, r1
 801ab26:	70bb      	strb	r3, [r7, #2]
 801ab28:	4613      	mov	r3, r2
 801ab2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ab30:	2300      	movs	r3, #0
 801ab32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801ab3a:	787c      	ldrb	r4, [r7, #1]
 801ab3c:	78ba      	ldrb	r2, [r7, #2]
 801ab3e:	78f9      	ldrb	r1, [r7, #3]
 801ab40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ab42:	9302      	str	r3, [sp, #8]
 801ab44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ab48:	9301      	str	r3, [sp, #4]
 801ab4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ab4e:	9300      	str	r3, [sp, #0]
 801ab50:	4623      	mov	r3, r4
 801ab52:	f7e8 f938 	bl	8002dc6 <HAL_HCD_HC_Init>
 801ab56:	4603      	mov	r3, r0
 801ab58:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801ab5a:	7bfb      	ldrb	r3, [r7, #15]
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	f000 f8bf 	bl	801ace0 <USBH_Get_USB_Status>
 801ab62:	4603      	mov	r3, r0
 801ab64:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801ab66:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab68:	4618      	mov	r0, r3
 801ab6a:	3714      	adds	r7, #20
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bd90      	pop	{r4, r7, pc}

0801ab70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b084      	sub	sp, #16
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
 801ab78:	460b      	mov	r3, r1
 801ab7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801ab80:	2300      	movs	r3, #0
 801ab82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ab8a:	78fa      	ldrb	r2, [r7, #3]
 801ab8c:	4611      	mov	r1, r2
 801ab8e:	4618      	mov	r0, r3
 801ab90:	f7e8 f9b1 	bl	8002ef6 <HAL_HCD_HC_Halt>
 801ab94:	4603      	mov	r3, r0
 801ab96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801ab98:	7bfb      	ldrb	r3, [r7, #15]
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f000 f8a0 	bl	801ace0 <USBH_Get_USB_Status>
 801aba0:	4603      	mov	r3, r0
 801aba2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801aba4:	7bbb      	ldrb	r3, [r7, #14]
}
 801aba6:	4618      	mov	r0, r3
 801aba8:	3710      	adds	r7, #16
 801abaa:	46bd      	mov	sp, r7
 801abac:	bd80      	pop	{r7, pc}

0801abae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801abae:	b590      	push	{r4, r7, lr}
 801abb0:	b089      	sub	sp, #36	; 0x24
 801abb2:	af04      	add	r7, sp, #16
 801abb4:	6078      	str	r0, [r7, #4]
 801abb6:	4608      	mov	r0, r1
 801abb8:	4611      	mov	r1, r2
 801abba:	461a      	mov	r2, r3
 801abbc:	4603      	mov	r3, r0
 801abbe:	70fb      	strb	r3, [r7, #3]
 801abc0:	460b      	mov	r3, r1
 801abc2:	70bb      	strb	r3, [r7, #2]
 801abc4:	4613      	mov	r3, r2
 801abc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abc8:	2300      	movs	r3, #0
 801abca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801abcc:	2300      	movs	r3, #0
 801abce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801abd6:	787c      	ldrb	r4, [r7, #1]
 801abd8:	78ba      	ldrb	r2, [r7, #2]
 801abda:	78f9      	ldrb	r1, [r7, #3]
 801abdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801abe0:	9303      	str	r3, [sp, #12]
 801abe2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801abe4:	9302      	str	r3, [sp, #8]
 801abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abe8:	9301      	str	r3, [sp, #4]
 801abea:	f897 3020 	ldrb.w	r3, [r7, #32]
 801abee:	9300      	str	r3, [sp, #0]
 801abf0:	4623      	mov	r3, r4
 801abf2:	f7e8 f9a3 	bl	8002f3c <HAL_HCD_HC_SubmitRequest>
 801abf6:	4603      	mov	r3, r0
 801abf8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801abfa:	7bfb      	ldrb	r3, [r7, #15]
 801abfc:	4618      	mov	r0, r3
 801abfe:	f000 f86f 	bl	801ace0 <USBH_Get_USB_Status>
 801ac02:	4603      	mov	r3, r0
 801ac04:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801ac06:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac08:	4618      	mov	r0, r3
 801ac0a:	3714      	adds	r7, #20
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	bd90      	pop	{r4, r7, pc}

0801ac10 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801ac10:	b580      	push	{r7, lr}
 801ac12:	b082      	sub	sp, #8
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	6078      	str	r0, [r7, #4]
 801ac18:	460b      	mov	r3, r1
 801ac1a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ac22:	78fa      	ldrb	r2, [r7, #3]
 801ac24:	4611      	mov	r1, r2
 801ac26:	4618      	mov	r0, r3
 801ac28:	f7e8 fc44 	bl	80034b4 <HAL_HCD_HC_GetURBState>
 801ac2c:	4603      	mov	r3, r0
}
 801ac2e:	4618      	mov	r0, r3
 801ac30:	3708      	adds	r7, #8
 801ac32:	46bd      	mov	sp, r7
 801ac34:	bd80      	pop	{r7, pc}

0801ac36 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801ac36:	b580      	push	{r7, lr}
 801ac38:	b082      	sub	sp, #8
 801ac3a:	af00      	add	r7, sp, #0
 801ac3c:	6078      	str	r0, [r7, #4]
 801ac3e:	460b      	mov	r3, r1
 801ac40:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801ac48:	2b01      	cmp	r3, #1
 801ac4a:	d103      	bne.n	801ac54 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801ac4c:	78fb      	ldrb	r3, [r7, #3]
 801ac4e:	4618      	mov	r0, r3
 801ac50:	f000 f872 	bl	801ad38 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801ac54:	20c8      	movs	r0, #200	; 0xc8
 801ac56:	f7e5 ff7b 	bl	8000b50 <HAL_Delay>
  return USBH_OK;
 801ac5a:	2300      	movs	r3, #0
}
 801ac5c:	4618      	mov	r0, r3
 801ac5e:	3708      	adds	r7, #8
 801ac60:	46bd      	mov	sp, r7
 801ac62:	bd80      	pop	{r7, pc}

0801ac64 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801ac64:	b480      	push	{r7}
 801ac66:	b085      	sub	sp, #20
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
 801ac6c:	460b      	mov	r3, r1
 801ac6e:	70fb      	strb	r3, [r7, #3]
 801ac70:	4613      	mov	r3, r2
 801ac72:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801ac7a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801ac7c:	78fa      	ldrb	r2, [r7, #3]
 801ac7e:	68f9      	ldr	r1, [r7, #12]
 801ac80:	4613      	mov	r3, r2
 801ac82:	009b      	lsls	r3, r3, #2
 801ac84:	4413      	add	r3, r2
 801ac86:	00db      	lsls	r3, r3, #3
 801ac88:	440b      	add	r3, r1
 801ac8a:	333b      	adds	r3, #59	; 0x3b
 801ac8c:	781b      	ldrb	r3, [r3, #0]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d00a      	beq.n	801aca8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801ac92:	78fa      	ldrb	r2, [r7, #3]
 801ac94:	68f9      	ldr	r1, [r7, #12]
 801ac96:	4613      	mov	r3, r2
 801ac98:	009b      	lsls	r3, r3, #2
 801ac9a:	4413      	add	r3, r2
 801ac9c:	00db      	lsls	r3, r3, #3
 801ac9e:	440b      	add	r3, r1
 801aca0:	3350      	adds	r3, #80	; 0x50
 801aca2:	78ba      	ldrb	r2, [r7, #2]
 801aca4:	701a      	strb	r2, [r3, #0]
 801aca6:	e009      	b.n	801acbc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801aca8:	78fa      	ldrb	r2, [r7, #3]
 801acaa:	68f9      	ldr	r1, [r7, #12]
 801acac:	4613      	mov	r3, r2
 801acae:	009b      	lsls	r3, r3, #2
 801acb0:	4413      	add	r3, r2
 801acb2:	00db      	lsls	r3, r3, #3
 801acb4:	440b      	add	r3, r1
 801acb6:	3351      	adds	r3, #81	; 0x51
 801acb8:	78ba      	ldrb	r2, [r7, #2]
 801acba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801acbc:	2300      	movs	r3, #0
}
 801acbe:	4618      	mov	r0, r3
 801acc0:	3714      	adds	r7, #20
 801acc2:	46bd      	mov	sp, r7
 801acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc8:	4770      	bx	lr

0801acca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801acca:	b580      	push	{r7, lr}
 801accc:	b082      	sub	sp, #8
 801acce:	af00      	add	r7, sp, #0
 801acd0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801acd2:	6878      	ldr	r0, [r7, #4]
 801acd4:	f7e5 ff3c 	bl	8000b50 <HAL_Delay>
}
 801acd8:	bf00      	nop
 801acda:	3708      	adds	r7, #8
 801acdc:	46bd      	mov	sp, r7
 801acde:	bd80      	pop	{r7, pc}

0801ace0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ace0:	b480      	push	{r7}
 801ace2:	b085      	sub	sp, #20
 801ace4:	af00      	add	r7, sp, #0
 801ace6:	4603      	mov	r3, r0
 801ace8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801acea:	2300      	movs	r3, #0
 801acec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801acee:	79fb      	ldrb	r3, [r7, #7]
 801acf0:	2b03      	cmp	r3, #3
 801acf2:	d817      	bhi.n	801ad24 <USBH_Get_USB_Status+0x44>
 801acf4:	a201      	add	r2, pc, #4	; (adr r2, 801acfc <USBH_Get_USB_Status+0x1c>)
 801acf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801acfa:	bf00      	nop
 801acfc:	0801ad0d 	.word	0x0801ad0d
 801ad00:	0801ad13 	.word	0x0801ad13
 801ad04:	0801ad19 	.word	0x0801ad19
 801ad08:	0801ad1f 	.word	0x0801ad1f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	73fb      	strb	r3, [r7, #15]
    break;
 801ad10:	e00b      	b.n	801ad2a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801ad12:	2302      	movs	r3, #2
 801ad14:	73fb      	strb	r3, [r7, #15]
    break;
 801ad16:	e008      	b.n	801ad2a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801ad18:	2301      	movs	r3, #1
 801ad1a:	73fb      	strb	r3, [r7, #15]
    break;
 801ad1c:	e005      	b.n	801ad2a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801ad1e:	2302      	movs	r3, #2
 801ad20:	73fb      	strb	r3, [r7, #15]
    break;
 801ad22:	e002      	b.n	801ad2a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801ad24:	2302      	movs	r3, #2
 801ad26:	73fb      	strb	r3, [r7, #15]
    break;
 801ad28:	bf00      	nop
  }
  return usb_status;
 801ad2a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	3714      	adds	r7, #20
 801ad30:	46bd      	mov	sp, r7
 801ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad36:	4770      	bx	lr

0801ad38 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 801ad38:	b580      	push	{r7, lr}
 801ad3a:	b084      	sub	sp, #16
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	4603      	mov	r3, r0
 801ad40:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801ad42:	79fb      	ldrb	r3, [r7, #7]
 801ad44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801ad46:	79fb      	ldrb	r3, [r7, #7]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d102      	bne.n	801ad52 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801ad4c:	2301      	movs	r3, #1
 801ad4e:	73fb      	strb	r3, [r7, #15]
 801ad50:	e001      	b.n	801ad56 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801ad52:	2300      	movs	r3, #0
 801ad54:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801ad56:	7bfb      	ldrb	r3, [r7, #15]
 801ad58:	461a      	mov	r2, r3
 801ad5a:	2120      	movs	r1, #32
 801ad5c:	4803      	ldr	r0, [pc, #12]	; (801ad6c <MX_DriverVbusFS+0x34>)
 801ad5e:	f7e7 ffc3 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 801ad62:	bf00      	nop
 801ad64:	3710      	adds	r7, #16
 801ad66:	46bd      	mov	sp, r7
 801ad68:	bd80      	pop	{r7, pc}
 801ad6a:	bf00      	nop
 801ad6c:	40020c00 	.word	0x40020c00

0801ad70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801ad70:	f8df d034 	ldr.w	sp, [pc, #52]	; 801ada8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801ad74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801ad76:	e003      	b.n	801ad80 <LoopCopyDataInit>

0801ad78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801ad78:	4b0c      	ldr	r3, [pc, #48]	; (801adac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801ad7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801ad7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801ad7e:	3104      	adds	r1, #4

0801ad80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801ad80:	480b      	ldr	r0, [pc, #44]	; (801adb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801ad82:	4b0c      	ldr	r3, [pc, #48]	; (801adb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801ad84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801ad86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801ad88:	d3f6      	bcc.n	801ad78 <CopyDataInit>
  ldr  r2, =_sbss
 801ad8a:	4a0b      	ldr	r2, [pc, #44]	; (801adb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801ad8c:	e002      	b.n	801ad94 <LoopFillZerobss>

0801ad8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801ad8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801ad90:	f842 3b04 	str.w	r3, [r2], #4

0801ad94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801ad94:	4b09      	ldr	r3, [pc, #36]	; (801adbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801ad96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801ad98:	d3f9      	bcc.n	801ad8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801ad9a:	f7ff fcbd 	bl	801a718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801ad9e:	f007 ff07 	bl	8022bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801ada2:	f7fe fa87 	bl	80192b4 <main>
  bx  lr    
 801ada6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801ada8:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 801adac:	080bf060 	.word	0x080bf060
  ldr  r0, =_sdata
 801adb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801adb4:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 801adb8:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 801adbc:	2000c730 	.word	0x2000c730

0801adc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801adc0:	e7fe      	b.n	801adc0 <ADC_IRQHandler>

0801adc2 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801adc2:	4770      	bx	lr

0801adc4 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 801adc4:	b508      	push	{r3, lr}
    switch (fontId)
 801adc6:	2901      	cmp	r1, #1
 801adc8:	d007      	beq.n	801adda <_ZN23ApplicationFontProvider7getFontEt+0x16>
 801adca:	b119      	cbz	r1, 801add4 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 801adcc:	2902      	cmp	r1, #2
 801adce:	d007      	beq.n	801ade0 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    case Typography::LARGE:
        return &(getFont_verdana_40_4bpp());
    case Typography::SMALL:
        return &(getFont_verdana_10_4bpp());
    default:
        return 0;
 801add0:	2000      	movs	r0, #0
 801add2:	e001      	b.n	801add8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return &(getFont_verdana_20_4bpp());
 801add4:	f000 f842 	bl	801ae5c <_Z23getFont_verdana_20_4bppv>
    }
}
 801add8:	bd08      	pop	{r3, pc}
        return &(getFont_verdana_40_4bpp());
 801adda:	f000 f871 	bl	801aec0 <_Z23getFont_verdana_40_4bppv>
 801adde:	e7fb      	b.n	801add8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return &(getFont_verdana_10_4bpp());
 801ade0:	f000 f80c 	bl	801adfc <_Z23getFont_verdana_10_4bppv>
 801ade4:	e7f8      	b.n	801add8 <_ZN23ApplicationFontProvider7getFontEt+0x14>

0801ade6 <_ZN23ApplicationFontProviderD0Ev>:
 801ade6:	b510      	push	{r4, lr}
 801ade8:	4604      	mov	r4, r0
 801adea:	2104      	movs	r1, #4
 801adec:	f007 fe88 	bl	8022b00 <_ZdlPvj>
 801adf0:	4620      	mov	r0, r4
 801adf2:	bd10      	pop	{r4, pc}

0801adf4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_10_4bpp()
{
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 801adf4:	4770      	bx	lr

0801adf6 <__tcf_1>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_20_4bpp()
{
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 190, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 801adf6:	4770      	bx	lr

0801adf8 <__tcf_2>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_40_4bpp()
{
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 801adf8:	4770      	bx	lr
	...

0801adfc <_Z23getFont_verdana_10_4bppv>:
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 801adfc:	4b11      	ldr	r3, [pc, #68]	; (801ae44 <_Z23getFont_verdana_10_4bppv+0x48>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	f013 0f01 	tst.w	r3, #1
 801ae04:	d001      	beq.n	801ae0a <_Z23getFont_verdana_10_4bppv+0xe>
}
 801ae06:	4810      	ldr	r0, [pc, #64]	; (801ae48 <_Z23getFont_verdana_10_4bppv+0x4c>)
 801ae08:	4770      	bx	lr
{
 801ae0a:	b500      	push	{lr}
 801ae0c:	b089      	sub	sp, #36	; 0x24
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 801ae0e:	2200      	movs	r2, #0
 801ae10:	9207      	str	r2, [sp, #28]
 801ae12:	9206      	str	r2, [sp, #24]
 801ae14:	4b0d      	ldr	r3, [pc, #52]	; (801ae4c <_Z23getFont_verdana_10_4bppv+0x50>)
 801ae16:	9305      	str	r3, [sp, #20]
 801ae18:	4b0d      	ldr	r3, [pc, #52]	; (801ae50 <_Z23getFont_verdana_10_4bppv+0x54>)
 801ae1a:	9304      	str	r3, [sp, #16]
 801ae1c:	9203      	str	r2, [sp, #12]
 801ae1e:	9202      	str	r2, [sp, #8]
 801ae20:	2304      	movs	r3, #4
 801ae22:	9301      	str	r3, [sp, #4]
 801ae24:	9200      	str	r2, [sp, #0]
 801ae26:	230a      	movs	r3, #10
 801ae28:	490a      	ldr	r1, [pc, #40]	; (801ae54 <_Z23getFont_verdana_10_4bppv+0x58>)
 801ae2a:	4807      	ldr	r0, [pc, #28]	; (801ae48 <_Z23getFont_verdana_10_4bppv+0x4c>)
 801ae2c:	f004 fe40 	bl	801fab0 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801ae30:	4b04      	ldr	r3, [pc, #16]	; (801ae44 <_Z23getFont_verdana_10_4bppv+0x48>)
 801ae32:	2201      	movs	r2, #1
 801ae34:	601a      	str	r2, [r3, #0]
 801ae36:	4808      	ldr	r0, [pc, #32]	; (801ae58 <_Z23getFont_verdana_10_4bppv+0x5c>)
 801ae38:	f007 fe9c 	bl	8022b74 <atexit>
}
 801ae3c:	4802      	ldr	r0, [pc, #8]	; (801ae48 <_Z23getFont_verdana_10_4bppv+0x4c>)
 801ae3e:	b009      	add	sp, #36	; 0x24
 801ae40:	f85d fb04 	ldr.w	pc, [sp], #4
 801ae44:	2000b9b0 	.word	0x2000b9b0
 801ae48:	2000b9bc 	.word	0x2000b9bc
 801ae4c:	0802a6b4 	.word	0x0802a6b4
 801ae50:	08026af4 	.word	0x08026af4
 801ae54:	0802a8d0 	.word	0x0802a8d0
 801ae58:	0801adf5 	.word	0x0801adf5

0801ae5c <_Z23getFont_verdana_20_4bppv>:
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 190, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 801ae5c:	4b12      	ldr	r3, [pc, #72]	; (801aea8 <_Z23getFont_verdana_20_4bppv+0x4c>)
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	f013 0f01 	tst.w	r3, #1
 801ae64:	d001      	beq.n	801ae6a <_Z23getFont_verdana_20_4bppv+0xe>
}
 801ae66:	4811      	ldr	r0, [pc, #68]	; (801aeac <_Z23getFont_verdana_20_4bppv+0x50>)
 801ae68:	4770      	bx	lr
{
 801ae6a:	b510      	push	{r4, lr}
 801ae6c:	b088      	sub	sp, #32
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 190, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 801ae6e:	2300      	movs	r3, #0
 801ae70:	9307      	str	r3, [sp, #28]
 801ae72:	233f      	movs	r3, #63	; 0x3f
 801ae74:	9306      	str	r3, [sp, #24]
 801ae76:	4b0e      	ldr	r3, [pc, #56]	; (801aeb0 <_Z23getFont_verdana_20_4bppv+0x54>)
 801ae78:	9305      	str	r3, [sp, #20]
 801ae7a:	4b0e      	ldr	r3, [pc, #56]	; (801aeb4 <_Z23getFont_verdana_20_4bppv+0x58>)
 801ae7c:	9304      	str	r3, [sp, #16]
 801ae7e:	2401      	movs	r4, #1
 801ae80:	9403      	str	r4, [sp, #12]
 801ae82:	9402      	str	r4, [sp, #8]
 801ae84:	2304      	movs	r3, #4
 801ae86:	9301      	str	r3, [sp, #4]
 801ae88:	9300      	str	r3, [sp, #0]
 801ae8a:	2314      	movs	r3, #20
 801ae8c:	22be      	movs	r2, #190	; 0xbe
 801ae8e:	490a      	ldr	r1, [pc, #40]	; (801aeb8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 801ae90:	4806      	ldr	r0, [pc, #24]	; (801aeac <_Z23getFont_verdana_20_4bppv+0x50>)
 801ae92:	f004 fe0d 	bl	801fab0 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801ae96:	4b04      	ldr	r3, [pc, #16]	; (801aea8 <_Z23getFont_verdana_20_4bppv+0x4c>)
 801ae98:	601c      	str	r4, [r3, #0]
 801ae9a:	4808      	ldr	r0, [pc, #32]	; (801aebc <_Z23getFont_verdana_20_4bppv+0x60>)
 801ae9c:	f007 fe6a 	bl	8022b74 <atexit>
}
 801aea0:	4802      	ldr	r0, [pc, #8]	; (801aeac <_Z23getFont_verdana_20_4bppv+0x50>)
 801aea2:	b008      	add	sp, #32
 801aea4:	bd10      	pop	{r4, pc}
 801aea6:	bf00      	nop
 801aea8:	2000b9b4 	.word	0x2000b9b4
 801aeac:	2000b9dc 	.word	0x2000b9dc
 801aeb0:	0802a6b8 	.word	0x0802a6b8
 801aeb4:	08026af8 	.word	0x08026af8
 801aeb8:	0802a8e0 	.word	0x0802a8e0
 801aebc:	0801adf7 	.word	0x0801adf7

0801aec0 <_Z23getFont_verdana_40_4bppv>:
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 801aec0:	4b11      	ldr	r3, [pc, #68]	; (801af08 <_Z23getFont_verdana_40_4bppv+0x48>)
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	f013 0f01 	tst.w	r3, #1
 801aec8:	d001      	beq.n	801aece <_Z23getFont_verdana_40_4bppv+0xe>
    return verdana_40_4bpp;
}
 801aeca:	4810      	ldr	r0, [pc, #64]	; (801af0c <_Z23getFont_verdana_40_4bppv+0x4c>)
 801aecc:	4770      	bx	lr
{
 801aece:	b500      	push	{lr}
 801aed0:	b089      	sub	sp, #36	; 0x24
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 801aed2:	2200      	movs	r2, #0
 801aed4:	9207      	str	r2, [sp, #28]
 801aed6:	9206      	str	r2, [sp, #24]
 801aed8:	4b0d      	ldr	r3, [pc, #52]	; (801af10 <_Z23getFont_verdana_40_4bppv+0x50>)
 801aeda:	9305      	str	r3, [sp, #20]
 801aedc:	4b0d      	ldr	r3, [pc, #52]	; (801af14 <_Z23getFont_verdana_40_4bppv+0x54>)
 801aede:	9304      	str	r3, [sp, #16]
 801aee0:	9203      	str	r2, [sp, #12]
 801aee2:	9202      	str	r2, [sp, #8]
 801aee4:	2304      	movs	r3, #4
 801aee6:	9301      	str	r3, [sp, #4]
 801aee8:	9200      	str	r2, [sp, #0]
 801aeea:	2328      	movs	r3, #40	; 0x28
 801aeec:	490a      	ldr	r1, [pc, #40]	; (801af18 <_Z23getFont_verdana_40_4bppv+0x58>)
 801aeee:	4807      	ldr	r0, [pc, #28]	; (801af0c <_Z23getFont_verdana_40_4bppv+0x4c>)
 801aef0:	f004 fdde 	bl	801fab0 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801aef4:	4b04      	ldr	r3, [pc, #16]	; (801af08 <_Z23getFont_verdana_40_4bppv+0x48>)
 801aef6:	2201      	movs	r2, #1
 801aef8:	601a      	str	r2, [r3, #0]
 801aefa:	4808      	ldr	r0, [pc, #32]	; (801af1c <_Z23getFont_verdana_40_4bppv+0x5c>)
 801aefc:	f007 fe3a 	bl	8022b74 <atexit>
}
 801af00:	4802      	ldr	r0, [pc, #8]	; (801af0c <_Z23getFont_verdana_40_4bppv+0x4c>)
 801af02:	b009      	add	sp, #36	; 0x24
 801af04:	f85d fb04 	ldr.w	pc, [sp], #4
 801af08:	2000b9b8 	.word	0x2000b9b8
 801af0c:	2000b9fc 	.word	0x2000b9fc
 801af10:	0802a8cc 	.word	0x0802a8cc
 801af14:	0802a6b0 	.word	0x0802a6b0
 801af18:	0802b344 	.word	0x0802b344
 801af1c:	0801adf9 	.word	0x0801adf9

0801af20 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801af20:	4770      	bx	lr

0801af22 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 801af22:	4770      	bx	lr

0801af24 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 801af24:	6041      	str	r1, [r0, #4]
    }
 801af26:	4770      	bx	lr

0801af28 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 801af28:	4770      	bx	lr

0801af2a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801af2a:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 801af2e:	b183      	cbz	r3, 801af52 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x28>
    virtual void handlePendingScreenTransition()
 801af30:	b510      	push	{r4, lr}
 801af32:	4604      	mov	r4, r0
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801af34:	681a      	ldr	r2, [r3, #0]
 801af36:	68d2      	ldr	r2, [r2, #12]
 801af38:	4618      	mov	r0, r3
 801af3a:	4790      	blx	r2
 801af3c:	b900      	cbnz	r0, 801af40 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x16>
    }
 801af3e:	bd10      	pop	{r4, pc}
        {
            pendingScreenTransitionCallback->execute();
 801af40:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 801af44:	6803      	ldr	r3, [r0, #0]
 801af46:	689b      	ldr	r3, [r3, #8]
 801af48:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801af4a:	2300      	movs	r3, #0
 801af4c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    }
 801af50:	e7f5      	b.n	801af3e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x14>
 801af52:	4770      	bx	lr

0801af54 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801af54:	4770      	bx	lr

0801af56 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 801af56:	4770      	bx	lr

0801af58 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
    {
        done = true;
 801af58:	2301      	movs	r3, #1
 801af5a:	7203      	strb	r3, [r0, #8]
    }
 801af5c:	4770      	bx	lr

0801af5e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801af5e:	4770      	bx	lr

0801af60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801af60:	b510      	push	{r4, lr}
 801af62:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun_0)();
 801af64:	6844      	ldr	r4, [r0, #4]
 801af66:	68c2      	ldr	r2, [r0, #12]
 801af68:	1051      	asrs	r1, r2, #1
 801af6a:	1860      	adds	r0, r4, r1
 801af6c:	f012 0f01 	tst.w	r2, #1
 801af70:	d004      	beq.n	801af7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x1c>
 801af72:	5862      	ldr	r2, [r4, r1]
 801af74:	689b      	ldr	r3, [r3, #8]
 801af76:	58d3      	ldr	r3, [r2, r3]
 801af78:	4798      	blx	r3
    }
 801af7a:	bd10      	pop	{r4, pc}
        (pobject->*pmemfun_0)();
 801af7c:	689b      	ldr	r3, [r3, #8]
 801af7e:	e7fb      	b.n	801af78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>

0801af80 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801af80:	6843      	ldr	r3, [r0, #4]
 801af82:	b14b      	cbz	r3, 801af98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 801af84:	6883      	ldr	r3, [r0, #8]
 801af86:	b10b      	cbz	r3, 801af8c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 801af88:	2001      	movs	r0, #1
 801af8a:	4770      	bx	lr
 801af8c:	68c3      	ldr	r3, [r0, #12]
 801af8e:	f013 0f01 	tst.w	r3, #1
 801af92:	d003      	beq.n	801af9c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 801af94:	2001      	movs	r0, #1
 801af96:	4770      	bx	lr
 801af98:	2000      	movs	r0, #0
 801af9a:	4770      	bx	lr
 801af9c:	2000      	movs	r0, #0
    }
 801af9e:	4770      	bx	lr

0801afa0 <_ZN8touchgfx12NoTransitionD0Ev>:
    virtual ~NoTransition() { }
 801afa0:	b510      	push	{r4, lr}
 801afa2:	4604      	mov	r4, r0
 801afa4:	210c      	movs	r1, #12
 801afa6:	f007 fdab 	bl	8022b00 <_ZdlPvj>
 801afaa:	4620      	mov	r0, r4
 801afac:	bd10      	pop	{r4, pc}

0801afae <_ZN23FrontendApplicationBaseD0Ev>:
 801afae:	b510      	push	{r4, lr}
 801afb0:	4604      	mov	r4, r0
 801afb2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801afb6:	f007 fda3 	bl	8022b00 <_ZdlPvj>
 801afba:	4620      	mov	r0, r4
 801afbc:	bd10      	pop	{r4, pc}

0801afbe <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801afbe:	b510      	push	{r4, lr}
 801afc0:	4604      	mov	r4, r0
 801afc2:	2110      	movs	r1, #16
 801afc4:	f007 fd9c 	bl	8022b00 <_ZdlPvj>
 801afc8:	4620      	mov	r0, r4
 801afca:	bd10      	pop	{r4, pc}

0801afcc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen3_screen/Screen3Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801afcc:	b570      	push	{r4, r5, r6, lr}
 801afce:	4604      	mov	r4, r0
 801afd0:	460d      	mov	r5, r1
 801afd2:	4616      	mov	r6, r2
        pendingScreenTransitionCallback(0)
 801afd4:	f003 fd18 	bl	801ea08 <_ZN8touchgfx11ApplicationC1Ev>
 801afd8:	2000      	movs	r0, #0
 801afda:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 801afde:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
        instance = this;
 801afe2:	4b0a      	ldr	r3, [pc, #40]	; (801b00c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 801afe4:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801afe6:	4b0a      	ldr	r3, [pc, #40]	; (801b010 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x44>)
 801afe8:	6023      	str	r3, [r4, #0]
    Callback() : pobject(0), pmemfun_0(0) { }
 801afea:	4b0a      	ldr	r3, [pc, #40]	; (801b014 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
 801afec:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 801aff0:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 801aff4:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 801aff8:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
 801affc:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 801b000:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
{
    Texts::setLanguage(GB);
 801b004:	f000 fc2a 	bl	801b85c <_ZN8touchgfx5Texts11setLanguageEt>
}
 801b008:	4620      	mov	r0, r4
 801b00a:	bd70      	pop	{r4, r5, r6, pc}
 801b00c:	2000bac8 	.word	0x2000bac8
 801b010:	08025344 	.word	0x08025344
 801b014:	0802532c 	.word	0x0802532c

0801b018 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 801b018:	b410      	push	{r4}
 801b01a:	b089      	sub	sp, #36	; 0x24
 801b01c:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 801b01e:	4a0d      	ldr	r2, [pc, #52]	; (801b054 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x3c>)
 801b020:	9206      	str	r2, [sp, #24]
 801b022:	2200      	movs	r2, #0
 801b024:	9207      	str	r2, [sp, #28]
 801b026:	466c      	mov	r4, sp
 801b028:	aa08      	add	r2, sp, #32
 801b02a:	e912 0003 	ldmdb	r2, {r0, r1}
 801b02e:	e884 0003 	stmia.w	r4, {r0, r1}
        this->pmemfun_0 = pmemfun_0;
 801b032:	aa04      	add	r2, sp, #16
 801b034:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801b038:	f8c3 313c 	str.w	r3, [r3, #316]	; 0x13c
 801b03c:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801b040:	e884 0003 	stmia.w	r4, {r0, r1}
    pendingScreenTransitionCallback = &transitionCallback;
 801b044:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801b048:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801b04c:	b009      	add	sp, #36	; 0x24
 801b04e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b052:	4770      	bx	lr
 801b054:	0801b1a5 	.word	0x0801b1a5

0801b058 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801b058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b05c:	4607      	mov	r7, r0
 801b05e:	4688      	mov	r8, r1
 801b060:	4614      	mov	r4, r2
 801b062:	4699      	mov	r9, r3
 801b064:	f8dd a020 	ldr.w	sl, [sp, #32]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801b068:	6890      	ldr	r0, [r2, #8]
 801b06a:	6803      	ldr	r3, [r0, #0]
 801b06c:	6a1b      	ldr	r3, [r3, #32]
 801b06e:	4798      	blx	r3
 801b070:	f242 030b 	movw	r3, #8203	; 0x200b
 801b074:	4298      	cmp	r0, r3
 801b076:	d975      	bls.n	801b164 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801b078:	6860      	ldr	r0, [r4, #4]
 801b07a:	6803      	ldr	r3, [r0, #0]
 801b07c:	6a1b      	ldr	r3, [r3, #32]
 801b07e:	4798      	blx	r3
 801b080:	280f      	cmp	r0, #15
 801b082:	d975      	bls.n	801b170 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801b084:	68e0      	ldr	r0, [r4, #12]
 801b086:	6803      	ldr	r3, [r0, #0]
 801b088:	6a1b      	ldr	r3, [r3, #32]
 801b08a:	4798      	blx	r3
 801b08c:	280b      	cmp	r0, #11
 801b08e:	d975      	bls.n	801b17c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
    Application::getInstance()->clearAllTimerWidgets();
 801b090:	f003 fc98 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801b094:	f003 fc9c 	bl	801e9d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801b098:	f8d9 0000 	ldr.w	r0, [r9]
 801b09c:	b110      	cbz	r0, 801b0a4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x4c>
        (*currentTrans)->tearDown();
 801b09e:	6803      	ldr	r3, [r0, #0]
 801b0a0:	68db      	ldr	r3, [r3, #12]
 801b0a2:	4798      	blx	r3
    if (*currentTrans)
 801b0a4:	f8d9 0000 	ldr.w	r0, [r9]
 801b0a8:	b110      	cbz	r0, 801b0b0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 801b0aa:	6803      	ldr	r3, [r0, #0]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	4798      	blx	r3
    if (*currentScreen)
 801b0b0:	6838      	ldr	r0, [r7, #0]
 801b0b2:	b110      	cbz	r0, 801b0ba <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x62>
        (*currentScreen)->tearDownScreen();
 801b0b4:	6803      	ldr	r3, [r0, #0]
 801b0b6:	695b      	ldr	r3, [r3, #20]
 801b0b8:	4798      	blx	r3
    if (*currentPresenter)
 801b0ba:	f8d8 0000 	ldr.w	r0, [r8]
 801b0be:	b110      	cbz	r0, 801b0c6 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6e>
        (*currentPresenter)->deactivate();
 801b0c0:	6803      	ldr	r3, [r0, #0]
 801b0c2:	685b      	ldr	r3, [r3, #4]
 801b0c4:	4798      	blx	r3
    if (*currentScreen)
 801b0c6:	6838      	ldr	r0, [r7, #0]
 801b0c8:	b110      	cbz	r0, 801b0d0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x78>
        (*currentScreen)->~Screen();
 801b0ca:	6803      	ldr	r3, [r0, #0]
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	4798      	blx	r3
    if (*currentPresenter)
 801b0d0:	f8d8 0000 	ldr.w	r0, [r8]
 801b0d4:	b110      	cbz	r0, 801b0dc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x84>
        (*currentPresenter)->~Presenter();
 801b0d6:	6803      	ldr	r3, [r0, #0]
 801b0d8:	689b      	ldr	r3, [r3, #8]
 801b0da:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801b0dc:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 801b0de:	6803      	ldr	r3, [r0, #0]
 801b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0e2:	2100      	movs	r1, #0
 801b0e4:	4798      	blx	r3
 801b0e6:	4605      	mov	r5, r0
 801b0e8:	b120      	cbz	r0, 801b0f4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9c>
        screenContainer(0), done(false)
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	6043      	str	r3, [r0, #4]
 801b0ee:	7203      	strb	r3, [r0, #8]
    NoTransition() : Transition() { }
 801b0f0:	4b26      	ldr	r3, [pc, #152]	; (801b18c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 801b0f2:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801b0f4:	68a0      	ldr	r0, [r4, #8]
 801b0f6:	6803      	ldr	r3, [r0, #0]
 801b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0fa:	2100      	movs	r1, #0
 801b0fc:	4798      	blx	r3
 801b0fe:	4606      	mov	r6, r0
 801b100:	b108      	cbz	r0, 801b106 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
 801b102:	f000 fc4b 	bl	801b99c <_ZN11Screen3ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801b106:	6860      	ldr	r0, [r4, #4]
 801b108:	6803      	ldr	r3, [r0, #0]
 801b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b10c:	2100      	movs	r1, #0
 801b10e:	4798      	blx	r3
 801b110:	4604      	mov	r4, r0
 801b112:	b110      	cbz	r0, 801b11a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc2>
 801b114:	4631      	mov	r1, r6
 801b116:	f000 fc27 	bl	801b968 <_ZN16Screen3PresenterC1ER11Screen3View>
    *currentTrans = newTransition;
 801b11a:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 801b11e:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 801b122:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 801b124:	2c00      	cmp	r4, #0
 801b126:	d02f      	beq.n	801b188 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801b128:	1d23      	adds	r3, r4, #4
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 801b12a:	f8ca 3000 	str.w	r3, [sl]
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
    {
        model = m;
 801b12e:	f8c4 a008 	str.w	sl, [r4, #8]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 801b132:	63f4      	str	r4, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 801b134:	6833      	ldr	r3, [r6, #0]
 801b136:	68db      	ldr	r3, [r3, #12]
 801b138:	4630      	mov	r0, r6
 801b13a:	4798      	blx	r3
    newPresenter->activate();
 801b13c:	6823      	ldr	r3, [r4, #0]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	4620      	mov	r0, r4
 801b142:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801b144:	4629      	mov	r1, r5
 801b146:	4630      	mov	r0, r6
 801b148:	f004 fc88 	bl	801fa5c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801b14c:	682b      	ldr	r3, [r5, #0]
 801b14e:	691b      	ldr	r3, [r3, #16]
 801b150:	4628      	mov	r0, r5
 801b152:	4798      	blx	r3
    Application::getInstance()->draw();
 801b154:	f003 fc36 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801b158:	6803      	ldr	r3, [r0, #0]
 801b15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b15c:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 801b15e:	4620      	mov	r0, r4
 801b160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801b164:	4b0a      	ldr	r3, [pc, #40]	; (801b190 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 801b166:	4a0b      	ldr	r2, [pc, #44]	; (801b194 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 801b168:	21c2      	movs	r1, #194	; 0xc2
 801b16a:	480b      	ldr	r0, [pc, #44]	; (801b198 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 801b16c:	f007 fce4 	bl	8022b38 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801b170:	4b0a      	ldr	r3, [pc, #40]	; (801b19c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801b172:	4a08      	ldr	r2, [pc, #32]	; (801b194 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 801b174:	21c3      	movs	r1, #195	; 0xc3
 801b176:	4808      	ldr	r0, [pc, #32]	; (801b198 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 801b178:	f007 fcde 	bl	8022b38 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801b17c:	4b08      	ldr	r3, [pc, #32]	; (801b1a0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801b17e:	4a05      	ldr	r2, [pc, #20]	; (801b194 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 801b180:	21c4      	movs	r1, #196	; 0xc4
 801b182:	4805      	ldr	r0, [pc, #20]	; (801b198 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 801b184:	f007 fcd8 	bl	8022b38 <__assert_func>
    model->bind(newPresenter);
 801b188:	2300      	movs	r3, #0
 801b18a:	e7ce      	b.n	801b12a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd2>
 801b18c:	08025380 	.word	0x08025380
 801b190:	08025398 	.word	0x08025398
 801b194:	080255c0 	.word	0x080255c0
 801b198:	08025428 	.word	0x08025428
 801b19c:	08025478 	.word	0x08025478
 801b1a0:	0802551c 	.word	0x0802551c

0801b1a4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 801b1a4:	b500      	push	{lr}
 801b1a6:	b083      	sub	sp, #12
    makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801b1a8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801b1ac:	9300      	str	r3, [sp, #0]
 801b1ae:	4b05      	ldr	r3, [pc, #20]	; (801b1c4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x20>)
 801b1b0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 801b1b4:	f500 7198 	add.w	r1, r0, #304	; 0x130
 801b1b8:	4803      	ldr	r0, [pc, #12]	; (801b1c8 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x24>)
 801b1ba:	f7ff ff4d 	bl	801b058 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801b1be:	b003      	add	sp, #12
 801b1c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b1c4:	2000bac4 	.word	0x2000bac4
 801b1c8:	2000bac0 	.word	0x2000bac0

0801b1cc <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 801b1cc:	4770      	bx	lr

0801b1ce <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801b1ce:	4770      	bx	lr

0801b1d0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 801b1d0:	4770      	bx	lr

0801b1d2 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 801b1d2:	4770      	bx	lr

0801b1d4 <_ZN15Screen3ViewBase12playPrevSongEv>:
     * Custom Action Handlers
     */
    virtual void playPrevSong()
    {
        // Override and implement this function in Screen3View
    }
 801b1d4:	4770      	bx	lr

0801b1d6 <_ZN15Screen3ViewBase12playNextSongEv>:

    virtual void playNextSong()
    {
        // Override and implement this function in Screen3View
    }
 801b1d6:	4770      	bx	lr

0801b1d8 <_ZN15Screen3ViewBase9playPauseEv>:

    virtual void playPause()
    {
        // Override and implement this function in Screen3View
    }
 801b1d8:	4770      	bx	lr

0801b1da <_ZN15Screen3ViewBase16moveSongPositionEi>:

    virtual void moveSongPosition(int value)
    {
        // Override and implement this function in Screen3View
    }
 801b1da:	4770      	bx	lr

0801b1dc <_ZN15Screen3ViewBase11setupScreenEv>:
}

void Screen3ViewBase::setupScreen()
{

}
 801b1dc:	4770      	bx	lr

0801b1de <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801b1de:	b508      	push	{r3, lr}
    if (&src == &buttonPrev)
 801b1e0:	f500 7337 	add.w	r3, r0, #732	; 0x2dc
 801b1e4:	428b      	cmp	r3, r1
 801b1e6:	d008      	beq.n	801b1fa <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>
        //songPrevious
        //When buttonPrev clicked call virtual function
        //Call playPrevSong
        playPrevSong();
    }
    else if (&src == &buttonPlay)
 801b1e8:	f500 7346 	add.w	r3, r0, #792	; 0x318
 801b1ec:	428b      	cmp	r3, r1
 801b1ee:	d008      	beq.n	801b202 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
        //songPlay
        //When buttonPlay clicked call virtual function
        //Call playPause
        playPause();
    }
    else if (&src == &buttonNext)
 801b1f0:	f500 7355 	add.w	r3, r0, #852	; 0x354
 801b1f4:	428b      	cmp	r3, r1
 801b1f6:	d008      	beq.n	801b20a <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2c>
        //songNext
        //When buttonNext clicked call virtual function
        //Call playNextSong
        playNextSong();
    }
}
 801b1f8:	bd08      	pop	{r3, pc}
        playPrevSong();
 801b1fa:	6803      	ldr	r3, [r0, #0]
 801b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1fe:	4798      	blx	r3
 801b200:	e7fa      	b.n	801b1f8 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a>
        playPause();
 801b202:	6803      	ldr	r3, [r0, #0]
 801b204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b206:	4798      	blx	r3
 801b208:	e7f6      	b.n	801b1f8 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a>
        playNextSong();
 801b20a:	6803      	ldr	r3, [r0, #0]
 801b20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b20e:	4798      	blx	r3
}
 801b210:	e7f2      	b.n	801b1f8 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a>

0801b212 <_ZN15Screen3ViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi>:

void Screen3ViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
 801b212:	b508      	push	{r3, lr}
    if (&src == &slider)
 801b214:	f100 03d4 	add.w	r3, r0, #212	; 0xd4
 801b218:	428b      	cmp	r3, r1
 801b21a:	d000      	beq.n	801b21e <_ZN15Screen3ViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi+0xc>
        //progressSliderChanged
        //When slider value confirmed call virtual function
        //Call moveSongPosition
        moveSongPosition(value);
    }
}
 801b21c:	bd08      	pop	{r3, pc}
 801b21e:	4611      	mov	r1, r2
        moveSongPosition(value);
 801b220:	6803      	ldr	r3, [r0, #0]
 801b222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b224:	4798      	blx	r3
}
 801b226:	e7f9      	b.n	801b21c <_ZN15Screen3ViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi+0xa>

0801b228 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 801b228:	4770      	bx	lr

0801b22a <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801b22a:	4770      	bx	lr

0801b22c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 801b22c:	b570      	push	{r4, r5, r6, lr}
 801b22e:	4603      	mov	r3, r0
        (pobject->*pmemfun_2)(t1, t2);
 801b230:	6846      	ldr	r6, [r0, #4]
 801b232:	68c4      	ldr	r4, [r0, #12]
 801b234:	1065      	asrs	r5, r4, #1
 801b236:	1970      	adds	r0, r6, r5
 801b238:	f014 0f01 	tst.w	r4, #1
 801b23c:	d004      	beq.n	801b248 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7executeES4_i+0x1c>
 801b23e:	5974      	ldr	r4, [r6, r5]
 801b240:	689b      	ldr	r3, [r3, #8]
 801b242:	58e3      	ldr	r3, [r4, r3]
 801b244:	4798      	blx	r3
    }
 801b246:	bd70      	pop	{r4, r5, r6, pc}
        (pobject->*pmemfun_2)(t1, t2);
 801b248:	689b      	ldr	r3, [r3, #8]
 801b24a:	e7fb      	b.n	801b244 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7executeES4_i+0x18>

0801b24c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7isValidEv>:
        return (pobject != 0) && (pmemfun_2 != 0);
 801b24c:	6843      	ldr	r3, [r0, #4]
 801b24e:	b14b      	cbz	r3, 801b264 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7isValidEv+0x18>
 801b250:	6883      	ldr	r3, [r0, #8]
 801b252:	b10b      	cbz	r3, 801b258 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7isValidEv+0xc>
 801b254:	2001      	movs	r0, #1
 801b256:	4770      	bx	lr
 801b258:	68c3      	ldr	r3, [r0, #12]
 801b25a:	f013 0f01 	tst.w	r3, #1
 801b25e:	d003      	beq.n	801b268 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7isValidEv+0x1c>
 801b260:	2001      	movs	r0, #1
 801b262:	4770      	bx	lr
 801b264:	2000      	movs	r0, #0
 801b266:	4770      	bx	lr
 801b268:	2000      	movs	r0, #0
    }
 801b26a:	4770      	bx	lr

0801b26c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801b26c:	b538      	push	{r3, r4, r5, lr}
 801b26e:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 801b270:	6845      	ldr	r5, [r0, #4]
 801b272:	68c2      	ldr	r2, [r0, #12]
 801b274:	1054      	asrs	r4, r2, #1
 801b276:	1928      	adds	r0, r5, r4
 801b278:	f012 0f01 	tst.w	r2, #1
 801b27c:	d004      	beq.n	801b288 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x1c>
 801b27e:	592a      	ldr	r2, [r5, r4]
 801b280:	689b      	ldr	r3, [r3, #8]
 801b282:	58d3      	ldr	r3, [r2, r3]
 801b284:	4798      	blx	r3
    }
 801b286:	bd38      	pop	{r3, r4, r5, pc}
        (pobject->*pmemfun_1)(t1);
 801b288:	689b      	ldr	r3, [r3, #8]
 801b28a:	e7fb      	b.n	801b284 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>

0801b28c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 801b28c:	6843      	ldr	r3, [r0, #4]
 801b28e:	b14b      	cbz	r3, 801b2a4 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x18>
 801b290:	6883      	ldr	r3, [r0, #8]
 801b292:	b10b      	cbz	r3, 801b298 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 801b294:	2001      	movs	r0, #1
 801b296:	4770      	bx	lr
 801b298:	68c3      	ldr	r3, [r0, #12]
 801b29a:	f013 0f01 	tst.w	r3, #1
 801b29e:	d003      	beq.n	801b2a8 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x1c>
 801b2a0:	2001      	movs	r0, #1
 801b2a2:	4770      	bx	lr
 801b2a4:	2000      	movs	r0, #0
 801b2a6:	4770      	bx	lr
 801b2a8:	2000      	movs	r0, #0
    }
 801b2aa:	4770      	bx	lr

0801b2ac <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801b2ac:	b510      	push	{r4, lr}
 801b2ae:	4604      	mov	r4, r0
 801b2b0:	2110      	movs	r1, #16
 801b2b2:	f007 fc25 	bl	8022b00 <_ZdlPvj>
 801b2b6:	4620      	mov	r0, r4
 801b2b8:	bd10      	pop	{r4, pc}

0801b2ba <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 801b2ba:	b510      	push	{r4, lr}
 801b2bc:	4604      	mov	r4, r0
 801b2be:	2110      	movs	r1, #16
 801b2c0:	f007 fc1e 	bl	8022b00 <_ZdlPvj>
 801b2c4:	4620      	mov	r0, r4
 801b2c6:	bd10      	pop	{r4, pc}

0801b2c8 <_ZN15Screen3ViewBaseC1Ev>:
Screen3ViewBase::Screen3ViewBase() :
 801b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2cc:	b0a9      	sub	sp, #164	; 0xa4
 801b2ce:	4604      	mov	r4, r0
    View() : presenter(0)
 801b2d0:	f004 fa46 	bl	801f760 <_ZN8touchgfx6ScreenC1Ev>
 801b2d4:	2600      	movs	r6, #0
 801b2d6:	63e6      	str	r6, [r4, #60]	; 0x3c
    sliderValueConfirmedCallback(this, &Screen3ViewBase::sliderValueConfirmedCallbackHandler)
 801b2d8:	4625      	mov	r5, r4
 801b2da:	4bce      	ldr	r3, [pc, #824]	; (801b614 <_ZN15Screen3ViewBaseC1Ev+0x34c>)
 801b2dc:	f845 3b40 	str.w	r3, [r5], #64
 801b2e0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b2e4:	a928      	add	r1, sp, #160	; 0xa0
 801b2e6:	f821 7d64 	strh.w	r7, [r1, #-100]!
        this->x = x;
 801b2ea:	80ae      	strh	r6, [r5, #4]
        this->y = y;
 801b2ec:	80ee      	strh	r6, [r5, #6]
        this->width = width;
 801b2ee:	812e      	strh	r6, [r5, #8]
        this->height = height;
 801b2f0:	816e      	strh	r6, [r5, #10]
        this->x = 0;
 801b2f2:	81ae      	strh	r6, [r5, #12]
        this->y = 0;
 801b2f4:	81ee      	strh	r6, [r5, #14]
        this->width = 0;
 801b2f6:	822e      	strh	r6, [r5, #16]
        this->height = 0;
 801b2f8:	826e      	strh	r6, [r5, #18]
        visible(true)
 801b2fa:	616e      	str	r6, [r5, #20]
 801b2fc:	61ae      	str	r6, [r5, #24]
 801b2fe:	61ee      	str	r6, [r5, #28]
 801b300:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 801b304:	f04f 0801 	mov.w	r8, #1
 801b308:	f885 8025 	strb.w	r8, [r5, #37]	; 0x25
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 801b30c:	4bc2      	ldr	r3, [pc, #776]	; (801b618 <_ZN15Screen3ViewBaseC1Ev+0x350>)
 801b30e:	6423      	str	r3, [r4, #64]	; 0x40
 801b310:	84ef      	strh	r7, [r5, #38]	; 0x26
 801b312:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
        setBitmap(bmp);
 801b316:	4628      	mov	r0, r5
 801b318:	f7f4 fd08 	bl	800fd2c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    TiledImage(const Bitmap& bmp = Bitmap()) : Image(bmp), xOffset(0), yOffset(0)
 801b31c:	4bbf      	ldr	r3, [pc, #764]	; (801b61c <_ZN15Screen3ViewBaseC1Ev+0x354>)
 801b31e:	6423      	str	r3, [r4, #64]	; 0x40
 801b320:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
 801b324:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801b328:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801b32c:	9303      	str	r3, [sp, #12]
 801b32e:	4618      	mov	r0, r3
 801b330:	f7f4 fd92 	bl	800fe58 <_ZN8touchgfx13ScalableImageC1Ev>
        this->x = x;
 801b334:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0
        this->y = y;
 801b338:	f8a4 60a2 	strh.w	r6, [r4, #162]	; 0xa2
        this->width = width;
 801b33c:	f8a4 60a4 	strh.w	r6, [r4, #164]	; 0xa4
        this->height = height;
 801b340:	f8a4 60a6 	strh.w	r6, [r4, #166]	; 0xa6
        this->x = 0;
 801b344:	f8a4 60a8 	strh.w	r6, [r4, #168]	; 0xa8
        this->y = 0;
 801b348:	f8a4 60aa 	strh.w	r6, [r4, #170]	; 0xaa
        this->width = 0;
 801b34c:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
        this->height = 0;
 801b350:	f8a4 60ae 	strh.w	r6, [r4, #174]	; 0xae
 801b354:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 801b358:	f8c4 60b4 	str.w	r6, [r4, #180]	; 0xb4
 801b35c:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 801b360:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
 801b364:	f884 80c1 	strb.w	r8, [r4, #193]	; 0xc1
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801b368:	f8a4 70c2 	strh.w	r7, [r4, #194]	; 0xc2
        color = col;
 801b36c:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 801b370:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
 801b374:	f884 70ca 	strb.w	r7, [r4, #202]	; 0xca
 801b378:	f884 60cb 	strb.w	r6, [r4, #203]	; 0xcb
 801b37c:	f884 60cc 	strb.w	r6, [r4, #204]	; 0xcc
 801b380:	f884 60cd 	strb.w	r6, [r4, #205]	; 0xcd
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 801b384:	4ba6      	ldr	r3, [pc, #664]	; (801b620 <_ZN15Screen3ViewBaseC1Ev+0x358>)
 801b386:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 801b38a:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
 801b38e:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
 801b392:	4658      	mov	r0, fp
 801b394:	f7f3 fca8 	bl	800ece8 <_ZN8touchgfx6SliderC1Ev>
 801b398:	f504 79e8 	add.w	r9, r4, #464	; 0x1d0
 801b39c:	4648      	mov	r0, r9
 801b39e:	f7f4 f949 	bl	800f634 <_ZN8touchgfx14CircleProgressC1Ev>
 801b3a2:	f504 7a2c 	add.w	sl, r4, #688	; 0x2b0
 801b3a6:	a928      	add	r1, sp, #160	; 0xa0
 801b3a8:	f821 7d60 	strh.w	r7, [r1, #-96]!
 801b3ac:	22ff      	movs	r2, #255	; 0xff
 801b3ae:	4650      	mov	r0, sl
 801b3b0:	f7f8 f876 	bl	80134a0 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh>
 801b3b4:	f504 7837 	add.w	r8, r4, #732	; 0x2dc
 801b3b8:	4640      	mov	r0, r8
 801b3ba:	f7f4 fbf3 	bl	800fba4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801b3be:	f504 7746 	add.w	r7, r4, #792	; 0x318
 801b3c2:	4638      	mov	r0, r7
 801b3c4:	f7f4 fbee 	bl	800fba4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801b3c8:	f504 7255 	add.w	r2, r4, #852	; 0x354
 801b3cc:	9207      	str	r2, [sp, #28]
 801b3ce:	4610      	mov	r0, r2
 801b3d0:	f7f4 fbe8 	bl	800fba4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801b3d4:	4b93      	ldr	r3, [pc, #588]	; (801b624 <_ZN15Screen3ViewBaseC1Ev+0x35c>)
 801b3d6:	9311      	str	r3, [sp, #68]	; 0x44
 801b3d8:	9612      	str	r6, [sp, #72]	; 0x48
 801b3da:	ab0d      	add	r3, sp, #52	; 0x34
 801b3dc:	aa11      	add	r2, sp, #68	; 0x44
 801b3de:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b3e2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
 801b3e6:	4a90      	ldr	r2, [pc, #576]	; (801b628 <_ZN15Screen3ViewBaseC1Ev+0x360>)
 801b3e8:	f8c4 23cc 	str.w	r2, [r4, #972]	; 0x3cc
        this->pobject = pobject;
 801b3ec:	f8c4 43d0 	str.w	r4, [r4, #976]	; 0x3d0
        this->pmemfun_1 = pmemfun_1;
 801b3f0:	f504 7275 	add.w	r2, r4, #980	; 0x3d4
 801b3f4:	e882 0003 	stmia.w	r2, {r0, r1}
 801b3f8:	4b8c      	ldr	r3, [pc, #560]	; (801b62c <_ZN15Screen3ViewBaseC1Ev+0x364>)
 801b3fa:	9313      	str	r3, [sp, #76]	; 0x4c
 801b3fc:	9614      	str	r6, [sp, #80]	; 0x50
 801b3fe:	ab0b      	add	r3, sp, #44	; 0x2c
 801b400:	aa13      	add	r2, sp, #76	; 0x4c
 801b402:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b406:	e883 0003 	stmia.w	r3, {r0, r1}
    {
 801b40a:	4a89      	ldr	r2, [pc, #548]	; (801b630 <_ZN15Screen3ViewBaseC1Ev+0x368>)
 801b40c:	f8c4 23dc 	str.w	r2, [r4, #988]	; 0x3dc
        this->pobject = pobject;
 801b410:	f8c4 43e0 	str.w	r4, [r4, #992]	; 0x3e0
        this->pmemfun_2 = pmemfun_2;
 801b414:	f504 7279 	add.w	r2, r4, #996	; 0x3e4
 801b418:	e882 0003 	stmia.w	r2, {r0, r1}
    CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801b41c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801b420:	f504 707b 	add.w	r0, r4, #1004	; 0x3ec
 801b424:	f002 f8b0 	bl	801d588 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
 801b428:	a928      	add	r1, sp, #160	; 0xa0
 801b42a:	230a      	movs	r3, #10
 801b42c:	f821 3d4c 	strh.w	r3, [r1, #-76]!
    backgroundImage.setBitmap(Bitmap(BITMAP_BLUE_TEXTURES_GREY_WASH_WALL_ID));
 801b430:	4628      	mov	r0, r5
 801b432:	f7f5 f81e 	bl	8010472 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
        setXY(x, y);
 801b436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b43a:	4632      	mov	r2, r6
 801b43c:	4631      	mov	r1, r6
 801b43e:	4628      	mov	r0, r5
 801b440:	4798      	blx	r3
        setWidth(width);
 801b442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b446:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801b44a:	4628      	mov	r0, r5
 801b44c:	4798      	blx	r3
        setHeight(height);
 801b44e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b452:	f44f 7188 	mov.w	r1, #272	; 0x110
 801b456:	4628      	mov	r0, r5
 801b458:	4798      	blx	r3
    backgroundImage.setOffset(0, 0);
 801b45a:	4632      	mov	r2, r6
 801b45c:	4631      	mov	r1, r6
 801b45e:	4628      	mov	r0, r5
 801b460:	f7f4 ffe6 	bl	8010430 <_ZN8touchgfx10TiledImage9setOffsetEss>
 801b464:	a928      	add	r1, sp, #160	; 0xa0
 801b466:	230b      	movs	r3, #11
 801b468:	f821 3d48 	strh.w	r3, [r1, #-72]!
    coverImage.setBitmap(Bitmap(BITMAP_MULTIMEDIA_MUSIC_MUSIC_NOTE_NOTE_ICON_ID));
 801b46c:	9803      	ldr	r0, [sp, #12]
 801b46e:	f7f4 fca9 	bl	800fdc4 <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>
        setXY(x, y);
 801b472:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b476:	222e      	movs	r2, #46	; 0x2e
 801b478:	2136      	movs	r1, #54	; 0x36
 801b47a:	9803      	ldr	r0, [sp, #12]
 801b47c:	4798      	blx	r3
        setWidth(width);
 801b47e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b482:	2180      	movs	r1, #128	; 0x80
 801b484:	9803      	ldr	r0, [sp, #12]
 801b486:	4798      	blx	r3
        setHeight(height);
 801b488:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b48c:	2180      	movs	r1, #128	; 0x80
 801b48e:	9803      	ldr	r0, [sp, #12]
 801b490:	4798      	blx	r3
    coverImage.setScalingAlgorithm(ScalableImage::NEAREST_NEIGHBOR);
 801b492:	4631      	mov	r1, r6
 801b494:	9803      	ldr	r0, [sp, #12]
 801b496:	f7f4 fc88 	bl	800fdaa <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    songName.setPosition(225, 30, 242, 32);
 801b49a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
        setXY(x, y);
 801b49e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801b4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4a4:	221e      	movs	r2, #30
 801b4a6:	21e1      	movs	r1, #225	; 0xe1
 801b4a8:	9004      	str	r0, [sp, #16]
 801b4aa:	4798      	blx	r3
        setWidth(width);
 801b4ac:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4b2:	21f2      	movs	r1, #242	; 0xf2
 801b4b4:	9804      	ldr	r0, [sp, #16]
 801b4b6:	4798      	blx	r3
        setHeight(height);
 801b4b8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801b4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4be:	2120      	movs	r1, #32
 801b4c0:	9804      	ldr	r0, [sp, #16]
 801b4c2:	4798      	blx	r3
    songName.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801b4c4:	4632      	mov	r2, r6
 801b4c6:	4631      	mov	r1, r6
 801b4c8:	4630      	mov	r0, r6
 801b4ca:	f005 f8e7 	bl	802069c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        this->color = color;
 801b4ce:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
        linespace = space;
 801b4d2:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801b4d6:	4b57      	ldr	r3, [pc, #348]	; (801b634 <_ZN15Screen3ViewBaseC1Ev+0x36c>)
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	f000 8154 	beq.w	801b788 <_ZN15Screen3ViewBaseC1Ev+0x4c0>
 801b4e0:	f504 7664 	add.w	r6, r4, #912	; 0x390
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801b4e4:	4b54      	ldr	r3, [pc, #336]	; (801b638 <_ZN15Screen3ViewBaseC1Ev+0x370>)
 801b4e6:	881b      	ldrh	r3, [r3, #0]
 801b4e8:	2b01      	cmp	r3, #1
 801b4ea:	f240 8153 	bls.w	801b794 <_ZN15Screen3ViewBaseC1Ev+0x4cc>
 801b4ee:	4b53      	ldr	r3, [pc, #332]	; (801b63c <_ZN15Screen3ViewBaseC1Ev+0x374>)
 801b4f0:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(songNameBuffer, SONGNAME_SIZE, "%s", TypedText(T_SINGLEUSEID2).getText());
 801b4f2:	685b      	ldr	r3, [r3, #4]
 801b4f4:	4a52      	ldr	r2, [pc, #328]	; (801b640 <_ZN15Screen3ViewBaseC1Ev+0x378>)
 801b4f6:	211e      	movs	r1, #30
 801b4f8:	4630      	mov	r0, r6
 801b4fa:	f005 f8c1 	bl	8020680 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wildcard = value;
 801b4fe:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801b502:	2600      	movs	r6, #0
    songName.setTypedText(TypedText(T_SINGLEUSEID1));
 801b504:	4631      	mov	r1, r6
 801b506:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 801b50a:	f7f4 feee 	bl	80102ea <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    slider.setXY(61, 211);
 801b50e:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
        setX(x);
 801b512:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 801b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b518:	213d      	movs	r1, #61	; 0x3d
 801b51a:	9205      	str	r2, [sp, #20]
 801b51c:	4610      	mov	r0, r2
 801b51e:	4798      	blx	r3
        setY(y);
 801b520:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 801b524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b526:	21d3      	movs	r1, #211	; 0xd3
 801b528:	9805      	ldr	r0, [sp, #20]
 801b52a:	4798      	blx	r3
 801b52c:	2308      	movs	r3, #8
 801b52e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 801b532:	2309      	movs	r3, #9
 801b534:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 801b538:	ab28      	add	r3, sp, #160	; 0xa0
 801b53a:	2207      	movs	r2, #7
 801b53c:	f823 2d3c 	strh.w	r2, [r3, #-60]!
    slider.setBitmaps(Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_SLIDER_ROUND_BACK_ID), Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_SLIDER_ROUND_FILL_ID), Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_INDICATORS_SLIDER_ROUND_NOB_ID));
 801b540:	aa18      	add	r2, sp, #96	; 0x60
 801b542:	a917      	add	r1, sp, #92	; 0x5c
 801b544:	4658      	mov	r0, fp
 801b546:	f7f3 fca1 	bl	800ee8c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider.setupHorizontalSlider(2, 19, 2, 0, 310);
 801b54a:	f44f 739b 	mov.w	r3, #310	; 0x136
 801b54e:	9301      	str	r3, [sp, #4]
 801b550:	9600      	str	r6, [sp, #0]
 801b552:	2302      	movs	r3, #2
 801b554:	2213      	movs	r2, #19
 801b556:	4619      	mov	r1, r3
 801b558:	4658      	mov	r0, fp
 801b55a:	f7f3 fa31 	bl	800e9c0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider.setValueRange(0, 100);
 801b55e:	2264      	movs	r2, #100	; 0x64
 801b560:	4631      	mov	r1, r6
 801b562:	4658      	mov	r0, fp
 801b564:	f7f3 f9f4 	bl	800e950 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider.setValue(0);
 801b568:	4631      	mov	r1, r6
 801b56a:	4658      	mov	r0, fp
 801b56c:	f7f3 f906 	bl	800e77c <_ZN8touchgfx6Slider8setValueEi>
    slider.setStopValueCallback(sliderValueConfirmedCallback);
 801b570:	f504 7377 	add.w	r3, r4, #988	; 0x3dc
        stopValueCallback = &callback;
 801b574:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    songProgress.setXY(26, 18);
 801b578:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
        setX(x);
 801b57c:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 801b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b582:	211a      	movs	r1, #26
 801b584:	4683      	mov	fp, r0
 801b586:	4798      	blx	r3
        setY(y);
 801b588:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 801b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b58e:	2112      	movs	r1, #18
 801b590:	4658      	mov	r0, fp
 801b592:	4798      	blx	r3
    songProgress.setProgressIndicatorPosition(0, 0, 184, 184);
 801b594:	23b8      	movs	r3, #184	; 0xb8
 801b596:	9300      	str	r3, [sp, #0]
 801b598:	4632      	mov	r2, r6
 801b59a:	4631      	mov	r1, r6
 801b59c:	4648      	mov	r0, r9
 801b59e:	f7f4 f87b 	bl	800f698 <_ZN8touchgfx14CircleProgress28setProgressIndicatorPositionEssss>
    songProgress.setRange(0, 100);
 801b5a2:	9600      	str	r6, [sp, #0]
 801b5a4:	4633      	mov	r3, r6
 801b5a6:	2264      	movs	r2, #100	; 0x64
 801b5a8:	4631      	mov	r1, r6
 801b5aa:	4658      	mov	r0, fp
 801b5ac:	f7f3 fec2 	bl	800f334 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    songProgress.setCenter(92, 92);
 801b5b0:	225c      	movs	r2, #92	; 0x5c
 801b5b2:	4611      	mov	r1, r2
 801b5b4:	4648      	mov	r0, r9
 801b5b6:	f7f3 ffb7 	bl	800f528 <_ZN8touchgfx14CircleProgress9setCenterEii>
    songProgress.setRadius(82);
 801b5ba:	2152      	movs	r1, #82	; 0x52
 801b5bc:	4648      	mov	r0, r9
 801b5be:	f7f3 ffcb 	bl	800f558 <_ZN8touchgfx14CircleProgress9setRadiusEi>
    songProgress.setLineWidth(16);
 801b5c2:	2110      	movs	r1, #16
 801b5c4:	4648      	mov	r0, r9
 801b5c6:	f7f3 ffd3 	bl	800f570 <_ZN8touchgfx14CircleProgress12setLineWidthEi>
    songProgress.setStartEndAngle(0, 360);
 801b5ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801b5ce:	4631      	mov	r1, r6
 801b5d0:	4648      	mov	r0, r9
 801b5d2:	f7f4 f811 	bl	800f5f8 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>
    songProgress.setCapPrecision(180);
 801b5d6:	21b4      	movs	r1, #180	; 0xb4
 801b5d8:	4648      	mov	r0, r9
 801b5da:	f7f4 f808 	bl	800f5ee <_ZN8touchgfx14CircleProgress15setCapPrecisionEi>
 801b5de:	a928      	add	r1, sp, #160	; 0xa0
 801b5e0:	2305      	movs	r3, #5
 801b5e2:	f821 3d38 	strh.w	r3, [r1, #-56]!
    songProgress.setBackground(Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_FULL_ID));
 801b5e6:	f8cd b020 	str.w	fp, [sp, #32]
 801b5ea:	4658      	mov	r0, fp
 801b5ec:	f7f3 fe95 	bl	800f31a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
 801b5f0:	a928      	add	r1, sp, #160	; 0xa0
 801b5f2:	2306      	movs	r3, #6
 801b5f4:	f821 3d34 	strh.w	r3, [r1, #-52]!
    songProgressPainter.setBitmap(Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_LARGE_CIRCLE_INDICATOR_FILL_LINE_FULL_ID));
 801b5f8:	4650      	mov	r0, sl
 801b5fa:	f7f7 ff29 	bl	8013450 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    songProgress.setPainter(songProgressPainter);
 801b5fe:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 801b602:	4648      	mov	r0, r9
 801b604:	f7f3 ffe4 	bl	800f5d0 <_ZN8touchgfx14CircleProgress10setPainterERNS_15AbstractPainterE>
    songProgress.setValue(60);
 801b608:	213c      	movs	r1, #60	; 0x3c
 801b60a:	4648      	mov	r0, r9
 801b60c:	f7f4 f86c 	bl	800f6e8 <_ZN8touchgfx14CircleProgress8setValueEi>
 801b610:	e018      	b.n	801b644 <_ZN15Screen3ViewBaseC1Ev+0x37c>
 801b612:	bf00      	nop
 801b614:	08025700 	.word	0x08025700
 801b618:	08024914 	.word	0x08024914
 801b61c:	08024a34 	.word	0x08024a34
 801b620:	08024284 	.word	0x08024284
 801b624:	0801b1df 	.word	0x0801b1df
 801b628:	080256cc 	.word	0x080256cc
 801b62c:	0801b213 	.word	0x0801b213
 801b630:	080256e4 	.word	0x080256e4
 801b634:	2000bacc 	.word	0x2000bacc
 801b638:	2000bad0 	.word	0x2000bad0
 801b63c:	2000ba30 	.word	0x2000ba30
 801b640:	080256f4 	.word	0x080256f4
    buttonPrev.setXY(225, 132);
 801b644:	f504 7037 	add.w	r0, r4, #732	; 0x2dc
        setX(x);
 801b648:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 801b64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b64e:	21e1      	movs	r1, #225	; 0xe1
 801b650:	4681      	mov	r9, r0
 801b652:	4798      	blx	r3
        setY(y);
 801b654:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 801b658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b65a:	2184      	movs	r1, #132	; 0x84
 801b65c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b660:	4648      	mov	r0, r9
 801b662:	4798      	blx	r3
 801b664:	f8ad 6070 	strh.w	r6, [sp, #112]	; 0x70
 801b668:	f04f 0a01 	mov.w	sl, #1
 801b66c:	f8ad a074 	strh.w	sl, [sp, #116]	; 0x74
 801b670:	2302      	movs	r3, #2
 801b672:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 801b676:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    buttonPrev.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 801b67a:	ab1f      	add	r3, sp, #124	; 0x7c
 801b67c:	9300      	str	r3, [sp, #0]
 801b67e:	ab1e      	add	r3, sp, #120	; 0x78
 801b680:	aa1d      	add	r2, sp, #116	; 0x74
 801b682:	a91c      	add	r1, sp, #112	; 0x70
 801b684:	4640      	mov	r0, r8
 801b686:	f7f4 f991 	bl	800f9ac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 801b68a:	f04f 0b16 	mov.w	fp, #22
 801b68e:	f8a4 b314 	strh.w	fp, [r4, #788]	; 0x314
        iconY = y;
 801b692:	f04f 090f 	mov.w	r9, #15
 801b696:	f8a4 9316 	strh.w	r9, [r4, #790]	; 0x316
    buttonPrev.setAction(buttonCallback);
 801b69a:	f504 7873 	add.w	r8, r4, #972	; 0x3cc
        action = &callback;
 801b69e:	f8c4 8304 	str.w	r8, [r4, #772]	; 0x304
    buttonPlay.setXY(300, 132);
 801b6a2:	f504 7246 	add.w	r2, r4, #792	; 0x318
        setX(x);
 801b6a6:	f8d4 3318 	ldr.w	r3, [r4, #792]	; 0x318
 801b6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6ac:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801b6b0:	9206      	str	r2, [sp, #24]
 801b6b2:	4610      	mov	r0, r2
 801b6b4:	4798      	blx	r3
        setY(y);
 801b6b6:	f8d4 3318 	ldr.w	r3, [r4, #792]	; 0x318
 801b6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6bc:	2184      	movs	r1, #132	; 0x84
 801b6be:	9806      	ldr	r0, [sp, #24]
 801b6c0:	4798      	blx	r3
 801b6c2:	f8ad 6080 	strh.w	r6, [sp, #128]	; 0x80
 801b6c6:	f8ad a084 	strh.w	sl, [sp, #132]	; 0x84
 801b6ca:	2303      	movs	r3, #3
 801b6cc:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
 801b6d0:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    buttonPlay.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_GO_NEXT_32_ID), Bitmap(BITMAP_BLUE_ICONS_GO_NEXT_32_ID));
 801b6d4:	ab23      	add	r3, sp, #140	; 0x8c
 801b6d6:	9300      	str	r3, [sp, #0]
 801b6d8:	ab22      	add	r3, sp, #136	; 0x88
 801b6da:	aa21      	add	r2, sp, #132	; 0x84
 801b6dc:	a920      	add	r1, sp, #128	; 0x80
 801b6de:	4638      	mov	r0, r7
 801b6e0:	f7f4 f964 	bl	800f9ac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 801b6e4:	f8a4 9350 	strh.w	r9, [r4, #848]	; 0x350
        iconY = y;
 801b6e8:	2310      	movs	r3, #16
 801b6ea:	f8a4 3352 	strh.w	r3, [r4, #850]	; 0x352
 801b6ee:	f8c4 8340 	str.w	r8, [r4, #832]	; 0x340
    buttonNext.setXY(375, 132);
 801b6f2:	f504 7755 	add.w	r7, r4, #852	; 0x354
        setX(x);
 801b6f6:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801b6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6fc:	f240 1177 	movw	r1, #375	; 0x177
 801b700:	4638      	mov	r0, r7
 801b702:	4798      	blx	r3
        setY(y);
 801b704:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b70a:	2184      	movs	r1, #132	; 0x84
 801b70c:	4638      	mov	r0, r7
 801b70e:	4798      	blx	r3
 801b710:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
 801b714:	f8ad a094 	strh.w	sl, [sp, #148]	; 0x94
 801b718:	2304      	movs	r3, #4
 801b71a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 801b71e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    buttonNext.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
 801b722:	ab27      	add	r3, sp, #156	; 0x9c
 801b724:	9300      	str	r3, [sp, #0]
 801b726:	ab26      	add	r3, sp, #152	; 0x98
 801b728:	aa25      	add	r2, sp, #148	; 0x94
 801b72a:	a924      	add	r1, sp, #144	; 0x90
 801b72c:	9807      	ldr	r0, [sp, #28]
 801b72e:	f7f4 f93d 	bl	800f9ac <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 801b732:	f8a4 b38c 	strh.w	fp, [r4, #908]	; 0x38c
        iconY = y;
 801b736:	f8a4 938e 	strh.w	r9, [r4, #910]	; 0x38e
 801b73a:	f8c4 837c 	str.w	r8, [r4, #892]	; 0x37c
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
    {
        container.add(d);
 801b73e:	1d26      	adds	r6, r4, #4
 801b740:	4629      	mov	r1, r5
 801b742:	4630      	mov	r0, r6
 801b744:	f7f2 ff30 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b748:	9903      	ldr	r1, [sp, #12]
 801b74a:	4630      	mov	r0, r6
 801b74c:	f7f2 ff2c 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b750:	9904      	ldr	r1, [sp, #16]
 801b752:	4630      	mov	r0, r6
 801b754:	f7f2 ff28 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b758:	9905      	ldr	r1, [sp, #20]
 801b75a:	4630      	mov	r0, r6
 801b75c:	f7f2 ff24 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b760:	9908      	ldr	r1, [sp, #32]
 801b762:	4630      	mov	r0, r6
 801b764:	f7f2 ff20 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b768:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b76a:	4630      	mov	r0, r6
 801b76c:	f7f2 ff1c 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b770:	9906      	ldr	r1, [sp, #24]
 801b772:	4630      	mov	r0, r6
 801b774:	f7f2 ff18 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801b778:	4639      	mov	r1, r7
 801b77a:	4630      	mov	r0, r6
 801b77c:	f7f2 ff14 	bl	800e5a8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 801b780:	4620      	mov	r0, r4
 801b782:	b029      	add	sp, #164	; 0xa4
 801b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801b788:	4b05      	ldr	r3, [pc, #20]	; (801b7a0 <_ZN15Screen3ViewBaseC1Ev+0x4d8>)
 801b78a:	4a06      	ldr	r2, [pc, #24]	; (801b7a4 <_ZN15Screen3ViewBaseC1Ev+0x4dc>)
 801b78c:	21cf      	movs	r1, #207	; 0xcf
 801b78e:	4806      	ldr	r0, [pc, #24]	; (801b7a8 <_ZN15Screen3ViewBaseC1Ev+0x4e0>)
 801b790:	f007 f9d2 	bl	8022b38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801b794:	4b05      	ldr	r3, [pc, #20]	; (801b7ac <_ZN15Screen3ViewBaseC1Ev+0x4e4>)
 801b796:	4a03      	ldr	r2, [pc, #12]	; (801b7a4 <_ZN15Screen3ViewBaseC1Ev+0x4dc>)
 801b798:	21d0      	movs	r1, #208	; 0xd0
 801b79a:	4803      	ldr	r0, [pc, #12]	; (801b7a8 <_ZN15Screen3ViewBaseC1Ev+0x4e0>)
 801b79c:	f007 f9cc 	bl	8022b38 <__assert_func>
 801b7a0:	080242f8 	.word	0x080242f8
 801b7a4:	0802573c 	.word	0x0802573c
 801b7a8:	0802433c 	.word	0x0802433c
 801b7ac:	0802438c 	.word	0x0802438c

0801b7b0 <_ZN15Screen3ViewBaseD1Ev>:
    virtual ~Screen3ViewBase() {}
 801b7b0:	b510      	push	{r4, lr}
 801b7b2:	4604      	mov	r4, r0
 801b7b4:	4b0b      	ldr	r3, [pc, #44]	; (801b7e4 <_ZN15Screen3ViewBaseD1Ev+0x34>)
 801b7b6:	6003      	str	r3, [r0, #0]
    virtual ~AbstractPainterRGB565() {}
 801b7b8:	4b0b      	ldr	r3, [pc, #44]	; (801b7e8 <_ZN15Screen3ViewBaseD1Ev+0x38>)
 801b7ba:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
 801b7be:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 801b7c2:	f7f5 f869 	bl	8010898 <_ZN8touchgfx15AbstractPainterD1Ev>
 801b7c6:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801b7ca:	f7f3 feef 	bl	800f5ac <_ZN8touchgfx14CircleProgressD1Ev>
 801b7ce:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 801b7d2:	f7f2 ffd2 	bl	800e77a <_ZN8touchgfx6SliderD1Ev>
 801b7d6:	f104 0070 	add.w	r0, r4, #112	; 0x70
 801b7da:	f7f4 fae5 	bl	800fda8 <_ZN8touchgfx13ScalableImageD1Ev>
 801b7de:	4620      	mov	r0, r4
 801b7e0:	bd10      	pop	{r4, pc}
 801b7e2:	bf00      	nop
 801b7e4:	08025700 	.word	0x08025700
 801b7e8:	08024ad0 	.word	0x08024ad0

0801b7ec <_ZN15Screen3ViewBaseD0Ev>:
 801b7ec:	b510      	push	{r4, lr}
 801b7ee:	4604      	mov	r4, r0
 801b7f0:	4b0d      	ldr	r3, [pc, #52]	; (801b828 <_ZN15Screen3ViewBaseD0Ev+0x3c>)
 801b7f2:	6003      	str	r3, [r0, #0]
 801b7f4:	4b0d      	ldr	r3, [pc, #52]	; (801b82c <_ZN15Screen3ViewBaseD0Ev+0x40>)
 801b7f6:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
 801b7fa:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 801b7fe:	f7f5 f84b 	bl	8010898 <_ZN8touchgfx15AbstractPainterD1Ev>
 801b802:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801b806:	f7f3 fed1 	bl	800f5ac <_ZN8touchgfx14CircleProgressD1Ev>
 801b80a:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 801b80e:	f7f2 ffb4 	bl	800e77a <_ZN8touchgfx6SliderD1Ev>
 801b812:	f104 0070 	add.w	r0, r4, #112	; 0x70
 801b816:	f7f4 fac7 	bl	800fda8 <_ZN8touchgfx13ScalableImageD1Ev>
 801b81a:	f242 010c 	movw	r1, #8204	; 0x200c
 801b81e:	4620      	mov	r0, r4
 801b820:	f007 f96e 	bl	8022b00 <_ZdlPvj>
 801b824:	4620      	mov	r0, r4
 801b826:	bd10      	pop	{r4, pc}
 801b828:	08025700 	.word	0x08025700
 801b82c:	08024ad0 	.word	0x08024ad0

0801b830 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 801b830:	4800      	ldr	r0, [pc, #0]	; (801b834 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 801b832:	4770      	bx	lr
 801b834:	0802576c 	.word	0x0802576c

0801b838 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 801b838:	200c      	movs	r0, #12
 801b83a:	4770      	bx	lr

0801b83c <_Z41__static_initialization_and_destruction_0ii>:
    currentLanguage = id;
    currentLanguagePtr = languagesArray[currentLanguage];

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 801b83c:	2801      	cmp	r0, #1
 801b83e:	d000      	beq.n	801b842 <_Z41__static_initialization_and_destruction_0ii+0x6>
 801b840:	4770      	bx	lr
 801b842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b846:	4299      	cmp	r1, r3
 801b848:	d1fa      	bne.n	801b840 <_Z41__static_initialization_and_destruction_0ii+0x4>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 801b84a:	4b02      	ldr	r3, [pc, #8]	; (801b854 <_Z41__static_initialization_and_destruction_0ii+0x18>)
 801b84c:	4a02      	ldr	r2, [pc, #8]	; (801b858 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 801b84e:	601a      	str	r2, [r3, #0]
}
 801b850:	e7f6      	b.n	801b840 <_Z41__static_initialization_and_destruction_0ii+0x4>
 801b852:	bf00      	nop
 801b854:	2000ba30 	.word	0x2000ba30
 801b858:	080bf018 	.word	0x080bf018

0801b85c <_ZN8touchgfx5Texts11setLanguageEt>:
{
 801b85c:	b538      	push	{r3, r4, r5, lr}
    currentLanguage = id;
 801b85e:	4b0a      	ldr	r3, [pc, #40]	; (801b888 <_ZN8touchgfx5Texts11setLanguageEt+0x2c>)
 801b860:	8018      	strh	r0, [r3, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 801b862:	4b0a      	ldr	r3, [pc, #40]	; (801b88c <_ZN8touchgfx5Texts11setLanguageEt+0x30>)
 801b864:	4a0a      	ldr	r2, [pc, #40]	; (801b890 <_ZN8touchgfx5Texts11setLanguageEt+0x34>)
 801b866:	601a      	str	r2, [r3, #0]
    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 801b868:	f000 f838 	bl	801b8dc <_ZN17TypedTextDatabase11getInstanceEt>
 801b86c:	4605      	mov	r5, r0
 801b86e:	f000 f83b 	bl	801b8e8 <_ZN17TypedTextDatabase8getFontsEv>
 801b872:	4604      	mov	r4, r0
 801b874:	f000 f836 	bl	801b8e4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 801b878:	4b06      	ldr	r3, [pc, #24]	; (801b894 <_ZN8touchgfx5Texts11setLanguageEt+0x38>)
 801b87a:	601d      	str	r5, [r3, #0]
        fonts = f;
 801b87c:	4b06      	ldr	r3, [pc, #24]	; (801b898 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>)
 801b87e:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
 801b880:	4b06      	ldr	r3, [pc, #24]	; (801b89c <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801b882:	8018      	strh	r0, [r3, #0]
}
 801b884:	bd38      	pop	{r3, r4, r5, pc}
 801b886:	bf00      	nop
 801b888:	2000ba2c 	.word	0x2000ba2c
 801b88c:	2000ba30 	.word	0x2000ba30
 801b890:	080bf018 	.word	0x080bf018
 801b894:	2000bacc 	.word	0x2000bacc
 801b898:	2000bad4 	.word	0x2000bad4
 801b89c:	2000bad0 	.word	0x2000bad0

0801b8a0 <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 801b8a0:	b508      	push	{r3, lr}
 801b8a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b8a6:	2001      	movs	r0, #1
 801b8a8:	f7ff ffc8 	bl	801b83c <_Z41__static_initialization_and_destruction_0ii>
 801b8ac:	bd08      	pop	{r3, pc}
	...

0801b8b0 <_Z41__static_initialization_and_destruction_0ii>:

const touchgfx::Font* const* getFonts()
{
    return _fonts;
}
}
 801b8b0:	2801      	cmp	r0, #1
 801b8b2:	d000      	beq.n	801b8b6 <_Z41__static_initialization_and_destruction_0ii+0x6>
 801b8b4:	4770      	bx	lr
 801b8b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8ba:	4299      	cmp	r1, r3
 801b8bc:	d1fa      	bne.n	801b8b4 <_Z41__static_initialization_and_destruction_0ii+0x4>
 801b8be:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 801b8c0:	f7ff facc 	bl	801ae5c <_Z23getFont_verdana_20_4bppv>
};
 801b8c4:	4c04      	ldr	r4, [pc, #16]	; (801b8d8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 801b8c6:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 801b8c8:	f7ff fafa 	bl	801aec0 <_Z23getFont_verdana_40_4bppv>
};
 801b8cc:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 801b8ce:	f7ff fa95 	bl	801adfc <_Z23getFont_verdana_10_4bppv>
};
 801b8d2:	60a0      	str	r0, [r4, #8]
}
 801b8d4:	bd10      	pop	{r4, pc}
 801b8d6:	bf00      	nop
 801b8d8:	2000ba34 	.word	0x2000ba34

0801b8dc <_ZN17TypedTextDatabase11getInstanceEt>:
}
 801b8dc:	4800      	ldr	r0, [pc, #0]	; (801b8e0 <_ZN17TypedTextDatabase11getInstanceEt+0x4>)
 801b8de:	4770      	bx	lr
 801b8e0:	080bf03c 	.word	0x080bf03c

0801b8e4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 801b8e4:	2002      	movs	r0, #2
 801b8e6:	4770      	bx	lr

0801b8e8 <_ZN17TypedTextDatabase8getFontsEv>:
}
 801b8e8:	4800      	ldr	r0, [pc, #0]	; (801b8ec <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 801b8ea:	4770      	bx	lr
 801b8ec:	2000ba34 	.word	0x2000ba34

0801b8f0 <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
}
 801b8f0:	b508      	push	{r3, lr}
 801b8f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b8f6:	2001      	movs	r0, #1
 801b8f8:	f7ff ffda 	bl	801b8b0 <_Z41__static_initialization_and_destruction_0ii>
 801b8fc:	bd08      	pop	{r3, pc}

0801b8fe <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801b8fe:	4770      	bx	lr

0801b900 <_ZN19FrontendApplicationD0Ev>:
 801b900:	b510      	push	{r4, lr}
 801b902:	4604      	mov	r4, r0
 801b904:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801b908:	f007 f8fa 	bl	8022b00 <_ZdlPvj>
 801b90c:	4620      	mov	r0, r4
 801b90e:	bd10      	pop	{r4, pc}

0801b910 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801b910:	b510      	push	{r4, lr}
 801b912:	4604      	mov	r4, r0
    {
        model.tick();
 801b914:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801b918:	f000 f811 	bl	801b93e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801b91c:	4620      	mov	r0, r4
 801b91e:	f002 fecf 	bl	801e6c0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801b922:	bd10      	pop	{r4, pc}

0801b924 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801b924:	b510      	push	{r4, lr}
 801b926:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 801b928:	f7ff fb50 	bl	801afcc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801b92c:	4b01      	ldr	r3, [pc, #4]	; (801b934 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 801b92e:	6023      	str	r3, [r4, #0]
{
}
 801b930:	4620      	mov	r0, r4
 801b932:	bd10      	pop	{r4, pc}
 801b934:	08025864 	.word	0x08025864

0801b938 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801b938:	2200      	movs	r2, #0
 801b93a:	6002      	str	r2, [r0, #0]
{
}
 801b93c:	4770      	bx	lr

0801b93e <_ZN5Model4tickEv>:

void Model::tick()
{
}
 801b93e:	4770      	bx	lr

0801b940 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 801b940:	4770      	bx	lr

0801b942 <_ZThn4_N16Screen3PresenterD1Ev>:
 801b942:	3804      	subs	r0, #4
 801b944:	4770      	bx	lr

0801b946 <_ZN16Screen3Presenter8activateEv>:
}

void Screen3Presenter::activate()
{

}
 801b946:	4770      	bx	lr

0801b948 <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{

}
 801b948:	4770      	bx	lr

0801b94a <_ZN16Screen3PresenterD0Ev>:
 801b94a:	b510      	push	{r4, lr}
 801b94c:	4604      	mov	r4, r0
 801b94e:	2110      	movs	r1, #16
 801b950:	f007 f8d6 	bl	8022b00 <_ZdlPvj>
 801b954:	4620      	mov	r0, r4
 801b956:	bd10      	pop	{r4, pc}

0801b958 <_ZThn4_N16Screen3PresenterD0Ev>:
 801b958:	b510      	push	{r4, lr}
 801b95a:	1f04      	subs	r4, r0, #4
 801b95c:	2110      	movs	r1, #16
 801b95e:	4620      	mov	r0, r4
 801b960:	f007 f8ce 	bl	8022b00 <_ZdlPvj>
 801b964:	4620      	mov	r0, r4
 801b966:	bd10      	pop	{r4, pc}

0801b968 <_ZN16Screen3PresenterC1ER11Screen3View>:
Screen3Presenter::Screen3Presenter(Screen3View& v)
 801b968:	b410      	push	{r4}
    ModelListener() : model(0) {}
 801b96a:	2200      	movs	r2, #0
 801b96c:	6082      	str	r2, [r0, #8]
    : view(v)
 801b96e:	4a05      	ldr	r2, [pc, #20]	; (801b984 <_ZN16Screen3PresenterC1ER11Screen3View+0x1c>)
 801b970:	f102 0408 	add.w	r4, r2, #8
 801b974:	6004      	str	r4, [r0, #0]
 801b976:	3220      	adds	r2, #32
 801b978:	6042      	str	r2, [r0, #4]
 801b97a:	60c1      	str	r1, [r0, #12]
}
 801b97c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b980:	4770      	bx	lr
 801b982:	bf00      	nop
 801b984:	08025898 	.word	0x08025898

0801b988 <_ZN11Screen3View14tearDownScreenEv>:
}

void Screen3View::tearDownScreen()
{
    Screen3ViewBase::tearDownScreen();
}
 801b988:	4770      	bx	lr

0801b98a <_ZN11Screen3View12playPrevSongEv>:

void Screen3View::playPrevSong(){}
 801b98a:	4770      	bx	lr

0801b98c <_ZN11Screen3View12playNextSongEv>:
void Screen3View::playNextSong(){}
 801b98c:	4770      	bx	lr

0801b98e <_ZN11Screen3View9playPauseEv>:
void Screen3View::playPause(){}
 801b98e:	4770      	bx	lr

0801b990 <_ZN11Screen3View16moveSongPositionEi>:
void Screen3View::moveSongPosition(int value){}
 801b990:	4770      	bx	lr

0801b992 <_ZN11Screen3View11setupScreenEv>:
{
 801b992:	b508      	push	{r3, lr}
    Screen3ViewBase::setupScreen();
 801b994:	f7ff fc22 	bl	801b1dc <_ZN15Screen3ViewBase11setupScreenEv>
}
 801b998:	bd08      	pop	{r3, pc}
	...

0801b99c <_ZN11Screen3ViewC1Ev>:
Screen3View::Screen3View()
 801b99c:	b510      	push	{r4, lr}
 801b99e:	4604      	mov	r4, r0
 801b9a0:	f7ff fc92 	bl	801b2c8 <_ZN15Screen3ViewBaseC1Ev>
 801b9a4:	4b01      	ldr	r3, [pc, #4]	; (801b9ac <_ZN11Screen3ViewC1Ev+0x10>)
 801b9a6:	6023      	str	r3, [r4, #0]
}
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	bd10      	pop	{r4, pc}
 801b9ac:	080258c8 	.word	0x080258c8

0801b9b0 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 801b9b0:	b510      	push	{r4, lr}
 801b9b2:	4604      	mov	r4, r0
 801b9b4:	4b0b      	ldr	r3, [pc, #44]	; (801b9e4 <_ZN11Screen3ViewD1Ev+0x34>)
 801b9b6:	6003      	str	r3, [r0, #0]
 801b9b8:	4b0b      	ldr	r3, [pc, #44]	; (801b9e8 <_ZN11Screen3ViewD1Ev+0x38>)
 801b9ba:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
 801b9be:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 801b9c2:	f7f4 ff69 	bl	8010898 <_ZN8touchgfx15AbstractPainterD1Ev>
 801b9c6:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801b9ca:	f7f3 fdef 	bl	800f5ac <_ZN8touchgfx14CircleProgressD1Ev>
 801b9ce:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 801b9d2:	f7f2 fed2 	bl	800e77a <_ZN8touchgfx6SliderD1Ev>
 801b9d6:	f104 0070 	add.w	r0, r4, #112	; 0x70
 801b9da:	f7f4 f9e5 	bl	800fda8 <_ZN8touchgfx13ScalableImageD1Ev>
 801b9de:	4620      	mov	r0, r4
 801b9e0:	bd10      	pop	{r4, pc}
 801b9e2:	bf00      	nop
 801b9e4:	08025700 	.word	0x08025700
 801b9e8:	08024ad0 	.word	0x08024ad0

0801b9ec <_ZN11Screen3ViewD0Ev>:
 801b9ec:	b510      	push	{r4, lr}
 801b9ee:	4604      	mov	r4, r0
 801b9f0:	4b0d      	ldr	r3, [pc, #52]	; (801ba28 <_ZN11Screen3ViewD0Ev+0x3c>)
 801b9f2:	6003      	str	r3, [r0, #0]
 801b9f4:	4b0d      	ldr	r3, [pc, #52]	; (801ba2c <_ZN11Screen3ViewD0Ev+0x40>)
 801b9f6:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
 801b9fa:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 801b9fe:	f7f4 ff4b 	bl	8010898 <_ZN8touchgfx15AbstractPainterD1Ev>
 801ba02:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801ba06:	f7f3 fdd1 	bl	800f5ac <_ZN8touchgfx14CircleProgressD1Ev>
 801ba0a:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 801ba0e:	f7f2 feb4 	bl	800e77a <_ZN8touchgfx6SliderD1Ev>
 801ba12:	f104 0070 	add.w	r0, r4, #112	; 0x70
 801ba16:	f7f4 f9c7 	bl	800fda8 <_ZN8touchgfx13ScalableImageD1Ev>
 801ba1a:	f242 010c 	movw	r1, #8204	; 0x200c
 801ba1e:	4620      	mov	r0, r4
 801ba20:	f007 f86e 	bl	8022b00 <_ZdlPvj>
 801ba24:	4620      	mov	r0, r4
 801ba26:	bd10      	pop	{r4, pc}
 801ba28:	08025700 	.word	0x08025700
 801ba2c:	08024ad0 	.word	0x08024ad0

0801ba30 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801ba30:	8880      	ldrh	r0, [r0, #4]
 801ba32:	4770      	bx	lr

0801ba34 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801ba34:	2300      	movs	r3, #0
 801ba36:	8083      	strh	r3, [r0, #4]
 801ba38:	4770      	bx	lr
	...

0801ba3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba3e:	6803      	ldr	r3, [r0, #0]
 801ba40:	460e      	mov	r6, r1
 801ba42:	2100      	movs	r1, #0
 801ba44:	4604      	mov	r4, r0
 801ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba48:	4798      	blx	r3
 801ba4a:	4605      	mov	r5, r0
 801ba4c:	6823      	ldr	r3, [r4, #0]
 801ba4e:	4620      	mov	r0, r4
 801ba50:	1b75      	subs	r5, r6, r5
 801ba52:	6a1b      	ldr	r3, [r3, #32]
 801ba54:	b2ad      	uxth	r5, r5
 801ba56:	4798      	blx	r3
 801ba58:	88a3      	ldrh	r3, [r4, #4]
 801ba5a:	fbb5 f0f0 	udiv	r0, r5, r0
 801ba5e:	4298      	cmp	r0, r3
 801ba60:	b285      	uxth	r5, r0
 801ba62:	db05      	blt.n	801ba70 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 801ba64:	4b0e      	ldr	r3, [pc, #56]	; (801baa0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801ba66:	211e      	movs	r1, #30
 801ba68:	4a0e      	ldr	r2, [pc, #56]	; (801baa4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801ba6a:	480f      	ldr	r0, [pc, #60]	; (801baa8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801ba6c:	f007 f864 	bl	8022b38 <__assert_func>
 801ba70:	6823      	ldr	r3, [r4, #0]
 801ba72:	2100      	movs	r1, #0
 801ba74:	4620      	mov	r0, r4
 801ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba78:	4798      	blx	r3
 801ba7a:	4607      	mov	r7, r0
 801ba7c:	6823      	ldr	r3, [r4, #0]
 801ba7e:	4620      	mov	r0, r4
 801ba80:	1bf6      	subs	r6, r6, r7
 801ba82:	6a1b      	ldr	r3, [r3, #32]
 801ba84:	b2b6      	uxth	r6, r6
 801ba86:	4798      	blx	r3
 801ba88:	fbb6 f3f0 	udiv	r3, r6, r0
 801ba8c:	fb03 6610 	mls	r6, r3, r0, r6
 801ba90:	b11e      	cbz	r6, 801ba9a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 801ba92:	4b06      	ldr	r3, [pc, #24]	; (801baac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 801ba94:	211f      	movs	r1, #31
 801ba96:	4a03      	ldr	r2, [pc, #12]	; (801baa4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801ba98:	e7e7      	b.n	801ba6a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 801ba9a:	4628      	mov	r0, r5
 801ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba9e:	bf00      	nop
 801baa0:	08025904 	.word	0x08025904
 801baa4:	08025a72 	.word	0x08025a72
 801baa8:	08025919 	.word	0x08025919
 801baac:	08025947 	.word	0x08025947

0801bab0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801bab0:	b538      	push	{r3, r4, r5, lr}
 801bab2:	6803      	ldr	r3, [r0, #0]
 801bab4:	460d      	mov	r5, r1
 801bab6:	4604      	mov	r4, r0
 801bab8:	6a1b      	ldr	r3, [r3, #32]
 801baba:	4798      	blx	r3
 801babc:	4285      	cmp	r5, r0
 801babe:	d905      	bls.n	801bacc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801bac0:	4b0c      	ldr	r3, [pc, #48]	; (801baf4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801bac2:	212f      	movs	r1, #47	; 0x2f
 801bac4:	4a0c      	ldr	r2, [pc, #48]	; (801baf8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801bac6:	480d      	ldr	r0, [pc, #52]	; (801bafc <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801bac8:	f007 f836 	bl	8022b38 <__assert_func>
 801bacc:	6823      	ldr	r3, [r4, #0]
 801bace:	4620      	mov	r0, r4
 801bad0:	88a5      	ldrh	r5, [r4, #4]
 801bad2:	69db      	ldr	r3, [r3, #28]
 801bad4:	4798      	blx	r3
 801bad6:	4285      	cmp	r5, r0
 801bad8:	db03      	blt.n	801bae2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801bada:	4b09      	ldr	r3, [pc, #36]	; (801bb00 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801badc:	2130      	movs	r1, #48	; 0x30
 801bade:	4a06      	ldr	r2, [pc, #24]	; (801baf8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801bae0:	e7f1      	b.n	801bac6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801bae2:	6823      	ldr	r3, [r4, #0]
 801bae4:	4620      	mov	r0, r4
 801bae6:	88a1      	ldrh	r1, [r4, #4]
 801bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801baea:	4798      	blx	r3
 801baec:	88a3      	ldrh	r3, [r4, #4]
 801baee:	3301      	adds	r3, #1
 801baf0:	80a3      	strh	r3, [r4, #4]
 801baf2:	bd38      	pop	{r3, r4, r5, pc}
 801baf4:	080259c1 	.word	0x080259c1
 801baf8:	08025ab5 	.word	0x08025ab5
 801bafc:	08025919 	.word	0x08025919
 801bb00:	080259d8 	.word	0x080259d8

0801bb04 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801bb04:	b570      	push	{r4, r5, r6, lr}
 801bb06:	6803      	ldr	r3, [r0, #0]
 801bb08:	4616      	mov	r6, r2
 801bb0a:	4604      	mov	r4, r0
 801bb0c:	460d      	mov	r5, r1
 801bb0e:	6a1b      	ldr	r3, [r3, #32]
 801bb10:	4798      	blx	r3
 801bb12:	4286      	cmp	r6, r0
 801bb14:	d905      	bls.n	801bb22 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801bb16:	4b06      	ldr	r3, [pc, #24]	; (801bb30 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801bb18:	2139      	movs	r1, #57	; 0x39
 801bb1a:	4a06      	ldr	r2, [pc, #24]	; (801bb34 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801bb1c:	4806      	ldr	r0, [pc, #24]	; (801bb38 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801bb1e:	f007 f80b 	bl	8022b38 <__assert_func>
 801bb22:	6823      	ldr	r3, [r4, #0]
 801bb24:	4629      	mov	r1, r5
 801bb26:	4620      	mov	r0, r4
 801bb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb2e:	4718      	bx	r3
 801bb30:	080259c1 	.word	0x080259c1
 801bb34:	08025a28 	.word	0x08025a28
 801bb38:	08025919 	.word	0x08025919

0801bb3c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801bb3c:	4770      	bx	lr
	...

0801bb40 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801bb40:	4a02      	ldr	r2, [pc, #8]	; (801bb4c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801bb42:	6002      	str	r2, [r0, #0]
 801bb44:	2200      	movs	r2, #0
 801bb46:	8082      	strh	r2, [r0, #4]
 801bb48:	4770      	bx	lr
 801bb4a:	bf00      	nop
 801bb4c:	080259fc 	.word	0x080259fc

0801bb50 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801bb50:	2301      	movs	r3, #1
 801bb52:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801bb56:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801bb5a:	4770      	bx	lr

0801bb5c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801bb5c:	2301      	movs	r3, #1
 801bb5e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801bb62:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801bb66:	4770      	bx	lr

0801bb68 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801bb68:	6843      	ldr	r3, [r0, #4]
 801bb6a:	2201      	movs	r2, #1
 801bb6c:	725a      	strb	r2, [r3, #9]
 801bb6e:	6840      	ldr	r0, [r0, #4]
 801bb70:	6803      	ldr	r3, [r0, #0]
 801bb72:	691b      	ldr	r3, [r3, #16]
 801bb74:	4718      	bx	r3

0801bb76 <_ZN8touchgfx3HAL8flushDMAEv>:
 801bb76:	6840      	ldr	r0, [r0, #4]
 801bb78:	6803      	ldr	r3, [r0, #0]
 801bb7a:	689b      	ldr	r3, [r3, #8]
 801bb7c:	4718      	bx	r3

0801bb7e <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801bb7e:	4770      	bx	lr

0801bb80 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 801bb80:	4608      	mov	r0, r1
 801bb82:	4770      	bx	lr

0801bb84 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 801bb84:	4770      	bx	lr
	...

0801bb88 <_ZN8touchgfx3HAL10beginFrameEv>:
 801bb88:	4b04      	ldr	r3, [pc, #16]	; (801bb9c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801bb8a:	781b      	ldrb	r3, [r3, #0]
 801bb8c:	b123      	cbz	r3, 801bb98 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801bb8e:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 801bb92:	f080 0001 	eor.w	r0, r0, #1
 801bb96:	4770      	bx	lr
 801bb98:	2001      	movs	r0, #1
 801bb9a:	4770      	bx	lr
 801bb9c:	2000ba4a 	.word	0x2000ba4a

0801bba0 <_ZN8touchgfx3HAL8endFrameEv>:
 801bba0:	b510      	push	{r4, lr}
 801bba2:	4604      	mov	r4, r0
 801bba4:	6840      	ldr	r0, [r0, #4]
 801bba6:	6803      	ldr	r3, [r0, #0]
 801bba8:	689b      	ldr	r3, [r3, #8]
 801bbaa:	4798      	blx	r3
 801bbac:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801bbb0:	b113      	cbz	r3, 801bbb8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801bbb2:	2301      	movs	r3, #1
 801bbb4:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801bbb8:	bd10      	pop	{r4, pc}

0801bbba <_ZN8touchgfx3HAL9taskEntryEv>:
 801bbba:	b508      	push	{r3, lr}
 801bbbc:	6803      	ldr	r3, [r0, #0]
 801bbbe:	4604      	mov	r4, r0
 801bbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bbc2:	4798      	blx	r3
 801bbc4:	6823      	ldr	r3, [r4, #0]
 801bbc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bbc8:	4620      	mov	r0, r4
 801bbca:	4798      	blx	r3
 801bbcc:	f7f7 fd2a 	bl	8013624 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801bbd0:	6823      	ldr	r3, [r4, #0]
 801bbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bbd4:	e7f8      	b.n	801bbc8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801bbd8 <_ZN8touchgfx3HAL4tickEv>:
 801bbd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bbda:	6803      	ldr	r3, [r0, #0]
 801bbdc:	4604      	mov	r4, r0
 801bbde:	4d5d      	ldr	r5, [pc, #372]	; (801bd54 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801bbe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbe4:	4798      	blx	r3
 801bbe6:	2800      	cmp	r0, #0
 801bbe8:	f000 8092 	beq.w	801bd10 <_ZN8touchgfx3HAL4tickEv+0x138>
 801bbec:	2001      	movs	r0, #1
 801bbee:	2600      	movs	r6, #0
 801bbf0:	f7fb ff13 	bl	8017a1a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801bbf4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801bbf8:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 801bbfc:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801bc00:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801bc04:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801bc08:	b133      	cbz	r3, 801bc18 <_ZN8touchgfx3HAL4tickEv+0x40>
 801bc0a:	6823      	ldr	r3, [r4, #0]
 801bc0c:	4620      	mov	r0, r4
 801bc0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bc12:	4798      	blx	r3
 801bc14:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801bc18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801bc1c:	2601      	movs	r6, #1
 801bc1e:	6862      	ldr	r2, [r4, #4]
 801bc20:	f083 0301 	eor.w	r3, r3, #1
 801bc24:	702e      	strb	r6, [r5, #0]
 801bc26:	7253      	strb	r3, [r2, #9]
 801bc28:	f002 fecc 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801bc2c:	6803      	ldr	r3, [r0, #0]
 801bc2e:	4631      	mov	r1, r6
 801bc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc32:	4798      	blx	r3
 801bc34:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801bc38:	b90b      	cbnz	r3, 801bc3e <_ZN8touchgfx3HAL4tickEv+0x66>
 801bc3a:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 801bc3e:	f002 fec1 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801bc42:	6803      	ldr	r3, [r0, #0]
 801bc44:	695b      	ldr	r3, [r3, #20]
 801bc46:	4798      	blx	r3
 801bc48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801bc4a:	6803      	ldr	r3, [r0, #0]
 801bc4c:	691b      	ldr	r3, [r3, #16]
 801bc4e:	4798      	blx	r3
 801bc50:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801bc54:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801bc58:	3b01      	subs	r3, #1
 801bc5a:	b2db      	uxtb	r3, r3
 801bc5c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801bc60:	b10a      	cbz	r2, 801bc66 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d1eb      	bne.n	801bc3e <_ZN8touchgfx3HAL4tickEv+0x66>
 801bc66:	4a3c      	ldr	r2, [pc, #240]	; (801bd58 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801bc68:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 801bc6c:	7813      	ldrb	r3, [r2, #0]
 801bc6e:	3301      	adds	r3, #1
 801bc70:	b25b      	sxtb	r3, r3
 801bc72:	4299      	cmp	r1, r3
 801bc74:	7013      	strb	r3, [r2, #0]
 801bc76:	dc10      	bgt.n	801bc9a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801bc78:	2300      	movs	r3, #0
 801bc7a:	68e0      	ldr	r0, [r4, #12]
 801bc7c:	a902      	add	r1, sp, #8
 801bc7e:	7013      	strb	r3, [r2, #0]
 801bc80:	aa03      	add	r2, sp, #12
 801bc82:	6803      	ldr	r3, [r0, #0]
 801bc84:	68db      	ldr	r3, [r3, #12]
 801bc86:	4798      	blx	r3
 801bc88:	6823      	ldr	r3, [r4, #0]
 801bc8a:	2800      	cmp	r0, #0
 801bc8c:	d04c      	beq.n	801bd28 <_ZN8touchgfx3HAL4tickEv+0x150>
 801bc8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801bc92:	4620      	mov	r0, r4
 801bc94:	9a03      	ldr	r2, [sp, #12]
 801bc96:	9902      	ldr	r1, [sp, #8]
 801bc98:	4798      	blx	r3
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	6960      	ldr	r0, [r4, #20]
 801bc9e:	f88d 3007 	strb.w	r3, [sp, #7]
 801bca2:	b130      	cbz	r0, 801bcb2 <_ZN8touchgfx3HAL4tickEv+0xda>
 801bca4:	6803      	ldr	r3, [r0, #0]
 801bca6:	f10d 0107 	add.w	r1, sp, #7
 801bcaa:	68db      	ldr	r3, [r3, #12]
 801bcac:	4798      	blx	r3
 801bcae:	2800      	cmp	r0, #0
 801bcb0:	d149      	bne.n	801bd46 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801bcb2:	f104 0018 	add.w	r0, r4, #24
 801bcb6:	f006 fe1d 	bl	80228f4 <_ZN8touchgfx8Gestures4tickEv>
 801bcba:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801bcbe:	b30b      	cbz	r3, 801bd04 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801bcc0:	6920      	ldr	r0, [r4, #16]
 801bcc2:	6803      	ldr	r3, [r0, #0]
 801bcc4:	691b      	ldr	r3, [r3, #16]
 801bcc6:	4798      	blx	r3
 801bcc8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801bcca:	4606      	mov	r6, r0
 801bccc:	b903      	cbnz	r3, 801bcd0 <_ZN8touchgfx3HAL4tickEv+0xf8>
 801bcce:	6620      	str	r0, [r4, #96]	; 0x60
 801bcd0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801bcd2:	4a22      	ldr	r2, [pc, #136]	; (801bd5c <_ZN8touchgfx3HAL4tickEv+0x184>)
 801bcd4:	1af3      	subs	r3, r6, r3
 801bcd6:	4293      	cmp	r3, r2
 801bcd8:	d914      	bls.n	801bd04 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801bcda:	6920      	ldr	r0, [r4, #16]
 801bcdc:	6803      	ldr	r3, [r0, #0]
 801bcde:	699b      	ldr	r3, [r3, #24]
 801bce0:	4798      	blx	r3
 801bce2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801bce4:	2264      	movs	r2, #100	; 0x64
 801bce6:	1af3      	subs	r3, r6, r3
 801bce8:	fbb3 f3f2 	udiv	r3, r3, r2
 801bcec:	fbb0 f0f3 	udiv	r0, r0, r3
 801bcf0:	2800      	cmp	r0, #0
 801bcf2:	dc1e      	bgt.n	801bd32 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801bcf4:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801bcf8:	6920      	ldr	r0, [r4, #16]
 801bcfa:	2100      	movs	r1, #0
 801bcfc:	6803      	ldr	r3, [r0, #0]
 801bcfe:	69db      	ldr	r3, [r3, #28]
 801bd00:	4798      	blx	r3
 801bd02:	6626      	str	r6, [r4, #96]	; 0x60
 801bd04:	f002 fe5e 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801bd08:	6803      	ldr	r3, [r0, #0]
 801bd0a:	2100      	movs	r1, #0
 801bd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd0e:	4798      	blx	r3
 801bd10:	6823      	ldr	r3, [r4, #0]
 801bd12:	4620      	mov	r0, r4
 801bd14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bd18:	4798      	blx	r3
 801bd1a:	2001      	movs	r0, #1
 801bd1c:	f7fb fe7e 	bl	8017a1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801bd20:	2300      	movs	r3, #0
 801bd22:	702b      	strb	r3, [r5, #0]
 801bd24:	b004      	add	sp, #16
 801bd26:	bd70      	pop	{r4, r5, r6, pc}
 801bd28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bd2c:	4620      	mov	r0, r4
 801bd2e:	4798      	blx	r3
 801bd30:	e7b3      	b.n	801bc9a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801bd32:	2863      	cmp	r0, #99	; 0x63
 801bd34:	bfcb      	itete	gt
 801bd36:	2300      	movgt	r3, #0
 801bd38:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801bd3c:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 801bd40:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 801bd44:	e7d8      	b.n	801bcf8 <_ZN8touchgfx3HAL4tickEv+0x120>
 801bd46:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801bd48:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801bd4c:	6803      	ldr	r3, [r0, #0]
 801bd4e:	68db      	ldr	r3, [r3, #12]
 801bd50:	4798      	blx	r3
 801bd52:	e7ae      	b.n	801bcb2 <_ZN8touchgfx3HAL4tickEv+0xda>
 801bd54:	2000ba50 	.word	0x2000ba50
 801bd58:	2000ba51 	.word	0x2000ba51
 801bd5c:	05f5e100 	.word	0x05f5e100

0801bd60 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801bd60:	f7f7 bc0e 	b.w	8013580 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801bd64 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801bd64:	6481      	str	r1, [r0, #72]	; 0x48
 801bd66:	3018      	adds	r0, #24
 801bd68:	f006 bdc2 	b.w	80228f0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801bd6c <_ZN8touchgfx3HAL5touchEll>:
 801bd6c:	b530      	push	{r4, r5, lr}
 801bd6e:	b085      	sub	sp, #20
 801bd70:	4604      	mov	r4, r0
 801bd72:	a802      	add	r0, sp, #8
 801bd74:	9102      	str	r1, [sp, #8]
 801bd76:	9203      	str	r2, [sp, #12]
 801bd78:	f002 fb80 	bl	801e47c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801bd7c:	a903      	add	r1, sp, #12
 801bd7e:	a802      	add	r0, sp, #8
 801bd80:	f002 fbca 	bl	801e518 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801bd84:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 801bd88:	9d02      	ldr	r5, [sp, #8]
 801bd8a:	f104 0018 	add.w	r0, r4, #24
 801bd8e:	9b03      	ldr	r3, [sp, #12]
 801bd90:	b179      	cbz	r1, 801bdb2 <_ZN8touchgfx3HAL5touchEll+0x46>
 801bd92:	b29b      	uxth	r3, r3
 801bd94:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801bd98:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 801bd9c:	9300      	str	r3, [sp, #0]
 801bd9e:	b2ab      	uxth	r3, r5
 801bda0:	f006 fdb6 	bl	8022910 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801bda4:	b118      	cbz	r0, 801bdae <_ZN8touchgfx3HAL5touchEll+0x42>
 801bda6:	9b02      	ldr	r3, [sp, #8]
 801bda8:	64e3      	str	r3, [r4, #76]	; 0x4c
 801bdaa:	9b03      	ldr	r3, [sp, #12]
 801bdac:	6523      	str	r3, [r4, #80]	; 0x50
 801bdae:	b005      	add	sp, #20
 801bdb0:	bd30      	pop	{r4, r5, pc}
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	b2aa      	uxth	r2, r5
 801bdb6:	f006 fdef 	bl	8022998 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801bdba:	2301      	movs	r3, #1
 801bdbc:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801bdc0:	e7f1      	b.n	801bda6 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801bdc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801bdc2:	b530      	push	{r4, r5, lr}
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d04e      	beq.n	801be66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801bdc8:	ea81 0002 	eor.w	r0, r1, r2
 801bdcc:	07c0      	lsls	r0, r0, #31
 801bdce:	d508      	bpl.n	801bde2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801bdd0:	3a01      	subs	r2, #1
 801bdd2:	440b      	add	r3, r1
 801bdd4:	4299      	cmp	r1, r3
 801bdd6:	d046      	beq.n	801be66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801bdd8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801bddc:	f801 0b01 	strb.w	r0, [r1], #1
 801bde0:	e7f8      	b.n	801bdd4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801bde2:	07d5      	lsls	r5, r2, #31
 801bde4:	bf42      	ittt	mi
 801bde6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801bdea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801bdee:	f801 0b01 	strbmi.w	r0, [r1], #1
 801bdf2:	2b01      	cmp	r3, #1
 801bdf4:	d915      	bls.n	801be22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801bdf6:	ea81 0002 	eor.w	r0, r1, r2
 801bdfa:	0784      	lsls	r4, r0, #30
 801bdfc:	d01f      	beq.n	801be3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801bdfe:	1e95      	subs	r5, r2, #2
 801be00:	460c      	mov	r4, r1
 801be02:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801be06:	f824 0b02 	strh.w	r0, [r4], #2
 801be0a:	1b18      	subs	r0, r3, r4
 801be0c:	4408      	add	r0, r1
 801be0e:	2801      	cmp	r0, #1
 801be10:	d8f7      	bhi.n	801be02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801be12:	1e98      	subs	r0, r3, #2
 801be14:	f003 0301 	and.w	r3, r3, #1
 801be18:	f020 0001 	bic.w	r0, r0, #1
 801be1c:	3002      	adds	r0, #2
 801be1e:	4401      	add	r1, r0
 801be20:	4402      	add	r2, r0
 801be22:	3a01      	subs	r2, #1
 801be24:	440b      	add	r3, r1
 801be26:	4299      	cmp	r1, r3
 801be28:	d01d      	beq.n	801be66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801be2a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801be2e:	f801 0b01 	strb.w	r0, [r1], #1
 801be32:	e7f8      	b.n	801be26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 801be34:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801be38:	f840 4b04 	str.w	r4, [r0], #4
 801be3c:	e008      	b.n	801be50 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801be3e:	0790      	lsls	r0, r2, #30
 801be40:	d004      	beq.n	801be4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 801be42:	f832 0b02 	ldrh.w	r0, [r2], #2
 801be46:	3b02      	subs	r3, #2
 801be48:	f821 0b02 	strh.w	r0, [r1], #2
 801be4c:	1f15      	subs	r5, r2, #4
 801be4e:	4608      	mov	r0, r1
 801be50:	1a1c      	subs	r4, r3, r0
 801be52:	440c      	add	r4, r1
 801be54:	2c03      	cmp	r4, #3
 801be56:	d8ed      	bhi.n	801be34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 801be58:	f023 0003 	bic.w	r0, r3, #3
 801be5c:	f003 0303 	and.w	r3, r3, #3
 801be60:	4402      	add	r2, r0
 801be62:	4401      	add	r1, r0
 801be64:	e7dd      	b.n	801be22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801be66:	2001      	movs	r0, #1
 801be68:	bd30      	pop	{r4, r5, pc}

0801be6a <_ZN8touchgfx3HAL7noTouchEv>:
 801be6a:	b510      	push	{r4, lr}
 801be6c:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 801be70:	4604      	mov	r4, r0
 801be72:	b153      	cbz	r3, 801be8a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801be74:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801be78:	2101      	movs	r1, #1
 801be7a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801be7e:	3018      	adds	r0, #24
 801be80:	f006 fd8a 	bl	8022998 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801be84:	2300      	movs	r3, #0
 801be86:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801be8a:	bd10      	pop	{r4, pc}

0801be8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801be8c:	4b07      	ldr	r3, [pc, #28]	; (801beac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801be8e:	b510      	push	{r4, lr}
 801be90:	781b      	ldrb	r3, [r3, #0]
 801be92:	4604      	mov	r4, r0
 801be94:	b12b      	cbz	r3, 801bea2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801be96:	6803      	ldr	r3, [r0, #0]
 801be98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be9a:	4798      	blx	r3
 801be9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801be9e:	4283      	cmp	r3, r0
 801bea0:	d001      	beq.n	801bea6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801bea2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bea4:	bd10      	pop	{r4, pc}
 801bea6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801bea8:	bd10      	pop	{r4, pc}
 801beaa:	bf00      	nop
 801beac:	2000ba4a 	.word	0x2000ba4a

0801beb0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801beb0:	4b0a      	ldr	r3, [pc, #40]	; (801bedc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801beb2:	b510      	push	{r4, lr}
 801beb4:	781b      	ldrb	r3, [r3, #0]
 801beb6:	4604      	mov	r4, r0
 801beb8:	b12b      	cbz	r3, 801bec6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801beba:	f7f7 fb57 	bl	801356c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801bebe:	4620      	mov	r0, r4
 801bec0:	f7ff ffe4 	bl	801be8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bec4:	bd10      	pop	{r4, pc}
 801bec6:	6840      	ldr	r0, [r0, #4]
 801bec8:	f000 fb46 	bl	801c558 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801becc:	2800      	cmp	r0, #0
 801bece:	d0f4      	beq.n	801beba <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801bed0:	6862      	ldr	r2, [r4, #4]
 801bed2:	7a53      	ldrb	r3, [r2, #9]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d0fc      	beq.n	801bed2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801bed8:	e7ef      	b.n	801beba <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801beda:	bf00      	nop
 801bedc:	2000ba4a 	.word	0x2000ba4a

0801bee0 <_ZN8touchgfx3HAL10initializeEv>:
 801bee0:	b510      	push	{r4, lr}
 801bee2:	4604      	mov	r4, r0
 801bee4:	f7f7 fb28 	bl	8013538 <_ZN8touchgfx10OSWrappers10initializeEv>
 801bee8:	6860      	ldr	r0, [r4, #4]
 801beea:	6803      	ldr	r3, [r0, #0]
 801beec:	68db      	ldr	r3, [r3, #12]
 801beee:	4798      	blx	r3
 801bef0:	68e0      	ldr	r0, [r4, #12]
 801bef2:	6803      	ldr	r3, [r0, #0]
 801bef4:	689b      	ldr	r3, [r3, #8]
 801bef6:	4798      	blx	r3
 801bef8:	6823      	ldr	r3, [r4, #0]
 801befa:	4620      	mov	r0, r4
 801befc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801befe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf02:	4718      	bx	r3

0801bf04 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf06:	461d      	mov	r5, r3
 801bf08:	4b0b      	ldr	r3, [pc, #44]	; (801bf38 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801bf0a:	4617      	mov	r7, r2
 801bf0c:	460e      	mov	r6, r1
 801bf0e:	681b      	ldr	r3, [r3, #0]
 801bf10:	6898      	ldr	r0, [r3, #8]
 801bf12:	6803      	ldr	r3, [r0, #0]
 801bf14:	6a1b      	ldr	r3, [r3, #32]
 801bf16:	4798      	blx	r3
 801bf18:	4b08      	ldr	r3, [pc, #32]	; (801bf3c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 801bf1a:	2810      	cmp	r0, #16
 801bf1c:	bf15      	itete	ne
 801bf1e:	881c      	ldrhne	r4, [r3, #0]
 801bf20:	8818      	ldrheq	r0, [r3, #0]
 801bf22:	fb07 6204 	mlane	r2, r7, r4, r6
 801bf26:	fb07 6200 	mlaeq	r2, r7, r0, r6
 801bf2a:	bf16      	itet	ne
 801bf2c:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801bf30:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 801bf34:	18a8      	addne	r0, r5, r2
 801bf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf38:	2000ba4c 	.word	0x2000ba4c
 801bf3c:	2000ba46 	.word	0x2000ba46

0801bf40 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801bf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf44:	b088      	sub	sp, #32
 801bf46:	4698      	mov	r8, r3
 801bf48:	4617      	mov	r7, r2
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801bf50:	4604      	mov	r4, r0
 801bf52:	9206      	str	r2, [sp, #24]
 801bf54:	2bff      	cmp	r3, #255	; 0xff
 801bf56:	f88d 301c 	strb.w	r3, [sp, #28]
 801bf5a:	4b1d      	ldr	r3, [pc, #116]	; (801bfd0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 801bf5c:	bf0c      	ite	eq
 801bf5e:	2201      	moveq	r2, #1
 801bf60:	2204      	movne	r2, #4
 801bf62:	881b      	ldrh	r3, [r3, #0]
 801bf64:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801bf68:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801bf6c:	9201      	str	r2, [sp, #4]
 801bf6e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801bf72:	9102      	str	r1, [sp, #8]
 801bf74:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bf78:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf7c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801bf80:	f8ad 5012 	strh.w	r5, [sp, #18]
 801bf84:	f7ff ff82 	bl	801be8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bf88:	4642      	mov	r2, r8
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	4639      	mov	r1, r7
 801bf8e:	4620      	mov	r0, r4
 801bf90:	f7ff ffb8 	bl	801bf04 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801bf94:	9003      	str	r0, [sp, #12]
 801bf96:	b106      	cbz	r6, 801bf9a <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 801bf98:	b935      	cbnz	r5, 801bfa8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 801bf9a:	4b0e      	ldr	r3, [pc, #56]	; (801bfd4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 801bf9c:	f240 1143 	movw	r1, #323	; 0x143
 801bfa0:	4a0d      	ldr	r2, [pc, #52]	; (801bfd8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801bfa2:	480e      	ldr	r0, [pc, #56]	; (801bfdc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 801bfa4:	f006 fdc8 	bl	8022b38 <__assert_func>
 801bfa8:	6823      	ldr	r3, [r4, #0]
 801bfaa:	4620      	mov	r0, r4
 801bfac:	9d01      	ldr	r5, [sp, #4]
 801bfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bfb0:	4798      	blx	r3
 801bfb2:	4228      	tst	r0, r5
 801bfb4:	d104      	bne.n	801bfc0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 801bfb6:	4b0a      	ldr	r3, [pc, #40]	; (801bfe0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 801bfb8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801bfbc:	4a06      	ldr	r2, [pc, #24]	; (801bfd8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801bfbe:	e7f0      	b.n	801bfa2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801bfc0:	6860      	ldr	r0, [r4, #4]
 801bfc2:	a901      	add	r1, sp, #4
 801bfc4:	6803      	ldr	r3, [r0, #0]
 801bfc6:	685b      	ldr	r3, [r3, #4]
 801bfc8:	4798      	blx	r3
 801bfca:	b008      	add	sp, #32
 801bfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfd0:	2000ba46 	.word	0x2000ba46
 801bfd4:	08025b61 	.word	0x08025b61
 801bfd8:	08025d67 	.word	0x08025d67
 801bfdc:	08025b99 	.word	0x08025b99
 801bfe0:	08025bbf 	.word	0x08025bbf

0801bfe4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801bfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfe8:	4698      	mov	r8, r3
 801bfea:	b088      	sub	sp, #32
 801bfec:	2300      	movs	r3, #0
 801bfee:	4617      	mov	r7, r2
 801bff0:	4604      	mov	r4, r0
 801bff2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801bff6:	9306      	str	r3, [sp, #24]
 801bff8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801bffc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801c000:	9301      	str	r3, [sp, #4]
 801c002:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c006:	9102      	str	r1, [sp, #8]
 801c008:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c00c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c010:	f8ad 6010 	strh.w	r6, [sp, #16]
 801c014:	f88d 301c 	strb.w	r3, [sp, #28]
 801c018:	f8ad 5012 	strh.w	r5, [sp, #18]
 801c01c:	f7ff ff36 	bl	801be8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c020:	4642      	mov	r2, r8
 801c022:	4603      	mov	r3, r0
 801c024:	4639      	mov	r1, r7
 801c026:	4620      	mov	r0, r4
 801c028:	f7ff ff6c 	bl	801bf04 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c02c:	4b11      	ldr	r3, [pc, #68]	; (801c074 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801c02e:	9003      	str	r0, [sp, #12]
 801c030:	881b      	ldrh	r3, [r3, #0]
 801c032:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c036:	b106      	cbz	r6, 801c03a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 801c038:	b935      	cbnz	r5, 801c048 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 801c03a:	4b0f      	ldr	r3, [pc, #60]	; (801c078 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 801c03c:	f240 1153 	movw	r1, #339	; 0x153
 801c040:	4a0e      	ldr	r2, [pc, #56]	; (801c07c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801c042:	480f      	ldr	r0, [pc, #60]	; (801c080 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 801c044:	f006 fd78 	bl	8022b38 <__assert_func>
 801c048:	6823      	ldr	r3, [r4, #0]
 801c04a:	4620      	mov	r0, r4
 801c04c:	9d01      	ldr	r5, [sp, #4]
 801c04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c050:	4798      	blx	r3
 801c052:	4228      	tst	r0, r5
 801c054:	d104      	bne.n	801c060 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 801c056:	4b0b      	ldr	r3, [pc, #44]	; (801c084 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 801c058:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801c05c:	4a07      	ldr	r2, [pc, #28]	; (801c07c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801c05e:	e7f0      	b.n	801c042 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 801c060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c062:	a901      	add	r1, sp, #4
 801c064:	6860      	ldr	r0, [r4, #4]
 801c066:	9306      	str	r3, [sp, #24]
 801c068:	6803      	ldr	r3, [r0, #0]
 801c06a:	685b      	ldr	r3, [r3, #4]
 801c06c:	4798      	blx	r3
 801c06e:	b008      	add	sp, #32
 801c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c074:	2000ba46 	.word	0x2000ba46
 801c078:	08025b61 	.word	0x08025b61
 801c07c:	08025c04 	.word	0x08025c04
 801c080:	08025b99 	.word	0x08025b99
 801c084:	08025bbf 	.word	0x08025bbf

0801c088 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c08c:	b088      	sub	sp, #32
 801c08e:	4698      	mov	r8, r3
 801c090:	4617      	mov	r7, r2
 801c092:	2200      	movs	r2, #0
 801c094:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801c098:	4604      	mov	r4, r0
 801c09a:	9206      	str	r2, [sp, #24]
 801c09c:	2bff      	cmp	r3, #255	; 0xff
 801c09e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801c0a2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801c0a6:	bf0c      	ite	eq
 801c0a8:	2220      	moveq	r2, #32
 801c0aa:	2240      	movne	r2, #64	; 0x40
 801c0ac:	9102      	str	r1, [sp, #8]
 801c0ae:	9201      	str	r2, [sp, #4]
 801c0b0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801c0b4:	f88d 301c 	strb.w	r3, [sp, #28]
 801c0b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c0bc:	f8ad 6010 	strh.w	r6, [sp, #16]
 801c0c0:	f8ad 5012 	strh.w	r5, [sp, #18]
 801c0c4:	f7ff fee2 	bl	801be8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c0c8:	4642      	mov	r2, r8
 801c0ca:	4603      	mov	r3, r0
 801c0cc:	4639      	mov	r1, r7
 801c0ce:	4620      	mov	r0, r4
 801c0d0:	f7ff ff18 	bl	801bf04 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c0d4:	4b10      	ldr	r3, [pc, #64]	; (801c118 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 801c0d6:	9003      	str	r0, [sp, #12]
 801c0d8:	881b      	ldrh	r3, [r3, #0]
 801c0da:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c0de:	b106      	cbz	r6, 801c0e2 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801c0e0:	b935      	cbnz	r5, 801c0f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801c0e2:	4b0e      	ldr	r3, [pc, #56]	; (801c11c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 801c0e4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801c0e8:	4a0d      	ldr	r2, [pc, #52]	; (801c120 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801c0ea:	480e      	ldr	r0, [pc, #56]	; (801c124 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 801c0ec:	f006 fd24 	bl	8022b38 <__assert_func>
 801c0f0:	6823      	ldr	r3, [r4, #0]
 801c0f2:	4620      	mov	r0, r4
 801c0f4:	9d01      	ldr	r5, [sp, #4]
 801c0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0f8:	4798      	blx	r3
 801c0fa:	4228      	tst	r0, r5
 801c0fc:	d104      	bne.n	801c108 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801c0fe:	4b0a      	ldr	r3, [pc, #40]	; (801c128 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801c100:	f240 1167 	movw	r1, #359	; 0x167
 801c104:	4a06      	ldr	r2, [pc, #24]	; (801c120 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801c106:	e7f0      	b.n	801c0ea <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 801c108:	6860      	ldr	r0, [r4, #4]
 801c10a:	a901      	add	r1, sp, #4
 801c10c:	6803      	ldr	r3, [r0, #0]
 801c10e:	685b      	ldr	r3, [r3, #4]
 801c110:	4798      	blx	r3
 801c112:	b008      	add	sp, #32
 801c114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c118:	2000ba46 	.word	0x2000ba46
 801c11c:	08025b61 	.word	0x08025b61
 801c120:	08025ca8 	.word	0x08025ca8
 801c124:	08025b99 	.word	0x08025b99
 801c128:	08025bbf 	.word	0x08025bbf

0801c12c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801c12c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c130:	b089      	sub	sp, #36	; 0x24
 801c132:	4699      	mov	r9, r3
 801c134:	4604      	mov	r4, r0
 801c136:	2500      	movs	r5, #0
 801c138:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801c13c:	4690      	mov	r8, r2
 801c13e:	460f      	mov	r7, r1
 801c140:	9506      	str	r5, [sp, #24]
 801c142:	2eff      	cmp	r6, #255	; 0xff
 801c144:	9502      	str	r5, [sp, #8]
 801c146:	bf0c      	ite	eq
 801c148:	2302      	moveq	r3, #2
 801c14a:	2308      	movne	r3, #8
 801c14c:	9301      	str	r3, [sp, #4]
 801c14e:	f7ff fe9d 	bl	801be8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c152:	464a      	mov	r2, r9
 801c154:	4603      	mov	r3, r0
 801c156:	4641      	mov	r1, r8
 801c158:	4620      	mov	r0, r4
 801c15a:	f7ff fed3 	bl	801bf04 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c15e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c162:	f8ad 5014 	strh.w	r5, [sp, #20]
 801c166:	f8ad 3010 	strh.w	r3, [sp, #16]
 801c16a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801c16e:	9d01      	ldr	r5, [sp, #4]
 801c170:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c174:	4b0e      	ldr	r3, [pc, #56]	; (801c1b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 801c176:	9003      	str	r0, [sp, #12]
 801c178:	4620      	mov	r0, r4
 801c17a:	881b      	ldrh	r3, [r3, #0]
 801c17c:	9706      	str	r7, [sp, #24]
 801c17e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c182:	6823      	ldr	r3, [r4, #0]
 801c184:	f88d 601c 	strb.w	r6, [sp, #28]
 801c188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c18a:	4798      	blx	r3
 801c18c:	4228      	tst	r0, r5
 801c18e:	d106      	bne.n	801c19e <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 801c190:	4b08      	ldr	r3, [pc, #32]	; (801c1b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 801c192:	f240 1179 	movw	r1, #377	; 0x179
 801c196:	4a08      	ldr	r2, [pc, #32]	; (801c1b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 801c198:	4808      	ldr	r0, [pc, #32]	; (801c1bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 801c19a:	f006 fccd 	bl	8022b38 <__assert_func>
 801c19e:	6860      	ldr	r0, [r4, #4]
 801c1a0:	a901      	add	r1, sp, #4
 801c1a2:	6803      	ldr	r3, [r0, #0]
 801c1a4:	685b      	ldr	r3, [r3, #4]
 801c1a6:	4798      	blx	r3
 801c1a8:	b009      	add	sp, #36	; 0x24
 801c1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1ae:	bf00      	nop
 801c1b0:	2000ba46 	.word	0x2000ba46
 801c1b4:	08025bbf 	.word	0x08025bbf
 801c1b8:	08025dde 	.word	0x08025dde
 801c1bc:	08025b99 	.word	0x08025b99

0801c1c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801c1c0:	4b1d      	ldr	r3, [pc, #116]	; (801c238 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801c1c2:	b570      	push	{r4, r5, r6, lr}
 801c1c4:	b08a      	sub	sp, #40	; 0x28
 801c1c6:	781b      	ldrb	r3, [r3, #0]
 801c1c8:	4604      	mov	r4, r0
 801c1ca:	e88d 0006 	stmia.w	sp, {r1, r2}
 801c1ce:	b933      	cbnz	r3, 801c1de <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801c1d0:	4b1a      	ldr	r3, [pc, #104]	; (801c23c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801c1d2:	f240 1185 	movw	r1, #389	; 0x185
 801c1d6:	4a1a      	ldr	r2, [pc, #104]	; (801c240 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801c1d8:	481a      	ldr	r0, [pc, #104]	; (801c244 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 801c1da:	f006 fcad 	bl	8022b38 <__assert_func>
 801c1de:	2300      	movs	r3, #0
 801c1e0:	f8bd 5000 	ldrh.w	r5, [sp]
 801c1e4:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801c1e8:	9308      	str	r3, [sp, #32]
 801c1ea:	2301      	movs	r3, #1
 801c1ec:	9303      	str	r3, [sp, #12]
 801c1ee:	6803      	ldr	r3, [r0, #0]
 801c1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1f2:	4798      	blx	r3
 801c1f4:	4632      	mov	r2, r6
 801c1f6:	4603      	mov	r3, r0
 801c1f8:	4629      	mov	r1, r5
 801c1fa:	4620      	mov	r0, r4
 801c1fc:	f7ff fe82 	bl	801bf04 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c202:	9004      	str	r0, [sp, #16]
 801c204:	a903      	add	r1, sp, #12
 801c206:	9305      	str	r3, [sp, #20]
 801c208:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c20c:	6860      	ldr	r0, [r4, #4]
 801c20e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c212:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c216:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c21a:	4b0b      	ldr	r3, [pc, #44]	; (801c248 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 801c21c:	881b      	ldrh	r3, [r3, #0]
 801c21e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c222:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c226:	23ff      	movs	r3, #255	; 0xff
 801c228:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c22c:	6803      	ldr	r3, [r0, #0]
 801c22e:	685b      	ldr	r3, [r3, #4]
 801c230:	4798      	blx	r3
 801c232:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801c234:	b00a      	add	sp, #40	; 0x28
 801c236:	bd70      	pop	{r4, r5, r6, pc}
 801c238:	2000ba4b 	.word	0x2000ba4b
 801c23c:	08025af3 	.word	0x08025af3
 801c240:	08025d21 	.word	0x08025d21
 801c244:	08025b99 	.word	0x08025b99
 801c248:	2000ba46 	.word	0x2000ba46

0801c24c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801c24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c24e:	461d      	mov	r5, r3
 801c250:	b08b      	sub	sp, #44	; 0x2c
 801c252:	2300      	movs	r3, #0
 801c254:	4604      	mov	r4, r0
 801c256:	9308      	str	r3, [sp, #32]
 801c258:	2301      	movs	r3, #1
 801c25a:	9303      	str	r3, [sp, #12]
 801c25c:	6803      	ldr	r3, [r0, #0]
 801c25e:	e88d 0006 	stmia.w	sp, {r1, r2}
 801c262:	f8bd 6000 	ldrh.w	r6, [sp]
 801c266:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801c26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c26c:	4798      	blx	r3
 801c26e:	463a      	mov	r2, r7
 801c270:	4603      	mov	r3, r0
 801c272:	4631      	mov	r1, r6
 801c274:	4620      	mov	r0, r4
 801c276:	f7ff fe45 	bl	801bf04 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801c27a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c27e:	9004      	str	r0, [sp, #16]
 801c280:	a903      	add	r1, sp, #12
 801c282:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c286:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c28a:	6860      	ldr	r0, [r4, #4]
 801c28c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c290:	4b08      	ldr	r3, [pc, #32]	; (801c2b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 801c292:	9505      	str	r5, [sp, #20]
 801c294:	881b      	ldrh	r3, [r3, #0]
 801c296:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c29a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c29c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c2a0:	23ff      	movs	r3, #255	; 0xff
 801c2a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801c2a6:	6803      	ldr	r3, [r0, #0]
 801c2a8:	685b      	ldr	r3, [r3, #4]
 801c2aa:	4798      	blx	r3
 801c2ac:	4628      	mov	r0, r5
 801c2ae:	b00b      	add	sp, #44	; 0x2c
 801c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2b2:	bf00      	nop
 801c2b4:	2000ba46 	.word	0x2000ba46

0801c2b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801c2b8:	b570      	push	{r4, r5, r6, lr}
 801c2ba:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801c2be:	4604      	mov	r4, r0
 801c2c0:	b19b      	cbz	r3, 801c2ea <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801c2c2:	2002      	movs	r0, #2
 801c2c4:	f7fb fbab 	bl	8017a1e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801c2c8:	2300      	movs	r3, #0
 801c2ca:	4620      	mov	r0, r4
 801c2cc:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801c2d0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c2d4:	6823      	ldr	r3, [r4, #0]
 801c2d6:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801c2da:	f7ff fdd7 	bl	801be8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801c2de:	4601      	mov	r1, r0
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	462b      	mov	r3, r5
 801c2e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2e8:	4718      	bx	r3
 801c2ea:	bd70      	pop	{r4, r5, r6, pc}

0801c2ec <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801c2ec:	b570      	push	{r4, r5, r6, lr}
 801c2ee:	4605      	mov	r5, r0
 801c2f0:	460c      	mov	r4, r1
 801c2f2:	2003      	movs	r0, #3
 801c2f4:	b149      	cbz	r1, 801c30a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801c2f6:	f7fb fb90 	bl	8017a1a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801c2fa:	6928      	ldr	r0, [r5, #16]
 801c2fc:	b168      	cbz	r0, 801c31a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801c2fe:	6803      	ldr	r3, [r0, #0]
 801c300:	2101      	movs	r1, #1
 801c302:	695b      	ldr	r3, [r3, #20]
 801c304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c308:	4718      	bx	r3
 801c30a:	f7fb fb87 	bl	8017a1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801c30e:	6928      	ldr	r0, [r5, #16]
 801c310:	b118      	cbz	r0, 801c31a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801c312:	6803      	ldr	r3, [r0, #0]
 801c314:	4621      	mov	r1, r4
 801c316:	695b      	ldr	r3, [r3, #20]
 801c318:	e7f4      	b.n	801c304 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801c31a:	bd70      	pop	{r4, r5, r6, pc}

0801c31c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801c31c:	68c2      	ldr	r2, [r0, #12]
 801c31e:	6900      	ldr	r0, [r0, #16]
 801c320:	1a13      	subs	r3, r2, r0
 801c322:	4258      	negs	r0, r3
 801c324:	4158      	adcs	r0, r3
 801c326:	4770      	bx	lr

0801c328 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801c328:	68c2      	ldr	r2, [r0, #12]
 801c32a:	6903      	ldr	r3, [r0, #16]
 801c32c:	1a9b      	subs	r3, r3, r2
 801c32e:	2b00      	cmp	r3, #0
 801c330:	bfdc      	itt	le
 801c332:	6882      	ldrle	r2, [r0, #8]
 801c334:	189b      	addle	r3, r3, r2
 801c336:	2b01      	cmp	r3, #1
 801c338:	bfcc      	ite	gt
 801c33a:	2000      	movgt	r0, #0
 801c33c:	2001      	movle	r0, #1
 801c33e:	4770      	bx	lr

0801c340 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801c340:	6902      	ldr	r2, [r0, #16]
 801c342:	6843      	ldr	r3, [r0, #4]
 801c344:	201c      	movs	r0, #28
 801c346:	fb00 3002 	mla	r0, r0, r2, r3
 801c34a:	4770      	bx	lr

0801c34c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801c34c:	6803      	ldr	r3, [r0, #0]
 801c34e:	691b      	ldr	r3, [r3, #16]
 801c350:	4718      	bx	r3

0801c352 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801c352:	4770      	bx	lr

0801c354 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801c354:	4770      	bx	lr

0801c356 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801c356:	4770      	bx	lr

0801c358 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801c358:	2301      	movs	r3, #1
 801c35a:	b570      	push	{r4, r5, r6, lr}
 801c35c:	7203      	strb	r3, [r0, #8]
 801c35e:	4604      	mov	r4, r0
 801c360:	6840      	ldr	r0, [r0, #4]
 801c362:	6803      	ldr	r3, [r0, #0]
 801c364:	699b      	ldr	r3, [r3, #24]
 801c366:	4798      	blx	r3
 801c368:	6803      	ldr	r3, [r0, #0]
 801c36a:	4605      	mov	r5, r0
 801c36c:	2b08      	cmp	r3, #8
 801c36e:	d01e      	beq.n	801c3ae <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801c370:	d80b      	bhi.n	801c38a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801c372:	2b02      	cmp	r3, #2
 801c374:	d027      	beq.n	801c3c6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801c376:	2b04      	cmp	r3, #4
 801c378:	d011      	beq.n	801c39e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801c37a:	2b01      	cmp	r3, #1
 801c37c:	d028      	beq.n	801c3d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c37e:	4b17      	ldr	r3, [pc, #92]	; (801c3dc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801c380:	218d      	movs	r1, #141	; 0x8d
 801c382:	4a17      	ldr	r2, [pc, #92]	; (801c3e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801c384:	4817      	ldr	r0, [pc, #92]	; (801c3e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801c386:	f006 fbd7 	bl	8022b38 <__assert_func>
 801c38a:	2b40      	cmp	r3, #64	; 0x40
 801c38c:	d020      	beq.n	801c3d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c38e:	d801      	bhi.n	801c394 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801c390:	2b20      	cmp	r3, #32
 801c392:	e7f3      	b.n	801c37c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801c394:	2b80      	cmp	r3, #128	; 0x80
 801c396:	d01b      	beq.n	801c3d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801c398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c39c:	e7ee      	b.n	801c37c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801c39e:	6823      	ldr	r3, [r4, #0]
 801c3a0:	7e01      	ldrb	r1, [r0, #24]
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c3a6:	4798      	blx	r3
 801c3a8:	6823      	ldr	r3, [r4, #0]
 801c3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3ac:	e006      	b.n	801c3bc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801c3ae:	6823      	ldr	r3, [r4, #0]
 801c3b0:	7e01      	ldrb	r1, [r0, #24]
 801c3b2:	4620      	mov	r0, r4
 801c3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c3b6:	4798      	blx	r3
 801c3b8:	6823      	ldr	r3, [r4, #0]
 801c3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3bc:	4629      	mov	r1, r5
 801c3be:	4620      	mov	r0, r4
 801c3c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c3c4:	4718      	bx	r3
 801c3c6:	6823      	ldr	r3, [r4, #0]
 801c3c8:	4620      	mov	r0, r4
 801c3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3cc:	4798      	blx	r3
 801c3ce:	e7f3      	b.n	801c3b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801c3d0:	6823      	ldr	r3, [r4, #0]
 801c3d2:	4620      	mov	r0, r4
 801c3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3d6:	4798      	blx	r3
 801c3d8:	e7e6      	b.n	801c3a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801c3da:	bf00      	nop
 801c3dc:	08025e49 	.word	0x08025e49
 801c3e0:	08025f08 	.word	0x08025f08
 801c3e4:	08025e6e 	.word	0x08025e6e

0801c3e8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801c3e8:	b570      	push	{r4, r5, r6, lr}
 801c3ea:	4604      	mov	r4, r0
 801c3ec:	460e      	mov	r6, r1
 801c3ee:	6860      	ldr	r0, [r4, #4]
 801c3f0:	6803      	ldr	r3, [r0, #0]
 801c3f2:	685b      	ldr	r3, [r3, #4]
 801c3f4:	4798      	blx	r3
 801c3f6:	2800      	cmp	r0, #0
 801c3f8:	d1f9      	bne.n	801c3ee <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801c3fa:	4d0b      	ldr	r5, [pc, #44]	; (801c428 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801c3fc:	6828      	ldr	r0, [r5, #0]
 801c3fe:	6803      	ldr	r3, [r0, #0]
 801c400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c402:	4798      	blx	r3
 801c404:	f7f7 f8c8 	bl	8013598 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801c408:	6860      	ldr	r0, [r4, #4]
 801c40a:	4631      	mov	r1, r6
 801c40c:	6803      	ldr	r3, [r0, #0]
 801c40e:	689b      	ldr	r3, [r3, #8]
 801c410:	4798      	blx	r3
 801c412:	6823      	ldr	r3, [r4, #0]
 801c414:	4620      	mov	r0, r4
 801c416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c418:	4798      	blx	r3
 801c41a:	6828      	ldr	r0, [r5, #0]
 801c41c:	6803      	ldr	r3, [r0, #0]
 801c41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c424:	4718      	bx	r3
 801c426:	bf00      	nop
 801c428:	2000ba4c 	.word	0x2000ba4c

0801c42c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801c42c:	b508      	push	{r3, lr}
 801c42e:	f7f7 f89d 	bl	801356c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801c432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c436:	f7f7 b8a3 	b.w	8013580 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801c43a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801c43a:	b510      	push	{r4, lr}
 801c43c:	4604      	mov	r4, r0
 801c43e:	2114      	movs	r1, #20
 801c440:	f006 fb5e 	bl	8022b00 <_ZdlPvj>
 801c444:	4620      	mov	r0, r4
 801c446:	bd10      	pop	{r4, pc}

0801c448 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801c448:	b570      	push	{r4, r5, r6, lr}
 801c44a:	4604      	mov	r4, r0
 801c44c:	6840      	ldr	r0, [r0, #4]
 801c44e:	6803      	ldr	r3, [r0, #0]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	4798      	blx	r3
 801c454:	4605      	mov	r5, r0
 801c456:	b908      	cbnz	r0, 801c45c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801c458:	7a23      	ldrb	r3, [r4, #8]
 801c45a:	b973      	cbnz	r3, 801c47a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801c45c:	6860      	ldr	r0, [r4, #4]
 801c45e:	6803      	ldr	r3, [r0, #0]
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	4798      	blx	r3
 801c464:	b928      	cbnz	r0, 801c472 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801c466:	6823      	ldr	r3, [r4, #0]
 801c468:	4620      	mov	r0, r4
 801c46a:	6a1b      	ldr	r3, [r3, #32]
 801c46c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c470:	4718      	bx	r3
 801c472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c476:	f7f7 b899 	b.w	80135ac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801c47a:	6860      	ldr	r0, [r4, #4]
 801c47c:	6803      	ldr	r3, [r0, #0]
 801c47e:	695b      	ldr	r3, [r3, #20]
 801c480:	4798      	blx	r3
 801c482:	7225      	strb	r5, [r4, #8]
 801c484:	e7ea      	b.n	801c45c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
	...

0801c488 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801c488:	b510      	push	{r4, lr}
 801c48a:	68c3      	ldr	r3, [r0, #12]
 801c48c:	6902      	ldr	r2, [r0, #16]
 801c48e:	1ad2      	subs	r2, r2, r3
 801c490:	2a00      	cmp	r2, #0
 801c492:	bfdc      	itt	le
 801c494:	6884      	ldrle	r4, [r0, #8]
 801c496:	1912      	addle	r2, r2, r4
 801c498:	2a01      	cmp	r2, #1
 801c49a:	dd17      	ble.n	801c4cc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801c49c:	6842      	ldr	r2, [r0, #4]
 801c49e:	241c      	movs	r4, #28
 801c4a0:	fb04 2303 	mla	r3, r4, r3, r2
 801c4a4:	f101 0218 	add.w	r2, r1, #24
 801c4a8:	f851 4b04 	ldr.w	r4, [r1], #4
 801c4ac:	4291      	cmp	r1, r2
 801c4ae:	f843 4b04 	str.w	r4, [r3], #4
 801c4b2:	d1f9      	bne.n	801c4a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801c4b4:	780a      	ldrb	r2, [r1, #0]
 801c4b6:	701a      	strb	r2, [r3, #0]
 801c4b8:	68c3      	ldr	r3, [r0, #12]
 801c4ba:	6882      	ldr	r2, [r0, #8]
 801c4bc:	f3bf 8f5b 	dmb	ish
 801c4c0:	3301      	adds	r3, #1
 801c4c2:	4293      	cmp	r3, r2
 801c4c4:	bfa8      	it	ge
 801c4c6:	1a9b      	subge	r3, r3, r2
 801c4c8:	60c3      	str	r3, [r0, #12]
 801c4ca:	bd10      	pop	{r4, pc}
 801c4cc:	4b02      	ldr	r3, [pc, #8]	; (801c4d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801c4ce:	213b      	movs	r1, #59	; 0x3b
 801c4d0:	4a02      	ldr	r2, [pc, #8]	; (801c4dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801c4d2:	4803      	ldr	r0, [pc, #12]	; (801c4e0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801c4d4:	f006 fb30 	bl	8022b38 <__assert_func>
 801c4d8:	08025e94 	.word	0x08025e94
 801c4dc:	08025f38 	.word	0x08025f38
 801c4e0:	08025e6e 	.word	0x08025e6e

0801c4e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801c4e4:	b510      	push	{r4, lr}
 801c4e6:	6803      	ldr	r3, [r0, #0]
 801c4e8:	4604      	mov	r4, r0
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	4798      	blx	r3
 801c4ee:	b128      	cbz	r0, 801c4fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801c4f0:	4b07      	ldr	r3, [pc, #28]	; (801c510 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801c4f2:	2141      	movs	r1, #65	; 0x41
 801c4f4:	4a07      	ldr	r2, [pc, #28]	; (801c514 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801c4f6:	4808      	ldr	r0, [pc, #32]	; (801c518 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801c4f8:	f006 fb1e 	bl	8022b38 <__assert_func>
 801c4fc:	6923      	ldr	r3, [r4, #16]
 801c4fe:	68a2      	ldr	r2, [r4, #8]
 801c500:	f3bf 8f5b 	dmb	ish
 801c504:	3301      	adds	r3, #1
 801c506:	4293      	cmp	r3, r2
 801c508:	bfa8      	it	ge
 801c50a:	1a9b      	subge	r3, r3, r2
 801c50c:	6123      	str	r3, [r4, #16]
 801c50e:	bd10      	pop	{r4, pc}
 801c510:	08025eb7 	.word	0x08025eb7
 801c514:	08025f86 	.word	0x08025f86
 801c518:	08025e6e 	.word	0x08025e6e

0801c51c <_ZN8touchgfx13DMA_Interface5startEv>:
 801c51c:	b510      	push	{r4, lr}
 801c51e:	4604      	mov	r4, r0
 801c520:	6840      	ldr	r0, [r0, #4]
 801c522:	6803      	ldr	r3, [r0, #0]
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	4798      	blx	r3
 801c528:	b948      	cbnz	r0, 801c53e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c52a:	7a63      	ldrb	r3, [r4, #9]
 801c52c:	b13b      	cbz	r3, 801c53e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c52e:	7a23      	ldrb	r3, [r4, #8]
 801c530:	b92b      	cbnz	r3, 801c53e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801c532:	6823      	ldr	r3, [r4, #0]
 801c534:	4620      	mov	r0, r4
 801c536:	6a1b      	ldr	r3, [r3, #32]
 801c538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c53c:	4718      	bx	r3
 801c53e:	bd10      	pop	{r4, pc}

0801c540 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801c540:	b510      	push	{r4, lr}
 801c542:	6082      	str	r2, [r0, #8]
 801c544:	2200      	movs	r2, #0
 801c546:	4c03      	ldr	r4, [pc, #12]	; (801c554 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801c548:	6041      	str	r1, [r0, #4]
 801c54a:	6004      	str	r4, [r0, #0]
 801c54c:	60c2      	str	r2, [r0, #12]
 801c54e:	6102      	str	r2, [r0, #16]
 801c550:	bd10      	pop	{r4, pc}
 801c552:	bf00      	nop
 801c554:	08025eec 	.word	0x08025eec

0801c558 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801c558:	6840      	ldr	r0, [r0, #4]
 801c55a:	6803      	ldr	r3, [r0, #0]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	4718      	bx	r3

0801c560 <_ZN8touchgfx7OutlineD1Ev>:
 801c560:	4770      	bx	lr

0801c562 <_ZN8touchgfx7OutlineD0Ev>:
 801c562:	b510      	push	{r4, lr}
 801c564:	4604      	mov	r4, r0
 801c566:	2148      	movs	r1, #72	; 0x48
 801c568:	f006 faca 	bl	8022b00 <_ZdlPvj>
 801c56c:	4620      	mov	r0, r4
 801c56e:	bd10      	pop	{r4, pc}

0801c570 <_ZN8touchgfx7Outline5resetEv>:
 801c570:	b510      	push	{r4, lr}
 801c572:	4604      	mov	r4, r0
 801c574:	f001 f8aa 	bl	801d6cc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801c578:	60e0      	str	r0, [r4, #12]
 801c57a:	f001 f8ad 	bl	801d6d8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801c57e:	68e3      	ldr	r3, [r4, #12]
 801c580:	2200      	movs	r2, #0
 801c582:	08c0      	lsrs	r0, r0, #3
 801c584:	6123      	str	r3, [r4, #16]
 801c586:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c58a:	6060      	str	r0, [r4, #4]
 801c58c:	82a3      	strh	r3, [r4, #20]
 801c58e:	82e3      	strh	r3, [r4, #22]
 801c590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c592:	60a2      	str	r2, [r4, #8]
 801c594:	f023 0301 	bic.w	r3, r3, #1
 801c598:	8322      	strh	r2, [r4, #24]
 801c59a:	8362      	strh	r2, [r4, #26]
 801c59c:	f043 0302 	orr.w	r3, r3, #2
 801c5a0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801c5a4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801c5a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c5aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c5ac:	6323      	str	r3, [r4, #48]	; 0x30
 801c5ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801c5b2:	6363      	str	r3, [r4, #52]	; 0x34
 801c5b4:	63a3      	str	r3, [r4, #56]	; 0x38
 801c5b6:	bd10      	pop	{r4, pc}

0801c5b8 <_ZN8touchgfx7OutlineC1Ev>:
 801c5b8:	4b0f      	ldr	r3, [pc, #60]	; (801c5f8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 801c5ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801c5be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801c5c2:	b510      	push	{r4, lr}
 801c5c4:	6003      	str	r3, [r0, #0]
 801c5c6:	2300      	movs	r3, #0
 801c5c8:	4604      	mov	r4, r0
 801c5ca:	62c2      	str	r2, [r0, #44]	; 0x2c
 801c5cc:	6043      	str	r3, [r0, #4]
 801c5ce:	6083      	str	r3, [r0, #8]
 801c5d0:	60c3      	str	r3, [r0, #12]
 801c5d2:	6103      	str	r3, [r0, #16]
 801c5d4:	6143      	str	r3, [r0, #20]
 801c5d6:	6183      	str	r3, [r0, #24]
 801c5d8:	61c3      	str	r3, [r0, #28]
 801c5da:	6203      	str	r3, [r0, #32]
 801c5dc:	6243      	str	r3, [r0, #36]	; 0x24
 801c5de:	6283      	str	r3, [r0, #40]	; 0x28
 801c5e0:	6302      	str	r2, [r0, #48]	; 0x30
 801c5e2:	6341      	str	r1, [r0, #52]	; 0x34
 801c5e4:	6381      	str	r1, [r0, #56]	; 0x38
 801c5e6:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c5e8:	6402      	str	r2, [r0, #64]	; 0x40
 801c5ea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801c5ee:	f7ff ffbf 	bl	801c570 <_ZN8touchgfx7Outline5resetEv>
 801c5f2:	4620      	mov	r0, r4
 801c5f4:	bd10      	pop	{r4, pc}
 801c5f6:	bf00      	nop
 801c5f8:	08025fc0 	.word	0x08025fc0

0801c5fc <_ZN8touchgfx7Outline10renderLineEiiii>:
 801c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c600:	b093      	sub	sp, #76	; 0x4c
 801c602:	4604      	mov	r4, r0
 801c604:	1155      	asrs	r5, r2, #5
 801c606:	f002 0c1f 	and.w	ip, r2, #31
 801c60a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c60c:	9305      	str	r3, [sp, #20]
 801c60e:	1143      	asrs	r3, r0, #5
 801c610:	1146      	asrs	r6, r0, #5
 801c612:	930b      	str	r3, [sp, #44]	; 0x2c
 801c614:	f000 031f 	and.w	r3, r0, #31
 801c618:	9303      	str	r3, [sp, #12]
 801c61a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c61c:	429d      	cmp	r5, r3
 801c61e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c620:	bfb8      	it	lt
 801c622:	6325      	strlt	r5, [r4, #48]	; 0x30
 801c624:	429d      	cmp	r5, r3
 801c626:	bfa4      	itt	ge
 801c628:	1c6b      	addge	r3, r5, #1
 801c62a:	63a3      	strge	r3, [r4, #56]	; 0x38
 801c62c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c62e:	429e      	cmp	r6, r3
 801c630:	bfb8      	it	lt
 801c632:	4633      	movlt	r3, r6
 801c634:	ea4f 1660 	mov.w	r6, r0, asr #5
 801c638:	bfb8      	it	lt
 801c63a:	6323      	strlt	r3, [r4, #48]	; 0x30
 801c63c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c63e:	429e      	cmp	r6, r3
 801c640:	bfa2      	ittt	ge
 801c642:	4633      	movge	r3, r6
 801c644:	3301      	addge	r3, #1
 801c646:	63a3      	strge	r3, [r4, #56]	; 0x38
 801c648:	9b05      	ldr	r3, [sp, #20]
 801c64a:	eba3 0a01 	sub.w	sl, r3, r1
 801c64e:	1143      	asrs	r3, r0, #5
 801c650:	429d      	cmp	r5, r3
 801c652:	f040 811e 	bne.w	801c892 <_ZN8touchgfx7Outline10renderLineEiiii+0x296>
 801c656:	9b05      	ldr	r3, [sp, #20]
 801c658:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801c65c:	9b03      	ldr	r3, [sp, #12]
 801c65e:	459c      	cmp	ip, r3
 801c660:	d12d      	bne.n	801c6be <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 801c662:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801c666:	eb0e 4105 	add.w	r1, lr, r5, lsl #16
 801c66a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801c66e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801c672:	4299      	cmp	r1, r3
 801c674:	d038      	beq.n	801c6e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801c676:	8b63      	ldrh	r3, [r4, #26]
 801c678:	8b21      	ldrh	r1, [r4, #24]
 801c67a:	430b      	orrs	r3, r1
 801c67c:	b21b      	sxth	r3, r3
 801c67e:	b15b      	cbz	r3, 801c698 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801c680:	2a00      	cmp	r2, #0
 801c682:	db09      	blt.n	801c698 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801c684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c686:	4293      	cmp	r3, r2
 801c688:	dd06      	ble.n	801c698 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801c68a:	68a2      	ldr	r2, [r4, #8]
 801c68c:	6863      	ldr	r3, [r4, #4]
 801c68e:	429a      	cmp	r2, r3
 801c690:	d308      	bcc.n	801c6a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa8>
 801c692:	2301      	movs	r3, #1
 801c694:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801c698:	f8a4 e014 	strh.w	lr, [r4, #20]
 801c69c:	82e5      	strh	r5, [r4, #22]
 801c69e:	2300      	movs	r3, #0
 801c6a0:	8323      	strh	r3, [r4, #24]
 801c6a2:	e0d3      	b.n	801c84c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 801c6a4:	f104 0314 	add.w	r3, r4, #20
 801c6a8:	6922      	ldr	r2, [r4, #16]
 801c6aa:	cb03      	ldmia	r3!, {r0, r1}
 801c6ac:	6010      	str	r0, [r2, #0]
 801c6ae:	6051      	str	r1, [r2, #4]
 801c6b0:	6923      	ldr	r3, [r4, #16]
 801c6b2:	3308      	adds	r3, #8
 801c6b4:	6123      	str	r3, [r4, #16]
 801c6b6:	68a3      	ldr	r3, [r4, #8]
 801c6b8:	3301      	adds	r3, #1
 801c6ba:	60a3      	str	r3, [r4, #8]
 801c6bc:	e7ec      	b.n	801c698 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801c6be:	9b05      	ldr	r3, [sp, #20]
 801c6c0:	114f      	asrs	r7, r1, #5
 801c6c2:	f001 011f 	and.w	r1, r1, #31
 801c6c6:	f003 031f 	and.w	r3, r3, #31
 801c6ca:	4577      	cmp	r7, lr
 801c6cc:	9304      	str	r3, [sp, #16]
 801c6ce:	9b03      	ldr	r3, [sp, #12]
 801c6d0:	eba3 020c 	sub.w	r2, r3, ip
 801c6d4:	d10b      	bne.n	801c6ee <_ZN8touchgfx7Outline10renderLineEiiii+0xf2>
 801c6d6:	8b23      	ldrh	r3, [r4, #24]
 801c6d8:	4413      	add	r3, r2
 801c6da:	8323      	strh	r3, [r4, #24]
 801c6dc:	9b04      	ldr	r3, [sp, #16]
 801c6de:	4419      	add	r1, r3
 801c6e0:	8b63      	ldrh	r3, [r4, #26]
 801c6e2:	fb02 3201 	mla	r2, r2, r1, r3
 801c6e6:	8362      	strh	r2, [r4, #26]
 801c6e8:	b013      	add	sp, #76	; 0x4c
 801c6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ee:	f1ba 0f00 	cmp.w	sl, #0
 801c6f2:	8b20      	ldrh	r0, [r4, #24]
 801c6f4:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801c6f8:	bfaf      	iteee	ge
 801c6fa:	f1c1 0320 	rsbge	r3, r1, #32
 801c6fe:	434a      	mullt	r2, r1
 801c700:	f1ca 0a00 	rsblt	sl, sl, #0
 801c704:	2300      	movlt	r3, #0
 801c706:	bfa3      	ittte	ge
 801c708:	435a      	mulge	r2, r3
 801c70a:	2320      	movge	r3, #32
 801c70c:	f04f 0b01 	movge.w	fp, #1
 801c710:	f04f 3bff 	movlt.w	fp, #4294967295
 801c714:	9302      	str	r3, [sp, #8]
 801c716:	9b02      	ldr	r3, [sp, #8]
 801c718:	fb92 f6fa 	sdiv	r6, r2, sl
 801c71c:	fb0a 2216 	mls	r2, sl, r6, r2
 801c720:	4419      	add	r1, r3
 801c722:	8b63      	ldrh	r3, [r4, #26]
 801c724:	2a00      	cmp	r2, #0
 801c726:	bfbc      	itt	lt
 801c728:	f106 36ff 	addlt.w	r6, r6, #4294967295
 801c72c:	4452      	addlt	r2, sl
 801c72e:	fb06 3101 	mla	r1, r6, r1, r3
 801c732:	4430      	add	r0, r6
 801c734:	b20b      	sxth	r3, r1
 801c736:	b200      	sxth	r0, r0
 801c738:	9301      	str	r3, [sp, #4]
 801c73a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c73e:	8320      	strh	r0, [r4, #24]
 801c740:	8363      	strh	r3, [r4, #26]
 801c742:	eb07 030b 	add.w	r3, r7, fp
 801c746:	042f      	lsls	r7, r5, #16
 801c748:	9300      	str	r3, [sp, #0]
 801c74a:	9900      	ldr	r1, [sp, #0]
 801c74c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801c750:	eb01 0907 	add.w	r9, r1, r7
 801c754:	9705      	str	r7, [sp, #20]
 801c756:	eb08 4803 	add.w	r8, r8, r3, lsl #16
 801c75a:	45c1      	cmp	r9, r8
 801c75c:	d015      	beq.n	801c78a <_ZN8touchgfx7Outline10renderLineEiiii+0x18e>
 801c75e:	9901      	ldr	r1, [sp, #4]
 801c760:	4301      	orrs	r1, r0
 801c762:	d00b      	beq.n	801c77c <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 801c764:	2b00      	cmp	r3, #0
 801c766:	db09      	blt.n	801c77c <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 801c768:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c76a:	4299      	cmp	r1, r3
 801c76c:	dd06      	ble.n	801c77c <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 801c76e:	68a1      	ldr	r1, [r4, #8]
 801c770:	6863      	ldr	r3, [r4, #4]
 801c772:	4299      	cmp	r1, r3
 801c774:	d36c      	bcc.n	801c850 <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 801c776:	2301      	movs	r3, #1
 801c778:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801c77c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c780:	82e5      	strh	r5, [r4, #22]
 801c782:	82a3      	strh	r3, [r4, #20]
 801c784:	2300      	movs	r3, #0
 801c786:	8323      	strh	r3, [r4, #24]
 801c788:	8363      	strh	r3, [r4, #26]
 801c78a:	9900      	ldr	r1, [sp, #0]
 801c78c:	eb0c 0306 	add.w	r3, ip, r6
 801c790:	458e      	cmp	lr, r1
 801c792:	d04e      	beq.n	801c832 <_ZN8touchgfx7Outline10renderLineEiiii+0x236>
 801c794:	9903      	ldr	r1, [sp, #12]
 801c796:	eba2 020a 	sub.w	r2, r2, sl
 801c79a:	1ac9      	subs	r1, r1, r3
 801c79c:	9201      	str	r2, [sp, #4]
 801c79e:	440e      	add	r6, r1
 801c7a0:	0176      	lsls	r6, r6, #5
 801c7a2:	fb96 fcfa 	sdiv	ip, r6, sl
 801c7a6:	fb0a 661c 	mls	r6, sl, ip, r6
 801c7aa:	2e00      	cmp	r6, #0
 801c7ac:	bfbc      	itt	lt
 801c7ae:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801c7b2:	4456      	addlt	r6, sl
 801c7b4:	f10c 0101 	add.w	r1, ip, #1
 801c7b8:	9106      	str	r1, [sp, #24]
 801c7ba:	9a01      	ldr	r2, [sp, #4]
 801c7bc:	8b20      	ldrh	r0, [r4, #24]
 801c7be:	1992      	adds	r2, r2, r6
 801c7c0:	8b61      	ldrh	r1, [r4, #26]
 801c7c2:	9f05      	ldr	r7, [sp, #20]
 801c7c4:	9201      	str	r2, [sp, #4]
 801c7c6:	bf5b      	ittet	pl
 801c7c8:	eba2 020a 	subpl.w	r2, r2, sl
 801c7cc:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 801c7d0:	46e0      	movmi	r8, ip
 801c7d2:	9201      	strpl	r2, [sp, #4]
 801c7d4:	9a00      	ldr	r2, [sp, #0]
 801c7d6:	4440      	add	r0, r8
 801c7d8:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 801c7dc:	4443      	add	r3, r8
 801c7de:	445a      	add	r2, fp
 801c7e0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801c7e4:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801c7e8:	b200      	sxth	r0, r0
 801c7ea:	4417      	add	r7, r2
 801c7ec:	b209      	sxth	r1, r1
 801c7ee:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 801c7f2:	8320      	strh	r0, [r4, #24]
 801c7f4:	8361      	strh	r1, [r4, #26]
 801c7f6:	454f      	cmp	r7, r9
 801c7f8:	9200      	str	r2, [sp, #0]
 801c7fa:	d017      	beq.n	801c82c <_ZN8touchgfx7Outline10renderLineEiiii+0x230>
 801c7fc:	4301      	orrs	r1, r0
 801c7fe:	d00d      	beq.n	801c81c <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 801c800:	f1b8 0f00 	cmp.w	r8, #0
 801c804:	db0a      	blt.n	801c81c <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 801c806:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c808:	4541      	cmp	r1, r8
 801c80a:	dd07      	ble.n	801c81c <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 801c80c:	68a0      	ldr	r0, [r4, #8]
 801c80e:	6861      	ldr	r1, [r4, #4]
 801c810:	4288      	cmp	r0, r1
 801c812:	d32d      	bcc.n	801c870 <_ZN8touchgfx7Outline10renderLineEiiii+0x274>
 801c814:	f04f 0101 	mov.w	r1, #1
 801c818:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801c81c:	f04f 0100 	mov.w	r1, #0
 801c820:	f8bd 2000 	ldrh.w	r2, [sp]
 801c824:	82e5      	strh	r5, [r4, #22]
 801c826:	82a2      	strh	r2, [r4, #20]
 801c828:	8321      	strh	r1, [r4, #24]
 801c82a:	8361      	strh	r1, [r4, #26]
 801c82c:	9a00      	ldr	r2, [sp, #0]
 801c82e:	4596      	cmp	lr, r2
 801c830:	d1c3      	bne.n	801c7ba <_ZN8touchgfx7Outline10renderLineEiiii+0x1be>
 801c832:	9a03      	ldr	r2, [sp, #12]
 801c834:	9902      	ldr	r1, [sp, #8]
 801c836:	1ad3      	subs	r3, r2, r3
 801c838:	8b22      	ldrh	r2, [r4, #24]
 801c83a:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 801c83e:	441a      	add	r2, r3
 801c840:	8322      	strh	r2, [r4, #24]
 801c842:	9a04      	ldr	r2, [sp, #16]
 801c844:	3220      	adds	r2, #32
 801c846:	1a52      	subs	r2, r2, r1
 801c848:	fb03 e302 	mla	r3, r3, r2, lr
 801c84c:	8363      	strh	r3, [r4, #26]
 801c84e:	e74b      	b.n	801c6e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801c850:	f104 0314 	add.w	r3, r4, #20
 801c854:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801c858:	cb03      	ldmia	r3!, {r0, r1}
 801c85a:	f8c8 0000 	str.w	r0, [r8]
 801c85e:	f8c8 1004 	str.w	r1, [r8, #4]
 801c862:	6923      	ldr	r3, [r4, #16]
 801c864:	3308      	adds	r3, #8
 801c866:	6123      	str	r3, [r4, #16]
 801c868:	68a3      	ldr	r3, [r4, #8]
 801c86a:	3301      	adds	r3, #1
 801c86c:	60a3      	str	r3, [r4, #8]
 801c86e:	e785      	b.n	801c77c <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 801c870:	f104 0814 	add.w	r8, r4, #20
 801c874:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c878:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801c87c:	f8c9 0000 	str.w	r0, [r9]
 801c880:	f8c9 1004 	str.w	r1, [r9, #4]
 801c884:	6921      	ldr	r1, [r4, #16]
 801c886:	3108      	adds	r1, #8
 801c888:	6121      	str	r1, [r4, #16]
 801c88a:	68a1      	ldr	r1, [r4, #8]
 801c88c:	3101      	adds	r1, #1
 801c88e:	60a1      	str	r1, [r4, #8]
 801c890:	e7c4      	b.n	801c81c <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 801c892:	1a83      	subs	r3, r0, r2
 801c894:	9301      	str	r3, [sp, #4]
 801c896:	f1ba 0f00 	cmp.w	sl, #0
 801c89a:	f040 8095 	bne.w	801c9c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3cc>
 801c89e:	9a01      	ldr	r2, [sp, #4]
 801c8a0:	004b      	lsls	r3, r1, #1
 801c8a2:	114e      	asrs	r6, r1, #5
 801c8a4:	8b21      	ldrh	r1, [r4, #24]
 801c8a6:	2a00      	cmp	r2, #0
 801c8a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c8ac:	8b62      	ldrh	r2, [r4, #26]
 801c8ae:	bfa6      	itte	ge
 801c8b0:	f04f 0a20 	movge.w	sl, #32
 801c8b4:	f04f 0801 	movge.w	r8, #1
 801c8b8:	f04f 38ff 	movlt.w	r8, #4294967295
 801c8bc:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801c8c0:	ebaa 0c0c 	sub.w	ip, sl, ip
 801c8c4:	4461      	add	r1, ip
 801c8c6:	fb0c 2c03 	mla	ip, ip, r3, r2
 801c8ca:	eb08 0205 	add.w	r2, r8, r5
 801c8ce:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 801c8d2:	b209      	sxth	r1, r1
 801c8d4:	eb06 4702 	add.w	r7, r6, r2, lsl #16
 801c8d8:	eb05 4500 	add.w	r5, r5, r0, lsl #16
 801c8dc:	8321      	strh	r1, [r4, #24]
 801c8de:	fa0f fc8c 	sxth.w	ip, ip
 801c8e2:	42af      	cmp	r7, r5
 801c8e4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801c8e8:	d013      	beq.n	801c912 <_ZN8touchgfx7Outline10renderLineEiiii+0x316>
 801c8ea:	ea51 010c 	orrs.w	r1, r1, ip
 801c8ee:	d00b      	beq.n	801c908 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 801c8f0:	2800      	cmp	r0, #0
 801c8f2:	db09      	blt.n	801c908 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 801c8f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c8f6:	4281      	cmp	r1, r0
 801c8f8:	dd06      	ble.n	801c908 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 801c8fa:	68a0      	ldr	r0, [r4, #8]
 801c8fc:	6861      	ldr	r1, [r4, #4]
 801c8fe:	4288      	cmp	r0, r1
 801c900:	d339      	bcc.n	801c976 <_ZN8touchgfx7Outline10renderLineEiiii+0x37a>
 801c902:	2101      	movs	r1, #1
 801c904:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801c908:	2100      	movs	r1, #0
 801c90a:	82a6      	strh	r6, [r4, #20]
 801c90c:	82e2      	strh	r2, [r4, #22]
 801c90e:	8321      	strh	r1, [r4, #24]
 801c910:	8361      	strh	r1, [r4, #26]
 801c912:	ea4f 054a 	mov.w	r5, sl, lsl #1
 801c916:	f04f 0c00 	mov.w	ip, #0
 801c91a:	f04f 0b01 	mov.w	fp, #1
 801c91e:	3d20      	subs	r5, #32
 801c920:	fb05 f703 	mul.w	r7, r5, r3
 801c924:	b22d      	sxth	r5, r5
 801c926:	b23f      	sxth	r7, r7
 801c928:	ea45 0107 	orr.w	r1, r5, r7
 801c92c:	9100      	str	r1, [sp, #0]
 801c92e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c930:	428a      	cmp	r2, r1
 801c932:	d03e      	beq.n	801c9b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b6>
 801c934:	4442      	add	r2, r8
 801c936:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801c93a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801c93e:	eb06 4e02 	add.w	lr, r6, r2, lsl #16
 801c942:	8325      	strh	r5, [r4, #24]
 801c944:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 801c948:	8367      	strh	r7, [r4, #26]
 801c94a:	4586      	cmp	lr, r0
 801c94c:	d0ef      	beq.n	801c92e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801c94e:	9800      	ldr	r0, [sp, #0]
 801c950:	b150      	cbz	r0, 801c968 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 801c952:	2900      	cmp	r1, #0
 801c954:	db08      	blt.n	801c968 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 801c956:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801c958:	4288      	cmp	r0, r1
 801c95a:	dd05      	ble.n	801c968 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 801c95c:	68a0      	ldr	r0, [r4, #8]
 801c95e:	6861      	ldr	r1, [r4, #4]
 801c960:	4288      	cmp	r0, r1
 801c962:	d315      	bcc.n	801c990 <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 801c964:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 801c968:	82a6      	strh	r6, [r4, #20]
 801c96a:	82e2      	strh	r2, [r4, #22]
 801c96c:	f8a4 c018 	strh.w	ip, [r4, #24]
 801c970:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801c974:	e7db      	b.n	801c92e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801c976:	f104 0514 	add.w	r5, r4, #20
 801c97a:	6927      	ldr	r7, [r4, #16]
 801c97c:	cd03      	ldmia	r5!, {r0, r1}
 801c97e:	6038      	str	r0, [r7, #0]
 801c980:	6079      	str	r1, [r7, #4]
 801c982:	6921      	ldr	r1, [r4, #16]
 801c984:	3108      	adds	r1, #8
 801c986:	6121      	str	r1, [r4, #16]
 801c988:	68a1      	ldr	r1, [r4, #8]
 801c98a:	3101      	adds	r1, #1
 801c98c:	60a1      	str	r1, [r4, #8]
 801c98e:	e7bb      	b.n	801c908 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 801c990:	f104 0e14 	add.w	lr, r4, #20
 801c994:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801c998:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801c99c:	f8c9 0000 	str.w	r0, [r9]
 801c9a0:	f8c9 1004 	str.w	r1, [r9, #4]
 801c9a4:	6921      	ldr	r1, [r4, #16]
 801c9a6:	3108      	adds	r1, #8
 801c9a8:	6121      	str	r1, [r4, #16]
 801c9aa:	68a1      	ldr	r1, [r4, #8]
 801c9ac:	3101      	adds	r1, #1
 801c9ae:	60a1      	str	r1, [r4, #8]
 801c9b0:	e7da      	b.n	801c968 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 801c9b2:	9a03      	ldr	r2, [sp, #12]
 801c9b4:	8b61      	ldrh	r1, [r4, #26]
 801c9b6:	f1a2 0e20 	sub.w	lr, r2, #32
 801c9ba:	8b22      	ldrh	r2, [r4, #24]
 801c9bc:	44d6      	add	lr, sl
 801c9be:	4472      	add	r2, lr
 801c9c0:	fb0e 1303 	mla	r3, lr, r3, r1
 801c9c4:	8322      	strh	r2, [r4, #24]
 801c9c6:	e741      	b.n	801c84c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 801c9c8:	9b01      	ldr	r3, [sp, #4]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	db40      	blt.n	801ca50 <_ZN8touchgfx7Outline10renderLineEiiii+0x454>
 801c9ce:	2201      	movs	r2, #1
 801c9d0:	f1cc 0320 	rsb	r3, ip, #32
 801c9d4:	920a      	str	r2, [sp, #40]	; 0x28
 801c9d6:	2220      	movs	r2, #32
 801c9d8:	fb0a f303 	mul.w	r3, sl, r3
 801c9dc:	9202      	str	r2, [sp, #8]
 801c9de:	9a01      	ldr	r2, [sp, #4]
 801c9e0:	fb93 f6f2 	sdiv	r6, r3, r2
 801c9e4:	fb02 3316 	mls	r3, r2, r6, r3
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	9308      	str	r3, [sp, #32]
 801c9ec:	bfbc      	itt	lt
 801c9ee:	f106 36ff 	addlt.w	r6, r6, #4294967295
 801c9f2:	189b      	addlt	r3, r3, r2
 801c9f4:	eb06 0b01 	add.w	fp, r6, r1
 801c9f8:	bfb8      	it	lt
 801c9fa:	9308      	strlt	r3, [sp, #32]
 801c9fc:	ea4f 136b 	mov.w	r3, fp, asr #5
 801ca00:	9304      	str	r3, [sp, #16]
 801ca02:	9b02      	ldr	r3, [sp, #8]
 801ca04:	4563      	cmp	r3, ip
 801ca06:	d13a      	bne.n	801ca7e <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801ca08:	9b04      	ldr	r3, [sp, #16]
 801ca0a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801ca0e:	eb03 4105 	add.w	r1, r3, r5, lsl #16
 801ca12:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801ca16:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801ca1a:	4299      	cmp	r1, r3
 801ca1c:	d046      	beq.n	801caac <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 801ca1e:	8b63      	ldrh	r3, [r4, #26]
 801ca20:	8b21      	ldrh	r1, [r4, #24]
 801ca22:	430b      	orrs	r3, r1
 801ca24:	b21b      	sxth	r3, r3
 801ca26:	b15b      	cbz	r3, 801ca40 <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 801ca28:	2a00      	cmp	r2, #0
 801ca2a:	db09      	blt.n	801ca40 <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 801ca2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ca2e:	4293      	cmp	r3, r2
 801ca30:	dd06      	ble.n	801ca40 <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 801ca32:	68a2      	ldr	r2, [r4, #8]
 801ca34:	6863      	ldr	r3, [r4, #4]
 801ca36:	429a      	cmp	r2, r3
 801ca38:	d314      	bcc.n	801ca64 <_ZN8touchgfx7Outline10renderLineEiiii+0x468>
 801ca3a:	2301      	movs	r3, #1
 801ca3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801ca40:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ca44:	82e5      	strh	r5, [r4, #22]
 801ca46:	82a3      	strh	r3, [r4, #20]
 801ca48:	2300      	movs	r3, #0
 801ca4a:	8323      	strh	r3, [r4, #24]
 801ca4c:	8363      	strh	r3, [r4, #26]
 801ca4e:	e02d      	b.n	801caac <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 801ca50:	9a01      	ldr	r2, [sp, #4]
 801ca52:	fb0a f30c 	mul.w	r3, sl, ip
 801ca56:	4252      	negs	r2, r2
 801ca58:	9201      	str	r2, [sp, #4]
 801ca5a:	f04f 32ff 	mov.w	r2, #4294967295
 801ca5e:	920a      	str	r2, [sp, #40]	; 0x28
 801ca60:	2200      	movs	r2, #0
 801ca62:	e7bb      	b.n	801c9dc <_ZN8touchgfx7Outline10renderLineEiiii+0x3e0>
 801ca64:	f104 0314 	add.w	r3, r4, #20
 801ca68:	6922      	ldr	r2, [r4, #16]
 801ca6a:	cb03      	ldmia	r3!, {r0, r1}
 801ca6c:	6010      	str	r0, [r2, #0]
 801ca6e:	6051      	str	r1, [r2, #4]
 801ca70:	6923      	ldr	r3, [r4, #16]
 801ca72:	3308      	adds	r3, #8
 801ca74:	6123      	str	r3, [r4, #16]
 801ca76:	68a3      	ldr	r3, [r4, #8]
 801ca78:	3301      	adds	r3, #1
 801ca7a:	60a3      	str	r3, [r4, #8]
 801ca7c:	e7e0      	b.n	801ca40 <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 801ca7e:	f00b 021f 	and.w	r2, fp, #31
 801ca82:	ea4f 1e61 	mov.w	lr, r1, asr #5
 801ca86:	f001 031f 	and.w	r3, r1, #31
 801ca8a:	9209      	str	r2, [sp, #36]	; 0x24
 801ca8c:	9a04      	ldr	r2, [sp, #16]
 801ca8e:	4596      	cmp	lr, r2
 801ca90:	9a02      	ldr	r2, [sp, #8]
 801ca92:	eba2 020c 	sub.w	r2, r2, ip
 801ca96:	f040 80f6 	bne.w	801cc86 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 801ca9a:	8b21      	ldrh	r1, [r4, #24]
 801ca9c:	4411      	add	r1, r2
 801ca9e:	8321      	strh	r1, [r4, #24]
 801caa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801caa2:	440b      	add	r3, r1
 801caa4:	8b61      	ldrh	r1, [r4, #26]
 801caa6:	fb02 1203 	mla	r2, r2, r3, r1
 801caaa:	8362      	strh	r2, [r4, #26]
 801caac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801caae:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801cab2:	442b      	add	r3, r5
 801cab4:	9300      	str	r3, [sp, #0]
 801cab6:	9a00      	ldr	r2, [sp, #0]
 801cab8:	9b04      	ldr	r3, [sp, #16]
 801caba:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 801cabe:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801cac2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801cac6:	4298      	cmp	r0, r3
 801cac8:	d01a      	beq.n	801cb00 <_ZN8touchgfx7Outline10renderLineEiiii+0x504>
 801caca:	8b63      	ldrh	r3, [r4, #26]
 801cacc:	8b20      	ldrh	r0, [r4, #24]
 801cace:	4303      	orrs	r3, r0
 801cad0:	b21b      	sxth	r3, r3
 801cad2:	b163      	cbz	r3, 801caee <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801cad4:	2900      	cmp	r1, #0
 801cad6:	db0a      	blt.n	801caee <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801cad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cada:	428b      	cmp	r3, r1
 801cadc:	dd07      	ble.n	801caee <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801cade:	68a1      	ldr	r1, [r4, #8]
 801cae0:	6863      	ldr	r3, [r4, #4]
 801cae2:	4299      	cmp	r1, r3
 801cae4:	f0c0 819a 	bcc.w	801ce1c <_ZN8touchgfx7Outline10renderLineEiiii+0x820>
 801cae8:	2301      	movs	r3, #1
 801caea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801caee:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801caf2:	82a3      	strh	r3, [r4, #20]
 801caf4:	f8bd 3000 	ldrh.w	r3, [sp]
 801caf8:	82e3      	strh	r3, [r4, #22]
 801cafa:	2300      	movs	r3, #0
 801cafc:	8323      	strh	r3, [r4, #24]
 801cafe:	8363      	strh	r3, [r4, #26]
 801cb00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb02:	9a00      	ldr	r2, [sp, #0]
 801cb04:	4293      	cmp	r3, r2
 801cb06:	f000 8090 	beq.w	801cc2a <_ZN8touchgfx7Outline10renderLineEiiii+0x62e>
 801cb0a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 801cb0e:	9901      	ldr	r1, [sp, #4]
 801cb10:	9801      	ldr	r0, [sp, #4]
 801cb12:	fb93 f1f1 	sdiv	r1, r3, r1
 801cb16:	fb00 3311 	mls	r3, r0, r1, r3
 801cb1a:	9106      	str	r1, [sp, #24]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	9307      	str	r3, [sp, #28]
 801cb20:	da04      	bge.n	801cb2c <_ZN8touchgfx7Outline10renderLineEiiii+0x530>
 801cb22:	1e4b      	subs	r3, r1, #1
 801cb24:	9306      	str	r3, [sp, #24]
 801cb26:	9b07      	ldr	r3, [sp, #28]
 801cb28:	4403      	add	r3, r0
 801cb2a:	9307      	str	r3, [sp, #28]
 801cb2c:	9b08      	ldr	r3, [sp, #32]
 801cb2e:	f04f 0e00 	mov.w	lr, #0
 801cb32:	9901      	ldr	r1, [sp, #4]
 801cb34:	1a5b      	subs	r3, r3, r1
 801cb36:	4659      	mov	r1, fp
 801cb38:	9308      	str	r3, [sp, #32]
 801cb3a:	9b02      	ldr	r3, [sp, #8]
 801cb3c:	f1c3 0320 	rsb	r3, r3, #32
 801cb40:	930c      	str	r3, [sp, #48]	; 0x30
 801cb42:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cb44:	9b02      	ldr	r3, [sp, #8]
 801cb46:	1a1b      	subs	r3, r3, r0
 801cb48:	9309      	str	r3, [sp, #36]	; 0x24
 801cb4a:	9807      	ldr	r0, [sp, #28]
 801cb4c:	9b08      	ldr	r3, [sp, #32]
 801cb4e:	181b      	adds	r3, r3, r0
 801cb50:	bf58      	it	pl
 801cb52:	9801      	ldrpl	r0, [sp, #4]
 801cb54:	9308      	str	r3, [sp, #32]
 801cb56:	bf54      	ite	pl
 801cb58:	1a1b      	subpl	r3, r3, r0
 801cb5a:	9d06      	ldrmi	r5, [sp, #24]
 801cb5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cb5e:	bf5e      	ittt	pl
 801cb60:	9308      	strpl	r3, [sp, #32]
 801cb62:	9b06      	ldrpl	r3, [sp, #24]
 801cb64:	1c5d      	addpl	r5, r3, #1
 801cb66:	44ab      	add	fp, r5
 801cb68:	ea4f 136b 	mov.w	r3, fp, asr #5
 801cb6c:	9304      	str	r3, [sp, #16]
 801cb6e:	9b02      	ldr	r3, [sp, #8]
 801cb70:	4283      	cmp	r3, r0
 801cb72:	f040 816d 	bne.w	801ce50 <_ZN8touchgfx7Outline10renderLineEiiii+0x854>
 801cb76:	9b04      	ldr	r3, [sp, #16]
 801cb78:	9a00      	ldr	r2, [sp, #0]
 801cb7a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801cb7e:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 801cb82:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801cb86:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801cb8a:	4298      	cmp	r0, r3
 801cb8c:	d01c      	beq.n	801cbc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 801cb8e:	8b63      	ldrh	r3, [r4, #26]
 801cb90:	8b20      	ldrh	r0, [r4, #24]
 801cb92:	4303      	orrs	r3, r0
 801cb94:	b21b      	sxth	r3, r3
 801cb96:	b16b      	cbz	r3, 801cbb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 801cb98:	2900      	cmp	r1, #0
 801cb9a:	db0b      	blt.n	801cbb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 801cb9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cb9e:	428b      	cmp	r3, r1
 801cba0:	dd08      	ble.n	801cbb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 801cba2:	68a1      	ldr	r1, [r4, #8]
 801cba4:	6863      	ldr	r3, [r4, #4]
 801cba6:	4299      	cmp	r1, r3
 801cba8:	f0c0 8145 	bcc.w	801ce36 <_ZN8touchgfx7Outline10renderLineEiiii+0x83a>
 801cbac:	f04f 0301 	mov.w	r3, #1
 801cbb0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801cbb4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cbb8:	f8a4 e018 	strh.w	lr, [r4, #24]
 801cbbc:	82a3      	strh	r3, [r4, #20]
 801cbbe:	f8bd 3000 	ldrh.w	r3, [sp]
 801cbc2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801cbc6:	82e3      	strh	r3, [r4, #22]
 801cbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbca:	9a00      	ldr	r2, [sp, #0]
 801cbcc:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801cbd0:	441a      	add	r2, r3
 801cbd2:	9b04      	ldr	r3, [sp, #16]
 801cbd4:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 801cbd8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801cbdc:	9200      	str	r2, [sp, #0]
 801cbde:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801cbe2:	4298      	cmp	r0, r3
 801cbe4:	d01c      	beq.n	801cc20 <_ZN8touchgfx7Outline10renderLineEiiii+0x624>
 801cbe6:	8b63      	ldrh	r3, [r4, #26]
 801cbe8:	8b20      	ldrh	r0, [r4, #24]
 801cbea:	4303      	orrs	r3, r0
 801cbec:	b21b      	sxth	r3, r3
 801cbee:	b16b      	cbz	r3, 801cc0c <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 801cbf0:	2900      	cmp	r1, #0
 801cbf2:	db0b      	blt.n	801cc0c <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 801cbf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cbf6:	428b      	cmp	r3, r1
 801cbf8:	dd08      	ble.n	801cc0c <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 801cbfa:	68a1      	ldr	r1, [r4, #8]
 801cbfc:	6863      	ldr	r3, [r4, #4]
 801cbfe:	4299      	cmp	r1, r3
 801cc00:	f0c0 820d 	bcc.w	801d01e <_ZN8touchgfx7Outline10renderLineEiiii+0xa22>
 801cc04:	f04f 0301 	mov.w	r3, #1
 801cc08:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801cc0c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cc10:	f8a4 e018 	strh.w	lr, [r4, #24]
 801cc14:	82a3      	strh	r3, [r4, #20]
 801cc16:	f8bd 3000 	ldrh.w	r3, [sp]
 801cc1a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801cc1e:	82e3      	strh	r3, [r4, #22]
 801cc20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc22:	4659      	mov	r1, fp
 801cc24:	9a00      	ldr	r2, [sp, #0]
 801cc26:	4293      	cmp	r3, r2
 801cc28:	d18f      	bne.n	801cb4a <_ZN8touchgfx7Outline10renderLineEiiii+0x54e>
 801cc2a:	9b02      	ldr	r3, [sp, #8]
 801cc2c:	f1c3 0e20 	rsb	lr, r3, #32
 801cc30:	9b05      	ldr	r3, [sp, #20]
 801cc32:	ea4f 1c63 	mov.w	ip, r3, asr #5
 801cc36:	9b03      	ldr	r3, [sp, #12]
 801cc38:	4573      	cmp	r3, lr
 801cc3a:	f040 820a 	bne.w	801d052 <_ZN8touchgfx7Outline10renderLineEiiii+0xa56>
 801cc3e:	9b00      	ldr	r3, [sp, #0]
 801cc40:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801cc44:	eb0c 4003 	add.w	r0, ip, r3, lsl #16
 801cc48:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801cc4c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801cc50:	4298      	cmp	r0, r3
 801cc52:	f43f ad49 	beq.w	801c6e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801cc56:	8b63      	ldrh	r3, [r4, #26]
 801cc58:	8b20      	ldrh	r0, [r4, #24]
 801cc5a:	4303      	orrs	r3, r0
 801cc5c:	b21b      	sxth	r3, r3
 801cc5e:	b163      	cbz	r3, 801cc7a <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801cc60:	2900      	cmp	r1, #0
 801cc62:	db0a      	blt.n	801cc7a <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801cc64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cc66:	428b      	cmp	r3, r1
 801cc68:	dd07      	ble.n	801cc7a <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801cc6a:	68a1      	ldr	r1, [r4, #8]
 801cc6c:	6863      	ldr	r3, [r4, #4]
 801cc6e:	4299      	cmp	r1, r3
 801cc70:	f0c0 81e2 	bcc.w	801d038 <_ZN8touchgfx7Outline10renderLineEiiii+0xa3c>
 801cc74:	2301      	movs	r3, #1
 801cc76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801cc7a:	f8bd 3000 	ldrh.w	r3, [sp]
 801cc7e:	f8a4 c014 	strh.w	ip, [r4, #20]
 801cc82:	82e3      	strh	r3, [r4, #22]
 801cc84:	e50b      	b.n	801c69e <_ZN8touchgfx7Outline10renderLineEiiii+0xa2>
 801cc86:	2e00      	cmp	r6, #0
 801cc88:	f2c0 80a0 	blt.w	801cdcc <_ZN8touchgfx7Outline10renderLineEiiii+0x7d0>
 801cc8c:	f1c3 0120 	rsb	r1, r3, #32
 801cc90:	434a      	muls	r2, r1
 801cc92:	2101      	movs	r1, #1
 801cc94:	9107      	str	r1, [sp, #28]
 801cc96:	2120      	movs	r1, #32
 801cc98:	9106      	str	r1, [sp, #24]
 801cc9a:	9906      	ldr	r1, [sp, #24]
 801cc9c:	8b20      	ldrh	r0, [r4, #24]
 801cc9e:	440b      	add	r3, r1
 801cca0:	8b61      	ldrh	r1, [r4, #26]
 801cca2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801cca6:	fb92 f7f6 	sdiv	r7, r2, r6
 801ccaa:	fb06 2217 	mls	r2, r6, r7, r2
 801ccae:	2a00      	cmp	r2, #0
 801ccb0:	bfbc      	itt	lt
 801ccb2:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801ccb6:	1992      	addlt	r2, r2, r6
 801ccb8:	fb07 1303 	mla	r3, r7, r3, r1
 801ccbc:	9907      	ldr	r1, [sp, #28]
 801ccbe:	4438      	add	r0, r7
 801ccc0:	b21b      	sxth	r3, r3
 801ccc2:	448e      	add	lr, r1
 801ccc4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801ccc8:	b200      	sxth	r0, r0
 801ccca:	9300      	str	r3, [sp, #0]
 801cccc:	f8bd 3000 	ldrh.w	r3, [sp]
 801ccd0:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 801ccd4:	8320      	strh	r0, [r4, #24]
 801ccd6:	8363      	strh	r3, [r4, #26]
 801ccd8:	042b      	lsls	r3, r5, #16
 801ccda:	eb0e 0903 	add.w	r9, lr, r3
 801ccde:	930c      	str	r3, [sp, #48]	; 0x30
 801cce0:	45c1      	cmp	r9, r8
 801cce2:	d014      	beq.n	801cd0e <_ZN8touchgfx7Outline10renderLineEiiii+0x712>
 801cce4:	9b00      	ldr	r3, [sp, #0]
 801cce6:	4303      	orrs	r3, r0
 801cce8:	d00b      	beq.n	801cd02 <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 801ccea:	2900      	cmp	r1, #0
 801ccec:	db09      	blt.n	801cd02 <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 801ccee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ccf0:	428b      	cmp	r3, r1
 801ccf2:	dd06      	ble.n	801cd02 <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 801ccf4:	68a1      	ldr	r1, [r4, #8]
 801ccf6:	6863      	ldr	r3, [r4, #4]
 801ccf8:	4299      	cmp	r1, r3
 801ccfa:	d36e      	bcc.n	801cdda <_ZN8touchgfx7Outline10renderLineEiiii+0x7de>
 801ccfc:	2301      	movs	r3, #1
 801ccfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801cd02:	2300      	movs	r3, #0
 801cd04:	f8a4 e014 	strh.w	lr, [r4, #20]
 801cd08:	82e5      	strh	r5, [r4, #22]
 801cd0a:	8323      	strh	r3, [r4, #24]
 801cd0c:	8363      	strh	r3, [r4, #26]
 801cd0e:	9904      	ldr	r1, [sp, #16]
 801cd10:	eb0c 0307 	add.w	r3, ip, r7
 801cd14:	4571      	cmp	r1, lr
 801cd16:	d04b      	beq.n	801cdb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b4>
 801cd18:	9902      	ldr	r1, [sp, #8]
 801cd1a:	1b92      	subs	r2, r2, r6
 801cd1c:	1ac9      	subs	r1, r1, r3
 801cd1e:	9200      	str	r2, [sp, #0]
 801cd20:	440f      	add	r7, r1
 801cd22:	017f      	lsls	r7, r7, #5
 801cd24:	fb97 fcf6 	sdiv	ip, r7, r6
 801cd28:	fb06 771c 	mls	r7, r6, ip, r7
 801cd2c:	2f00      	cmp	r7, #0
 801cd2e:	bfbc      	itt	lt
 801cd30:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801cd34:	19bf      	addlt	r7, r7, r6
 801cd36:	f10c 0101 	add.w	r1, ip, #1
 801cd3a:	910d      	str	r1, [sp, #52]	; 0x34
 801cd3c:	9a00      	ldr	r2, [sp, #0]
 801cd3e:	8b20      	ldrh	r0, [r4, #24]
 801cd40:	19d2      	adds	r2, r2, r7
 801cd42:	8b61      	ldrh	r1, [r4, #26]
 801cd44:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801cd48:	9200      	str	r2, [sp, #0]
 801cd4a:	bf5b      	ittet	pl
 801cd4c:	1b92      	subpl	r2, r2, r6
 801cd4e:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 801cd52:	46e0      	movmi	r8, ip
 801cd54:	9200      	strpl	r2, [sp, #0]
 801cd56:	9a07      	ldr	r2, [sp, #28]
 801cd58:	4440      	add	r0, r8
 801cd5a:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 801cd5e:	4443      	add	r3, r8
 801cd60:	4496      	add	lr, r2
 801cd62:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801cd66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cd68:	b200      	sxth	r0, r0
 801cd6a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 801cd6e:	4472      	add	r2, lr
 801cd70:	b209      	sxth	r1, r1
 801cd72:	8320      	strh	r0, [r4, #24]
 801cd74:	454a      	cmp	r2, r9
 801cd76:	8361      	strh	r1, [r4, #26]
 801cd78:	d017      	beq.n	801cdaa <_ZN8touchgfx7Outline10renderLineEiiii+0x7ae>
 801cd7a:	ea50 0201 	orrs.w	r2, r0, r1
 801cd7e:	d00d      	beq.n	801cd9c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801cd80:	f1b8 0f00 	cmp.w	r8, #0
 801cd84:	db0a      	blt.n	801cd9c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801cd86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cd88:	4541      	cmp	r1, r8
 801cd8a:	dd07      	ble.n	801cd9c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801cd8c:	68a0      	ldr	r0, [r4, #8]
 801cd8e:	6861      	ldr	r1, [r4, #4]
 801cd90:	4288      	cmp	r0, r1
 801cd92:	d332      	bcc.n	801cdfa <_ZN8touchgfx7Outline10renderLineEiiii+0x7fe>
 801cd94:	f04f 0201 	mov.w	r2, #1
 801cd98:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801cd9c:	f04f 0200 	mov.w	r2, #0
 801cda0:	f8a4 e014 	strh.w	lr, [r4, #20]
 801cda4:	82e5      	strh	r5, [r4, #22]
 801cda6:	8322      	strh	r2, [r4, #24]
 801cda8:	8362      	strh	r2, [r4, #26]
 801cdaa:	9904      	ldr	r1, [sp, #16]
 801cdac:	4571      	cmp	r1, lr
 801cdae:	d1c5      	bne.n	801cd3c <_ZN8touchgfx7Outline10renderLineEiiii+0x740>
 801cdb0:	9a02      	ldr	r2, [sp, #8]
 801cdb2:	eba2 0c03 	sub.w	ip, r2, r3
 801cdb6:	8b23      	ldrh	r3, [r4, #24]
 801cdb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cdba:	4463      	add	r3, ip
 801cdbc:	3220      	adds	r2, #32
 801cdbe:	8323      	strh	r3, [r4, #24]
 801cdc0:	9b06      	ldr	r3, [sp, #24]
 801cdc2:	1ad2      	subs	r2, r2, r3
 801cdc4:	8b63      	ldrh	r3, [r4, #26]
 801cdc6:	fb0c 3302 	mla	r3, ip, r2, r3
 801cdca:	e63f      	b.n	801ca4c <_ZN8touchgfx7Outline10renderLineEiiii+0x450>
 801cdcc:	f04f 31ff 	mov.w	r1, #4294967295
 801cdd0:	435a      	muls	r2, r3
 801cdd2:	4276      	negs	r6, r6
 801cdd4:	9107      	str	r1, [sp, #28]
 801cdd6:	2100      	movs	r1, #0
 801cdd8:	e75e      	b.n	801cc98 <_ZN8touchgfx7Outline10renderLineEiiii+0x69c>
 801cdda:	f104 0314 	add.w	r3, r4, #20
 801cdde:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801cde2:	cb03      	ldmia	r3!, {r0, r1}
 801cde4:	f8c8 0000 	str.w	r0, [r8]
 801cde8:	f8c8 1004 	str.w	r1, [r8, #4]
 801cdec:	6923      	ldr	r3, [r4, #16]
 801cdee:	3308      	adds	r3, #8
 801cdf0:	6123      	str	r3, [r4, #16]
 801cdf2:	68a3      	ldr	r3, [r4, #8]
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	60a3      	str	r3, [r4, #8]
 801cdf8:	e783      	b.n	801cd02 <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 801cdfa:	f104 0814 	add.w	r8, r4, #20
 801cdfe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ce02:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801ce06:	f8c9 0000 	str.w	r0, [r9]
 801ce0a:	f8c9 1004 	str.w	r1, [r9, #4]
 801ce0e:	6921      	ldr	r1, [r4, #16]
 801ce10:	3108      	adds	r1, #8
 801ce12:	6121      	str	r1, [r4, #16]
 801ce14:	68a1      	ldr	r1, [r4, #8]
 801ce16:	3101      	adds	r1, #1
 801ce18:	60a1      	str	r1, [r4, #8]
 801ce1a:	e7bf      	b.n	801cd9c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801ce1c:	f104 0314 	add.w	r3, r4, #20
 801ce20:	6925      	ldr	r5, [r4, #16]
 801ce22:	cb03      	ldmia	r3!, {r0, r1}
 801ce24:	6028      	str	r0, [r5, #0]
 801ce26:	6069      	str	r1, [r5, #4]
 801ce28:	6923      	ldr	r3, [r4, #16]
 801ce2a:	3308      	adds	r3, #8
 801ce2c:	6123      	str	r3, [r4, #16]
 801ce2e:	68a3      	ldr	r3, [r4, #8]
 801ce30:	3301      	adds	r3, #1
 801ce32:	60a3      	str	r3, [r4, #8]
 801ce34:	e65b      	b.n	801caee <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801ce36:	f104 0314 	add.w	r3, r4, #20
 801ce3a:	6925      	ldr	r5, [r4, #16]
 801ce3c:	cb03      	ldmia	r3!, {r0, r1}
 801ce3e:	6028      	str	r0, [r5, #0]
 801ce40:	6069      	str	r1, [r5, #4]
 801ce42:	6923      	ldr	r3, [r4, #16]
 801ce44:	3308      	adds	r3, #8
 801ce46:	6123      	str	r3, [r4, #16]
 801ce48:	68a3      	ldr	r3, [r4, #8]
 801ce4a:	3301      	adds	r3, #1
 801ce4c:	60a3      	str	r3, [r4, #8]
 801ce4e:	e6b1      	b.n	801cbb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 801ce50:	f00b 031f 	and.w	r3, fp, #31
 801ce54:	114f      	asrs	r7, r1, #5
 801ce56:	f001 011f 	and.w	r1, r1, #31
 801ce5a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ce5c:	9b04      	ldr	r3, [sp, #16]
 801ce5e:	429f      	cmp	r7, r3
 801ce60:	d10a      	bne.n	801ce78 <_ZN8touchgfx7Outline10renderLineEiiii+0x87c>
 801ce62:	8b23      	ldrh	r3, [r4, #24]
 801ce64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce66:	4403      	add	r3, r0
 801ce68:	8323      	strh	r3, [r4, #24]
 801ce6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce6c:	4419      	add	r1, r3
 801ce6e:	8b63      	ldrh	r3, [r4, #26]
 801ce70:	fb00 3101 	mla	r1, r0, r1, r3
 801ce74:	8361      	strh	r1, [r4, #26]
 801ce76:	e6a7      	b.n	801cbc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 801ce78:	2d00      	cmp	r5, #0
 801ce7a:	f2c0 80a6 	blt.w	801cfca <_ZN8touchgfx7Outline10renderLineEiiii+0x9ce>
 801ce7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce80:	f1c1 0320 	rsb	r3, r1, #32
 801ce84:	4343      	muls	r3, r0
 801ce86:	2001      	movs	r0, #1
 801ce88:	900e      	str	r0, [sp, #56]	; 0x38
 801ce8a:	2020      	movs	r0, #32
 801ce8c:	900d      	str	r0, [sp, #52]	; 0x34
 801ce8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce90:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 801ce94:	4411      	add	r1, r2
 801ce96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ce98:	8b20      	ldrh	r0, [r4, #24]
 801ce9a:	4417      	add	r7, r2
 801ce9c:	9a00      	ldr	r2, [sp, #0]
 801ce9e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801cea2:	0412      	lsls	r2, r2, #16
 801cea4:	fb93 f6f5 	sdiv	r6, r3, r5
 801cea8:	fb05 3316 	mls	r3, r5, r6, r3
 801ceac:	eb07 0902 	add.w	r9, r7, r2
 801ceb0:	9210      	str	r2, [sp, #64]	; 0x40
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	bfbc      	itt	lt
 801ceb6:	f106 36ff 	addlt.w	r6, r6, #4294967295
 801ceba:	195b      	addlt	r3, r3, r5
 801cebc:	fb06 c101 	mla	r1, r6, r1, ip
 801cec0:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 801cec4:	4430      	add	r0, r6
 801cec6:	eb08 480c 	add.w	r8, r8, ip, lsl #16
 801ceca:	b200      	sxth	r0, r0
 801cecc:	b209      	sxth	r1, r1
 801cece:	45c1      	cmp	r9, r8
 801ced0:	8320      	strh	r0, [r4, #24]
 801ced2:	8361      	strh	r1, [r4, #26]
 801ced4:	d018      	beq.n	801cf08 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 801ced6:	ea50 0201 	orrs.w	r2, r0, r1
 801ceda:	d00d      	beq.n	801cef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 801cedc:	f1bc 0f00 	cmp.w	ip, #0
 801cee0:	db0a      	blt.n	801cef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 801cee2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cee4:	4561      	cmp	r1, ip
 801cee6:	dd07      	ble.n	801cef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 801cee8:	68a0      	ldr	r0, [r4, #8]
 801ceea:	6861      	ldr	r1, [r4, #4]
 801ceec:	4288      	cmp	r0, r1
 801ceee:	d374      	bcc.n	801cfda <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 801cef0:	f04f 0201 	mov.w	r2, #1
 801cef4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801cef8:	f8bd 2000 	ldrh.w	r2, [sp]
 801cefc:	82a7      	strh	r7, [r4, #20]
 801cefe:	82e2      	strh	r2, [r4, #22]
 801cf00:	f8a4 e018 	strh.w	lr, [r4, #24]
 801cf04:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801cf08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf0a:	eb02 0c06 	add.w	ip, r2, r6
 801cf0e:	9a04      	ldr	r2, [sp, #16]
 801cf10:	42ba      	cmp	r2, r7
 801cf12:	d04a      	beq.n	801cfaa <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 801cf14:	9a02      	ldr	r2, [sp, #8]
 801cf16:	1b5b      	subs	r3, r3, r5
 801cf18:	eba2 010c 	sub.w	r1, r2, ip
 801cf1c:	440e      	add	r6, r1
 801cf1e:	0176      	lsls	r6, r6, #5
 801cf20:	fb96 f8f5 	sdiv	r8, r6, r5
 801cf24:	fb05 6618 	mls	r6, r5, r8, r6
 801cf28:	2e00      	cmp	r6, #0
 801cf2a:	bfbc      	itt	lt
 801cf2c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801cf30:	1976      	addlt	r6, r6, r5
 801cf32:	f108 0201 	add.w	r2, r8, #1
 801cf36:	9211      	str	r2, [sp, #68]	; 0x44
 801cf38:	199b      	adds	r3, r3, r6
 801cf3a:	8b20      	ldrh	r0, [r4, #24]
 801cf3c:	8b61      	ldrh	r1, [r4, #26]
 801cf3e:	bf54      	ite	pl
 801cf40:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 801cf44:	46c1      	movmi	r9, r8
 801cf46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cf48:	bf58      	it	pl
 801cf4a:	1b5b      	subpl	r3, r3, r5
 801cf4c:	4448      	add	r0, r9
 801cf4e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 801cf52:	4417      	add	r7, r2
 801cf54:	44cc      	add	ip, r9
 801cf56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf58:	b200      	sxth	r0, r0
 801cf5a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 801cf5e:	b209      	sxth	r1, r1
 801cf60:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 801cf64:	443a      	add	r2, r7
 801cf66:	8320      	strh	r0, [r4, #24]
 801cf68:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 801cf6c:	8361      	strh	r1, [r4, #26]
 801cf6e:	4552      	cmp	r2, sl
 801cf70:	d018      	beq.n	801cfa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 801cf72:	ea50 0201 	orrs.w	r2, r0, r1
 801cf76:	d00d      	beq.n	801cf94 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801cf78:	f1b9 0f00 	cmp.w	r9, #0
 801cf7c:	db0a      	blt.n	801cf94 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801cf7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cf80:	4549      	cmp	r1, r9
 801cf82:	dd07      	ble.n	801cf94 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801cf84:	68a0      	ldr	r0, [r4, #8]
 801cf86:	6861      	ldr	r1, [r4, #4]
 801cf88:	4288      	cmp	r0, r1
 801cf8a:	d337      	bcc.n	801cffc <_ZN8touchgfx7Outline10renderLineEiiii+0xa00>
 801cf8c:	f04f 0201 	mov.w	r2, #1
 801cf90:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801cf94:	f8bd 2000 	ldrh.w	r2, [sp]
 801cf98:	82a7      	strh	r7, [r4, #20]
 801cf9a:	82e2      	strh	r2, [r4, #22]
 801cf9c:	f8a4 e018 	strh.w	lr, [r4, #24]
 801cfa0:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801cfa4:	9a04      	ldr	r2, [sp, #16]
 801cfa6:	42ba      	cmp	r2, r7
 801cfa8:	d1c6      	bne.n	801cf38 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 801cfaa:	9b02      	ldr	r3, [sp, #8]
 801cfac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cfae:	eba3 0c0c 	sub.w	ip, r3, ip
 801cfb2:	8b23      	ldrh	r3, [r4, #24]
 801cfb4:	3120      	adds	r1, #32
 801cfb6:	4463      	add	r3, ip
 801cfb8:	8323      	strh	r3, [r4, #24]
 801cfba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cfbc:	1ac9      	subs	r1, r1, r3
 801cfbe:	8b63      	ldrh	r3, [r4, #26]
 801cfc0:	fb0c 3c01 	mla	ip, ip, r1, r3
 801cfc4:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801cfc8:	e5fe      	b.n	801cbc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 801cfca:	f04f 30ff 	mov.w	r0, #4294967295
 801cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfd0:	426d      	negs	r5, r5
 801cfd2:	900e      	str	r0, [sp, #56]	; 0x38
 801cfd4:	2000      	movs	r0, #0
 801cfd6:	434b      	muls	r3, r1
 801cfd8:	e758      	b.n	801ce8c <_ZN8touchgfx7Outline10renderLineEiiii+0x890>
 801cfda:	f104 0c14 	add.w	ip, r4, #20
 801cfde:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801cfe2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 801cfe6:	f8c8 0000 	str.w	r0, [r8]
 801cfea:	f8c8 1004 	str.w	r1, [r8, #4]
 801cfee:	6921      	ldr	r1, [r4, #16]
 801cff0:	3108      	adds	r1, #8
 801cff2:	6121      	str	r1, [r4, #16]
 801cff4:	68a1      	ldr	r1, [r4, #8]
 801cff6:	3101      	adds	r1, #1
 801cff8:	60a1      	str	r1, [r4, #8]
 801cffa:	e77d      	b.n	801cef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 801cffc:	f104 0914 	add.w	r9, r4, #20
 801d000:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d004:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 801d008:	f8ca 0000 	str.w	r0, [sl]
 801d00c:	f8ca 1004 	str.w	r1, [sl, #4]
 801d010:	6921      	ldr	r1, [r4, #16]
 801d012:	3108      	adds	r1, #8
 801d014:	6121      	str	r1, [r4, #16]
 801d016:	68a1      	ldr	r1, [r4, #8]
 801d018:	3101      	adds	r1, #1
 801d01a:	60a1      	str	r1, [r4, #8]
 801d01c:	e7ba      	b.n	801cf94 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801d01e:	f104 0314 	add.w	r3, r4, #20
 801d022:	6925      	ldr	r5, [r4, #16]
 801d024:	cb03      	ldmia	r3!, {r0, r1}
 801d026:	6028      	str	r0, [r5, #0]
 801d028:	6069      	str	r1, [r5, #4]
 801d02a:	6923      	ldr	r3, [r4, #16]
 801d02c:	3308      	adds	r3, #8
 801d02e:	6123      	str	r3, [r4, #16]
 801d030:	68a3      	ldr	r3, [r4, #8]
 801d032:	3301      	adds	r3, #1
 801d034:	60a3      	str	r3, [r4, #8]
 801d036:	e5e9      	b.n	801cc0c <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 801d038:	f104 0314 	add.w	r3, r4, #20
 801d03c:	6925      	ldr	r5, [r4, #16]
 801d03e:	cb03      	ldmia	r3!, {r0, r1}
 801d040:	6028      	str	r0, [r5, #0]
 801d042:	6069      	str	r1, [r5, #4]
 801d044:	6923      	ldr	r3, [r4, #16]
 801d046:	3308      	adds	r3, #8
 801d048:	6123      	str	r3, [r4, #16]
 801d04a:	68a3      	ldr	r3, [r4, #8]
 801d04c:	3301      	adds	r3, #1
 801d04e:	60a3      	str	r3, [r4, #8]
 801d050:	e613      	b.n	801cc7a <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801d052:	9b05      	ldr	r3, [sp, #20]
 801d054:	ea4f 176b 	mov.w	r7, fp, asr #5
 801d058:	f00b 011f 	and.w	r1, fp, #31
 801d05c:	f003 031f 	and.w	r3, r3, #31
 801d060:	4567      	cmp	r7, ip
 801d062:	9302      	str	r3, [sp, #8]
 801d064:	9b03      	ldr	r3, [sp, #12]
 801d066:	eba3 060e 	sub.w	r6, r3, lr
 801d06a:	d10a      	bne.n	801d082 <_ZN8touchgfx7Outline10renderLineEiiii+0xa86>
 801d06c:	8b23      	ldrh	r3, [r4, #24]
 801d06e:	4433      	add	r3, r6
 801d070:	8323      	strh	r3, [r4, #24]
 801d072:	9b02      	ldr	r3, [sp, #8]
 801d074:	4419      	add	r1, r3
 801d076:	8b63      	ldrh	r3, [r4, #26]
 801d078:	fb06 3601 	mla	r6, r6, r1, r3
 801d07c:	8366      	strh	r6, [r4, #26]
 801d07e:	f7ff bb33 	b.w	801c6e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801d082:	9b05      	ldr	r3, [sp, #20]
 801d084:	ebb3 030b 	subs.w	r3, r3, fp
 801d088:	f100 809f 	bmi.w	801d1ca <_ZN8touchgfx7Outline10renderLineEiiii+0xbce>
 801d08c:	f1c1 0020 	rsb	r0, r1, #32
 801d090:	2201      	movs	r2, #1
 801d092:	f04f 0b20 	mov.w	fp, #32
 801d096:	4346      	muls	r6, r0
 801d098:	9201      	str	r2, [sp, #4]
 801d09a:	9a01      	ldr	r2, [sp, #4]
 801d09c:	4459      	add	r1, fp
 801d09e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801d0a2:	4417      	add	r7, r2
 801d0a4:	9a00      	ldr	r2, [sp, #0]
 801d0a6:	8b20      	ldrh	r0, [r4, #24]
 801d0a8:	0412      	lsls	r2, r2, #16
 801d0aa:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801d0ae:	fb96 f5f3 	sdiv	r5, r6, r3
 801d0b2:	fb03 6615 	mls	r6, r3, r5, r6
 801d0b6:	eb07 0a02 	add.w	sl, r7, r2
 801d0ba:	9204      	str	r2, [sp, #16]
 801d0bc:	2e00      	cmp	r6, #0
 801d0be:	bfbc      	itt	lt
 801d0c0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801d0c4:	18f6      	addlt	r6, r6, r3
 801d0c6:	fb05 8101 	mla	r1, r5, r1, r8
 801d0ca:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801d0ce:	4428      	add	r0, r5
 801d0d0:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 801d0d4:	b200      	sxth	r0, r0
 801d0d6:	b209      	sxth	r1, r1
 801d0d8:	45ca      	cmp	sl, r9
 801d0da:	8320      	strh	r0, [r4, #24]
 801d0dc:	8361      	strh	r1, [r4, #26]
 801d0de:	d016      	beq.n	801d10e <_ZN8touchgfx7Outline10renderLineEiiii+0xb12>
 801d0e0:	ea50 0201 	orrs.w	r2, r0, r1
 801d0e4:	d00c      	beq.n	801d100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 801d0e6:	f1b8 0f00 	cmp.w	r8, #0
 801d0ea:	db09      	blt.n	801d100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 801d0ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d0ee:	4541      	cmp	r1, r8
 801d0f0:	dd06      	ble.n	801d100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 801d0f2:	68a0      	ldr	r0, [r4, #8]
 801d0f4:	6861      	ldr	r1, [r4, #4]
 801d0f6:	4288      	cmp	r0, r1
 801d0f8:	d36f      	bcc.n	801d1da <_ZN8touchgfx7Outline10renderLineEiiii+0xbde>
 801d0fa:	2101      	movs	r1, #1
 801d0fc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801d100:	2100      	movs	r1, #0
 801d102:	f8bd 2000 	ldrh.w	r2, [sp]
 801d106:	82a7      	strh	r7, [r4, #20]
 801d108:	82e2      	strh	r2, [r4, #22]
 801d10a:	8321      	strh	r1, [r4, #24]
 801d10c:	8361      	strh	r1, [r4, #26]
 801d10e:	45bc      	cmp	ip, r7
 801d110:	44ae      	add	lr, r5
 801d112:	d049      	beq.n	801d1a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xbac>
 801d114:	9a03      	ldr	r2, [sp, #12]
 801d116:	1af6      	subs	r6, r6, r3
 801d118:	eba2 010e 	sub.w	r1, r2, lr
 801d11c:	440d      	add	r5, r1
 801d11e:	016d      	lsls	r5, r5, #5
 801d120:	fb95 f8f3 	sdiv	r8, r5, r3
 801d124:	fb03 5518 	mls	r5, r3, r8, r5
 801d128:	2d00      	cmp	r5, #0
 801d12a:	bfbc      	itt	lt
 801d12c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801d130:	18ed      	addlt	r5, r5, r3
 801d132:	f108 0201 	add.w	r2, r8, #1
 801d136:	9205      	str	r2, [sp, #20]
 801d138:	1976      	adds	r6, r6, r5
 801d13a:	8b20      	ldrh	r0, [r4, #24]
 801d13c:	8b61      	ldrh	r1, [r4, #26]
 801d13e:	bf54      	ite	pl
 801d140:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 801d144:	46c1      	movmi	r9, r8
 801d146:	9a01      	ldr	r2, [sp, #4]
 801d148:	bf58      	it	pl
 801d14a:	1af6      	subpl	r6, r6, r3
 801d14c:	4448      	add	r0, r9
 801d14e:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 801d152:	4417      	add	r7, r2
 801d154:	44ce      	add	lr, r9
 801d156:	9a04      	ldr	r2, [sp, #16]
 801d158:	b200      	sxth	r0, r0
 801d15a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 801d15e:	b209      	sxth	r1, r1
 801d160:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 801d164:	443a      	add	r2, r7
 801d166:	8320      	strh	r0, [r4, #24]
 801d168:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 801d16c:	8361      	strh	r1, [r4, #26]
 801d16e:	4552      	cmp	r2, sl
 801d170:	d018      	beq.n	801d1a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba8>
 801d172:	ea50 0201 	orrs.w	r2, r0, r1
 801d176:	d00d      	beq.n	801d194 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 801d178:	f1b9 0f00 	cmp.w	r9, #0
 801d17c:	db0a      	blt.n	801d194 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 801d17e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d180:	4549      	cmp	r1, r9
 801d182:	dd07      	ble.n	801d194 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 801d184:	68a0      	ldr	r0, [r4, #8]
 801d186:	6861      	ldr	r1, [r4, #4]
 801d188:	4288      	cmp	r0, r1
 801d18a:	d337      	bcc.n	801d1fc <_ZN8touchgfx7Outline10renderLineEiiii+0xc00>
 801d18c:	f04f 0201 	mov.w	r2, #1
 801d190:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801d194:	f8bd 2000 	ldrh.w	r2, [sp]
 801d198:	82a7      	strh	r7, [r4, #20]
 801d19a:	82e2      	strh	r2, [r4, #22]
 801d19c:	f04f 0200 	mov.w	r2, #0
 801d1a0:	8322      	strh	r2, [r4, #24]
 801d1a2:	8362      	strh	r2, [r4, #26]
 801d1a4:	45bc      	cmp	ip, r7
 801d1a6:	d1c7      	bne.n	801d138 <_ZN8touchgfx7Outline10renderLineEiiii+0xb3c>
 801d1a8:	9b03      	ldr	r3, [sp, #12]
 801d1aa:	8b62      	ldrh	r2, [r4, #26]
 801d1ac:	eba3 0e0e 	sub.w	lr, r3, lr
 801d1b0:	8b23      	ldrh	r3, [r4, #24]
 801d1b2:	4473      	add	r3, lr
 801d1b4:	8323      	strh	r3, [r4, #24]
 801d1b6:	9b02      	ldr	r3, [sp, #8]
 801d1b8:	3320      	adds	r3, #32
 801d1ba:	eba3 030b 	sub.w	r3, r3, fp
 801d1be:	fb0e 2e03 	mla	lr, lr, r3, r2
 801d1c2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801d1c6:	f7ff ba8f 	b.w	801c6e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801d1ca:	f04f 32ff 	mov.w	r2, #4294967295
 801d1ce:	434e      	muls	r6, r1
 801d1d0:	425b      	negs	r3, r3
 801d1d2:	f04f 0b00 	mov.w	fp, #0
 801d1d6:	9201      	str	r2, [sp, #4]
 801d1d8:	e75f      	b.n	801d09a <_ZN8touchgfx7Outline10renderLineEiiii+0xa9e>
 801d1da:	f104 0814 	add.w	r8, r4, #20
 801d1de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d1e2:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801d1e6:	f8c9 0000 	str.w	r0, [r9]
 801d1ea:	f8c9 1004 	str.w	r1, [r9, #4]
 801d1ee:	6921      	ldr	r1, [r4, #16]
 801d1f0:	3108      	adds	r1, #8
 801d1f2:	6121      	str	r1, [r4, #16]
 801d1f4:	68a1      	ldr	r1, [r4, #8]
 801d1f6:	3101      	adds	r1, #1
 801d1f8:	60a1      	str	r1, [r4, #8]
 801d1fa:	e781      	b.n	801d100 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 801d1fc:	f104 0914 	add.w	r9, r4, #20
 801d200:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d204:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 801d208:	f8ca 0000 	str.w	r0, [sl]
 801d20c:	f8ca 1004 	str.w	r1, [sl, #4]
 801d210:	6921      	ldr	r1, [r4, #16]
 801d212:	3108      	adds	r1, #8
 801d214:	6121      	str	r1, [r4, #16]
 801d216:	68a1      	ldr	r1, [r4, #8]
 801d218:	3101      	adds	r1, #1
 801d21a:	60a1      	str	r1, [r4, #8]
 801d21c:	e7ba      	b.n	801d194 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>

0801d21e <_ZN8touchgfx7Outline6lineToEii>:
 801d21e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d220:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801d222:	4604      	mov	r4, r0
 801d224:	460d      	mov	r5, r1
 801d226:	4616      	mov	r6, r2
 801d228:	079b      	lsls	r3, r3, #30
 801d22a:	d526      	bpl.n	801d27a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801d22c:	6a02      	ldr	r2, [r0, #32]
 801d22e:	69c1      	ldr	r1, [r0, #28]
 801d230:	ea86 0302 	eor.w	r3, r6, r2
 801d234:	ea85 0001 	eor.w	r0, r5, r1
 801d238:	4303      	orrs	r3, r0
 801d23a:	d01e      	beq.n	801d27a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801d23c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801d23e:	114b      	asrs	r3, r1, #5
 801d240:	9600      	str	r6, [sp, #0]
 801d242:	4283      	cmp	r3, r0
 801d244:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801d246:	bfb8      	it	lt
 801d248:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801d24a:	3301      	adds	r3, #1
 801d24c:	4283      	cmp	r3, r0
 801d24e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801d250:	bfc8      	it	gt
 801d252:	6363      	strgt	r3, [r4, #52]	; 0x34
 801d254:	116b      	asrs	r3, r5, #5
 801d256:	4283      	cmp	r3, r0
 801d258:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801d25a:	bfb8      	it	lt
 801d25c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801d25e:	3301      	adds	r3, #1
 801d260:	4283      	cmp	r3, r0
 801d262:	4620      	mov	r0, r4
 801d264:	bfc8      	it	gt
 801d266:	6363      	strgt	r3, [r4, #52]	; 0x34
 801d268:	462b      	mov	r3, r5
 801d26a:	f7ff f9c7 	bl	801c5fc <_ZN8touchgfx7Outline10renderLineEiiii>
 801d26e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d270:	61e5      	str	r5, [r4, #28]
 801d272:	f043 0301 	orr.w	r3, r3, #1
 801d276:	6226      	str	r6, [r4, #32]
 801d278:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d27a:	b002      	add	sp, #8
 801d27c:	bd70      	pop	{r4, r5, r6, pc}

0801d27e <_ZN8touchgfx7Outline6moveToEii>:
 801d27e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d280:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801d282:	4615      	mov	r5, r2
 801d284:	4604      	mov	r4, r0
 801d286:	460e      	mov	r6, r1
 801d288:	079a      	lsls	r2, r3, #30
 801d28a:	d401      	bmi.n	801d290 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801d28c:	f7ff f970 	bl	801c570 <_ZN8touchgfx7Outline5resetEv>
 801d290:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d292:	07db      	lsls	r3, r3, #31
 801d294:	d504      	bpl.n	801d2a0 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801d296:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801d298:	4620      	mov	r0, r4
 801d29a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d29c:	f7ff ffbf 	bl	801d21e <_ZN8touchgfx7Outline6lineToEii>
 801d2a0:	1177      	asrs	r7, r6, #5
 801d2a2:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801d2a6:	116a      	asrs	r2, r5, #5
 801d2a8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801d2ac:	eb07 4002 	add.w	r0, r7, r2, lsl #16
 801d2b0:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801d2b4:	4298      	cmp	r0, r3
 801d2b6:	d015      	beq.n	801d2e4 <_ZN8touchgfx7Outline6moveToEii+0x66>
 801d2b8:	8b63      	ldrh	r3, [r4, #26]
 801d2ba:	8b20      	ldrh	r0, [r4, #24]
 801d2bc:	4303      	orrs	r3, r0
 801d2be:	b21b      	sxth	r3, r3
 801d2c0:	b15b      	cbz	r3, 801d2da <_ZN8touchgfx7Outline6moveToEii+0x5c>
 801d2c2:	2900      	cmp	r1, #0
 801d2c4:	db09      	blt.n	801d2da <_ZN8touchgfx7Outline6moveToEii+0x5c>
 801d2c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d2c8:	428b      	cmp	r3, r1
 801d2ca:	dd06      	ble.n	801d2da <_ZN8touchgfx7Outline6moveToEii+0x5c>
 801d2cc:	68a1      	ldr	r1, [r4, #8]
 801d2ce:	6863      	ldr	r3, [r4, #4]
 801d2d0:	4299      	cmp	r1, r3
 801d2d2:	d30c      	bcc.n	801d2ee <_ZN8touchgfx7Outline6moveToEii+0x70>
 801d2d4:	2301      	movs	r3, #1
 801d2d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801d2da:	2300      	movs	r3, #0
 801d2dc:	82a7      	strh	r7, [r4, #20]
 801d2de:	82e2      	strh	r2, [r4, #22]
 801d2e0:	8323      	strh	r3, [r4, #24]
 801d2e2:	8363      	strh	r3, [r4, #26]
 801d2e4:	61e6      	str	r6, [r4, #28]
 801d2e6:	6266      	str	r6, [r4, #36]	; 0x24
 801d2e8:	6225      	str	r5, [r4, #32]
 801d2ea:	62a5      	str	r5, [r4, #40]	; 0x28
 801d2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d2ee:	f104 0314 	add.w	r3, r4, #20
 801d2f2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 801d2f6:	cb03      	ldmia	r3!, {r0, r1}
 801d2f8:	f8ce 0000 	str.w	r0, [lr]
 801d2fc:	f8ce 1004 	str.w	r1, [lr, #4]
 801d300:	6923      	ldr	r3, [r4, #16]
 801d302:	3308      	adds	r3, #8
 801d304:	6123      	str	r3, [r4, #16]
 801d306:	68a3      	ldr	r3, [r4, #8]
 801d308:	3301      	adds	r3, #1
 801d30a:	60a3      	str	r3, [r4, #8]
 801d30c:	e7e5      	b.n	801d2da <_ZN8touchgfx7Outline6moveToEii+0x5c>

0801d30e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801d30e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d312:	b0d1      	sub	sp, #324	; 0x144
 801d314:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801d318:	466c      	mov	r4, sp
 801d31a:	1a0d      	subs	r5, r1, r0
 801d31c:	f100 0208 	add.w	r2, r0, #8
 801d320:	2d4f      	cmp	r5, #79	; 0x4f
 801d322:	f340 80bd 	ble.w	801d4a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x192>
 801d326:	112d      	asrs	r5, r5, #4
 801d328:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801d32c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801d330:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 801d334:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801d338:	f9b0 8000 	ldrsh.w	r8, [r0]
 801d33c:	681e      	ldr	r6, [r3, #0]
 801d33e:	6006      	str	r6, [r0, #0]
 801d340:	685e      	ldr	r6, [r3, #4]
 801d342:	6046      	str	r6, [r0, #4]
 801d344:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 801d348:	f8a3 e004 	strh.w	lr, [r3, #4]
 801d34c:	f8a3 c002 	strh.w	ip, [r3, #2]
 801d350:	80df      	strh	r7, [r3, #6]
 801d352:	f1a1 0308 	sub.w	r3, r1, #8
 801d356:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801d35a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801d35e:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801d362:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801d366:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 801d36a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801d36e:	45ae      	cmp	lr, r5
 801d370:	dd0f      	ble.n	801d392 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 801d372:	681d      	ldr	r5, [r3, #0]
 801d374:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 801d378:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801d37c:	6015      	str	r5, [r2, #0]
 801d37e:	685d      	ldr	r5, [r3, #4]
 801d380:	6055      	str	r5, [r2, #4]
 801d382:	f821 7c08 	strh.w	r7, [r1, #-8]
 801d386:	f821 6c06 	strh.w	r6, [r1, #-6]
 801d38a:	f821 cc04 	strh.w	ip, [r1, #-4]
 801d38e:	f821 ec02 	strh.w	lr, [r1, #-2]
 801d392:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 801d396:	f9b0 7000 	ldrsh.w	r7, [r0]
 801d39a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801d39e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801d3a2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 801d3a6:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 801d3aa:	4575      	cmp	r5, lr
 801d3ac:	dd0d      	ble.n	801d3ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 801d3ae:	6815      	ldr	r5, [r2, #0]
 801d3b0:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 801d3b4:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801d3b8:	6005      	str	r5, [r0, #0]
 801d3ba:	6855      	ldr	r5, [r2, #4]
 801d3bc:	8107      	strh	r7, [r0, #8]
 801d3be:	6045      	str	r5, [r0, #4]
 801d3c0:	8146      	strh	r6, [r0, #10]
 801d3c2:	f8a0 c00c 	strh.w	ip, [r0, #12]
 801d3c6:	f8a0 e00e 	strh.w	lr, [r0, #14]
 801d3ca:	f9b0 7000 	ldrsh.w	r7, [r0]
 801d3ce:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801d3d2:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801d3d6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801d3da:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 801d3de:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801d3e2:	45ae      	cmp	lr, r5
 801d3e4:	dd0f      	ble.n	801d406 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801d3e6:	681d      	ldr	r5, [r3, #0]
 801d3e8:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 801d3ec:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801d3f0:	6005      	str	r5, [r0, #0]
 801d3f2:	685d      	ldr	r5, [r3, #4]
 801d3f4:	6045      	str	r5, [r0, #4]
 801d3f6:	f821 7c08 	strh.w	r7, [r1, #-8]
 801d3fa:	f821 6c06 	strh.w	r6, [r1, #-6]
 801d3fe:	f821 cc04 	strh.w	ip, [r1, #-4]
 801d402:	f821 ec02 	strh.w	lr, [r1, #-2]
 801d406:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 801d40a:	f102 0508 	add.w	r5, r2, #8
 801d40e:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 801d412:	f9b0 c000 	ldrsh.w	ip, [r0]
 801d416:	462f      	mov	r7, r5
 801d418:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801d41c:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 801d420:	eb0c 4a0e 	add.w	sl, ip, lr, lsl #16
 801d424:	45b2      	cmp	sl, r6
 801d426:	dc18      	bgt.n	801d45a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 801d428:	3b08      	subs	r3, #8
 801d42a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 801d42e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d432:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 801d436:	45b2      	cmp	sl, r6
 801d438:	dbf6      	blt.n	801d428 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 801d43a:	42ab      	cmp	r3, r5
 801d43c:	681e      	ldr	r6, [r3, #0]
 801d43e:	d30e      	bcc.n	801d45e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 801d440:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 801d444:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801d448:	602e      	str	r6, [r5, #0]
 801d44a:	685e      	ldr	r6, [r3, #4]
 801d44c:	606e      	str	r6, [r5, #4]
 801d44e:	f8a3 9000 	strh.w	r9, [r3]
 801d452:	f8a3 8002 	strh.w	r8, [r3, #2]
 801d456:	809f      	strh	r7, [r3, #4]
 801d458:	80da      	strh	r2, [r3, #6]
 801d45a:	462a      	mov	r2, r5
 801d45c:	e7d3      	b.n	801d406 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801d45e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801d462:	6006      	str	r6, [r0, #0]
 801d464:	685e      	ldr	r6, [r3, #4]
 801d466:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801d46a:	6046      	str	r6, [r0, #4]
 801d46c:	1a1e      	subs	r6, r3, r0
 801d46e:	80da      	strh	r2, [r3, #6]
 801d470:	1b4a      	subs	r2, r1, r5
 801d472:	f8a3 c000 	strh.w	ip, [r3]
 801d476:	10d2      	asrs	r2, r2, #3
 801d478:	f8a3 e002 	strh.w	lr, [r3, #2]
 801d47c:	f8a3 8004 	strh.w	r8, [r3, #4]
 801d480:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 801d484:	bfb5      	itete	lt
 801d486:	e884 0009 	stmialt.w	r4, {r0, r3}
 801d48a:	4607      	movge	r7, r0
 801d48c:	460b      	movlt	r3, r1
 801d48e:	6061      	strge	r1, [r4, #4]
 801d490:	f104 0408 	add.w	r4, r4, #8
 801d494:	bfa8      	it	ge
 801d496:	f844 5c08 	strge.w	r5, [r4, #-8]
 801d49a:	4638      	mov	r0, r7
 801d49c:	4619      	mov	r1, r3
 801d49e:	e73c      	b.n	801d31a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801d4a0:	4291      	cmp	r1, r2
 801d4a2:	d925      	bls.n	801d4f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e2>
 801d4a4:	f1a2 0310 	sub.w	r3, r2, #16
 801d4a8:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 801d4ac:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
 801d4b0:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 801d4b4:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801d4b8:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 801d4bc:	eb0e 4607 	add.w	r6, lr, r7, lsl #16
 801d4c0:	42b5      	cmp	r5, r6
 801d4c2:	dd13      	ble.n	801d4ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1de>
 801d4c4:	461d      	mov	r5, r3
 801d4c6:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 801d4ca:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 801d4ce:	3b08      	subs	r3, #8
 801d4d0:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801d4d4:	619e      	str	r6, [r3, #24]
 801d4d6:	42a8      	cmp	r0, r5
 801d4d8:	686e      	ldr	r6, [r5, #4]
 801d4da:	f8a3 e010 	strh.w	lr, [r3, #16]
 801d4de:	61de      	str	r6, [r3, #28]
 801d4e0:	825f      	strh	r7, [r3, #18]
 801d4e2:	f8a3 8014 	strh.w	r8, [r3, #20]
 801d4e6:	f8a3 c016 	strh.w	ip, [r3, #22]
 801d4ea:	d1dd      	bne.n	801d4a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x19a>
 801d4ec:	3208      	adds	r2, #8
 801d4ee:	e7d7      	b.n	801d4a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x192>
 801d4f0:	466b      	mov	r3, sp
 801d4f2:	429c      	cmp	r4, r3
 801d4f4:	d903      	bls.n	801d4fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1f0>
 801d4f6:	e914 0003 	ldmdb	r4, {r0, r1}
 801d4fa:	3c08      	subs	r4, #8
 801d4fc:	e70d      	b.n	801d31a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801d4fe:	b051      	add	sp, #324	; 0x144
 801d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d504 <_ZN8touchgfx7Outline9sortCellsEv>:
 801d504:	6881      	ldr	r1, [r0, #8]
 801d506:	b111      	cbz	r1, 801d50e <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 801d508:	68c0      	ldr	r0, [r0, #12]
 801d50a:	f7ff bf00 	b.w	801d30e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801d50e:	4770      	bx	lr

0801d510 <_ZN8touchgfx7Outline8getCellsEv>:
 801d510:	b510      	push	{r4, lr}
 801d512:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801d514:	4604      	mov	r4, r0
 801d516:	07da      	lsls	r2, r3, #31
 801d518:	d507      	bpl.n	801d52a <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 801d51a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801d51c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801d51e:	f7ff fe7e 	bl	801d21e <_ZN8touchgfx7Outline6lineToEii>
 801d522:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d524:	f023 0301 	bic.w	r3, r3, #1
 801d528:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d52a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d52c:	079b      	lsls	r3, r3, #30
 801d52e:	d51b      	bpl.n	801d568 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 801d530:	8b63      	ldrh	r3, [r4, #26]
 801d532:	8b22      	ldrh	r2, [r4, #24]
 801d534:	4313      	orrs	r3, r2
 801d536:	b21b      	sxth	r3, r3
 801d538:	b16b      	cbz	r3, 801d556 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 801d53a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	db09      	blt.n	801d556 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 801d542:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d544:	4293      	cmp	r3, r2
 801d546:	da06      	bge.n	801d556 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 801d548:	68a2      	ldr	r2, [r4, #8]
 801d54a:	6863      	ldr	r3, [r4, #4]
 801d54c:	429a      	cmp	r2, r3
 801d54e:	d30d      	bcc.n	801d56c <_ZN8touchgfx7Outline8getCellsEv+0x5c>
 801d550:	2301      	movs	r3, #1
 801d552:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801d556:	68a0      	ldr	r0, [r4, #8]
 801d558:	b138      	cbz	r0, 801d56a <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 801d55a:	4620      	mov	r0, r4
 801d55c:	f7ff ffd2 	bl	801d504 <_ZN8touchgfx7Outline9sortCellsEv>
 801d560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d562:	f023 0302 	bic.w	r3, r3, #2
 801d566:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d568:	68e0      	ldr	r0, [r4, #12]
 801d56a:	bd10      	pop	{r4, pc}
 801d56c:	f104 0314 	add.w	r3, r4, #20
 801d570:	6922      	ldr	r2, [r4, #16]
 801d572:	cb03      	ldmia	r3!, {r0, r1}
 801d574:	6010      	str	r0, [r2, #0]
 801d576:	6051      	str	r1, [r2, #4]
 801d578:	6923      	ldr	r3, [r4, #16]
 801d57a:	3308      	adds	r3, #8
 801d57c:	6123      	str	r3, [r4, #16]
 801d57e:	68a3      	ldr	r3, [r4, #8]
 801d580:	3301      	adds	r3, #1
 801d582:	60a3      	str	r3, [r4, #8]
 801d584:	e7e7      	b.n	801d556 <_ZN8touchgfx7Outline8getCellsEv+0x46>
	...

0801d588 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801d588:	4b02      	ldr	r3, [pc, #8]	; (801d594 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801d58a:	6018      	str	r0, [r3, #0]
 801d58c:	4b02      	ldr	r3, [pc, #8]	; (801d598 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801d58e:	6019      	str	r1, [r3, #0]
 801d590:	4770      	bx	lr
 801d592:	bf00      	nop
 801d594:	2000ba54 	.word	0x2000ba54
 801d598:	2000ba68 	.word	0x2000ba68

0801d59c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801d59c:	b570      	push	{r4, r5, r6, lr}
 801d59e:	4c2c      	ldr	r4, [pc, #176]	; (801d650 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801d5a0:	4d2c      	ldr	r5, [pc, #176]	; (801d654 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801d5a2:	6822      	ldr	r2, [r4, #0]
 801d5a4:	4b2c      	ldr	r3, [pc, #176]	; (801d658 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801d5a6:	4282      	cmp	r2, r0
 801d5a8:	492c      	ldr	r1, [pc, #176]	; (801d65c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801d5aa:	d109      	bne.n	801d5c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801d5ac:	682e      	ldr	r6, [r5, #0]
 801d5ae:	681a      	ldr	r2, [r3, #0]
 801d5b0:	4296      	cmp	r6, r2
 801d5b2:	d105      	bne.n	801d5c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801d5b4:	6808      	ldr	r0, [r1, #0]
 801d5b6:	280f      	cmp	r0, #15
 801d5b8:	bf94      	ite	ls
 801d5ba:	2000      	movls	r0, #0
 801d5bc:	2001      	movhi	r0, #1
 801d5be:	bd70      	pop	{r4, r5, r6, pc}
 801d5c0:	681a      	ldr	r2, [r3, #0]
 801d5c2:	4b27      	ldr	r3, [pc, #156]	; (801d660 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801d5c4:	6020      	str	r0, [r4, #0]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	602a      	str	r2, [r5, #0]
 801d5ca:	4298      	cmp	r0, r3
 801d5cc:	d905      	bls.n	801d5da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3e>
 801d5ce:	4b25      	ldr	r3, [pc, #148]	; (801d664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801d5d0:	2137      	movs	r1, #55	; 0x37
 801d5d2:	4a25      	ldr	r2, [pc, #148]	; (801d668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801d5d4:	4825      	ldr	r0, [pc, #148]	; (801d66c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801d5d6:	f005 faaf 	bl	8022b38 <__assert_func>
 801d5da:	f010 0403 	ands.w	r4, r0, #3
 801d5de:	bf1f      	itttt	ne
 801d5e0:	f1c4 0504 	rsbne	r5, r4, #4
 801d5e4:	3b04      	subne	r3, #4
 801d5e6:	1952      	addne	r2, r2, r5
 801d5e8:	191b      	addne	r3, r3, r4
 801d5ea:	4d21      	ldr	r5, [pc, #132]	; (801d670 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801d5ec:	4402      	add	r2, r0
 801d5ee:	1a1b      	subs	r3, r3, r0
 801d5f0:	3001      	adds	r0, #1
 801d5f2:	602a      	str	r2, [r5, #0]
 801d5f4:	f020 0401 	bic.w	r4, r0, #1
 801d5f8:	42a3      	cmp	r3, r4
 801d5fa:	d203      	bcs.n	801d604 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x68>
 801d5fc:	4b19      	ldr	r3, [pc, #100]	; (801d664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801d5fe:	214a      	movs	r1, #74	; 0x4a
 801d600:	4a19      	ldr	r2, [pc, #100]	; (801d668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801d602:	e7e7      	b.n	801d5d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 801d604:	f010 0002 	ands.w	r0, r0, #2
 801d608:	bf1f      	itttt	ne
 801d60a:	f1c0 0504 	rsbne	r5, r0, #4
 801d60e:	1952      	addne	r2, r2, r5
 801d610:	1f05      	subne	r5, r0, #4
 801d612:	195b      	addne	r3, r3, r5
 801d614:	4422      	add	r2, r4
 801d616:	4d17      	ldr	r5, [pc, #92]	; (801d674 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801d618:	1b1b      	subs	r3, r3, r4
 801d61a:	602a      	str	r2, [r5, #0]
 801d61c:	429c      	cmp	r4, r3
 801d61e:	d903      	bls.n	801d628 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8c>
 801d620:	4b10      	ldr	r3, [pc, #64]	; (801d664 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801d622:	215d      	movs	r1, #93	; 0x5d
 801d624:	4a10      	ldr	r2, [pc, #64]	; (801d668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801d626:	e7d5      	b.n	801d5d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 801d628:	b120      	cbz	r0, 801d634 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x98>
 801d62a:	f1c0 0504 	rsb	r5, r0, #4
 801d62e:	3804      	subs	r0, #4
 801d630:	442a      	add	r2, r5
 801d632:	4403      	add	r3, r0
 801d634:	1b1b      	subs	r3, r3, r4
 801d636:	4422      	add	r2, r4
 801d638:	480f      	ldr	r0, [pc, #60]	; (801d678 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801d63a:	2b0f      	cmp	r3, #15
 801d63c:	600b      	str	r3, [r1, #0]
 801d63e:	6002      	str	r2, [r0, #0]
 801d640:	d803      	bhi.n	801d64a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xae>
 801d642:	4b0e      	ldr	r3, [pc, #56]	; (801d67c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xe0>)
 801d644:	2170      	movs	r1, #112	; 0x70
 801d646:	4a08      	ldr	r2, [pc, #32]	; (801d668 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801d648:	e7c4      	b.n	801d5d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 801d64a:	2001      	movs	r0, #1
 801d64c:	bd70      	pop	{r4, r5, r6, pc}
 801d64e:	bf00      	nop
 801d650:	2000ba5c 	.word	0x2000ba5c
 801d654:	2000ba64 	.word	0x2000ba64
 801d658:	2000ba54 	.word	0x2000ba54
 801d65c:	2000ba6c 	.word	0x2000ba6c
 801d660:	2000ba68 	.word	0x2000ba68
 801d664:	08025fc8 	.word	0x08025fc8
 801d668:	08026090 	.word	0x08026090
 801d66c:	08026001 	.word	0x08026001
 801d670:	2000ba70 	.word	0x2000ba70
 801d674:	2000ba60 	.word	0x2000ba60
 801d678:	2000ba58 	.word	0x2000ba58
 801d67c:	0802604b 	.word	0x0802604b

0801d680 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801d680:	4b04      	ldr	r3, [pc, #16]	; (801d694 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801d682:	6818      	ldr	r0, [r3, #0]
 801d684:	b120      	cbz	r0, 801d690 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801d686:	4b04      	ldr	r3, [pc, #16]	; (801d698 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801d688:	6818      	ldr	r0, [r3, #0]
 801d68a:	3000      	adds	r0, #0
 801d68c:	bf18      	it	ne
 801d68e:	2001      	movne	r0, #1
 801d690:	4770      	bx	lr
 801d692:	bf00      	nop
 801d694:	2000ba54 	.word	0x2000ba54
 801d698:	2000ba68 	.word	0x2000ba68

0801d69c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801d69c:	4b01      	ldr	r3, [pc, #4]	; (801d6a4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801d69e:	6818      	ldr	r0, [r3, #0]
 801d6a0:	4770      	bx	lr
 801d6a2:	bf00      	nop
 801d6a4:	2000ba5c 	.word	0x2000ba5c

0801d6a8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801d6a8:	4b01      	ldr	r3, [pc, #4]	; (801d6b0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801d6aa:	6818      	ldr	r0, [r3, #0]
 801d6ac:	4770      	bx	lr
 801d6ae:	bf00      	nop
 801d6b0:	2000ba64 	.word	0x2000ba64

0801d6b4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801d6b4:	4b01      	ldr	r3, [pc, #4]	; (801d6bc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801d6b6:	6818      	ldr	r0, [r3, #0]
 801d6b8:	4770      	bx	lr
 801d6ba:	bf00      	nop
 801d6bc:	2000ba70 	.word	0x2000ba70

0801d6c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801d6c0:	4b01      	ldr	r3, [pc, #4]	; (801d6c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801d6c2:	6818      	ldr	r0, [r3, #0]
 801d6c4:	4770      	bx	lr
 801d6c6:	bf00      	nop
 801d6c8:	2000ba60 	.word	0x2000ba60

0801d6cc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801d6cc:	4b01      	ldr	r3, [pc, #4]	; (801d6d4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801d6ce:	6818      	ldr	r0, [r3, #0]
 801d6d0:	4770      	bx	lr
 801d6d2:	bf00      	nop
 801d6d4:	2000ba58 	.word	0x2000ba58

0801d6d8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801d6d8:	4b01      	ldr	r3, [pc, #4]	; (801d6e0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801d6da:	6818      	ldr	r0, [r3, #0]
 801d6dc:	4770      	bx	lr
 801d6de:	bf00      	nop
 801d6e0:	2000ba6c 	.word	0x2000ba6c

0801d6e4 <_ZN8touchgfx8ScanlineD1Ev>:
 801d6e4:	4770      	bx	lr

0801d6e6 <_ZN8touchgfx8ScanlineD0Ev>:
 801d6e6:	b510      	push	{r4, lr}
 801d6e8:	4604      	mov	r4, r0
 801d6ea:	2124      	movs	r1, #36	; 0x24
 801d6ec:	f005 fa08 	bl	8022b00 <_ZdlPvj>
 801d6f0:	4620      	mov	r0, r4
 801d6f2:	bd10      	pop	{r4, pc}

0801d6f4 <_ZN8touchgfx8Scanline5resetEv>:
 801d6f4:	b510      	push	{r4, lr}
 801d6f6:	4604      	mov	r4, r0
 801d6f8:	f7ff ffd6 	bl	801d6a8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 801d6fc:	61a0      	str	r0, [r4, #24]
 801d6fe:	f7ff ffd9 	bl	801d6b4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 801d702:	61e0      	str	r0, [r4, #28]
 801d704:	f7ff ffdc 	bl	801d6c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 801d708:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d70c:	6220      	str	r0, [r4, #32]
 801d70e:	6063      	str	r3, [r4, #4]
 801d710:	60a3      	str	r3, [r4, #8]
 801d712:	69e3      	ldr	r3, [r4, #28]
 801d714:	6160      	str	r0, [r4, #20]
 801d716:	6123      	str	r3, [r4, #16]
 801d718:	2300      	movs	r3, #0
 801d71a:	60e3      	str	r3, [r4, #12]
 801d71c:	bd10      	pop	{r4, pc}
	...

0801d720 <_ZN8touchgfx8ScanlineC1Ev>:
 801d720:	4b07      	ldr	r3, [pc, #28]	; (801d740 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 801d722:	b510      	push	{r4, lr}
 801d724:	6003      	str	r3, [r0, #0]
 801d726:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d72a:	4604      	mov	r4, r0
 801d72c:	6043      	str	r3, [r0, #4]
 801d72e:	6083      	str	r3, [r0, #8]
 801d730:	2300      	movs	r3, #0
 801d732:	60c3      	str	r3, [r0, #12]
 801d734:	6103      	str	r3, [r0, #16]
 801d736:	6143      	str	r3, [r0, #20]
 801d738:	f7ff ffdc 	bl	801d6f4 <_ZN8touchgfx8Scanline5resetEv>
 801d73c:	4620      	mov	r0, r4
 801d73e:	bd10      	pop	{r4, pc}
 801d740:	080260e4 	.word	0x080260e4

0801d744 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 801d744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d748:	1e0c      	subs	r4, r1, #0
 801d74a:	4605      	mov	r5, r0
 801d74c:	4617      	mov	r7, r2
 801d74e:	461e      	mov	r6, r3
 801d750:	da03      	bge.n	801d75a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 801d752:	4426      	add	r6, r4
 801d754:	2e01      	cmp	r6, #1
 801d756:	d420      	bmi.n	801d79a <_ZN8touchgfx8Scanline7addSpanEiijj+0x56>
 801d758:	2400      	movs	r4, #0
 801d75a:	f7ff ff9f 	bl	801d69c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801d75e:	42a0      	cmp	r0, r4
 801d760:	d91b      	bls.n	801d79a <_ZN8touchgfx8Scanline7addSpanEiijj+0x56>
 801d762:	eb06 0804 	add.w	r8, r6, r4
 801d766:	f7ff ff99 	bl	801d69c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801d76a:	4580      	cmp	r8, r0
 801d76c:	d902      	bls.n	801d774 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 801d76e:	f7ff ff95 	bl	801d69c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801d772:	1b06      	subs	r6, r0, r4
 801d774:	69a8      	ldr	r0, [r5, #24]
 801d776:	4632      	mov	r2, r6
 801d778:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801d77c:	4420      	add	r0, r4
 801d77e:	f001 fd7e 	bl	801f27e <_ZN8touchgfx6memsetEPvhm>
 801d782:	686b      	ldr	r3, [r5, #4]
 801d784:	3301      	adds	r3, #1
 801d786:	429c      	cmp	r4, r3
 801d788:	696b      	ldr	r3, [r5, #20]
 801d78a:	d108      	bne.n	801d79e <_ZN8touchgfx8Scanline7addSpanEiijj+0x5a>
 801d78c:	881a      	ldrh	r2, [r3, #0]
 801d78e:	4432      	add	r2, r6
 801d790:	801a      	strh	r2, [r3, #0]
 801d792:	3c01      	subs	r4, #1
 801d794:	60af      	str	r7, [r5, #8]
 801d796:	4434      	add	r4, r6
 801d798:	606c      	str	r4, [r5, #4]
 801d79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d79e:	1c9a      	adds	r2, r3, #2
 801d7a0:	616a      	str	r2, [r5, #20]
 801d7a2:	805e      	strh	r6, [r3, #2]
 801d7a4:	692b      	ldr	r3, [r5, #16]
 801d7a6:	1c9a      	adds	r2, r3, #2
 801d7a8:	612a      	str	r2, [r5, #16]
 801d7aa:	805c      	strh	r4, [r3, #2]
 801d7ac:	68eb      	ldr	r3, [r5, #12]
 801d7ae:	3301      	adds	r3, #1
 801d7b0:	60eb      	str	r3, [r5, #12]
 801d7b2:	e7ee      	b.n	801d792 <_ZN8touchgfx8Scanline7addSpanEiijj+0x4e>

0801d7b4 <_ZN8touchgfx15RenderingBufferC1Ev>:
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	6002      	str	r2, [r0, #0]
 801d7b8:	7102      	strb	r2, [r0, #4]
 801d7ba:	6082      	str	r2, [r0, #8]
 801d7bc:	60c2      	str	r2, [r0, #12]
 801d7be:	6102      	str	r2, [r0, #16]
 801d7c0:	4770      	bx	lr

0801d7c2 <_ZN8touchgfx15RenderingBufferD1Ev>:
 801d7c2:	4770      	bx	lr

0801d7c4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 801d7c4:	6083      	str	r3, [r0, #8]
 801d7c6:	9b00      	ldr	r3, [sp, #0]
 801d7c8:	6001      	str	r1, [r0, #0]
 801d7ca:	60c3      	str	r3, [r0, #12]
 801d7cc:	9b01      	ldr	r3, [sp, #4]
 801d7ce:	7102      	strb	r2, [r0, #4]
 801d7d0:	6103      	str	r3, [r0, #16]
 801d7d2:	4770      	bx	lr

0801d7d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801d7d4:	b538      	push	{r3, r4, r5, lr}
 801d7d6:	4604      	mov	r4, r0
 801d7d8:	2500      	movs	r5, #0
 801d7da:	9804      	ldr	r0, [sp, #16]
 801d7dc:	7223      	strb	r3, [r4, #8]
 801d7de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d7e2:	8025      	strh	r5, [r4, #0]
 801d7e4:	60e5      	str	r5, [r4, #12]
 801d7e6:	82e5      	strh	r5, [r4, #22]
 801d7e8:	8325      	strh	r5, [r4, #24]
 801d7ea:	8365      	strh	r5, [r4, #26]
 801d7ec:	83a5      	strh	r5, [r4, #28]
 801d7ee:	83e5      	strh	r5, [r4, #30]
 801d7f0:	8425      	strh	r5, [r4, #32]
 801d7f2:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801d7f6:	6061      	str	r1, [r4, #4]
 801d7f8:	7263      	strb	r3, [r4, #9]
 801d7fa:	6120      	str	r0, [r4, #16]
 801d7fc:	82a2      	strh	r2, [r4, #20]
 801d7fe:	6803      	ldr	r3, [r0, #0]
 801d800:	695b      	ldr	r3, [r3, #20]
 801d802:	4798      	blx	r3
 801d804:	4605      	mov	r5, r0
 801d806:	b330      	cbz	r0, 801d856 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801d808:	6920      	ldr	r0, [r4, #16]
 801d80a:	4629      	mov	r1, r5
 801d80c:	6803      	ldr	r3, [r0, #0]
 801d80e:	68db      	ldr	r3, [r3, #12]
 801d810:	4798      	blx	r3
 801d812:	60e0      	str	r0, [r4, #12]
 801d814:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801d818:	4602      	mov	r2, r0
 801d81a:	7a81      	ldrb	r1, [r0, #10]
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	bfb4      	ite	lt
 801d820:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801d824:	2300      	movge	r3, #0
 801d826:	430b      	orrs	r3, r1
 801d828:	8423      	strh	r3, [r4, #32]
 801d82a:	7a63      	ldrb	r3, [r4, #9]
 801d82c:	2b04      	cmp	r3, #4
 801d82e:	d112      	bne.n	801d856 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801d830:	6920      	ldr	r0, [r4, #16]
 801d832:	4629      	mov	r1, r5
 801d834:	6803      	ldr	r3, [r0, #0]
 801d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d838:	4798      	blx	r3
 801d83a:	68e2      	ldr	r2, [r4, #12]
 801d83c:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801d840:	7a91      	ldrb	r1, [r2, #10]
 801d842:	2b00      	cmp	r3, #0
 801d844:	bfb4      	ite	lt
 801d846:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801d84a:	2300      	movge	r3, #0
 801d84c:	430b      	orrs	r3, r1
 801d84e:	4418      	add	r0, r3
 801d850:	8c23      	ldrh	r3, [r4, #32]
 801d852:	4418      	add	r0, r3
 801d854:	8420      	strh	r0, [r4, #32]
 801d856:	4620      	mov	r0, r4
 801d858:	bd38      	pop	{r3, r4, r5, pc}

0801d85a <_ZN8touchgfx4Edge4stepEv>:
 801d85a:	b510      	push	{r4, lr}
 801d85c:	e890 0006 	ldmia.w	r0, {r1, r2}
 801d860:	4603      	mov	r3, r0
 801d862:	4411      	add	r1, r2
 801d864:	6942      	ldr	r2, [r0, #20]
 801d866:	3201      	adds	r2, #1
 801d868:	6001      	str	r1, [r0, #0]
 801d86a:	6142      	str	r2, [r0, #20]
 801d86c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801d870:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801d874:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 801d878:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d87c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801d880:	691a      	ldr	r2, [r3, #16]
 801d882:	689c      	ldr	r4, [r3, #8]
 801d884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d888:	ed93 6a08 	vldr	s12, [r3, #32]
 801d88c:	edd3 6a07 	vldr	s13, [r3, #28]
 801d890:	4422      	add	r2, r4
 801d892:	6980      	ldr	r0, [r0, #24]
 801d894:	68dc      	ldr	r4, [r3, #12]
 801d896:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d89a:	3801      	subs	r0, #1
 801d89c:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
 801d8a0:	42a2      	cmp	r2, r4
 801d8a2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 801d8a6:	6198      	str	r0, [r3, #24]
 801d8a8:	edc3 6a07 	vstr	s13, [r3, #28]
 801d8ac:	611a      	str	r2, [r3, #16]
 801d8ae:	db15      	blt.n	801d8dc <_ZN8touchgfx4Edge4stepEv+0x82>
 801d8b0:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 801d8b4:	3101      	adds	r1, #1
 801d8b6:	1b12      	subs	r2, r2, r4
 801d8b8:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d8bc:	6019      	str	r1, [r3, #0]
 801d8be:	611a      	str	r2, [r3, #16]
 801d8c0:	edc3 6a07 	vstr	s13, [r3, #28]
 801d8c4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 801d8c8:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d8cc:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
 801d8d0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801d8d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d8d8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 801d8dc:	bd10      	pop	{r4, pc}

0801d8de <_ZN8touchgfx4Edge4stepEi>:
 801d8de:	b570      	push	{r4, r5, r6, lr}
 801d8e0:	4605      	mov	r5, r0
 801d8e2:	460e      	mov	r6, r1
 801d8e4:	2400      	movs	r4, #0
 801d8e6:	42b4      	cmp	r4, r6
 801d8e8:	da04      	bge.n	801d8f4 <_ZN8touchgfx4Edge4stepEi+0x16>
 801d8ea:	4628      	mov	r0, r5
 801d8ec:	3401      	adds	r4, #1
 801d8ee:	f7ff ffb4 	bl	801d85a <_ZN8touchgfx4Edge4stepEv>
 801d8f2:	e7f8      	b.n	801d8e6 <_ZN8touchgfx4Edge4stepEi+0x8>
 801d8f4:	69a8      	ldr	r0, [r5, #24]
 801d8f6:	bd70      	pop	{r4, r5, r6, pc}

0801d8f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801d8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8fc:	2600      	movs	r6, #0
 801d8fe:	4682      	mov	sl, r0
 801d900:	460f      	mov	r7, r1
 801d902:	4693      	mov	fp, r2
 801d904:	46b1      	mov	r9, r6
 801d906:	46b0      	mov	r8, r6
 801d908:	9301      	str	r3, [sp, #4]
 801d90a:	455e      	cmp	r6, fp
 801d90c:	da26      	bge.n	801d95c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801d90e:	9901      	ldr	r1, [sp, #4]
 801d910:	4650      	mov	r0, sl
 801d912:	f002 f935 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d916:	4605      	mov	r5, r0
 801d918:	b300      	cbz	r0, 801d95c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801d91a:	280a      	cmp	r0, #10
 801d91c:	d01e      	beq.n	801d95c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801d91e:	683b      	ldr	r3, [r7, #0]
 801d920:	4601      	mov	r1, r0
 801d922:	4638      	mov	r0, r7
 801d924:	68db      	ldr	r3, [r3, #12]
 801d926:	4798      	blx	r3
 801d928:	4602      	mov	r2, r0
 801d92a:	b1a0      	cbz	r0, 801d956 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5e>
 801d92c:	7a83      	ldrb	r3, [r0, #10]
 801d92e:	4649      	mov	r1, r9
 801d930:	8885      	ldrh	r5, [r0, #4]
 801d932:	9300      	str	r3, [sp, #0]
 801d934:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801d938:	4638      	mov	r0, r7
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	683b      	ldr	r3, [r7, #0]
 801d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d940:	bfb4      	ite	lt
 801d942:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801d946:	2400      	movge	r4, #0
 801d948:	4798      	blx	r3
 801d94a:	9b00      	ldr	r3, [sp, #0]
 801d94c:	431c      	orrs	r4, r3
 801d94e:	4404      	add	r4, r0
 801d950:	44a0      	add	r8, r4
 801d952:	fa1f f888 	uxth.w	r8, r8
 801d956:	3601      	adds	r6, #1
 801d958:	46a9      	mov	r9, r5
 801d95a:	e7d6      	b.n	801d90a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x12>
 801d95c:	4640      	mov	r0, r8
 801d95e:	b003      	add	sp, #12
 801d960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d964 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801d964:	2a02      	cmp	r2, #2
 801d966:	b530      	push	{r4, r5, lr}
 801d968:	d011      	beq.n	801d98e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801d96a:	2a03      	cmp	r2, #3
 801d96c:	d01c      	beq.n	801d9a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801d96e:	2a01      	cmp	r2, #1
 801d970:	d128      	bne.n	801d9c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 801d972:	888b      	ldrh	r3, [r1, #4]
 801d974:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801d978:	8801      	ldrh	r1, [r0, #0]
 801d97a:	1a9b      	subs	r3, r3, r2
 801d97c:	8844      	ldrh	r4, [r0, #2]
 801d97e:	1a5b      	subs	r3, r3, r1
 801d980:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801d984:	8004      	strh	r4, [r0, #0]
 801d986:	8043      	strh	r3, [r0, #2]
 801d988:	8081      	strh	r1, [r0, #4]
 801d98a:	80c2      	strh	r2, [r0, #6]
 801d98c:	bd30      	pop	{r4, r5, pc}
 801d98e:	88cb      	ldrh	r3, [r1, #6]
 801d990:	88c2      	ldrh	r2, [r0, #6]
 801d992:	1a9b      	subs	r3, r3, r2
 801d994:	8842      	ldrh	r2, [r0, #2]
 801d996:	1a9b      	subs	r3, r3, r2
 801d998:	888a      	ldrh	r2, [r1, #4]
 801d99a:	8881      	ldrh	r1, [r0, #4]
 801d99c:	8043      	strh	r3, [r0, #2]
 801d99e:	1a52      	subs	r2, r2, r1
 801d9a0:	8801      	ldrh	r1, [r0, #0]
 801d9a2:	1a52      	subs	r2, r2, r1
 801d9a4:	8002      	strh	r2, [r0, #0]
 801d9a6:	bd30      	pop	{r4, r5, pc}
 801d9a8:	88cb      	ldrh	r3, [r1, #6]
 801d9aa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801d9ae:	8841      	ldrh	r1, [r0, #2]
 801d9b0:	1a9b      	subs	r3, r3, r2
 801d9b2:	f9b0 5000 	ldrsh.w	r5, [r0]
 801d9b6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801d9ba:	1a5b      	subs	r3, r3, r1
 801d9bc:	8045      	strh	r5, [r0, #2]
 801d9be:	8082      	strh	r2, [r0, #4]
 801d9c0:	8003      	strh	r3, [r0, #0]
 801d9c2:	80c4      	strh	r4, [r0, #6]
 801d9c4:	bd30      	pop	{r4, r5, pc}
	...

0801d9c8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>:
 801d9c8:	b570      	push	{r4, r5, r6, lr}
 801d9ca:	b086      	sub	sp, #24
 801d9cc:	ad02      	add	r5, sp, #8
 801d9ce:	e885 0006 	stmia.w	r5, {r1, r2}
 801d9d2:	461a      	mov	r2, r3
 801d9d4:	ab0c      	add	r3, sp, #48	; 0x30
 801d9d6:	9305      	str	r3, [sp, #20]
 801d9d8:	4b0a      	ldr	r3, [pc, #40]	; (801da04 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz+0x3c>)
 801d9da:	685c      	ldr	r4, [r3, #4]
 801d9dc:	f014 0f01 	tst.w	r4, #1
 801d9e0:	ea4f 0464 	mov.w	r4, r4, asr #1
 801d9e4:	bf1c      	itt	ne
 801d9e6:	681b      	ldrne	r3, [r3, #0]
 801d9e8:	5901      	ldrne	r1, [r0, r4]
 801d9ea:	4420      	add	r0, r4
 801d9ec:	bf0c      	ite	eq
 801d9ee:	681e      	ldreq	r6, [r3, #0]
 801d9f0:	58ce      	ldrne	r6, [r1, r3]
 801d9f2:	4629      	mov	r1, r5
 801d9f4:	9b05      	ldr	r3, [sp, #20]
 801d9f6:	9301      	str	r3, [sp, #4]
 801d9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9fa:	9300      	str	r3, [sp, #0]
 801d9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9fe:	47b0      	blx	r6
 801da00:	b006      	add	sp, #24
 801da02:	bd70      	pop	{r4, r5, r6, pc}
 801da04:	20000064 	.word	0x20000064

0801da08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da0c:	b097      	sub	sp, #92	; 0x5c
 801da0e:	9112      	str	r1, [sp, #72]	; 0x48
 801da10:	9313      	str	r3, [sp, #76]	; 0x4c
 801da12:	9921      	ldr	r1, [sp, #132]	; 0x84
 801da14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801da16:	8809      	ldrh	r1, [r1, #0]
 801da18:	889b      	ldrh	r3, [r3, #4]
 801da1a:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801da1c:	440b      	add	r3, r1
 801da1e:	920f      	str	r2, [sp, #60]	; 0x3c
 801da20:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 801da24:	b21b      	sxth	r3, r3
 801da26:	900e      	str	r0, [sp, #56]	; 0x38
 801da28:	f89d a08c 	ldrb.w	sl, [sp, #140]	; 0x8c
 801da2c:	930d      	str	r3, [sp, #52]	; 0x34
 801da2e:	683b      	ldr	r3, [r7, #0]
 801da30:	7a59      	ldrb	r1, [r3, #9]
 801da32:	7a1b      	ldrb	r3, [r3, #8]
 801da34:	9111      	str	r1, [sp, #68]	; 0x44
 801da36:	9310      	str	r3, [sp, #64]	; 0x40
 801da38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801da3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801da3e:	2a00      	cmp	r2, #0
 801da40:	d04b      	beq.n	801dada <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd2>
 801da42:	7c3b      	ldrb	r3, [r7, #16]
 801da44:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801da46:	2b04      	cmp	r3, #4
 801da48:	bf0c      	ite	eq
 801da4a:	2302      	moveq	r3, #2
 801da4c:	2301      	movne	r3, #1
 801da4e:	4413      	add	r3, r2
 801da50:	2500      	movs	r5, #0
 801da52:	930c      	str	r3, [sp, #48]	; 0x30
 801da54:	46a9      	mov	r9, r5
 801da56:	462c      	mov	r4, r5
 801da58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da5a:	4599      	cmp	r9, r3
 801da5c:	da6a      	bge.n	801db34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801da5e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801da60:	4599      	cmp	r9, r3
 801da62:	db3c      	blt.n	801dade <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801da64:	6838      	ldr	r0, [r7, #0]
 801da66:	6803      	ldr	r3, [r0, #0]
 801da68:	695b      	ldr	r3, [r3, #20]
 801da6a:	4798      	blx	r3
 801da6c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801da70:	4680      	mov	r8, r0
 801da72:	4298      	cmp	r0, r3
 801da74:	d045      	beq.n	801db02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801da76:	f242 030b 	movw	r3, #8203	; 0x200b
 801da7a:	4298      	cmp	r0, r3
 801da7c:	d041      	beq.n	801db02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801da7e:	2800      	cmp	r0, #0
 801da80:	d057      	beq.n	801db32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801da82:	280a      	cmp	r0, #10
 801da84:	d055      	beq.n	801db32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801da86:	6838      	ldr	r0, [r7, #0]
 801da88:	aa15      	add	r2, sp, #84	; 0x54
 801da8a:	4641      	mov	r1, r8
 801da8c:	6803      	ldr	r3, [r0, #0]
 801da8e:	f8d3 b008 	ldr.w	fp, [r3, #8]
 801da92:	f10d 0353 	add.w	r3, sp, #83	; 0x53
 801da96:	47d8      	blx	fp
 801da98:	4683      	mov	fp, r0
 801da9a:	b328      	cbz	r0, 801dae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe0>
 801da9c:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801daa0:	f1ba 0f00 	cmp.w	sl, #0
 801daa4:	d031      	beq.n	801db0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x102>
 801daa6:	f99b 200d 	ldrsb.w	r2, [fp, #13]
 801daaa:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801daae:	2a00      	cmp	r2, #0
 801dab0:	bfb4      	ite	lt
 801dab2:	f44f 7580 	movlt.w	r5, #256	; 0x100
 801dab6:	2500      	movge	r5, #0
 801dab8:	f1ba 0f01 	cmp.w	sl, #1
 801dabc:	ea45 0503 	orr.w	r5, r5, r3
 801dac0:	d125      	bne.n	801db0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x106>
 801dac2:	1b76      	subs	r6, r6, r5
 801dac4:	2c00      	cmp	r4, #0
 801dac6:	d147      	bne.n	801db58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801dac8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801daca:	19ab      	adds	r3, r5, r6
 801dacc:	4413      	add	r3, r2
 801dace:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801dad0:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dad4:	4293      	cmp	r3, r2
 801dad6:	da4a      	bge.n	801db6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801dad8:	e02b      	b.n	801db32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801dada:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dadc:	e7b8      	b.n	801da50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801dade:	4651      	mov	r1, sl
 801dae0:	9824      	ldr	r0, [sp, #144]	; 0x90
 801dae2:	f002 f84d 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dae6:	e7c1      	b.n	801da6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x64>
 801dae8:	6838      	ldr	r0, [r7, #0]
 801daea:	6803      	ldr	r3, [r0, #0]
 801daec:	691b      	ldr	r3, [r3, #16]
 801daee:	4798      	blx	r3
 801daf0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801daf4:	4298      	cmp	r0, r3
 801daf6:	d004      	beq.n	801db02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801daf8:	f242 030b 	movw	r3, #8203	; 0x200b
 801dafc:	4298      	cmp	r0, r3
 801dafe:	bf18      	it	ne
 801db00:	2500      	movne	r5, #0
 801db02:	f109 0901 	add.w	r9, r9, #1
 801db06:	4644      	mov	r4, r8
 801db08:	e7a6      	b.n	801da58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801db0a:	442e      	add	r6, r5
 801db0c:	e7cb      	b.n	801daa6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 801db0e:	2c00      	cmp	r4, #0
 801db10:	f000 80a6 	beq.w	801dc60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801db14:	f1ba 0f00 	cmp.w	sl, #0
 801db18:	d11e      	bne.n	801db58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801db1a:	6838      	ldr	r0, [r7, #0]
 801db1c:	465a      	mov	r2, fp
 801db1e:	4621      	mov	r1, r4
 801db20:	6803      	ldr	r3, [r0, #0]
 801db22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db24:	4798      	blx	r3
 801db26:	4406      	add	r6, r0
 801db28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801db2c:	1af3      	subs	r3, r6, r3
 801db2e:	4293      	cmp	r3, r2
 801db30:	dd1d      	ble.n	801db6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801db32:	4644      	mov	r4, r8
 801db34:	2c00      	cmp	r4, #0
 801db36:	f000 8091 	beq.w	801dc5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801db3a:	2c0a      	cmp	r4, #10
 801db3c:	f000 8087 	beq.w	801dc4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x246>
 801db40:	f109 0901 	add.w	r9, r9, #1
 801db44:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801db46:	4599      	cmp	r9, r3
 801db48:	f280 8082 	bge.w	801dc50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801db4c:	4651      	mov	r1, sl
 801db4e:	9824      	ldr	r0, [sp, #144]	; 0x90
 801db50:	f002 f816 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801db54:	4604      	mov	r4, r0
 801db56:	e7ed      	b.n	801db34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801db58:	6838      	ldr	r0, [r7, #0]
 801db5a:	465a      	mov	r2, fp
 801db5c:	4621      	mov	r1, r4
 801db5e:	6803      	ldr	r3, [r0, #0]
 801db60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db62:	4798      	blx	r3
 801db64:	f1ba 0f01 	cmp.w	sl, #1
 801db68:	eba6 0600 	sub.w	r6, r6, r0
 801db6c:	d0ac      	beq.n	801dac8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc0>
 801db6e:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801db72:	f99b 2009 	ldrsb.w	r2, [fp, #9]
 801db76:	f013 0f08 	tst.w	r3, #8
 801db7a:	f89b 1006 	ldrb.w	r1, [fp, #6]
 801db7e:	4432      	add	r2, r6
 801db80:	9821      	ldr	r0, [sp, #132]	; 0x84
 801db82:	bf14      	ite	ne
 801db84:	f44f 7380 	movne.w	r3, #256	; 0x100
 801db88:	2300      	moveq	r3, #0
 801db8a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801db8e:	430b      	orrs	r3, r1
 801db90:	4413      	add	r3, r2
 801db92:	42a3      	cmp	r3, r4
 801db94:	dbb5      	blt.n	801db02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801db96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db98:	429a      	cmp	r2, r3
 801db9a:	dab2      	bge.n	801db02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801db9c:	6838      	ldr	r0, [r7, #0]
 801db9e:	42b4      	cmp	r4, r6
 801dba0:	6803      	ldr	r3, [r0, #0]
 801dba2:	bfcc      	ite	gt
 801dba4:	1ba4      	subgt	r4, r4, r6
 801dba6:	2400      	movle	r4, #0
 801dba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbaa:	bfc8      	it	gt
 801dbac:	b2a4      	uxthgt	r4, r4
 801dbae:	4798      	blx	r3
 801dbb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dbb2:	4a2e      	ldr	r2, [pc, #184]	; (801dc6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x264>)
 801dbb4:	4418      	add	r0, r3
 801dbb6:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801dbba:	f89b e008 	ldrb.w	lr, [fp, #8]
 801dbbe:	f013 0f40 	tst.w	r3, #64	; 0x40
 801dbc2:	bf14      	ite	ne
 801dbc4:	4611      	movne	r1, r2
 801dbc6:	2100      	moveq	r1, #0
 801dbc8:	f013 0f20 	tst.w	r3, #32
 801dbcc:	ea41 010e 	orr.w	r1, r1, lr
 801dbd0:	bf14      	ite	ne
 801dbd2:	f44f 7280 	movne.w	r2, #256	; 0x100
 801dbd6:	2200      	moveq	r2, #0
 801dbd8:	430a      	orrs	r2, r1
 801dbda:	9921      	ldr	r1, [sp, #132]	; 0x84
 801dbdc:	1a80      	subs	r0, r0, r2
 801dbde:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801dbe2:	b280      	uxth	r0, r0
 801dbe4:	b202      	sxth	r2, r0
 801dbe6:	428a      	cmp	r2, r1
 801dbe8:	da2f      	bge.n	801dc4a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x242>
 801dbea:	f013 0f10 	tst.w	r3, #16
 801dbee:	f89b e007 	ldrb.w	lr, [fp, #7]
 801dbf2:	bf14      	ite	ne
 801dbf4:	f44f 7380 	movne.w	r3, #256	; 0x100
 801dbf8:	2300      	moveq	r3, #0
 801dbfa:	ea43 030e 	orr.w	r3, r3, lr
 801dbfe:	441a      	add	r2, r3
 801dc00:	4291      	cmp	r1, r2
 801dc02:	f73f af7e 	bgt.w	801db02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dc06:	1a08      	subs	r0, r1, r0
 801dc08:	460a      	mov	r2, r1
 801dc0a:	b280      	uxth	r0, r0
 801dc0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc0e:	6819      	ldr	r1, [r3, #0]
 801dc10:	79bb      	ldrb	r3, [r7, #6]
 801dc12:	930a      	str	r3, [sp, #40]	; 0x28
 801dc14:	7bbb      	ldrb	r3, [r7, #14]
 801dc16:	9309      	str	r3, [sp, #36]	; 0x24
 801dc18:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 801dc1c:	9308      	str	r3, [sp, #32]
 801dc1e:	68bb      	ldr	r3, [r7, #8]
 801dc20:	9402      	str	r4, [sp, #8]
 801dc22:	4434      	add	r4, r6
 801dc24:	9307      	str	r3, [sp, #28]
 801dc26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dc28:	b224      	sxth	r4, r4
 801dc2a:	9003      	str	r0, [sp, #12]
 801dc2c:	9306      	str	r3, [sp, #24]
 801dc2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dc30:	f8cd b014 	str.w	fp, [sp, #20]
 801dc34:	9304      	str	r3, [sp, #16]
 801dc36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dc38:	9201      	str	r2, [sp, #4]
 801dc3a:	9400      	str	r4, [sp, #0]
 801dc3c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dc3e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dc40:	681a      	ldr	r2, [r3, #0]
 801dc42:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dc44:	685b      	ldr	r3, [r3, #4]
 801dc46:	47a0      	blx	r4
 801dc48:	e75b      	b.n	801db02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dc4a:	2000      	movs	r0, #0
 801dc4c:	e7de      	b.n	801dc0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 801dc4e:	240a      	movs	r4, #10
 801dc50:	fab4 f084 	clz	r0, r4
 801dc54:	0940      	lsrs	r0, r0, #5
 801dc56:	b017      	add	sp, #92	; 0x5c
 801dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc5c:	2400      	movs	r4, #0
 801dc5e:	e7f7      	b.n	801dc50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801dc60:	f1ba 0f00 	cmp.w	sl, #0
 801dc64:	f43f af60 	beq.w	801db28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x120>
 801dc68:	e781      	b.n	801db6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801dc6a:	bf00      	nop
 801dc6c:	fffffe00 	.word	0xfffffe00

0801dc70 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801dc70:	b530      	push	{r4, r5, lr}
 801dc72:	8ac4      	ldrh	r4, [r0, #22]
 801dc74:	8b45      	ldrh	r5, [r0, #26]
 801dc76:	8343      	strh	r3, [r0, #26]
 801dc78:	442c      	add	r4, r5
 801dc7a:	1ae4      	subs	r4, r4, r3
 801dc7c:	8b83      	ldrh	r3, [r0, #28]
 801dc7e:	82c4      	strh	r4, [r0, #22]
 801dc80:	8b04      	ldrh	r4, [r0, #24]
 801dc82:	4422      	add	r2, r4
 801dc84:	440c      	add	r4, r1
 801dc86:	1a59      	subs	r1, r3, r1
 801dc88:	83c2      	strh	r2, [r0, #30]
 801dc8a:	8304      	strh	r4, [r0, #24]
 801dc8c:	8381      	strh	r1, [r0, #28]
 801dc8e:	bd30      	pop	{r4, r5, pc}

0801dc90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc94:	f890 b009 	ldrb.w	fp, [r0, #9]
 801dc98:	b085      	sub	sp, #20
 801dc9a:	4604      	mov	r4, r0
 801dc9c:	460f      	mov	r7, r1
 801dc9e:	f1ab 0303 	sub.w	r3, fp, #3
 801dca2:	b331      	cbz	r1, 801dcf2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 801dca4:	2b01      	cmp	r3, #1
 801dca6:	d922      	bls.n	801dcee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801dca8:	f10b 32ff 	add.w	r2, fp, #4294967295
 801dcac:	f1d2 0a00 	rsbs	sl, r2, #0
 801dcb0:	eb4a 0a02 	adc.w	sl, sl, r2
 801dcb4:	f1ab 0302 	sub.w	r3, fp, #2
 801dcb8:	2500      	movs	r5, #0
 801dcba:	f1d3 0b00 	rsbs	fp, r3, #0
 801dcbe:	9501      	str	r5, [sp, #4]
 801dcc0:	eb4b 0b03 	adc.w	fp, fp, r3
 801dcc4:	2600      	movs	r6, #0
 801dcc6:	82e6      	strh	r6, [r4, #22]
 801dcc8:	8326      	strh	r6, [r4, #24]
 801dcca:	7a21      	ldrb	r1, [r4, #8]
 801dccc:	6860      	ldr	r0, [r4, #4]
 801dcce:	f8b4 9000 	ldrh.w	r9, [r4]
 801dcd2:	f001 ff55 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dcd6:	4601      	mov	r1, r0
 801dcd8:	8020      	strh	r0, [r4, #0]
 801dcda:	b9c8      	cbnz	r0, 801dd10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x80>
 801dcdc:	8ba2      	ldrh	r2, [r4, #28]
 801dcde:	2300      	movs	r3, #0
 801dce0:	4611      	mov	r1, r2
 801dce2:	4620      	mov	r0, r4
 801dce4:	b005      	add	sp, #20
 801dce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcea:	f7ff bfc1 	b.w	801dc70 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801dcee:	468a      	mov	sl, r1
 801dcf0:	e7e0      	b.n	801dcb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 801dcf2:	2b01      	cmp	r3, #1
 801dcf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dcf8:	468a      	mov	sl, r1
 801dcfa:	bf8c      	ite	hi
 801dcfc:	2300      	movhi	r3, #0
 801dcfe:	2301      	movls	r3, #1
 801dd00:	f1bb 0f01 	cmp.w	fp, #1
 801dd04:	468b      	mov	fp, r1
 801dd06:	9301      	str	r3, [sp, #4]
 801dd08:	bf8c      	ite	hi
 801dd0a:	2500      	movhi	r5, #0
 801dd0c:	2501      	movls	r5, #1
 801dd0e:	e7d9      	b.n	801dcc4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x34>
 801dd10:	8b63      	ldrh	r3, [r4, #26]
 801dd12:	280a      	cmp	r0, #10
 801dd14:	f103 0301 	add.w	r3, r3, #1
 801dd18:	8363      	strh	r3, [r4, #26]
 801dd1a:	d0df      	beq.n	801dcdc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801dd1c:	6920      	ldr	r0, [r4, #16]
 801dd1e:	6803      	ldr	r3, [r0, #0]
 801dd20:	68db      	ldr	r3, [r3, #12]
 801dd22:	4798      	blx	r3
 801dd24:	4602      	mov	r2, r0
 801dd26:	2800      	cmp	r0, #0
 801dd28:	d0cf      	beq.n	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801dd2a:	8883      	ldrh	r3, [r0, #4]
 801dd2c:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801dd30:	2b20      	cmp	r3, #32
 801dd32:	8023      	strh	r3, [r4, #0]
 801dd34:	d103      	bne.n	801dd3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xae>
 801dd36:	f1b9 0f20 	cmp.w	r9, #32
 801dd3a:	bf18      	it	ne
 801dd3c:	4646      	movne	r6, r8
 801dd3e:	7a93      	ldrb	r3, [r2, #10]
 801dd40:	4649      	mov	r1, r9
 801dd42:	6920      	ldr	r0, [r4, #16]
 801dd44:	9302      	str	r3, [sp, #8]
 801dd46:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	bfb4      	ite	lt
 801dd4e:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801dd52:	2300      	movge	r3, #0
 801dd54:	9303      	str	r3, [sp, #12]
 801dd56:	6803      	ldr	r3, [r0, #0]
 801dd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd5a:	4798      	blx	r3
 801dd5c:	9b03      	ldr	r3, [sp, #12]
 801dd5e:	9a02      	ldr	r2, [sp, #8]
 801dd60:	8aa1      	ldrh	r1, [r4, #20]
 801dd62:	431a      	orrs	r2, r3
 801dd64:	8b23      	ldrh	r3, [r4, #24]
 801dd66:	4402      	add	r2, r0
 801dd68:	8ba0      	ldrh	r0, [r4, #28]
 801dd6a:	4402      	add	r2, r0
 801dd6c:	b292      	uxth	r2, r2
 801dd6e:	83a2      	strh	r2, [r4, #28]
 801dd70:	4413      	add	r3, r2
 801dd72:	b327      	cbz	r7, 801ddbe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12e>
 801dd74:	f1ba 0f00 	cmp.w	sl, #0
 801dd78:	d105      	bne.n	801dd86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf6>
 801dd7a:	f1bb 0f00 	cmp.w	fp, #0
 801dd7e:	d00f      	beq.n	801dda0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801dd80:	8820      	ldrh	r0, [r4, #0]
 801dd82:	2820      	cmp	r0, #32
 801dd84:	d10c      	bne.n	801dda0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801dd86:	8c20      	ldrh	r0, [r4, #32]
 801dd88:	4418      	add	r0, r3
 801dd8a:	4281      	cmp	r1, r0
 801dd8c:	da02      	bge.n	801dd94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x104>
 801dd8e:	8ae0      	ldrh	r0, [r4, #22]
 801dd90:	2800      	cmp	r0, #0
 801dd92:	d13a      	bne.n	801de0a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17a>
 801dd94:	2300      	movs	r3, #0
 801dd96:	4611      	mov	r1, r2
 801dd98:	4620      	mov	r0, r4
 801dd9a:	f7ff ff69 	bl	801dc70 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801dd9e:	e794      	b.n	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801dda0:	428b      	cmp	r3, r1
 801dda2:	dd92      	ble.n	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801dda4:	8ae3      	ldrh	r3, [r4, #22]
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d08f      	beq.n	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801ddaa:	2301      	movs	r3, #1
 801ddac:	8c22      	ldrh	r2, [r4, #32]
 801ddae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801ddb2:	8be3      	ldrh	r3, [r4, #30]
 801ddb4:	4413      	add	r3, r2
 801ddb6:	83e3      	strh	r3, [r4, #30]
 801ddb8:	b005      	add	sp, #20
 801ddba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddbe:	428b      	cmp	r3, r1
 801ddc0:	dd17      	ble.n	801ddf2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 801ddc2:	9b01      	ldr	r3, [sp, #4]
 801ddc4:	b113      	cbz	r3, 801ddcc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13c>
 801ddc6:	2301      	movs	r3, #1
 801ddc8:	4642      	mov	r2, r8
 801ddca:	e789      	b.n	801dce0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801ddcc:	2d00      	cmp	r5, #0
 801ddce:	f43f af7c 	beq.w	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801ddd2:	8823      	ldrh	r3, [r4, #0]
 801ddd4:	2b20      	cmp	r3, #32
 801ddd6:	f43f af78 	beq.w	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801ddda:	f1b9 0f20 	cmp.w	r9, #32
 801ddde:	d103      	bne.n	801dde8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 801dde0:	2301      	movs	r3, #1
 801dde2:	4632      	mov	r2, r6
 801dde4:	4641      	mov	r1, r8
 801dde6:	e77c      	b.n	801dce2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801dde8:	8ae3      	ldrh	r3, [r4, #22]
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	f43f af6d 	beq.w	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801ddf0:	e7e2      	b.n	801ddb8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x128>
 801ddf2:	8823      	ldrh	r3, [r4, #0]
 801ddf4:	2b20      	cmp	r3, #32
 801ddf6:	f43f af68 	beq.w	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801ddfa:	f1b9 0f20 	cmp.w	r9, #32
 801ddfe:	f47f af64 	bne.w	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801de02:	2301      	movs	r3, #1
 801de04:	4632      	mov	r2, r6
 801de06:	4641      	mov	r1, r8
 801de08:	e7c6      	b.n	801dd98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x108>
 801de0a:	428b      	cmp	r3, r1
 801de0c:	f77f af5d 	ble.w	801dcca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801de10:	e7cb      	b.n	801ddaa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x11a>

0801de12 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801de12:	b570      	push	{r4, r5, r6, lr}
 801de14:	4606      	mov	r6, r0
 801de16:	b08c      	sub	sp, #48	; 0x30
 801de18:	4615      	mov	r5, r2
 801de1a:	b191      	cbz	r1, 801de42 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801de1c:	2401      	movs	r4, #1
 801de1e:	9101      	str	r1, [sp, #4]
 801de20:	9300      	str	r3, [sp, #0]
 801de22:	4601      	mov	r1, r0
 801de24:	4613      	mov	r3, r2
 801de26:	a803      	add	r0, sp, #12
 801de28:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801de2c:	f7ff fcd2 	bl	801d7d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801de30:	2100      	movs	r1, #0
 801de32:	a803      	add	r0, sp, #12
 801de34:	f7ff ff2c 	bl	801dc90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801de38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801de3c:	b173      	cbz	r3, 801de5c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801de3e:	3401      	adds	r4, #1
 801de40:	e7f6      	b.n	801de30 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801de42:	2401      	movs	r4, #1
 801de44:	4611      	mov	r1, r2
 801de46:	f001 fe9b 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801de4a:	280a      	cmp	r0, #10
 801de4c:	4629      	mov	r1, r5
 801de4e:	4630      	mov	r0, r6
 801de50:	bf08      	it	eq
 801de52:	3401      	addeq	r4, #1
 801de54:	f001 fe94 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801de58:	2800      	cmp	r0, #0
 801de5a:	d1f6      	bne.n	801de4a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801de5c:	b2a0      	uxth	r0, r4
 801de5e:	b00c      	add	sp, #48	; 0x30
 801de60:	bd70      	pop	{r4, r5, r6, pc}
	...

0801de64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801de64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de68:	b0ab      	sub	sp, #172	; 0xac
 801de6a:	4689      	mov	r9, r1
 801de6c:	461c      	mov	r4, r3
 801de6e:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 801de72:	9009      	str	r0, [sp, #36]	; 0x24
 801de74:	f1ba 0f00 	cmp.w	sl, #0
 801de78:	f000 80ac 	beq.w	801dfd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	f000 80a8 	beq.w	801dfd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801de84:	7ba3      	ldrb	r3, [r4, #14]
 801de86:	2b00      	cmp	r3, #0
 801de88:	f000 80a4 	beq.w	801dfd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801de8c:	6810      	ldr	r0, [r2, #0]
 801de8e:	ab0b      	add	r3, sp, #44	; 0x2c
 801de90:	6851      	ldr	r1, [r2, #4]
 801de92:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 801de96:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 801de9a:	c303      	stmia	r3!, {r0, r1}
 801de9c:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 801dea0:	2300      	movs	r3, #0
 801dea2:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801dea6:	a80b      	add	r0, sp, #44	; 0x2c
 801dea8:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 801deac:	a90d      	add	r1, sp, #52	; 0x34
 801deae:	79a2      	ldrb	r2, [r4, #6]
 801deb0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801deb4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801deb8:	f7ff fd54 	bl	801d964 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801debc:	a90d      	add	r1, sp, #52	; 0x34
 801debe:	79a2      	ldrb	r2, [r4, #6]
 801dec0:	4608      	mov	r0, r1
 801dec2:	f7ff fd4f 	bl	801d964 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801dec6:	4640      	mov	r0, r8
 801dec8:	f001 fea0 	bl	801fc0c <_ZN8touchgfx12TextProviderC1Ev>
 801decc:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801dece:	4651      	mov	r1, sl
 801ded0:	4640      	mov	r0, r8
 801ded2:	f001 fea4 	bl	801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801ded6:	a815      	add	r0, sp, #84	; 0x54
 801ded8:	f001 fe98 	bl	801fc0c <_ZN8touchgfx12TextProviderC1Ev>
 801dedc:	7927      	ldrb	r7, [r4, #4]
 801dede:	b127      	cbz	r7, 801deea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x86>
 801dee0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801dee2:	4651      	mov	r1, sl
 801dee4:	a815      	add	r0, sp, #84	; 0x54
 801dee6:	f001 fe9a 	bl	801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801deea:	6820      	ldr	r0, [r4, #0]
 801deec:	89a5      	ldrh	r5, [r4, #12]
 801deee:	6803      	ldr	r3, [r0, #0]
 801def0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801def2:	4798      	blx	r3
 801def4:	4405      	add	r5, r0
 801def6:	a81b      	add	r0, sp, #108	; 0x6c
 801def8:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801defc:	f001 fe86 	bl	801fc0c <_ZN8touchgfx12TextProviderC1Ev>
 801df00:	7c23      	ldrb	r3, [r4, #16]
 801df02:	fb96 f6f5 	sdiv	r6, r6, r5
 801df06:	b123      	cbz	r3, 801df12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xae>
 801df08:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801df0a:	4651      	mov	r1, sl
 801df0c:	a81b      	add	r0, sp, #108	; 0x6c
 801df0e:	f001 fe86 	bl	801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801df12:	7c21      	ldrb	r1, [r4, #16]
 801df14:	a821      	add	r0, sp, #132	; 0x84
 801df16:	7963      	ldrb	r3, [r4, #5]
 801df18:	9101      	str	r1, [sp, #4]
 801df1a:	6821      	ldr	r1, [r4, #0]
 801df1c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801df20:	9100      	str	r1, [sp, #0]
 801df22:	a91b      	add	r1, sp, #108	; 0x6c
 801df24:	f7ff fc56 	bl	801d7d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801df28:	7c23      	ldrb	r3, [r4, #16]
 801df2a:	bb03      	cbnz	r3, 801df6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x10a>
 801df2c:	fa1f fa85 	uxth.w	sl, r5
 801df30:	2e00      	cmp	r6, #0
 801df32:	dd52      	ble.n	801dfda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801df34:	7961      	ldrb	r1, [r4, #5]
 801df36:	4640      	mov	r0, r8
 801df38:	f001 fe22 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801df3c:	4683      	mov	fp, r0
 801df3e:	b11f      	cbz	r7, 801df48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe4>
 801df40:	7961      	ldrb	r1, [r4, #5]
 801df42:	a815      	add	r0, sp, #84	; 0x54
 801df44:	f001 fe1c 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801df48:	f1bb 0f00 	cmp.w	fp, #0
 801df4c:	d042      	beq.n	801dfd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801df4e:	f1bb 0f0a 	cmp.w	fp, #10
 801df52:	d1ed      	bne.n	801df30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801df54:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801df58:	3e01      	subs	r6, #1
 801df5a:	4453      	add	r3, sl
 801df5c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801df60:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801df64:	eba3 030a 	sub.w	r3, r3, sl
 801df68:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801df6c:	e7e0      	b.n	801df30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801df6e:	006b      	lsls	r3, r5, #1
 801df70:	fa1f fa85 	uxth.w	sl, r5
 801df74:	9308      	str	r3, [sp, #32]
 801df76:	2e00      	cmp	r6, #0
 801df78:	dd2f      	ble.n	801dfda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801df7a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801df7e:	a821      	add	r0, sp, #132	; 0x84
 801df80:	9b08      	ldr	r3, [sp, #32]
 801df82:	428b      	cmp	r3, r1
 801df84:	bfd4      	ite	le
 801df86:	2100      	movle	r1, #0
 801df88:	2101      	movgt	r1, #1
 801df8a:	f7ff fe81 	bl	801dc90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801df8e:	f8bd b09a 	ldrh.w	fp, [sp, #154]	; 0x9a
 801df92:	f1bb 0f00 	cmp.w	fp, #0
 801df96:	d00d      	beq.n	801dfb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x150>
 801df98:	7961      	ldrb	r1, [r4, #5]
 801df9a:	4640      	mov	r0, r8
 801df9c:	f001 fdf0 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dfa0:	b11f      	cbz	r7, 801dfaa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x146>
 801dfa2:	7961      	ldrb	r1, [r4, #5]
 801dfa4:	a815      	add	r0, sp, #84	; 0x54
 801dfa6:	f001 fdeb 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dfaa:	f10b 33ff 	add.w	r3, fp, #4294967295
 801dfae:	fa1f fb83 	uxth.w	fp, r3
 801dfb2:	e7ee      	b.n	801df92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801dfb4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801dfb8:	3e01      	subs	r6, #1
 801dfba:	4453      	add	r3, sl
 801dfbc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801dfc0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801dfc4:	eba3 030a 	sub.w	r3, r3, sl
 801dfc8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801dfcc:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d1d0      	bne.n	801df76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x112>
 801dfd4:	b02b      	add	sp, #172	; 0xac
 801dfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfda:	4b40      	ldr	r3, [pc, #256]	; (801e0dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801dfdc:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801dfe0:	f04f 0a02 	mov.w	sl, #2
 801dfe4:	6818      	ldr	r0, [r3, #0]
 801dfe6:	6803      	ldr	r3, [r0, #0]
 801dfe8:	6a1b      	ldr	r3, [r3, #32]
 801dfea:	4798      	blx	r3
 801dfec:	4606      	mov	r6, r0
 801dfee:	7c23      	ldrb	r3, [r4, #16]
 801dff0:	2b00      	cmp	r3, #0
 801dff2:	d067      	beq.n	801e0c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801dff4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801dff8:	a821      	add	r0, sp, #132	; 0x84
 801dffa:	458b      	cmp	fp, r1
 801dffc:	bfd4      	ite	le
 801dffe:	2100      	movle	r1, #0
 801e000:	2101      	movgt	r1, #1
 801e002:	f7ff fe45 	bl	801dc90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e006:	2f00      	cmp	r7, #0
 801e008:	d055      	beq.n	801e0b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801e00a:	7c23      	ldrb	r3, [r4, #16]
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d05b      	beq.n	801e0c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 801e010:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801e014:	7922      	ldrb	r2, [r4, #4]
 801e016:	2a01      	cmp	r2, #1
 801e018:	d145      	bne.n	801e0a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801e01a:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801e01e:	1ac0      	subs	r0, r0, r3
 801e020:	fb90 f0fa 	sdiv	r0, r0, sl
 801e024:	b200      	sxth	r0, r0
 801e026:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e02a:	4418      	add	r0, r3
 801e02c:	7c23      	ldrb	r3, [r4, #16]
 801e02e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801e032:	2b00      	cmp	r3, #0
 801e034:	d043      	beq.n	801e0be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801e036:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 801e03a:	9205      	str	r2, [sp, #20]
 801e03c:	2200      	movs	r2, #0
 801e03e:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 801e042:	9203      	str	r2, [sp, #12]
 801e044:	aa0b      	add	r2, sp, #44	; 0x2c
 801e046:	9106      	str	r1, [sp, #24]
 801e048:	4631      	mov	r1, r6
 801e04a:	9201      	str	r2, [sp, #4]
 801e04c:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 801e050:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801e054:	9200      	str	r2, [sp, #0]
 801e056:	464a      	mov	r2, r9
 801e058:	f8cd 8010 	str.w	r8, [sp, #16]
 801e05c:	9402      	str	r4, [sp, #8]
 801e05e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e060:	f7ff fcd2 	bl	801da08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801e064:	b9c8      	cbnz	r0, 801e09a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e066:	b2aa      	uxth	r2, r5
 801e068:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e06c:	4611      	mov	r1, r2
 801e06e:	4413      	add	r3, r2
 801e070:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e074:	b21b      	sxth	r3, r3
 801e076:	1a52      	subs	r2, r2, r1
 801e078:	7c21      	ldrb	r1, [r4, #16]
 801e07a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e07e:	b212      	sxth	r2, r2
 801e080:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e084:	b109      	cbz	r1, 801e08a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x226>
 801e086:	4295      	cmp	r5, r2
 801e088:	dc07      	bgt.n	801e09a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e08a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e08e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e092:	440a      	add	r2, r1
 801e094:	b212      	sxth	r2, r2
 801e096:	4293      	cmp	r3, r2
 801e098:	dda9      	ble.n	801dfee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 801e09a:	4b10      	ldr	r3, [pc, #64]	; (801e0dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801e09c:	6818      	ldr	r0, [r3, #0]
 801e09e:	6803      	ldr	r3, [r0, #0]
 801e0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0a2:	4798      	blx	r3
 801e0a4:	e796      	b.n	801dfd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e0a6:	2a02      	cmp	r2, #2
 801e0a8:	d107      	bne.n	801e0ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801e0aa:	7be2      	ldrb	r2, [r4, #15]
 801e0ac:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801e0b0:	1a80      	subs	r0, r0, r2
 801e0b2:	1ac0      	subs	r0, r0, r3
 801e0b4:	e7b6      	b.n	801e024 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>
 801e0b6:	7be0      	ldrb	r0, [r4, #15]
 801e0b8:	e7b5      	b.n	801e026 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801e0ba:	2000      	movs	r0, #0
 801e0bc:	e7b3      	b.n	801e026 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801e0be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e0c2:	e7ba      	b.n	801e03a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801e0c4:	2f00      	cmp	r7, #0
 801e0c6:	d0f6      	beq.n	801e0b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801e0c8:	2300      	movs	r3, #0
 801e0ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e0ce:	6821      	ldr	r1, [r4, #0]
 801e0d0:	a815      	add	r0, sp, #84	; 0x54
 801e0d2:	f7ff fc11 	bl	801d8f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801e0d6:	b203      	sxth	r3, r0
 801e0d8:	e79c      	b.n	801e014 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b0>
 801e0da:	bf00      	nop
 801e0dc:	2000ba4c 	.word	0x2000ba4c

0801e0e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801e0e0:	2b02      	cmp	r3, #2
 801e0e2:	d00e      	beq.n	801e102 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801e0e4:	2b03      	cmp	r3, #3
 801e0e6:	d012      	beq.n	801e10e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801e0e8:	2b01      	cmp	r3, #1
 801e0ea:	d003      	beq.n	801e0f4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801e0ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e0f0:	1850      	adds	r0, r2, r1
 801e0f2:	4770      	bx	lr
 801e0f4:	8803      	ldrh	r3, [r0, #0]
 801e0f6:	8880      	ldrh	r0, [r0, #4]
 801e0f8:	4418      	add	r0, r3
 801e0fa:	b200      	sxth	r0, r0
 801e0fc:	1a80      	subs	r0, r0, r2
 801e0fe:	3801      	subs	r0, #1
 801e100:	4770      	bx	lr
 801e102:	8803      	ldrh	r3, [r0, #0]
 801e104:	8880      	ldrh	r0, [r0, #4]
 801e106:	4418      	add	r0, r3
 801e108:	b200      	sxth	r0, r0
 801e10a:	1a40      	subs	r0, r0, r1
 801e10c:	e7f7      	b.n	801e0fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801e10e:	f9b0 0000 	ldrsh.w	r0, [r0]
 801e112:	4410      	add	r0, r2
 801e114:	4770      	bx	lr

0801e116 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801e116:	2b02      	cmp	r3, #2
 801e118:	d008      	beq.n	801e12c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801e11a:	2b03      	cmp	r3, #3
 801e11c:	d00d      	beq.n	801e13a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801e11e:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801e122:	2b01      	cmp	r3, #1
 801e124:	bf14      	ite	ne
 801e126:	1880      	addne	r0, r0, r2
 801e128:	1840      	addeq	r0, r0, r1
 801e12a:	4770      	bx	lr
 801e12c:	8843      	ldrh	r3, [r0, #2]
 801e12e:	88c0      	ldrh	r0, [r0, #6]
 801e130:	4418      	add	r0, r3
 801e132:	b200      	sxth	r0, r0
 801e134:	1a80      	subs	r0, r0, r2
 801e136:	3801      	subs	r0, #1
 801e138:	4770      	bx	lr
 801e13a:	8843      	ldrh	r3, [r0, #2]
 801e13c:	88c0      	ldrh	r0, [r0, #6]
 801e13e:	4418      	add	r0, r3
 801e140:	b200      	sxth	r0, r0
 801e142:	1a40      	subs	r0, r0, r1
 801e144:	e7f7      	b.n	801e136 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801e148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801e148:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e150:	b0d1      	sub	sp, #324	; 0x144
 801e152:	ed92 7a02 	vldr	s14, [r2, #8]
 801e156:	4683      	mov	fp, r0
 801e158:	4614      	mov	r4, r2
 801e15a:	930a      	str	r3, [sp, #40]	; 0x28
 801e15c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e160:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
 801e164:	9109      	str	r1, [sp, #36]	; 0x24
 801e166:	930b      	str	r3, [sp, #44]	; 0x2c
 801e168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e16c:	f89d 3174 	ldrb.w	r3, [sp, #372]	; 0x174
 801e170:	9f5b      	ldr	r7, [sp, #364]	; 0x16c
 801e172:	930c      	str	r3, [sp, #48]	; 0x30
 801e174:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 801e178:	930d      	str	r3, [sp, #52]	; 0x34
 801e17a:	f240 8140 	bls.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e17e:	ed92 7a07 	vldr	s14, [r2, #28]
 801e182:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e18a:	f240 8138 	bls.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e18e:	ed92 7a0c 	vldr	s14, [r2, #48]	; 0x30
 801e192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e19a:	f240 8130 	bls.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e19e:	6812      	ldr	r2, [r2, #0]
 801e1a0:	4b98      	ldr	r3, [pc, #608]	; (801e404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2bc>)
 801e1a2:	429a      	cmp	r2, r3
 801e1a4:	f2c0 812b 	blt.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e1a8:	4997      	ldr	r1, [pc, #604]	; (801e408 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c0>)
 801e1aa:	6963      	ldr	r3, [r4, #20]
 801e1ac:	428a      	cmp	r2, r1
 801e1ae:	f300 8126 	bgt.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e1b2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801e1b6:	4895      	ldr	r0, [pc, #596]	; (801e40c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c4>)
 801e1b8:	33ff      	adds	r3, #255	; 0xff
 801e1ba:	4283      	cmp	r3, r0
 801e1bc:	f200 811f 	bhi.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e1c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e1c2:	4d93      	ldr	r5, [pc, #588]	; (801e410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c8>)
 801e1c4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801e1c8:	33ff      	adds	r3, #255	; 0xff
 801e1ca:	42ab      	cmp	r3, r5
 801e1cc:	f200 8117 	bhi.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e1d0:	6862      	ldr	r2, [r4, #4]
 801e1d2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801e1d6:	33ff      	adds	r3, #255	; 0xff
 801e1d8:	4283      	cmp	r3, r0
 801e1da:	f200 8110 	bhi.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e1de:	69a1      	ldr	r1, [r4, #24]
 801e1e0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801e1e4:	33ff      	adds	r3, #255	; 0xff
 801e1e6:	4283      	cmp	r3, r0
 801e1e8:	f200 8109 	bhi.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e1ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e1ee:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801e1f2:	30ff      	adds	r0, #255	; 0xff
 801e1f4:	42a8      	cmp	r0, r5
 801e1f6:	f200 8102 	bhi.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e1fa:	428a      	cmp	r2, r1
 801e1fc:	da7a      	bge.n	801e2f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ac>
 801e1fe:	429a      	cmp	r2, r3
 801e200:	f300 8084 	bgt.w	801e30c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c4>
 801e204:	4299      	cmp	r1, r3
 801e206:	f2c0 8088 	blt.w	801e31a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d2>
 801e20a:	2501      	movs	r5, #1
 801e20c:	2602      	movs	r6, #2
 801e20e:	46a9      	mov	r9, r5
 801e210:	46b0      	mov	r8, r6
 801e212:	f04f 0a00 	mov.w	sl, #0
 801e216:	4621      	mov	r1, r4
 801e218:	a83f      	add	r0, sp, #252	; 0xfc
 801e21a:	f001 fd3d 	bl	801fc98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801e21e:	4622      	mov	r2, r4
 801e220:	f8cd 9000 	str.w	r9, [sp]
 801e224:	4653      	mov	r3, sl
 801e226:	a93f      	add	r1, sp, #252	; 0xfc
 801e228:	a80f      	add	r0, sp, #60	; 0x3c
 801e22a:	f001 fe65 	bl	801fef8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801e22e:	f8cd 8000 	str.w	r8, [sp]
 801e232:	4622      	mov	r2, r4
 801e234:	4653      	mov	r3, sl
 801e236:	a93f      	add	r1, sp, #252	; 0xfc
 801e238:	a81f      	add	r0, sp, #124	; 0x7c
 801e23a:	f001 fe5d 	bl	801fef8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801e23e:	4643      	mov	r3, r8
 801e240:	4622      	mov	r2, r4
 801e242:	f8cd 9000 	str.w	r9, [sp]
 801e246:	a93f      	add	r1, sp, #252	; 0xfc
 801e248:	a82f      	add	r0, sp, #188	; 0xbc
 801e24a:	f001 fe55 	bl	801fef8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801e24e:	42ae      	cmp	r6, r5
 801e250:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 801e252:	bfac      	ite	ge
 801e254:	ad1f      	addge	r5, sp, #124	; 0x7c
 801e256:	ad0f      	addlt	r5, sp, #60	; 0x3c
 801e258:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 801e25c:	bfa8      	it	ge
 801e25e:	2601      	movge	r6, #1
 801e260:	696b      	ldr	r3, [r5, #20]
 801e262:	bfa8      	it	ge
 801e264:	f10d 083c 	addge.w	r8, sp, #60	; 0x3c
 801e268:	88fa      	ldrh	r2, [r7, #6]
 801e26a:	bfb8      	it	lt
 801e26c:	2600      	movlt	r6, #0
 801e26e:	444b      	add	r3, r9
 801e270:	f9b7 9002 	ldrsh.w	r9, [r7, #2]
 801e274:	bfb8      	it	lt
 801e276:	f10d 087c 	addlt.w	r8, sp, #124	; 0x7c
 801e27a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e27c:	444a      	add	r2, r9
 801e27e:	b212      	sxth	r2, r2
 801e280:	4293      	cmp	r3, r2
 801e282:	da56      	bge.n	801e332 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ea>
 801e284:	454b      	cmp	r3, r9
 801e286:	da08      	bge.n	801e29a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 801e288:	2c00      	cmp	r4, #0
 801e28a:	dd60      	ble.n	801e34e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x206>
 801e28c:	eba9 0903 	sub.w	r9, r9, r3
 801e290:	454c      	cmp	r4, r9
 801e292:	db50      	blt.n	801e336 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ee>
 801e294:	f1b9 0f00 	cmp.w	r9, #0
 801e298:	dc4e      	bgt.n	801e338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 801e29a:	2c00      	cmp	r4, #0
 801e29c:	dd57      	ble.n	801e34e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x206>
 801e29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e2a0:	4658      	mov	r0, fp
 801e2a2:	f8db 3000 	ldr.w	r3, [fp]
 801e2a6:	3c01      	subs	r4, #1
 801e2a8:	9206      	str	r2, [sp, #24]
 801e2aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e2ac:	9703      	str	r7, [sp, #12]
 801e2ae:	9205      	str	r2, [sp, #20]
 801e2b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e2b2:	f8cd 8000 	str.w	r8, [sp]
 801e2b6:	9204      	str	r2, [sp, #16]
 801e2b8:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 801e2ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e2bc:	9202      	str	r2, [sp, #8]
 801e2be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e2c0:	9201      	str	r2, [sp, #4]
 801e2c2:	aa3f      	add	r2, sp, #252	; 0xfc
 801e2c4:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 801e2c8:	462b      	mov	r3, r5
 801e2ca:	47c8      	blx	r9
 801e2cc:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 801e2ce:	88f9      	ldrh	r1, [r7, #6]
 801e2d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e2d4:	696b      	ldr	r3, [r5, #20]
 801e2d6:	441a      	add	r2, r3
 801e2d8:	887b      	ldrh	r3, [r7, #2]
 801e2da:	440b      	add	r3, r1
 801e2dc:	3201      	adds	r2, #1
 801e2de:	b21b      	sxth	r3, r3
 801e2e0:	429a      	cmp	r2, r3
 801e2e2:	f280 808c 	bge.w	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e2e6:	a81f      	add	r0, sp, #124	; 0x7c
 801e2e8:	f7ff fab7 	bl	801d85a <_ZN8touchgfx4Edge4stepEv>
 801e2ec:	a80f      	add	r0, sp, #60	; 0x3c
 801e2ee:	f7ff fab4 	bl	801d85a <_ZN8touchgfx4Edge4stepEv>
 801e2f2:	e7d2      	b.n	801e29a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 801e2f4:	4299      	cmp	r1, r3
 801e2f6:	dc13      	bgt.n	801e320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d8>
 801e2f8:	429a      	cmp	r2, r3
 801e2fa:	db14      	blt.n	801e326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1de>
 801e2fc:	2602      	movs	r6, #2
 801e2fe:	2503      	movs	r5, #3
 801e300:	f04f 0900 	mov.w	r9, #0
 801e304:	46b0      	mov	r8, r6
 801e306:	f04f 0a01 	mov.w	sl, #1
 801e30a:	e784      	b.n	801e216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xce>
 801e30c:	2501      	movs	r5, #1
 801e30e:	2600      	movs	r6, #0
 801e310:	46a9      	mov	r9, r5
 801e312:	46b0      	mov	r8, r6
 801e314:	f04f 0a02 	mov.w	sl, #2
 801e318:	e77d      	b.n	801e216 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xce>
 801e31a:	2502      	movs	r5, #2
 801e31c:	2601      	movs	r6, #1
 801e31e:	e776      	b.n	801e20e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc6>
 801e320:	2500      	movs	r5, #0
 801e322:	2601      	movs	r6, #1
 801e324:	e7f4      	b.n	801e310 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c8>
 801e326:	2502      	movs	r5, #2
 801e328:	2603      	movs	r6, #3
 801e32a:	f04f 0800 	mov.w	r8, #0
 801e32e:	46a9      	mov	r9, r5
 801e330:	e7e9      	b.n	801e306 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1be>
 801e332:	46a1      	mov	r9, r4
 801e334:	e7ae      	b.n	801e294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x14c>
 801e336:	46a1      	mov	r9, r4
 801e338:	4649      	mov	r1, r9
 801e33a:	a81f      	add	r0, sp, #124	; 0x7c
 801e33c:	f7ff facf 	bl	801d8de <_ZN8touchgfx4Edge4stepEi>
 801e340:	4649      	mov	r1, r9
 801e342:	a80f      	add	r0, sp, #60	; 0x3c
 801e344:	eba4 0409 	sub.w	r4, r4, r9
 801e348:	f7ff fac9 	bl	801d8de <_ZN8touchgfx4Edge4stepEi>
 801e34c:	e7a5      	b.n	801e29a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 801e34e:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 801e350:	2e00      	cmp	r6, #0
 801e352:	d143      	bne.n	801e3dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x294>
 801e354:	ae2f      	add	r6, sp, #188	; 0xbc
 801e356:	ad0f      	add	r5, sp, #60	; 0x3c
 801e358:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 801e35a:	88fa      	ldrh	r2, [r7, #6]
 801e35c:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 801e360:	696b      	ldr	r3, [r5, #20]
 801e362:	4443      	add	r3, r8
 801e364:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 801e368:	4442      	add	r2, r8
 801e36a:	b212      	sxth	r2, r2
 801e36c:	4293      	cmp	r3, r2
 801e36e:	da38      	bge.n	801e3e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x29a>
 801e370:	4543      	cmp	r3, r8
 801e372:	da08      	bge.n	801e386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 801e374:	2c00      	cmp	r4, #0
 801e376:	dd42      	ble.n	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e378:	eba8 0803 	sub.w	r8, r8, r3
 801e37c:	4544      	cmp	r4, r8
 801e37e:	db32      	blt.n	801e3e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x29e>
 801e380:	f1b8 0f00 	cmp.w	r8, #0
 801e384:	dc30      	bgt.n	801e3e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2a0>
 801e386:	2c00      	cmp	r4, #0
 801e388:	dd39      	ble.n	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e38a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e38c:	4658      	mov	r0, fp
 801e38e:	f8db 3000 	ldr.w	r3, [fp]
 801e392:	3c01      	subs	r4, #1
 801e394:	9206      	str	r2, [sp, #24]
 801e396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e398:	9703      	str	r7, [sp, #12]
 801e39a:	9205      	str	r2, [sp, #20]
 801e39c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e39e:	9600      	str	r6, [sp, #0]
 801e3a0:	9204      	str	r2, [sp, #16]
 801e3a2:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 801e3a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e3a6:	9202      	str	r2, [sp, #8]
 801e3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e3aa:	9201      	str	r2, [sp, #4]
 801e3ac:	aa3f      	add	r2, sp, #252	; 0xfc
 801e3ae:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801e3b2:	462b      	mov	r3, r5
 801e3b4:	47c0      	blx	r8
 801e3b6:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 801e3b8:	88f9      	ldrh	r1, [r7, #6]
 801e3ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e3be:	696b      	ldr	r3, [r5, #20]
 801e3c0:	441a      	add	r2, r3
 801e3c2:	887b      	ldrh	r3, [r7, #2]
 801e3c4:	440b      	add	r3, r1
 801e3c6:	3201      	adds	r2, #1
 801e3c8:	b21b      	sxth	r3, r3
 801e3ca:	429a      	cmp	r2, r3
 801e3cc:	da17      	bge.n	801e3fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 801e3ce:	a82f      	add	r0, sp, #188	; 0xbc
 801e3d0:	f7ff fa43 	bl	801d85a <_ZN8touchgfx4Edge4stepEv>
 801e3d4:	a80f      	add	r0, sp, #60	; 0x3c
 801e3d6:	f7ff fa40 	bl	801d85a <_ZN8touchgfx4Edge4stepEv>
 801e3da:	e7d4      	b.n	801e386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 801e3dc:	ae0f      	add	r6, sp, #60	; 0x3c
 801e3de:	ad2f      	add	r5, sp, #188	; 0xbc
 801e3e0:	e7ba      	b.n	801e358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801e3e2:	46a0      	mov	r8, r4
 801e3e4:	e7cc      	b.n	801e380 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>
 801e3e6:	46a0      	mov	r8, r4
 801e3e8:	4641      	mov	r1, r8
 801e3ea:	a82f      	add	r0, sp, #188	; 0xbc
 801e3ec:	f7ff fa77 	bl	801d8de <_ZN8touchgfx4Edge4stepEi>
 801e3f0:	4641      	mov	r1, r8
 801e3f2:	a80f      	add	r0, sp, #60	; 0x3c
 801e3f4:	eba4 0408 	sub.w	r4, r4, r8
 801e3f8:	f7ff fa71 	bl	801d8de <_ZN8touchgfx4Edge4stepEi>
 801e3fc:	e7c3      	b.n	801e386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 801e3fe:	b051      	add	sp, #324	; 0x144
 801e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e404:	fffd8f01 	.word	0xfffd8f01
 801e408:	00027100 	.word	0x00027100
 801e40c:	0004e1ff 	.word	0x0004e1ff
 801e410:	0004e1fe 	.word	0x0004e1fe

0801e414 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801e414:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e416:	f8dd c014 	ldr.w	ip, [sp, #20]
 801e41a:	1e05      	subs	r5, r0, #0
 801e41c:	f04f 0601 	mov.w	r6, #1
 801e420:	9c06      	ldr	r4, [sp, #24]
 801e422:	bfba      	itte	lt
 801e424:	f04f 37ff 	movlt.w	r7, #4294967295
 801e428:	426d      	neglt	r5, r5
 801e42a:	2701      	movge	r7, #1
 801e42c:	f1bc 0f00 	cmp.w	ip, #0
 801e430:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801e434:	bfbc      	itt	lt
 801e436:	f1cc 0c00 	rsblt	ip, ip, #0
 801e43a:	427f      	neglt	r7, r7
 801e43c:	2c00      	cmp	r4, #0
 801e43e:	fa4c f001 	asr.w	r0, ip, r1
 801e442:	fa06 f101 	lsl.w	r1, r6, r1
 801e446:	bfbc      	itt	lt
 801e448:	4264      	neglt	r4, r4
 801e44a:	427f      	neglt	r7, r7
 801e44c:	3901      	subs	r1, #1
 801e44e:	ea01 010c 	and.w	r1, r1, ip
 801e452:	434d      	muls	r5, r1
 801e454:	f8de 1000 	ldr.w	r1, [lr]
 801e458:	fb03 1300 	mla	r3, r3, r0, r1
 801e45c:	fb95 f1f4 	sdiv	r1, r5, r4
 801e460:	fb04 5511 	mls	r5, r4, r1, r5
 801e464:	441d      	add	r5, r3
 801e466:	fb95 f3f4 	sdiv	r3, r5, r4
 801e46a:	4419      	add	r1, r3
 801e46c:	fb04 5413 	mls	r4, r4, r3, r5
 801e470:	fb02 1000 	mla	r0, r2, r0, r1
 801e474:	f8ce 4000 	str.w	r4, [lr]
 801e478:	4378      	muls	r0, r7
 801e47a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e47c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801e47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e480:	4c24      	ldr	r4, [pc, #144]	; (801e514 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801e482:	b086      	sub	sp, #24
 801e484:	4605      	mov	r5, r0
 801e486:	6807      	ldr	r7, [r0, #0]
 801e488:	69a3      	ldr	r3, [r4, #24]
 801e48a:	b92b      	cbnz	r3, 801e498 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801e48c:	6840      	ldr	r0, [r0, #4]
 801e48e:	602f      	str	r7, [r5, #0]
 801e490:	6068      	str	r0, [r5, #4]
 801e492:	b006      	add	sp, #24
 801e494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e498:	f04f 0802 	mov.w	r8, #2
 801e49c:	68a2      	ldr	r2, [r4, #8]
 801e49e:	ae06      	add	r6, sp, #24
 801e4a0:	6820      	ldr	r0, [r4, #0]
 801e4a2:	fb93 f1f8 	sdiv	r1, r3, r8
 801e4a6:	440a      	add	r2, r1
 801e4a8:	69e1      	ldr	r1, [r4, #28]
 801e4aa:	f846 2d04 	str.w	r2, [r6, #-4]!
 801e4ae:	9301      	str	r3, [sp, #4]
 801e4b0:	9700      	str	r7, [sp, #0]
 801e4b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e4b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801e4b6:	9602      	str	r6, [sp, #8]
 801e4b8:	f7ff ffac 	bl	801e414 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e4bc:	69a3      	ldr	r3, [r4, #24]
 801e4be:	4607      	mov	r7, r0
 801e4c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801e4c2:	9301      	str	r3, [sp, #4]
 801e4c4:	686b      	ldr	r3, [r5, #4]
 801e4c6:	6a21      	ldr	r1, [r4, #32]
 801e4c8:	9300      	str	r3, [sp, #0]
 801e4ca:	9602      	str	r6, [sp, #8]
 801e4cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e4ce:	6860      	ldr	r0, [r4, #4]
 801e4d0:	f7ff ffa0 	bl	801e414 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e4d4:	69a2      	ldr	r2, [r4, #24]
 801e4d6:	6963      	ldr	r3, [r4, #20]
 801e4d8:	4407      	add	r7, r0
 801e4da:	9201      	str	r2, [sp, #4]
 801e4dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e4de:	9602      	str	r6, [sp, #8]
 801e4e0:	68e0      	ldr	r0, [r4, #12]
 801e4e2:	fb92 f8f8 	sdiv	r8, r2, r8
 801e4e6:	4443      	add	r3, r8
 801e4e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801e4ea:	9305      	str	r3, [sp, #20]
 801e4ec:	682b      	ldr	r3, [r5, #0]
 801e4ee:	9300      	str	r3, [sp, #0]
 801e4f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e4f2:	f7ff ff8f 	bl	801e414 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e4f6:	69a3      	ldr	r3, [r4, #24]
 801e4f8:	4680      	mov	r8, r0
 801e4fa:	9602      	str	r6, [sp, #8]
 801e4fc:	9301      	str	r3, [sp, #4]
 801e4fe:	686b      	ldr	r3, [r5, #4]
 801e500:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801e502:	9300      	str	r3, [sp, #0]
 801e504:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801e506:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e508:	6920      	ldr	r0, [r4, #16]
 801e50a:	f7ff ff83 	bl	801e414 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e50e:	4440      	add	r0, r8
 801e510:	e7bd      	b.n	801e48e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801e512:	bf00      	nop
 801e514:	2000ba74 	.word	0x2000ba74

0801e518 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801e518:	4b07      	ldr	r3, [pc, #28]	; (801e538 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801e51a:	b510      	push	{r4, lr}
 801e51c:	781b      	ldrb	r3, [r3, #0]
 801e51e:	2b01      	cmp	r3, #1
 801e520:	d108      	bne.n	801e534 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801e522:	4b06      	ldr	r3, [pc, #24]	; (801e53c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801e524:	880c      	ldrh	r4, [r1, #0]
 801e526:	881b      	ldrh	r3, [r3, #0]
 801e528:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e52c:	3b01      	subs	r3, #1
 801e52e:	1b1b      	subs	r3, r3, r4
 801e530:	8003      	strh	r3, [r0, #0]
 801e532:	800a      	strh	r2, [r1, #0]
 801e534:	bd10      	pop	{r4, pc}
 801e536:	bf00      	nop
 801e538:	2000ba44 	.word	0x2000ba44
 801e53c:	2000ba48 	.word	0x2000ba48

0801e540 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801e540:	4b07      	ldr	r3, [pc, #28]	; (801e560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801e542:	b510      	push	{r4, lr}
 801e544:	781b      	ldrb	r3, [r3, #0]
 801e546:	2b01      	cmp	r3, #1
 801e548:	d108      	bne.n	801e55c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801e54a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e54e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e552:	8003      	strh	r3, [r0, #0]
 801e554:	8893      	ldrh	r3, [r2, #4]
 801e556:	3b01      	subs	r3, #1
 801e558:	1b1b      	subs	r3, r3, r4
 801e55a:	800b      	strh	r3, [r1, #0]
 801e55c:	bd10      	pop	{r4, pc}
 801e55e:	bf00      	nop
 801e560:	2000ba44 	.word	0x2000ba44

0801e564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801e564:	4b0a      	ldr	r3, [pc, #40]	; (801e590 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801e566:	b513      	push	{r0, r1, r4, lr}
 801e568:	f9b3 4000 	ldrsh.w	r4, [r3]
 801e56c:	4b09      	ldr	r3, [pc, #36]	; (801e594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801e56e:	f8ad 4004 	strh.w	r4, [sp, #4]
 801e572:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e576:	2300      	movs	r3, #0
 801e578:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e57c:	466a      	mov	r2, sp
 801e57e:	f8ad 3000 	strh.w	r3, [sp]
 801e582:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e586:	f7ff ffdb 	bl	801e540 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e58a:	b002      	add	sp, #8
 801e58c:	bd10      	pop	{r4, pc}
 801e58e:	bf00      	nop
 801e590:	2000ba40 	.word	0x2000ba40
 801e594:	2000ba42 	.word	0x2000ba42

0801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801e598:	4b0b      	ldr	r3, [pc, #44]	; (801e5c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801e59a:	781b      	ldrb	r3, [r3, #0]
 801e59c:	2b01      	cmp	r3, #1
 801e59e:	d111      	bne.n	801e5c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801e5a0:	680b      	ldr	r3, [r1, #0]
 801e5a2:	ed90 7a00 	vldr	s14, [r0]
 801e5a6:	6003      	str	r3, [r0, #0]
 801e5a8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801e5ac:	eddf 6a07 	vldr	s13, [pc, #28]	; 801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801e5b0:	ee07 3a90 	vmov	s15, r3
 801e5b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e5b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e5bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e5c0:	edc1 7a00 	vstr	s15, [r1]
 801e5c4:	4770      	bx	lr
 801e5c6:	bf00      	nop
 801e5c8:	2000ba44 	.word	0x2000ba44
 801e5cc:	38d1b717 	.word	0x38d1b717

0801e5d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801e5d0:	4b0a      	ldr	r3, [pc, #40]	; (801e5fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801e5d2:	460a      	mov	r2, r1
 801e5d4:	b510      	push	{r4, lr}
 801e5d6:	781b      	ldrb	r3, [r3, #0]
 801e5d8:	2b01      	cmp	r3, #1
 801e5da:	d10d      	bne.n	801e5f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801e5dc:	8881      	ldrh	r1, [r0, #4]
 801e5de:	8803      	ldrh	r3, [r0, #0]
 801e5e0:	440b      	add	r3, r1
 801e5e2:	4601      	mov	r1, r0
 801e5e4:	3b01      	subs	r3, #1
 801e5e6:	f821 3b02 	strh.w	r3, [r1], #2
 801e5ea:	f7ff ffa9 	bl	801e540 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e5ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e5f2:	88c2      	ldrh	r2, [r0, #6]
 801e5f4:	80c3      	strh	r3, [r0, #6]
 801e5f6:	8082      	strh	r2, [r0, #4]
 801e5f8:	bd10      	pop	{r4, pc}
 801e5fa:	bf00      	nop
 801e5fc:	2000ba44 	.word	0x2000ba44

0801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801e600:	4b0a      	ldr	r3, [pc, #40]	; (801e62c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801e602:	b507      	push	{r0, r1, r2, lr}
 801e604:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e608:	4b09      	ldr	r3, [pc, #36]	; (801e630 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801e60a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e60e:	4669      	mov	r1, sp
 801e610:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e614:	2300      	movs	r3, #0
 801e616:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e61a:	f8ad 3000 	strh.w	r3, [sp]
 801e61e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e622:	f7ff ffd5 	bl	801e5d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e626:	b003      	add	sp, #12
 801e628:	f85d fb04 	ldr.w	pc, [sp], #4
 801e62c:	2000ba40 	.word	0x2000ba40
 801e630:	2000ba42 	.word	0x2000ba42

0801e634 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801e634:	4b03      	ldr	r3, [pc, #12]	; (801e644 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801e636:	6818      	ldr	r0, [r3, #0]
 801e638:	b110      	cbz	r0, 801e640 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801e63a:	6803      	ldr	r3, [r0, #0]
 801e63c:	699b      	ldr	r3, [r3, #24]
 801e63e:	4718      	bx	r3
 801e640:	4770      	bx	lr
 801e642:	bf00      	nop
 801e644:	2000bac0 	.word	0x2000bac0

0801e648 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801e648:	4770      	bx	lr
	...

0801e64c <_ZN8touchgfx11Application4drawEv>:
 801e64c:	4b0b      	ldr	r3, [pc, #44]	; (801e67c <_ZN8touchgfx11Application4drawEv+0x30>)
 801e64e:	b507      	push	{r0, r1, r2, lr}
 801e650:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e654:	4b0a      	ldr	r3, [pc, #40]	; (801e680 <_ZN8touchgfx11Application4drawEv+0x34>)
 801e656:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e65a:	4669      	mov	r1, sp
 801e65c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e660:	2300      	movs	r3, #0
 801e662:	f8ad 3000 	strh.w	r3, [sp]
 801e666:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e66a:	6803      	ldr	r3, [r0, #0]
 801e66c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e672:	4798      	blx	r3
 801e674:	b003      	add	sp, #12
 801e676:	f85d fb04 	ldr.w	pc, [sp], #4
 801e67a:	bf00      	nop
 801e67c:	2000ba40 	.word	0x2000ba40
 801e680:	2000ba42 	.word	0x2000ba42

0801e684 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801e684:	4b03      	ldr	r3, [pc, #12]	; (801e694 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801e686:	6818      	ldr	r0, [r3, #0]
 801e688:	b110      	cbz	r0, 801e690 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801e68a:	6803      	ldr	r3, [r0, #0]
 801e68c:	69db      	ldr	r3, [r3, #28]
 801e68e:	4718      	bx	r3
 801e690:	4770      	bx	lr
 801e692:	bf00      	nop
 801e694:	2000bac0 	.word	0x2000bac0

0801e698 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e698:	4b03      	ldr	r3, [pc, #12]	; (801e6a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e69a:	6818      	ldr	r0, [r3, #0]
 801e69c:	b110      	cbz	r0, 801e6a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e69e:	6803      	ldr	r3, [r0, #0]
 801e6a0:	6a1b      	ldr	r3, [r3, #32]
 801e6a2:	4718      	bx	r3
 801e6a4:	4770      	bx	lr
 801e6a6:	bf00      	nop
 801e6a8:	2000bac0 	.word	0x2000bac0

0801e6ac <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e6ac:	4b03      	ldr	r3, [pc, #12]	; (801e6bc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e6ae:	6818      	ldr	r0, [r3, #0]
 801e6b0:	b110      	cbz	r0, 801e6b8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e6b2:	6803      	ldr	r3, [r0, #0]
 801e6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6b6:	4718      	bx	r3
 801e6b8:	4770      	bx	lr
 801e6ba:	bf00      	nop
 801e6bc:	2000bac0 	.word	0x2000bac0

0801e6c0 <_ZN8touchgfx11Application15handleTickEventEv>:
 801e6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6c4:	4d3d      	ldr	r5, [pc, #244]	; (801e7bc <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 801e6c6:	4604      	mov	r4, r0
 801e6c8:	6828      	ldr	r0, [r5, #0]
 801e6ca:	2800      	cmp	r0, #0
 801e6cc:	d047      	beq.n	801e75e <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801e6ce:	7a03      	ldrb	r3, [r0, #8]
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d144      	bne.n	801e75e <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801e6d4:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e6d8:	6803      	ldr	r3, [r0, #0]
 801e6da:	689b      	ldr	r3, [r3, #8]
 801e6dc:	e03c      	b.n	801e758 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801e6de:	3b01      	subs	r3, #1
 801e6e0:	f04f 0c00 	mov.w	ip, #0
 801e6e4:	1c5a      	adds	r2, r3, #1
 801e6e6:	d031      	beq.n	801e74c <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801e6e8:	18e2      	adds	r2, r4, r3
 801e6ea:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801e6ee:	bb59      	cbnz	r1, 801e748 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801e6f0:	b298      	uxth	r0, r3
 801e6f2:	1d25      	adds	r5, r4, #4
 801e6f4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801e6f8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801e6fc:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801e700:	428a      	cmp	r2, r1
 801e702:	dd14      	ble.n	801e72e <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801e704:	682e      	ldr	r6, [r5, #0]
 801e706:	45b0      	cmp	r8, r6
 801e708:	d106      	bne.n	801e718 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801e70a:	46ae      	mov	lr, r5
 801e70c:	460e      	mov	r6, r1
 801e70e:	2e1e      	cmp	r6, #30
 801e710:	dd05      	ble.n	801e71e <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801e712:	3a01      	subs	r2, #1
 801e714:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801e718:	3101      	adds	r1, #1
 801e71a:	3504      	adds	r5, #4
 801e71c:	e7ee      	b.n	801e6fc <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801e71e:	3601      	adds	r6, #1
 801e720:	f8de 7004 	ldr.w	r7, [lr, #4]
 801e724:	42b2      	cmp	r2, r6
 801e726:	f84e 7b04 	str.w	r7, [lr], #4
 801e72a:	dcf0      	bgt.n	801e70e <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801e72c:	e7f1      	b.n	801e712 <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801e72e:	4290      	cmp	r0, r2
 801e730:	da07      	bge.n	801e742 <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801e732:	1821      	adds	r1, r4, r0
 801e734:	3001      	adds	r0, #1
 801e736:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801e73a:	b280      	uxth	r0, r0
 801e73c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801e740:	e7f5      	b.n	801e72e <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801e742:	4422      	add	r2, r4
 801e744:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801e748:	3b01      	subs	r3, #1
 801e74a:	e7cb      	b.n	801e6e4 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801e74c:	4b1c      	ldr	r3, [pc, #112]	; (801e7c0 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801e74e:	6818      	ldr	r0, [r3, #0]
 801e750:	2800      	cmp	r0, #0
 801e752:	d031      	beq.n	801e7b8 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 801e754:	6803      	ldr	r3, [r0, #0]
 801e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e75c:	4718      	bx	r3
 801e75e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801e762:	b913      	cbnz	r3, 801e76a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e764:	b108      	cbz	r0, 801e76a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e766:	7a03      	ldrb	r3, [r0, #8]
 801e768:	b9a3      	cbnz	r3, 801e794 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801e76a:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801e76e:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801e772:	2600      	movs	r6, #0
 801e774:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801e778:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801e77c:	429e      	cmp	r6, r3
 801e77e:	daae      	bge.n	801e6de <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801e780:	f817 3b01 	ldrb.w	r3, [r7], #1
 801e784:	b123      	cbz	r3, 801e790 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801e786:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801e78a:	6803      	ldr	r3, [r0, #0]
 801e78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e78e:	4798      	blx	r3
 801e790:	3601      	adds	r6, #1
 801e792:	e7f1      	b.n	801e778 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 801e794:	4b0a      	ldr	r3, [pc, #40]	; (801e7c0 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801e796:	6818      	ldr	r0, [r3, #0]
 801e798:	b110      	cbz	r0, 801e7a0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801e79a:	6803      	ldr	r3, [r0, #0]
 801e79c:	691b      	ldr	r3, [r3, #16]
 801e79e:	4798      	blx	r3
 801e7a0:	6828      	ldr	r0, [r5, #0]
 801e7a2:	6803      	ldr	r3, [r0, #0]
 801e7a4:	68db      	ldr	r3, [r3, #12]
 801e7a6:	4798      	blx	r3
 801e7a8:	6823      	ldr	r3, [r4, #0]
 801e7aa:	4620      	mov	r0, r4
 801e7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e7ae:	4798      	blx	r3
 801e7b0:	2301      	movs	r3, #1
 801e7b2:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e7b6:	e7d8      	b.n	801e76a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7bc:	2000bac4 	.word	0x2000bac4
 801e7c0:	2000bac0 	.word	0x2000bac0

0801e7c4 <_ZN8touchgfx11ApplicationD1Ev>:
 801e7c4:	4770      	bx	lr

0801e7c6 <_ZN8touchgfx11ApplicationD0Ev>:
 801e7c6:	b510      	push	{r4, lr}
 801e7c8:	4604      	mov	r4, r0
 801e7ca:	f44f 7198 	mov.w	r1, #304	; 0x130
 801e7ce:	f004 f997 	bl	8022b00 <_ZdlPvj>
 801e7d2:	4620      	mov	r0, r4
 801e7d4:	bd10      	pop	{r4, pc}
	...

0801e7d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801e7d8:	b570      	push	{r4, r5, r6, lr}
 801e7da:	4606      	mov	r6, r0
 801e7dc:	460c      	mov	r4, r1
 801e7de:	b929      	cbnz	r1, 801e7ec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801e7e0:	4b0c      	ldr	r3, [pc, #48]	; (801e814 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801e7e2:	2161      	movs	r1, #97	; 0x61
 801e7e4:	4a0c      	ldr	r2, [pc, #48]	; (801e818 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801e7e6:	480d      	ldr	r0, [pc, #52]	; (801e81c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801e7e8:	f004 f9a6 	bl	8022b38 <__assert_func>
 801e7ec:	2300      	movs	r3, #0
 801e7ee:	4d0c      	ldr	r5, [pc, #48]	; (801e820 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801e7f0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801e7f4:	6828      	ldr	r0, [r5, #0]
 801e7f6:	b110      	cbz	r0, 801e7fe <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801e7f8:	6803      	ldr	r3, [r0, #0]
 801e7fa:	695b      	ldr	r3, [r3, #20]
 801e7fc:	4798      	blx	r3
 801e7fe:	602c      	str	r4, [r5, #0]
 801e800:	4620      	mov	r0, r4
 801e802:	6823      	ldr	r3, [r4, #0]
 801e804:	68db      	ldr	r3, [r3, #12]
 801e806:	4798      	blx	r3
 801e808:	6833      	ldr	r3, [r6, #0]
 801e80a:	4630      	mov	r0, r6
 801e80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e80e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e812:	4718      	bx	r3
 801e814:	080260ec 	.word	0x080260ec
 801e818:	080261b4 	.word	0x080261b4
 801e81c:	080260f6 	.word	0x080260f6
 801e820:	2000bac0 	.word	0x2000bac0

0801e824 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801e824:	b510      	push	{r4, lr}
 801e826:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e82a:	888a      	ldrh	r2, [r1, #4]
 801e82c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e830:	4422      	add	r2, r4
 801e832:	b212      	sxth	r2, r2
 801e834:	4293      	cmp	r3, r2
 801e836:	da15      	bge.n	801e864 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e838:	8882      	ldrh	r2, [r0, #4]
 801e83a:	4413      	add	r3, r2
 801e83c:	b21b      	sxth	r3, r3
 801e83e:	429c      	cmp	r4, r3
 801e840:	da10      	bge.n	801e864 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e842:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801e846:	88c9      	ldrh	r1, [r1, #6]
 801e848:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801e84c:	4419      	add	r1, r3
 801e84e:	b209      	sxth	r1, r1
 801e850:	428a      	cmp	r2, r1
 801e852:	da07      	bge.n	801e864 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e854:	88c0      	ldrh	r0, [r0, #6]
 801e856:	4410      	add	r0, r2
 801e858:	b200      	sxth	r0, r0
 801e85a:	4283      	cmp	r3, r0
 801e85c:	bfac      	ite	ge
 801e85e:	2000      	movge	r0, #0
 801e860:	2001      	movlt	r0, #1
 801e862:	bd10      	pop	{r4, pc}
 801e864:	2000      	movs	r0, #0
 801e866:	bd10      	pop	{r4, pc}

0801e868 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801e868:	b570      	push	{r4, r5, r6, lr}
 801e86a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e86e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e872:	42ac      	cmp	r4, r5
 801e874:	db18      	blt.n	801e8a8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e876:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801e87a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e87e:	429a      	cmp	r2, r3
 801e880:	db12      	blt.n	801e8a8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e882:	8886      	ldrh	r6, [r0, #4]
 801e884:	4435      	add	r5, r6
 801e886:	888e      	ldrh	r6, [r1, #4]
 801e888:	4434      	add	r4, r6
 801e88a:	b22d      	sxth	r5, r5
 801e88c:	b224      	sxth	r4, r4
 801e88e:	42a5      	cmp	r5, r4
 801e890:	db0a      	blt.n	801e8a8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e892:	88c0      	ldrh	r0, [r0, #6]
 801e894:	4418      	add	r0, r3
 801e896:	88cb      	ldrh	r3, [r1, #6]
 801e898:	441a      	add	r2, r3
 801e89a:	b200      	sxth	r0, r0
 801e89c:	b212      	sxth	r2, r2
 801e89e:	4290      	cmp	r0, r2
 801e8a0:	bfb4      	ite	lt
 801e8a2:	2000      	movlt	r0, #0
 801e8a4:	2001      	movge	r0, #1
 801e8a6:	bd70      	pop	{r4, r5, r6, pc}
 801e8a8:	2000      	movs	r0, #0
 801e8aa:	bd70      	pop	{r4, r5, r6, pc}

0801e8ac <_ZN8touchgfx4RectaNERKS0_>:
 801e8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8ae:	4604      	mov	r4, r0
 801e8b0:	460d      	mov	r5, r1
 801e8b2:	f7ff ffb7 	bl	801e824 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e8b6:	2800      	cmp	r0, #0
 801e8b8:	d02d      	beq.n	801e916 <_ZN8touchgfx4RectaNERKS0_+0x6a>
 801e8ba:	f9b5 1000 	ldrsh.w	r1, [r5]
 801e8be:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e8c2:	88a7      	ldrh	r7, [r4, #4]
 801e8c4:	4616      	mov	r6, r2
 801e8c6:	428a      	cmp	r2, r1
 801e8c8:	443a      	add	r2, r7
 801e8ca:	88af      	ldrh	r7, [r5, #4]
 801e8cc:	bfb8      	it	lt
 801e8ce:	460e      	movlt	r6, r1
 801e8d0:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 801e8d4:	4439      	add	r1, r7
 801e8d6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801e8da:	b292      	uxth	r2, r2
 801e8dc:	b289      	uxth	r1, r1
 801e8de:	4298      	cmp	r0, r3
 801e8e0:	fa0f fe82 	sxth.w	lr, r2
 801e8e4:	b20f      	sxth	r7, r1
 801e8e6:	bfb8      	it	lt
 801e8e8:	4618      	movlt	r0, r3
 801e8ea:	45be      	cmp	lr, r7
 801e8ec:	bfa8      	it	ge
 801e8ee:	460a      	movge	r2, r1
 801e8f0:	1b92      	subs	r2, r2, r6
 801e8f2:	80a2      	strh	r2, [r4, #4]
 801e8f4:	88e2      	ldrh	r2, [r4, #6]
 801e8f6:	88e9      	ldrh	r1, [r5, #6]
 801e8f8:	4413      	add	r3, r2
 801e8fa:	886a      	ldrh	r2, [r5, #2]
 801e8fc:	8026      	strh	r6, [r4, #0]
 801e8fe:	440a      	add	r2, r1
 801e900:	b29b      	uxth	r3, r3
 801e902:	8060      	strh	r0, [r4, #2]
 801e904:	b292      	uxth	r2, r2
 801e906:	b21d      	sxth	r5, r3
 801e908:	b211      	sxth	r1, r2
 801e90a:	428d      	cmp	r5, r1
 801e90c:	bfa8      	it	ge
 801e90e:	4613      	movge	r3, r2
 801e910:	1a1b      	subs	r3, r3, r0
 801e912:	80e3      	strh	r3, [r4, #6]
 801e914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e916:	8020      	strh	r0, [r4, #0]
 801e918:	8060      	strh	r0, [r4, #2]
 801e91a:	80a0      	strh	r0, [r4, #4]
 801e91c:	80e0      	strh	r0, [r4, #6]
 801e91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e920 <_ZNK8touchgfx4Rect7isEmptyEv>:
 801e920:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e924:	b12b      	cbz	r3, 801e932 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 801e926:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801e92a:	fab0 f080 	clz	r0, r0
 801e92e:	0940      	lsrs	r0, r0, #5
 801e930:	4770      	bx	lr
 801e932:	2001      	movs	r0, #1
 801e934:	4770      	bx	lr

0801e936 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801e936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e938:	4604      	mov	r4, r0
 801e93a:	4608      	mov	r0, r1
 801e93c:	460d      	mov	r5, r1
 801e93e:	f7ff ffef 	bl	801e920 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e942:	2800      	cmp	r0, #0
 801e944:	d13c      	bne.n	801e9c0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8a>
 801e946:	4620      	mov	r0, r4
 801e948:	f7ff ffea 	bl	801e920 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e94c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801e950:	b150      	cbz	r0, 801e968 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x32>
 801e952:	8026      	strh	r6, [r4, #0]
 801e954:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801e958:	8063      	strh	r3, [r4, #2]
 801e95a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801e95e:	80a3      	strh	r3, [r4, #4]
 801e960:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801e964:	80e3      	strh	r3, [r4, #6]
 801e966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e968:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e96c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801e970:	42b1      	cmp	r1, r6
 801e972:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801e976:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801e97a:	460f      	mov	r7, r1
 801e97c:	88ed      	ldrh	r5, [r5, #6]
 801e97e:	bfa8      	it	ge
 801e980:	4637      	movge	r7, r6
 801e982:	4293      	cmp	r3, r2
 801e984:	4618      	mov	r0, r3
 801e986:	4476      	add	r6, lr
 801e988:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 801e98c:	bfa8      	it	ge
 801e98e:	4610      	movge	r0, r2
 801e990:	442a      	add	r2, r5
 801e992:	88e5      	ldrh	r5, [r4, #6]
 801e994:	4471      	add	r1, lr
 801e996:	b236      	sxth	r6, r6
 801e998:	8027      	strh	r7, [r4, #0]
 801e99a:	442b      	add	r3, r5
 801e99c:	b209      	sxth	r1, r1
 801e99e:	b212      	sxth	r2, r2
 801e9a0:	8060      	strh	r0, [r4, #2]
 801e9a2:	b21b      	sxth	r3, r3
 801e9a4:	428e      	cmp	r6, r1
 801e9a6:	bfac      	ite	ge
 801e9a8:	ebc7 0106 	rsbge	r1, r7, r6
 801e9ac:	ebc7 0101 	rsblt	r1, r7, r1
 801e9b0:	429a      	cmp	r2, r3
 801e9b2:	bfac      	ite	ge
 801e9b4:	ebc0 0202 	rsbge	r2, r0, r2
 801e9b8:	ebc0 0203 	rsblt	r2, r0, r3
 801e9bc:	80a1      	strh	r1, [r4, #4]
 801e9be:	80e2      	strh	r2, [r4, #6]
 801e9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e9c4 <_ZN8touchgfx11Application11getInstanceEv>:
 801e9c4:	4b01      	ldr	r3, [pc, #4]	; (801e9cc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801e9c6:	6818      	ldr	r0, [r3, #0]
 801e9c8:	4770      	bx	lr
 801e9ca:	bf00      	nop
 801e9cc:	2000bac8 	.word	0x2000bac8

0801e9d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e9d0:	2300      	movs	r3, #0
 801e9d2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e9d6:	30a8      	adds	r0, #168	; 0xa8
 801e9d8:	f820 3c24 	strh.w	r3, [r0, #-36]
 801e9dc:	f802 3b01 	strb.w	r3, [r2], #1
 801e9e0:	4282      	cmp	r2, r0
 801e9e2:	d1fb      	bne.n	801e9dc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e9e4:	4770      	bx	lr

0801e9e6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e9e6:	4603      	mov	r3, r0
 801e9e8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e9ec:	2200      	movs	r2, #0
 801e9ee:	801a      	strh	r2, [r3, #0]
 801e9f0:	3308      	adds	r3, #8
 801e9f2:	f823 2c06 	strh.w	r2, [r3, #-6]
 801e9f6:	f823 2c04 	strh.w	r2, [r3, #-4]
 801e9fa:	f823 2c02 	strh.w	r2, [r3, #-2]
 801e9fe:	428b      	cmp	r3, r1
 801ea00:	d1f5      	bne.n	801e9ee <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801ea02:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801ea06:	4770      	bx	lr

0801ea08 <_ZN8touchgfx11ApplicationC1Ev>:
 801ea08:	b570      	push	{r4, r5, r6, lr}
 801ea0a:	4b16      	ldr	r3, [pc, #88]	; (801ea64 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801ea0c:	2500      	movs	r5, #0
 801ea0e:	4604      	mov	r4, r0
 801ea10:	30a8      	adds	r0, #168	; 0xa8
 801ea12:	f840 3ca8 	str.w	r3, [r0, #-168]
 801ea16:	f820 5c24 	strh.w	r5, [r0, #-36]
 801ea1a:	f7ff ffe4 	bl	801e9e6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ea1e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801ea22:	f7ff ffe0 	bl	801e9e6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ea26:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801ea2a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801ea2e:	490e      	ldr	r1, [pc, #56]	; (801ea68 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801ea30:	480e      	ldr	r0, [pc, #56]	; (801ea6c <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801ea32:	f003 ff27 	bl	8022884 <CRC_Lock>
 801ea36:	4e0e      	ldr	r6, [pc, #56]	; (801ea70 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801ea38:	4b0e      	ldr	r3, [pc, #56]	; (801ea74 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ea3a:	b158      	cbz	r0, 801ea54 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801ea3c:	801d      	strh	r5, [r3, #0]
 801ea3e:	2300      	movs	r3, #0
 801ea40:	4a0d      	ldr	r2, [pc, #52]	; (801ea78 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801ea42:	4620      	mov	r0, r4
 801ea44:	6013      	str	r3, [r2, #0]
 801ea46:	4a0d      	ldr	r2, [pc, #52]	; (801ea7c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801ea48:	6033      	str	r3, [r6, #0]
 801ea4a:	6013      	str	r3, [r2, #0]
 801ea4c:	f7ff ffc0 	bl	801e9d0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ea50:	4620      	mov	r0, r4
 801ea52:	bd70      	pop	{r4, r5, r6, pc}
 801ea54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ea58:	2002      	movs	r0, #2
 801ea5a:	801a      	strh	r2, [r3, #0]
 801ea5c:	6030      	str	r0, [r6, #0]
 801ea5e:	f000 febb 	bl	801f7d8 <_ZN8touchgfx6Screen4drawEv>
 801ea62:	e7ec      	b.n	801ea3e <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801ea64:	08026180 	.word	0x08026180
 801ea68:	b5e8b5cd 	.word	0xb5e8b5cd
 801ea6c:	f407a5c2 	.word	0xf407a5c2
 801ea70:	2000bac0 	.word	0x2000bac0
 801ea74:	20000074 	.word	0x20000074
 801ea78:	2000bac8 	.word	0x2000bac8
 801ea7c:	2000bac4 	.word	0x2000bac4

0801ea80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ea80:	2300      	movs	r3, #0
 801ea82:	8003      	strh	r3, [r0, #0]
 801ea84:	8043      	strh	r3, [r0, #2]
 801ea86:	8083      	strh	r3, [r0, #4]
 801ea88:	80c3      	strh	r3, [r0, #6]
 801ea8a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801ea8e:	429a      	cmp	r2, r3
 801ea90:	b530      	push	{r4, r5, lr}
 801ea92:	da12      	bge.n	801eaba <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ea94:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801ea98:	3b01      	subs	r3, #1
 801ea9a:	6825      	ldr	r5, [r4, #0]
 801ea9c:	b29b      	uxth	r3, r3
 801ea9e:	6005      	str	r5, [r0, #0]
 801eaa0:	429a      	cmp	r2, r3
 801eaa2:	6865      	ldr	r5, [r4, #4]
 801eaa4:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801eaa8:	6045      	str	r5, [r0, #4]
 801eaaa:	da06      	bge.n	801eaba <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801eaac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801eab0:	681d      	ldr	r5, [r3, #0]
 801eab2:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801eab6:	685d      	ldr	r5, [r3, #4]
 801eab8:	6065      	str	r5, [r4, #4]
 801eaba:	bd30      	pop	{r4, r5, pc}

0801eabc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801eabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eabe:	e88d 0006 	stmia.w	sp, {r1, r2}
 801eac2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801eac6:	4604      	mov	r4, r0
 801eac8:	466b      	mov	r3, sp
 801eaca:	2a07      	cmp	r2, #7
 801eacc:	dd06      	ble.n	801eadc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801eace:	4b09      	ldr	r3, [pc, #36]	; (801eaf4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ead0:	f240 11f9 	movw	r1, #505	; 0x1f9
 801ead4:	4a08      	ldr	r2, [pc, #32]	; (801eaf8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ead6:	4809      	ldr	r0, [pc, #36]	; (801eafc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801ead8:	f004 f82e 	bl	8022b38 <__assert_func>
 801eadc:	1c51      	adds	r1, r2, #1
 801eade:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801eae2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801eae6:	cb03      	ldmia	r3!, {r0, r1}
 801eae8:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801eaec:	6069      	str	r1, [r5, #4]
 801eaee:	b003      	add	sp, #12
 801eaf0:	bd30      	pop	{r4, r5, pc}
 801eaf2:	bf00      	nop
 801eaf4:	08026120 	.word	0x08026120
 801eaf8:	080261f8 	.word	0x080261f8
 801eafc:	0802614f 	.word	0x0802614f

0801eb00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801eb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eb04:	b089      	sub	sp, #36	; 0x24
 801eb06:	4606      	mov	r6, r0
 801eb08:	4668      	mov	r0, sp
 801eb0a:	466c      	mov	r4, sp
 801eb0c:	e88d 0006 	stmia.w	sp, {r1, r2}
 801eb10:	f7ff ff06 	bl	801e920 <_ZNK8touchgfx4Rect7isEmptyEv>
 801eb14:	bbb0      	cbnz	r0, 801eb84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801eb16:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801eb1a:	b1fd      	cbz	r5, 801eb5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801eb1c:	3d01      	subs	r5, #1
 801eb1e:	af04      	add	r7, sp, #16
 801eb20:	f04f 090a 	mov.w	r9, #10
 801eb24:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801eb28:	ab02      	add	r3, sp, #8
 801eb2a:	fa1f f885 	uxth.w	r8, r5
 801eb2e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801eb32:	6851      	ldr	r1, [r2, #4]
 801eb34:	c303      	stmia	r3!, {r0, r1}
 801eb36:	4621      	mov	r1, r4
 801eb38:	a802      	add	r0, sp, #8
 801eb3a:	f7ff fe95 	bl	801e868 <_ZNK8touchgfx4Rect8includesERKS0_>
 801eb3e:	bb08      	cbnz	r0, 801eb84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801eb40:	a902      	add	r1, sp, #8
 801eb42:	4620      	mov	r0, r4
 801eb44:	f7ff fe90 	bl	801e868 <_ZNK8touchgfx4Rect8includesERKS0_>
 801eb48:	b1f8      	cbz	r0, 801eb8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801eb4a:	4642      	mov	r2, r8
 801eb4c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801eb50:	a806      	add	r0, sp, #24
 801eb52:	f7ff ff95 	bl	801ea80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eb56:	f115 35ff 	adds.w	r5, r5, #4294967295
 801eb5a:	d2e3      	bcs.n	801eb24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801eb5c:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801eb60:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801eb64:	2b08      	cmp	r3, #8
 801eb66:	d108      	bne.n	801eb7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801eb68:	4629      	mov	r1, r5
 801eb6a:	a806      	add	r0, sp, #24
 801eb6c:	2207      	movs	r2, #7
 801eb6e:	f7ff ff87 	bl	801ea80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eb72:	a906      	add	r1, sp, #24
 801eb74:	4620      	mov	r0, r4
 801eb76:	f7ff fede 	bl	801e936 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eb7a:	4628      	mov	r0, r5
 801eb7c:	e894 0006 	ldmia.w	r4, {r1, r2}
 801eb80:	f7ff ff9c 	bl	801eabc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801eb84:	b009      	add	sp, #36	; 0x24
 801eb86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb8a:	4621      	mov	r1, r4
 801eb8c:	a802      	add	r0, sp, #8
 801eb8e:	f7ff fe49 	bl	801e824 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801eb92:	b150      	cbz	r0, 801ebaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801eb94:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801eb98:	a806      	add	r0, sp, #24
 801eb9a:	4642      	mov	r2, r8
 801eb9c:	f7ff ff70 	bl	801ea80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eba0:	a902      	add	r1, sp, #8
 801eba2:	4620      	mov	r0, r4
 801eba4:	f7ff fec7 	bl	801e936 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eba8:	e7d5      	b.n	801eb56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ebaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ebae:	e887 0003 	stmia.w	r7, {r0, r1}
 801ebb2:	a902      	add	r1, sp, #8
 801ebb4:	4638      	mov	r0, r7
 801ebb6:	f7ff febe 	bl	801e936 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ebba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ebbe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ebc2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ebc6:	fb13 f302 	smulbb	r3, r3, r2
 801ebca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ebce:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ebd2:	fb11 f102 	smulbb	r1, r1, r2
 801ebd6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ebda:	fb09 f303 	mul.w	r3, r9, r3
 801ebde:	fb12 1100 	smlabb	r1, r2, r0, r1
 801ebe2:	220b      	movs	r2, #11
 801ebe4:	434a      	muls	r2, r1
 801ebe6:	4293      	cmp	r3, r2
 801ebe8:	dab5      	bge.n	801eb56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ebea:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ebee:	a806      	add	r0, sp, #24
 801ebf0:	4642      	mov	r2, r8
 801ebf2:	f7ff ff45 	bl	801ea80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ebf6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ebfa:	e884 0003 	stmia.w	r4, {r0, r1}
 801ebfe:	e7aa      	b.n	801eb56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801ec00 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801ec00:	4b1b      	ldr	r3, [pc, #108]	; (801ec70 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801ec02:	b530      	push	{r4, r5, lr}
 801ec04:	460c      	mov	r4, r1
 801ec06:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ec0a:	4b1a      	ldr	r3, [pc, #104]	; (801ec74 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801ec0c:	b085      	sub	sp, #20
 801ec0e:	4605      	mov	r5, r0
 801ec10:	6820      	ldr	r0, [r4, #0]
 801ec12:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ec16:	2300      	movs	r3, #0
 801ec18:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ec1c:	f8ad 3000 	strh.w	r3, [sp]
 801ec20:	6861      	ldr	r1, [r4, #4]
 801ec22:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ec26:	ab02      	add	r3, sp, #8
 801ec28:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ec2c:	c303      	stmia	r3!, {r0, r1}
 801ec2e:	4669      	mov	r1, sp
 801ec30:	a802      	add	r0, sp, #8
 801ec32:	f7ff fe3b 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 801ec36:	ab02      	add	r3, sp, #8
 801ec38:	cb03      	ldmia	r3!, {r0, r1}
 801ec3a:	4b0f      	ldr	r3, [pc, #60]	; (801ec78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801ec3c:	6020      	str	r0, [r4, #0]
 801ec3e:	6818      	ldr	r0, [r3, #0]
 801ec40:	6061      	str	r1, [r4, #4]
 801ec42:	b138      	cbz	r0, 801ec54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801ec44:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801ec48:	b133      	cbz	r3, 801ec58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801ec4a:	6821      	ldr	r1, [r4, #0]
 801ec4c:	4628      	mov	r0, r5
 801ec4e:	6862      	ldr	r2, [r4, #4]
 801ec50:	f7ff ff56 	bl	801eb00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ec54:	b005      	add	sp, #20
 801ec56:	bd30      	pop	{r4, r5, pc}
 801ec58:	6803      	ldr	r3, [r0, #0]
 801ec5a:	4621      	mov	r1, r4
 801ec5c:	689b      	ldr	r3, [r3, #8]
 801ec5e:	4798      	blx	r3
 801ec60:	4b06      	ldr	r3, [pc, #24]	; (801ec7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801ec62:	4621      	mov	r1, r4
 801ec64:	6818      	ldr	r0, [r3, #0]
 801ec66:	6803      	ldr	r3, [r0, #0]
 801ec68:	695b      	ldr	r3, [r3, #20]
 801ec6a:	4798      	blx	r3
 801ec6c:	e7f2      	b.n	801ec54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801ec6e:	bf00      	nop
 801ec70:	2000ba40 	.word	0x2000ba40
 801ec74:	2000ba42 	.word	0x2000ba42
 801ec78:	2000bac0 	.word	0x2000bac0
 801ec7c:	2000ba4c 	.word	0x2000ba4c

0801ec80 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801ec80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec84:	4604      	mov	r4, r0
 801ec86:	b096      	sub	sp, #88	; 0x58
 801ec88:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801ec8c:	b129      	cbz	r1, 801ec9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801ec8e:	2300      	movs	r3, #0
 801ec90:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801ec94:	b016      	add	sp, #88	; 0x58
 801ec96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec9a:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	d0f8      	beq.n	801ec94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801eca2:	4f6e      	ldr	r7, [pc, #440]	; (801ee5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 801eca4:	a805      	add	r0, sp, #20
 801eca6:	f7ff fe9e 	bl	801e9e6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ecaa:	883d      	ldrh	r5, [r7, #0]
 801ecac:	462e      	mov	r6, r5
 801ecae:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ecb2:	429e      	cmp	r6, r3
 801ecb4:	db10      	blt.n	801ecd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801ecb6:	462e      	mov	r6, r5
 801ecb8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ecbc:	429e      	cmp	r6, r3
 801ecbe:	da17      	bge.n	801ecf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ecc0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ecc4:	3601      	adds	r6, #1
 801ecc6:	4620      	mov	r0, r4
 801ecc8:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801eccc:	b2b6      	uxth	r6, r6
 801ecce:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ecd2:	f7ff ff15 	bl	801eb00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ecd6:	e7ef      	b.n	801ecb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801ecd8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ecdc:	3601      	adds	r6, #1
 801ecde:	a805      	add	r0, sp, #20
 801ece0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801ece4:	b2b6      	uxth	r6, r6
 801ece6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ecea:	f7ff fee7 	bl	801eabc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ecee:	e7de      	b.n	801ecae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801ecf0:	4e5b      	ldr	r6, [pc, #364]	; (801ee60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 801ecf2:	6833      	ldr	r3, [r6, #0]
 801ecf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ecf8:	2b01      	cmp	r3, #1
 801ecfa:	f040 8094 	bne.w	801ee26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801ecfe:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801ed02:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801ed06:	f04f 0900 	mov.w	r9, #0
 801ed0a:	33aa      	adds	r3, #170	; 0xaa
 801ed0c:	42a8      	cmp	r0, r5
 801ed0e:	f103 0308 	add.w	r3, r3, #8
 801ed12:	dd0a      	ble.n	801ed2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801ed14:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801ed18:	3501      	adds	r5, #1
 801ed1a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801ed1e:	440a      	add	r2, r1
 801ed20:	b212      	sxth	r2, r2
 801ed22:	4591      	cmp	r9, r2
 801ed24:	bfb8      	it	lt
 801ed26:	4691      	movlt	r9, r2
 801ed28:	e7f0      	b.n	801ed0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801ed2a:	4b4e      	ldr	r3, [pc, #312]	; (801ee64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 801ed2c:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801ee6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 801ed30:	881d      	ldrh	r5, [r3, #0]
 801ed32:	2300      	movs	r3, #0
 801ed34:	08ed      	lsrs	r5, r5, #3
 801ed36:	f8ad 3004 	strh.w	r3, [sp, #4]
 801ed3a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ed3e:	2d01      	cmp	r5, #1
 801ed40:	f8ad 3008 	strh.w	r3, [sp, #8]
 801ed44:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ed48:	bfb8      	it	lt
 801ed4a:	2501      	movlt	r5, #1
 801ed4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ed50:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ed54:	6830      	ldr	r0, [r6, #0]
 801ed56:	4413      	add	r3, r2
 801ed58:	b21b      	sxth	r3, r3
 801ed5a:	4599      	cmp	r9, r3
 801ed5c:	6803      	ldr	r3, [r0, #0]
 801ed5e:	dd45      	ble.n	801edec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 801ed60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ed64:	4798      	blx	r3
 801ed66:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ed6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ed6e:	4413      	add	r3, r2
 801ed70:	b21b      	sxth	r3, r3
 801ed72:	18ea      	adds	r2, r5, r3
 801ed74:	4290      	cmp	r0, r2
 801ed76:	da6d      	bge.n	801ee54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801ed78:	4581      	cmp	r9, r0
 801ed7a:	dd6b      	ble.n	801ee54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801ed7c:	4298      	cmp	r0, r3
 801ed7e:	da01      	bge.n	801ed84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	dc69      	bgt.n	801ee58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801ed84:	6830      	ldr	r0, [r6, #0]
 801ed86:	2101      	movs	r1, #1
 801ed88:	6803      	ldr	r3, [r0, #0]
 801ed8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ed8c:	4798      	blx	r3
 801ed8e:	e7dd      	b.n	801ed4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801ed90:	4548      	cmp	r0, r9
 801ed92:	bfa8      	it	ge
 801ed94:	4648      	movge	r0, r9
 801ed96:	f9b8 2000 	ldrsh.w	r2, [r8]
 801ed9a:	2100      	movs	r1, #0
 801ed9c:	1ac0      	subs	r0, r0, r3
 801ed9e:	f8b7 a000 	ldrh.w	sl, [r7]
 801eda2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801eda6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801edaa:	f8ad 2008 	strh.w	r2, [sp, #8]
 801edae:	f8ad 000a 	strh.w	r0, [sp, #10]
 801edb2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801edb6:	459a      	cmp	sl, r3
 801edb8:	dac8      	bge.n	801ed4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801edba:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801edbe:	ab03      	add	r3, sp, #12
 801edc0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801edc4:	6851      	ldr	r1, [r2, #4]
 801edc6:	c303      	stmia	r3!, {r0, r1}
 801edc8:	a803      	add	r0, sp, #12
 801edca:	a901      	add	r1, sp, #4
 801edcc:	f7ff fd6e 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 801edd0:	a803      	add	r0, sp, #12
 801edd2:	f7ff fda5 	bl	801e920 <_ZNK8touchgfx4Rect7isEmptyEv>
 801edd6:	b920      	cbnz	r0, 801ede2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801edd8:	6823      	ldr	r3, [r4, #0]
 801edda:	a903      	add	r1, sp, #12
 801eddc:	4620      	mov	r0, r4
 801edde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ede0:	4798      	blx	r3
 801ede2:	f10a 0a01 	add.w	sl, sl, #1
 801ede6:	fa1f fa8a 	uxth.w	sl, sl
 801edea:	e7e2      	b.n	801edb2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801edec:	69db      	ldr	r3, [r3, #28]
 801edee:	4798      	blx	r3
 801edf0:	4b1d      	ldr	r3, [pc, #116]	; (801ee68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801edf2:	781b      	ldrb	r3, [r3, #0]
 801edf4:	2b00      	cmp	r3, #0
 801edf6:	f43f af4d 	beq.w	801ec94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801edfa:	2300      	movs	r3, #0
 801edfc:	883d      	ldrh	r5, [r7, #0]
 801edfe:	34ea      	adds	r4, #234	; 0xea
 801ee00:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801ee04:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801ee08:	429d      	cmp	r5, r3
 801ee0a:	f6bf af43 	bge.w	801ec94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ee0e:	ab16      	add	r3, sp, #88	; 0x58
 801ee10:	4620      	mov	r0, r4
 801ee12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ee16:	3501      	adds	r5, #1
 801ee18:	3b44      	subs	r3, #68	; 0x44
 801ee1a:	b2ad      	uxth	r5, r5
 801ee1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ee20:	f7ff fe4c 	bl	801eabc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ee24:	e7ee      	b.n	801ee04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801ee26:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ee2a:	429d      	cmp	r5, r3
 801ee2c:	dae0      	bge.n	801edf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801ee2e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ee32:	ab03      	add	r3, sp, #12
 801ee34:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ee38:	6851      	ldr	r1, [r2, #4]
 801ee3a:	c303      	stmia	r3!, {r0, r1}
 801ee3c:	a803      	add	r0, sp, #12
 801ee3e:	f7ff fd6f 	bl	801e920 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ee42:	b920      	cbnz	r0, 801ee4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801ee44:	6823      	ldr	r3, [r4, #0]
 801ee46:	a903      	add	r1, sp, #12
 801ee48:	4620      	mov	r0, r4
 801ee4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee4c:	4798      	blx	r3
 801ee4e:	3501      	adds	r5, #1
 801ee50:	b2ad      	uxth	r5, r5
 801ee52:	e7e8      	b.n	801ee26 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801ee54:	4298      	cmp	r0, r3
 801ee56:	da9b      	bge.n	801ed90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801ee58:	4648      	mov	r0, r9
 801ee5a:	e79c      	b.n	801ed96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801ee5c:	20000074 	.word	0x20000074
 801ee60:	2000ba4c 	.word	0x2000ba4c
 801ee64:	2000ba42 	.word	0x2000ba42
 801ee68:	2000ba4a 	.word	0x2000ba4a
 801ee6c:	2000ba40 	.word	0x2000ba40

0801ee70 <_ZNK8touchgfx4Font8getGlyphEt>:
 801ee70:	b513      	push	{r0, r1, r4, lr}
 801ee72:	2200      	movs	r2, #0
 801ee74:	ab02      	add	r3, sp, #8
 801ee76:	9201      	str	r2, [sp, #4]
 801ee78:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801ee7c:	6802      	ldr	r2, [r0, #0]
 801ee7e:	6894      	ldr	r4, [r2, #8]
 801ee80:	aa01      	add	r2, sp, #4
 801ee82:	47a0      	blx	r4
 801ee84:	b002      	add	sp, #8
 801ee86:	bd10      	pop	{r4, pc}

0801ee88 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801ee88:	8940      	ldrh	r0, [r0, #10]
 801ee8a:	4770      	bx	lr

0801ee8c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801ee8c:	8980      	ldrh	r0, [r0, #12]
 801ee8e:	4770      	bx	lr

0801ee90 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ee90:	8880      	ldrh	r0, [r0, #4]
 801ee92:	4770      	bx	lr

0801ee94 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801ee94:	7983      	ldrb	r3, [r0, #6]
 801ee96:	8880      	ldrh	r0, [r0, #4]
 801ee98:	4418      	add	r0, r3
 801ee9a:	b280      	uxth	r0, r0
 801ee9c:	4770      	bx	lr

0801ee9e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801ee9e:	79c0      	ldrb	r0, [r0, #7]
 801eea0:	4770      	bx	lr

0801eea2 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801eea2:	b508      	push	{r3, lr}
 801eea4:	6803      	ldr	r3, [r0, #0]
 801eea6:	68db      	ldr	r3, [r3, #12]
 801eea8:	4798      	blx	r3
 801eeaa:	b140      	cbz	r0, 801eebe <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801eeac:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801eeb0:	7a83      	ldrb	r3, [r0, #10]
 801eeb2:	2a00      	cmp	r2, #0
 801eeb4:	bfb4      	ite	lt
 801eeb6:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801eeba:	2000      	movge	r0, #0
 801eebc:	4318      	orrs	r0, r3
 801eebe:	bd08      	pop	{r3, pc}

0801eec0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801eec0:	b40e      	push	{r1, r2, r3}
 801eec2:	b533      	push	{r0, r1, r4, r5, lr}
 801eec4:	ab05      	add	r3, sp, #20
 801eec6:	f853 2b04 	ldr.w	r2, [r3], #4
 801eeca:	9301      	str	r3, [sp, #4]
 801eecc:	4b0a      	ldr	r3, [pc, #40]	; (801eef8 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801eece:	685c      	ldr	r4, [r3, #4]
 801eed0:	f014 0f01 	tst.w	r4, #1
 801eed4:	ea4f 0464 	mov.w	r4, r4, asr #1
 801eed8:	bf1c      	itt	ne
 801eeda:	681b      	ldrne	r3, [r3, #0]
 801eedc:	5901      	ldrne	r1, [r0, r4]
 801eede:	4420      	add	r0, r4
 801eee0:	bf0c      	ite	eq
 801eee2:	681d      	ldreq	r5, [r3, #0]
 801eee4:	58cd      	ldrne	r5, [r1, r3]
 801eee6:	2100      	movs	r1, #0
 801eee8:	9b01      	ldr	r3, [sp, #4]
 801eeea:	47a8      	blx	r5
 801eeec:	b002      	add	sp, #8
 801eeee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eef2:	b003      	add	sp, #12
 801eef4:	4770      	bx	lr
 801eef6:	bf00      	nop
 801eef8:	2000006c 	.word	0x2000006c

0801eefc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801eefc:	b40c      	push	{r2, r3}
 801eefe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ef00:	ab06      	add	r3, sp, #24
 801ef02:	f853 2b04 	ldr.w	r2, [r3], #4
 801ef06:	9301      	str	r3, [sp, #4]
 801ef08:	4b09      	ldr	r3, [pc, #36]	; (801ef30 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801ef0a:	685c      	ldr	r4, [r3, #4]
 801ef0c:	f014 0f01 	tst.w	r4, #1
 801ef10:	ea4f 0464 	mov.w	r4, r4, asr #1
 801ef14:	bf1c      	itt	ne
 801ef16:	681b      	ldrne	r3, [r3, #0]
 801ef18:	5905      	ldrne	r5, [r0, r4]
 801ef1a:	4420      	add	r0, r4
 801ef1c:	bf0c      	ite	eq
 801ef1e:	681d      	ldreq	r5, [r3, #0]
 801ef20:	58ed      	ldrne	r5, [r5, r3]
 801ef22:	9b01      	ldr	r3, [sp, #4]
 801ef24:	47a8      	blx	r5
 801ef26:	b003      	add	sp, #12
 801ef28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ef2c:	b002      	add	sp, #8
 801ef2e:	4770      	bx	lr
 801ef30:	2000006c 	.word	0x2000006c

0801ef34 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ef34:	b40e      	push	{r1, r2, r3}
 801ef36:	b510      	push	{r4, lr}
 801ef38:	b089      	sub	sp, #36	; 0x24
 801ef3a:	ab0b      	add	r3, sp, #44	; 0x2c
 801ef3c:	a802      	add	r0, sp, #8
 801ef3e:	f853 4b04 	ldr.w	r4, [r3], #4
 801ef42:	9301      	str	r3, [sp, #4]
 801ef44:	f000 fe62 	bl	801fc0c <_ZN8touchgfx12TextProviderC1Ev>
 801ef48:	4621      	mov	r1, r4
 801ef4a:	9a01      	ldr	r2, [sp, #4]
 801ef4c:	a802      	add	r0, sp, #8
 801ef4e:	2401      	movs	r4, #1
 801ef50:	f000 fe65 	bl	801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801ef54:	a802      	add	r0, sp, #8
 801ef56:	f000 fe09 	bl	801fb6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ef5a:	b138      	cbz	r0, 801ef6c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801ef5c:	280a      	cmp	r0, #10
 801ef5e:	a802      	add	r0, sp, #8
 801ef60:	bf04      	itt	eq
 801ef62:	3401      	addeq	r4, #1
 801ef64:	b224      	sxtheq	r4, r4
 801ef66:	f000 fe01 	bl	801fb6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ef6a:	e7f6      	b.n	801ef5a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801ef6c:	b2a0      	uxth	r0, r4
 801ef6e:	b009      	add	sp, #36	; 0x24
 801ef70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef74:	b003      	add	sp, #12
 801ef76:	4770      	bx	lr

0801ef78 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ef78:	b40e      	push	{r1, r2, r3}
 801ef7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef7c:	b088      	sub	sp, #32
 801ef7e:	4604      	mov	r4, r0
 801ef80:	2600      	movs	r6, #0
 801ef82:	ab0d      	add	r3, sp, #52	; 0x34
 801ef84:	a802      	add	r0, sp, #8
 801ef86:	f853 5b04 	ldr.w	r5, [r3], #4
 801ef8a:	9301      	str	r3, [sp, #4]
 801ef8c:	f000 fe3e 	bl	801fc0c <_ZN8touchgfx12TextProviderC1Ev>
 801ef90:	4629      	mov	r1, r5
 801ef92:	9a01      	ldr	r2, [sp, #4]
 801ef94:	a802      	add	r0, sp, #8
 801ef96:	4d1f      	ldr	r5, [pc, #124]	; (801f014 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801ef98:	f000 fe41 	bl	801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801ef9c:	2100      	movs	r1, #0
 801ef9e:	a802      	add	r0, sp, #8
 801efa0:	f000 fdee 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801efa4:	b378      	cbz	r0, 801f006 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801efa6:	280a      	cmp	r0, #10
 801efa8:	d028      	beq.n	801effc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801efaa:	6823      	ldr	r3, [r4, #0]
 801efac:	4601      	mov	r1, r0
 801efae:	4620      	mov	r0, r4
 801efb0:	68db      	ldr	r3, [r3, #12]
 801efb2:	4798      	blx	r3
 801efb4:	b310      	cbz	r0, 801effc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801efb6:	7b41      	ldrb	r1, [r0, #13]
 801efb8:	f890 e008 	ldrb.w	lr, [r0, #8]
 801efbc:	f011 0f40 	tst.w	r1, #64	; 0x40
 801efc0:	88a3      	ldrh	r3, [r4, #4]
 801efc2:	79c0      	ldrb	r0, [r0, #7]
 801efc4:	bf14      	ite	ne
 801efc6:	462f      	movne	r7, r5
 801efc8:	2700      	moveq	r7, #0
 801efca:	f011 0f20 	tst.w	r1, #32
 801efce:	ea47 070e 	orr.w	r7, r7, lr
 801efd2:	bf14      	ite	ne
 801efd4:	f44f 7280 	movne.w	r2, #256	; 0x100
 801efd8:	2200      	moveq	r2, #0
 801efda:	f011 0f10 	tst.w	r1, #16
 801efde:	ea42 0207 	orr.w	r2, r2, r7
 801efe2:	eba3 0302 	sub.w	r3, r3, r2
 801efe6:	bf14      	ite	ne
 801efe8:	f44f 7280 	movne.w	r2, #256	; 0x100
 801efec:	2200      	moveq	r2, #0
 801efee:	4302      	orrs	r2, r0
 801eff0:	fa12 f383 	uxtah	r3, r2, r3
 801eff4:	b29b      	uxth	r3, r3
 801eff6:	42b3      	cmp	r3, r6
 801eff8:	bfc8      	it	gt
 801effa:	b21e      	sxthgt	r6, r3
 801effc:	2100      	movs	r1, #0
 801effe:	a802      	add	r0, sp, #8
 801f000:	f000 fdbe 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f004:	e7ce      	b.n	801efa4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801f006:	b2b0      	uxth	r0, r6
 801f008:	b008      	add	sp, #32
 801f00a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f00e:	b003      	add	sp, #12
 801f010:	4770      	bx	lr
 801f012:	bf00      	nop
 801f014:	fffffe00 	.word	0xfffffe00

0801f018 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801f018:	b40e      	push	{r1, r2, r3}
 801f01a:	b530      	push	{r4, r5, lr}
 801f01c:	b088      	sub	sp, #32
 801f01e:	4605      	mov	r5, r0
 801f020:	ab0b      	add	r3, sp, #44	; 0x2c
 801f022:	a802      	add	r0, sp, #8
 801f024:	f853 4b04 	ldr.w	r4, [r3], #4
 801f028:	9301      	str	r3, [sp, #4]
 801f02a:	f000 fdef 	bl	801fc0c <_ZN8touchgfx12TextProviderC1Ev>
 801f02e:	4621      	mov	r1, r4
 801f030:	9a01      	ldr	r2, [sp, #4]
 801f032:	a802      	add	r0, sp, #8
 801f034:	24ff      	movs	r4, #255	; 0xff
 801f036:	f000 fdf2 	bl	801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801f03a:	2100      	movs	r1, #0
 801f03c:	a802      	add	r0, sp, #8
 801f03e:	f000 fd9f 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f042:	b1a0      	cbz	r0, 801f06e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801f044:	280a      	cmp	r0, #10
 801f046:	d00d      	beq.n	801f064 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801f048:	682b      	ldr	r3, [r5, #0]
 801f04a:	4601      	mov	r1, r0
 801f04c:	4628      	mov	r0, r5
 801f04e:	68db      	ldr	r3, [r3, #12]
 801f050:	4798      	blx	r3
 801f052:	b138      	cbz	r0, 801f064 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801f054:	792b      	ldrb	r3, [r5, #4]
 801f056:	7a02      	ldrb	r2, [r0, #8]
 801f058:	1a9b      	subs	r3, r3, r2
 801f05a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801f05e:	429c      	cmp	r4, r3
 801f060:	bfa8      	it	ge
 801f062:	461c      	movge	r4, r3
 801f064:	2100      	movs	r1, #0
 801f066:	a802      	add	r0, sp, #8
 801f068:	f000 fd8a 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f06c:	e7e9      	b.n	801f042 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801f06e:	4620      	mov	r0, r4
 801f070:	b008      	add	sp, #32
 801f072:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f076:	b003      	add	sp, #12
 801f078:	4770      	bx	lr

0801f07a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f07a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f07e:	f04f 0a00 	mov.w	sl, #0
 801f082:	b087      	sub	sp, #28
 801f084:	4614      	mov	r4, r2
 801f086:	461d      	mov	r5, r3
 801f088:	4606      	mov	r6, r0
 801f08a:	4657      	mov	r7, sl
 801f08c:	4668      	mov	r0, sp
 801f08e:	46d1      	mov	r9, sl
 801f090:	4688      	mov	r8, r1
 801f092:	f000 fdbb 	bl	801fc0c <_ZN8touchgfx12TextProviderC1Ev>
 801f096:	462a      	mov	r2, r5
 801f098:	4621      	mov	r1, r4
 801f09a:	4668      	mov	r0, sp
 801f09c:	f000 fdbf 	bl	801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801f0a0:	4641      	mov	r1, r8
 801f0a2:	4668      	mov	r0, sp
 801f0a4:	f000 fd6c 	bl	801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f0a8:	4605      	mov	r5, r0
 801f0aa:	b108      	cbz	r0, 801f0b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801f0ac:	280a      	cmp	r0, #10
 801f0ae:	d107      	bne.n	801f0c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801f0b0:	45b9      	cmp	r9, r7
 801f0b2:	dd00      	ble.n	801f0b6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801f0b4:	464f      	mov	r7, r9
 801f0b6:	f04f 0900 	mov.w	r9, #0
 801f0ba:	e01e      	b.n	801f0fa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801f0bc:	46aa      	mov	sl, r5
 801f0be:	e7ef      	b.n	801f0a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801f0c0:	6833      	ldr	r3, [r6, #0]
 801f0c2:	4601      	mov	r1, r0
 801f0c4:	4630      	mov	r0, r6
 801f0c6:	68db      	ldr	r3, [r3, #12]
 801f0c8:	4798      	blx	r3
 801f0ca:	4602      	mov	r2, r0
 801f0cc:	2800      	cmp	r0, #0
 801f0ce:	d0f5      	beq.n	801f0bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801f0d0:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801f0d4:	4651      	mov	r1, sl
 801f0d6:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	6833      	ldr	r3, [r6, #0]
 801f0de:	8885      	ldrh	r5, [r0, #4]
 801f0e0:	4630      	mov	r0, r6
 801f0e2:	bfb4      	ite	lt
 801f0e4:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801f0e8:	2400      	movge	r4, #0
 801f0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f0ec:	ea44 040b 	orr.w	r4, r4, fp
 801f0f0:	4798      	blx	r3
 801f0f2:	4404      	add	r4, r0
 801f0f4:	444c      	add	r4, r9
 801f0f6:	fa1f f984 	uxth.w	r9, r4
 801f0fa:	2d00      	cmp	r5, #0
 801f0fc:	d1de      	bne.n	801f0bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801f0fe:	4638      	mov	r0, r7
 801f100:	b007      	add	sp, #28
 801f102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f106 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801f106:	b513      	push	{r0, r1, r4, lr}
 801f108:	1d01      	adds	r1, r0, #4
 801f10a:	4603      	mov	r3, r0
 801f10c:	c903      	ldmia	r1, {r0, r1}
 801f10e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f112:	2100      	movs	r1, #0
 801f114:	4618      	mov	r0, r3
 801f116:	f8ad 1000 	strh.w	r1, [sp]
 801f11a:	f8ad 1002 	strh.w	r1, [sp, #2]
 801f11e:	6819      	ldr	r1, [r3, #0]
 801f120:	690c      	ldr	r4, [r1, #16]
 801f122:	4669      	mov	r1, sp
 801f124:	47a0      	blx	r4
 801f126:	b002      	add	sp, #8
 801f128:	bd10      	pop	{r4, pc}

0801f12a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801f12a:	b538      	push	{r3, r4, r5, lr}
 801f12c:	680b      	ldr	r3, [r1, #0]
 801f12e:	460c      	mov	r4, r1
 801f130:	4605      	mov	r5, r0
 801f132:	68db      	ldr	r3, [r3, #12]
 801f134:	4798      	blx	r3
 801f136:	6823      	ldr	r3, [r4, #0]
 801f138:	4620      	mov	r0, r4
 801f13a:	4629      	mov	r1, r5
 801f13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f13e:	4798      	blx	r3
 801f140:	4628      	mov	r0, r5
 801f142:	bd38      	pop	{r3, r4, r5, pc}

0801f144 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801f144:	b410      	push	{r4}
 801f146:	880a      	ldrh	r2, [r1, #0]
 801f148:	8884      	ldrh	r4, [r0, #4]
 801f14a:	4422      	add	r2, r4
 801f14c:	800a      	strh	r2, [r1, #0]
 801f14e:	884a      	ldrh	r2, [r1, #2]
 801f150:	88c4      	ldrh	r4, [r0, #6]
 801f152:	4422      	add	r2, r4
 801f154:	804a      	strh	r2, [r1, #2]
 801f156:	6940      	ldr	r0, [r0, #20]
 801f158:	b120      	cbz	r0, 801f164 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801f15a:	6803      	ldr	r3, [r0, #0]
 801f15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f162:	4718      	bx	r3
 801f164:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f168:	4770      	bx	lr

0801f16a <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f16a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f16c:	460b      	mov	r3, r1
 801f16e:	b085      	sub	sp, #20
 801f170:	4604      	mov	r4, r0
 801f172:	b901      	cbnz	r1, 801f176 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f174:	b1f2      	cbz	r2, 801f1b4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801f176:	1d27      	adds	r7, r4, #4
 801f178:	ad02      	add	r5, sp, #8
 801f17a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f17e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f182:	88e1      	ldrh	r1, [r4, #6]
 801f184:	4620      	mov	r0, r4
 801f186:	440a      	add	r2, r1
 801f188:	88a1      	ldrh	r1, [r4, #4]
 801f18a:	4419      	add	r1, r3
 801f18c:	6823      	ldr	r3, [r4, #0]
 801f18e:	b212      	sxth	r2, r2
 801f190:	b209      	sxth	r1, r1
 801f192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f194:	4798      	blx	r3
 801f196:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f19a:	e885 0003 	stmia.w	r5, {r0, r1}
 801f19e:	6960      	ldr	r0, [r4, #20]
 801f1a0:	b150      	cbz	r0, 801f1b8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801f1a2:	6803      	ldr	r3, [r0, #0]
 801f1a4:	4669      	mov	r1, sp
 801f1a6:	691b      	ldr	r3, [r3, #16]
 801f1a8:	4798      	blx	r3
 801f1aa:	6960      	ldr	r0, [r4, #20]
 801f1ac:	6803      	ldr	r3, [r0, #0]
 801f1ae:	691b      	ldr	r3, [r3, #16]
 801f1b0:	4629      	mov	r1, r5
 801f1b2:	4798      	blx	r3
 801f1b4:	b005      	add	sp, #20
 801f1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1b8:	f7ff fc04 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801f1bc:	6803      	ldr	r3, [r0, #0]
 801f1be:	4669      	mov	r1, sp
 801f1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1c2:	4798      	blx	r3
 801f1c4:	f7ff fbfe 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801f1c8:	6803      	ldr	r3, [r0, #0]
 801f1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1cc:	e7f0      	b.n	801f1b0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801f1ce <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f1ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f1d0:	8882      	ldrh	r2, [r0, #4]
 801f1d2:	4605      	mov	r5, r0
 801f1d4:	880b      	ldrh	r3, [r1, #0]
 801f1d6:	460c      	mov	r4, r1
 801f1d8:	4413      	add	r3, r2
 801f1da:	800b      	strh	r3, [r1, #0]
 801f1dc:	884b      	ldrh	r3, [r1, #2]
 801f1de:	88c2      	ldrh	r2, [r0, #6]
 801f1e0:	4413      	add	r3, r2
 801f1e2:	4602      	mov	r2, r0
 801f1e4:	804b      	strh	r3, [r1, #2]
 801f1e6:	466b      	mov	r3, sp
 801f1e8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801f1ec:	6851      	ldr	r1, [r2, #4]
 801f1ee:	c303      	stmia	r3!, {r0, r1}
 801f1f0:	4621      	mov	r1, r4
 801f1f2:	4668      	mov	r0, sp
 801f1f4:	f7ff fb5a 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 801f1f8:	466b      	mov	r3, sp
 801f1fa:	cb03      	ldmia	r3!, {r0, r1}
 801f1fc:	6020      	str	r0, [r4, #0]
 801f1fe:	6061      	str	r1, [r4, #4]
 801f200:	6968      	ldr	r0, [r5, #20]
 801f202:	b128      	cbz	r0, 801f210 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801f204:	6803      	ldr	r3, [r0, #0]
 801f206:	691b      	ldr	r3, [r3, #16]
 801f208:	4621      	mov	r1, r4
 801f20a:	4798      	blx	r3
 801f20c:	b003      	add	sp, #12
 801f20e:	bd30      	pop	{r4, r5, pc}
 801f210:	f7ff fbd8 	bl	801e9c4 <_ZN8touchgfx11Application11getInstanceEv>
 801f214:	6803      	ldr	r3, [r0, #0]
 801f216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f218:	e7f6      	b.n	801f208 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801f21a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f21a:	b570      	push	{r4, r5, r6, lr}
 801f21c:	8882      	ldrh	r2, [r0, #4]
 801f21e:	460c      	mov	r4, r1
 801f220:	880b      	ldrh	r3, [r1, #0]
 801f222:	4605      	mov	r5, r0
 801f224:	4413      	add	r3, r2
 801f226:	800b      	strh	r3, [r1, #0]
 801f228:	884b      	ldrh	r3, [r1, #2]
 801f22a:	88c2      	ldrh	r2, [r0, #6]
 801f22c:	4413      	add	r3, r2
 801f22e:	804b      	strh	r3, [r1, #2]
 801f230:	1d01      	adds	r1, r0, #4
 801f232:	4620      	mov	r0, r4
 801f234:	f7ff fb3a 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 801f238:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f23c:	b163      	cbz	r3, 801f258 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f23e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f242:	b933      	cbnz	r3, 801f252 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801f244:	bd70      	pop	{r4, r5, r6, pc}
 801f246:	6803      	ldr	r3, [r0, #0]
 801f248:	4621      	mov	r1, r4
 801f24a:	6a1b      	ldr	r3, [r3, #32]
 801f24c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f250:	4718      	bx	r3
 801f252:	6968      	ldr	r0, [r5, #20]
 801f254:	2800      	cmp	r0, #0
 801f256:	d1f6      	bne.n	801f246 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801f258:	bd70      	pop	{r4, r5, r6, pc}

0801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f25a:	b510      	push	{r4, lr}
 801f25c:	2300      	movs	r3, #0
 801f25e:	4604      	mov	r4, r0
 801f260:	4608      	mov	r0, r1
 801f262:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f266:	8023      	strh	r3, [r4, #0]
 801f268:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f26c:	8063      	strh	r3, [r4, #2]
 801f26e:	6803      	ldr	r3, [r0, #0]
 801f270:	80a1      	strh	r1, [r4, #4]
 801f272:	4621      	mov	r1, r4
 801f274:	80e2      	strh	r2, [r4, #6]
 801f276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f278:	4798      	blx	r3
 801f27a:	4620      	mov	r0, r4
 801f27c:	bd10      	pop	{r4, pc}

0801f27e <_ZN8touchgfx6memsetEPvhm>:
 801f27e:	4402      	add	r2, r0
 801f280:	4290      	cmp	r0, r2
 801f282:	d002      	beq.n	801f28a <_ZN8touchgfx6memsetEPvhm+0xc>
 801f284:	f800 1b01 	strb.w	r1, [r0], #1
 801f288:	e7fa      	b.n	801f280 <_ZN8touchgfx6memsetEPvhm+0x2>
 801f28a:	4770      	bx	lr

0801f28c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801f28c:	b538      	push	{r3, r4, r5, lr}
 801f28e:	4605      	mov	r5, r0
 801f290:	f001 fc5c 	bl	8020b4c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f294:	4604      	mov	r4, r0
 801f296:	4628      	mov	r0, r5
 801f298:	f001 fbca 	bl	8020a30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f29c:	2800      	cmp	r0, #0
 801f29e:	bf14      	ite	ne
 801f2a0:	2002      	movne	r0, #2
 801f2a2:	2000      	moveq	r0, #0
 801f2a4:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801f2a8:	b280      	uxth	r0, r0
 801f2aa:	bd38      	pop	{r3, r4, r5, pc}

0801f2ac <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801f2ac:	b538      	push	{r3, r4, r5, lr}
 801f2ae:	4605      	mov	r5, r0
 801f2b0:	f001 fc4c 	bl	8020b4c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f2b4:	4604      	mov	r4, r0
 801f2b6:	4628      	mov	r0, r5
 801f2b8:	f001 fbba 	bl	8020a30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801f2bc:	2800      	cmp	r0, #0
 801f2be:	bf14      	ite	ne
 801f2c0:	2002      	movne	r0, #2
 801f2c2:	2000      	moveq	r0, #0
 801f2c4:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801f2c8:	f040 0001 	orr.w	r0, r0, #1
 801f2cc:	b280      	uxth	r0, r0
 801f2ce:	bd38      	pop	{r3, r4, r5, pc}

0801f2d0 <_ZN8touchgfx3clzEl>:
 801f2d0:	b1e8      	cbz	r0, 801f30e <_ZN8touchgfx3clzEl+0x3e>
 801f2d2:	2800      	cmp	r0, #0
 801f2d4:	bfb8      	it	lt
 801f2d6:	4240      	neglt	r0, r0
 801f2d8:	0c03      	lsrs	r3, r0, #16
 801f2da:	041b      	lsls	r3, r3, #16
 801f2dc:	b9ab      	cbnz	r3, 801f30a <_ZN8touchgfx3clzEl+0x3a>
 801f2de:	0400      	lsls	r0, r0, #16
 801f2e0:	2310      	movs	r3, #16
 801f2e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f2e6:	bf04      	itt	eq
 801f2e8:	0200      	lsleq	r0, r0, #8
 801f2ea:	3308      	addeq	r3, #8
 801f2ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f2f0:	bf04      	itt	eq
 801f2f2:	0100      	lsleq	r0, r0, #4
 801f2f4:	3304      	addeq	r3, #4
 801f2f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f2fa:	bf04      	itt	eq
 801f2fc:	0080      	lsleq	r0, r0, #2
 801f2fe:	3302      	addeq	r3, #2
 801f300:	2800      	cmp	r0, #0
 801f302:	bfa8      	it	ge
 801f304:	3301      	addge	r3, #1
 801f306:	1e58      	subs	r0, r3, #1
 801f308:	4770      	bx	lr
 801f30a:	2300      	movs	r3, #0
 801f30c:	e7e9      	b.n	801f2e2 <_ZN8touchgfx3clzEl+0x12>
 801f30e:	201f      	movs	r0, #31
 801f310:	4770      	bx	lr

0801f312 <_ZN8touchgfx6muldivElllRl>:
 801f312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f316:	4604      	mov	r4, r0
 801f318:	4698      	mov	r8, r3
 801f31a:	2601      	movs	r6, #1
 801f31c:	f7ff ffd8 	bl	801f2d0 <_ZN8touchgfx3clzEl>
 801f320:	2c00      	cmp	r4, #0
 801f322:	fa04 f500 	lsl.w	r5, r4, r0
 801f326:	fa06 f600 	lsl.w	r6, r6, r0
 801f32a:	bfba      	itte	lt
 801f32c:	f04f 37ff 	movlt.w	r7, #4294967295
 801f330:	4264      	neglt	r4, r4
 801f332:	2701      	movge	r7, #1
 801f334:	2900      	cmp	r1, #0
 801f336:	f106 36ff 	add.w	r6, r6, #4294967295
 801f33a:	bfbc      	itt	lt
 801f33c:	4249      	neglt	r1, r1
 801f33e:	427f      	neglt	r7, r7
 801f340:	2a00      	cmp	r2, #0
 801f342:	fa41 fe00 	asr.w	lr, r1, r0
 801f346:	ea01 0106 	and.w	r1, r1, r6
 801f34a:	bfb8      	it	lt
 801f34c:	427f      	neglt	r7, r7
 801f34e:	fb04 f401 	mul.w	r4, r4, r1
 801f352:	fb95 f3f2 	sdiv	r3, r5, r2
 801f356:	fb02 5513 	mls	r5, r2, r3, r5
 801f35a:	bfb8      	it	lt
 801f35c:	4252      	neglt	r2, r2
 801f35e:	fb94 f0f2 	sdiv	r0, r4, r2
 801f362:	fb02 4410 	mls	r4, r2, r0, r4
 801f366:	fb0e 4405 	mla	r4, lr, r5, r4
 801f36a:	fb94 f1f2 	sdiv	r1, r4, r2
 801f36e:	4408      	add	r0, r1
 801f370:	fb02 4211 	mls	r2, r2, r1, r4
 801f374:	fb0e 0003 	mla	r0, lr, r3, r0
 801f378:	f8c8 2000 	str.w	r2, [r8]
 801f37c:	4378      	muls	r0, r7
 801f37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f382 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801f382:	2002      	movs	r0, #2
 801f384:	4770      	bx	lr

0801f386 <_ZN8touchgfx6ScreenD1Ev>:
 801f386:	4770      	bx	lr

0801f388 <_ZN8touchgfx6Screen11setupScreenEv>:
 801f388:	4770      	bx	lr

0801f38a <_ZN8touchgfx12GestureEventD1Ev>:
 801f38a:	4770      	bx	lr

0801f38c <_ZN8touchgfx12GestureEventD0Ev>:
 801f38c:	b510      	push	{r4, lr}
 801f38e:	4604      	mov	r4, r0
 801f390:	210c      	movs	r1, #12
 801f392:	f003 fbb5 	bl	8022b00 <_ZdlPvj>
 801f396:	4620      	mov	r0, r4
 801f398:	bd10      	pop	{r4, pc}

0801f39a <_ZN8touchgfx6ScreenD0Ev>:
 801f39a:	b510      	push	{r4, lr}
 801f39c:	4604      	mov	r4, r0
 801f39e:	213c      	movs	r1, #60	; 0x3c
 801f3a0:	f003 fbae 	bl	8022b00 <_ZdlPvj>
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	bd10      	pop	{r4, pc}

0801f3a8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f3a8:	b530      	push	{r4, r5, lr}
 801f3aa:	460d      	mov	r5, r1
 801f3ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f3ae:	b087      	sub	sp, #28
 801f3b0:	4604      	mov	r4, r0
 801f3b2:	b301      	cbz	r1, 801f3f6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f3b4:	a801      	add	r0, sp, #4
 801f3b6:	f7ff ff50 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f3ba:	892a      	ldrh	r2, [r5, #8]
 801f3bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f3c0:	7928      	ldrb	r0, [r5, #4]
 801f3c2:	1ad2      	subs	r2, r2, r3
 801f3c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f3c6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f3ca:	441a      	add	r2, r3
 801f3cc:	896b      	ldrh	r3, [r5, #10]
 801f3ce:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f3d2:	f88d 0010 	strb.w	r0, [sp, #16]
 801f3d6:	1b5b      	subs	r3, r3, r5
 801f3d8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801f3da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f3dc:	442b      	add	r3, r5
 801f3de:	4d07      	ldr	r5, [pc, #28]	; (801f3fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f3e0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f3e4:	a903      	add	r1, sp, #12
 801f3e6:	9503      	str	r5, [sp, #12]
 801f3e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f3ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f3f0:	6803      	ldr	r3, [r0, #0]
 801f3f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f3f4:	4798      	blx	r3
 801f3f6:	b007      	add	sp, #28
 801f3f8:	bd30      	pop	{r4, r5, pc}
 801f3fa:	bf00      	nop
 801f3fc:	08026268 	.word	0x08026268

0801f400 <_ZNK8touchgfx4Rect9intersectEss>:
 801f400:	b510      	push	{r4, lr}
 801f402:	f9b0 3000 	ldrsh.w	r3, [r0]
 801f406:	428b      	cmp	r3, r1
 801f408:	dc10      	bgt.n	801f42c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f40a:	8884      	ldrh	r4, [r0, #4]
 801f40c:	4423      	add	r3, r4
 801f40e:	b21b      	sxth	r3, r3
 801f410:	4299      	cmp	r1, r3
 801f412:	da0b      	bge.n	801f42c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f414:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f418:	4293      	cmp	r3, r2
 801f41a:	dc07      	bgt.n	801f42c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f41c:	88c0      	ldrh	r0, [r0, #6]
 801f41e:	4418      	add	r0, r3
 801f420:	b200      	sxth	r0, r0
 801f422:	4282      	cmp	r2, r0
 801f424:	bfac      	ite	ge
 801f426:	2000      	movge	r0, #0
 801f428:	2001      	movlt	r0, #1
 801f42a:	bd10      	pop	{r4, pc}
 801f42c:	2000      	movs	r0, #0
 801f42e:	bd10      	pop	{r4, pc}

0801f430 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f430:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f432:	460c      	mov	r4, r1
 801f434:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f436:	b089      	sub	sp, #36	; 0x24
 801f438:	4605      	mov	r5, r0
 801f43a:	2900      	cmp	r1, #0
 801f43c:	d053      	beq.n	801f4e6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801f43e:	4668      	mov	r0, sp
 801f440:	f7ff ff0b 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f444:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801f446:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801f448:	4668      	mov	r0, sp
 801f44a:	8922      	ldrh	r2, [r4, #8]
 801f44c:	88e1      	ldrh	r1, [r4, #6]
 801f44e:	443a      	add	r2, r7
 801f450:	4431      	add	r1, r6
 801f452:	b212      	sxth	r2, r2
 801f454:	b209      	sxth	r1, r1
 801f456:	f7ff ffd3 	bl	801f400 <_ZNK8touchgfx4Rect9intersectEss>
 801f45a:	b1c8      	cbz	r0, 801f490 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801f45c:	89a2      	ldrh	r2, [r4, #12]
 801f45e:	4668      	mov	r0, sp
 801f460:	8961      	ldrh	r1, [r4, #10]
 801f462:	443a      	add	r2, r7
 801f464:	4431      	add	r1, r6
 801f466:	b212      	sxth	r2, r2
 801f468:	b209      	sxth	r1, r1
 801f46a:	f7ff ffc9 	bl	801f400 <_ZNK8touchgfx4Rect9intersectEss>
 801f46e:	b978      	cbnz	r0, 801f490 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801f470:	4b1e      	ldr	r3, [pc, #120]	; (801f4ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801f472:	a904      	add	r1, sp, #16
 801f474:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f478:	9304      	str	r3, [sp, #16]
 801f47a:	2302      	movs	r3, #2
 801f47c:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f480:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f484:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f486:	f88d 3014 	strb.w	r3, [sp, #20]
 801f48a:	6803      	ldr	r3, [r0, #0]
 801f48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f48e:	4798      	blx	r3
 801f490:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801f492:	a802      	add	r0, sp, #8
 801f494:	f7ff fee1 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f498:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f49c:	88e0      	ldrh	r0, [r4, #6]
 801f49e:	8961      	ldrh	r1, [r4, #10]
 801f4a0:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801f4a4:	1a80      	subs	r0, r0, r2
 801f4a6:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801f4aa:	1a89      	subs	r1, r1, r2
 801f4ac:	8923      	ldrh	r3, [r4, #8]
 801f4ae:	4470      	add	r0, lr
 801f4b0:	89a2      	ldrh	r2, [r4, #12]
 801f4b2:	4471      	add	r1, lr
 801f4b4:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f4b6:	eba3 030c 	sub.w	r3, r3, ip
 801f4ba:	eba2 020c 	sub.w	r2, r2, ip
 801f4be:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f4c2:	7927      	ldrb	r7, [r4, #4]
 801f4c4:	4433      	add	r3, r6
 801f4c6:	4432      	add	r2, r6
 801f4c8:	4c09      	ldr	r4, [pc, #36]	; (801f4f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801f4ca:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f4cc:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f4d0:	a904      	add	r1, sp, #16
 801f4d2:	9404      	str	r4, [sp, #16]
 801f4d4:	f88d 7014 	strb.w	r7, [sp, #20]
 801f4d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f4dc:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f4e0:	6803      	ldr	r3, [r0, #0]
 801f4e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f4e4:	4798      	blx	r3
 801f4e6:	b009      	add	sp, #36	; 0x24
 801f4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4ea:	bf00      	nop
 801f4ec:	08023da0 	.word	0x08023da0
 801f4f0:	08023db4 	.word	0x08023db4

0801f4f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4f8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801f4fa:	b0a1      	sub	sp, #132	; 0x84
 801f4fc:	4604      	mov	r4, r0
 801f4fe:	460d      	mov	r5, r1
 801f500:	790b      	ldrb	r3, [r1, #4]
 801f502:	b16a      	cbz	r2, 801f520 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801f504:	b963      	cbnz	r3, 801f520 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801f506:	b021      	add	sp, #132	; 0x84
 801f508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f50c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f510:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f514:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f518:	1d20      	adds	r0, r4, #4
 801f51a:	f7ee ff73 	bl	800e404 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f51e:	e0a2      	b.n	801f666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801f520:	2b00      	cmp	r3, #0
 801f522:	f040 80a0 	bne.w	801f666 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801f526:	4a66      	ldr	r2, [pc, #408]	; (801f6c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801f528:	6812      	ldr	r2, [r2, #0]
 801f52a:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 801f52e:	86a3      	strh	r3, [r4, #52]	; 0x34
 801f530:	f1bb 0f03 	cmp.w	fp, #3
 801f534:	86e3      	strh	r3, [r4, #54]	; 0x36
 801f536:	dde9      	ble.n	801f50c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801f538:	f1bb 0f0c 	cmp.w	fp, #12
 801f53c:	6323      	str	r3, [r4, #48]	; 0x30
 801f53e:	f04f 0303 	mov.w	r3, #3
 801f542:	f04f 0600 	mov.w	r6, #0
 801f546:	bfd8      	it	le
 801f548:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801f54c:	495d      	ldr	r1, [pc, #372]	; (801f6c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801f54e:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801f552:	f04f 0a01 	mov.w	sl, #1
 801f556:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801f55a:	bfd8      	it	le
 801f55c:	fb92 f3f3 	sdivle	r3, r2, r3
 801f560:	9300      	str	r3, [sp, #0]
 801f562:	4b59      	ldr	r3, [pc, #356]	; (801f6c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801f564:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f568:	4b58      	ldr	r3, [pc, #352]	; (801f6cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801f56a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801f56e:	2248      	movs	r2, #72	; 0x48
 801f570:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f574:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f578:	ab0e      	add	r3, sp, #56	; 0x38
 801f57a:	4618      	mov	r0, r3
 801f57c:	f003 fb4c 	bl	8022c18 <memcpy>
 801f580:	f04f 32ff 	mov.w	r2, #4294967295
 801f584:	f8cd b008 	str.w	fp, [sp, #8]
 801f588:	9206      	str	r2, [sp, #24]
 801f58a:	9007      	str	r0, [sp, #28]
 801f58c:	9a00      	ldr	r2, [sp, #0]
 801f58e:	9b02      	ldr	r3, [sp, #8]
 801f590:	fb93 f3f2 	sdiv	r3, r3, r2
 801f594:	f10a 32ff 	add.w	r2, sl, #4294967295
 801f598:	b29b      	uxth	r3, r3
 801f59a:	9201      	str	r2, [sp, #4]
 801f59c:	9a07      	ldr	r2, [sp, #28]
 801f59e:	9303      	str	r3, [sp, #12]
 801f5a0:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801f5a4:	3f04      	subs	r7, #4
 801f5a6:	2300      	movs	r3, #0
 801f5a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801f5ac:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801f5b0:	a80a      	add	r0, sp, #40	; 0x28
 801f5b2:	9309      	str	r3, [sp, #36]	; 0x24
 801f5b4:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801f5b8:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801f5bc:	fb13 f302 	smulbb	r3, r3, r2
 801f5c0:	b29b      	uxth	r3, r3
 801f5c2:	9304      	str	r3, [sp, #16]
 801f5c4:	683b      	ldr	r3, [r7, #0]
 801f5c6:	fb13 f302 	smulbb	r3, r3, r2
 801f5ca:	b29b      	uxth	r3, r3
 801f5cc:	9305      	str	r3, [sp, #20]
 801f5ce:	9b04      	ldr	r3, [sp, #16]
 801f5d0:	4498      	add	r8, r3
 801f5d2:	9b05      	ldr	r3, [sp, #20]
 801f5d4:	4499      	add	r9, r3
 801f5d6:	fa0f f888 	sxth.w	r8, r8
 801f5da:	fa0f f989 	sxth.w	r9, r9
 801f5de:	4641      	mov	r1, r8
 801f5e0:	464a      	mov	r2, r9
 801f5e2:	f7ff ff0d 	bl	801f400 <_ZNK8touchgfx4Rect9intersectEss>
 801f5e6:	b380      	cbz	r0, 801f64a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f5e8:	4641      	mov	r1, r8
 801f5ea:	ab09      	add	r3, sp, #36	; 0x24
 801f5ec:	464a      	mov	r2, r9
 801f5ee:	1d20      	adds	r0, r4, #4
 801f5f0:	f7ee ff08 	bl	800e404 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f5f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f5f6:	b341      	cbz	r1, 801f64a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f5f8:	42b1      	cmp	r1, r6
 801f5fa:	d026      	beq.n	801f64a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f5fc:	a80c      	add	r0, sp, #48	; 0x30
 801f5fe:	f7ff fe2c 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f602:	2002      	movs	r0, #2
 801f604:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f608:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801f60c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801f610:	fb92 f2f0 	sdiv	r2, r2, r0
 801f614:	440a      	add	r2, r1
 801f616:	1a99      	subs	r1, r3, r2
 801f618:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f61c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f620:	fb93 f3f0 	sdiv	r3, r3, r0
 801f624:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801f628:	4403      	add	r3, r0
 801f62a:	1ad3      	subs	r3, r2, r3
 801f62c:	9a06      	ldr	r2, [sp, #24]
 801f62e:	435b      	muls	r3, r3
 801f630:	fb01 3301 	mla	r3, r1, r1, r3
 801f634:	4293      	cmp	r3, r2
 801f636:	d208      	bcs.n	801f64a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f638:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f63c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f63e:	86a2      	strh	r2, [r4, #52]	; 0x34
 801f640:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f644:	6326      	str	r6, [r4, #48]	; 0x30
 801f646:	86e2      	strh	r2, [r4, #54]	; 0x36
 801f648:	9306      	str	r3, [sp, #24]
 801f64a:	9b01      	ldr	r3, [sp, #4]
 801f64c:	3710      	adds	r7, #16
 801f64e:	3302      	adds	r3, #2
 801f650:	2b08      	cmp	r3, #8
 801f652:	9301      	str	r3, [sp, #4]
 801f654:	dda7      	ble.n	801f5a6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801f656:	9b02      	ldr	r3, [sp, #8]
 801f658:	f10a 0a01 	add.w	sl, sl, #1
 801f65c:	445b      	add	r3, fp
 801f65e:	9302      	str	r3, [sp, #8]
 801f660:	9b00      	ldr	r3, [sp, #0]
 801f662:	4553      	cmp	r3, sl
 801f664:	da92      	bge.n	801f58c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801f666:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f668:	2900      	cmp	r1, #0
 801f66a:	f43f af4c 	beq.w	801f506 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f66e:	a80c      	add	r0, sp, #48	; 0x30
 801f670:	2600      	movs	r6, #0
 801f672:	f7ff fdf2 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f676:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801f67a:	88ea      	ldrh	r2, [r5, #6]
 801f67c:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801f680:	1ad2      	subs	r2, r2, r3
 801f682:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f684:	7929      	ldrb	r1, [r5, #4]
 801f686:	441a      	add	r2, r3
 801f688:	892b      	ldrh	r3, [r5, #8]
 801f68a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801f68e:	a90e      	add	r1, sp, #56	; 0x38
 801f690:	1a1b      	subs	r3, r3, r0
 801f692:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801f694:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801f698:	4403      	add	r3, r0
 801f69a:	480d      	ldr	r0, [pc, #52]	; (801f6d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801f69c:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801f6a0:	900e      	str	r0, [sp, #56]	; 0x38
 801f6a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f6a4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801f6a8:	6803      	ldr	r3, [r0, #0]
 801f6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f6ac:	4798      	blx	r3
 801f6ae:	792b      	ldrb	r3, [r5, #4]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	f43f af28 	beq.w	801f506 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f6b6:	6326      	str	r6, [r4, #48]	; 0x30
 801f6b8:	86a6      	strh	r6, [r4, #52]	; 0x34
 801f6ba:	86e6      	strh	r6, [r4, #54]	; 0x36
 801f6bc:	e723      	b.n	801f506 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f6be:	bf00      	nop
 801f6c0:	2000ba4c 	.word	0x2000ba4c
 801f6c4:	08023b94 	.word	0x08023b94
 801f6c8:	2000ba40 	.word	0x2000ba40
 801f6cc:	2000ba42 	.word	0x2000ba42
 801f6d0:	08023da0 	.word	0x08023da0

0801f6d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801f6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f6d6:	4604      	mov	r4, r0
 801f6d8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801f6dc:	3201      	adds	r2, #1
 801f6de:	d114      	bne.n	801f70a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801f6e0:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801f6e4:	2200      	movs	r2, #0
 801f6e6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801f6ea:	6803      	ldr	r3, [r0, #0]
 801f6ec:	f8ad 1006 	strh.w	r1, [sp, #6]
 801f6f0:	4669      	mov	r1, sp
 801f6f2:	f8ad 2000 	strh.w	r2, [sp]
 801f6f6:	f8ad 2002 	strh.w	r2, [sp, #2]
 801f6fa:	f8ad 5004 	strh.w	r5, [sp, #4]
 801f6fe:	6a1b      	ldr	r3, [r3, #32]
 801f700:	4798      	blx	r3
 801f702:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801f706:	e884 0003 	stmia.w	r4, {r0, r1}
 801f70a:	4620      	mov	r0, r4
 801f70c:	b003      	add	sp, #12
 801f70e:	bd30      	pop	{r4, r5, pc}

0801f710 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801f710:	b513      	push	{r0, r1, r4, lr}
 801f712:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801f716:	4604      	mov	r4, r0
 801f718:	3301      	adds	r3, #1
 801f71a:	d109      	bne.n	801f730 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801f71c:	4601      	mov	r1, r0
 801f71e:	4668      	mov	r0, sp
 801f720:	f7ff fd9b 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f724:	f8bd 3000 	ldrh.w	r3, [sp]
 801f728:	8423      	strh	r3, [r4, #32]
 801f72a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f72e:	8463      	strh	r3, [r4, #34]	; 0x22
 801f730:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801f734:	b002      	add	sp, #8
 801f736:	bd10      	pop	{r4, pc}

0801f738 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801f738:	b513      	push	{r0, r1, r4, lr}
 801f73a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801f73e:	4604      	mov	r4, r0
 801f740:	3301      	adds	r3, #1
 801f742:	d109      	bne.n	801f758 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801f744:	4601      	mov	r1, r0
 801f746:	4668      	mov	r0, sp
 801f748:	f7ff fd87 	bl	801f25a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f74c:	f8bd 3000 	ldrh.w	r3, [sp]
 801f750:	8423      	strh	r3, [r4, #32]
 801f752:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f756:	8463      	strh	r3, [r4, #34]	; 0x22
 801f758:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801f75c:	b002      	add	sp, #8
 801f75e:	bd10      	pop	{r4, pc}

0801f760 <_ZN8touchgfx6ScreenC1Ev>:
 801f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f762:	4605      	mov	r5, r0
 801f764:	4b18      	ldr	r3, [pc, #96]	; (801f7c8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801f766:	2200      	movs	r2, #0
 801f768:	4918      	ldr	r1, [pc, #96]	; (801f7cc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801f76a:	f845 3b04 	str.w	r3, [r5], #4
 801f76e:	2301      	movs	r3, #1
 801f770:	8102      	strh	r2, [r0, #8]
 801f772:	4604      	mov	r4, r0
 801f774:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801f778:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801f77c:	4b14      	ldr	r3, [pc, #80]	; (801f7d0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801f77e:	8142      	strh	r2, [r0, #10]
 801f780:	f9b3 7000 	ldrsh.w	r7, [r3]
 801f784:	4b13      	ldr	r3, [pc, #76]	; (801f7d4 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801f786:	8182      	strh	r2, [r0, #12]
 801f788:	81c2      	strh	r2, [r0, #14]
 801f78a:	8202      	strh	r2, [r0, #16]
 801f78c:	8242      	strh	r2, [r0, #18]
 801f78e:	8282      	strh	r2, [r0, #20]
 801f790:	82c2      	strh	r2, [r0, #22]
 801f792:	6182      	str	r2, [r0, #24]
 801f794:	61c2      	str	r2, [r0, #28]
 801f796:	6202      	str	r2, [r0, #32]
 801f798:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801f79c:	62c2      	str	r2, [r0, #44]	; 0x2c
 801f79e:	6302      	str	r2, [r0, #48]	; 0x30
 801f7a0:	8682      	strh	r2, [r0, #52]	; 0x34
 801f7a2:	86c2      	strh	r2, [r0, #54]	; 0x36
 801f7a4:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f7a8:	6041      	str	r1, [r0, #4]
 801f7aa:	4611      	mov	r1, r2
 801f7ac:	4628      	mov	r0, r5
 801f7ae:	f7ee fd4b 	bl	800e248 <_ZN8touchgfx8Drawable5setXYEss>
 801f7b2:	4639      	mov	r1, r7
 801f7b4:	4628      	mov	r0, r5
 801f7b6:	f7ee fd53 	bl	800e260 <_ZN8touchgfx8Drawable8setWidthEs>
 801f7ba:	4628      	mov	r0, r5
 801f7bc:	4631      	mov	r1, r6
 801f7be:	f7ee fd51 	bl	800e264 <_ZN8touchgfx8Drawable9setHeightEs>
 801f7c2:	4620      	mov	r0, r4
 801f7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7c6:	bf00      	nop
 801f7c8:	0802627c 	.word	0x0802627c
 801f7cc:	08023cd4 	.word	0x08023cd4
 801f7d0:	2000ba40 	.word	0x2000ba40
 801f7d4:	2000ba42 	.word	0x2000ba42

0801f7d8 <_ZN8touchgfx6Screen4drawEv>:
 801f7d8:	4b0b      	ldr	r3, [pc, #44]	; (801f808 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801f7da:	b507      	push	{r0, r1, r2, lr}
 801f7dc:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f7e0:	4b0a      	ldr	r3, [pc, #40]	; (801f80c <_ZN8touchgfx6Screen4drawEv+0x34>)
 801f7e2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f7e6:	4669      	mov	r1, sp
 801f7e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f7ec:	2300      	movs	r3, #0
 801f7ee:	f8ad 3000 	strh.w	r3, [sp]
 801f7f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801f7f6:	6803      	ldr	r3, [r0, #0]
 801f7f8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f7fc:	689b      	ldr	r3, [r3, #8]
 801f7fe:	4798      	blx	r3
 801f800:	b003      	add	sp, #12
 801f802:	f85d fb04 	ldr.w	pc, [sp], #4
 801f806:	bf00      	nop
 801f808:	2000ba40 	.word	0x2000ba40
 801f80c:	2000ba42 	.word	0x2000ba42

0801f810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f814:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f818:	b087      	sub	sp, #28
 801f81a:	4681      	mov	r9, r0
 801f81c:	460c      	mov	r4, r1
 801f81e:	4615      	mov	r5, r2
 801f820:	b16b      	cbz	r3, 801f83e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f822:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f826:	b153      	cbz	r3, 801f83e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f828:	4628      	mov	r0, r5
 801f82a:	f7ff ff53 	bl	801f6d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f82e:	4621      	mov	r1, r4
 801f830:	f7fe fff8 	bl	801e824 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f834:	69eb      	ldr	r3, [r5, #28]
 801f836:	b928      	cbnz	r0, 801f844 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801f838:	461d      	mov	r5, r3
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d1f4      	bne.n	801f828 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801f83e:	b007      	add	sp, #28
 801f840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f844:	ae02      	add	r6, sp, #8
 801f846:	2b00      	cmp	r3, #0
 801f848:	d04a      	beq.n	801f8e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801f84a:	682b      	ldr	r3, [r5, #0]
 801f84c:	4629      	mov	r1, r5
 801f84e:	4668      	mov	r0, sp
 801f850:	68db      	ldr	r3, [r3, #12]
 801f852:	4798      	blx	r3
 801f854:	4628      	mov	r0, r5
 801f856:	f7ff ff5b 	bl	801f710 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f85a:	f8bd 7000 	ldrh.w	r7, [sp]
 801f85e:	4407      	add	r7, r0
 801f860:	4628      	mov	r0, r5
 801f862:	f7ff ff69 	bl	801f738 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f866:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f86a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f86e:	b23f      	sxth	r7, r7
 801f870:	4418      	add	r0, r3
 801f872:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f876:	4621      	mov	r1, r4
 801f878:	f8ad 200c 	strh.w	r2, [sp, #12]
 801f87c:	f8ad 000a 	strh.w	r0, [sp, #10]
 801f880:	4630      	mov	r0, r6
 801f882:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f886:	f8ad 7008 	strh.w	r7, [sp, #8]
 801f88a:	f7ff f80f 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 801f88e:	4628      	mov	r0, r5
 801f890:	f7ff ff20 	bl	801f6d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f894:	ab04      	add	r3, sp, #16
 801f896:	4602      	mov	r2, r0
 801f898:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f89c:	e883 0003 	stmia.w	r3, {r0, r1}
 801f8a0:	4611      	mov	r1, r2
 801f8a2:	4618      	mov	r0, r3
 801f8a4:	f7ff f802 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 801f8a8:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801f8ac:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f8b0:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801f8b4:	455a      	cmp	r2, fp
 801f8b6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801f8ba:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801f8be:	f040 8096 	bne.w	801f9ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f8c2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801f8c6:	4553      	cmp	r3, sl
 801f8c8:	f040 8091 	bne.w	801f9ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f8cc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f8d0:	4543      	cmp	r3, r8
 801f8d2:	f040 808c 	bne.w	801f9ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f8d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f8da:	42bb      	cmp	r3, r7
 801f8dc:	f040 8087 	bne.w	801f9ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f8e0:	4628      	mov	r0, r5
 801f8e2:	f7ff fef7 	bl	801f6d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f8e6:	6861      	ldr	r1, [r4, #4]
 801f8e8:	4602      	mov	r2, r0
 801f8ea:	4633      	mov	r3, r6
 801f8ec:	6820      	ldr	r0, [r4, #0]
 801f8ee:	c303      	stmia	r3!, {r0, r1}
 801f8f0:	4611      	mov	r1, r2
 801f8f2:	4630      	mov	r0, r6
 801f8f4:	f7fe ffda 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 801f8f8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d09e      	beq.n	801f83e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f900:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f904:	2b00      	cmp	r3, #0
 801f906:	d09a      	beq.n	801f83e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f908:	4628      	mov	r0, r5
 801f90a:	f7ff ff01 	bl	801f710 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f90e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f912:	1a18      	subs	r0, r3, r0
 801f914:	f8ad 0008 	strh.w	r0, [sp, #8]
 801f918:	4628      	mov	r0, r5
 801f91a:	f7ff ff0d 	bl	801f738 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f91e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f922:	4631      	mov	r1, r6
 801f924:	1a18      	subs	r0, r3, r0
 801f926:	f8ad 000a 	strh.w	r0, [sp, #10]
 801f92a:	4628      	mov	r0, r5
 801f92c:	682b      	ldr	r3, [r5, #0]
 801f92e:	689b      	ldr	r3, [r3, #8]
 801f930:	4798      	blx	r3
 801f932:	e784      	b.n	801f83e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f934:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801f938:	4553      	cmp	r3, sl
 801f93a:	da10      	bge.n	801f95e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801f93c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f940:	4648      	mov	r0, r9
 801f942:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f946:	ebaa 0303 	sub.w	r3, sl, r3
 801f94a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f94e:	4631      	mov	r1, r6
 801f950:	f8ad 2008 	strh.w	r2, [sp, #8]
 801f954:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f958:	69ea      	ldr	r2, [r5, #28]
 801f95a:	f7ff ff59 	bl	801f810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f95e:	f9b4 3000 	ldrsh.w	r3, [r4]
 801f962:	455b      	cmp	r3, fp
 801f964:	da0e      	bge.n	801f984 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801f966:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f96a:	ebab 0303 	sub.w	r3, fp, r3
 801f96e:	f8ad a00a 	strh.w	sl, [sp, #10]
 801f972:	4631      	mov	r1, r6
 801f974:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f978:	4648      	mov	r0, r9
 801f97a:	f8ad 700e 	strh.w	r7, [sp, #14]
 801f97e:	69ea      	ldr	r2, [r5, #28]
 801f980:	f7ff ff46 	bl	801f810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f984:	8822      	ldrh	r2, [r4, #0]
 801f986:	44d8      	add	r8, fp
 801f988:	88a3      	ldrh	r3, [r4, #4]
 801f98a:	fa1f f888 	uxth.w	r8, r8
 801f98e:	4413      	add	r3, r2
 801f990:	fa0f f288 	sxth.w	r2, r8
 801f994:	b29b      	uxth	r3, r3
 801f996:	b219      	sxth	r1, r3
 801f998:	4291      	cmp	r1, r2
 801f99a:	dd0e      	ble.n	801f9ba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f99c:	eba3 0308 	sub.w	r3, r3, r8
 801f9a0:	f8ad 2008 	strh.w	r2, [sp, #8]
 801f9a4:	f8ad a00a 	strh.w	sl, [sp, #10]
 801f9a8:	4631      	mov	r1, r6
 801f9aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f9ae:	4648      	mov	r0, r9
 801f9b0:	f8ad 700e 	strh.w	r7, [sp, #14]
 801f9b4:	69ea      	ldr	r2, [r5, #28]
 801f9b6:	f7ff ff2b 	bl	801f810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f9ba:	88e2      	ldrh	r2, [r4, #6]
 801f9bc:	4457      	add	r7, sl
 801f9be:	8863      	ldrh	r3, [r4, #2]
 801f9c0:	b2bf      	uxth	r7, r7
 801f9c2:	4413      	add	r3, r2
 801f9c4:	b23a      	sxth	r2, r7
 801f9c6:	b29b      	uxth	r3, r3
 801f9c8:	b219      	sxth	r1, r3
 801f9ca:	428a      	cmp	r2, r1
 801f9cc:	da88      	bge.n	801f8e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801f9ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f9d2:	1bdb      	subs	r3, r3, r7
 801f9d4:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f9d8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f9dc:	4631      	mov	r1, r6
 801f9de:	f8ad 0008 	strh.w	r0, [sp, #8]
 801f9e2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f9e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f9ea:	69ea      	ldr	r2, [r5, #28]
 801f9ec:	e006      	b.n	801f9fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801f9ee:	f1b8 0f00 	cmp.w	r8, #0
 801f9f2:	d001      	beq.n	801f9f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801f9f4:	2f00      	cmp	r7, #0
 801f9f6:	d19d      	bne.n	801f934 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801f9f8:	69ea      	ldr	r2, [r5, #28]
 801f9fa:	4621      	mov	r1, r4
 801f9fc:	4648      	mov	r0, r9
 801f9fe:	f7ff ff07 	bl	801f810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fa02:	e76d      	b.n	801f8e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801fa04 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801fa04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fa06:	2300      	movs	r3, #0
 801fa08:	aa02      	add	r2, sp, #8
 801fa0a:	4604      	mov	r4, r0
 801fa0c:	3004      	adds	r0, #4
 801fa0e:	f842 3d04 	str.w	r3, [r2, #-4]!
 801fa12:	460d      	mov	r5, r1
 801fa14:	f7ee fe07 	bl	800e626 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801fa18:	9a01      	ldr	r2, [sp, #4]
 801fa1a:	b11a      	cbz	r2, 801fa24 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801fa1c:	4629      	mov	r1, r5
 801fa1e:	4620      	mov	r0, r4
 801fa20:	f7ff fef6 	bl	801f810 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fa24:	b003      	add	sp, #12
 801fa26:	bd30      	pop	{r4, r5, pc}

0801fa28 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801fa28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fa2a:	4602      	mov	r2, r0
 801fa2c:	4604      	mov	r4, r0
 801fa2e:	460d      	mov	r5, r1
 801fa30:	466b      	mov	r3, sp
 801fa32:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801fa36:	6851      	ldr	r1, [r2, #4]
 801fa38:	c303      	stmia	r3!, {r0, r1}
 801fa3a:	4629      	mov	r1, r5
 801fa3c:	4668      	mov	r0, sp
 801fa3e:	f7fe ff35 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 801fa42:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801fa46:	4669      	mov	r1, sp
 801fa48:	b123      	cbz	r3, 801fa54 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801fa4a:	4620      	mov	r0, r4
 801fa4c:	f7ff ffda 	bl	801fa04 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801fa50:	b003      	add	sp, #12
 801fa52:	bd30      	pop	{r4, r5, pc}
 801fa54:	1d20      	adds	r0, r4, #4
 801fa56:	f7ee fc4a 	bl	800e2ee <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801fa5a:	e7f9      	b.n	801fa50 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801fa5c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801fa5c:	460b      	mov	r3, r1
 801fa5e:	680a      	ldr	r2, [r1, #0]
 801fa60:	1d01      	adds	r1, r0, #4
 801fa62:	6952      	ldr	r2, [r2, #20]
 801fa64:	4618      	mov	r0, r3
 801fa66:	4710      	bx	r2

0801fa68 <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801fa68:	680b      	ldr	r3, [r1, #0]
 801fa6a:	6980      	ldr	r0, [r0, #24]
 801fa6c:	4418      	add	r0, r3
 801fa6e:	4770      	bx	lr

0801fa70 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801fa70:	b530      	push	{r4, r5, lr}
 801fa72:	b19a      	cbz	r2, 801fa9c <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fa74:	7b13      	ldrb	r3, [r2, #12]
 801fa76:	b18b      	cbz	r3, 801fa9c <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fa78:	7ad2      	ldrb	r2, [r2, #11]
 801fa7a:	b294      	uxth	r4, r2
 801fa7c:	4413      	add	r3, r2
 801fa7e:	429c      	cmp	r4, r3
 801fa80:	da0c      	bge.n	801fa9c <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fa82:	69c2      	ldr	r2, [r0, #28]
 801fa84:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801fa88:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801fa8c:	428a      	cmp	r2, r1
 801fa8e:	d102      	bne.n	801fa96 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801fa90:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801fa94:	bd30      	pop	{r4, r5, pc}
 801fa96:	3401      	adds	r4, #1
 801fa98:	b2a4      	uxth	r4, r4
 801fa9a:	e7f0      	b.n	801fa7e <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801fa9c:	2000      	movs	r0, #0
 801fa9e:	bd30      	pop	{r4, r5, pc}

0801faa0 <_ZN8touchgfx17InternalFlashFontD1Ev>:
 801faa0:	4770      	bx	lr

0801faa2 <_ZN8touchgfx17InternalFlashFontD0Ev>:
 801faa2:	b510      	push	{r4, lr}
 801faa4:	4604      	mov	r4, r0
 801faa6:	2120      	movs	r1, #32
 801faa8:	f003 f82a 	bl	8022b00 <_ZdlPvj>
 801faac:	4620      	mov	r0, r4
 801faae:	bd10      	pop	{r4, pc}

0801fab0 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801fab0:	b530      	push	{r4, r5, lr}
 801fab2:	b087      	sub	sp, #28
 801fab4:	4604      	mov	r4, r0
 801fab6:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 801faba:	9505      	str	r5, [sp, #20]
 801fabc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801fac0:	9504      	str	r5, [sp, #16]
 801fac2:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801fac6:	9503      	str	r5, [sp, #12]
 801fac8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801facc:	9502      	str	r5, [sp, #8]
 801face:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 801fad2:	9501      	str	r5, [sp, #4]
 801fad4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801fad8:	9500      	str	r5, [sp, #0]
 801fada:	f002 ffb5 	bl	8022a48 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801fade:	4b04      	ldr	r3, [pc, #16]	; (801faf0 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801fae0:	4620      	mov	r0, r4
 801fae2:	6023      	str	r3, [r4, #0]
 801fae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fae6:	61a3      	str	r3, [r4, #24]
 801fae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801faea:	61e3      	str	r3, [r4, #28]
 801faec:	b007      	add	sp, #28
 801faee:	bd30      	pop	{r4, r5, pc}
 801faf0:	080262b0 	.word	0x080262b0

0801faf4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801faf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801faf6:	4604      	mov	r4, r0
 801faf8:	4d1b      	ldr	r5, [pc, #108]	; (801fb68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801fafa:	2700      	movs	r7, #0
 801fafc:	2601      	movs	r6, #1
 801fafe:	6863      	ldr	r3, [r4, #4]
 801fb00:	b93b      	cbnz	r3, 801fb12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801fb02:	6821      	ldr	r1, [r4, #0]
 801fb04:	2900      	cmp	r1, #0
 801fb06:	d02c      	beq.n	801fb62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801fb08:	6828      	ldr	r0, [r5, #0]
 801fb0a:	6803      	ldr	r3, [r0, #0]
 801fb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb0e:	4798      	blx	r3
 801fb10:	6060      	str	r0, [r4, #4]
 801fb12:	7c23      	ldrb	r3, [r4, #16]
 801fb14:	b16b      	cbz	r3, 801fb32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801fb16:	68e3      	ldr	r3, [r4, #12]
 801fb18:	b12b      	cbz	r3, 801fb26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801fb1a:	881a      	ldrh	r2, [r3, #0]
 801fb1c:	b11a      	cbz	r2, 801fb26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801fb1e:	1c9a      	adds	r2, r3, #2
 801fb20:	60e2      	str	r2, [r4, #12]
 801fb22:	8818      	ldrh	r0, [r3, #0]
 801fb24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb26:	6828      	ldr	r0, [r5, #0]
 801fb28:	7427      	strb	r7, [r4, #16]
 801fb2a:	6803      	ldr	r3, [r0, #0]
 801fb2c:	6821      	ldr	r1, [r4, #0]
 801fb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb30:	4798      	blx	r3
 801fb32:	6863      	ldr	r3, [r4, #4]
 801fb34:	881a      	ldrh	r2, [r3, #0]
 801fb36:	b1a2      	cbz	r2, 801fb62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801fb38:	2a02      	cmp	r2, #2
 801fb3a:	f103 0202 	add.w	r2, r3, #2
 801fb3e:	6062      	str	r2, [r4, #4]
 801fb40:	d1ef      	bne.n	801fb22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801fb42:	6828      	ldr	r0, [r5, #0]
 801fb44:	6803      	ldr	r3, [r0, #0]
 801fb46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fb48:	68a3      	ldr	r3, [r4, #8]
 801fb4a:	1d19      	adds	r1, r3, #4
 801fb4c:	60a1      	str	r1, [r4, #8]
 801fb4e:	6819      	ldr	r1, [r3, #0]
 801fb50:	4790      	blx	r2
 801fb52:	60e0      	str	r0, [r4, #12]
 801fb54:	2800      	cmp	r0, #0
 801fb56:	d0d2      	beq.n	801fafe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801fb58:	8803      	ldrh	r3, [r0, #0]
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	d0cf      	beq.n	801fafe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801fb5e:	7426      	strb	r6, [r4, #16]
 801fb60:	e7cd      	b.n	801fafe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801fb62:	2000      	movs	r0, #0
 801fb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb66:	bf00      	nop
 801fb68:	2000ba4c 	.word	0x2000ba4c

0801fb6c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801fb6c:	b538      	push	{r3, r4, r5, lr}
 801fb6e:	8a83      	ldrh	r3, [r0, #20]
 801fb70:	4604      	mov	r4, r0
 801fb72:	8a45      	ldrh	r5, [r0, #18]
 801fb74:	8243      	strh	r3, [r0, #18]
 801fb76:	f7ff ffbd 	bl	801faf4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fb7a:	82a0      	strh	r0, [r4, #20]
 801fb7c:	4628      	mov	r0, r5
 801fb7e:	bd38      	pop	{r3, r4, r5, pc}

0801fb80 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801fb80:	b570      	push	{r4, r5, r6, lr}
 801fb82:	460e      	mov	r6, r1
 801fb84:	4605      	mov	r5, r0
 801fb86:	f7ff fff1 	bl	801fb6c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801fb8a:	4a0d      	ldr	r2, [pc, #52]	; (801fbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801fb8c:	4601      	mov	r1, r0
 801fb8e:	6814      	ldr	r4, [r2, #0]
 801fb90:	4613      	mov	r3, r2
 801fb92:	b914      	cbnz	r4, 801fb9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801fb94:	6852      	ldr	r2, [r2, #4]
 801fb96:	07d2      	lsls	r2, r2, #31
 801fb98:	d510      	bpl.n	801fbbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801fb9a:	6858      	ldr	r0, [r3, #4]
 801fb9c:	f105 0212 	add.w	r2, r5, #18
 801fba0:	f010 0f01 	tst.w	r0, #1
 801fba4:	ea4f 0060 	mov.w	r0, r0, asr #1
 801fba8:	bf18      	it	ne
 801fbaa:	582b      	ldrne	r3, [r5, r0]
 801fbac:	4428      	add	r0, r5
 801fbae:	bf18      	it	ne
 801fbb0:	591c      	ldrne	r4, [r3, r4]
 801fbb2:	4633      	mov	r3, r6
 801fbb4:	46a4      	mov	ip, r4
 801fbb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fbba:	4760      	bx	ip
 801fbbc:	bd70      	pop	{r4, r5, r6, pc}
 801fbbe:	bf00      	nop
 801fbc0:	2000ba1c 	.word	0x2000ba1c

0801fbc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801fbc4:	2300      	movs	r3, #0
 801fbc6:	b510      	push	{r4, lr}
 801fbc8:	4604      	mov	r4, r0
 801fbca:	6043      	str	r3, [r0, #4]
 801fbcc:	60c3      	str	r3, [r0, #12]
 801fbce:	7403      	strb	r3, [r0, #16]
 801fbd0:	f7ff ff90 	bl	801faf4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fbd4:	8260      	strh	r0, [r4, #18]
 801fbd6:	4620      	mov	r0, r4
 801fbd8:	f7ff ff8c 	bl	801faf4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fbdc:	4a0a      	ldr	r2, [pc, #40]	; (801fc08 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801fbde:	82a0      	strh	r0, [r4, #20]
 801fbe0:	6813      	ldr	r3, [r2, #0]
 801fbe2:	4611      	mov	r1, r2
 801fbe4:	b913      	cbnz	r3, 801fbec <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801fbe6:	6852      	ldr	r2, [r2, #4]
 801fbe8:	07d2      	lsls	r2, r2, #31
 801fbea:	d50c      	bpl.n	801fc06 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801fbec:	6848      	ldr	r0, [r1, #4]
 801fbee:	f010 0f01 	tst.w	r0, #1
 801fbf2:	ea4f 0060 	mov.w	r0, r0, asr #1
 801fbf6:	bf18      	it	ne
 801fbf8:	5822      	ldrne	r2, [r4, r0]
 801fbfa:	4420      	add	r0, r4
 801fbfc:	bf18      	it	ne
 801fbfe:	58d3      	ldrne	r3, [r2, r3]
 801fc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fc04:	4718      	bx	r3
 801fc06:	bd10      	pop	{r4, pc}
 801fc08:	2000ba24 	.word	0x2000ba24

0801fc0c <_ZN8touchgfx12TextProviderC1Ev>:
 801fc0c:	2300      	movs	r3, #0
 801fc0e:	b510      	push	{r4, lr}
 801fc10:	4604      	mov	r4, r0
 801fc12:	6003      	str	r3, [r0, #0]
 801fc14:	6043      	str	r3, [r0, #4]
 801fc16:	f7ff ffd5 	bl	801fbc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801fc1a:	4620      	mov	r0, r4
 801fc1c:	bd10      	pop	{r4, pc}

0801fc1e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801fc1e:	6082      	str	r2, [r0, #8]
 801fc20:	6001      	str	r1, [r0, #0]
 801fc22:	f7ff bfcf 	b.w	801fbc4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801fc26 <_ZN8touchgfx8ceil28_4El>:
 801fc26:	f110 030f 	adds.w	r3, r0, #15
 801fc2a:	d401      	bmi.n	801fc30 <_ZN8touchgfx8ceil28_4El+0xa>
 801fc2c:	1118      	asrs	r0, r3, #4
 801fc2e:	4770      	bx	lr
 801fc30:	2210      	movs	r2, #16
 801fc32:	f1c0 0001 	rsb	r0, r0, #1
 801fc36:	fb93 f3f2 	sdiv	r3, r3, r2
 801fc3a:	f010 000f 	ands.w	r0, r0, #15
 801fc3e:	bf18      	it	ne
 801fc40:	2001      	movne	r0, #1
 801fc42:	1a18      	subs	r0, r3, r0
 801fc44:	4770      	bx	lr
	...

0801fc48 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801fc48:	2900      	cmp	r1, #0
 801fc4a:	b510      	push	{r4, lr}
 801fc4c:	dc06      	bgt.n	801fc5c <_ZN8touchgfx11floorDivModEllRlS0_+0x14>
 801fc4e:	4b0f      	ldr	r3, [pc, #60]	; (801fc8c <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801fc50:	f240 1111 	movw	r1, #273	; 0x111
 801fc54:	4a0e      	ldr	r2, [pc, #56]	; (801fc90 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801fc56:	480f      	ldr	r0, [pc, #60]	; (801fc94 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801fc58:	f002 ff6e 	bl	8022b38 <__assert_func>
 801fc5c:	fb90 f4f1 	sdiv	r4, r0, r1
 801fc60:	2800      	cmp	r0, #0
 801fc62:	6014      	str	r4, [r2, #0]
 801fc64:	db03      	blt.n	801fc6e <_ZN8touchgfx11floorDivModEllRlS0_+0x26>
 801fc66:	fb01 0114 	mls	r1, r1, r4, r0
 801fc6a:	6019      	str	r1, [r3, #0]
 801fc6c:	bd10      	pop	{r4, pc}
 801fc6e:	4240      	negs	r0, r0
 801fc70:	fb90 f4f1 	sdiv	r4, r0, r1
 801fc74:	fb01 0014 	mls	r0, r1, r4, r0
 801fc78:	6018      	str	r0, [r3, #0]
 801fc7a:	2800      	cmp	r0, #0
 801fc7c:	d0f6      	beq.n	801fc6c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801fc7e:	6810      	ldr	r0, [r2, #0]
 801fc80:	3801      	subs	r0, #1
 801fc82:	6010      	str	r0, [r2, #0]
 801fc84:	6818      	ldr	r0, [r3, #0]
 801fc86:	1a09      	subs	r1, r1, r0
 801fc88:	e7ef      	b.n	801fc6a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801fc8a:	bf00      	nop
 801fc8c:	080262f4 	.word	0x080262f4
 801fc90:	08026333 	.word	0x08026333
 801fc94:	08026304 	.word	0x08026304

0801fc98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801fc98:	b570      	push	{r4, r5, r6, lr}
 801fc9a:	694a      	ldr	r2, [r1, #20]
 801fc9c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801fc9e:	684b      	ldr	r3, [r1, #4]
 801fca0:	1b54      	subs	r4, r2, r5
 801fca2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801fca4:	f000 8106 	beq.w	801feb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801fca8:	1b9b      	subs	r3, r3, r6
 801fcaa:	d003      	beq.n	801fcb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801fcac:	4363      	muls	r3, r4
 801fcae:	2210      	movs	r2, #16
 801fcb0:	fb93 f3f2 	sdiv	r3, r3, r2
 801fcb4:	680c      	ldr	r4, [r1, #0]
 801fcb6:	698a      	ldr	r2, [r1, #24]
 801fcb8:	1b65      	subs	r5, r4, r5
 801fcba:	f000 80fd 	beq.w	801feb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801fcbe:	1b92      	subs	r2, r2, r6
 801fcc0:	d003      	beq.n	801fcca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801fcc2:	436a      	muls	r2, r5
 801fcc4:	2410      	movs	r4, #16
 801fcc6:	fb92 f2f4 	sdiv	r2, r2, r4
 801fcca:	1a9b      	subs	r3, r3, r2
 801fccc:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801fef4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801fcd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fcd4:	460a      	mov	r2, r1
 801fcd6:	ee07 3a90 	vmov	s15, r3
 801fcda:	f100 040c 	add.w	r4, r0, #12
 801fcde:	4603      	mov	r3, r0
 801fce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fce4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801fce8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801fcec:	eeb1 6a43 	vneg.f32	s12, s6
 801fcf0:	edd2 7a02 	vldr	s15, [r2, #8]
 801fcf4:	3214      	adds	r2, #20
 801fcf6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801fcfa:	ece3 6a01 	vstmia	r3!, {s13}
 801fcfe:	429c      	cmp	r4, r3
 801fd00:	ed52 7a02 	vldr	s15, [r2, #-8]
 801fd04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fd08:	edc3 7a02 	vstr	s15, [r3, #8]
 801fd0c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801fd10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fd14:	edc3 7a05 	vstr	s15, [r3, #20]
 801fd18:	d1ea      	bne.n	801fcf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801fd1a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801fd1c:	698b      	ldr	r3, [r1, #24]
 801fd1e:	edd0 4a02 	vldr	s9, [r0, #8]
 801fd22:	1a9b      	subs	r3, r3, r2
 801fd24:	edd0 3a00 	vldr	s7, [r0]
 801fd28:	edd0 6a01 	vldr	s13, [r0, #4]
 801fd2c:	ee07 3a90 	vmov	s15, r3
 801fd30:	684b      	ldr	r3, [r1, #4]
 801fd32:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801fd36:	ed90 5a05 	vldr	s10, [r0, #20]
 801fd3a:	1a9b      	subs	r3, r3, r2
 801fd3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fd40:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801fd44:	ed90 2a03 	vldr	s4, [r0, #12]
 801fd48:	ee07 3a10 	vmov	s14, r3
 801fd4c:	edd0 2a04 	vldr	s5, [r0, #16]
 801fd50:	ee67 7a84 	vmul.f32	s15, s15, s8
 801fd54:	ed90 1a07 	vldr	s2, [r0, #28]
 801fd58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fd5c:	ee72 2ac5 	vsub.f32	s5, s5, s10
 801fd60:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801fd64:	ee27 7a04 	vmul.f32	s14, s14, s8
 801fd68:	ee32 5a45 	vsub.f32	s10, s4, s10
 801fd6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fd70:	ee67 7a83 	vmul.f32	s15, s15, s6
 801fd74:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801fd78:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801fd7a:	694a      	ldr	r2, [r1, #20]
 801fd7c:	1b13      	subs	r3, r2, r4
 801fd7e:	ee07 3a10 	vmov	s14, r3
 801fd82:	680b      	ldr	r3, [r1, #0]
 801fd84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fd88:	1b1b      	subs	r3, r3, r4
 801fd8a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801fd8e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801fd92:	ee07 3a10 	vmov	s14, r3
 801fd96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fd9a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801fd9e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801fda2:	ee64 4a86 	vmul.f32	s9, s9, s12
 801fda6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801fdaa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801fdac:	698b      	ldr	r3, [r1, #24]
 801fdae:	1a9b      	subs	r3, r3, r2
 801fdb0:	ee06 3a90 	vmov	s13, r3
 801fdb4:	684b      	ldr	r3, [r1, #4]
 801fdb6:	1a9b      	subs	r3, r3, r2
 801fdb8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801fdbc:	ee07 3a10 	vmov	s14, r3
 801fdc0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801fdc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fdc8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801fdcc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801fdd0:	eee2 6a87 	vfma.f32	s13, s5, s14
 801fdd4:	ee66 6a83 	vmul.f32	s13, s13, s6
 801fdd8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801fddc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 801fdde:	680b      	ldr	r3, [r1, #0]
 801fde0:	1a9b      	subs	r3, r3, r2
 801fde2:	ee07 3a10 	vmov	s14, r3
 801fde6:	694b      	ldr	r3, [r1, #20]
 801fde8:	1a9b      	subs	r3, r3, r2
 801fdea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fdee:	ee05 3a90 	vmov	s11, r3
 801fdf2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801fdf6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801fdfa:	ee65 5a84 	vmul.f32	s11, s11, s8
 801fdfe:	ee25 5a65 	vnmul.f32	s10, s10, s11
 801fe02:	edd0 5a08 	vldr	s11, [r0, #32]
 801fe06:	ee31 1a65 	vsub.f32	s2, s2, s11
 801fe0a:	eea7 5a22 	vfma.f32	s10, s14, s5
 801fe0e:	edd0 2a06 	vldr	s5, [r0, #24]
 801fe12:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801fe16:	ee25 5a06 	vmul.f32	s10, s10, s12
 801fe1a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801fe1e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801fe20:	684a      	ldr	r2, [r1, #4]
 801fe22:	1b13      	subs	r3, r2, r4
 801fe24:	ee01 3a90 	vmov	s3, r3
 801fe28:	698b      	ldr	r3, [r1, #24]
 801fe2a:	1b1b      	subs	r3, r3, r4
 801fe2c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801fe30:	ee07 3a10 	vmov	s14, r3
 801fe34:	ee61 1a84 	vmul.f32	s3, s3, s8
 801fe38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fe3c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801fe40:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801fe44:	eea1 7a81 	vfma.f32	s14, s3, s2
 801fe48:	ee27 7a03 	vmul.f32	s14, s14, s6
 801fe4c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801fe50:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 801fe52:	680b      	ldr	r3, [r1, #0]
 801fe54:	1a9b      	subs	r3, r3, r2
 801fe56:	ee03 3a10 	vmov	s6, r3
 801fe5a:	694b      	ldr	r3, [r1, #20]
 801fe5c:	1a9b      	subs	r3, r3, r2
 801fe5e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801fe62:	ee01 3a90 	vmov	s3, r3
 801fe66:	ee23 3a04 	vmul.f32	s6, s6, s8
 801fe6a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801fe6e:	ee21 4a84 	vmul.f32	s8, s3, s8
 801fe72:	ee65 5ac4 	vnmul.f32	s11, s11, s8
 801fe76:	eee3 5a01 	vfma.f32	s11, s6, s2
 801fe7a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801fe7e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801fe82:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801fe86:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801fe8a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801fe8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe92:	dd13      	ble.n	801febc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801fe94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fe98:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801fe9c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801fe9e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801fea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801feaa:	dd15      	ble.n	801fed8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801feac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801feb0:	6403      	str	r3, [r0, #64]	; 0x40
 801feb2:	bd70      	pop	{r4, r5, r6, pc}
 801feb4:	4623      	mov	r3, r4
 801feb6:	e6fd      	b.n	801fcb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801feb8:	462a      	mov	r2, r5
 801feba:	e706      	b.n	801fcca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801febc:	d502      	bpl.n	801fec4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801febe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801fec2:	e7e9      	b.n	801fe98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801fec4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801fec8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801fecc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801fed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fed4:	dade      	bge.n	801fe94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801fed6:	e7f2      	b.n	801febe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801fed8:	d502      	bpl.n	801fee0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801feda:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801fede:	e7e7      	b.n	801feb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801fee0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801fee4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801fee8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801feec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fef0:	dadc      	bge.n	801feac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801fef2:	e7f2      	b.n	801feda <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801fef4:	3d800000 	.word	0x3d800000

0801fef8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801fef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fefc:	f04f 0814 	mov.w	r8, #20
 801ff00:	4604      	mov	r4, r0
 801ff02:	4617      	mov	r7, r2
 801ff04:	460d      	mov	r5, r1
 801ff06:	fb08 f903 	mul.w	r9, r8, r3
 801ff0a:	461e      	mov	r6, r3
 801ff0c:	eb02 0a09 	add.w	sl, r2, r9
 801ff10:	f8da 0004 	ldr.w	r0, [sl, #4]
 801ff14:	f7ff fe87 	bl	801fc26 <_ZN8touchgfx8ceil28_4El>
 801ff18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff1a:	6160      	str	r0, [r4, #20]
 801ff1c:	fb08 f803 	mul.w	r8, r8, r3
 801ff20:	9001      	str	r0, [sp, #4]
 801ff22:	eb07 0b08 	add.w	fp, r7, r8
 801ff26:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ff2a:	f7ff fe7c 	bl	801fc26 <_ZN8touchgfx8ceil28_4El>
 801ff2e:	9a01      	ldr	r2, [sp, #4]
 801ff30:	1a80      	subs	r0, r0, r2
 801ff32:	61a0      	str	r0, [r4, #24]
 801ff34:	2800      	cmp	r0, #0
 801ff36:	f000 8088 	beq.w	802004a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801ff3a:	f857 0009 	ldr.w	r0, [r7, r9]
 801ff3e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 801ff42:	f857 e008 	ldr.w	lr, [r7, r8]
 801ff46:	f8db 3004 	ldr.w	r3, [fp, #4]
 801ff4a:	ebae 0e00 	sub.w	lr, lr, r0
 801ff4e:	f8da 1004 	ldr.w	r1, [sl, #4]
 801ff52:	ea4f 1b0e 	mov.w	fp, lr, lsl #4
 801ff56:	1a5b      	subs	r3, r3, r1
 801ff58:	fb0b f202 	mul.w	r2, fp, r2
 801ff5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801ff60:	fb0e 2211 	mls	r2, lr, r1, r2
 801ff64:	4641      	mov	r1, r8
 801ff66:	fb00 2003 	mla	r0, r0, r3, r2
 801ff6a:	f104 0310 	add.w	r3, r4, #16
 801ff6e:	4622      	mov	r2, r4
 801ff70:	3801      	subs	r0, #1
 801ff72:	4440      	add	r0, r8
 801ff74:	f7ff fe68 	bl	801fc48 <_ZN8touchgfx11floorDivModEllRlS0_>
 801ff78:	f104 0308 	add.w	r3, r4, #8
 801ff7c:	1d22      	adds	r2, r4, #4
 801ff7e:	4641      	mov	r1, r8
 801ff80:	4658      	mov	r0, fp
 801ff82:	f7ff fe61 	bl	801fc48 <_ZN8touchgfx11floorDivModEllRlS0_>
 801ff86:	f8c4 800c 	str.w	r8, [r4, #12]
 801ff8a:	6962      	ldr	r2, [r4, #20]
 801ff8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ff90:	eddf 6a30 	vldr	s13, [pc, #192]	; 8020054 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801ff94:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ff98:	6822      	ldr	r2, [r4, #0]
 801ff9a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ff9e:	ee07 3a10 	vmov	s14, r3
 801ffa2:	f857 3009 	ldr.w	r3, [r7, r9]
 801ffa6:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ffaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ffae:	ee07 3a90 	vmov	s15, r3
 801ffb2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ffb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ffba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ffbe:	edd6 6a00 	vldr	s13, [r6]
 801ffc2:	eee7 6a06 	vfma.f32	s13, s14, s12
 801ffc6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ffca:	eee7 6a86 	vfma.f32	s13, s15, s12
 801ffce:	edc4 6a07 	vstr	s13, [r4, #28]
 801ffd2:	edd4 6a01 	vldr	s13, [r4, #4]
 801ffd6:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801ffda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ffde:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ffe2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ffe6:	ed84 6a08 	vstr	s12, [r4, #32]
 801ffea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801ffec:	6263      	str	r3, [r4, #36]	; 0x24
 801ffee:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801fff2:	ed96 6a03 	vldr	s12, [r6, #12]
 801fff6:	eea7 6a25 	vfma.f32	s12, s14, s11
 801fffa:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801fffe:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8020002:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8020006:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 802000a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 802000e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8020012:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8020016:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8020018:	6323      	str	r3, [r4, #48]	; 0x30
 802001a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 802001e:	ed96 6a06 	vldr	s12, [r6, #24]
 8020022:	eea7 6a25 	vfma.f32	s12, s14, s11
 8020026:	eeb0 7a46 	vmov.f32	s14, s12
 802002a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 802002e:	eea7 7a86 	vfma.f32	s14, s15, s12
 8020032:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8020036:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 802003a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 802003e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020042:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8020046:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8020048:	63e3      	str	r3, [r4, #60]	; 0x3c
 802004a:	4620      	mov	r0, r4
 802004c:	b003      	add	sp, #12
 802004e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020052:	bf00      	nop
 8020054:	3d800000 	.word	0x3d800000

08020058 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8020058:	4602      	mov	r2, r0
 802005a:	b148      	cbz	r0, 8020070 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 802005c:	2300      	movs	r3, #0
 802005e:	b298      	uxth	r0, r3
 8020060:	3301      	adds	r3, #1
 8020062:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8020066:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 802006a:	2900      	cmp	r1, #0
 802006c:	d1f7      	bne.n	802005e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 802006e:	4770      	bx	lr
 8020070:	4770      	bx	lr

08020072 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8020072:	b140      	cbz	r0, 8020086 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 8020074:	4602      	mov	r2, r0
 8020076:	1a13      	subs	r3, r2, r0
 8020078:	f812 1b01 	ldrb.w	r1, [r2], #1
 802007c:	b29b      	uxth	r3, r3
 802007e:	2900      	cmp	r1, #0
 8020080:	d1f9      	bne.n	8020076 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 8020082:	4618      	mov	r0, r3
 8020084:	4770      	bx	lr
 8020086:	4603      	mov	r3, r0
 8020088:	e7fb      	b.n	8020082 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0802008a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 802008a:	b530      	push	{r4, r5, lr}
 802008c:	b169      	cbz	r1, 80200aa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 802008e:	b168      	cbz	r0, 80200ac <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 8020090:	1e85      	subs	r5, r0, #2
 8020092:	460b      	mov	r3, r1
 8020094:	1a58      	subs	r0, r3, r1
 8020096:	b280      	uxth	r0, r0
 8020098:	4290      	cmp	r0, r2
 802009a:	da07      	bge.n	80200ac <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 802009c:	f813 4b01 	ldrb.w	r4, [r3], #1
 80200a0:	f825 4f02 	strh.w	r4, [r5, #2]!
 80200a4:	2c00      	cmp	r4, #0
 80200a6:	d1f5      	bne.n	8020094 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80200a8:	bd30      	pop	{r4, r5, pc}
 80200aa:	4608      	mov	r0, r1
 80200ac:	bd30      	pop	{r4, r5, pc}

080200ae <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 80200ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200b0:	460f      	mov	r7, r1
 80200b2:	b08b      	sub	sp, #44	; 0x2c
 80200b4:	2100      	movs	r1, #0
 80200b6:	ad01      	add	r5, sp, #4
 80200b8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80200bc:	211f      	movs	r1, #31
 80200be:	fbb0 f6f3 	udiv	r6, r0, r3
 80200c2:	fb03 0416 	mls	r4, r3, r6, r0
 80200c6:	4630      	mov	r0, r6
 80200c8:	2c09      	cmp	r4, #9
 80200ca:	bfd4      	ite	le
 80200cc:	3430      	addle	r4, #48	; 0x30
 80200ce:	3457      	addgt	r4, #87	; 0x57
 80200d0:	b2e4      	uxtb	r4, r4
 80200d2:	554c      	strb	r4, [r1, r5]
 80200d4:	1e4c      	subs	r4, r1, #1
 80200d6:	b92e      	cbnz	r6, 80200e4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 80200d8:	4429      	add	r1, r5
 80200da:	4638      	mov	r0, r7
 80200dc:	f7ff ffd5 	bl	802008a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80200e0:	b00b      	add	sp, #44	; 0x2c
 80200e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80200e4:	4621      	mov	r1, r4
 80200e6:	e7ea      	b.n	80200be <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

080200e8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 80200e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200ea:	4606      	mov	r6, r0
 80200ec:	b08b      	sub	sp, #44	; 0x2c
 80200ee:	4608      	mov	r0, r1
 80200f0:	b341      	cbz	r1, 8020144 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80200f2:	1e99      	subs	r1, r3, #2
 80200f4:	290e      	cmp	r1, #14
 80200f6:	d825      	bhi.n	8020144 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80200f8:	2100      	movs	r1, #0
 80200fa:	4634      	mov	r4, r6
 80200fc:	251f      	movs	r5, #31
 80200fe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020102:	1e69      	subs	r1, r5, #1
 8020104:	f10d 0e04 	add.w	lr, sp, #4
 8020108:	fb94 f7f3 	sdiv	r7, r4, r3
 802010c:	fb03 4417 	mls	r4, r3, r7, r4
 8020110:	448e      	add	lr, r1
 8020112:	2c00      	cmp	r4, #0
 8020114:	bfb8      	it	lt
 8020116:	4264      	neglt	r4, r4
 8020118:	2c09      	cmp	r4, #9
 802011a:	bfd4      	ite	le
 802011c:	3430      	addle	r4, #48	; 0x30
 802011e:	3457      	addgt	r4, #87	; 0x57
 8020120:	b2e4      	uxtb	r4, r4
 8020122:	f88e 4001 	strb.w	r4, [lr, #1]
 8020126:	463c      	mov	r4, r7
 8020128:	b977      	cbnz	r7, 8020148 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 802012a:	2e00      	cmp	r6, #0
 802012c:	da05      	bge.n	802013a <_ZN8touchgfx7Unicode4itoaElPtti+0x52>
 802012e:	ab0a      	add	r3, sp, #40	; 0x28
 8020130:	4419      	add	r1, r3
 8020132:	232d      	movs	r3, #45	; 0x2d
 8020134:	f801 3c24 	strb.w	r3, [r1, #-36]
 8020138:	1ea9      	subs	r1, r5, #2
 802013a:	3101      	adds	r1, #1
 802013c:	ab01      	add	r3, sp, #4
 802013e:	4419      	add	r1, r3
 8020140:	f7ff ffa3 	bl	802008a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020144:	b00b      	add	sp, #44	; 0x2c
 8020146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020148:	460d      	mov	r5, r1
 802014a:	e7da      	b.n	8020102 <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

0802014c <_ZN8touchgfx7Unicode4atoiEPKt>:
 802014c:	b510      	push	{r4, lr}
 802014e:	b158      	cbz	r0, 8020168 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8020150:	1e82      	subs	r2, r0, #2
 8020152:	210a      	movs	r1, #10
 8020154:	2000      	movs	r0, #0
 8020156:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 802015a:	3b30      	subs	r3, #48	; 0x30
 802015c:	b29c      	uxth	r4, r3
 802015e:	2c09      	cmp	r4, #9
 8020160:	d802      	bhi.n	8020168 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8020162:	fb01 3000 	mla	r0, r1, r0, r3
 8020166:	e7f6      	b.n	8020156 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8020168:	bd10      	pop	{r4, pc}

0802016a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 802016a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802016e:	b085      	sub	sp, #20
 8020170:	f8d0 8000 	ldr.w	r8, [r0]
 8020174:	468a      	mov	sl, r1
 8020176:	461c      	mov	r4, r3
 8020178:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802017c:	4681      	mov	r9, r0
 802017e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8020182:	4640      	mov	r0, r8
 8020184:	9203      	str	r2, [sp, #12]
 8020186:	9301      	str	r3, [sp, #4]
 8020188:	9102      	str	r1, [sp, #8]
 802018a:	f7ff ff65 	bl	8020058 <_ZN8touchgfx7Unicode6strlenEPKt>
 802018e:	9a03      	ldr	r2, [sp, #12]
 8020190:	f1ba 0f00 	cmp.w	sl, #0
 8020194:	bf0c      	ite	eq
 8020196:	4603      	moveq	r3, r0
 8020198:	1c43      	addne	r3, r0, #1
 802019a:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 802019e:	8812      	ldrh	r2, [r2, #0]
 80201a0:	b29b      	uxth	r3, r3
 80201a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80201a4:	2a69      	cmp	r2, #105	; 0x69
 80201a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80201a8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80201aa:	9902      	ldr	r1, [sp, #8]
 80201ac:	d004      	beq.n	80201b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 80201ae:	d852      	bhi.n	8020256 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80201b0:	2a58      	cmp	r2, #88	; 0x58
 80201b2:	d001      	beq.n	80201b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 80201b4:	2a64      	cmp	r2, #100	; 0x64
 80201b6:	d159      	bne.n	802026c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 80201b8:	b19c      	cbz	r4, 80201e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 80201ba:	b956      	cbnz	r6, 80201d2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 80201bc:	2801      	cmp	r0, #1
 80201be:	d108      	bne.n	80201d2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 80201c0:	f8b8 2000 	ldrh.w	r2, [r8]
 80201c4:	2a30      	cmp	r2, #48	; 0x30
 80201c6:	bf02      	ittt	eq
 80201c8:	f108 0202 	addeq.w	r2, r8, #2
 80201cc:	4630      	moveq	r0, r6
 80201ce:	f8c9 2000 	streq.w	r2, [r9]
 80201d2:	429e      	cmp	r6, r3
 80201d4:	dd4c      	ble.n	8020270 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 80201d6:	b2b6      	uxth	r6, r6
 80201d8:	1af4      	subs	r4, r6, r3
 80201da:	4633      	mov	r3, r6
 80201dc:	b2a4      	uxth	r4, r4
 80201de:	f04f 0b00 	mov.w	fp, #0
 80201e2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80201e6:	9a01      	ldr	r2, [sp, #4]
 80201e8:	3e01      	subs	r6, #1
 80201ea:	b162      	cbz	r2, 8020206 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 80201ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201ee:	4293      	cmp	r3, r2
 80201f0:	da09      	bge.n	8020206 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 80201f2:	1ad2      	subs	r2, r2, r3
 80201f4:	b292      	uxth	r2, r2
 80201f6:	b939      	cbnz	r1, 8020208 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 80201f8:	f1bb 0f00 	cmp.w	fp, #0
 80201fc:	d050      	beq.n	80202a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 80201fe:	2800      	cmp	r0, #0
 8020200:	d04e      	beq.n	80202a0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 8020202:	4414      	add	r4, r2
 8020204:	b2a4      	uxth	r4, r4
 8020206:	2200      	movs	r2, #0
 8020208:	682b      	ldr	r3, [r5, #0]
 802020a:	42b3      	cmp	r3, r6
 802020c:	da07      	bge.n	802021e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 802020e:	f1ba 0f00 	cmp.w	sl, #0
 8020212:	d004      	beq.n	802021e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 8020214:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8020218:	682b      	ldr	r3, [r5, #0]
 802021a:	3301      	adds	r3, #1
 802021c:	602b      	str	r3, [r5, #0]
 802021e:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8020222:	b124      	cbz	r4, 802022e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 8020224:	6829      	ldr	r1, [r5, #0]
 8020226:	3c01      	subs	r4, #1
 8020228:	428e      	cmp	r6, r1
 802022a:	b2a4      	uxth	r4, r4
 802022c:	dc22      	bgt.n	8020274 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 802022e:	b140      	cbz	r0, 8020242 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 8020230:	f8d9 3000 	ldr.w	r3, [r9]
 8020234:	8819      	ldrh	r1, [r3, #0]
 8020236:	b121      	cbz	r1, 8020242 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 8020238:	6829      	ldr	r1, [r5, #0]
 802023a:	3801      	subs	r0, #1
 802023c:	428e      	cmp	r6, r1
 802023e:	b280      	uxth	r0, r0
 8020240:	dc1e      	bgt.n	8020280 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8020242:	2020      	movs	r0, #32
 8020244:	b122      	cbz	r2, 8020250 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 8020246:	6829      	ldr	r1, [r5, #0]
 8020248:	3a01      	subs	r2, #1
 802024a:	428e      	cmp	r6, r1
 802024c:	b292      	uxth	r2, r2
 802024e:	dc21      	bgt.n	8020294 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 8020250:	b005      	add	sp, #20
 8020252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020256:	2a73      	cmp	r2, #115	; 0x73
 8020258:	d003      	beq.n	8020262 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 802025a:	2a78      	cmp	r2, #120	; 0x78
 802025c:	d0ac      	beq.n	80201b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 802025e:	2a6f      	cmp	r2, #111	; 0x6f
 8020260:	e7a9      	b.n	80201b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 8020262:	2c00      	cmp	r4, #0
 8020264:	d0bd      	beq.n	80201e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 8020266:	4286      	cmp	r6, r0
 8020268:	da00      	bge.n	802026c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 802026a:	b2b0      	uxth	r0, r6
 802026c:	2400      	movs	r4, #0
 802026e:	e7b8      	b.n	80201e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 8020270:	2400      	movs	r4, #0
 8020272:	e7b4      	b.n	80201de <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 8020274:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 8020278:	682b      	ldr	r3, [r5, #0]
 802027a:	3301      	adds	r3, #1
 802027c:	602b      	str	r3, [r5, #0]
 802027e:	e7d0      	b.n	8020222 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 8020280:	1c9c      	adds	r4, r3, #2
 8020282:	f8c9 4000 	str.w	r4, [r9]
 8020286:	881b      	ldrh	r3, [r3, #0]
 8020288:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 802028c:	682b      	ldr	r3, [r5, #0]
 802028e:	3301      	adds	r3, #1
 8020290:	602b      	str	r3, [r5, #0]
 8020292:	e7cc      	b.n	802022e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 8020294:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 8020298:	682b      	ldr	r3, [r5, #0]
 802029a:	3301      	adds	r3, #1
 802029c:	602b      	str	r3, [r5, #0]
 802029e:	e7d1      	b.n	8020244 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 80202a0:	2a00      	cmp	r2, #0
 80202a2:	d0b1      	beq.n	8020208 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 80202a4:	f04f 0e20 	mov.w	lr, #32
 80202a8:	6829      	ldr	r1, [r5, #0]
 80202aa:	3a01      	subs	r2, #1
 80202ac:	42b1      	cmp	r1, r6
 80202ae:	b292      	uxth	r2, r2
 80202b0:	daa9      	bge.n	8020206 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 80202b2:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 80202b6:	682b      	ldr	r3, [r5, #0]
 80202b8:	3301      	adds	r3, #1
 80202ba:	602b      	str	r3, [r5, #0]
 80202bc:	2a00      	cmp	r2, #0
 80202be:	d1f3      	bne.n	80202a8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 80202c0:	e7a2      	b.n	8020208 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

080202c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 80202c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202c6:	f8dd e018 	ldr.w	lr, [sp, #24]
 80202ca:	4604      	mov	r4, r0
 80202cc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80202d0:	2000      	movs	r0, #0
 80202d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80202d4:	f04f 0801 	mov.w	r8, #1
 80202d8:	9f08      	ldr	r7, [sp, #32]
 80202da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80202dc:	8008      	strh	r0, [r1, #0]
 80202de:	7010      	strb	r0, [r2, #0]
 80202e0:	7018      	strb	r0, [r3, #0]
 80202e2:	f88e 0000 	strb.w	r0, [lr]
 80202e6:	f88c 0000 	strb.w	r0, [ip]
 80202ea:	7030      	strb	r0, [r6, #0]
 80202ec:	6820      	ldr	r0, [r4, #0]
 80202ee:	8800      	ldrh	r0, [r0, #0]
 80202f0:	b190      	cbz	r0, 8020318 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 80202f2:	282b      	cmp	r0, #43	; 0x2b
 80202f4:	d001      	beq.n	80202fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 80202f6:	2820      	cmp	r0, #32
 80202f8:	d104      	bne.n	8020304 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 80202fa:	8008      	strh	r0, [r1, #0]
 80202fc:	6820      	ldr	r0, [r4, #0]
 80202fe:	3002      	adds	r0, #2
 8020300:	6020      	str	r0, [r4, #0]
 8020302:	e7f3      	b.n	80202ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 8020304:	282d      	cmp	r0, #45	; 0x2d
 8020306:	d102      	bne.n	802030e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 8020308:	f882 8000 	strb.w	r8, [r2]
 802030c:	e7f6      	b.n	80202fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 802030e:	2823      	cmp	r0, #35	; 0x23
 8020310:	d102      	bne.n	8020318 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 8020312:	f883 8000 	strb.w	r8, [r3]
 8020316:	e7f1      	b.n	80202fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 8020318:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802031c:	2b09      	cmp	r3, #9
 802031e:	d901      	bls.n	8020324 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 8020320:	282a      	cmp	r0, #42	; 0x2a
 8020322:	d114      	bne.n	802034e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 8020324:	2201      	movs	r2, #1
 8020326:	f88c 2000 	strb.w	r2, [ip]
 802032a:	6823      	ldr	r3, [r4, #0]
 802032c:	8819      	ldrh	r1, [r3, #0]
 802032e:	2930      	cmp	r1, #48	; 0x30
 8020330:	bf02      	ittt	eq
 8020332:	3302      	addeq	r3, #2
 8020334:	6023      	streq	r3, [r4, #0]
 8020336:	f88e 2000 	strbeq.w	r2, [lr]
 802033a:	6820      	ldr	r0, [r4, #0]
 802033c:	8803      	ldrh	r3, [r0, #0]
 802033e:	2b2a      	cmp	r3, #42	; 0x2a
 8020340:	d11e      	bne.n	8020380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 8020342:	f04f 33ff 	mov.w	r3, #4294967295
 8020346:	603b      	str	r3, [r7, #0]
 8020348:	6823      	ldr	r3, [r4, #0]
 802034a:	3302      	adds	r3, #2
 802034c:	6023      	str	r3, [r4, #0]
 802034e:	6823      	ldr	r3, [r4, #0]
 8020350:	881b      	ldrh	r3, [r3, #0]
 8020352:	2b2e      	cmp	r3, #46	; 0x2e
 8020354:	d112      	bne.n	802037c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8020356:	2301      	movs	r3, #1
 8020358:	7033      	strb	r3, [r6, #0]
 802035a:	6823      	ldr	r3, [r4, #0]
 802035c:	1c98      	adds	r0, r3, #2
 802035e:	6020      	str	r0, [r4, #0]
 8020360:	885b      	ldrh	r3, [r3, #2]
 8020362:	2b2a      	cmp	r3, #42	; 0x2a
 8020364:	d118      	bne.n	8020398 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 8020366:	f04f 33ff 	mov.w	r3, #4294967295
 802036a:	602b      	str	r3, [r5, #0]
 802036c:	6823      	ldr	r3, [r4, #0]
 802036e:	3302      	adds	r3, #2
 8020370:	6023      	str	r3, [r4, #0]
 8020372:	682b      	ldr	r3, [r5, #0]
 8020374:	2b06      	cmp	r3, #6
 8020376:	bfa8      	it	ge
 8020378:	2306      	movge	r3, #6
 802037a:	602b      	str	r3, [r5, #0]
 802037c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020380:	f7ff fee4 	bl	802014c <_ZN8touchgfx7Unicode4atoiEPKt>
 8020384:	6038      	str	r0, [r7, #0]
 8020386:	6822      	ldr	r2, [r4, #0]
 8020388:	8813      	ldrh	r3, [r2, #0]
 802038a:	3b30      	subs	r3, #48	; 0x30
 802038c:	b29b      	uxth	r3, r3
 802038e:	2b09      	cmp	r3, #9
 8020390:	d8dd      	bhi.n	802034e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 8020392:	3202      	adds	r2, #2
 8020394:	6022      	str	r2, [r4, #0]
 8020396:	e7f6      	b.n	8020386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 8020398:	f7ff fed8 	bl	802014c <_ZN8touchgfx7Unicode4atoiEPKt>
 802039c:	6028      	str	r0, [r5, #0]
 802039e:	6822      	ldr	r2, [r4, #0]
 80203a0:	8813      	ldrh	r3, [r2, #0]
 80203a2:	3b30      	subs	r3, #48	; 0x30
 80203a4:	b29b      	uxth	r3, r3
 80203a6:	2b09      	cmp	r3, #9
 80203a8:	d8e3      	bhi.n	8020372 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 80203aa:	3202      	adds	r2, #2
 80203ac:	6022      	str	r2, [r4, #0]
 80203ae:	e7f6      	b.n	802039e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>

080203b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80203b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203b4:	b0a3      	sub	sp, #140	; 0x8c
 80203b6:	2500      	movs	r5, #0
 80203b8:	4606      	mov	r6, r0
 80203ba:	4689      	mov	r9, r1
 80203bc:	af11      	add	r7, sp, #68	; 0x44
 80203be:	9209      	str	r2, [sp, #36]	; 0x24
 80203c0:	4629      	mov	r1, r5
 80203c2:	2242      	movs	r2, #66	; 0x42
 80203c4:	4638      	mov	r0, r7
 80203c6:	461c      	mov	r4, r3
 80203c8:	950d      	str	r5, [sp, #52]	; 0x34
 80203ca:	f7fe ff58 	bl	801f27e <_ZN8touchgfx6memsetEPvhm>
 80203ce:	b116      	cbz	r6, 80203d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 80203d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80203d2:	b921      	cbnz	r1, 80203de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 80203d4:	8031      	strh	r1, [r6, #0]
 80203d6:	4630      	mov	r0, r6
 80203d8:	b023      	add	sp, #140	; 0x8c
 80203da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203de:	f8df a250 	ldr.w	sl, [pc, #592]	; 8020630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 80203e2:	f109 3bff 	add.w	fp, r9, #4294967295
 80203e6:	f8da 0000 	ldr.w	r0, [sl]
 80203ea:	6803      	ldr	r3, [r0, #0]
 80203ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80203ee:	4798      	blx	r3
 80203f0:	9009      	str	r0, [sp, #36]	; 0x24
 80203f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203f4:	881a      	ldrh	r2, [r3, #0]
 80203f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80203f8:	2a00      	cmp	r2, #0
 80203fa:	f000 80c2 	beq.w	8020582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 80203fe:	459b      	cmp	fp, r3
 8020400:	f340 80bf 	ble.w	8020582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 8020404:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8020408:	f8b8 2000 	ldrh.w	r2, [r8]
 802040c:	2a00      	cmp	r2, #0
 802040e:	d0f0      	beq.n	80203f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 8020410:	2a25      	cmp	r2, #37	; 0x25
 8020412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020414:	f000 80b9 	beq.w	802058a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 8020418:	459b      	cmp	fp, r3
 802041a:	f340 80b6 	ble.w	802058a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 802041e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020422:	f108 0202 	add.w	r2, r8, #2
 8020426:	3301      	adds	r3, #1
 8020428:	9209      	str	r2, [sp, #36]	; 0x24
 802042a:	930d      	str	r3, [sp, #52]	; 0x34
 802042c:	e7ea      	b.n	8020404 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 802042e:	3b63      	subs	r3, #99	; 0x63
 8020430:	2b01      	cmp	r3, #1
 8020432:	f200 80f2 	bhi.w	802061a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 8020436:	9710      	str	r7, [sp, #64]	; 0x40
 8020438:	8813      	ldrh	r3, [r2, #0]
 802043a:	2b69      	cmp	r3, #105	; 0x69
 802043c:	d068      	beq.n	8020510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 802043e:	d81c      	bhi.n	802047a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 8020440:	2b63      	cmp	r3, #99	; 0x63
 8020442:	d031      	beq.n	80204a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 8020444:	2b64      	cmp	r3, #100	; 0x64
 8020446:	d063      	beq.n	8020510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 8020448:	2b58      	cmp	r3, #88	; 0x58
 802044a:	f000 8082 	beq.w	8020552 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 802044e:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8020452:	46a0      	mov	r8, r4
 8020454:	e02f      	b.n	80204b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020456:	2b73      	cmp	r3, #115	; 0x73
 8020458:	d0ed      	beq.n	8020436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 802045a:	d803      	bhi.n	8020464 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 802045c:	2b6f      	cmp	r3, #111	; 0x6f
 802045e:	f040 80dc 	bne.w	802061a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 8020462:	e7e8      	b.n	8020436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8020464:	2b75      	cmp	r3, #117	; 0x75
 8020466:	d0e6      	beq.n	8020436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8020468:	2b78      	cmp	r3, #120	; 0x78
 802046a:	e7f8      	b.n	802045e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 802046c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802046e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8020472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020474:	3302      	adds	r3, #2
 8020476:	9309      	str	r3, [sp, #36]	; 0x24
 8020478:	e7bb      	b.n	80203f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 802047a:	2b73      	cmp	r3, #115	; 0x73
 802047c:	d037      	beq.n	80204ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 802047e:	d808      	bhi.n	8020492 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 8020480:	2b6f      	cmp	r3, #111	; 0x6f
 8020482:	d1e4      	bne.n	802044e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 8020484:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020486:	f104 0804 	add.w	r8, r4, #4
 802048a:	2308      	movs	r3, #8
 802048c:	eba9 0202 	sub.w	r2, r9, r2
 8020490:	e059      	b.n	8020546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 8020492:	2b75      	cmp	r3, #117	; 0x75
 8020494:	d051      	beq.n	802053a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 8020496:	2b78      	cmp	r3, #120	; 0x78
 8020498:	d1d9      	bne.n	802044e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 802049a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802049c:	f104 0804 	add.w	r8, r4, #4
 80204a0:	2310      	movs	r3, #16
 80204a2:	eba9 0202 	sub.w	r2, r9, r2
 80204a6:	e04e      	b.n	8020546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 80204a8:	7823      	ldrb	r3, [r4, #0]
 80204aa:	f104 0804 	add.w	r8, r4, #4
 80204ae:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80204b2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80204b6:	aa0d      	add	r2, sp, #52	; 0x34
 80204b8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80204bc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80204c0:	a810      	add	r0, sp, #64	; 0x40
 80204c2:	9205      	str	r2, [sp, #20]
 80204c4:	4644      	mov	r4, r8
 80204c6:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80204ca:	9607      	str	r6, [sp, #28]
 80204cc:	9204      	str	r2, [sp, #16]
 80204ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80204d0:	f8cd 9018 	str.w	r9, [sp, #24]
 80204d4:	9203      	str	r2, [sp, #12]
 80204d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80204da:	9202      	str	r2, [sp, #8]
 80204dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80204de:	9201      	str	r2, [sp, #4]
 80204e0:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80204e4:	9200      	str	r2, [sp, #0]
 80204e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80204e8:	f7ff fe3f 	bl	802016a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 80204ec:	e7c1      	b.n	8020472 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 80204ee:	f8da 0000 	ldr.w	r0, [sl]
 80204f2:	f104 0804 	add.w	r8, r4, #4
 80204f6:	6821      	ldr	r1, [r4, #0]
 80204f8:	6803      	ldr	r3, [r0, #0]
 80204fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204fc:	4798      	blx	r3
 80204fe:	9010      	str	r0, [sp, #64]	; 0x40
 8020500:	f8da 0000 	ldr.w	r0, [sl]
 8020504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020506:	6803      	ldr	r3, [r0, #0]
 8020508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802050a:	4798      	blx	r3
 802050c:	9009      	str	r0, [sp, #36]	; 0x24
 802050e:	e7d2      	b.n	80204b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020512:	230a      	movs	r3, #10
 8020514:	4639      	mov	r1, r7
 8020516:	6820      	ldr	r0, [r4, #0]
 8020518:	eba9 0202 	sub.w	r2, r9, r2
 802051c:	f104 0804 	add.w	r8, r4, #4
 8020520:	b292      	uxth	r2, r2
 8020522:	f7ff fde1 	bl	80200e8 <_ZN8touchgfx7Unicode4itoaElPtti>
 8020526:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 802052a:	2b2d      	cmp	r3, #45	; 0x2d
 802052c:	d1c3      	bne.n	80204b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 802052e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020532:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020534:	3302      	adds	r3, #2
 8020536:	9310      	str	r3, [sp, #64]	; 0x40
 8020538:	e7bd      	b.n	80204b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 802053a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802053c:	f104 0804 	add.w	r8, r4, #4
 8020540:	230a      	movs	r3, #10
 8020542:	eba9 0202 	sub.w	r2, r9, r2
 8020546:	b292      	uxth	r2, r2
 8020548:	4639      	mov	r1, r7
 802054a:	6820      	ldr	r0, [r4, #0]
 802054c:	f7ff fdaf 	bl	80200ae <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 8020550:	e7b1      	b.n	80204b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020552:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020554:	2310      	movs	r3, #16
 8020556:	4639      	mov	r1, r7
 8020558:	6820      	ldr	r0, [r4, #0]
 802055a:	eba9 0202 	sub.w	r2, r9, r2
 802055e:	f104 0804 	add.w	r8, r4, #4
 8020562:	b292      	uxth	r2, r2
 8020564:	f7ff fda3 	bl	80200ae <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 8020568:	463a      	mov	r2, r7
 802056a:	8813      	ldrh	r3, [r2, #0]
 802056c:	2b00      	cmp	r3, #0
 802056e:	d0a2      	beq.n	80204b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020570:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8020574:	3202      	adds	r2, #2
 8020576:	2919      	cmp	r1, #25
 8020578:	bf9c      	itt	ls
 802057a:	3b20      	subls	r3, #32
 802057c:	f822 3c02 	strhls.w	r3, [r2, #-2]
 8020580:	e7f3      	b.n	802056a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 8020582:	2200      	movs	r2, #0
 8020584:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020588:	e725      	b.n	80203d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 802058a:	459b      	cmp	fp, r3
 802058c:	f77f af31 	ble.w	80203f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 8020590:	f108 0302 	add.w	r3, r8, #2
 8020594:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8020598:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 802059c:	a809      	add	r0, sp, #36	; 0x24
 802059e:	9309      	str	r3, [sp, #36]	; 0x24
 80205a0:	ab0f      	add	r3, sp, #60	; 0x3c
 80205a2:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 80205a6:	9304      	str	r3, [sp, #16]
 80205a8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80205ac:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 80205b0:	9303      	str	r3, [sp, #12]
 80205b2:	ab0e      	add	r3, sp, #56	; 0x38
 80205b4:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 80205b8:	9302      	str	r3, [sp, #8]
 80205ba:	ab0c      	add	r3, sp, #48	; 0x30
 80205bc:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 80205c0:	9301      	str	r3, [sp, #4]
 80205c2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80205c6:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 80205ca:	9300      	str	r3, [sp, #0]
 80205cc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80205d0:	950e      	str	r5, [sp, #56]	; 0x38
 80205d2:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 80205d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80205d8:	f7ff fe73 	bl	80202c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 80205dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80205de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80205e0:	2b00      	cmp	r3, #0
 80205e2:	bfbf      	itttt	lt
 80205e4:	6823      	ldrlt	r3, [r4, #0]
 80205e6:	3404      	addlt	r4, #4
 80205e8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80205ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80205ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	bfbf      	itttt	lt
 80205f4:	6823      	ldrlt	r3, [r4, #0]
 80205f6:	3404      	addlt	r4, #4
 80205f8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80205fc:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80205fe:	8813      	ldrh	r3, [r2, #0]
 8020600:	2b69      	cmp	r3, #105	; 0x69
 8020602:	f43f af18 	beq.w	8020436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8020606:	f63f af26 	bhi.w	8020456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 802060a:	2b58      	cmp	r3, #88	; 0x58
 802060c:	f43f af13 	beq.w	8020436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8020610:	f63f af0d 	bhi.w	802042e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 8020614:	2b25      	cmp	r3, #37	; 0x25
 8020616:	f43f af29 	beq.w	802046c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 802061a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802061c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8020620:	f8b8 2000 	ldrh.w	r2, [r8]
 8020624:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020628:	3301      	adds	r3, #1
 802062a:	930d      	str	r3, [sp, #52]	; 0x34
 802062c:	e721      	b.n	8020472 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 802062e:	bf00      	nop
 8020630:	2000ba4c 	.word	0x2000ba4c

08020634 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8020634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020636:	4605      	mov	r5, r0
 8020638:	b0a1      	sub	sp, #132	; 0x84
 802063a:	4610      	mov	r0, r2
 802063c:	460e      	mov	r6, r1
 802063e:	4614      	mov	r4, r2
 8020640:	461f      	mov	r7, r3
 8020642:	f7ff fd16 	bl	8020072 <_ZN8touchgfx7Unicode6strlenEPKc>
 8020646:	283f      	cmp	r0, #63	; 0x3f
 8020648:	dd06      	ble.n	8020658 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 802064a:	4b0a      	ldr	r3, [pc, #40]	; (8020674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 802064c:	f240 11b9 	movw	r1, #441	; 0x1b9
 8020650:	4a09      	ldr	r2, [pc, #36]	; (8020678 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8020652:	480a      	ldr	r0, [pc, #40]	; (802067c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8020654:	f002 fa70 	bl	8022b38 <__assert_func>
 8020658:	4621      	mov	r1, r4
 802065a:	2240      	movs	r2, #64	; 0x40
 802065c:	4668      	mov	r0, sp
 802065e:	f7ff fd14 	bl	802008a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020662:	463b      	mov	r3, r7
 8020664:	466a      	mov	r2, sp
 8020666:	4631      	mov	r1, r6
 8020668:	4628      	mov	r0, r5
 802066a:	f7ff fea1 	bl	80203b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 802066e:	b021      	add	sp, #132	; 0x84
 8020670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020672:	bf00      	nop
 8020674:	08026374 	.word	0x08026374
 8020678:	080263b7 	.word	0x080263b7
 802067c:	08026391 	.word	0x08026391

08020680 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8020680:	b40c      	push	{r2, r3}
 8020682:	b507      	push	{r0, r1, r2, lr}
 8020684:	ab04      	add	r3, sp, #16
 8020686:	f853 2b04 	ldr.w	r2, [r3], #4
 802068a:	9301      	str	r3, [sp, #4]
 802068c:	f7ff ffd2 	bl	8020634 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8020690:	b003      	add	sp, #12
 8020692:	f85d eb04 	ldr.w	lr, [sp], #4
 8020696:	b002      	add	sp, #8
 8020698:	4770      	bx	lr
	...

0802069c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 802069c:	4b26      	ldr	r3, [pc, #152]	; (8020738 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 802069e:	b570      	push	{r4, r5, r6, lr}
 80206a0:	681b      	ldr	r3, [r3, #0]
 80206a2:	4605      	mov	r5, r0
 80206a4:	460c      	mov	r4, r1
 80206a6:	4616      	mov	r6, r2
 80206a8:	b92b      	cbnz	r3, 80206b6 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 80206aa:	4b24      	ldr	r3, [pc, #144]	; (802073c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 80206ac:	2116      	movs	r1, #22
 80206ae:	4a24      	ldr	r2, [pc, #144]	; (8020740 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 80206b0:	4824      	ldr	r0, [pc, #144]	; (8020744 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 80206b2:	f002 fa41 	bl	8022b38 <__assert_func>
 80206b6:	6898      	ldr	r0, [r3, #8]
 80206b8:	6803      	ldr	r3, [r0, #0]
 80206ba:	6a1b      	ldr	r3, [r3, #32]
 80206bc:	4798      	blx	r3
 80206be:	2810      	cmp	r0, #16
 80206c0:	d109      	bne.n	80206d6 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 80206c2:	00e0      	lsls	r0, r4, #3
 80206c4:	022c      	lsls	r4, r5, #8
 80206c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80206ca:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80206ce:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 80206d2:	4320      	orrs	r0, r4
 80206d4:	bd70      	pop	{r4, r5, r6, pc}
 80206d6:	2818      	cmp	r0, #24
 80206d8:	d104      	bne.n	80206e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 80206da:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 80206de:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80206e2:	bd70      	pop	{r4, r5, r6, pc}
 80206e4:	2804      	cmp	r0, #4
 80206e6:	f04f 01b6 	mov.w	r1, #182	; 0xb6
 80206ea:	d109      	bne.n	8020700 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 80206ec:	fb14 f401 	smulbb	r4, r4, r1
 80206f0:	2036      	movs	r0, #54	; 0x36
 80206f2:	fb10 4405 	smlabb	r4, r0, r5, r4
 80206f6:	2013      	movs	r0, #19
 80206f8:	fb10 4006 	smlabb	r0, r0, r6, r4
 80206fc:	1300      	asrs	r0, r0, #12
 80206fe:	bd70      	pop	{r4, r5, r6, pc}
 8020700:	2802      	cmp	r0, #2
 8020702:	d109      	bne.n	8020718 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 8020704:	fb14 f401 	smulbb	r4, r4, r1
 8020708:	2036      	movs	r0, #54	; 0x36
 802070a:	fb10 4405 	smlabb	r4, r0, r5, r4
 802070e:	2013      	movs	r0, #19
 8020710:	fb10 4006 	smlabb	r0, r0, r6, r4
 8020714:	1380      	asrs	r0, r0, #14
 8020716:	bd70      	pop	{r4, r5, r6, pc}
 8020718:	2801      	cmp	r0, #1
 802071a:	d109      	bne.n	8020730 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 802071c:	fb14 f401 	smulbb	r4, r4, r1
 8020720:	2036      	movs	r0, #54	; 0x36
 8020722:	fb10 4405 	smlabb	r4, r0, r5, r4
 8020726:	2013      	movs	r0, #19
 8020728:	fb10 4006 	smlabb	r0, r0, r6, r4
 802072c:	13c0      	asrs	r0, r0, #15
 802072e:	bd70      	pop	{r4, r5, r6, pc}
 8020730:	4b05      	ldr	r3, [pc, #20]	; (8020748 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 8020732:	212f      	movs	r1, #47	; 0x2f
 8020734:	4a02      	ldr	r2, [pc, #8]	; (8020740 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 8020736:	e7bb      	b.n	80206b0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 8020738:	2000ba4c 	.word	0x2000ba4c
 802073c:	0802643c 	.word	0x0802643c
 8020740:	080264bf 	.word	0x080264bf
 8020744:	0802647f 	.word	0x0802647f
 8020748:	080264a3 	.word	0x080264a3

0802074c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 802074c:	4b01      	ldr	r3, [pc, #4]	; (8020754 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 802074e:	6018      	str	r0, [r3, #0]
 8020750:	4770      	bx	lr
 8020752:	bf00      	nop
 8020754:	2000badc 	.word	0x2000badc

08020758 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8020758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802075c:	4f24      	ldr	r7, [pc, #144]	; (80207f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 802075e:	683b      	ldr	r3, [r7, #0]
 8020760:	2b00      	cmp	r3, #0
 8020762:	d042      	beq.n	80207ea <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8020764:	4923      	ldr	r1, [pc, #140]	; (80207f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8020766:	4d24      	ldr	r5, [pc, #144]	; (80207f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8020768:	8808      	ldrh	r0, [r1, #0]
 802076a:	882a      	ldrh	r2, [r5, #0]
 802076c:	4e23      	ldr	r6, [pc, #140]	; (80207fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 802076e:	4410      	add	r0, r2
 8020770:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 8020774:	4c22      	ldr	r4, [pc, #136]	; (8020800 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8020776:	1c41      	adds	r1, r0, #1
 8020778:	ea4f 0880 	mov.w	r8, r0, lsl #2
 802077c:	f021 0101 	bic.w	r1, r1, #1
 8020780:	eb03 0208 	add.w	r2, r3, r8
 8020784:	0409      	lsls	r1, r1, #16
 8020786:	6032      	str	r2, [r6, #0]
 8020788:	0c09      	lsrs	r1, r1, #16
 802078a:	0049      	lsls	r1, r1, #1
 802078c:	eb08 0c01 	add.w	ip, r8, r1
 8020790:	eb03 020c 	add.w	r2, r3, ip
 8020794:	44f4      	add	ip, lr
 8020796:	6022      	str	r2, [r4, #0]
 8020798:	4463      	add	r3, ip
 802079a:	4a1a      	ldr	r2, [pc, #104]	; (8020804 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 802079c:	6013      	str	r3, [r2, #0]
 802079e:	2300      	movs	r3, #0
 80207a0:	4a19      	ldr	r2, [pc, #100]	; (8020808 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80207a2:	8013      	strh	r3, [r2, #0]
 80207a4:	4a19      	ldr	r2, [pc, #100]	; (802080c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80207a6:	6812      	ldr	r2, [r2, #0]
 80207a8:	eba2 0208 	sub.w	r2, r2, r8
 80207ac:	1a52      	subs	r2, r2, r1
 80207ae:	4918      	ldr	r1, [pc, #96]	; (8020810 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80207b0:	eba2 020e 	sub.w	r2, r2, lr
 80207b4:	469e      	mov	lr, r3
 80207b6:	600a      	str	r2, [r1, #0]
 80207b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80207bc:	4a15      	ldr	r2, [pc, #84]	; (8020814 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80207be:	8013      	strh	r3, [r2, #0]
 80207c0:	4283      	cmp	r3, r0
 80207c2:	d007      	beq.n	80207d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 80207c4:	683a      	ldr	r2, [r7, #0]
 80207c6:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 80207ca:	6832      	ldr	r2, [r6, #0]
 80207cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80207d0:	3301      	adds	r3, #1
 80207d2:	e7f5      	b.n	80207c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 80207d4:	2300      	movs	r3, #0
 80207d6:	882d      	ldrh	r5, [r5, #0]
 80207d8:	6820      	ldr	r0, [r4, #0]
 80207da:	4619      	mov	r1, r3
 80207dc:	42ab      	cmp	r3, r5
 80207de:	d204      	bcs.n	80207ea <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80207e0:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 80207e4:	3301      	adds	r3, #1
 80207e6:	7391      	strb	r1, [r2, #14]
 80207e8:	e7f8      	b.n	80207dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 80207ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80207ee:	bf00      	nop
 80207f0:	2000bae0 	.word	0x2000bae0
 80207f4:	2000bafc 	.word	0x2000bafc
 80207f8:	2000bb00 	.word	0x2000bb00
 80207fc:	2000baf4 	.word	0x2000baf4
 8020800:	2000bae4 	.word	0x2000bae4
 8020804:	2000baec 	.word	0x2000baec
 8020808:	2000bafe 	.word	0x2000bafe
 802080c:	2000bae8 	.word	0x2000bae8
 8020810:	2000baf8 	.word	0x2000baf8
 8020814:	2000baf0 	.word	0x2000baf0

08020818 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8020818:	4b0f      	ldr	r3, [pc, #60]	; (8020858 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 802081a:	b510      	push	{r4, lr}
 802081c:	681b      	ldr	r3, [r3, #0]
 802081e:	b9d3      	cbnz	r3, 8020856 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8020820:	b1c9      	cbz	r1, 8020856 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8020822:	4b0e      	ldr	r3, [pc, #56]	; (802085c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8020824:	2406      	movs	r4, #6
 8020826:	801a      	strh	r2, [r3, #0]
 8020828:	b292      	uxth	r2, r2
 802082a:	4b0d      	ldr	r3, [pc, #52]	; (8020860 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 802082c:	881b      	ldrh	r3, [r3, #0]
 802082e:	4413      	add	r3, r2
 8020830:	0112      	lsls	r2, r2, #4
 8020832:	fb04 2203 	mla	r2, r4, r3, r2
 8020836:	4291      	cmp	r1, r2
 8020838:	d805      	bhi.n	8020846 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 802083a:	4b0a      	ldr	r3, [pc, #40]	; (8020864 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 802083c:	2138      	movs	r1, #56	; 0x38
 802083e:	4a0a      	ldr	r2, [pc, #40]	; (8020868 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8020840:	480a      	ldr	r0, [pc, #40]	; (802086c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8020842:	f002 f979 	bl	8022b38 <__assert_func>
 8020846:	4b0a      	ldr	r3, [pc, #40]	; (8020870 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8020848:	6019      	str	r1, [r3, #0]
 802084a:	4b0a      	ldr	r3, [pc, #40]	; (8020874 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 802084c:	6018      	str	r0, [r3, #0]
 802084e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020852:	f7ff bf81 	b.w	8020758 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8020856:	bd10      	pop	{r4, pc}
 8020858:	2000baec 	.word	0x2000baec
 802085c:	2000bb00 	.word	0x2000bb00
 8020860:	2000bafc 	.word	0x2000bafc
 8020864:	0802657f 	.word	0x0802657f
 8020868:	08026614 	.word	0x08026614
 802086c:	0802655a 	.word	0x0802655a
 8020870:	2000bae8 	.word	0x2000bae8
 8020874:	2000bae0 	.word	0x2000bae0

08020878 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8020878:	b470      	push	{r4, r5, r6}
 802087a:	4c07      	ldr	r4, [pc, #28]	; (8020898 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 802087c:	4605      	mov	r5, r0
 802087e:	4610      	mov	r0, r2
 8020880:	9a03      	ldr	r2, [sp, #12]
 8020882:	6826      	ldr	r6, [r4, #0]
 8020884:	b936      	cbnz	r6, 8020894 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8020886:	6025      	str	r5, [r4, #0]
 8020888:	4c04      	ldr	r4, [pc, #16]	; (802089c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 802088a:	8021      	strh	r1, [r4, #0]
 802088c:	4619      	mov	r1, r3
 802088e:	bc70      	pop	{r4, r5, r6}
 8020890:	f7ff bfc2 	b.w	8020818 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8020894:	bc70      	pop	{r4, r5, r6}
 8020896:	4770      	bx	lr
 8020898:	2000bb04 	.word	0x2000bb04
 802089c:	2000bafc 	.word	0x2000bafc

080208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80208a0:	b508      	push	{r3, lr}
 80208a2:	4b13      	ldr	r3, [pc, #76]	; (80208f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80208a4:	6819      	ldr	r1, [r3, #0]
 80208a6:	b931      	cbnz	r1, 80208b6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80208a8:	4b12      	ldr	r3, [pc, #72]	; (80208f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80208aa:	f44f 710d 	mov.w	r1, #564	; 0x234
 80208ae:	4a12      	ldr	r2, [pc, #72]	; (80208f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80208b0:	4812      	ldr	r0, [pc, #72]	; (80208fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80208b2:	f002 f941 	bl	8022b38 <__assert_func>
 80208b6:	4a12      	ldr	r2, [pc, #72]	; (8020900 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80208b8:	8803      	ldrh	r3, [r0, #0]
 80208ba:	8812      	ldrh	r2, [r2, #0]
 80208bc:	4293      	cmp	r3, r2
 80208be:	da04      	bge.n	80208ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80208c0:	2214      	movs	r2, #20
 80208c2:	fb02 1303 	mla	r3, r2, r3, r1
 80208c6:	8918      	ldrh	r0, [r3, #8]
 80208c8:	bd08      	pop	{r3, pc}
 80208ca:	490e      	ldr	r1, [pc, #56]	; (8020904 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80208cc:	8809      	ldrh	r1, [r1, #0]
 80208ce:	4411      	add	r1, r2
 80208d0:	428b      	cmp	r3, r1
 80208d2:	da05      	bge.n	80208e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 80208d4:	1a9b      	subs	r3, r3, r2
 80208d6:	4a0c      	ldr	r2, [pc, #48]	; (8020908 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80208d8:	6812      	ldr	r2, [r2, #0]
 80208da:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80208de:	e7f2      	b.n	80208c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80208e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80208e4:	4293      	cmp	r3, r2
 80208e6:	bf06      	itte	eq
 80208e8:	4b08      	ldreq	r3, [pc, #32]	; (802090c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80208ea:	8818      	ldrheq	r0, [r3, #0]
 80208ec:	2000      	movne	r0, #0
 80208ee:	bd08      	pop	{r3, pc}
 80208f0:	2000bb04 	.word	0x2000bb04
 80208f4:	080265d8 	.word	0x080265d8
 80208f8:	080266c1 	.word	0x080266c1
 80208fc:	0802655a 	.word	0x0802655a
 8020900:	2000bafc 	.word	0x2000bafc
 8020904:	2000bb00 	.word	0x2000bb00
 8020908:	2000bae4 	.word	0x2000bae4
 802090c:	2000ba40 	.word	0x2000ba40

08020910 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8020910:	b508      	push	{r3, lr}
 8020912:	4b13      	ldr	r3, [pc, #76]	; (8020960 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8020914:	6819      	ldr	r1, [r3, #0]
 8020916:	b931      	cbnz	r1, 8020926 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8020918:	4b12      	ldr	r3, [pc, #72]	; (8020964 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 802091a:	f44f 7112 	mov.w	r1, #584	; 0x248
 802091e:	4a12      	ldr	r2, [pc, #72]	; (8020968 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8020920:	4812      	ldr	r0, [pc, #72]	; (802096c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8020922:	f002 f909 	bl	8022b38 <__assert_func>
 8020926:	4a12      	ldr	r2, [pc, #72]	; (8020970 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8020928:	8803      	ldrh	r3, [r0, #0]
 802092a:	8812      	ldrh	r2, [r2, #0]
 802092c:	4293      	cmp	r3, r2
 802092e:	da04      	bge.n	802093a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8020930:	2214      	movs	r2, #20
 8020932:	fb02 1303 	mla	r3, r2, r3, r1
 8020936:	8958      	ldrh	r0, [r3, #10]
 8020938:	bd08      	pop	{r3, pc}
 802093a:	490e      	ldr	r1, [pc, #56]	; (8020974 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 802093c:	8809      	ldrh	r1, [r1, #0]
 802093e:	4411      	add	r1, r2
 8020940:	428b      	cmp	r3, r1
 8020942:	da05      	bge.n	8020950 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 8020944:	1a9b      	subs	r3, r3, r2
 8020946:	4a0c      	ldr	r2, [pc, #48]	; (8020978 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8020948:	6812      	ldr	r2, [r2, #0]
 802094a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 802094e:	e7f2      	b.n	8020936 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8020950:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020954:	4293      	cmp	r3, r2
 8020956:	bf06      	itte	eq
 8020958:	4b08      	ldreq	r3, [pc, #32]	; (802097c <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 802095a:	8818      	ldrheq	r0, [r3, #0]
 802095c:	2000      	movne	r0, #0
 802095e:	bd08      	pop	{r3, pc}
 8020960:	2000bb04 	.word	0x2000bb04
 8020964:	080265d8 	.word	0x080265d8
 8020968:	080266ed 	.word	0x080266ed
 802096c:	0802655a 	.word	0x0802655a
 8020970:	2000bafc 	.word	0x2000bafc
 8020974:	2000bb00 	.word	0x2000bb00
 8020978:	2000bae4 	.word	0x2000bae4
 802097c:	2000ba42 	.word	0x2000ba42

08020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8020980:	4b22      	ldr	r3, [pc, #136]	; (8020a0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8020982:	b510      	push	{r4, lr}
 8020984:	681c      	ldr	r4, [r3, #0]
 8020986:	b934      	cbnz	r4, 8020996 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8020988:	4b21      	ldr	r3, [pc, #132]	; (8020a10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 802098a:	f44f 7117 	mov.w	r1, #604	; 0x25c
 802098e:	4a21      	ldr	r2, [pc, #132]	; (8020a14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8020990:	4821      	ldr	r0, [pc, #132]	; (8020a18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8020992:	f002 f8d1 	bl	8022b38 <__assert_func>
 8020996:	4a21      	ldr	r2, [pc, #132]	; (8020a1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8020998:	880b      	ldrh	r3, [r1, #0]
 802099a:	8812      	ldrh	r2, [r2, #0]
 802099c:	4293      	cmp	r3, r2
 802099e:	da10      	bge.n	80209c2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 80209a0:	2214      	movs	r2, #20
 80209a2:	fb02 4303 	mla	r3, r2, r3, r4
 80209a6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80209aa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80209ae:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80209b2:	8a5b      	ldrh	r3, [r3, #18]
 80209b4:	8004      	strh	r4, [r0, #0]
 80209b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80209ba:	8041      	strh	r1, [r0, #2]
 80209bc:	8082      	strh	r2, [r0, #4]
 80209be:	80c3      	strh	r3, [r0, #6]
 80209c0:	bd10      	pop	{r4, pc}
 80209c2:	4917      	ldr	r1, [pc, #92]	; (8020a20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80209c4:	8809      	ldrh	r1, [r1, #0]
 80209c6:	4411      	add	r1, r2
 80209c8:	428b      	cmp	r3, r1
 80209ca:	da09      	bge.n	80209e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80209cc:	1a9b      	subs	r3, r3, r2
 80209ce:	4a15      	ldr	r2, [pc, #84]	; (8020a24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80209d0:	6812      	ldr	r2, [r2, #0]
 80209d2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80209d6:	681a      	ldr	r2, [r3, #0]
 80209d8:	6002      	str	r2, [r0, #0]
 80209da:	685a      	ldr	r2, [r3, #4]
 80209dc:	6042      	str	r2, [r0, #4]
 80209de:	bd10      	pop	{r4, pc}
 80209e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80209e4:	4293      	cmp	r3, r2
 80209e6:	d10b      	bne.n	8020a00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 80209e8:	4b0f      	ldr	r3, [pc, #60]	; (8020a28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80209ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 80209ee:	4b0f      	ldr	r3, [pc, #60]	; (8020a2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80209f0:	8081      	strh	r1, [r0, #4]
 80209f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80209f6:	2300      	movs	r3, #0
 80209f8:	80c2      	strh	r2, [r0, #6]
 80209fa:	8003      	strh	r3, [r0, #0]
 80209fc:	8043      	strh	r3, [r0, #2]
 80209fe:	bd10      	pop	{r4, pc}
 8020a00:	2300      	movs	r3, #0
 8020a02:	8003      	strh	r3, [r0, #0]
 8020a04:	8043      	strh	r3, [r0, #2]
 8020a06:	8083      	strh	r3, [r0, #4]
 8020a08:	e7d9      	b.n	80209be <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 8020a0a:	bf00      	nop
 8020a0c:	2000bb04 	.word	0x2000bb04
 8020a10:	080265d8 	.word	0x080265d8
 8020a14:	0802665a 	.word	0x0802665a
 8020a18:	0802655a 	.word	0x0802655a
 8020a1c:	2000bafc 	.word	0x2000bafc
 8020a20:	2000bb00 	.word	0x2000bb00
 8020a24:	2000bae4 	.word	0x2000bae4
 8020a28:	2000ba40 	.word	0x2000ba40
 8020a2c:	2000ba42 	.word	0x2000ba42

08020a30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8020a30:	4b16      	ldr	r3, [pc, #88]	; (8020a8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 8020a32:	681b      	ldr	r3, [r3, #0]
 8020a34:	b333      	cbz	r3, 8020a84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 8020a36:	4a16      	ldr	r2, [pc, #88]	; (8020a90 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8020a38:	8800      	ldrh	r0, [r0, #0]
 8020a3a:	8812      	ldrh	r2, [r2, #0]
 8020a3c:	4290      	cmp	r0, r2
 8020a3e:	da0f      	bge.n	8020a60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 8020a40:	2214      	movs	r2, #20
 8020a42:	fb02 3300 	mla	r3, r2, r0, r3
 8020a46:	8a19      	ldrh	r1, [r3, #16]
 8020a48:	891a      	ldrh	r2, [r3, #8]
 8020a4a:	4291      	cmp	r1, r2
 8020a4c:	db1c      	blt.n	8020a88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8020a4e:	8a58      	ldrh	r0, [r3, #18]
 8020a50:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8020a54:	895b      	ldrh	r3, [r3, #10]
 8020a56:	4298      	cmp	r0, r3
 8020a58:	bfac      	ite	ge
 8020a5a:	2000      	movge	r0, #0
 8020a5c:	2001      	movlt	r0, #1
 8020a5e:	4770      	bx	lr
 8020a60:	4b0c      	ldr	r3, [pc, #48]	; (8020a94 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8020a62:	881b      	ldrh	r3, [r3, #0]
 8020a64:	4413      	add	r3, r2
 8020a66:	4298      	cmp	r0, r3
 8020a68:	da0c      	bge.n	8020a84 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 8020a6a:	4b0b      	ldr	r3, [pc, #44]	; (8020a98 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8020a6c:	1a80      	subs	r0, r0, r2
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8020a74:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8020a78:	891a      	ldrh	r2, [r3, #8]
 8020a7a:	4291      	cmp	r1, r2
 8020a7c:	db04      	blt.n	8020a88 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8020a7e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8020a82:	e7e7      	b.n	8020a54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 8020a84:	2000      	movs	r0, #0
 8020a86:	4770      	bx	lr
 8020a88:	2001      	movs	r0, #1
 8020a8a:	4770      	bx	lr
 8020a8c:	2000bb04 	.word	0x2000bb04
 8020a90:	2000bafc 	.word	0x2000bafc
 8020a94:	2000bb00 	.word	0x2000bb00
 8020a98:	2000bae4 	.word	0x2000bae4

08020a9c <_ZNK8touchgfx6Bitmap7getDataEv>:
 8020a9c:	b508      	push	{r3, lr}
 8020a9e:	4b11      	ldr	r3, [pc, #68]	; (8020ae4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 8020aa0:	6819      	ldr	r1, [r3, #0]
 8020aa2:	b931      	cbnz	r1, 8020ab2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8020aa4:	4b10      	ldr	r3, [pc, #64]	; (8020ae8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8020aa6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8020aaa:	4a10      	ldr	r2, [pc, #64]	; (8020aec <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8020aac:	4810      	ldr	r0, [pc, #64]	; (8020af0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8020aae:	f002 f843 	bl	8022b38 <__assert_func>
 8020ab2:	8803      	ldrh	r3, [r0, #0]
 8020ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020ab8:	4293      	cmp	r3, r2
 8020aba:	d011      	beq.n	8020ae0 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 8020abc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020ac0:	4293      	cmp	r3, r2
 8020ac2:	d103      	bne.n	8020acc <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8020ac4:	4b0b      	ldr	r3, [pc, #44]	; (8020af4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8020ac6:	681b      	ldr	r3, [r3, #0]
 8020ac8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8020aca:	bd08      	pop	{r3, pc}
 8020acc:	4a0a      	ldr	r2, [pc, #40]	; (8020af8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8020ace:	6812      	ldr	r2, [r2, #0]
 8020ad0:	b112      	cbz	r2, 8020ad8 <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 8020ad2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8020ad6:	b920      	cbnz	r0, 8020ae2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8020ad8:	2214      	movs	r2, #20
 8020ada:	4353      	muls	r3, r2
 8020adc:	58c8      	ldr	r0, [r1, r3]
 8020ade:	bd08      	pop	{r3, pc}
 8020ae0:	2000      	movs	r0, #0
 8020ae2:	bd08      	pop	{r3, pc}
 8020ae4:	2000bb04 	.word	0x2000bb04
 8020ae8:	080265d8 	.word	0x080265d8
 8020aec:	08026690 	.word	0x08026690
 8020af0:	0802655a 	.word	0x0802655a
 8020af4:	2000ba4c 	.word	0x2000ba4c
 8020af8:	2000bae0 	.word	0x2000bae0

08020afc <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 8020afc:	8802      	ldrh	r2, [r0, #0]
 8020afe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8020b02:	429a      	cmp	r2, r3
 8020b04:	dc19      	bgt.n	8020b3a <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 8020b06:	4b0e      	ldr	r3, [pc, #56]	; (8020b40 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 8020b08:	881b      	ldrh	r3, [r3, #0]
 8020b0a:	429a      	cmp	r2, r3
 8020b0c:	da15      	bge.n	8020b3a <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 8020b0e:	4b0d      	ldr	r3, [pc, #52]	; (8020b44 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 8020b10:	6819      	ldr	r1, [r3, #0]
 8020b12:	2314      	movs	r3, #20
 8020b14:	fb03 1302 	mla	r3, r3, r2, r1
 8020b18:	6858      	ldr	r0, [r3, #4]
 8020b1a:	b178      	cbz	r0, 8020b3c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020b1c:	490a      	ldr	r1, [pc, #40]	; (8020b48 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 8020b1e:	6809      	ldr	r1, [r1, #0]
 8020b20:	b161      	cbz	r1, 8020b3c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020b22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8020b26:	b14a      	cbz	r2, 8020b3c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020b28:	8919      	ldrh	r1, [r3, #8]
 8020b2a:	8958      	ldrh	r0, [r3, #10]
 8020b2c:	4348      	muls	r0, r1
 8020b2e:	0040      	lsls	r0, r0, #1
 8020b30:	3003      	adds	r0, #3
 8020b32:	f020 0003 	bic.w	r0, r0, #3
 8020b36:	4410      	add	r0, r2
 8020b38:	4770      	bx	lr
 8020b3a:	2000      	movs	r0, #0
 8020b3c:	4770      	bx	lr
 8020b3e:	bf00      	nop
 8020b40:	2000bafc 	.word	0x2000bafc
 8020b44:	2000bb04 	.word	0x2000bb04
 8020b48:	2000bae0 	.word	0x2000bae0

08020b4c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8020b4c:	b508      	push	{r3, lr}
 8020b4e:	4b1c      	ldr	r3, [pc, #112]	; (8020bc0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8020b50:	6819      	ldr	r1, [r3, #0]
 8020b52:	8803      	ldrh	r3, [r0, #0]
 8020b54:	b1a9      	cbz	r1, 8020b82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 8020b56:	4a1b      	ldr	r2, [pc, #108]	; (8020bc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8020b58:	8812      	ldrh	r2, [r2, #0]
 8020b5a:	4293      	cmp	r3, r2
 8020b5c:	da05      	bge.n	8020b6a <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 8020b5e:	2214      	movs	r2, #20
 8020b60:	fb02 1303 	mla	r3, r2, r3, r1
 8020b64:	7cd8      	ldrb	r0, [r3, #19]
 8020b66:	0940      	lsrs	r0, r0, #5
 8020b68:	bd08      	pop	{r3, pc}
 8020b6a:	4917      	ldr	r1, [pc, #92]	; (8020bc8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 8020b6c:	8809      	ldrh	r1, [r1, #0]
 8020b6e:	4411      	add	r1, r2
 8020b70:	428b      	cmp	r3, r1
 8020b72:	da06      	bge.n	8020b82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 8020b74:	1a9b      	subs	r3, r3, r2
 8020b76:	4a15      	ldr	r2, [pc, #84]	; (8020bcc <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8020b78:	6812      	ldr	r2, [r2, #0]
 8020b7a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8020b7e:	7b18      	ldrb	r0, [r3, #12]
 8020b80:	bd08      	pop	{r3, pc}
 8020b82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020b86:	4293      	cmp	r3, r2
 8020b88:	d10c      	bne.n	8020ba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020b8a:	4b11      	ldr	r3, [pc, #68]	; (8020bd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8020b8c:	681b      	ldr	r3, [r3, #0]
 8020b8e:	6898      	ldr	r0, [r3, #8]
 8020b90:	6803      	ldr	r3, [r0, #0]
 8020b92:	6a1b      	ldr	r3, [r3, #32]
 8020b94:	4798      	blx	r3
 8020b96:	2804      	cmp	r0, #4
 8020b98:	d00e      	beq.n	8020bb8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 8020b9a:	d805      	bhi.n	8020ba8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8020b9c:	2801      	cmp	r0, #1
 8020b9e:	d00d      	beq.n	8020bbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 8020ba0:	2802      	cmp	r0, #2
 8020ba2:	d007      	beq.n	8020bb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 8020ba4:	2000      	movs	r0, #0
 8020ba6:	bd08      	pop	{r3, pc}
 8020ba8:	2810      	cmp	r0, #16
 8020baa:	d0fb      	beq.n	8020ba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020bac:	2818      	cmp	r0, #24
 8020bae:	d1f9      	bne.n	8020ba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020bb0:	2001      	movs	r0, #1
 8020bb2:	bd08      	pop	{r3, pc}
 8020bb4:	2005      	movs	r0, #5
 8020bb6:	bd08      	pop	{r3, pc}
 8020bb8:	2006      	movs	r0, #6
 8020bba:	bd08      	pop	{r3, pc}
 8020bbc:	2003      	movs	r0, #3
 8020bbe:	bd08      	pop	{r3, pc}
 8020bc0:	2000bb04 	.word	0x2000bb04
 8020bc4:	2000bafc 	.word	0x2000bafc
 8020bc8:	2000bb00 	.word	0x2000bb00
 8020bcc:	2000bae4 	.word	0x2000bae4
 8020bd0:	2000ba4c 	.word	0x2000ba4c

08020bd4 <_ZN8touchgfx8LCD16bppD1Ev>:
 8020bd4:	4770      	bx	lr

08020bd6 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8020bd6:	2010      	movs	r0, #16
 8020bd8:	4770      	bx	lr

08020bda <_ZN8touchgfx8LCD16bpp4initEv>:
 8020bda:	4770      	bx	lr

08020bdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 8020bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020be0:	b086      	sub	sp, #24
 8020be2:	6808      	ldr	r0, [r1, #0]
 8020be4:	6849      	ldr	r1, [r1, #4]
 8020be6:	4617      	mov	r7, r2
 8020be8:	ab04      	add	r3, sp, #16
 8020bea:	ac04      	add	r4, sp, #16
 8020bec:	c303      	stmia	r3!, {r0, r1}
 8020bee:	4620      	mov	r0, r4
 8020bf0:	f7fd fd06 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bf4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020bf8:	429f      	cmp	r7, r3
 8020bfa:	d109      	bne.n	8020c10 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 8020bfc:	4b33      	ldr	r3, [pc, #204]	; (8020ccc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 8020bfe:	781b      	ldrb	r3, [r3, #0]
 8020c00:	b933      	cbnz	r3, 8020c10 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 8020c02:	4b33      	ldr	r3, [pc, #204]	; (8020cd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 8020c04:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8020c08:	4a32      	ldr	r2, [pc, #200]	; (8020cd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 8020c0a:	4833      	ldr	r0, [pc, #204]	; (8020cd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 8020c0c:	f001 ff94 	bl	8022b38 <__assert_func>
 8020c10:	4e32      	ldr	r6, [pc, #200]	; (8020cdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 8020c12:	6830      	ldr	r0, [r6, #0]
 8020c14:	46b0      	mov	r8, r6
 8020c16:	6803      	ldr	r3, [r0, #0]
 8020c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c1a:	4798      	blx	r3
 8020c1c:	f010 0a01 	ands.w	sl, r0, #1
 8020c20:	d020      	beq.n	8020c64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 8020c22:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020c26:	429f      	cmp	r7, r3
 8020c28:	d108      	bne.n	8020c3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 8020c2a:	6830      	ldr	r0, [r6, #0]
 8020c2c:	6803      	ldr	r3, [r0, #0]
 8020c2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020c34:	4798      	blx	r3
 8020c36:	b006      	add	sp, #24
 8020c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c3c:	ad06      	add	r5, sp, #24
 8020c3e:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8020c42:	4628      	mov	r0, r5
 8020c44:	f7ff ff2a 	bl	8020a9c <_ZNK8touchgfx6Bitmap7getDataEv>
 8020c48:	6836      	ldr	r6, [r6, #0]
 8020c4a:	4680      	mov	r8, r0
 8020c4c:	4628      	mov	r0, r5
 8020c4e:	6833      	ldr	r3, [r6, #0]
 8020c50:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8020c52:	f7ff fe25 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020c56:	4643      	mov	r3, r8
 8020c58:	9000      	str	r0, [sp, #0]
 8020c5a:	4630      	mov	r0, r6
 8020c5c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020c60:	47b8      	blx	r7
 8020c62:	e7e8      	b.n	8020c36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 8020c64:	6830      	ldr	r0, [r6, #0]
 8020c66:	ad06      	add	r5, sp, #24
 8020c68:	4e1d      	ldr	r6, [pc, #116]	; (8020ce0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 8020c6a:	6803      	ldr	r3, [r0, #0]
 8020c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c6e:	4798      	blx	r3
 8020c70:	8834      	ldrh	r4, [r6, #0]
 8020c72:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8020c76:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020c7a:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8020c7e:	4657      	mov	r7, sl
 8020c80:	fb02 3404 	mla	r4, r2, r4, r3
 8020c84:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020c88:	4628      	mov	r0, r5
 8020c8a:	f7ff ff07 	bl	8020a9c <_ZNK8touchgfx6Bitmap7getDataEv>
 8020c8e:	4681      	mov	r9, r0
 8020c90:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020c94:	429f      	cmp	r7, r3
 8020c96:	da14      	bge.n	8020cc2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 8020c98:	f8d8 0000 	ldr.w	r0, [r8]
 8020c9c:	4649      	mov	r1, r9
 8020c9e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8020ca2:	3701      	adds	r7, #1
 8020ca4:	6802      	ldr	r2, [r0, #0]
 8020ca6:	005b      	lsls	r3, r3, #1
 8020ca8:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020cac:	4622      	mov	r2, r4
 8020cae:	47d0      	blx	sl
 8020cb0:	8833      	ldrh	r3, [r6, #0]
 8020cb2:	4628      	mov	r0, r5
 8020cb4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020cb8:	f7ff fdf2 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020cbc:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 8020cc0:	e7e6      	b.n	8020c90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 8020cc2:	4628      	mov	r0, r5
 8020cc4:	f7ff feea 	bl	8020a9c <_ZNK8touchgfx6Bitmap7getDataEv>
 8020cc8:	e7b5      	b.n	8020c36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 8020cca:	bf00      	nop
 8020ccc:	2000ba4b 	.word	0x2000ba4b
 8020cd0:	0802676f 	.word	0x0802676f
 8020cd4:	080268cc 	.word	0x080268cc
 8020cd8:	080267aa 	.word	0x080267aa
 8020cdc:	2000ba4c 	.word	0x2000ba4c
 8020ce0:	2000ba46 	.word	0x2000ba46

08020ce4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce8:	b08d      	sub	sp, #52	; 0x34
 8020cea:	4688      	mov	r8, r1
 8020cec:	4614      	mov	r4, r2
 8020cee:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020cf2:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8020cf6:	2f00      	cmp	r7, #0
 8020cf8:	d047      	beq.n	8020d8a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020cfa:	6810      	ldr	r0, [r2, #0]
 8020cfc:	ae08      	add	r6, sp, #32
 8020cfe:	6851      	ldr	r1, [r2, #4]
 8020d00:	c603      	stmia	r6!, {r0, r1}
 8020d02:	6818      	ldr	r0, [r3, #0]
 8020d04:	ae0a      	add	r6, sp, #40	; 0x28
 8020d06:	6859      	ldr	r1, [r3, #4]
 8020d08:	c603      	stmia	r6!, {r0, r1}
 8020d0a:	a808      	add	r0, sp, #32
 8020d0c:	f7fd fc78 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d10:	4621      	mov	r1, r4
 8020d12:	a80a      	add	r0, sp, #40	; 0x28
 8020d14:	f7fd fc5c 	bl	801e5d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d18:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020d1c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020d20:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020d24:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020d28:	fb14 2103 	smlabb	r1, r4, r3, r2
 8020d2c:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 8020d30:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020d34:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8020f50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 8020d38:	440a      	add	r2, r1
 8020d3a:	f8d8 0000 	ldr.w	r0, [r8]
 8020d3e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020d42:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020d46:	4413      	add	r3, r2
 8020d48:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020d4c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8020d50:	9306      	str	r3, [sp, #24]
 8020d52:	6803      	ldr	r3, [r0, #0]
 8020d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d56:	4798      	blx	r3
 8020d58:	2fff      	cmp	r7, #255	; 0xff
 8020d5a:	d019      	beq.n	8020d90 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020d5c:	f010 0f04 	tst.w	r0, #4
 8020d60:	d01a      	beq.n	8020d98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020d62:	f8d8 0000 	ldr.w	r0, [r8]
 8020d66:	b2b6      	uxth	r6, r6
 8020d68:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020d6c:	6801      	ldr	r1, [r0, #0]
 8020d6e:	9504      	str	r5, [sp, #16]
 8020d70:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020d74:	9703      	str	r7, [sp, #12]
 8020d76:	9502      	str	r5, [sp, #8]
 8020d78:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8020d7c:	9600      	str	r6, [sp, #0]
 8020d7e:	9501      	str	r5, [sp, #4]
 8020d80:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020d84:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 8020d86:	4621      	mov	r1, r4
 8020d88:	47a8      	blx	r5
 8020d8a:	b00d      	add	sp, #52	; 0x34
 8020d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d90:	b915      	cbnz	r5, 8020d98 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020d92:	f010 0f01 	tst.w	r0, #1
 8020d96:	e7e3      	b.n	8020d60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8020d98:	f8d8 0000 	ldr.w	r0, [r8]
 8020d9c:	6803      	ldr	r3, [r0, #0]
 8020d9e:	6a1b      	ldr	r3, [r3, #32]
 8020da0:	4798      	blx	r3
 8020da2:	4b69      	ldr	r3, [pc, #420]	; (8020f48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 8020da4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8020da8:	2fff      	cmp	r7, #255	; 0xff
 8020daa:	881d      	ldrh	r5, [r3, #0]
 8020dac:	4699      	mov	r9, r3
 8020dae:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020db2:	fb01 2505 	mla	r5, r1, r5, r2
 8020db6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020dba:	f000 80a6 	beq.w	8020f0a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 8020dbe:	ea44 0205 	orr.w	r2, r4, r5
 8020dc2:	f5c7 7080 	rsb	r0, r7, #256	; 0x100
 8020dc6:	f012 0f03 	tst.w	r2, #3
 8020dca:	d154      	bne.n	8020e76 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 8020dcc:	07f2      	lsls	r2, r6, #31
 8020dce:	d452      	bmi.n	8020e76 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 8020dd0:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
 8020dd4:	f01e 0e01 	ands.w	lr, lr, #1
 8020dd8:	d14d      	bne.n	8020e76 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 8020dda:	2202      	movs	r2, #2
 8020ddc:	9307      	str	r3, [sp, #28]
 8020dde:	fb96 f8f2 	sdiv	r8, r6, r2
 8020de2:	4693      	mov	fp, r2
 8020de4:	f1c8 0800 	rsb	r8, r8, #0
 8020de8:	9b06      	ldr	r3, [sp, #24]
 8020dea:	459e      	cmp	lr, r3
 8020dec:	f280 80a5 	bge.w	8020f3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020df0:	f04f 0900 	mov.w	r9, #0
 8020df4:	45b1      	cmp	r9, r6
 8020df6:	da2e      	bge.n	8020e56 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 8020df8:	6829      	ldr	r1, [r5, #0]
 8020dfa:	f109 0902 	add.w	r9, r9, #2
 8020dfe:	f854 2b04 	ldr.w	r2, [r4], #4
 8020e02:	0a0b      	lsrs	r3, r1, #8
 8020e04:	f001 1a1f 	and.w	sl, r1, #2031647	; 0x1f001f
 8020e08:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8020e0c:	f003 13f8 	and.w	r3, r3, #16253176	; 0xf800f8
 8020e10:	fb00 fa0a 	mul.w	sl, r0, sl
 8020e14:	f00c 1cf8 	and.w	ip, ip, #16253176	; 0xf800f8
 8020e18:	0949      	lsrs	r1, r1, #5
 8020e1a:	4343      	muls	r3, r0
 8020e1c:	f001 113f 	and.w	r1, r1, #4128831	; 0x3f003f
 8020e20:	fb07 3c0c 	mla	ip, r7, ip, r3
 8020e24:	f002 131f 	and.w	r3, r2, #2031647	; 0x1f001f
 8020e28:	0952      	lsrs	r2, r2, #5
 8020e2a:	4341      	muls	r1, r0
 8020e2c:	fb07 a303 	mla	r3, r7, r3, sl
 8020e30:	f00c 2cf8 	and.w	ip, ip, #4160813056	; 0xf800f800
 8020e34:	f002 123f 	and.w	r2, r2, #4128831	; 0x3f003f
 8020e38:	0a1b      	lsrs	r3, r3, #8
 8020e3a:	fb07 1202 	mla	r2, r7, r2, r1
 8020e3e:	f003 131f 	and.w	r3, r3, #2031647	; 0x1f001f
 8020e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8020e46:	4b41      	ldr	r3, [pc, #260]	; (8020f4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 8020e48:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 8020e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8020e50:	f845 2b04 	str.w	r2, [r5], #4
 8020e54:	e7ce      	b.n	8020df4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 8020e56:	9b07      	ldr	r3, [sp, #28]
 8020e58:	f10e 0e01 	add.w	lr, lr, #1
 8020e5c:	881b      	ldrh	r3, [r3, #0]
 8020e5e:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 8020e62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8020e66:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020e6a:	fb93 f3fb 	sdiv	r3, r3, fp
 8020e6e:	4443      	add	r3, r8
 8020e70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8020e74:	e7b8      	b.n	8020de8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 8020e76:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8020e7a:	f04f 0800 	mov.w	r8, #0
 8020e7e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8020f54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 8020e82:	005b      	lsls	r3, r3, #1
 8020e84:	9307      	str	r3, [sp, #28]
 8020e86:	9b06      	ldr	r3, [sp, #24]
 8020e88:	4598      	cmp	r8, r3
 8020e8a:	da56      	bge.n	8020f3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020e8c:	46aa      	mov	sl, r5
 8020e8e:	f04f 0c00 	mov.w	ip, #0
 8020e92:	45b4      	cmp	ip, r6
 8020e94:	da29      	bge.n	8020eea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 8020e96:	f8ba 1000 	ldrh.w	r1, [sl]
 8020e9a:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 8020e9e:	f10c 0c01 	add.w	ip, ip, #1
 8020ea2:	ea01 0309 	and.w	r3, r1, r9
 8020ea6:	f401 6bfc 	and.w	fp, r1, #2016	; 0x7e0
 8020eaa:	ea02 0e09 	and.w	lr, r2, r9
 8020eae:	f001 011f 	and.w	r1, r1, #31
 8020eb2:	4343      	muls	r3, r0
 8020eb4:	fb00 fb0b 	mul.w	fp, r0, fp
 8020eb8:	fb07 3e0e 	mla	lr, r7, lr, r3
 8020ebc:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8020ec0:	4341      	muls	r1, r0
 8020ec2:	f002 021f 	and.w	r2, r2, #31
 8020ec6:	fb07 b303 	mla	r3, r7, r3, fp
 8020eca:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 8020ece:	fb07 1202 	mla	r2, r7, r2, r1
 8020ed2:	121b      	asrs	r3, r3, #8
 8020ed4:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8020ed8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020edc:	ea4e 0e03 	orr.w	lr, lr, r3
 8020ee0:	ea4e 0e02 	orr.w	lr, lr, r2
 8020ee4:	f82a eb02 	strh.w	lr, [sl], #2
 8020ee8:	e7d3      	b.n	8020e92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 8020eea:	4b17      	ldr	r3, [pc, #92]	; (8020f48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 8020eec:	f108 0801 	add.w	r8, r8, #1
 8020ef0:	9a07      	ldr	r2, [sp, #28]
 8020ef2:	881b      	ldrh	r3, [r3, #0]
 8020ef4:	1b9b      	subs	r3, r3, r6
 8020ef6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020efa:	441d      	add	r5, r3
 8020efc:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020f00:	1b9b      	subs	r3, r3, r6
 8020f02:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020f06:	441c      	add	r4, r3
 8020f08:	e7bd      	b.n	8020e86 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 8020f0a:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8020f0e:	2700      	movs	r7, #0
 8020f10:	9b06      	ldr	r3, [sp, #24]
 8020f12:	429f      	cmp	r7, r3
 8020f14:	da11      	bge.n	8020f3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020f16:	f8d8 0000 	ldr.w	r0, [r8]
 8020f1a:	4622      	mov	r2, r4
 8020f1c:	4629      	mov	r1, r5
 8020f1e:	3701      	adds	r7, #1
 8020f20:	6803      	ldr	r3, [r0, #0]
 8020f22:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8020f24:	4653      	mov	r3, sl
 8020f26:	47b0      	blx	r6
 8020f28:	f8b9 3000 	ldrh.w	r3, [r9]
 8020f2c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020f30:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020f34:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020f38:	e7ea      	b.n	8020f10 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 8020f3a:	4b05      	ldr	r3, [pc, #20]	; (8020f50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 8020f3c:	6818      	ldr	r0, [r3, #0]
 8020f3e:	6803      	ldr	r3, [r0, #0]
 8020f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f42:	4798      	blx	r3
 8020f44:	e721      	b.n	8020d8a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020f46:	bf00      	nop
 8020f48:	2000ba46 	.word	0x2000ba46
 8020f4c:	07e007e0 	.word	0x07e007e0
 8020f50:	2000ba4c 	.word	0x2000ba4c
 8020f54:	fffff800 	.word	0xfffff800

08020f58 <_ZN8touchgfx8LCD16bppD0Ev>:
 8020f58:	b510      	push	{r4, lr}
 8020f5a:	4604      	mov	r4, r0
 8020f5c:	2104      	movs	r1, #4
 8020f5e:	f001 fdcf 	bl	8022b00 <_ZdlPvj>
 8020f62:	4620      	mov	r0, r4
 8020f64:	bd10      	pop	{r4, pc}
	...

08020f68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f6c:	4615      	mov	r5, r2
 8020f6e:	b08b      	sub	sp, #44	; 0x2c
 8020f70:	4699      	mov	r9, r3
 8020f72:	b13b      	cbz	r3, 8020f84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020f74:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020f78:	b123      	cbz	r3, 8020f84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020f7a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	f040 808c 	bne.w	802109c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8020f84:	b00b      	add	sp, #44	; 0x2c
 8020f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f8a:	f010 0f08 	tst.w	r0, #8
 8020f8e:	d011      	beq.n	8020fb4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 8020f90:	6818      	ldr	r0, [r3, #0]
 8020f92:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8020f96:	6801      	ldr	r1, [r0, #0]
 8020f98:	9401      	str	r4, [sp, #4]
 8020f9a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020f9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8020fa2:	9400      	str	r4, [sp, #0]
 8020fa4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020fa8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8020faa:	4629      	mov	r1, r5
 8020fac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020fb0:	47a0      	blx	r4
 8020fb2:	e7e7      	b.n	8020f84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020fb4:	6818      	ldr	r0, [r3, #0]
 8020fb6:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8020fba:	6803      	ldr	r3, [r0, #0]
 8020fbc:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 8020fc0:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8020fc4:	6a1b      	ldr	r3, [r3, #32]
 8020fc6:	4798      	blx	r3
 8020fc8:	4a3e      	ldr	r2, [pc, #248]	; (80210c4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 8020fca:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020fce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020fd2:	8816      	ldrh	r6, [r2, #0]
 8020fd4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020fd8:	fb06 1303 	mla	r3, r6, r3, r1
 8020fdc:	4616      	mov	r6, r2
 8020fde:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 8020fe2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020fe6:	d041      	beq.n	802106c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 8020fe8:	f405 4e78 	and.w	lr, r5, #63488	; 0xf800
 8020fec:	f405 67fc 	and.w	r7, r5, #2016	; 0x7e0
 8020ff0:	f005 051f 	and.w	r5, r5, #31
 8020ff4:	f5c9 7680 	rsb	r6, r9, #256	; 0x100
 8020ff8:	fb09 fe0e 	mul.w	lr, r9, lr
 8020ffc:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80210cc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 8021000:	fb09 f305 	mul.w	r3, r9, r5
 8021004:	2500      	movs	r5, #0
 8021006:	fb09 f707 	mul.w	r7, r9, r7
 802100a:	9306      	str	r3, [sp, #24]
 802100c:	004b      	lsls	r3, r1, #1
 802100e:	9207      	str	r2, [sp, #28]
 8021010:	9305      	str	r3, [sp, #20]
 8021012:	4545      	cmp	r5, r8
 8021014:	da3c      	bge.n	8021090 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 8021016:	4681      	mov	r9, r0
 8021018:	f04f 0c00 	mov.w	ip, #0
 802101c:	45a4      	cmp	ip, r4
 802101e:	da1c      	bge.n	802105a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 8021020:	f8b9 2000 	ldrh.w	r2, [r9]
 8021024:	f10c 0c01 	add.w	ip, ip, #1
 8021028:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 802102c:	ea02 010b 	and.w	r1, r2, fp
 8021030:	fb06 7303 	mla	r3, r6, r3, r7
 8021034:	fb06 e101 	mla	r1, r6, r1, lr
 8021038:	0a1b      	lsrs	r3, r3, #8
 802103a:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 802103e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021042:	430b      	orrs	r3, r1
 8021044:	f002 011f 	and.w	r1, r2, #31
 8021048:	9a06      	ldr	r2, [sp, #24]
 802104a:	fb06 2101 	mla	r1, r6, r1, r2
 802104e:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8021052:	430b      	orrs	r3, r1
 8021054:	f829 3b02 	strh.w	r3, [r9], #2
 8021058:	e7e0      	b.n	802101c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 802105a:	9b07      	ldr	r3, [sp, #28]
 802105c:	3501      	adds	r5, #1
 802105e:	9a05      	ldr	r2, [sp, #20]
 8021060:	881b      	ldrh	r3, [r3, #0]
 8021062:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 8021066:	4413      	add	r3, r2
 8021068:	4418      	add	r0, r3
 802106a:	e7d2      	b.n	8021012 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 802106c:	0049      	lsls	r1, r1, #1
 802106e:	2200      	movs	r2, #0
 8021070:	4542      	cmp	r2, r8
 8021072:	da0d      	bge.n	8021090 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 8021074:	2300      	movs	r3, #0
 8021076:	42a3      	cmp	r3, r4
 8021078:	da03      	bge.n	8021082 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 802107a:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 802107e:	3301      	adds	r3, #1
 8021080:	e7f9      	b.n	8021076 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 8021082:	8833      	ldrh	r3, [r6, #0]
 8021084:	3201      	adds	r2, #1
 8021086:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 802108a:	440b      	add	r3, r1
 802108c:	4418      	add	r0, r3
 802108e:	e7ef      	b.n	8021070 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 8021090:	4b0d      	ldr	r3, [pc, #52]	; (80210c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8021092:	6818      	ldr	r0, [r3, #0]
 8021094:	6803      	ldr	r3, [r0, #0]
 8021096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021098:	4798      	blx	r3
 802109a:	e773      	b.n	8020f84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 802109c:	6808      	ldr	r0, [r1, #0]
 802109e:	ab08      	add	r3, sp, #32
 80210a0:	6849      	ldr	r1, [r1, #4]
 80210a2:	4c09      	ldr	r4, [pc, #36]	; (80210c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 80210a4:	c303      	stmia	r3!, {r0, r1}
 80210a6:	a808      	add	r0, sp, #32
 80210a8:	f7fd faaa 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210ac:	6820      	ldr	r0, [r4, #0]
 80210ae:	6803      	ldr	r3, [r0, #0]
 80210b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210b2:	4798      	blx	r3
 80210b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80210b8:	4623      	mov	r3, r4
 80210ba:	f47f af66 	bne.w	8020f8a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 80210be:	f010 0f02 	tst.w	r0, #2
 80210c2:	e764      	b.n	8020f8e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 80210c4:	2000ba46 	.word	0x2000ba46
 80210c8:	2000ba4c 	.word	0x2000ba4c
 80210cc:	fffff800 	.word	0xfffff800

080210d0 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 80210d0:	ee07 0a90 	vmov	s15, r0
 80210d4:	ee70 0ac0 	vsub.f32	s1, s1, s0
 80210d8:	ee71 1ac1 	vsub.f32	s3, s3, s2
 80210dc:	eddf 6a08 	vldr	s13, [pc, #32]	; 8021100 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 80210e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80210e4:	eea0 0a82 	vfma.f32	s0, s1, s4
 80210e8:	eea1 1a82 	vfma.f32	s2, s3, s4
 80210ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80210f0:	ee31 1a40 	vsub.f32	s2, s2, s0
 80210f4:	eea2 0a81 	vfma.f32	s0, s5, s2
 80210f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80210fc:	4770      	bx	lr
 80210fe:	bf00      	nop
 8021100:	437f0000 	.word	0x437f0000

08021104 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8021104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021108:	ed2d 8b0e 	vpush	{d8-d14}
 802110c:	b095      	sub	sp, #84	; 0x54
 802110e:	461e      	mov	r6, r3
 8021110:	2700      	movs	r7, #0
 8021112:	4690      	mov	r8, r2
 8021114:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 8021118:	a812      	add	r0, sp, #72	; 0x48
 802111a:	468a      	mov	sl, r1
 802111c:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 802111e:	9311      	str	r3, [sp, #68]	; 0x44
 8021120:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8021124:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 8021128:	9301      	str	r3, [sp, #4]
 802112a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802112c:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 8021130:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021134:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8021138:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 802113c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8021140:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 8021144:	f7fd fa5c 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021148:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802114a:	6835      	ldr	r5, [r6, #0]
 802114c:	6818      	ldr	r0, [r3, #0]
 802114e:	f9b4 3000 	ldrsh.w	r3, [r4]
 8021152:	f9b9 e000 	ldrsh.w	lr, [r9]
 8021156:	1b40      	subs	r0, r0, r5
 8021158:	18e9      	adds	r1, r5, r3
 802115a:	ebae 0c01 	sub.w	ip, lr, r1
 802115e:	4560      	cmp	r0, ip
 8021160:	f340 86a2 	ble.w	8021ea8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8021164:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 8021168:	44f1      	add	r9, lr
 802116a:	fa0f f989 	sxth.w	r9, r9
 802116e:	4549      	cmp	r1, r9
 8021170:	f300 869a 	bgt.w	8021ea8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8021174:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8021178:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 802117c:	6972      	ldr	r2, [r6, #20]
 802117e:	ed96 6a07 	vldr	s12, [r6, #28]
 8021182:	4422      	add	r2, r4
 8021184:	f8da 4004 	ldr.w	r4, [sl, #4]
 8021188:	ed98 ba09 	vldr	s22, [r8, #36]	; 0x24
 802118c:	fb04 5402 	mla	r4, r4, r2, r5
 8021190:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	; 0xc8
 8021194:	edd8 ba0b 	vldr	s23, [r8, #44]	; 0x2c
 8021198:	4282      	cmp	r2, r0
 802119a:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 802119e:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 80211a2:	441c      	add	r4, r3
 80211a4:	bfa8      	it	ge
 80211a6:	4602      	movge	r2, r0
 80211a8:	f8da b000 	ldr.w	fp, [sl]
 80211ac:	458e      	cmp	lr, r1
 80211ae:	ee06 2a90 	vmov	s13, r2
 80211b2:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 80211b6:	9208      	str	r2, [sp, #32]
 80211b8:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 80211bc:	edd8 6a0d 	vldr	s13, [r8, #52]	; 0x34
 80211c0:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80211c4:	ee69 ba2b 	vmul.f32	s23, s18, s23
 80211c8:	ee29 9a26 	vmul.f32	s18, s18, s13
 80211cc:	eecc 6a06 	vdiv.f32	s13, s24, s12
 80211d0:	ee37 aaab 	vadd.f32	s20, s15, s23
 80211d4:	ee77 aa09 	vadd.f32	s21, s14, s18
 80211d8:	ee76 9a0b 	vadd.f32	s19, s12, s22
 80211dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80211e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80211e4:	dc01      	bgt.n	80211ea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 80211e6:	970a      	str	r7, [sp, #40]	; 0x28
 80211e8:	e029      	b.n	802123e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 80211ea:	9a08      	ldr	r2, [sp, #32]
 80211ec:	fb9c f1f2 	sdiv	r1, ip, r2
 80211f0:	ee06 1a90 	vmov	s13, r1
 80211f4:	434a      	muls	r2, r1
 80211f6:	2900      	cmp	r1, #0
 80211f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80211fc:	ebac 0602 	sub.w	r6, ip, r2
 8021200:	960a      	str	r6, [sp, #40]	; 0x28
 8021202:	eeeb 9a26 	vfma.f32	s19, s22, s13
 8021206:	eeab aaa6 	vfma.f32	s20, s23, s13
 802120a:	eee9 aa26 	vfma.f32	s21, s18, s13
 802120e:	dd12      	ble.n	8021236 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 8021210:	ee79 7acb 	vsub.f32	s15, s19, s22
 8021214:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 8021218:	eef5 7a40 	vcmp.f32	s15, #0.0
 802121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021220:	bf14      	ite	ne
 8021222:	eecc 6a27 	vdivne.f32	s13, s24, s15
 8021226:	eef0 6a4c 	vmoveq.f32	s13, s24
 802122a:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 802122e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021232:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021236:	1a80      	subs	r0, r0, r2
 8021238:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 802123c:	4415      	add	r5, r2
 802123e:	18ea      	adds	r2, r5, r3
 8021240:	4402      	add	r2, r0
 8021242:	4591      	cmp	r9, r2
 8021244:	bfbc      	itt	lt
 8021246:	eba9 0003 	sublt.w	r0, r9, r3
 802124a:	1b40      	sublt	r0, r0, r5
 802124c:	2800      	cmp	r0, #0
 802124e:	f340 862b 	ble.w	8021ea8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8021252:	9b08      	ldr	r3, [sp, #32]
 8021254:	9a08      	ldr	r2, [sp, #32]
 8021256:	fb90 f3f3 	sdiv	r3, r0, r3
 802125a:	9309      	str	r3, [sp, #36]	; 0x24
 802125c:	fb02 0313 	mls	r3, r2, r3, r0
 8021260:	930c      	str	r3, [sp, #48]	; 0x30
 8021262:	b91b      	cbnz	r3, 802126c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 8021264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021266:	920c      	str	r2, [sp, #48]	; 0x30
 8021268:	3b01      	subs	r3, #1
 802126a:	9309      	str	r3, [sp, #36]	; 0x24
 802126c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802126e:	eddf ca40 	vldr	s25, [pc, #256]	; 8021370 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 8021272:	681b      	ldr	r3, [r3, #0]
 8021274:	9304      	str	r3, [sp, #16]
 8021276:	9b01      	ldr	r3, [sp, #4]
 8021278:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802127c:	9305      	str	r3, [sp, #20]
 802127e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021280:	2b00      	cmp	r3, #0
 8021282:	dc03      	bgt.n	802128c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 8021284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021286:	2b00      	cmp	r3, #0
 8021288:	f340 860e 	ble.w	8021ea8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 802128c:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 8021290:	9b08      	ldr	r3, [sp, #32]
 8021292:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021294:	eef0 6a67 	vmov.f32	s13, s15
 8021298:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802129c:	ee16 ba90 	vmov	fp, s13
 80212a0:	eef0 6a47 	vmov.f32	s13, s14
 80212a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212a8:	ee6a 8a08 	vmul.f32	s17, s20, s16
 80212ac:	ee2a 8a88 	vmul.f32	s16, s21, s16
 80212b0:	ee16 5a90 	vmov	r5, s13
 80212b4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80212b8:	ee38 7a47 	vsub.f32	s14, s16, s14
 80212bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80212c0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80212c4:	ee17 2a90 	vmov	r2, s15
 80212c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80212cc:	ee17 2a10 	vmov	r2, s14
 80212d0:	9306      	str	r3, [sp, #24]
 80212d2:	9b08      	ldr	r3, [sp, #32]
 80212d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80212d8:	9a08      	ldr	r2, [sp, #32]
 80212da:	9307      	str	r3, [sp, #28]
 80212dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212de:	2900      	cmp	r1, #0
 80212e0:	bfc8      	it	gt
 80212e2:	4613      	movgt	r3, r2
 80212e4:	9302      	str	r3, [sp, #8]
 80212e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	dd0d      	ble.n	8021308 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 80212ec:	9a06      	ldr	r2, [sp, #24]
 80212ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80212f2:	fb02 bb03 	mla	fp, r2, r3, fp
 80212f6:	9a07      	ldr	r2, [sp, #28]
 80212f8:	fb02 5503 	mla	r5, r2, r3, r5
 80212fc:	9b02      	ldr	r3, [sp, #8]
 80212fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021300:	1a9b      	subs	r3, r3, r2
 8021302:	9302      	str	r3, [sp, #8]
 8021304:	2300      	movs	r3, #0
 8021306:	930a      	str	r3, [sp, #40]	; 0x28
 8021308:	ea5f 432b 	movs.w	r3, fp, asr #16
 802130c:	d42e      	bmi.n	802136c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 802130e:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 8021312:	4283      	cmp	r3, r0
 8021314:	da2a      	bge.n	802136c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8021316:	142b      	asrs	r3, r5, #16
 8021318:	d428      	bmi.n	802136c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 802131a:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 802131e:	428b      	cmp	r3, r1
 8021320:	da24      	bge.n	802136c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8021322:	9b02      	ldr	r3, [sp, #8]
 8021324:	9a06      	ldr	r2, [sp, #24]
 8021326:	3b01      	subs	r3, #1
 8021328:	fb03 b202 	mla	r2, r3, r2, fp
 802132c:	1412      	asrs	r2, r2, #16
 802132e:	d41d      	bmi.n	802136c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8021330:	4282      	cmp	r2, r0
 8021332:	da1b      	bge.n	802136c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8021334:	9a07      	ldr	r2, [sp, #28]
 8021336:	fb03 5302 	mla	r3, r3, r2, r5
 802133a:	141b      	asrs	r3, r3, #16
 802133c:	d416      	bmi.n	802136c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 802133e:	428b      	cmp	r3, r1
 8021340:	bfb4      	ite	lt
 8021342:	2300      	movlt	r3, #0
 8021344:	2301      	movge	r3, #1
 8021346:	9303      	str	r3, [sp, #12]
 8021348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802134a:	2b0b      	cmp	r3, #11
 802134c:	f200 82d7 	bhi.w	80218fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 8021350:	e8df f013 	tbh	[pc, r3, lsl #1]
 8021354:	03430531 	.word	0x03430531
 8021358:	02ca02e8 	.word	0x02ca02e8
 802135c:	02d502d5 	.word	0x02d502d5
 8021360:	02d502d5 	.word	0x02d502d5
 8021364:	01c5026b 	.word	0x01c5026b
 8021368:	00100160 	.word	0x00100160
 802136c:	2301      	movs	r3, #1
 802136e:	e7ea      	b.n	8021346 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 8021370:	3d800000 	.word	0x3d800000
 8021374:	f04f 0a00 	mov.w	sl, #0
 8021378:	9b02      	ldr	r3, [sp, #8]
 802137a:	4553      	cmp	r3, sl
 802137c:	f340 82bb 	ble.w	80218f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021380:	9a03      	ldr	r2, [sp, #12]
 8021382:	ea4f 412b 	mov.w	r1, fp, asr #16
 8021386:	142b      	asrs	r3, r5, #16
 8021388:	b17a      	cbz	r2, 80213aa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 802138a:	2900      	cmp	r1, #0
 802138c:	f2c0 813b 	blt.w	8021606 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8021390:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021394:	4291      	cmp	r1, r2
 8021396:	f280 8136 	bge.w	8021606 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 802139a:	2b00      	cmp	r3, #0
 802139c:	f2c0 8133 	blt.w	8021606 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 80213a0:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 80213a4:	4293      	cmp	r3, r2
 80213a6:	f280 812e 	bge.w	8021606 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 80213aa:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80213ae:	9804      	ldr	r0, [sp, #16]
 80213b0:	fb03 1102 	mla	r1, r3, r2, r1
 80213b4:	9b04      	ldr	r3, [sp, #16]
 80213b6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80213ba:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 80213be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80213c2:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 80213c6:	6859      	ldr	r1, [r3, #4]
 80213c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80213cc:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80213d0:	685a      	ldr	r2, [r3, #4]
 80213d2:	0e3b      	lsrs	r3, r7, #24
 80213d4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80213d8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80213dc:	435e      	muls	r6, r3
 80213de:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80213e2:	435f      	muls	r7, r3
 80213e4:	ee06 ea90 	vmov	s13, lr
 80213e8:	0a36      	lsrs	r6, r6, #8
 80213ea:	ee07 3a90 	vmov	s15, r3
 80213ee:	0a3f      	lsrs	r7, r7, #8
 80213f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80213f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80213f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80213fc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021400:	433e      	orrs	r6, r7
 8021402:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8021406:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802140a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 802140e:	fb0e f707 	mul.w	r7, lr, r7
 8021412:	fb0e f101 	mul.w	r1, lr, r1
 8021416:	0a3f      	lsrs	r7, r7, #8
 8021418:	960b      	str	r6, [sp, #44]	; 0x2c
 802141a:	0a09      	lsrs	r1, r1, #8
 802141c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021420:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021424:	430f      	orrs	r7, r1
 8021426:	0e01      	lsrs	r1, r0, #24
 8021428:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802142c:	fb01 f808 	mul.w	r8, r1, r8
 8021430:	ee07 1a10 	vmov	s14, r1
 8021434:	4348      	muls	r0, r1
 8021436:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802143a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802143e:	0a00      	lsrs	r0, r0, #8
 8021440:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8021444:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021448:	ea48 0800 	orr.w	r8, r8, r0
 802144c:	0e10      	lsrs	r0, r2, #24
 802144e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021452:	fb00 f909 	mul.w	r9, r0, r9
 8021456:	4342      	muls	r2, r0
 8021458:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802145c:	0a12      	lsrs	r2, r2, #8
 802145e:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8021462:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021466:	ea49 0902 	orr.w	r9, r9, r2
 802146a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802146e:	ee0d 2a10 	vmov	s26, r2
 8021472:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021476:	ea4f 4319 	mov.w	r3, r9, lsr #16
 802147a:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 802147e:	ee0d 2a90 	vmov	s27, r2
 8021482:	ee01 3a90 	vmov	s3, r3
 8021486:	ea4f 4318 	mov.w	r3, r8, lsr #16
 802148a:	eef8 daed 	vcvt.f32.s32	s27, s27
 802148e:	ee2d da2c 	vmul.f32	s26, s26, s25
 8021492:	ee01 3a10 	vmov	s2, r3
 8021496:	0c3b      	lsrs	r3, r7, #16
 8021498:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802149c:	ee6d daac 	vmul.f32	s27, s27, s25
 80214a0:	eeed 7a26 	vfma.f32	s15, s26, s13
 80214a4:	ee06 0a90 	vmov	s13, r0
 80214a8:	ee00 3a90 	vmov	s1, r3
 80214ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80214ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80214b2:	0c1b      	lsrs	r3, r3, #16
 80214b4:	eef0 2a6d 	vmov.f32	s5, s27
 80214b8:	eeb0 2a4d 	vmov.f32	s4, s26
 80214bc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80214c0:	ee00 3a10 	vmov	s0, r3
 80214c4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80214c8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80214cc:	eead 7a26 	vfma.f32	s14, s26, s13
 80214d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80214d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80214d8:	eeed 7a87 	vfma.f32	s15, s27, s14
 80214dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80214e0:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80214e4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80214e8:	4630      	mov	r0, r6
 80214ea:	f7ff fdf1 	bl	80210d0 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 80214ee:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80214f2:	eeb0 ea40 	vmov.f32	s28, s0
 80214f6:	4630      	mov	r0, r6
 80214f8:	ee01 3a90 	vmov	s3, r3
 80214fc:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8021500:	eef0 2a6d 	vmov.f32	s5, s27
 8021504:	ee01 3a10 	vmov	s2, r3
 8021508:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802150c:	eeb0 2a4d 	vmov.f32	s4, s26
 8021510:	ee00 3a90 	vmov	s1, r3
 8021514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021516:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802151a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802151e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021522:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021526:	ee00 3a10 	vmov	s0, r3
 802152a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802152e:	f7ff fdcf 	bl	80210d0 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021532:	eef0 ea40 	vmov.f32	s29, s0
 8021536:	fa5f f389 	uxtb.w	r3, r9
 802153a:	4630      	mov	r0, r6
 802153c:	eef0 2a6d 	vmov.f32	s5, s27
 8021540:	ee01 3a90 	vmov	s3, r3
 8021544:	fa5f f388 	uxtb.w	r3, r8
 8021548:	eeb0 2a4d 	vmov.f32	s4, s26
 802154c:	ee01 3a10 	vmov	s2, r3
 8021550:	b2fb      	uxtb	r3, r7
 8021552:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021556:	ee00 3a90 	vmov	s1, r3
 802155a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 802155e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021562:	ee00 3a10 	vmov	s0, r3
 8021566:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 802156a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802156e:	f7ff fdaf 	bl	80210d0 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021572:	2e00      	cmp	r6, #0
 8021574:	d047      	beq.n	8021606 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8021576:	eefc 7aee 	vcvt.u32.f32	s15, s29
 802157a:	2eff      	cmp	r6, #255	; 0xff
 802157c:	ee17 2a90 	vmov	r2, s15
 8021580:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8021584:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8021588:	ee17 3a90 	vmov	r3, s15
 802158c:	eefc 7ace 	vcvt.u32.f32	s15, s28
 8021590:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8021594:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 8021598:	ee17 3a90 	vmov	r3, s15
 802159c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80215a0:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 80215a4:	d102      	bne.n	80215ac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 80215a6:	9a01      	ldr	r2, [sp, #4]
 80215a8:	2aff      	cmp	r2, #255	; 0xff
 80215aa:	d02a      	beq.n	8021602 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 80215ac:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 80215b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80215b4:	f400 67fc 	and.w	r7, r0, #2016	; 0x7e0
 80215b8:	fb12 fe06 	smulbb	lr, r2, r6
 80215bc:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 80215c0:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 80215c4:	f000 001f 	and.w	r0, r0, #31
 80215c8:	f5ce 3180 	rsb	r1, lr, #65536	; 0x10000
 80215cc:	f022 0207 	bic.w	r2, r2, #7
 80215d0:	f026 0607 	bic.w	r6, r6, #7
 80215d4:	434a      	muls	r2, r1
 80215d6:	434f      	muls	r7, r1
 80215d8:	fb0e 2606 	mla	r6, lr, r6, r2
 80215dc:	4ad0      	ldr	r2, [pc, #832]	; (8021920 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80215de:	4348      	muls	r0, r1
 80215e0:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 80215e4:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80215e8:	f003 031f 	and.w	r3, r3, #31
 80215ec:	fb0e 7202 	mla	r2, lr, r2, r7
 80215f0:	fb0e 0303 	mla	r3, lr, r3, r0
 80215f4:	0c12      	lsrs	r2, r2, #16
 80215f6:	f3c3 4304 	ubfx	r3, r3, #16, #5
 80215fa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215fe:	4316      	orrs	r6, r2
 8021600:	4333      	orrs	r3, r6
 8021602:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 8021606:	9b06      	ldr	r3, [sp, #24]
 8021608:	f10a 0a01 	add.w	sl, sl, #1
 802160c:	449b      	add	fp, r3
 802160e:	9b07      	ldr	r3, [sp, #28]
 8021610:	441d      	add	r5, r3
 8021612:	e6b1      	b.n	8021378 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 8021614:	2000      	movs	r0, #0
 8021616:	9b02      	ldr	r3, [sp, #8]
 8021618:	4283      	cmp	r3, r0
 802161a:	f340 816c 	ble.w	80218f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 802161e:	9b03      	ldr	r3, [sp, #12]
 8021620:	ea4f 422b 	mov.w	r2, fp, asr #16
 8021624:	1429      	asrs	r1, r5, #16
 8021626:	b15b      	cbz	r3, 8021640 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 8021628:	2a00      	cmp	r2, #0
 802162a:	db52      	blt.n	80216d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 802162c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021630:	429a      	cmp	r2, r3
 8021632:	da4e      	bge.n	80216d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021634:	2900      	cmp	r1, #0
 8021636:	db4c      	blt.n	80216d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021638:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 802163c:	4299      	cmp	r1, r3
 802163e:	da48      	bge.n	80216d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021640:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021644:	fb01 2303 	mla	r3, r1, r3, r2
 8021648:	9a04      	ldr	r2, [sp, #16]
 802164a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802164e:	0e31      	lsrs	r1, r6, #24
 8021650:	d03f      	beq.n	80216d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021652:	0972      	lsrs	r2, r6, #5
 8021654:	4bb2      	ldr	r3, [pc, #712]	; (8021920 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8021656:	29ff      	cmp	r1, #255	; 0xff
 8021658:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 802165c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021660:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021664:	ea43 0302 	orr.w	r3, r3, r2
 8021668:	ea43 0306 	orr.w	r3, r3, r6
 802166c:	b29b      	uxth	r3, r3
 802166e:	d102      	bne.n	8021676 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 8021670:	9a01      	ldr	r2, [sp, #4]
 8021672:	2aff      	cmp	r2, #255	; 0xff
 8021674:	d02b      	beq.n	80216ce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 8021676:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 802167a:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 802167e:	9a01      	ldr	r2, [sp, #4]
 8021680:	f02e 0e07 	bic.w	lr, lr, #7
 8021684:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 8021688:	4351      	muls	r1, r2
 802168a:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 802168e:	f007 071f 	and.w	r7, r7, #31
 8021692:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 8021696:	f022 0207 	bic.w	r2, r2, #7
 802169a:	4372      	muls	r2, r6
 802169c:	fb06 fc0c 	mul.w	ip, r6, ip
 80216a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80216a4:	4a9e      	ldr	r2, [pc, #632]	; (8021920 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80216a6:	4377      	muls	r7, r6
 80216a8:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 80216ac:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80216b0:	f003 031f 	and.w	r3, r3, #31
 80216b4:	fb01 c202 	mla	r2, r1, r2, ip
 80216b8:	fb01 7303 	mla	r3, r1, r3, r7
 80216bc:	0c12      	lsrs	r2, r2, #16
 80216be:	f3c3 4304 	ubfx	r3, r3, #16, #5
 80216c2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80216c6:	ea4e 0e02 	orr.w	lr, lr, r2
 80216ca:	ea4e 0303 	orr.w	r3, lr, r3
 80216ce:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 80216d2:	9b06      	ldr	r3, [sp, #24]
 80216d4:	3001      	adds	r0, #1
 80216d6:	449b      	add	fp, r3
 80216d8:	9b07      	ldr	r3, [sp, #28]
 80216da:	441d      	add	r5, r3
 80216dc:	e79b      	b.n	8021616 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 80216de:	f04f 0e00 	mov.w	lr, #0
 80216e2:	9b02      	ldr	r3, [sp, #8]
 80216e4:	4573      	cmp	r3, lr
 80216e6:	f340 8106 	ble.w	80218f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80216ea:	9903      	ldr	r1, [sp, #12]
 80216ec:	ea4f 422b 	mov.w	r2, fp, asr #16
 80216f0:	142b      	asrs	r3, r5, #16
 80216f2:	b179      	cbz	r1, 8021714 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 80216f4:	2a00      	cmp	r2, #0
 80216f6:	f2c0 8091 	blt.w	802181c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 80216fa:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 80216fe:	428a      	cmp	r2, r1
 8021700:	f280 808c 	bge.w	802181c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8021704:	2b00      	cmp	r3, #0
 8021706:	f2c0 8089 	blt.w	802181c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 802170a:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 802170e:	428b      	cmp	r3, r1
 8021710:	f280 8084 	bge.w	802181c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8021714:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021718:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 802171c:	9804      	ldr	r0, [sp, #16]
 802171e:	fb03 2301 	mla	r3, r3, r1, r2
 8021722:	9a04      	ldr	r2, [sp, #16]
 8021724:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021728:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 802172c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8021730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021734:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8021738:	f3c5 2107 	ubfx	r1, r5, #8, #8
 802173c:	6850      	ldr	r0, [r2, #4]
 802173e:	fb01 f70a 	mul.w	r7, r1, sl
 8021742:	0a3f      	lsrs	r7, r7, #8
 8021744:	ebaa 0607 	sub.w	r6, sl, r7
 8021748:	eba1 0907 	sub.w	r9, r1, r7
 802174c:	f5ca 7a80 	rsb	sl, sl, #256	; 0x100
 8021750:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021754:	fb01 f10a 	mul.w	r1, r1, sl
 8021758:	f00c 1aff 	and.w	sl, ip, #16711935	; 0xff00ff
 802175c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021760:	0a0a      	lsrs	r2, r1, #8
 8021762:	f008 11ff 	and.w	r1, r8, #16711935	; 0xff00ff
 8021766:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802176a:	4371      	muls	r1, r6
 802176c:	fb06 f808 	mul.w	r8, r6, r8
 8021770:	fb02 110a 	mla	r1, r2, sl, r1
 8021774:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8021778:	fb02 8c0c 	mla	ip, r2, ip, r8
 802177c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021780:	fb07 110a 	mla	r1, r7, sl, r1
 8021784:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021788:	fb07 cc00 	mla	ip, r7, r0, ip
 802178c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021790:	fb09 110a 	mla	r1, r9, sl, r1
 8021794:	fb09 cc03 	mla	ip, r9, r3, ip
 8021798:	4b61      	ldr	r3, [pc, #388]	; (8021920 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 802179a:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 802179e:	f40c 0a7f 	and.w	sl, ip, #16711680	; 0xff0000
 80217a2:	ea41 0a0a 	orr.w	sl, r1, sl
 80217a6:	ea4f 315a 	mov.w	r1, sl, lsr #13
 80217aa:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 80217ae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80217b2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80217b6:	4319      	orrs	r1, r3
 80217b8:	9b01      	ldr	r3, [sp, #4]
 80217ba:	2bff      	cmp	r3, #255	; 0xff
 80217bc:	ea41 010a 	orr.w	r1, r1, sl
 80217c0:	d02a      	beq.n	8021818 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 80217c2:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 80217c6:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 80217ca:	9e05      	ldr	r6, [sp, #20]
 80217cc:	f422 60ff 	bic.w	r0, r2, #2040	; 0x7f8
 80217d0:	f023 0307 	bic.w	r3, r3, #7
 80217d4:	9f05      	ldr	r7, [sp, #20]
 80217d6:	f020 0007 	bic.w	r0, r0, #7
 80217da:	4370      	muls	r0, r6
 80217dc:	9e01      	ldr	r6, [sp, #4]
 80217de:	fb06 0303 	mla	r3, r6, r3, r0
 80217e2:	484f      	ldr	r0, [pc, #316]	; (8021920 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80217e4:	f402 66fc 	and.w	r6, r2, #2016	; 0x7e0
 80217e8:	f002 021f 	and.w	r2, r2, #31
 80217ec:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 80217f0:	f401 60fc 	and.w	r0, r1, #2016	; 0x7e0
 80217f4:	437e      	muls	r6, r7
 80217f6:	9f01      	ldr	r7, [sp, #4]
 80217f8:	f001 011f 	and.w	r1, r1, #31
 80217fc:	fb07 6000 	mla	r0, r7, r0, r6
 8021800:	0a00      	lsrs	r0, r0, #8
 8021802:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021806:	4303      	orrs	r3, r0
 8021808:	9805      	ldr	r0, [sp, #20]
 802180a:	4342      	muls	r2, r0
 802180c:	b29b      	uxth	r3, r3
 802180e:	fb07 2101 	mla	r1, r7, r1, r2
 8021812:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8021816:	4319      	orrs	r1, r3
 8021818:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 802181c:	9b06      	ldr	r3, [sp, #24]
 802181e:	f10e 0e01 	add.w	lr, lr, #1
 8021822:	449b      	add	fp, r3
 8021824:	9b07      	ldr	r3, [sp, #28]
 8021826:	441d      	add	r5, r3
 8021828:	e75b      	b.n	80216e2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 802182a:	2600      	movs	r6, #0
 802182c:	9b02      	ldr	r3, [sp, #8]
 802182e:	42b3      	cmp	r3, r6
 8021830:	dd61      	ble.n	80218f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021832:	9b03      	ldr	r3, [sp, #12]
 8021834:	ea4f 422b 	mov.w	r2, fp, asr #16
 8021838:	1429      	asrs	r1, r5, #16
 802183a:	b15b      	cbz	r3, 8021854 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 802183c:	2a00      	cmp	r2, #0
 802183e:	db4d      	blt.n	80218dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021840:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021844:	429a      	cmp	r2, r3
 8021846:	da49      	bge.n	80218dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021848:	2900      	cmp	r1, #0
 802184a:	db47      	blt.n	80218dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 802184c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021850:	4299      	cmp	r1, r3
 8021852:	da43      	bge.n	80218dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021854:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021858:	fb01 2303 	mla	r3, r1, r3, r2
 802185c:	9a04      	ldr	r2, [sp, #16]
 802185e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8021862:	4b2f      	ldr	r3, [pc, #188]	; (8021920 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8021864:	094a      	lsrs	r2, r1, #5
 8021866:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 802186a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802186e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021872:	4313      	orrs	r3, r2
 8021874:	9a01      	ldr	r2, [sp, #4]
 8021876:	430b      	orrs	r3, r1
 8021878:	2aff      	cmp	r2, #255	; 0xff
 802187a:	b29b      	uxth	r3, r3
 802187c:	d02c      	beq.n	80218d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 802187e:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 8021882:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8021886:	9f05      	ldr	r7, [sp, #20]
 8021888:	f421 60ff 	bic.w	r0, r1, #2040	; 0x7f8
 802188c:	f022 0207 	bic.w	r2, r2, #7
 8021890:	f020 0007 	bic.w	r0, r0, #7
 8021894:	4378      	muls	r0, r7
 8021896:	9f01      	ldr	r7, [sp, #4]
 8021898:	fb07 0202 	mla	r2, r7, r2, r0
 802189c:	4820      	ldr	r0, [pc, #128]	; (8021920 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 802189e:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 80218a2:	f001 011f 	and.w	r1, r1, #31
 80218a6:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 80218aa:	9a05      	ldr	r2, [sp, #20]
 80218ac:	f403 60fc 	and.w	r0, r3, #2016	; 0x7e0
 80218b0:	f003 031f 	and.w	r3, r3, #31
 80218b4:	4357      	muls	r7, r2
 80218b6:	9a01      	ldr	r2, [sp, #4]
 80218b8:	fb02 7000 	mla	r0, r2, r0, r7
 80218bc:	0a00      	lsrs	r0, r0, #8
 80218be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80218c2:	ea4e 0200 	orr.w	r2, lr, r0
 80218c6:	9805      	ldr	r0, [sp, #20]
 80218c8:	4341      	muls	r1, r0
 80218ca:	9801      	ldr	r0, [sp, #4]
 80218cc:	b292      	uxth	r2, r2
 80218ce:	fb00 1303 	mla	r3, r0, r3, r1
 80218d2:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80218d6:	4313      	orrs	r3, r2
 80218d8:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 80218dc:	9b06      	ldr	r3, [sp, #24]
 80218de:	3601      	adds	r6, #1
 80218e0:	449b      	add	fp, r3
 80218e2:	9b07      	ldr	r3, [sp, #28]
 80218e4:	441d      	add	r5, r3
 80218e6:	e7a1      	b.n	802182c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 80218e8:	2300      	movs	r3, #0
 80218ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80218ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80218ee:	9b02      	ldr	r3, [sp, #8]
 80218f0:	4293      	cmp	r3, r2
 80218f2:	f300 811b 	bgt.w	8021b2c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 80218f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80218fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80218fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021900:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021904:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021908:	2b00      	cmp	r3, #0
 802190a:	ee7a aa89 	vadd.f32	s21, s21, s18
 802190e:	f340 82cb 	ble.w	8021ea8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8021912:	3b01      	subs	r3, #1
 8021914:	eeb0 7a48 	vmov.f32	s14, s16
 8021918:	eef0 7a68 	vmov.f32	s15, s17
 802191c:	9309      	str	r3, [sp, #36]	; 0x24
 802191e:	e4ae      	b.n	802127e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 8021920:	fffff800 	.word	0xfffff800
 8021924:	2000      	movs	r0, #0
 8021926:	9b02      	ldr	r3, [sp, #8]
 8021928:	4283      	cmp	r3, r0
 802192a:	dde4      	ble.n	80218f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 802192c:	9a03      	ldr	r2, [sp, #12]
 802192e:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021932:	1429      	asrs	r1, r5, #16
 8021934:	b15a      	cbz	r2, 802194e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 8021936:	2b00      	cmp	r3, #0
 8021938:	db49      	blt.n	80219ce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802193a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 802193e:	4293      	cmp	r3, r2
 8021940:	da45      	bge.n	80219ce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021942:	2900      	cmp	r1, #0
 8021944:	db43      	blt.n	80219ce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021946:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 802194a:	4291      	cmp	r1, r2
 802194c:	da3f      	bge.n	80219ce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802194e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021952:	fb01 3202 	mla	r2, r1, r2, r3
 8021956:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021958:	685b      	ldr	r3, [r3, #4]
 802195a:	5c99      	ldrb	r1, [r3, r2]
 802195c:	b3b9      	cbz	r1, 80219ce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802195e:	9b04      	ldr	r3, [sp, #16]
 8021960:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021964:	9a01      	ldr	r2, [sp, #4]
 8021966:	2aff      	cmp	r2, #255	; 0xff
 8021968:	d101      	bne.n	802196e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 802196a:	29ff      	cmp	r1, #255	; 0xff
 802196c:	d02d      	beq.n	80219ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 802196e:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 8021972:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 8021976:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 802197a:	f02e 0e07 	bic.w	lr, lr, #7
 802197e:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 8021982:	fb12 f101 	smulbb	r1, r2, r1
 8021986:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 802198a:	f007 071f 	and.w	r7, r7, #31
 802198e:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 8021992:	f022 0207 	bic.w	r2, r2, #7
 8021996:	4372      	muls	r2, r6
 8021998:	fb06 fc0c 	mul.w	ip, r6, ip
 802199c:	fb01 2e0e 	mla	lr, r1, lr, r2
 80219a0:	4a61      	ldr	r2, [pc, #388]	; (8021b28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 80219a2:	4377      	muls	r7, r6
 80219a4:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 80219a8:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80219ac:	f003 031f 	and.w	r3, r3, #31
 80219b0:	fb01 c202 	mla	r2, r1, r2, ip
 80219b4:	fb01 7303 	mla	r3, r1, r3, r7
 80219b8:	0c12      	lsrs	r2, r2, #16
 80219ba:	f3c3 4304 	ubfx	r3, r3, #16, #5
 80219be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80219c2:	ea4e 0e02 	orr.w	lr, lr, r2
 80219c6:	ea4e 0303 	orr.w	r3, lr, r3
 80219ca:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 80219ce:	9b06      	ldr	r3, [sp, #24]
 80219d0:	3001      	adds	r0, #1
 80219d2:	449b      	add	fp, r3
 80219d4:	9b07      	ldr	r3, [sp, #28]
 80219d6:	441d      	add	r5, r3
 80219d8:	e7a5      	b.n	8021926 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 80219da:	2300      	movs	r3, #0
 80219dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80219de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80219e0:	9b02      	ldr	r3, [sp, #8]
 80219e2:	4293      	cmp	r3, r2
 80219e4:	dd87      	ble.n	80218f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80219e6:	9b03      	ldr	r3, [sp, #12]
 80219e8:	ea4f 422b 	mov.w	r2, fp, asr #16
 80219ec:	1429      	asrs	r1, r5, #16
 80219ee:	b17b      	cbz	r3, 8021a10 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 80219f0:	2a00      	cmp	r2, #0
 80219f2:	f2c0 8092 	blt.w	8021b1a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80219f6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80219fa:	429a      	cmp	r2, r3
 80219fc:	f280 808d 	bge.w	8021b1a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 8021a00:	2900      	cmp	r1, #0
 8021a02:	f2c0 808a 	blt.w	8021b1a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 8021a06:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021a0a:	4299      	cmp	r1, r3
 8021a0c:	f280 8085 	bge.w	8021b1a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 8021a10:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021a14:	f3c5 3603 	ubfx	r6, r5, #12, #4
 8021a18:	9804      	ldr	r0, [sp, #16]
 8021a1a:	fb01 2103 	mla	r1, r1, r3, r2
 8021a1e:	9a04      	ldr	r2, [sp, #16]
 8021a20:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 8021a24:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 8021a28:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021a2c:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021a30:	8879      	ldrh	r1, [r7, #2]
 8021a32:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021a36:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8021a3a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021a3e:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8021a42:	fb06 f302 	mul.w	r3, r6, r2
 8021a46:	ea4e 0e09 	orr.w	lr, lr, r9
 8021a4a:	ea4f 4901 	mov.w	r9, r1, lsl #16
 8021a4e:	10db      	asrs	r3, r3, #3
 8021a50:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 8021a54:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 8021a58:	f1c6 0710 	rsb	r7, r6, #16
 8021a5c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021a60:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 8021a64:	1abf      	subs	r7, r7, r2
 8021a66:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021a6a:	ea49 0101 	orr.w	r1, r9, r1
 8021a6e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021a72:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8021a76:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8021a7a:	4351      	muls	r1, r2
 8021a7c:	9a01      	ldr	r2, [sp, #4]
 8021a7e:	ea4a 0808 	orr.w	r8, sl, r8
 8021a82:	fb0e 1107 	mla	r1, lr, r7, r1
 8021a86:	2aff      	cmp	r2, #255	; 0xff
 8021a88:	fb03 1108 	mla	r1, r3, r8, r1
 8021a8c:	ea4f 480c 	mov.w	r8, ip, lsl #16
 8021a90:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021a94:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 8021a98:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8021a9c:	ea48 0c0c 	orr.w	ip, r8, ip
 8021aa0:	fb03 110c 	mla	r1, r3, ip, r1
 8021aa4:	ea4f 5951 	mov.w	r9, r1, lsr #21
 8021aa8:	ea4f 1351 	mov.w	r3, r1, lsr #5
 8021aac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021ab0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021ab4:	ea49 0303 	orr.w	r3, r9, r3
 8021ab8:	b29b      	uxth	r3, r3
 8021aba:	d02b      	beq.n	8021b14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 8021abc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021abe:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 8021ac2:	9805      	ldr	r0, [sp, #20]
 8021ac4:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 8021ac8:	f026 0607 	bic.w	r6, r6, #7
 8021acc:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 8021ad0:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8021ad4:	f001 011f 	and.w	r1, r1, #31
 8021ad8:	f022 0207 	bic.w	r2, r2, #7
 8021adc:	4342      	muls	r2, r0
 8021ade:	9801      	ldr	r0, [sp, #4]
 8021ae0:	fb00 2606 	mla	r6, r0, r6, r2
 8021ae4:	4a10      	ldr	r2, [pc, #64]	; (8021b28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 8021ae6:	9805      	ldr	r0, [sp, #20]
 8021ae8:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 8021aec:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8021af0:	4347      	muls	r7, r0
 8021af2:	9801      	ldr	r0, [sp, #4]
 8021af4:	f003 031f 	and.w	r3, r3, #31
 8021af8:	fb00 7202 	mla	r2, r0, r2, r7
 8021afc:	0a12      	lsrs	r2, r2, #8
 8021afe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b02:	4316      	orrs	r6, r2
 8021b04:	9a05      	ldr	r2, [sp, #20]
 8021b06:	4351      	muls	r1, r2
 8021b08:	fb00 1303 	mla	r3, r0, r3, r1
 8021b0c:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8021b10:	4333      	orrs	r3, r6
 8021b12:	b29b      	uxth	r3, r3
 8021b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021b16:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8021b1a:	9b06      	ldr	r3, [sp, #24]
 8021b1c:	449b      	add	fp, r3
 8021b1e:	9b07      	ldr	r3, [sp, #28]
 8021b20:	441d      	add	r5, r3
 8021b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b24:	3301      	adds	r3, #1
 8021b26:	e759      	b.n	80219dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 8021b28:	fffff800 	.word	0xfffff800
 8021b2c:	9903      	ldr	r1, [sp, #12]
 8021b2e:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021b32:	142a      	asrs	r2, r5, #16
 8021b34:	b179      	cbz	r1, 8021b56 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	f2c0 8136 	blt.w	8021da8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021b3c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021b40:	428b      	cmp	r3, r1
 8021b42:	f280 8131 	bge.w	8021da8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021b46:	2a00      	cmp	r2, #0
 8021b48:	f2c0 812e 	blt.w	8021da8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021b4c:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021b50:	428a      	cmp	r2, r1
 8021b52:	f280 8129 	bge.w	8021da8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021b56:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021b5a:	fb02 3301 	mla	r3, r2, r1, r3
 8021b5e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021b60:	6850      	ldr	r0, [r2, #4]
 8021b62:	18c2      	adds	r2, r0, r3
 8021b64:	5cc0      	ldrb	r0, [r0, r3]
 8021b66:	900d      	str	r0, [sp, #52]	; 0x34
 8021b68:	7850      	ldrb	r0, [r2, #1]
 8021b6a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8021b6e:	900e      	str	r0, [sp, #56]	; 0x38
 8021b70:	5c50      	ldrb	r0, [r2, r1]
 8021b72:	440a      	add	r2, r1
 8021b74:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 8021b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021b7c:	7852      	ldrb	r2, [r2, #1]
 8021b7e:	ee07 0a10 	vmov	s14, r0
 8021b82:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8021b86:	900f      	str	r0, [sp, #60]	; 0x3c
 8021b88:	9210      	str	r2, [sp, #64]	; 0x40
 8021b8a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021b8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8021b92:	ee0d 2a10 	vmov	s26, r2
 8021b96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8021b9a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021b9e:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8021ba2:	ee0d 2a90 	vmov	s27, r2
 8021ba6:	ee2d da2c 	vmul.f32	s26, s26, s25
 8021baa:	eef8 daed 	vcvt.f32.s32	s27, s27
 8021bae:	eeed 7a26 	vfma.f32	s15, s26, s13
 8021bb2:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 8021bb6:	ee6d daac 	vmul.f32	s27, s27, s25
 8021bba:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8021bbe:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8021bc2:	eead 7a26 	vfma.f32	s14, s26, s13
 8021bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8021bca:	eeed 7a87 	vfma.f32	s15, s27, s14
 8021bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021bd2:	ee17 6a90 	vmov	r6, s15
 8021bd6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8021bda:	f000 80e5 	beq.w	8021da8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021bde:	9a04      	ldr	r2, [sp, #16]
 8021be0:	eef0 2a6d 	vmov.f32	s5, s27
 8021be4:	eeb0 2a4d 	vmov.f32	s4, s26
 8021be8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8021bec:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8021bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021bf2:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 8021bf6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8021bfa:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8021bfe:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 8021c02:	f00a 001f 	and.w	r0, sl, #31
 8021c06:	4358      	muls	r0, r3
 8021c08:	1203      	asrs	r3, r0, #8
 8021c0a:	f009 001f 	and.w	r0, r9, #31
 8021c0e:	ee01 3a90 	vmov	s3, r3
 8021c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021c14:	4358      	muls	r0, r3
 8021c16:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021c1a:	1203      	asrs	r3, r0, #8
 8021c1c:	f008 001f 	and.w	r0, r8, #31
 8021c20:	ee01 3a10 	vmov	s2, r3
 8021c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c26:	4358      	muls	r0, r3
 8021c28:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021c2c:	1203      	asrs	r3, r0, #8
 8021c2e:	f007 001f 	and.w	r0, r7, #31
 8021c32:	ee00 3a90 	vmov	s1, r3
 8021c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021c38:	4358      	muls	r0, r3
 8021c3a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021c3e:	1203      	asrs	r3, r0, #8
 8021c40:	4630      	mov	r0, r6
 8021c42:	ee00 3a10 	vmov	s0, r3
 8021c46:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021c4a:	f7ff fa41 	bl	80210d0 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021c4e:	f3ca 1045 	ubfx	r0, sl, #5, #6
 8021c52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021c54:	eeb0 ea40 	vmov.f32	s28, s0
 8021c58:	eef0 2a6d 	vmov.f32	s5, s27
 8021c5c:	4358      	muls	r0, r3
 8021c5e:	eeb0 2a4d 	vmov.f32	s4, s26
 8021c62:	1203      	asrs	r3, r0, #8
 8021c64:	f3c9 1045 	ubfx	r0, r9, #5, #6
 8021c68:	ee01 3a90 	vmov	s3, r3
 8021c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021c6e:	4358      	muls	r0, r3
 8021c70:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021c74:	1203      	asrs	r3, r0, #8
 8021c76:	f3c8 1045 	ubfx	r0, r8, #5, #6
 8021c7a:	ee01 3a10 	vmov	s2, r3
 8021c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c80:	4358      	muls	r0, r3
 8021c82:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021c86:	1203      	asrs	r3, r0, #8
 8021c88:	f3c7 1045 	ubfx	r0, r7, #5, #6
 8021c8c:	0aff      	lsrs	r7, r7, #11
 8021c8e:	ee00 3a90 	vmov	s1, r3
 8021c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021c94:	4358      	muls	r0, r3
 8021c96:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021c9a:	1203      	asrs	r3, r0, #8
 8021c9c:	4630      	mov	r0, r6
 8021c9e:	ee00 3a10 	vmov	s0, r3
 8021ca2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021ca6:	f7ff fa13 	bl	80210d0 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021caa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021cac:	ea4f 21da 	mov.w	r1, sl, lsr #11
 8021cb0:	eef0 ea40 	vmov.f32	s29, s0
 8021cb4:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 8021cb8:	4630      	mov	r0, r6
 8021cba:	fb03 fa01 	mul.w	sl, r3, r1
 8021cbe:	eef0 2a6d 	vmov.f32	s5, s27
 8021cc2:	eeb0 2a4d 	vmov.f32	s4, s26
 8021cc6:	ea4f 232a 	mov.w	r3, sl, asr #8
 8021cca:	ee01 3a90 	vmov	s3, r3
 8021cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021cd0:	fb03 f902 	mul.w	r9, r3, r2
 8021cd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021cd6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021cda:	ea4f 2329 	mov.w	r3, r9, asr #8
 8021cde:	ee01 3a10 	vmov	s2, r3
 8021ce2:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 8021ce6:	fb02 f803 	mul.w	r8, r2, r3
 8021cea:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021cee:	ea4f 2328 	mov.w	r3, r8, asr #8
 8021cf2:	ee00 3a90 	vmov	s1, r3
 8021cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021cf8:	437b      	muls	r3, r7
 8021cfa:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021cfe:	121b      	asrs	r3, r3, #8
 8021d00:	ee00 3a10 	vmov	s0, r3
 8021d04:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021d08:	f7ff f9e2 	bl	80210d0 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021d0c:	eefc 7aee 	vcvt.u32.f32	s15, s29
 8021d10:	2eff      	cmp	r6, #255	; 0xff
 8021d12:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021d16:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8021d1a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8021d1e:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021d22:	eefc 7ace 	vcvt.u32.f32	s15, s28
 8021d26:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8021d2a:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8021d2e:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021d32:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8021d36:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8021d3a:	ea43 0302 	orr.w	r3, r3, r2
 8021d3e:	b29b      	uxth	r3, r3
 8021d40:	d102      	bne.n	8021d48 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 8021d42:	9a01      	ldr	r2, [sp, #4]
 8021d44:	2aff      	cmp	r2, #255	; 0xff
 8021d46:	d02c      	beq.n	8021da2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 8021d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021d4a:	f423 67ff 	bic.w	r7, r3, #2040	; 0x7f8
 8021d4e:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 8021d52:	f027 0707 	bic.w	r7, r7, #7
 8021d56:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8021d5a:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 8021d5e:	fb12 f606 	smulbb	r6, r2, r6
 8021d62:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 8021d66:	f000 001f 	and.w	r0, r0, #31
 8021d6a:	f5c6 3180 	rsb	r1, r6, #65536	; 0x10000
 8021d6e:	f022 0207 	bic.w	r2, r2, #7
 8021d72:	434a      	muls	r2, r1
 8021d74:	fb01 fe0e 	mul.w	lr, r1, lr
 8021d78:	fb06 2707 	mla	r7, r6, r7, r2
 8021d7c:	4a4d      	ldr	r2, [pc, #308]	; (8021eb4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 8021d7e:	4348      	muls	r0, r1
 8021d80:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 8021d84:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8021d88:	f003 031f 	and.w	r3, r3, #31
 8021d8c:	fb06 e202 	mla	r2, r6, r2, lr
 8021d90:	fb06 0303 	mla	r3, r6, r3, r0
 8021d94:	0c12      	lsrs	r2, r2, #16
 8021d96:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8021d9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d9e:	4317      	orrs	r7, r2
 8021da0:	433b      	orrs	r3, r7
 8021da2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021da4:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8021da8:	9b06      	ldr	r3, [sp, #24]
 8021daa:	449b      	add	fp, r3
 8021dac:	9b07      	ldr	r3, [sp, #28]
 8021dae:	441d      	add	r5, r3
 8021db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021db2:	3301      	adds	r3, #1
 8021db4:	e599      	b.n	80218ea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 8021db6:	9b01      	ldr	r3, [sp, #4]
 8021db8:	2bff      	cmp	r3, #255	; 0xff
 8021dba:	d105      	bne.n	8021dc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 8021dbc:	2300      	movs	r3, #0
 8021dbe:	9a02      	ldr	r2, [sp, #8]
 8021dc0:	429a      	cmp	r2, r3
 8021dc2:	dc51      	bgt.n	8021e68 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 8021dc4:	4613      	mov	r3, r2
 8021dc6:	e596      	b.n	80218f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021dc8:	2000      	movs	r0, #0
 8021dca:	9b02      	ldr	r3, [sp, #8]
 8021dcc:	4283      	cmp	r3, r0
 8021dce:	f77f ad92 	ble.w	80218f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021dd2:	9b03      	ldr	r3, [sp, #12]
 8021dd4:	ea4f 422b 	mov.w	r2, fp, asr #16
 8021dd8:	1429      	asrs	r1, r5, #16
 8021dda:	b15b      	cbz	r3, 8021df4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 8021ddc:	2a00      	cmp	r2, #0
 8021dde:	db3d      	blt.n	8021e5c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021de0:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021de4:	429a      	cmp	r2, r3
 8021de6:	da39      	bge.n	8021e5c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021de8:	2900      	cmp	r1, #0
 8021dea:	db37      	blt.n	8021e5c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021dec:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021df0:	4299      	cmp	r1, r3
 8021df2:	da33      	bge.n	8021e5c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021df4:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021df8:	9f05      	ldr	r7, [sp, #20]
 8021dfa:	fb01 2303 	mla	r3, r1, r3, r2
 8021dfe:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 8021e02:	9a04      	ldr	r2, [sp, #16]
 8021e04:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8021e08:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 8021e0c:	f422 66ff 	bic.w	r6, r2, #2040	; 0x7f8
 8021e10:	f023 0307 	bic.w	r3, r3, #7
 8021e14:	f402 6efc 	and.w	lr, r2, #2016	; 0x7e0
 8021e18:	f002 021f 	and.w	r2, r2, #31
 8021e1c:	437b      	muls	r3, r7
 8021e1e:	f026 0607 	bic.w	r6, r6, #7
 8021e22:	9f01      	ldr	r7, [sp, #4]
 8021e24:	fb07 3606 	mla	r6, r7, r6, r3
 8021e28:	4b22      	ldr	r3, [pc, #136]	; (8021eb4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 8021e2a:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8021e2e:	f001 011f 	and.w	r1, r1, #31
 8021e32:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 8021e36:	9b05      	ldr	r3, [sp, #20]
 8021e38:	435f      	muls	r7, r3
 8021e3a:	9b01      	ldr	r3, [sp, #4]
 8021e3c:	fb03 730e 	mla	r3, r3, lr, r7
 8021e40:	0a1b      	lsrs	r3, r3, #8
 8021e42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021e46:	431e      	orrs	r6, r3
 8021e48:	9b05      	ldr	r3, [sp, #20]
 8021e4a:	4359      	muls	r1, r3
 8021e4c:	9b01      	ldr	r3, [sp, #4]
 8021e4e:	fb03 1202 	mla	r2, r3, r2, r1
 8021e52:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8021e56:	4316      	orrs	r6, r2
 8021e58:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 8021e5c:	9b06      	ldr	r3, [sp, #24]
 8021e5e:	3001      	adds	r0, #1
 8021e60:	449b      	add	fp, r3
 8021e62:	9b07      	ldr	r3, [sp, #28]
 8021e64:	441d      	add	r5, r3
 8021e66:	e7b0      	b.n	8021dca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 8021e68:	9a03      	ldr	r2, [sp, #12]
 8021e6a:	ea4f 412b 	mov.w	r1, fp, asr #16
 8021e6e:	1428      	asrs	r0, r5, #16
 8021e70:	b15a      	cbz	r2, 8021e8a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 8021e72:	2900      	cmp	r1, #0
 8021e74:	db12      	blt.n	8021e9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021e76:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021e7a:	4291      	cmp	r1, r2
 8021e7c:	da0e      	bge.n	8021e9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021e7e:	2800      	cmp	r0, #0
 8021e80:	db0c      	blt.n	8021e9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021e82:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8021e86:	4290      	cmp	r0, r2
 8021e88:	da08      	bge.n	8021e9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021e8a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021e8e:	fb00 1202 	mla	r2, r0, r2, r1
 8021e92:	9904      	ldr	r1, [sp, #16]
 8021e94:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8021e98:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 8021e9c:	9a06      	ldr	r2, [sp, #24]
 8021e9e:	3301      	adds	r3, #1
 8021ea0:	4493      	add	fp, r2
 8021ea2:	9a07      	ldr	r2, [sp, #28]
 8021ea4:	4415      	add	r5, r2
 8021ea6:	e78a      	b.n	8021dbe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 8021ea8:	b015      	add	sp, #84	; 0x54
 8021eaa:	ecbd 8b0e 	vpop	{d8-d14}
 8021eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eb2:	bf00      	nop
 8021eb4:	fffff800 	.word	0xfffff800

08021eb8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ebc:	b08f      	sub	sp, #60	; 0x3c
 8021ebe:	460c      	mov	r4, r1
 8021ec0:	4680      	mov	r8, r0
 8021ec2:	4699      	mov	r9, r3
 8021ec4:	6808      	ldr	r0, [r1, #0]
 8021ec6:	ab0a      	add	r3, sp, #40	; 0x28
 8021ec8:	6849      	ldr	r1, [r1, #4]
 8021eca:	c303      	stmia	r3!, {r0, r1}
 8021ecc:	6810      	ldr	r0, [r2, #0]
 8021ece:	ab0c      	add	r3, sp, #48	; 0x30
 8021ed0:	6851      	ldr	r1, [r2, #4]
 8021ed2:	c303      	stmia	r3!, {r0, r1}
 8021ed4:	a80a      	add	r0, sp, #40	; 0x28
 8021ed6:	f7fc fb93 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021eda:	4621      	mov	r1, r4
 8021edc:	a80c      	add	r0, sp, #48	; 0x30
 8021ede:	4c58      	ldr	r4, [pc, #352]	; (8022040 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021ee0:	f7fc fb76 	bl	801e5d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ee4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021ee8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021eec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021ef0:	6820      	ldr	r0, [r4, #0]
 8021ef2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021ef6:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021efa:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8021efe:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021f02:	440a      	add	r2, r1
 8021f04:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021f08:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8021f0c:	4413      	add	r3, r2
 8021f0e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021f12:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8021f16:	9305      	str	r3, [sp, #20]
 8021f18:	6803      	ldr	r3, [r0, #0]
 8021f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f1c:	4798      	blx	r3
 8021f1e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021f22:	d118      	bne.n	8021f56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021f24:	f010 0f20 	tst.w	r0, #32
 8021f28:	6820      	ldr	r0, [r4, #0]
 8021f2a:	d017      	beq.n	8021f5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021f2c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021f30:	b2bf      	uxth	r7, r7
 8021f32:	6801      	ldr	r1, [r0, #0]
 8021f34:	9402      	str	r4, [sp, #8]
 8021f36:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021f3a:	f8cd 900c 	str.w	r9, [sp, #12]
 8021f3e:	9401      	str	r4, [sp, #4]
 8021f40:	9700      	str	r7, [sp, #0]
 8021f42:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8021f46:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8021f48:	4641      	mov	r1, r8
 8021f4a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021f4e:	47a0      	blx	r4
 8021f50:	b00f      	add	sp, #60	; 0x3c
 8021f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021f5a:	e7e5      	b.n	8021f28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 8021f5c:	6803      	ldr	r3, [r0, #0]
 8021f5e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8022048 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 8021f62:	6a1b      	ldr	r3, [r3, #32]
 8021f64:	4798      	blx	r3
 8021f66:	4a37      	ldr	r2, [pc, #220]	; (8022044 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8021f68:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021f6c:	f04f 0c00 	mov.w	ip, #0
 8021f70:	8813      	ldrh	r3, [r2, #0]
 8021f72:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8021f76:	9209      	str	r2, [sp, #36]	; 0x24
 8021f78:	fb04 1303 	mla	r3, r4, r3, r1
 8021f7c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021f80:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8021f84:	0099      	lsls	r1, r3, #2
 8021f86:	005b      	lsls	r3, r3, #1
 8021f88:	9108      	str	r1, [sp, #32]
 8021f8a:	9307      	str	r3, [sp, #28]
 8021f8c:	9b05      	ldr	r3, [sp, #20]
 8021f8e:	459c      	cmp	ip, r3
 8021f90:	da4f      	bge.n	8022032 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 8021f92:	4686      	mov	lr, r0
 8021f94:	2300      	movs	r3, #0
 8021f96:	42bb      	cmp	r3, r7
 8021f98:	da3a      	bge.n	8022010 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 8021f9a:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 8021f9e:	0e2e      	lsrs	r6, r5, #24
 8021fa0:	d012      	beq.n	8021fc8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8021fa2:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 8021fa6:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 8021faa:	0969      	lsrs	r1, r5, #5
 8021fac:	2eff      	cmp	r6, #255	; 0xff
 8021fae:	b2a4      	uxth	r4, r4
 8021fb0:	9206      	str	r2, [sp, #24]
 8021fb2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021fb6:	d10b      	bne.n	8021fd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021fb8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021fbc:	d108      	bne.n	8021fd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021fbe:	430c      	orrs	r4, r1
 8021fc0:	4322      	orrs	r2, r4
 8021fc2:	4614      	mov	r4, r2
 8021fc4:	f8ae 4000 	strh.w	r4, [lr]
 8021fc8:	f10e 0e02 	add.w	lr, lr, #2
 8021fcc:	3301      	adds	r3, #1
 8021fce:	e7e2      	b.n	8021f96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8021fd0:	fb06 f609 	mul.w	r6, r6, r9
 8021fd4:	f8be 5000 	ldrh.w	r5, [lr]
 8021fd8:	f5c6 3b80 	rsb	fp, r6, #65536	; 0x10000
 8021fdc:	ea05 020a 	and.w	r2, r5, sl
 8021fe0:	4374      	muls	r4, r6
 8021fe2:	4371      	muls	r1, r6
 8021fe4:	fb0b 4402 	mla	r4, fp, r2, r4
 8021fe8:	f405 62fc 	and.w	r2, r5, #2016	; 0x7e0
 8021fec:	f005 051f 	and.w	r5, r5, #31
 8021ff0:	fb0b 1102 	mla	r1, fp, r2, r1
 8021ff4:	9a06      	ldr	r2, [sp, #24]
 8021ff6:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 8021ffa:	0c09      	lsrs	r1, r1, #16
 8021ffc:	4356      	muls	r6, r2
 8021ffe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022002:	fb0b 6505 	mla	r5, fp, r5, r6
 8022006:	430c      	orrs	r4, r1
 8022008:	f3c5 4504 	ubfx	r5, r5, #16, #5
 802200c:	432c      	orrs	r4, r5
 802200e:	e7d9      	b.n	8021fc4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8022010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022012:	f10c 0c01 	add.w	ip, ip, #1
 8022016:	9a07      	ldr	r2, [sp, #28]
 8022018:	881b      	ldrh	r3, [r3, #0]
 802201a:	1bdb      	subs	r3, r3, r7
 802201c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022020:	9a08      	ldr	r2, [sp, #32]
 8022022:	4418      	add	r0, r3
 8022024:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8022028:	1bdb      	subs	r3, r3, r7
 802202a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802202e:	4498      	add	r8, r3
 8022030:	e7ac      	b.n	8021f8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 8022032:	4b03      	ldr	r3, [pc, #12]	; (8022040 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8022034:	6818      	ldr	r0, [r3, #0]
 8022036:	6803      	ldr	r3, [r0, #0]
 8022038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802203a:	4798      	blx	r3
 802203c:	e788      	b.n	8021f50 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 802203e:	bf00      	nop
 8022040:	2000ba4c 	.word	0x2000ba4c
 8022044:	2000ba46 	.word	0x2000ba46
 8022048:	fffff800 	.word	0xfffff800

0802204c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802204c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022050:	9d06      	ldr	r5, [sp, #24]
 8022052:	461c      	mov	r4, r3
 8022054:	460e      	mov	r6, r1
 8022056:	f89d 301c 	ldrb.w	r3, [sp, #28]
 802205a:	f89d 7020 	ldrb.w	r7, [sp, #32]
 802205e:	b142      	cbz	r2, 8022072 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8022060:	2a02      	cmp	r2, #2
 8022062:	d010      	beq.n	8022086 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 8022064:	4b0b      	ldr	r3, [pc, #44]	; (8022094 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 8022066:	f240 11b9 	movw	r1, #441	; 0x1b9
 802206a:	4a0b      	ldr	r2, [pc, #44]	; (8022098 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 802206c:	480b      	ldr	r0, [pc, #44]	; (802209c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 802206e:	f000 fd63 	bl	8022b38 <__assert_func>
 8022072:	6802      	ldr	r2, [r0, #0]
 8022074:	9306      	str	r3, [sp, #24]
 8022076:	462b      	mov	r3, r5
 8022078:	9707      	str	r7, [sp, #28]
 802207a:	6916      	ldr	r6, [r2, #16]
 802207c:	4622      	mov	r2, r4
 802207e:	46b4      	mov	ip, r6
 8022080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022084:	4760      	bx	ip
 8022086:	462a      	mov	r2, r5
 8022088:	4621      	mov	r1, r4
 802208a:	4630      	mov	r0, r6
 802208c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022090:	f7ff bf12 	b.w	8021eb8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022094:	080267dc 	.word	0x080267dc
 8022098:	0802693b 	.word	0x0802693b
 802209c:	080267aa 	.word	0x080267aa

080220a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80220a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220a4:	b08b      	sub	sp, #44	; 0x2c
 80220a6:	460e      	mov	r6, r1
 80220a8:	4604      	mov	r4, r0
 80220aa:	6851      	ldr	r1, [r2, #4]
 80220ac:	6810      	ldr	r0, [r2, #0]
 80220ae:	ad06      	add	r5, sp, #24
 80220b0:	4617      	mov	r7, r2
 80220b2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 80220b6:	c503      	stmia	r5!, {r0, r1}
 80220b8:	6818      	ldr	r0, [r3, #0]
 80220ba:	ad08      	add	r5, sp, #32
 80220bc:	6859      	ldr	r1, [r3, #4]
 80220be:	c503      	stmia	r5!, {r0, r1}
 80220c0:	a806      	add	r0, sp, #24
 80220c2:	f7fc fa9d 	bl	801e600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80220c6:	4639      	mov	r1, r7
 80220c8:	a808      	add	r0, sp, #32
 80220ca:	f7fc fa81 	bl	801e5d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80220ce:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80220d2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80220d6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80220da:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80220de:	fb11 2103 	smlabb	r1, r1, r3, r2
 80220e2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80220e6:	1871      	adds	r1, r6, r1
 80220e8:	9101      	str	r1, [sp, #4]
 80220ea:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80220ee:	440a      	add	r2, r1
 80220f0:	f8ad 2020 	strh.w	r2, [sp, #32]
 80220f4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80220f8:	4413      	add	r3, r2
 80220fa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80220fe:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8022102:	9302      	str	r3, [sp, #8]
 8022104:	4b64      	ldr	r3, [pc, #400]	; (8022298 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 8022106:	6818      	ldr	r0, [r3, #0]
 8022108:	6803      	ldr	r3, [r0, #0]
 802210a:	6a1b      	ldr	r3, [r3, #32]
 802210c:	4798      	blx	r3
 802210e:	4b63      	ldr	r3, [pc, #396]	; (802229c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 8022110:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 8022114:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022118:	881a      	ldrh	r2, [r3, #0]
 802211a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802211e:	fb06 1202 	mla	r2, r6, r2, r1
 8022122:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022126:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 802212a:	b212      	sxth	r2, r2
 802212c:	9204      	str	r2, [sp, #16]
 802212e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8022132:	9203      	str	r2, [sp, #12]
 8022134:	d051      	beq.n	80221da <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 8022136:	f04f 0800 	mov.w	r8, #0
 802213a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80222a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 802213e:	9305      	str	r3, [sp, #20]
 8022140:	9b02      	ldr	r3, [sp, #8]
 8022142:	4598      	cmp	r8, r3
 8022144:	f280 809f 	bge.w	8022286 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 8022148:	2100      	movs	r1, #0
 802214a:	42a9      	cmp	r1, r5
 802214c:	da30      	bge.n	80221b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 802214e:	9b01      	ldr	r3, [sp, #4]
 8022150:	5c5e      	ldrb	r6, [r3, r1]
 8022152:	b35e      	cbz	r6, 80221ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 8022154:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8022158:	fb1b f606 	smulbb	r6, fp, r6
 802215c:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 8022160:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 8022164:	ea0e 0309 	and.w	r3, lr, r9
 8022168:	ea02 0c09 	and.w	ip, r2, r9
 802216c:	f40e 6afc 	and.w	sl, lr, #2016	; 0x7e0
 8022170:	437b      	muls	r3, r7
 8022172:	f00e 0e1f 	and.w	lr, lr, #31
 8022176:	fb07 fa0a 	mul.w	sl, r7, sl
 802217a:	fb06 3c0c 	mla	ip, r6, ip, r3
 802217e:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8022182:	fb07 fe0e 	mul.w	lr, r7, lr
 8022186:	f002 021f 	and.w	r2, r2, #31
 802218a:	fb06 a303 	mla	r3, r6, r3, sl
 802218e:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 8022192:	fb06 ee02 	mla	lr, r6, r2, lr
 8022196:	0c1b      	lsrs	r3, r3, #16
 8022198:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 802219c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80221a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80221a4:	ea4c 0c0e 	orr.w	ip, ip, lr
 80221a8:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 80221ac:	3101      	adds	r1, #1
 80221ae:	e7cc      	b.n	802214a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 80221b0:	9b05      	ldr	r3, [sp, #20]
 80221b2:	f108 0801 	add.w	r8, r8, #1
 80221b6:	9a03      	ldr	r2, [sp, #12]
 80221b8:	881b      	ldrh	r3, [r3, #0]
 80221ba:	1b5b      	subs	r3, r3, r5
 80221bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80221c0:	4418      	add	r0, r3
 80221c2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80221c6:	1b5b      	subs	r3, r3, r5
 80221c8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80221cc:	4414      	add	r4, r2
 80221ce:	9a04      	ldr	r2, [sp, #16]
 80221d0:	4413      	add	r3, r2
 80221d2:	9a01      	ldr	r2, [sp, #4]
 80221d4:	441a      	add	r2, r3
 80221d6:	9201      	str	r2, [sp, #4]
 80221d8:	e7b2      	b.n	8022140 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 80221da:	f04f 0900 	mov.w	r9, #0
 80221de:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80222a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 80221e2:	9305      	str	r3, [sp, #20]
 80221e4:	9b02      	ldr	r3, [sp, #8]
 80221e6:	4599      	cmp	r9, r3
 80221e8:	da4d      	bge.n	8022286 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 80221ea:	4607      	mov	r7, r0
 80221ec:	2600      	movs	r6, #0
 80221ee:	42ae      	cmp	r6, r5
 80221f0:	da34      	bge.n	802225c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 80221f2:	9b01      	ldr	r3, [sp, #4]
 80221f4:	5d99      	ldrb	r1, [r3, r6]
 80221f6:	b121      	cbz	r1, 8022202 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 80221f8:	29ff      	cmp	r1, #255	; 0xff
 80221fa:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 80221fe:	d103      	bne.n	8022208 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8022200:	803a      	strh	r2, [r7, #0]
 8022202:	3702      	adds	r7, #2
 8022204:	3601      	adds	r6, #1
 8022206:	e7f2      	b.n	80221ee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 8022208:	f8b7 c000 	ldrh.w	ip, [r7]
 802220c:	f5c1 7e80 	rsb	lr, r1, #256	; 0x100
 8022210:	ea02 080a 	and.w	r8, r2, sl
 8022214:	ea0c 030a 	and.w	r3, ip, sl
 8022218:	f40c 6bfc 	and.w	fp, ip, #2016	; 0x7e0
 802221c:	f00c 0c1f 	and.w	ip, ip, #31
 8022220:	fb0e f303 	mul.w	r3, lr, r3
 8022224:	fb0e fb0b 	mul.w	fp, lr, fp
 8022228:	fb01 3808 	mla	r8, r1, r8, r3
 802222c:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8022230:	fb0e fc0c 	mul.w	ip, lr, ip
 8022234:	f002 021f 	and.w	r2, r2, #31
 8022238:	fb01 b303 	mla	r3, r1, r3, fp
 802223c:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 8022240:	fb01 cc02 	mla	ip, r1, r2, ip
 8022244:	0a1b      	lsrs	r3, r3, #8
 8022246:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 802224a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802224e:	ea48 0803 	orr.w	r8, r8, r3
 8022252:	ea48 080c 	orr.w	r8, r8, ip
 8022256:	f8a7 8000 	strh.w	r8, [r7]
 802225a:	e7d2      	b.n	8022202 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 802225c:	9b05      	ldr	r3, [sp, #20]
 802225e:	f109 0901 	add.w	r9, r9, #1
 8022262:	9a03      	ldr	r2, [sp, #12]
 8022264:	881b      	ldrh	r3, [r3, #0]
 8022266:	1b5b      	subs	r3, r3, r5
 8022268:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802226c:	4418      	add	r0, r3
 802226e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022272:	1b5b      	subs	r3, r3, r5
 8022274:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8022278:	4414      	add	r4, r2
 802227a:	9a04      	ldr	r2, [sp, #16]
 802227c:	4413      	add	r3, r2
 802227e:	9a01      	ldr	r2, [sp, #4]
 8022280:	441a      	add	r2, r3
 8022282:	9201      	str	r2, [sp, #4]
 8022284:	e7ae      	b.n	80221e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022286:	4b04      	ldr	r3, [pc, #16]	; (8022298 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 8022288:	6818      	ldr	r0, [r3, #0]
 802228a:	6803      	ldr	r3, [r0, #0]
 802228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802228e:	4798      	blx	r3
 8022290:	b00b      	add	sp, #44	; 0x2c
 8022292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022296:	bf00      	nop
 8022298:	2000ba4c 	.word	0x2000ba4c
 802229c:	2000ba46 	.word	0x2000ba46
 80222a0:	fffff800 	.word	0xfffff800

080222a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80222a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222a8:	b089      	sub	sp, #36	; 0x24
 80222aa:	4682      	mov	sl, r0
 80222ac:	4689      	mov	r9, r1
 80222ae:	4690      	mov	r8, r2
 80222b0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80222b4:	461f      	mov	r7, r3
 80222b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80222b8:	b365      	cbz	r5, 8022314 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 80222ba:	4608      	mov	r0, r1
 80222bc:	f7fe faf0 	bl	80208a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80222c0:	4606      	mov	r6, r0
 80222c2:	4648      	mov	r0, r9
 80222c4:	f7fe fb24 	bl	8020910 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80222c8:	f8ad 000e 	strh.w	r0, [sp, #14]
 80222cc:	4648      	mov	r0, r9
 80222ce:	f8ad 8008 	strh.w	r8, [sp, #8]
 80222d2:	f8ad 700a 	strh.w	r7, [sp, #10]
 80222d6:	f8ad 600c 	strh.w	r6, [sp, #12]
 80222da:	f7fe fc37 	bl	8020b4c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80222de:	2801      	cmp	r0, #1
 80222e0:	d105      	bne.n	80222ee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80222e2:	4b64      	ldr	r3, [pc, #400]	; (8022474 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 80222e4:	2160      	movs	r1, #96	; 0x60
 80222e6:	4a64      	ldr	r2, [pc, #400]	; (8022478 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 80222e8:	4864      	ldr	r0, [pc, #400]	; (802247c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 80222ea:	f000 fc25 	bl	8022b38 <__assert_func>
 80222ee:	4648      	mov	r0, r9
 80222f0:	f7fe fbd4 	bl	8020a9c <_ZNK8touchgfx6Bitmap7getDataEv>
 80222f4:	4606      	mov	r6, r0
 80222f6:	4648      	mov	r0, r9
 80222f8:	f7fe fc00 	bl	8020afc <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 80222fc:	4680      	mov	r8, r0
 80222fe:	4648      	mov	r0, r9
 8022300:	f7fe fc24 	bl	8020b4c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022304:	2802      	cmp	r0, #2
 8022306:	d108      	bne.n	802231a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8022308:	462b      	mov	r3, r5
 802230a:	4622      	mov	r2, r4
 802230c:	a902      	add	r1, sp, #8
 802230e:	4630      	mov	r0, r6
 8022310:	f7ff fdd2 	bl	8021eb8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022314:	b009      	add	sp, #36	; 0x24
 8022316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802231a:	4648      	mov	r0, r9
 802231c:	f7fe fb88 	bl	8020a30 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022320:	b950      	cbnz	r0, 8022338 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022322:	f8da 3000 	ldr.w	r3, [sl]
 8022326:	aa02      	add	r2, sp, #8
 8022328:	9001      	str	r0, [sp, #4]
 802232a:	4631      	mov	r1, r6
 802232c:	9500      	str	r5, [sp, #0]
 802232e:	4650      	mov	r0, sl
 8022330:	691d      	ldr	r5, [r3, #16]
 8022332:	4623      	mov	r3, r4
 8022334:	47a8      	blx	r5
 8022336:	e7ed      	b.n	8022314 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8022338:	af06      	add	r7, sp, #24
 802233a:	4649      	mov	r1, r9
 802233c:	f10d 0910 	add.w	r9, sp, #16
 8022340:	4638      	mov	r0, r7
 8022342:	f7fe fb1d 	bl	8020980 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022346:	e897 0003 	ldmia.w	r7, {r0, r1}
 802234a:	e889 0003 	stmia.w	r9, {r0, r1}
 802234e:	4621      	mov	r1, r4
 8022350:	4648      	mov	r0, r9
 8022352:	f7fc faab 	bl	801e8ac <_ZN8touchgfx4RectaNERKS0_>
 8022356:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802235a:	b113      	cbz	r3, 8022362 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 802235c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8022360:	b913      	cbnz	r3, 8022368 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022362:	9500      	str	r5, [sp, #0]
 8022364:	4623      	mov	r3, r4
 8022366:	e07f      	b.n	8022468 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 8022368:	f8da 3000 	ldr.w	r3, [sl]
 802236c:	2200      	movs	r2, #0
 802236e:	9500      	str	r5, [sp, #0]
 8022370:	4631      	mov	r1, r6
 8022372:	9201      	str	r2, [sp, #4]
 8022374:	4650      	mov	r0, sl
 8022376:	f8d3 b010 	ldr.w	fp, [r3, #16]
 802237a:	aa02      	add	r2, sp, #8
 802237c:	464b      	mov	r3, r9
 802237e:	47d8      	blx	fp
 8022380:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022384:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022388:	4293      	cmp	r3, r2
 802238a:	dd13      	ble.n	80223b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 802238c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022390:	1a9b      	subs	r3, r3, r2
 8022392:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022396:	f8ad 0018 	strh.w	r0, [sp, #24]
 802239a:	4630      	mov	r0, r6
 802239c:	f8ad 201a 	strh.w	r2, [sp, #26]
 80223a0:	aa02      	add	r2, sp, #8
 80223a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80223a6:	4641      	mov	r1, r8
 80223a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80223ac:	463b      	mov	r3, r7
 80223ae:	9500      	str	r5, [sp, #0]
 80223b0:	f7ff fe76 	bl	80220a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80223b4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80223b8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80223bc:	4293      	cmp	r3, r2
 80223be:	dd13      	ble.n	80223e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 80223c0:	1a9b      	subs	r3, r3, r2
 80223c2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80223c6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80223ca:	f8ad 2018 	strh.w	r2, [sp, #24]
 80223ce:	aa02      	add	r2, sp, #8
 80223d0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80223d4:	4630      	mov	r0, r6
 80223d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80223da:	463b      	mov	r3, r7
 80223dc:	f8ad 101e 	strh.w	r1, [sp, #30]
 80223e0:	4641      	mov	r1, r8
 80223e2:	9500      	str	r5, [sp, #0]
 80223e4:	f7ff fe5c 	bl	80220a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80223e8:	88a2      	ldrh	r2, [r4, #4]
 80223ea:	8823      	ldrh	r3, [r4, #0]
 80223ec:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80223f0:	4413      	add	r3, r2
 80223f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80223f6:	440a      	add	r2, r1
 80223f8:	b29b      	uxth	r3, r3
 80223fa:	b292      	uxth	r2, r2
 80223fc:	b218      	sxth	r0, r3
 80223fe:	b211      	sxth	r1, r2
 8022400:	4288      	cmp	r0, r1
 8022402:	dd13      	ble.n	802242c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 8022404:	1a9b      	subs	r3, r3, r2
 8022406:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802240a:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 802240e:	aa02      	add	r2, sp, #8
 8022410:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022414:	4641      	mov	r1, r8
 8022416:	f8ad 301c 	strh.w	r3, [sp, #28]
 802241a:	463b      	mov	r3, r7
 802241c:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022420:	4630      	mov	r0, r6
 8022422:	9500      	str	r5, [sp, #0]
 8022424:	f8ad e01a 	strh.w	lr, [sp, #26]
 8022428:	f7ff fe3a 	bl	80220a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802242c:	88e2      	ldrh	r2, [r4, #6]
 802242e:	8863      	ldrh	r3, [r4, #2]
 8022430:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022434:	4413      	add	r3, r2
 8022436:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802243a:	440a      	add	r2, r1
 802243c:	b29b      	uxth	r3, r3
 802243e:	b292      	uxth	r2, r2
 8022440:	b218      	sxth	r0, r3
 8022442:	b211      	sxth	r1, r2
 8022444:	4288      	cmp	r0, r1
 8022446:	f77f af65 	ble.w	8022314 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 802244a:	1a9b      	subs	r3, r3, r2
 802244c:	f9b4 e000 	ldrsh.w	lr, [r4]
 8022450:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022454:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022458:	463b      	mov	r3, r7
 802245a:	f8ad e018 	strh.w	lr, [sp, #24]
 802245e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022462:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022466:	9500      	str	r5, [sp, #0]
 8022468:	aa02      	add	r2, sp, #8
 802246a:	4641      	mov	r1, r8
 802246c:	4630      	mov	r0, r6
 802246e:	f7ff fe17 	bl	80220a0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022472:	e74f      	b.n	8022314 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8022474:	0802671a 	.word	0x0802671a
 8022478:	08026848 	.word	0x08026848
 802247c:	080267aa 	.word	0x080267aa

08022480 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022480:	b138      	cbz	r0, 8022492 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022482:	2902      	cmp	r1, #2
 8022484:	d00b      	beq.n	802249e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 8022486:	2903      	cmp	r1, #3
 8022488:	d00c      	beq.n	80224a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 802248a:	2901      	cmp	r1, #1
 802248c:	d10d      	bne.n	80224aa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 802248e:	2001      	movs	r0, #1
 8022490:	4770      	bx	lr
 8022492:	2902      	cmp	r1, #2
 8022494:	d006      	beq.n	80224a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8022496:	2903      	cmp	r1, #3
 8022498:	d007      	beq.n	80224aa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 802249a:	2901      	cmp	r1, #1
 802249c:	d1f7      	bne.n	802248e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 802249e:	4b05      	ldr	r3, [pc, #20]	; (80224b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80224a0:	8818      	ldrh	r0, [r3, #0]
 80224a2:	4770      	bx	lr
 80224a4:	f04f 30ff 	mov.w	r0, #4294967295
 80224a8:	4770      	bx	lr
 80224aa:	4b02      	ldr	r3, [pc, #8]	; (80224b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80224ac:	8818      	ldrh	r0, [r3, #0]
 80224ae:	4240      	negs	r0, r0
 80224b0:	4770      	bx	lr
 80224b2:	bf00      	nop
 80224b4:	2000ba46 	.word	0x2000ba46

080224b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80224b8:	b140      	cbz	r0, 80224cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80224ba:	2902      	cmp	r1, #2
 80224bc:	d00c      	beq.n	80224d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 80224be:	2903      	cmp	r1, #3
 80224c0:	d00d      	beq.n	80224de <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80224c2:	2901      	cmp	r1, #1
 80224c4:	d10f      	bne.n	80224e6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 80224c6:	4b09      	ldr	r3, [pc, #36]	; (80224ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 80224c8:	8818      	ldrh	r0, [r3, #0]
 80224ca:	4770      	bx	lr
 80224cc:	2902      	cmp	r1, #2
 80224ce:	d006      	beq.n	80224de <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80224d0:	2903      	cmp	r1, #3
 80224d2:	d008      	beq.n	80224e6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 80224d4:	2901      	cmp	r1, #1
 80224d6:	d1f6      	bne.n	80224c6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 80224d8:	f04f 30ff 	mov.w	r0, #4294967295
 80224dc:	4770      	bx	lr
 80224de:	4b03      	ldr	r3, [pc, #12]	; (80224ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 80224e0:	8818      	ldrh	r0, [r3, #0]
 80224e2:	4240      	negs	r0, r0
 80224e4:	4770      	bx	lr
 80224e6:	2001      	movs	r0, #1
 80224e8:	4770      	bx	lr
 80224ea:	bf00      	nop
 80224ec:	2000ba46 	.word	0x2000ba46

080224f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 80224f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224f4:	b097      	sub	sp, #92	; 0x5c
 80224f6:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 80224fa:	910d      	str	r1, [sp, #52]	; 0x34
 80224fc:	a912      	add	r1, sp, #72	; 0x48
 80224fe:	f899 000d 	ldrb.w	r0, [r9, #13]
 8022502:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
 8022506:	f010 0f08 	tst.w	r0, #8
 802250a:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 802250e:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
 8022512:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
 8022516:	e881 000c 	stmia.w	r1, {r2, r3}
 802251a:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 802251e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8022522:	920b      	str	r2, [sp, #44]	; 0x2c
 8022524:	bf0c      	ite	eq
 8022526:	2200      	moveq	r2, #0
 8022528:	f44f 7280 	movne.w	r2, #256	; 0x100
 802252c:	f899 1006 	ldrb.w	r1, [r9, #6]
 8022530:	f010 0f10 	tst.w	r0, #16
 8022534:	9307      	str	r3, [sp, #28]
 8022536:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 802253a:	bf0c      	ite	eq
 802253c:	2000      	moveq	r0, #0
 802253e:	f44f 7080 	movne.w	r0, #256	; 0x100
 8022542:	430a      	orrs	r2, r1
 8022544:	9308      	str	r3, [sp, #32]
 8022546:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022548:	920a      	str	r2, [sp, #40]	; 0x28
 802254a:	f000 813b 	beq.w	80227c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 802254e:	f899 2007 	ldrb.w	r2, [r9, #7]
 8022552:	4302      	orrs	r2, r0
 8022554:	9209      	str	r2, [sp, #36]	; 0x24
 8022556:	f000 8135 	beq.w	80227c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 802255a:	f999 1009 	ldrsb.w	r1, [r9, #9]
 802255e:	2c00      	cmp	r4, #0
 8022560:	f000 80db 	beq.w	802271a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8022564:	1a61      	subs	r1, r4, r1
 8022566:	b28c      	uxth	r4, r1
 8022568:	0422      	lsls	r2, r4, #16
 802256a:	d504      	bpl.n	8022576 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 802256c:	eba8 0404 	sub.w	r4, r8, r4
 8022570:	fa0f f884 	sxth.w	r8, r4
 8022574:	2400      	movs	r4, #0
 8022576:	f9b3 0000 	ldrsh.w	r0, [r3]
 802257a:	88df      	ldrh	r7, [r3, #6]
 802257c:	4580      	cmp	r8, r0
 802257e:	b282      	uxth	r2, r0
 8022580:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8022584:	bfb8      	it	lt
 8022586:	18a1      	addlt	r1, r4, r2
 8022588:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 802258c:	44be      	add	lr, r7
 802258e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8022592:	bfbc      	itt	lt
 8022594:	eba1 0108 	sublt.w	r1, r1, r8
 8022598:	4680      	movlt	r8, r0
 802259a:	a812      	add	r0, sp, #72	; 0x48
 802259c:	bfb8      	it	lt
 802259e:	b28c      	uxthlt	r4, r1
 80225a0:	8899      	ldrh	r1, [r3, #4]
 80225a2:	fa0f f38e 	sxth.w	r3, lr
 80225a6:	440a      	add	r2, r1
 80225a8:	4641      	mov	r1, r8
 80225aa:	930e      	str	r3, [sp, #56]	; 0x38
 80225ac:	4bb1      	ldr	r3, [pc, #708]	; (8022874 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80225ae:	b212      	sxth	r2, r2
 80225b0:	f893 b000 	ldrb.w	fp, [r3]
 80225b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80225b6:	f10b 3eff 	add.w	lr, fp, #4294967295
 80225ba:	9a07      	ldr	r2, [sp, #28]
 80225bc:	f1de 0300 	rsbs	r3, lr, #0
 80225c0:	eb43 030e 	adc.w	r3, r3, lr
 80225c4:	930c      	str	r3, [sp, #48]	; 0x30
 80225c6:	4653      	mov	r3, sl
 80225c8:	f7fb fd8a 	bl	801e0e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80225cc:	4641      	mov	r1, r8
 80225ce:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80225d2:	4653      	mov	r3, sl
 80225d4:	9a07      	ldr	r2, [sp, #28]
 80225d6:	a812      	add	r0, sp, #72	; 0x48
 80225d8:	f7fb fd9d 	bl	801e116 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80225dc:	a916      	add	r1, sp, #88	; 0x58
 80225de:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80225e2:	a815      	add	r0, sp, #84	; 0x54
 80225e4:	f7fb ffbe 	bl	801e564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80225e8:	f1ba 0f00 	cmp.w	sl, #0
 80225ec:	f040 8099 	bne.w	8022722 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 80225f0:	f1bb 0f01 	cmp.w	fp, #1
 80225f4:	f040 809d 	bne.w	8022732 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 80225f8:	4a9f      	ldr	r2, [pc, #636]	; (8022878 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80225fa:	2d04      	cmp	r5, #4
 80225fc:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8022600:	8811      	ldrh	r1, [r2, #0]
 8022602:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8022606:	fb01 2303 	mla	r3, r1, r3, r2
 802260a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802260c:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 8022610:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8022614:	fa43 f305 	asr.w	r3, r3, r5
 8022618:	b2db      	uxtb	r3, r3
 802261a:	930d      	str	r3, [sp, #52]	; 0x34
 802261c:	ea6f 0303 	mvn.w	r3, r3
 8022620:	b2db      	uxtb	r3, r3
 8022622:	9310      	str	r3, [sp, #64]	; 0x40
 8022624:	f1c5 0308 	rsb	r3, r5, #8
 8022628:	b2db      	uxtb	r3, r3
 802262a:	9309      	str	r3, [sp, #36]	; 0x24
 802262c:	d104      	bne.n	8022638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 802262e:	f899 300d 	ldrb.w	r3, [r9, #13]
 8022632:	07da      	lsls	r2, r3, #31
 8022634:	f100 8118 	bmi.w	8022868 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8022638:	b91c      	cbnz	r4, 8022642 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 802263a:	9b08      	ldr	r3, [sp, #32]
 802263c:	2b00      	cmp	r3, #0
 802263e:	f000 80c4 	beq.w	80227ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 8022642:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8022646:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022648:	fb16 4303 	smlabb	r3, r6, r3, r4
 802264c:	fb13 f305 	smulbb	r3, r3, r5
 8022650:	b29b      	uxth	r3, r3
 8022652:	f003 0207 	and.w	r2, r3, #7
 8022656:	1a8a      	subs	r2, r1, r2
 8022658:	9926      	ldr	r1, [sp, #152]	; 0x98
 802265a:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 802265e:	b2d2      	uxtb	r2, r2
 8022660:	9326      	str	r3, [sp, #152]	; 0x98
 8022662:	9b08      	ldr	r3, [sp, #32]
 8022664:	1aff      	subs	r7, r7, r3
 8022666:	b2bf      	uxth	r7, r7
 8022668:	4651      	mov	r1, sl
 802266a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802266c:	f7ff ff08 	bl	8022480 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022670:	4651      	mov	r1, sl
 8022672:	4681      	mov	r9, r0
 8022674:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022676:	f7ff ff1f 	bl	80224b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802267a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802267c:	9907      	ldr	r1, [sp, #28]
 802267e:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8022682:	eba3 0e01 	sub.w	lr, r3, r1
 8022686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022688:	eba8 0104 	sub.w	r1, r8, r4
 802268c:	1a59      	subs	r1, r3, r1
 802268e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022690:	4299      	cmp	r1, r3
 8022692:	bfd4      	ite	le
 8022694:	ebc4 0101 	rsble	r1, r4, r1
 8022698:	ebc4 0103 	rsbgt	r1, r4, r3
 802269c:	4577      	cmp	r7, lr
 802269e:	fb09 0011 	mls	r0, r9, r1, r0
 80226a2:	eba6 0301 	sub.w	r3, r6, r1
 80226a6:	bfa8      	it	ge
 80226a8:	4677      	movge	r7, lr
 80226aa:	0040      	lsls	r0, r0, #1
 80226ac:	436b      	muls	r3, r5
 80226ae:	9008      	str	r0, [sp, #32]
 80226b0:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80226b4:	fb0a f000 	mul.w	r0, sl, r0
 80226b8:	9007      	str	r0, [sp, #28]
 80226ba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80226bc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80226c0:	900e      	str	r0, [sp, #56]	; 0x38
 80226c2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80226c4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80226c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80226ca:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80226cc:	f000 001f 	and.w	r0, r0, #31
 80226d0:	9011      	str	r0, [sp, #68]	; 0x44
 80226d2:	2f00      	cmp	r7, #0
 80226d4:	dd76      	ble.n	80227c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 80226d6:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 80226da:	4689      	mov	r9, r1
 80226dc:	46d8      	mov	r8, fp
 80226de:	900c      	str	r0, [sp, #48]	; 0x30
 80226e0:	f1b9 0f00 	cmp.w	r9, #0
 80226e4:	f340 80a6 	ble.w	8022834 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80226e8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80226ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80226ec:	7800      	ldrb	r0, [r0, #0]
 80226ee:	4090      	lsls	r0, r2
 80226f0:	4020      	ands	r0, r4
 80226f2:	d009      	beq.n	8022708 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 80226f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80226f6:	4320      	orrs	r0, r4
 80226f8:	28ff      	cmp	r0, #255	; 0xff
 80226fa:	d168      	bne.n	80227ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80226fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80226fe:	2cff      	cmp	r4, #255	; 0xff
 8022700:	d165      	bne.n	80227ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8022702:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022704:	f8a8 4000 	strh.w	r4, [r8]
 8022708:	2a00      	cmp	r2, #0
 802270a:	f000 808e 	beq.w	802282a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 802270e:	1b52      	subs	r2, r2, r5
 8022710:	b2d2      	uxtb	r2, r2
 8022712:	44d0      	add	r8, sl
 8022714:	f109 39ff 	add.w	r9, r9, #4294967295
 8022718:	e7e2      	b.n	80226e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 802271a:	4488      	add	r8, r1
 802271c:	fa0f f888 	sxth.w	r8, r8
 8022720:	e729      	b.n	8022576 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8022722:	f1ba 0f01 	cmp.w	sl, #1
 8022726:	f47f af67 	bne.w	80225f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 802272a:	f1bb 0f01 	cmp.w	fp, #1
 802272e:	f47f af63 	bne.w	80225f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022732:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8022880 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022736:	f8db 0000 	ldr.w	r0, [fp]
 802273a:	6803      	ldr	r3, [r0, #0]
 802273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802273e:	4798      	blx	r3
 8022740:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8022744:	465a      	mov	r2, fp
 8022746:	d006      	beq.n	8022756 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8022748:	2d04      	cmp	r5, #4
 802274a:	bf0a      	itet	eq
 802274c:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 8022750:	2300      	movne	r3, #0
 8022752:	f003 0301 	andeq.w	r3, r3, #1
 8022756:	05c0      	lsls	r0, r0, #23
 8022758:	f140 8081 	bpl.w	802285e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 802275c:	2d08      	cmp	r5, #8
 802275e:	d17e      	bne.n	802285e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 8022760:	2b00      	cmp	r3, #0
 8022762:	bf0c      	ite	eq
 8022764:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8022768:	2180      	movne	r1, #128	; 0x80
 802276a:	2c00      	cmp	r4, #0
 802276c:	f47f af44 	bne.w	80225f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022770:	9b08      	ldr	r3, [sp, #32]
 8022772:	2b00      	cmp	r3, #0
 8022774:	f47f af40 	bne.w	80225f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802277a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802277c:	4443      	add	r3, r8
 802277e:	4298      	cmp	r0, r3
 8022780:	f6ff af3a 	blt.w	80225f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022784:	9807      	ldr	r0, [sp, #28]
 8022786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022788:	4403      	add	r3, r0
 802278a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802278c:	4298      	cmp	r0, r3
 802278e:	f6ff af33 	blt.w	80225f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022792:	2d08      	cmp	r5, #8
 8022794:	6810      	ldr	r0, [r2, #0]
 8022796:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 802279a:	bf18      	it	ne
 802279c:	3601      	addne	r6, #1
 802279e:	6804      	ldr	r4, [r0, #0]
 80227a0:	9105      	str	r1, [sp, #20]
 80227a2:	bf18      	it	ne
 80227a4:	f026 0601 	bicne.w	r6, r6, #1
 80227a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80227aa:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80227ae:	bf18      	it	ne
 80227b0:	b2b6      	uxthne	r6, r6
 80227b2:	9104      	str	r1, [sp, #16]
 80227b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80227b6:	9602      	str	r6, [sp, #8]
 80227b8:	9103      	str	r1, [sp, #12]
 80227ba:	9926      	ldr	r1, [sp, #152]	; 0x98
 80227bc:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80227c0:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 80227c2:	47a0      	blx	r4
 80227c4:	b017      	add	sp, #92	; 0x5c
 80227c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80227cc:	e74c      	b.n	8022668 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 80227ce:	f8b8 c000 	ldrh.w	ip, [r8]
 80227d2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80227d6:	f42c 66ff 	bic.w	r6, ip, #2040	; 0x7f8
 80227da:	fb10 f004 	smulbb	r0, r0, r4
 80227de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80227e0:	f026 0607 	bic.w	r6, r6, #7
 80227e4:	f5c0 3e80 	rsb	lr, r0, #65536	; 0x10000
 80227e8:	fb0e f606 	mul.w	r6, lr, r6
 80227ec:	fb00 6604 	mla	r6, r0, r4, r6
 80227f0:	4c22      	ldr	r4, [pc, #136]	; (802287c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80227f2:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 80227f6:	940a      	str	r4, [sp, #40]	; 0x28
 80227f8:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 80227fc:	f00c 0c1f 	and.w	ip, ip, #31
 8022800:	fb0e f404 	mul.w	r4, lr, r4
 8022804:	fb0e fc0c 	mul.w	ip, lr, ip
 8022808:	4626      	mov	r6, r4
 802280a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802280c:	fb00 6404 	mla	r4, r0, r4, r6
 8022810:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022812:	0c24      	lsrs	r4, r4, #16
 8022814:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022818:	4334      	orrs	r4, r6
 802281a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802281c:	fb00 cc06 	mla	ip, r0, r6, ip
 8022820:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 8022824:	ea44 040c 	orr.w	r4, r4, ip
 8022828:	e76c      	b.n	8022704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 802282a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802282c:	3201      	adds	r2, #1
 802282e:	9226      	str	r2, [sp, #152]	; 0x98
 8022830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022832:	e76e      	b.n	8022712 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8022834:	b16b      	cbz	r3, 8022852 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 8022836:	4293      	cmp	r3, r2
 8022838:	dd08      	ble.n	802284c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 802283a:	1b58      	subs	r0, r3, r5
 802283c:	2408      	movs	r4, #8
 802283e:	1a80      	subs	r0, r0, r2
 8022840:	fb90 f0f4 	sdiv	r0, r0, r4
 8022844:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8022846:	3001      	adds	r0, #1
 8022848:	4404      	add	r4, r0
 802284a:	9426      	str	r4, [sp, #152]	; 0x98
 802284c:	1ad2      	subs	r2, r2, r3
 802284e:	f002 0207 	and.w	r2, r2, #7
 8022852:	9807      	ldr	r0, [sp, #28]
 8022854:	3f01      	subs	r7, #1
 8022856:	9c08      	ldr	r4, [sp, #32]
 8022858:	4420      	add	r0, r4
 802285a:	4483      	add	fp, r0
 802285c:	e739      	b.n	80226d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 802285e:	2b00      	cmp	r3, #0
 8022860:	f43f aeca 	beq.w	80225f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022864:	2180      	movs	r1, #128	; 0x80
 8022866:	e780      	b.n	802276a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 8022868:	07f3      	lsls	r3, r6, #31
 802286a:	f57f aee5 	bpl.w	8022638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 802286e:	3601      	adds	r6, #1
 8022870:	b2b6      	uxth	r6, r6
 8022872:	e6e1      	b.n	8022638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8022874:	2000ba44 	.word	0x2000ba44
 8022878:	2000ba46 	.word	0x2000ba46
 802287c:	fffff800 	.word	0xfffff800
 8022880:	2000ba4c 	.word	0x2000ba4c

08022884 <CRC_Lock>:
 8022884:	4a13      	ldr	r2, [pc, #76]	; (80228d4 <CRC_Lock+0x50>)
 8022886:	6813      	ldr	r3, [r2, #0]
 8022888:	f023 0301 	bic.w	r3, r3, #1
 802288c:	6013      	str	r3, [r2, #0]
 802288e:	4b12      	ldr	r3, [pc, #72]	; (80228d8 <CRC_Lock+0x54>)
 8022890:	681b      	ldr	r3, [r3, #0]
 8022892:	b9a3      	cbnz	r3, 80228be <CRC_Lock+0x3a>
 8022894:	4b11      	ldr	r3, [pc, #68]	; (80228dc <CRC_Lock+0x58>)
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802289c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80228a0:	d10d      	bne.n	80228be <CRC_Lock+0x3a>
 80228a2:	4b0f      	ldr	r3, [pc, #60]	; (80228e0 <CRC_Lock+0x5c>)
 80228a4:	2201      	movs	r2, #1
 80228a6:	601a      	str	r2, [r3, #0]
 80228a8:	681a      	ldr	r2, [r3, #0]
 80228aa:	2a00      	cmp	r2, #0
 80228ac:	d1fc      	bne.n	80228a8 <CRC_Lock+0x24>
 80228ae:	4b0d      	ldr	r3, [pc, #52]	; (80228e4 <CRC_Lock+0x60>)
 80228b0:	6018      	str	r0, [r3, #0]
 80228b2:	6818      	ldr	r0, [r3, #0]
 80228b4:	4288      	cmp	r0, r1
 80228b6:	bf14      	ite	ne
 80228b8:	2000      	movne	r0, #0
 80228ba:	2001      	moveq	r0, #1
 80228bc:	4770      	bx	lr
 80228be:	4b0a      	ldr	r3, [pc, #40]	; (80228e8 <CRC_Lock+0x64>)
 80228c0:	2201      	movs	r2, #1
 80228c2:	601a      	str	r2, [r3, #0]
 80228c4:	681a      	ldr	r2, [r3, #0]
 80228c6:	2a00      	cmp	r2, #0
 80228c8:	d1fc      	bne.n	80228c4 <CRC_Lock+0x40>
 80228ca:	4b08      	ldr	r3, [pc, #32]	; (80228ec <CRC_Lock+0x68>)
 80228cc:	6018      	str	r0, [r3, #0]
 80228ce:	6818      	ldr	r0, [r3, #0]
 80228d0:	4281      	cmp	r1, r0
 80228d2:	e7f0      	b.n	80228b6 <CRC_Lock+0x32>
 80228d4:	e0002000 	.word	0xe0002000
 80228d8:	e0042000 	.word	0xe0042000
 80228dc:	5c001000 	.word	0x5c001000
 80228e0:	58024c08 	.word	0x58024c08
 80228e4:	58024c00 	.word	0x58024c00
 80228e8:	40023008 	.word	0x40023008
 80228ec:	40023000 	.word	0x40023000

080228f0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80228f0:	6101      	str	r1, [r0, #16]
 80228f2:	4770      	bx	lr

080228f4 <_ZN8touchgfx8Gestures4tickEv>:
 80228f4:	7b83      	ldrb	r3, [r0, #14]
 80228f6:	b14b      	cbz	r3, 802290c <_ZN8touchgfx8Gestures4tickEv+0x18>
 80228f8:	8903      	ldrh	r3, [r0, #8]
 80228fa:	3301      	adds	r3, #1
 80228fc:	b29b      	uxth	r3, r3
 80228fe:	2b07      	cmp	r3, #7
 8022900:	8103      	strh	r3, [r0, #8]
 8022902:	bf81      	itttt	hi
 8022904:	2300      	movhi	r3, #0
 8022906:	8143      	strhhi	r3, [r0, #10]
 8022908:	8183      	strhhi	r3, [r0, #12]
 802290a:	7383      	strbhi	r3, [r0, #14]
 802290c:	4770      	bx	lr
	...

08022910 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022910:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022914:	4604      	mov	r4, r0
 8022916:	4698      	mov	r8, r3
 8022918:	8880      	ldrh	r0, [r0, #4]
 802291a:	4617      	mov	r7, r2
 802291c:	4b1d      	ldr	r3, [pc, #116]	; (8022994 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802291e:	460e      	mov	r6, r1
 8022920:	f8ad 0006 	strh.w	r0, [sp, #6]
 8022924:	eba8 0000 	sub.w	r0, r8, r0
 8022928:	9300      	str	r3, [sp, #0]
 802292a:	2300      	movs	r3, #0
 802292c:	b280      	uxth	r0, r0
 802292e:	8aa2      	ldrh	r2, [r4, #20]
 8022930:	f88d 3004 	strb.w	r3, [sp, #4]
 8022934:	b203      	sxth	r3, r0
 8022936:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802293a:	88e1      	ldrh	r1, [r4, #6]
 802293c:	2b00      	cmp	r3, #0
 802293e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022942:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022946:	bfb8      	it	lt
 8022948:	4240      	neglt	r0, r0
 802294a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802294e:	bfb8      	it	lt
 8022950:	b203      	sxthlt	r3, r0
 8022952:	4293      	cmp	r3, r2
 8022954:	dc0c      	bgt.n	8022970 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 8022956:	1a69      	subs	r1, r5, r1
 8022958:	b289      	uxth	r1, r1
 802295a:	b20b      	sxth	r3, r1
 802295c:	2b00      	cmp	r3, #0
 802295e:	bfbc      	itt	lt
 8022960:	4249      	neglt	r1, r1
 8022962:	b20b      	sxthlt	r3, r1
 8022964:	429a      	cmp	r2, r3
 8022966:	db03      	blt.n	8022970 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 8022968:	2000      	movs	r0, #0
 802296a:	b004      	add	sp, #16
 802296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022970:	6920      	ldr	r0, [r4, #16]
 8022972:	4669      	mov	r1, sp
 8022974:	eba8 0606 	sub.w	r6, r8, r6
 8022978:	1bef      	subs	r7, r5, r7
 802297a:	6803      	ldr	r3, [r0, #0]
 802297c:	685b      	ldr	r3, [r3, #4]
 802297e:	4798      	blx	r3
 8022980:	2300      	movs	r3, #0
 8022982:	2001      	movs	r0, #1
 8022984:	8166      	strh	r6, [r4, #10]
 8022986:	8123      	strh	r3, [r4, #8]
 8022988:	81a7      	strh	r7, [r4, #12]
 802298a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802298e:	80e5      	strh	r5, [r4, #6]
 8022990:	73a0      	strb	r0, [r4, #14]
 8022992:	e7ea      	b.n	802296a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 8022994:	08023db4 	.word	0x08023db4

08022998 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022998:	b5f0      	push	{r4, r5, r6, r7, lr}
 802299a:	461e      	mov	r6, r3
 802299c:	1e4b      	subs	r3, r1, #1
 802299e:	b085      	sub	sp, #20
 80229a0:	4604      	mov	r4, r0
 80229a2:	2b01      	cmp	r3, #1
 80229a4:	460d      	mov	r5, r1
 80229a6:	4617      	mov	r7, r2
 80229a8:	d845      	bhi.n	8022a36 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 80229aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80229ae:	1cd3      	adds	r3, r2, #3
 80229b0:	b29b      	uxth	r3, r3
 80229b2:	2b06      	cmp	r3, #6
 80229b4:	d913      	bls.n	80229de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 80229b6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80229ba:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80229be:	4820      	ldr	r0, [pc, #128]	; (8022a40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 80229c0:	f8ad 100c 	strh.w	r1, [sp, #12]
 80229c4:	a901      	add	r1, sp, #4
 80229c6:	9001      	str	r0, [sp, #4]
 80229c8:	2000      	movs	r0, #0
 80229ca:	f8ad 200a 	strh.w	r2, [sp, #10]
 80229ce:	f88d 0008 	strb.w	r0, [sp, #8]
 80229d2:	6920      	ldr	r0, [r4, #16]
 80229d4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80229d8:	6803      	ldr	r3, [r0, #0]
 80229da:	689b      	ldr	r3, [r3, #8]
 80229dc:	4798      	blx	r3
 80229de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80229e2:	1cd3      	adds	r3, r2, #3
 80229e4:	b29b      	uxth	r3, r3
 80229e6:	2b06      	cmp	r3, #6
 80229e8:	d913      	bls.n	8022a12 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 80229ea:	4815      	ldr	r0, [pc, #84]	; (8022a40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 80229ec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80229f0:	9001      	str	r0, [sp, #4]
 80229f2:	2001      	movs	r0, #1
 80229f4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80229f8:	f88d 0008 	strb.w	r0, [sp, #8]
 80229fc:	6920      	ldr	r0, [r4, #16]
 80229fe:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022a02:	a901      	add	r1, sp, #4
 8022a04:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022a08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022a0c:	6803      	ldr	r3, [r0, #0]
 8022a0e:	689b      	ldr	r3, [r3, #8]
 8022a10:	4798      	blx	r3
 8022a12:	4b0c      	ldr	r3, [pc, #48]	; (8022a44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 8022a14:	a901      	add	r1, sp, #4
 8022a16:	6920      	ldr	r0, [r4, #16]
 8022a18:	9301      	str	r3, [sp, #4]
 8022a1a:	2300      	movs	r3, #0
 8022a1c:	f88d 5008 	strb.w	r5, [sp, #8]
 8022a20:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022a24:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022a28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022a2c:	6803      	ldr	r3, [r0, #0]
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	4798      	blx	r3
 8022a32:	b005      	add	sp, #20
 8022a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a36:	2900      	cmp	r1, #0
 8022a38:	d1eb      	bne.n	8022a12 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 8022a3a:	80a2      	strh	r2, [r4, #4]
 8022a3c:	80c6      	strh	r6, [r0, #6]
 8022a3e:	e7e8      	b.n	8022a12 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 8022a40:	08026268 	.word	0x08026268
 8022a44:	08023da0 	.word	0x08023da0

08022a48 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 8022a48:	b510      	push	{r4, lr}
 8022a4a:	8083      	strh	r3, [r0, #4]
 8022a4c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8022a50:	6101      	str	r1, [r0, #16]
 8022a52:	7183      	strb	r3, [r0, #6]
 8022a54:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8022a58:	8282      	strh	r2, [r0, #20]
 8022a5a:	71c3      	strb	r3, [r0, #7]
 8022a5c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8022a60:	7203      	strb	r3, [r0, #8]
 8022a62:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022a66:	7243      	strb	r3, [r0, #9]
 8022a68:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8022a6c:	8143      	strh	r3, [r0, #10]
 8022a6e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022a72:	8183      	strh	r3, [r0, #12]
 8022a74:	4b01      	ldr	r3, [pc, #4]	; (8022a7c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 8022a76:	6003      	str	r3, [r0, #0]
 8022a78:	bd10      	pop	{r4, pc}
 8022a7a:	bf00      	nop
 8022a7c:	080269dc 	.word	0x080269dc

08022a80 <_ZNK8touchgfx9ConstFont4findEt>:
 8022a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a82:	8a84      	ldrh	r4, [r0, #20]
 8022a84:	2500      	movs	r5, #0
 8022a86:	260e      	movs	r6, #14
 8022a88:	3c01      	subs	r4, #1
 8022a8a:	42a5      	cmp	r5, r4
 8022a8c:	dc0c      	bgt.n	8022aa8 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8022a8e:	192a      	adds	r2, r5, r4
 8022a90:	6903      	ldr	r3, [r0, #16]
 8022a92:	1052      	asrs	r2, r2, #1
 8022a94:	fb06 3302 	mla	r3, r6, r2, r3
 8022a98:	889f      	ldrh	r7, [r3, #4]
 8022a9a:	42b9      	cmp	r1, r7
 8022a9c:	da01      	bge.n	8022aa2 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8022a9e:	1e54      	subs	r4, r2, #1
 8022aa0:	e7f3      	b.n	8022a8a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8022aa2:	dd02      	ble.n	8022aaa <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8022aa4:	1c55      	adds	r5, r2, #1
 8022aa6:	e7f0      	b.n	8022a8a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8022aa8:	2300      	movs	r3, #0
 8022aaa:	4618      	mov	r0, r3
 8022aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022aae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8022aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ab0:	4605      	mov	r5, r0
 8022ab2:	4617      	mov	r7, r2
 8022ab4:	461e      	mov	r6, r3
 8022ab6:	f7ff ffe3 	bl	8022a80 <_ZNK8touchgfx9ConstFont4findEt>
 8022aba:	b9e0      	cbnz	r0, 8022af6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8022abc:	b911      	cbnz	r1, 8022ac4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8022abe:	2400      	movs	r4, #0
 8022ac0:	4620      	mov	r0, r4
 8022ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ac4:	290a      	cmp	r1, #10
 8022ac6:	d0fa      	beq.n	8022abe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8022ac8:	682b      	ldr	r3, [r5, #0]
 8022aca:	4628      	mov	r0, r5
 8022acc:	691b      	ldr	r3, [r3, #16]
 8022ace:	4798      	blx	r3
 8022ad0:	4601      	mov	r1, r0
 8022ad2:	4628      	mov	r0, r5
 8022ad4:	f7ff ffd4 	bl	8022a80 <_ZNK8touchgfx9ConstFont4findEt>
 8022ad8:	4604      	mov	r4, r0
 8022ada:	2800      	cmp	r0, #0
 8022adc:	d0ef      	beq.n	8022abe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8022ade:	682b      	ldr	r3, [r5, #0]
 8022ae0:	4621      	mov	r1, r4
 8022ae2:	4628      	mov	r0, r5
 8022ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ae6:	4798      	blx	r3
 8022ae8:	6038      	str	r0, [r7, #0]
 8022aea:	682b      	ldr	r3, [r5, #0]
 8022aec:	4628      	mov	r0, r5
 8022aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022af0:	4798      	blx	r3
 8022af2:	7030      	strb	r0, [r6, #0]
 8022af4:	e7e4      	b.n	8022ac0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8022af6:	4604      	mov	r4, r0
 8022af8:	e7f1      	b.n	8022ade <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08022afa <__cxa_pure_virtual>:
 8022afa:	b508      	push	{r3, lr}
 8022afc:	f000 f810 	bl	8022b20 <_ZSt9terminatev>

08022b00 <_ZdlPvj>:
 8022b00:	f000 b800 	b.w	8022b04 <_ZdlPv>

08022b04 <_ZdlPv>:
 8022b04:	f000 b880 	b.w	8022c08 <free>

08022b08 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022b08:	b508      	push	{r3, lr}
 8022b0a:	4780      	blx	r0
 8022b0c:	f000 f80d 	bl	8022b2a <abort>

08022b10 <_ZSt13get_terminatev>:
 8022b10:	4b02      	ldr	r3, [pc, #8]	; (8022b1c <_ZSt13get_terminatev+0xc>)
 8022b12:	6818      	ldr	r0, [r3, #0]
 8022b14:	f3bf 8f5b 	dmb	ish
 8022b18:	4770      	bx	lr
 8022b1a:	bf00      	nop
 8022b1c:	20000078 	.word	0x20000078

08022b20 <_ZSt9terminatev>:
 8022b20:	b508      	push	{r3, lr}
 8022b22:	f7ff fff5 	bl	8022b10 <_ZSt13get_terminatev>
 8022b26:	f7ff ffef 	bl	8022b08 <_ZN10__cxxabiv111__terminateEPFvvE>

08022b2a <abort>:
 8022b2a:	b508      	push	{r3, lr}
 8022b2c:	2006      	movs	r0, #6
 8022b2e:	f000 fc2f 	bl	8023390 <raise>
 8022b32:	2001      	movs	r0, #1
 8022b34:	f7f7 fd4c 	bl	801a5d0 <_exit>

08022b38 <__assert_func>:
 8022b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022b3a:	461c      	mov	r4, r3
 8022b3c:	4b09      	ldr	r3, [pc, #36]	; (8022b64 <__assert_func+0x2c>)
 8022b3e:	681b      	ldr	r3, [r3, #0]
 8022b40:	4605      	mov	r5, r0
 8022b42:	68d8      	ldr	r0, [r3, #12]
 8022b44:	b152      	cbz	r2, 8022b5c <__assert_func+0x24>
 8022b46:	4b08      	ldr	r3, [pc, #32]	; (8022b68 <__assert_func+0x30>)
 8022b48:	9100      	str	r1, [sp, #0]
 8022b4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8022b4e:	4907      	ldr	r1, [pc, #28]	; (8022b6c <__assert_func+0x34>)
 8022b50:	462b      	mov	r3, r5
 8022b52:	4622      	mov	r2, r4
 8022b54:	f000 f81a 	bl	8022b8c <fiprintf>
 8022b58:	f7ff ffe7 	bl	8022b2a <abort>
 8022b5c:	4b04      	ldr	r3, [pc, #16]	; (8022b70 <__assert_func+0x38>)
 8022b5e:	461a      	mov	r2, r3
 8022b60:	e7f2      	b.n	8022b48 <__assert_func+0x10>
 8022b62:	bf00      	nop
 8022b64:	2000007c 	.word	0x2000007c
 8022b68:	08026a20 	.word	0x08026a20
 8022b6c:	08026a2d 	.word	0x08026a2d
 8022b70:	08026a5b 	.word	0x08026a5b

08022b74 <atexit>:
 8022b74:	2300      	movs	r3, #0
 8022b76:	4601      	mov	r1, r0
 8022b78:	461a      	mov	r2, r3
 8022b7a:	4618      	mov	r0, r3
 8022b7c:	f000 bce4 	b.w	8023548 <__register_exitproc>

08022b80 <__errno>:
 8022b80:	4b01      	ldr	r3, [pc, #4]	; (8022b88 <__errno+0x8>)
 8022b82:	6818      	ldr	r0, [r3, #0]
 8022b84:	4770      	bx	lr
 8022b86:	bf00      	nop
 8022b88:	2000007c 	.word	0x2000007c

08022b8c <fiprintf>:
 8022b8c:	b40e      	push	{r1, r2, r3}
 8022b8e:	b503      	push	{r0, r1, lr}
 8022b90:	4601      	mov	r1, r0
 8022b92:	ab03      	add	r3, sp, #12
 8022b94:	4805      	ldr	r0, [pc, #20]	; (8022bac <fiprintf+0x20>)
 8022b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8022b9a:	6800      	ldr	r0, [r0, #0]
 8022b9c:	9301      	str	r3, [sp, #4]
 8022b9e:	f000 f921 	bl	8022de4 <_vfiprintf_r>
 8022ba2:	b002      	add	sp, #8
 8022ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8022ba8:	b003      	add	sp, #12
 8022baa:	4770      	bx	lr
 8022bac:	2000007c 	.word	0x2000007c

08022bb0 <__libc_init_array>:
 8022bb0:	b570      	push	{r4, r5, r6, lr}
 8022bb2:	4e0d      	ldr	r6, [pc, #52]	; (8022be8 <__libc_init_array+0x38>)
 8022bb4:	4c0d      	ldr	r4, [pc, #52]	; (8022bec <__libc_init_array+0x3c>)
 8022bb6:	1ba4      	subs	r4, r4, r6
 8022bb8:	10a4      	asrs	r4, r4, #2
 8022bba:	2500      	movs	r5, #0
 8022bbc:	42a5      	cmp	r5, r4
 8022bbe:	d109      	bne.n	8022bd4 <__libc_init_array+0x24>
 8022bc0:	4e0b      	ldr	r6, [pc, #44]	; (8022bf0 <__libc_init_array+0x40>)
 8022bc2:	4c0c      	ldr	r4, [pc, #48]	; (8022bf4 <__libc_init_array+0x44>)
 8022bc4:	f000 ffb0 	bl	8023b28 <_init>
 8022bc8:	1ba4      	subs	r4, r4, r6
 8022bca:	10a4      	asrs	r4, r4, #2
 8022bcc:	2500      	movs	r5, #0
 8022bce:	42a5      	cmp	r5, r4
 8022bd0:	d105      	bne.n	8022bde <__libc_init_array+0x2e>
 8022bd2:	bd70      	pop	{r4, r5, r6, pc}
 8022bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022bd8:	4798      	blx	r3
 8022bda:	3501      	adds	r5, #1
 8022bdc:	e7ee      	b.n	8022bbc <__libc_init_array+0xc>
 8022bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022be2:	4798      	blx	r3
 8022be4:	3501      	adds	r5, #1
 8022be6:	e7f2      	b.n	8022bce <__libc_init_array+0x1e>
 8022be8:	080bf048 	.word	0x080bf048
 8022bec:	080bf048 	.word	0x080bf048
 8022bf0:	080bf048 	.word	0x080bf048
 8022bf4:	080bf058 	.word	0x080bf058

08022bf8 <malloc>:
 8022bf8:	4b02      	ldr	r3, [pc, #8]	; (8022c04 <malloc+0xc>)
 8022bfa:	4601      	mov	r1, r0
 8022bfc:	6818      	ldr	r0, [r3, #0]
 8022bfe:	f000 b86d 	b.w	8022cdc <_malloc_r>
 8022c02:	bf00      	nop
 8022c04:	2000007c 	.word	0x2000007c

08022c08 <free>:
 8022c08:	4b02      	ldr	r3, [pc, #8]	; (8022c14 <free+0xc>)
 8022c0a:	4601      	mov	r1, r0
 8022c0c:	6818      	ldr	r0, [r3, #0]
 8022c0e:	f000 b817 	b.w	8022c40 <_free_r>
 8022c12:	bf00      	nop
 8022c14:	2000007c 	.word	0x2000007c

08022c18 <memcpy>:
 8022c18:	b510      	push	{r4, lr}
 8022c1a:	1e43      	subs	r3, r0, #1
 8022c1c:	440a      	add	r2, r1
 8022c1e:	4291      	cmp	r1, r2
 8022c20:	d100      	bne.n	8022c24 <memcpy+0xc>
 8022c22:	bd10      	pop	{r4, pc}
 8022c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022c2c:	e7f7      	b.n	8022c1e <memcpy+0x6>

08022c2e <memset>:
 8022c2e:	4402      	add	r2, r0
 8022c30:	4603      	mov	r3, r0
 8022c32:	4293      	cmp	r3, r2
 8022c34:	d100      	bne.n	8022c38 <memset+0xa>
 8022c36:	4770      	bx	lr
 8022c38:	f803 1b01 	strb.w	r1, [r3], #1
 8022c3c:	e7f9      	b.n	8022c32 <memset+0x4>
	...

08022c40 <_free_r>:
 8022c40:	b538      	push	{r3, r4, r5, lr}
 8022c42:	4605      	mov	r5, r0
 8022c44:	2900      	cmp	r1, #0
 8022c46:	d045      	beq.n	8022cd4 <_free_r+0x94>
 8022c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022c4c:	1f0c      	subs	r4, r1, #4
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	bfb8      	it	lt
 8022c52:	18e4      	addlt	r4, r4, r3
 8022c54:	f000 feba 	bl	80239cc <__malloc_lock>
 8022c58:	4a1f      	ldr	r2, [pc, #124]	; (8022cd8 <_free_r+0x98>)
 8022c5a:	6813      	ldr	r3, [r2, #0]
 8022c5c:	4610      	mov	r0, r2
 8022c5e:	b933      	cbnz	r3, 8022c6e <_free_r+0x2e>
 8022c60:	6063      	str	r3, [r4, #4]
 8022c62:	6014      	str	r4, [r2, #0]
 8022c64:	4628      	mov	r0, r5
 8022c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c6a:	f000 beb0 	b.w	80239ce <__malloc_unlock>
 8022c6e:	42a3      	cmp	r3, r4
 8022c70:	d90c      	bls.n	8022c8c <_free_r+0x4c>
 8022c72:	6821      	ldr	r1, [r4, #0]
 8022c74:	1862      	adds	r2, r4, r1
 8022c76:	4293      	cmp	r3, r2
 8022c78:	bf04      	itt	eq
 8022c7a:	681a      	ldreq	r2, [r3, #0]
 8022c7c:	685b      	ldreq	r3, [r3, #4]
 8022c7e:	6063      	str	r3, [r4, #4]
 8022c80:	bf04      	itt	eq
 8022c82:	1852      	addeq	r2, r2, r1
 8022c84:	6022      	streq	r2, [r4, #0]
 8022c86:	6004      	str	r4, [r0, #0]
 8022c88:	e7ec      	b.n	8022c64 <_free_r+0x24>
 8022c8a:	4613      	mov	r3, r2
 8022c8c:	685a      	ldr	r2, [r3, #4]
 8022c8e:	b10a      	cbz	r2, 8022c94 <_free_r+0x54>
 8022c90:	42a2      	cmp	r2, r4
 8022c92:	d9fa      	bls.n	8022c8a <_free_r+0x4a>
 8022c94:	6819      	ldr	r1, [r3, #0]
 8022c96:	1858      	adds	r0, r3, r1
 8022c98:	42a0      	cmp	r0, r4
 8022c9a:	d10b      	bne.n	8022cb4 <_free_r+0x74>
 8022c9c:	6820      	ldr	r0, [r4, #0]
 8022c9e:	4401      	add	r1, r0
 8022ca0:	1858      	adds	r0, r3, r1
 8022ca2:	4282      	cmp	r2, r0
 8022ca4:	6019      	str	r1, [r3, #0]
 8022ca6:	d1dd      	bne.n	8022c64 <_free_r+0x24>
 8022ca8:	6810      	ldr	r0, [r2, #0]
 8022caa:	6852      	ldr	r2, [r2, #4]
 8022cac:	605a      	str	r2, [r3, #4]
 8022cae:	4401      	add	r1, r0
 8022cb0:	6019      	str	r1, [r3, #0]
 8022cb2:	e7d7      	b.n	8022c64 <_free_r+0x24>
 8022cb4:	d902      	bls.n	8022cbc <_free_r+0x7c>
 8022cb6:	230c      	movs	r3, #12
 8022cb8:	602b      	str	r3, [r5, #0]
 8022cba:	e7d3      	b.n	8022c64 <_free_r+0x24>
 8022cbc:	6820      	ldr	r0, [r4, #0]
 8022cbe:	1821      	adds	r1, r4, r0
 8022cc0:	428a      	cmp	r2, r1
 8022cc2:	bf04      	itt	eq
 8022cc4:	6811      	ldreq	r1, [r2, #0]
 8022cc6:	6852      	ldreq	r2, [r2, #4]
 8022cc8:	6062      	str	r2, [r4, #4]
 8022cca:	bf04      	itt	eq
 8022ccc:	1809      	addeq	r1, r1, r0
 8022cce:	6021      	streq	r1, [r4, #0]
 8022cd0:	605c      	str	r4, [r3, #4]
 8022cd2:	e7c7      	b.n	8022c64 <_free_r+0x24>
 8022cd4:	bd38      	pop	{r3, r4, r5, pc}
 8022cd6:	bf00      	nop
 8022cd8:	2000bb08 	.word	0x2000bb08

08022cdc <_malloc_r>:
 8022cdc:	b570      	push	{r4, r5, r6, lr}
 8022cde:	1ccd      	adds	r5, r1, #3
 8022ce0:	f025 0503 	bic.w	r5, r5, #3
 8022ce4:	3508      	adds	r5, #8
 8022ce6:	2d0c      	cmp	r5, #12
 8022ce8:	bf38      	it	cc
 8022cea:	250c      	movcc	r5, #12
 8022cec:	2d00      	cmp	r5, #0
 8022cee:	4606      	mov	r6, r0
 8022cf0:	db01      	blt.n	8022cf6 <_malloc_r+0x1a>
 8022cf2:	42a9      	cmp	r1, r5
 8022cf4:	d903      	bls.n	8022cfe <_malloc_r+0x22>
 8022cf6:	230c      	movs	r3, #12
 8022cf8:	6033      	str	r3, [r6, #0]
 8022cfa:	2000      	movs	r0, #0
 8022cfc:	bd70      	pop	{r4, r5, r6, pc}
 8022cfe:	f000 fe65 	bl	80239cc <__malloc_lock>
 8022d02:	4a21      	ldr	r2, [pc, #132]	; (8022d88 <_malloc_r+0xac>)
 8022d04:	6814      	ldr	r4, [r2, #0]
 8022d06:	4621      	mov	r1, r4
 8022d08:	b991      	cbnz	r1, 8022d30 <_malloc_r+0x54>
 8022d0a:	4c20      	ldr	r4, [pc, #128]	; (8022d8c <_malloc_r+0xb0>)
 8022d0c:	6823      	ldr	r3, [r4, #0]
 8022d0e:	b91b      	cbnz	r3, 8022d18 <_malloc_r+0x3c>
 8022d10:	4630      	mov	r0, r6
 8022d12:	f000 fb05 	bl	8023320 <_sbrk_r>
 8022d16:	6020      	str	r0, [r4, #0]
 8022d18:	4629      	mov	r1, r5
 8022d1a:	4630      	mov	r0, r6
 8022d1c:	f000 fb00 	bl	8023320 <_sbrk_r>
 8022d20:	1c43      	adds	r3, r0, #1
 8022d22:	d124      	bne.n	8022d6e <_malloc_r+0x92>
 8022d24:	230c      	movs	r3, #12
 8022d26:	6033      	str	r3, [r6, #0]
 8022d28:	4630      	mov	r0, r6
 8022d2a:	f000 fe50 	bl	80239ce <__malloc_unlock>
 8022d2e:	e7e4      	b.n	8022cfa <_malloc_r+0x1e>
 8022d30:	680b      	ldr	r3, [r1, #0]
 8022d32:	1b5b      	subs	r3, r3, r5
 8022d34:	d418      	bmi.n	8022d68 <_malloc_r+0x8c>
 8022d36:	2b0b      	cmp	r3, #11
 8022d38:	d90f      	bls.n	8022d5a <_malloc_r+0x7e>
 8022d3a:	600b      	str	r3, [r1, #0]
 8022d3c:	50cd      	str	r5, [r1, r3]
 8022d3e:	18cc      	adds	r4, r1, r3
 8022d40:	4630      	mov	r0, r6
 8022d42:	f000 fe44 	bl	80239ce <__malloc_unlock>
 8022d46:	f104 000b 	add.w	r0, r4, #11
 8022d4a:	1d23      	adds	r3, r4, #4
 8022d4c:	f020 0007 	bic.w	r0, r0, #7
 8022d50:	1ac3      	subs	r3, r0, r3
 8022d52:	d0d3      	beq.n	8022cfc <_malloc_r+0x20>
 8022d54:	425a      	negs	r2, r3
 8022d56:	50e2      	str	r2, [r4, r3]
 8022d58:	e7d0      	b.n	8022cfc <_malloc_r+0x20>
 8022d5a:	428c      	cmp	r4, r1
 8022d5c:	684b      	ldr	r3, [r1, #4]
 8022d5e:	bf16      	itet	ne
 8022d60:	6063      	strne	r3, [r4, #4]
 8022d62:	6013      	streq	r3, [r2, #0]
 8022d64:	460c      	movne	r4, r1
 8022d66:	e7eb      	b.n	8022d40 <_malloc_r+0x64>
 8022d68:	460c      	mov	r4, r1
 8022d6a:	6849      	ldr	r1, [r1, #4]
 8022d6c:	e7cc      	b.n	8022d08 <_malloc_r+0x2c>
 8022d6e:	1cc4      	adds	r4, r0, #3
 8022d70:	f024 0403 	bic.w	r4, r4, #3
 8022d74:	42a0      	cmp	r0, r4
 8022d76:	d005      	beq.n	8022d84 <_malloc_r+0xa8>
 8022d78:	1a21      	subs	r1, r4, r0
 8022d7a:	4630      	mov	r0, r6
 8022d7c:	f000 fad0 	bl	8023320 <_sbrk_r>
 8022d80:	3001      	adds	r0, #1
 8022d82:	d0cf      	beq.n	8022d24 <_malloc_r+0x48>
 8022d84:	6025      	str	r5, [r4, #0]
 8022d86:	e7db      	b.n	8022d40 <_malloc_r+0x64>
 8022d88:	2000bb08 	.word	0x2000bb08
 8022d8c:	2000bb0c 	.word	0x2000bb0c

08022d90 <__sfputc_r>:
 8022d90:	6893      	ldr	r3, [r2, #8]
 8022d92:	3b01      	subs	r3, #1
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	b410      	push	{r4}
 8022d98:	6093      	str	r3, [r2, #8]
 8022d9a:	da08      	bge.n	8022dae <__sfputc_r+0x1e>
 8022d9c:	6994      	ldr	r4, [r2, #24]
 8022d9e:	42a3      	cmp	r3, r4
 8022da0:	db01      	blt.n	8022da6 <__sfputc_r+0x16>
 8022da2:	290a      	cmp	r1, #10
 8022da4:	d103      	bne.n	8022dae <__sfputc_r+0x1e>
 8022da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022daa:	f000 bb0d 	b.w	80233c8 <__swbuf_r>
 8022dae:	6813      	ldr	r3, [r2, #0]
 8022db0:	1c58      	adds	r0, r3, #1
 8022db2:	6010      	str	r0, [r2, #0]
 8022db4:	7019      	strb	r1, [r3, #0]
 8022db6:	4608      	mov	r0, r1
 8022db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022dbc:	4770      	bx	lr

08022dbe <__sfputs_r>:
 8022dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dc0:	4606      	mov	r6, r0
 8022dc2:	460f      	mov	r7, r1
 8022dc4:	4614      	mov	r4, r2
 8022dc6:	18d5      	adds	r5, r2, r3
 8022dc8:	42ac      	cmp	r4, r5
 8022dca:	d101      	bne.n	8022dd0 <__sfputs_r+0x12>
 8022dcc:	2000      	movs	r0, #0
 8022dce:	e007      	b.n	8022de0 <__sfputs_r+0x22>
 8022dd0:	463a      	mov	r2, r7
 8022dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022dd6:	4630      	mov	r0, r6
 8022dd8:	f7ff ffda 	bl	8022d90 <__sfputc_r>
 8022ddc:	1c43      	adds	r3, r0, #1
 8022dde:	d1f3      	bne.n	8022dc8 <__sfputs_r+0xa>
 8022de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022de4 <_vfiprintf_r>:
 8022de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022de8:	460c      	mov	r4, r1
 8022dea:	b09d      	sub	sp, #116	; 0x74
 8022dec:	4617      	mov	r7, r2
 8022dee:	461d      	mov	r5, r3
 8022df0:	4606      	mov	r6, r0
 8022df2:	b118      	cbz	r0, 8022dfc <_vfiprintf_r+0x18>
 8022df4:	6983      	ldr	r3, [r0, #24]
 8022df6:	b90b      	cbnz	r3, 8022dfc <_vfiprintf_r+0x18>
 8022df8:	f000 fcfa 	bl	80237f0 <__sinit>
 8022dfc:	4b7c      	ldr	r3, [pc, #496]	; (8022ff0 <_vfiprintf_r+0x20c>)
 8022dfe:	429c      	cmp	r4, r3
 8022e00:	d158      	bne.n	8022eb4 <_vfiprintf_r+0xd0>
 8022e02:	6874      	ldr	r4, [r6, #4]
 8022e04:	89a3      	ldrh	r3, [r4, #12]
 8022e06:	0718      	lsls	r0, r3, #28
 8022e08:	d55e      	bpl.n	8022ec8 <_vfiprintf_r+0xe4>
 8022e0a:	6923      	ldr	r3, [r4, #16]
 8022e0c:	2b00      	cmp	r3, #0
 8022e0e:	d05b      	beq.n	8022ec8 <_vfiprintf_r+0xe4>
 8022e10:	2300      	movs	r3, #0
 8022e12:	9309      	str	r3, [sp, #36]	; 0x24
 8022e14:	2320      	movs	r3, #32
 8022e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022e1a:	2330      	movs	r3, #48	; 0x30
 8022e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022e20:	9503      	str	r5, [sp, #12]
 8022e22:	f04f 0b01 	mov.w	fp, #1
 8022e26:	46b8      	mov	r8, r7
 8022e28:	4645      	mov	r5, r8
 8022e2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022e2e:	b10b      	cbz	r3, 8022e34 <_vfiprintf_r+0x50>
 8022e30:	2b25      	cmp	r3, #37	; 0x25
 8022e32:	d154      	bne.n	8022ede <_vfiprintf_r+0xfa>
 8022e34:	ebb8 0a07 	subs.w	sl, r8, r7
 8022e38:	d00b      	beq.n	8022e52 <_vfiprintf_r+0x6e>
 8022e3a:	4653      	mov	r3, sl
 8022e3c:	463a      	mov	r2, r7
 8022e3e:	4621      	mov	r1, r4
 8022e40:	4630      	mov	r0, r6
 8022e42:	f7ff ffbc 	bl	8022dbe <__sfputs_r>
 8022e46:	3001      	adds	r0, #1
 8022e48:	f000 80c2 	beq.w	8022fd0 <_vfiprintf_r+0x1ec>
 8022e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e4e:	4453      	add	r3, sl
 8022e50:	9309      	str	r3, [sp, #36]	; 0x24
 8022e52:	f898 3000 	ldrb.w	r3, [r8]
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	f000 80ba 	beq.w	8022fd0 <_vfiprintf_r+0x1ec>
 8022e5c:	2300      	movs	r3, #0
 8022e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8022e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022e66:	9304      	str	r3, [sp, #16]
 8022e68:	9307      	str	r3, [sp, #28]
 8022e6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8022e70:	46a8      	mov	r8, r5
 8022e72:	2205      	movs	r2, #5
 8022e74:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022e78:	485e      	ldr	r0, [pc, #376]	; (8022ff4 <_vfiprintf_r+0x210>)
 8022e7a:	f7dd f9c9 	bl	8000210 <memchr>
 8022e7e:	9b04      	ldr	r3, [sp, #16]
 8022e80:	bb78      	cbnz	r0, 8022ee2 <_vfiprintf_r+0xfe>
 8022e82:	06d9      	lsls	r1, r3, #27
 8022e84:	bf44      	itt	mi
 8022e86:	2220      	movmi	r2, #32
 8022e88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022e8c:	071a      	lsls	r2, r3, #28
 8022e8e:	bf44      	itt	mi
 8022e90:	222b      	movmi	r2, #43	; 0x2b
 8022e92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8022e96:	782a      	ldrb	r2, [r5, #0]
 8022e98:	2a2a      	cmp	r2, #42	; 0x2a
 8022e9a:	d02a      	beq.n	8022ef2 <_vfiprintf_r+0x10e>
 8022e9c:	9a07      	ldr	r2, [sp, #28]
 8022e9e:	46a8      	mov	r8, r5
 8022ea0:	2000      	movs	r0, #0
 8022ea2:	250a      	movs	r5, #10
 8022ea4:	4641      	mov	r1, r8
 8022ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022eaa:	3b30      	subs	r3, #48	; 0x30
 8022eac:	2b09      	cmp	r3, #9
 8022eae:	d969      	bls.n	8022f84 <_vfiprintf_r+0x1a0>
 8022eb0:	b360      	cbz	r0, 8022f0c <_vfiprintf_r+0x128>
 8022eb2:	e024      	b.n	8022efe <_vfiprintf_r+0x11a>
 8022eb4:	4b50      	ldr	r3, [pc, #320]	; (8022ff8 <_vfiprintf_r+0x214>)
 8022eb6:	429c      	cmp	r4, r3
 8022eb8:	d101      	bne.n	8022ebe <_vfiprintf_r+0xda>
 8022eba:	68b4      	ldr	r4, [r6, #8]
 8022ebc:	e7a2      	b.n	8022e04 <_vfiprintf_r+0x20>
 8022ebe:	4b4f      	ldr	r3, [pc, #316]	; (8022ffc <_vfiprintf_r+0x218>)
 8022ec0:	429c      	cmp	r4, r3
 8022ec2:	bf08      	it	eq
 8022ec4:	68f4      	ldreq	r4, [r6, #12]
 8022ec6:	e79d      	b.n	8022e04 <_vfiprintf_r+0x20>
 8022ec8:	4621      	mov	r1, r4
 8022eca:	4630      	mov	r0, r6
 8022ecc:	f000 face 	bl	802346c <__swsetup_r>
 8022ed0:	2800      	cmp	r0, #0
 8022ed2:	d09d      	beq.n	8022e10 <_vfiprintf_r+0x2c>
 8022ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8022ed8:	b01d      	add	sp, #116	; 0x74
 8022eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ede:	46a8      	mov	r8, r5
 8022ee0:	e7a2      	b.n	8022e28 <_vfiprintf_r+0x44>
 8022ee2:	4a44      	ldr	r2, [pc, #272]	; (8022ff4 <_vfiprintf_r+0x210>)
 8022ee4:	1a80      	subs	r0, r0, r2
 8022ee6:	fa0b f000 	lsl.w	r0, fp, r0
 8022eea:	4318      	orrs	r0, r3
 8022eec:	9004      	str	r0, [sp, #16]
 8022eee:	4645      	mov	r5, r8
 8022ef0:	e7be      	b.n	8022e70 <_vfiprintf_r+0x8c>
 8022ef2:	9a03      	ldr	r2, [sp, #12]
 8022ef4:	1d11      	adds	r1, r2, #4
 8022ef6:	6812      	ldr	r2, [r2, #0]
 8022ef8:	9103      	str	r1, [sp, #12]
 8022efa:	2a00      	cmp	r2, #0
 8022efc:	db01      	blt.n	8022f02 <_vfiprintf_r+0x11e>
 8022efe:	9207      	str	r2, [sp, #28]
 8022f00:	e004      	b.n	8022f0c <_vfiprintf_r+0x128>
 8022f02:	4252      	negs	r2, r2
 8022f04:	f043 0302 	orr.w	r3, r3, #2
 8022f08:	9207      	str	r2, [sp, #28]
 8022f0a:	9304      	str	r3, [sp, #16]
 8022f0c:	f898 3000 	ldrb.w	r3, [r8]
 8022f10:	2b2e      	cmp	r3, #46	; 0x2e
 8022f12:	d10e      	bne.n	8022f32 <_vfiprintf_r+0x14e>
 8022f14:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022f18:	2b2a      	cmp	r3, #42	; 0x2a
 8022f1a:	d138      	bne.n	8022f8e <_vfiprintf_r+0x1aa>
 8022f1c:	9b03      	ldr	r3, [sp, #12]
 8022f1e:	1d1a      	adds	r2, r3, #4
 8022f20:	681b      	ldr	r3, [r3, #0]
 8022f22:	9203      	str	r2, [sp, #12]
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	bfb8      	it	lt
 8022f28:	f04f 33ff 	movlt.w	r3, #4294967295
 8022f2c:	f108 0802 	add.w	r8, r8, #2
 8022f30:	9305      	str	r3, [sp, #20]
 8022f32:	4d33      	ldr	r5, [pc, #204]	; (8023000 <_vfiprintf_r+0x21c>)
 8022f34:	f898 1000 	ldrb.w	r1, [r8]
 8022f38:	2203      	movs	r2, #3
 8022f3a:	4628      	mov	r0, r5
 8022f3c:	f7dd f968 	bl	8000210 <memchr>
 8022f40:	b140      	cbz	r0, 8022f54 <_vfiprintf_r+0x170>
 8022f42:	2340      	movs	r3, #64	; 0x40
 8022f44:	1b40      	subs	r0, r0, r5
 8022f46:	fa03 f000 	lsl.w	r0, r3, r0
 8022f4a:	9b04      	ldr	r3, [sp, #16]
 8022f4c:	4303      	orrs	r3, r0
 8022f4e:	f108 0801 	add.w	r8, r8, #1
 8022f52:	9304      	str	r3, [sp, #16]
 8022f54:	f898 1000 	ldrb.w	r1, [r8]
 8022f58:	482a      	ldr	r0, [pc, #168]	; (8023004 <_vfiprintf_r+0x220>)
 8022f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022f5e:	2206      	movs	r2, #6
 8022f60:	f108 0701 	add.w	r7, r8, #1
 8022f64:	f7dd f954 	bl	8000210 <memchr>
 8022f68:	2800      	cmp	r0, #0
 8022f6a:	d037      	beq.n	8022fdc <_vfiprintf_r+0x1f8>
 8022f6c:	4b26      	ldr	r3, [pc, #152]	; (8023008 <_vfiprintf_r+0x224>)
 8022f6e:	bb1b      	cbnz	r3, 8022fb8 <_vfiprintf_r+0x1d4>
 8022f70:	9b03      	ldr	r3, [sp, #12]
 8022f72:	3307      	adds	r3, #7
 8022f74:	f023 0307 	bic.w	r3, r3, #7
 8022f78:	3308      	adds	r3, #8
 8022f7a:	9303      	str	r3, [sp, #12]
 8022f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f7e:	444b      	add	r3, r9
 8022f80:	9309      	str	r3, [sp, #36]	; 0x24
 8022f82:	e750      	b.n	8022e26 <_vfiprintf_r+0x42>
 8022f84:	fb05 3202 	mla	r2, r5, r2, r3
 8022f88:	2001      	movs	r0, #1
 8022f8a:	4688      	mov	r8, r1
 8022f8c:	e78a      	b.n	8022ea4 <_vfiprintf_r+0xc0>
 8022f8e:	2300      	movs	r3, #0
 8022f90:	f108 0801 	add.w	r8, r8, #1
 8022f94:	9305      	str	r3, [sp, #20]
 8022f96:	4619      	mov	r1, r3
 8022f98:	250a      	movs	r5, #10
 8022f9a:	4640      	mov	r0, r8
 8022f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022fa0:	3a30      	subs	r2, #48	; 0x30
 8022fa2:	2a09      	cmp	r2, #9
 8022fa4:	d903      	bls.n	8022fae <_vfiprintf_r+0x1ca>
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	d0c3      	beq.n	8022f32 <_vfiprintf_r+0x14e>
 8022faa:	9105      	str	r1, [sp, #20]
 8022fac:	e7c1      	b.n	8022f32 <_vfiprintf_r+0x14e>
 8022fae:	fb05 2101 	mla	r1, r5, r1, r2
 8022fb2:	2301      	movs	r3, #1
 8022fb4:	4680      	mov	r8, r0
 8022fb6:	e7f0      	b.n	8022f9a <_vfiprintf_r+0x1b6>
 8022fb8:	ab03      	add	r3, sp, #12
 8022fba:	9300      	str	r3, [sp, #0]
 8022fbc:	4622      	mov	r2, r4
 8022fbe:	4b13      	ldr	r3, [pc, #76]	; (802300c <_vfiprintf_r+0x228>)
 8022fc0:	a904      	add	r1, sp, #16
 8022fc2:	4630      	mov	r0, r6
 8022fc4:	f3af 8000 	nop.w
 8022fc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8022fcc:	4681      	mov	r9, r0
 8022fce:	d1d5      	bne.n	8022f7c <_vfiprintf_r+0x198>
 8022fd0:	89a3      	ldrh	r3, [r4, #12]
 8022fd2:	065b      	lsls	r3, r3, #25
 8022fd4:	f53f af7e 	bmi.w	8022ed4 <_vfiprintf_r+0xf0>
 8022fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022fda:	e77d      	b.n	8022ed8 <_vfiprintf_r+0xf4>
 8022fdc:	ab03      	add	r3, sp, #12
 8022fde:	9300      	str	r3, [sp, #0]
 8022fe0:	4622      	mov	r2, r4
 8022fe2:	4b0a      	ldr	r3, [pc, #40]	; (802300c <_vfiprintf_r+0x228>)
 8022fe4:	a904      	add	r1, sp, #16
 8022fe6:	4630      	mov	r0, r6
 8022fe8:	f000 f888 	bl	80230fc <_printf_i>
 8022fec:	e7ec      	b.n	8022fc8 <_vfiprintf_r+0x1e4>
 8022fee:	bf00      	nop
 8022ff0:	08026ab4 	.word	0x08026ab4
 8022ff4:	08026a60 	.word	0x08026a60
 8022ff8:	08026ad4 	.word	0x08026ad4
 8022ffc:	08026a94 	.word	0x08026a94
 8023000:	08026a66 	.word	0x08026a66
 8023004:	08026a6a 	.word	0x08026a6a
 8023008:	00000000 	.word	0x00000000
 802300c:	08022dbf 	.word	0x08022dbf

08023010 <_printf_common>:
 8023010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023014:	4691      	mov	r9, r2
 8023016:	461f      	mov	r7, r3
 8023018:	688a      	ldr	r2, [r1, #8]
 802301a:	690b      	ldr	r3, [r1, #16]
 802301c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023020:	4293      	cmp	r3, r2
 8023022:	bfb8      	it	lt
 8023024:	4613      	movlt	r3, r2
 8023026:	f8c9 3000 	str.w	r3, [r9]
 802302a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802302e:	4606      	mov	r6, r0
 8023030:	460c      	mov	r4, r1
 8023032:	b112      	cbz	r2, 802303a <_printf_common+0x2a>
 8023034:	3301      	adds	r3, #1
 8023036:	f8c9 3000 	str.w	r3, [r9]
 802303a:	6823      	ldr	r3, [r4, #0]
 802303c:	0699      	lsls	r1, r3, #26
 802303e:	bf42      	ittt	mi
 8023040:	f8d9 3000 	ldrmi.w	r3, [r9]
 8023044:	3302      	addmi	r3, #2
 8023046:	f8c9 3000 	strmi.w	r3, [r9]
 802304a:	6825      	ldr	r5, [r4, #0]
 802304c:	f015 0506 	ands.w	r5, r5, #6
 8023050:	d107      	bne.n	8023062 <_printf_common+0x52>
 8023052:	f104 0a19 	add.w	sl, r4, #25
 8023056:	68e3      	ldr	r3, [r4, #12]
 8023058:	f8d9 2000 	ldr.w	r2, [r9]
 802305c:	1a9b      	subs	r3, r3, r2
 802305e:	42ab      	cmp	r3, r5
 8023060:	dc28      	bgt.n	80230b4 <_printf_common+0xa4>
 8023062:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8023066:	6822      	ldr	r2, [r4, #0]
 8023068:	3300      	adds	r3, #0
 802306a:	bf18      	it	ne
 802306c:	2301      	movne	r3, #1
 802306e:	0692      	lsls	r2, r2, #26
 8023070:	d42d      	bmi.n	80230ce <_printf_common+0xbe>
 8023072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023076:	4639      	mov	r1, r7
 8023078:	4630      	mov	r0, r6
 802307a:	47c0      	blx	r8
 802307c:	3001      	adds	r0, #1
 802307e:	d020      	beq.n	80230c2 <_printf_common+0xb2>
 8023080:	6823      	ldr	r3, [r4, #0]
 8023082:	68e5      	ldr	r5, [r4, #12]
 8023084:	f8d9 2000 	ldr.w	r2, [r9]
 8023088:	f003 0306 	and.w	r3, r3, #6
 802308c:	2b04      	cmp	r3, #4
 802308e:	bf08      	it	eq
 8023090:	1aad      	subeq	r5, r5, r2
 8023092:	68a3      	ldr	r3, [r4, #8]
 8023094:	6922      	ldr	r2, [r4, #16]
 8023096:	bf0c      	ite	eq
 8023098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802309c:	2500      	movne	r5, #0
 802309e:	4293      	cmp	r3, r2
 80230a0:	bfc4      	itt	gt
 80230a2:	1a9b      	subgt	r3, r3, r2
 80230a4:	18ed      	addgt	r5, r5, r3
 80230a6:	f04f 0900 	mov.w	r9, #0
 80230aa:	341a      	adds	r4, #26
 80230ac:	454d      	cmp	r5, r9
 80230ae:	d11a      	bne.n	80230e6 <_printf_common+0xd6>
 80230b0:	2000      	movs	r0, #0
 80230b2:	e008      	b.n	80230c6 <_printf_common+0xb6>
 80230b4:	2301      	movs	r3, #1
 80230b6:	4652      	mov	r2, sl
 80230b8:	4639      	mov	r1, r7
 80230ba:	4630      	mov	r0, r6
 80230bc:	47c0      	blx	r8
 80230be:	3001      	adds	r0, #1
 80230c0:	d103      	bne.n	80230ca <_printf_common+0xba>
 80230c2:	f04f 30ff 	mov.w	r0, #4294967295
 80230c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230ca:	3501      	adds	r5, #1
 80230cc:	e7c3      	b.n	8023056 <_printf_common+0x46>
 80230ce:	18e1      	adds	r1, r4, r3
 80230d0:	1c5a      	adds	r2, r3, #1
 80230d2:	2030      	movs	r0, #48	; 0x30
 80230d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80230d8:	4422      	add	r2, r4
 80230da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80230de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80230e2:	3302      	adds	r3, #2
 80230e4:	e7c5      	b.n	8023072 <_printf_common+0x62>
 80230e6:	2301      	movs	r3, #1
 80230e8:	4622      	mov	r2, r4
 80230ea:	4639      	mov	r1, r7
 80230ec:	4630      	mov	r0, r6
 80230ee:	47c0      	blx	r8
 80230f0:	3001      	adds	r0, #1
 80230f2:	d0e6      	beq.n	80230c2 <_printf_common+0xb2>
 80230f4:	f109 0901 	add.w	r9, r9, #1
 80230f8:	e7d8      	b.n	80230ac <_printf_common+0x9c>
	...

080230fc <_printf_i>:
 80230fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023100:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8023104:	460c      	mov	r4, r1
 8023106:	7e09      	ldrb	r1, [r1, #24]
 8023108:	b085      	sub	sp, #20
 802310a:	296e      	cmp	r1, #110	; 0x6e
 802310c:	4617      	mov	r7, r2
 802310e:	4606      	mov	r6, r0
 8023110:	4698      	mov	r8, r3
 8023112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023114:	f000 80b3 	beq.w	802327e <_printf_i+0x182>
 8023118:	d822      	bhi.n	8023160 <_printf_i+0x64>
 802311a:	2963      	cmp	r1, #99	; 0x63
 802311c:	d036      	beq.n	802318c <_printf_i+0x90>
 802311e:	d80a      	bhi.n	8023136 <_printf_i+0x3a>
 8023120:	2900      	cmp	r1, #0
 8023122:	f000 80b9 	beq.w	8023298 <_printf_i+0x19c>
 8023126:	2958      	cmp	r1, #88	; 0x58
 8023128:	f000 8083 	beq.w	8023232 <_printf_i+0x136>
 802312c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023130:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8023134:	e032      	b.n	802319c <_printf_i+0xa0>
 8023136:	2964      	cmp	r1, #100	; 0x64
 8023138:	d001      	beq.n	802313e <_printf_i+0x42>
 802313a:	2969      	cmp	r1, #105	; 0x69
 802313c:	d1f6      	bne.n	802312c <_printf_i+0x30>
 802313e:	6820      	ldr	r0, [r4, #0]
 8023140:	6813      	ldr	r3, [r2, #0]
 8023142:	0605      	lsls	r5, r0, #24
 8023144:	f103 0104 	add.w	r1, r3, #4
 8023148:	d52a      	bpl.n	80231a0 <_printf_i+0xa4>
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	6011      	str	r1, [r2, #0]
 802314e:	2b00      	cmp	r3, #0
 8023150:	da03      	bge.n	802315a <_printf_i+0x5e>
 8023152:	222d      	movs	r2, #45	; 0x2d
 8023154:	425b      	negs	r3, r3
 8023156:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802315a:	486f      	ldr	r0, [pc, #444]	; (8023318 <_printf_i+0x21c>)
 802315c:	220a      	movs	r2, #10
 802315e:	e039      	b.n	80231d4 <_printf_i+0xd8>
 8023160:	2973      	cmp	r1, #115	; 0x73
 8023162:	f000 809d 	beq.w	80232a0 <_printf_i+0x1a4>
 8023166:	d808      	bhi.n	802317a <_printf_i+0x7e>
 8023168:	296f      	cmp	r1, #111	; 0x6f
 802316a:	d020      	beq.n	80231ae <_printf_i+0xb2>
 802316c:	2970      	cmp	r1, #112	; 0x70
 802316e:	d1dd      	bne.n	802312c <_printf_i+0x30>
 8023170:	6823      	ldr	r3, [r4, #0]
 8023172:	f043 0320 	orr.w	r3, r3, #32
 8023176:	6023      	str	r3, [r4, #0]
 8023178:	e003      	b.n	8023182 <_printf_i+0x86>
 802317a:	2975      	cmp	r1, #117	; 0x75
 802317c:	d017      	beq.n	80231ae <_printf_i+0xb2>
 802317e:	2978      	cmp	r1, #120	; 0x78
 8023180:	d1d4      	bne.n	802312c <_printf_i+0x30>
 8023182:	2378      	movs	r3, #120	; 0x78
 8023184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023188:	4864      	ldr	r0, [pc, #400]	; (802331c <_printf_i+0x220>)
 802318a:	e055      	b.n	8023238 <_printf_i+0x13c>
 802318c:	6813      	ldr	r3, [r2, #0]
 802318e:	1d19      	adds	r1, r3, #4
 8023190:	681b      	ldr	r3, [r3, #0]
 8023192:	6011      	str	r1, [r2, #0]
 8023194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802319c:	2301      	movs	r3, #1
 802319e:	e08c      	b.n	80232ba <_printf_i+0x1be>
 80231a0:	681b      	ldr	r3, [r3, #0]
 80231a2:	6011      	str	r1, [r2, #0]
 80231a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80231a8:	bf18      	it	ne
 80231aa:	b21b      	sxthne	r3, r3
 80231ac:	e7cf      	b.n	802314e <_printf_i+0x52>
 80231ae:	6813      	ldr	r3, [r2, #0]
 80231b0:	6825      	ldr	r5, [r4, #0]
 80231b2:	1d18      	adds	r0, r3, #4
 80231b4:	6010      	str	r0, [r2, #0]
 80231b6:	0628      	lsls	r0, r5, #24
 80231b8:	d501      	bpl.n	80231be <_printf_i+0xc2>
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	e002      	b.n	80231c4 <_printf_i+0xc8>
 80231be:	0668      	lsls	r0, r5, #25
 80231c0:	d5fb      	bpl.n	80231ba <_printf_i+0xbe>
 80231c2:	881b      	ldrh	r3, [r3, #0]
 80231c4:	4854      	ldr	r0, [pc, #336]	; (8023318 <_printf_i+0x21c>)
 80231c6:	296f      	cmp	r1, #111	; 0x6f
 80231c8:	bf14      	ite	ne
 80231ca:	220a      	movne	r2, #10
 80231cc:	2208      	moveq	r2, #8
 80231ce:	2100      	movs	r1, #0
 80231d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80231d4:	6865      	ldr	r5, [r4, #4]
 80231d6:	60a5      	str	r5, [r4, #8]
 80231d8:	2d00      	cmp	r5, #0
 80231da:	f2c0 8095 	blt.w	8023308 <_printf_i+0x20c>
 80231de:	6821      	ldr	r1, [r4, #0]
 80231e0:	f021 0104 	bic.w	r1, r1, #4
 80231e4:	6021      	str	r1, [r4, #0]
 80231e6:	2b00      	cmp	r3, #0
 80231e8:	d13d      	bne.n	8023266 <_printf_i+0x16a>
 80231ea:	2d00      	cmp	r5, #0
 80231ec:	f040 808e 	bne.w	802330c <_printf_i+0x210>
 80231f0:	4665      	mov	r5, ip
 80231f2:	2a08      	cmp	r2, #8
 80231f4:	d10b      	bne.n	802320e <_printf_i+0x112>
 80231f6:	6823      	ldr	r3, [r4, #0]
 80231f8:	07db      	lsls	r3, r3, #31
 80231fa:	d508      	bpl.n	802320e <_printf_i+0x112>
 80231fc:	6923      	ldr	r3, [r4, #16]
 80231fe:	6862      	ldr	r2, [r4, #4]
 8023200:	429a      	cmp	r2, r3
 8023202:	bfde      	ittt	le
 8023204:	2330      	movle	r3, #48	; 0x30
 8023206:	f805 3c01 	strble.w	r3, [r5, #-1]
 802320a:	f105 35ff 	addle.w	r5, r5, #4294967295
 802320e:	ebac 0305 	sub.w	r3, ip, r5
 8023212:	6123      	str	r3, [r4, #16]
 8023214:	f8cd 8000 	str.w	r8, [sp]
 8023218:	463b      	mov	r3, r7
 802321a:	aa03      	add	r2, sp, #12
 802321c:	4621      	mov	r1, r4
 802321e:	4630      	mov	r0, r6
 8023220:	f7ff fef6 	bl	8023010 <_printf_common>
 8023224:	3001      	adds	r0, #1
 8023226:	d14d      	bne.n	80232c4 <_printf_i+0x1c8>
 8023228:	f04f 30ff 	mov.w	r0, #4294967295
 802322c:	b005      	add	sp, #20
 802322e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023232:	4839      	ldr	r0, [pc, #228]	; (8023318 <_printf_i+0x21c>)
 8023234:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8023238:	6813      	ldr	r3, [r2, #0]
 802323a:	6821      	ldr	r1, [r4, #0]
 802323c:	1d1d      	adds	r5, r3, #4
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	6015      	str	r5, [r2, #0]
 8023242:	060a      	lsls	r2, r1, #24
 8023244:	d50b      	bpl.n	802325e <_printf_i+0x162>
 8023246:	07ca      	lsls	r2, r1, #31
 8023248:	bf44      	itt	mi
 802324a:	f041 0120 	orrmi.w	r1, r1, #32
 802324e:	6021      	strmi	r1, [r4, #0]
 8023250:	b91b      	cbnz	r3, 802325a <_printf_i+0x15e>
 8023252:	6822      	ldr	r2, [r4, #0]
 8023254:	f022 0220 	bic.w	r2, r2, #32
 8023258:	6022      	str	r2, [r4, #0]
 802325a:	2210      	movs	r2, #16
 802325c:	e7b7      	b.n	80231ce <_printf_i+0xd2>
 802325e:	064d      	lsls	r5, r1, #25
 8023260:	bf48      	it	mi
 8023262:	b29b      	uxthmi	r3, r3
 8023264:	e7ef      	b.n	8023246 <_printf_i+0x14a>
 8023266:	4665      	mov	r5, ip
 8023268:	fbb3 f1f2 	udiv	r1, r3, r2
 802326c:	fb02 3311 	mls	r3, r2, r1, r3
 8023270:	5cc3      	ldrb	r3, [r0, r3]
 8023272:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8023276:	460b      	mov	r3, r1
 8023278:	2900      	cmp	r1, #0
 802327a:	d1f5      	bne.n	8023268 <_printf_i+0x16c>
 802327c:	e7b9      	b.n	80231f2 <_printf_i+0xf6>
 802327e:	6813      	ldr	r3, [r2, #0]
 8023280:	6825      	ldr	r5, [r4, #0]
 8023282:	6961      	ldr	r1, [r4, #20]
 8023284:	1d18      	adds	r0, r3, #4
 8023286:	6010      	str	r0, [r2, #0]
 8023288:	0628      	lsls	r0, r5, #24
 802328a:	681b      	ldr	r3, [r3, #0]
 802328c:	d501      	bpl.n	8023292 <_printf_i+0x196>
 802328e:	6019      	str	r1, [r3, #0]
 8023290:	e002      	b.n	8023298 <_printf_i+0x19c>
 8023292:	066a      	lsls	r2, r5, #25
 8023294:	d5fb      	bpl.n	802328e <_printf_i+0x192>
 8023296:	8019      	strh	r1, [r3, #0]
 8023298:	2300      	movs	r3, #0
 802329a:	6123      	str	r3, [r4, #16]
 802329c:	4665      	mov	r5, ip
 802329e:	e7b9      	b.n	8023214 <_printf_i+0x118>
 80232a0:	6813      	ldr	r3, [r2, #0]
 80232a2:	1d19      	adds	r1, r3, #4
 80232a4:	6011      	str	r1, [r2, #0]
 80232a6:	681d      	ldr	r5, [r3, #0]
 80232a8:	6862      	ldr	r2, [r4, #4]
 80232aa:	2100      	movs	r1, #0
 80232ac:	4628      	mov	r0, r5
 80232ae:	f7dc ffaf 	bl	8000210 <memchr>
 80232b2:	b108      	cbz	r0, 80232b8 <_printf_i+0x1bc>
 80232b4:	1b40      	subs	r0, r0, r5
 80232b6:	6060      	str	r0, [r4, #4]
 80232b8:	6863      	ldr	r3, [r4, #4]
 80232ba:	6123      	str	r3, [r4, #16]
 80232bc:	2300      	movs	r3, #0
 80232be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80232c2:	e7a7      	b.n	8023214 <_printf_i+0x118>
 80232c4:	6923      	ldr	r3, [r4, #16]
 80232c6:	462a      	mov	r2, r5
 80232c8:	4639      	mov	r1, r7
 80232ca:	4630      	mov	r0, r6
 80232cc:	47c0      	blx	r8
 80232ce:	3001      	adds	r0, #1
 80232d0:	d0aa      	beq.n	8023228 <_printf_i+0x12c>
 80232d2:	6823      	ldr	r3, [r4, #0]
 80232d4:	079b      	lsls	r3, r3, #30
 80232d6:	d413      	bmi.n	8023300 <_printf_i+0x204>
 80232d8:	68e0      	ldr	r0, [r4, #12]
 80232da:	9b03      	ldr	r3, [sp, #12]
 80232dc:	4298      	cmp	r0, r3
 80232de:	bfb8      	it	lt
 80232e0:	4618      	movlt	r0, r3
 80232e2:	e7a3      	b.n	802322c <_printf_i+0x130>
 80232e4:	2301      	movs	r3, #1
 80232e6:	464a      	mov	r2, r9
 80232e8:	4639      	mov	r1, r7
 80232ea:	4630      	mov	r0, r6
 80232ec:	47c0      	blx	r8
 80232ee:	3001      	adds	r0, #1
 80232f0:	d09a      	beq.n	8023228 <_printf_i+0x12c>
 80232f2:	3501      	adds	r5, #1
 80232f4:	68e3      	ldr	r3, [r4, #12]
 80232f6:	9a03      	ldr	r2, [sp, #12]
 80232f8:	1a9b      	subs	r3, r3, r2
 80232fa:	42ab      	cmp	r3, r5
 80232fc:	dcf2      	bgt.n	80232e4 <_printf_i+0x1e8>
 80232fe:	e7eb      	b.n	80232d8 <_printf_i+0x1dc>
 8023300:	2500      	movs	r5, #0
 8023302:	f104 0919 	add.w	r9, r4, #25
 8023306:	e7f5      	b.n	80232f4 <_printf_i+0x1f8>
 8023308:	2b00      	cmp	r3, #0
 802330a:	d1ac      	bne.n	8023266 <_printf_i+0x16a>
 802330c:	7803      	ldrb	r3, [r0, #0]
 802330e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023312:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023316:	e76c      	b.n	80231f2 <_printf_i+0xf6>
 8023318:	08026a71 	.word	0x08026a71
 802331c:	08026a82 	.word	0x08026a82

08023320 <_sbrk_r>:
 8023320:	b538      	push	{r3, r4, r5, lr}
 8023322:	4c06      	ldr	r4, [pc, #24]	; (802333c <_sbrk_r+0x1c>)
 8023324:	2300      	movs	r3, #0
 8023326:	4605      	mov	r5, r0
 8023328:	4608      	mov	r0, r1
 802332a:	6023      	str	r3, [r4, #0]
 802332c:	f7f7 f9c8 	bl	801a6c0 <_sbrk>
 8023330:	1c43      	adds	r3, r0, #1
 8023332:	d102      	bne.n	802333a <_sbrk_r+0x1a>
 8023334:	6823      	ldr	r3, [r4, #0]
 8023336:	b103      	cbz	r3, 802333a <_sbrk_r+0x1a>
 8023338:	602b      	str	r3, [r5, #0]
 802333a:	bd38      	pop	{r3, r4, r5, pc}
 802333c:	2000c72c 	.word	0x2000c72c

08023340 <_raise_r>:
 8023340:	291f      	cmp	r1, #31
 8023342:	b538      	push	{r3, r4, r5, lr}
 8023344:	4604      	mov	r4, r0
 8023346:	460d      	mov	r5, r1
 8023348:	d904      	bls.n	8023354 <_raise_r+0x14>
 802334a:	2316      	movs	r3, #22
 802334c:	6003      	str	r3, [r0, #0]
 802334e:	f04f 30ff 	mov.w	r0, #4294967295
 8023352:	bd38      	pop	{r3, r4, r5, pc}
 8023354:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023356:	b112      	cbz	r2, 802335e <_raise_r+0x1e>
 8023358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802335c:	b94b      	cbnz	r3, 8023372 <_raise_r+0x32>
 802335e:	4620      	mov	r0, r4
 8023360:	f000 f830 	bl	80233c4 <_getpid_r>
 8023364:	462a      	mov	r2, r5
 8023366:	4601      	mov	r1, r0
 8023368:	4620      	mov	r0, r4
 802336a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802336e:	f000 b817 	b.w	80233a0 <_kill_r>
 8023372:	2b01      	cmp	r3, #1
 8023374:	d00a      	beq.n	802338c <_raise_r+0x4c>
 8023376:	1c59      	adds	r1, r3, #1
 8023378:	d103      	bne.n	8023382 <_raise_r+0x42>
 802337a:	2316      	movs	r3, #22
 802337c:	6003      	str	r3, [r0, #0]
 802337e:	2001      	movs	r0, #1
 8023380:	e7e7      	b.n	8023352 <_raise_r+0x12>
 8023382:	2400      	movs	r4, #0
 8023384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023388:	4628      	mov	r0, r5
 802338a:	4798      	blx	r3
 802338c:	2000      	movs	r0, #0
 802338e:	e7e0      	b.n	8023352 <_raise_r+0x12>

08023390 <raise>:
 8023390:	4b02      	ldr	r3, [pc, #8]	; (802339c <raise+0xc>)
 8023392:	4601      	mov	r1, r0
 8023394:	6818      	ldr	r0, [r3, #0]
 8023396:	f7ff bfd3 	b.w	8023340 <_raise_r>
 802339a:	bf00      	nop
 802339c:	2000007c 	.word	0x2000007c

080233a0 <_kill_r>:
 80233a0:	b538      	push	{r3, r4, r5, lr}
 80233a2:	4c07      	ldr	r4, [pc, #28]	; (80233c0 <_kill_r+0x20>)
 80233a4:	2300      	movs	r3, #0
 80233a6:	4605      	mov	r5, r0
 80233a8:	4608      	mov	r0, r1
 80233aa:	4611      	mov	r1, r2
 80233ac:	6023      	str	r3, [r4, #0]
 80233ae:	f7f7 f8ff 	bl	801a5b0 <_kill>
 80233b2:	1c43      	adds	r3, r0, #1
 80233b4:	d102      	bne.n	80233bc <_kill_r+0x1c>
 80233b6:	6823      	ldr	r3, [r4, #0]
 80233b8:	b103      	cbz	r3, 80233bc <_kill_r+0x1c>
 80233ba:	602b      	str	r3, [r5, #0]
 80233bc:	bd38      	pop	{r3, r4, r5, pc}
 80233be:	bf00      	nop
 80233c0:	2000c72c 	.word	0x2000c72c

080233c4 <_getpid_r>:
 80233c4:	f7f7 b8ec 	b.w	801a5a0 <_getpid>

080233c8 <__swbuf_r>:
 80233c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233ca:	460e      	mov	r6, r1
 80233cc:	4614      	mov	r4, r2
 80233ce:	4605      	mov	r5, r0
 80233d0:	b118      	cbz	r0, 80233da <__swbuf_r+0x12>
 80233d2:	6983      	ldr	r3, [r0, #24]
 80233d4:	b90b      	cbnz	r3, 80233da <__swbuf_r+0x12>
 80233d6:	f000 fa0b 	bl	80237f0 <__sinit>
 80233da:	4b21      	ldr	r3, [pc, #132]	; (8023460 <__swbuf_r+0x98>)
 80233dc:	429c      	cmp	r4, r3
 80233de:	d12a      	bne.n	8023436 <__swbuf_r+0x6e>
 80233e0:	686c      	ldr	r4, [r5, #4]
 80233e2:	69a3      	ldr	r3, [r4, #24]
 80233e4:	60a3      	str	r3, [r4, #8]
 80233e6:	89a3      	ldrh	r3, [r4, #12]
 80233e8:	071a      	lsls	r2, r3, #28
 80233ea:	d52e      	bpl.n	802344a <__swbuf_r+0x82>
 80233ec:	6923      	ldr	r3, [r4, #16]
 80233ee:	b363      	cbz	r3, 802344a <__swbuf_r+0x82>
 80233f0:	6923      	ldr	r3, [r4, #16]
 80233f2:	6820      	ldr	r0, [r4, #0]
 80233f4:	1ac0      	subs	r0, r0, r3
 80233f6:	6963      	ldr	r3, [r4, #20]
 80233f8:	b2f6      	uxtb	r6, r6
 80233fa:	4283      	cmp	r3, r0
 80233fc:	4637      	mov	r7, r6
 80233fe:	dc04      	bgt.n	802340a <__swbuf_r+0x42>
 8023400:	4621      	mov	r1, r4
 8023402:	4628      	mov	r0, r5
 8023404:	f000 f98a 	bl	802371c <_fflush_r>
 8023408:	bb28      	cbnz	r0, 8023456 <__swbuf_r+0x8e>
 802340a:	68a3      	ldr	r3, [r4, #8]
 802340c:	3b01      	subs	r3, #1
 802340e:	60a3      	str	r3, [r4, #8]
 8023410:	6823      	ldr	r3, [r4, #0]
 8023412:	1c5a      	adds	r2, r3, #1
 8023414:	6022      	str	r2, [r4, #0]
 8023416:	701e      	strb	r6, [r3, #0]
 8023418:	6963      	ldr	r3, [r4, #20]
 802341a:	3001      	adds	r0, #1
 802341c:	4283      	cmp	r3, r0
 802341e:	d004      	beq.n	802342a <__swbuf_r+0x62>
 8023420:	89a3      	ldrh	r3, [r4, #12]
 8023422:	07db      	lsls	r3, r3, #31
 8023424:	d519      	bpl.n	802345a <__swbuf_r+0x92>
 8023426:	2e0a      	cmp	r6, #10
 8023428:	d117      	bne.n	802345a <__swbuf_r+0x92>
 802342a:	4621      	mov	r1, r4
 802342c:	4628      	mov	r0, r5
 802342e:	f000 f975 	bl	802371c <_fflush_r>
 8023432:	b190      	cbz	r0, 802345a <__swbuf_r+0x92>
 8023434:	e00f      	b.n	8023456 <__swbuf_r+0x8e>
 8023436:	4b0b      	ldr	r3, [pc, #44]	; (8023464 <__swbuf_r+0x9c>)
 8023438:	429c      	cmp	r4, r3
 802343a:	d101      	bne.n	8023440 <__swbuf_r+0x78>
 802343c:	68ac      	ldr	r4, [r5, #8]
 802343e:	e7d0      	b.n	80233e2 <__swbuf_r+0x1a>
 8023440:	4b09      	ldr	r3, [pc, #36]	; (8023468 <__swbuf_r+0xa0>)
 8023442:	429c      	cmp	r4, r3
 8023444:	bf08      	it	eq
 8023446:	68ec      	ldreq	r4, [r5, #12]
 8023448:	e7cb      	b.n	80233e2 <__swbuf_r+0x1a>
 802344a:	4621      	mov	r1, r4
 802344c:	4628      	mov	r0, r5
 802344e:	f000 f80d 	bl	802346c <__swsetup_r>
 8023452:	2800      	cmp	r0, #0
 8023454:	d0cc      	beq.n	80233f0 <__swbuf_r+0x28>
 8023456:	f04f 37ff 	mov.w	r7, #4294967295
 802345a:	4638      	mov	r0, r7
 802345c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802345e:	bf00      	nop
 8023460:	08026ab4 	.word	0x08026ab4
 8023464:	08026ad4 	.word	0x08026ad4
 8023468:	08026a94 	.word	0x08026a94

0802346c <__swsetup_r>:
 802346c:	4b32      	ldr	r3, [pc, #200]	; (8023538 <__swsetup_r+0xcc>)
 802346e:	b570      	push	{r4, r5, r6, lr}
 8023470:	681d      	ldr	r5, [r3, #0]
 8023472:	4606      	mov	r6, r0
 8023474:	460c      	mov	r4, r1
 8023476:	b125      	cbz	r5, 8023482 <__swsetup_r+0x16>
 8023478:	69ab      	ldr	r3, [r5, #24]
 802347a:	b913      	cbnz	r3, 8023482 <__swsetup_r+0x16>
 802347c:	4628      	mov	r0, r5
 802347e:	f000 f9b7 	bl	80237f0 <__sinit>
 8023482:	4b2e      	ldr	r3, [pc, #184]	; (802353c <__swsetup_r+0xd0>)
 8023484:	429c      	cmp	r4, r3
 8023486:	d10f      	bne.n	80234a8 <__swsetup_r+0x3c>
 8023488:	686c      	ldr	r4, [r5, #4]
 802348a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802348e:	b29a      	uxth	r2, r3
 8023490:	0715      	lsls	r5, r2, #28
 8023492:	d42c      	bmi.n	80234ee <__swsetup_r+0x82>
 8023494:	06d0      	lsls	r0, r2, #27
 8023496:	d411      	bmi.n	80234bc <__swsetup_r+0x50>
 8023498:	2209      	movs	r2, #9
 802349a:	6032      	str	r2, [r6, #0]
 802349c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234a0:	81a3      	strh	r3, [r4, #12]
 80234a2:	f04f 30ff 	mov.w	r0, #4294967295
 80234a6:	e03e      	b.n	8023526 <__swsetup_r+0xba>
 80234a8:	4b25      	ldr	r3, [pc, #148]	; (8023540 <__swsetup_r+0xd4>)
 80234aa:	429c      	cmp	r4, r3
 80234ac:	d101      	bne.n	80234b2 <__swsetup_r+0x46>
 80234ae:	68ac      	ldr	r4, [r5, #8]
 80234b0:	e7eb      	b.n	802348a <__swsetup_r+0x1e>
 80234b2:	4b24      	ldr	r3, [pc, #144]	; (8023544 <__swsetup_r+0xd8>)
 80234b4:	429c      	cmp	r4, r3
 80234b6:	bf08      	it	eq
 80234b8:	68ec      	ldreq	r4, [r5, #12]
 80234ba:	e7e6      	b.n	802348a <__swsetup_r+0x1e>
 80234bc:	0751      	lsls	r1, r2, #29
 80234be:	d512      	bpl.n	80234e6 <__swsetup_r+0x7a>
 80234c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80234c2:	b141      	cbz	r1, 80234d6 <__swsetup_r+0x6a>
 80234c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80234c8:	4299      	cmp	r1, r3
 80234ca:	d002      	beq.n	80234d2 <__swsetup_r+0x66>
 80234cc:	4630      	mov	r0, r6
 80234ce:	f7ff fbb7 	bl	8022c40 <_free_r>
 80234d2:	2300      	movs	r3, #0
 80234d4:	6363      	str	r3, [r4, #52]	; 0x34
 80234d6:	89a3      	ldrh	r3, [r4, #12]
 80234d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80234dc:	81a3      	strh	r3, [r4, #12]
 80234de:	2300      	movs	r3, #0
 80234e0:	6063      	str	r3, [r4, #4]
 80234e2:	6923      	ldr	r3, [r4, #16]
 80234e4:	6023      	str	r3, [r4, #0]
 80234e6:	89a3      	ldrh	r3, [r4, #12]
 80234e8:	f043 0308 	orr.w	r3, r3, #8
 80234ec:	81a3      	strh	r3, [r4, #12]
 80234ee:	6923      	ldr	r3, [r4, #16]
 80234f0:	b94b      	cbnz	r3, 8023506 <__swsetup_r+0x9a>
 80234f2:	89a3      	ldrh	r3, [r4, #12]
 80234f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80234f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80234fc:	d003      	beq.n	8023506 <__swsetup_r+0x9a>
 80234fe:	4621      	mov	r1, r4
 8023500:	4630      	mov	r0, r6
 8023502:	f000 fa23 	bl	802394c <__smakebuf_r>
 8023506:	89a2      	ldrh	r2, [r4, #12]
 8023508:	f012 0301 	ands.w	r3, r2, #1
 802350c:	d00c      	beq.n	8023528 <__swsetup_r+0xbc>
 802350e:	2300      	movs	r3, #0
 8023510:	60a3      	str	r3, [r4, #8]
 8023512:	6963      	ldr	r3, [r4, #20]
 8023514:	425b      	negs	r3, r3
 8023516:	61a3      	str	r3, [r4, #24]
 8023518:	6923      	ldr	r3, [r4, #16]
 802351a:	b953      	cbnz	r3, 8023532 <__swsetup_r+0xc6>
 802351c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023520:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8023524:	d1ba      	bne.n	802349c <__swsetup_r+0x30>
 8023526:	bd70      	pop	{r4, r5, r6, pc}
 8023528:	0792      	lsls	r2, r2, #30
 802352a:	bf58      	it	pl
 802352c:	6963      	ldrpl	r3, [r4, #20]
 802352e:	60a3      	str	r3, [r4, #8]
 8023530:	e7f2      	b.n	8023518 <__swsetup_r+0xac>
 8023532:	2000      	movs	r0, #0
 8023534:	e7f7      	b.n	8023526 <__swsetup_r+0xba>
 8023536:	bf00      	nop
 8023538:	2000007c 	.word	0x2000007c
 802353c:	08026ab4 	.word	0x08026ab4
 8023540:	08026ad4 	.word	0x08026ad4
 8023544:	08026a94 	.word	0x08026a94

08023548 <__register_exitproc>:
 8023548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802354c:	4d2c      	ldr	r5, [pc, #176]	; (8023600 <__register_exitproc+0xb8>)
 802354e:	682c      	ldr	r4, [r5, #0]
 8023550:	4607      	mov	r7, r0
 8023552:	460e      	mov	r6, r1
 8023554:	4691      	mov	r9, r2
 8023556:	4698      	mov	r8, r3
 8023558:	b934      	cbnz	r4, 8023568 <__register_exitproc+0x20>
 802355a:	4b2a      	ldr	r3, [pc, #168]	; (8023604 <__register_exitproc+0xbc>)
 802355c:	4c2a      	ldr	r4, [pc, #168]	; (8023608 <__register_exitproc+0xc0>)
 802355e:	602c      	str	r4, [r5, #0]
 8023560:	b113      	cbz	r3, 8023568 <__register_exitproc+0x20>
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023568:	6863      	ldr	r3, [r4, #4]
 802356a:	2b1f      	cmp	r3, #31
 802356c:	dd3d      	ble.n	80235ea <__register_exitproc+0xa2>
 802356e:	4b27      	ldr	r3, [pc, #156]	; (802360c <__register_exitproc+0xc4>)
 8023570:	b91b      	cbnz	r3, 802357a <__register_exitproc+0x32>
 8023572:	f04f 30ff 	mov.w	r0, #4294967295
 8023576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802357a:	208c      	movs	r0, #140	; 0x8c
 802357c:	f7ff fb3c 	bl	8022bf8 <malloc>
 8023580:	4604      	mov	r4, r0
 8023582:	2800      	cmp	r0, #0
 8023584:	d0f5      	beq.n	8023572 <__register_exitproc+0x2a>
 8023586:	2300      	movs	r3, #0
 8023588:	682a      	ldr	r2, [r5, #0]
 802358a:	6002      	str	r2, [r0, #0]
 802358c:	6043      	str	r3, [r0, #4]
 802358e:	6028      	str	r0, [r5, #0]
 8023590:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8023594:	b30f      	cbz	r7, 80235da <__register_exitproc+0x92>
 8023596:	f44f 7084 	mov.w	r0, #264	; 0x108
 802359a:	f7ff fb2d 	bl	8022bf8 <malloc>
 802359e:	2800      	cmp	r0, #0
 80235a0:	d0e7      	beq.n	8023572 <__register_exitproc+0x2a>
 80235a2:	2300      	movs	r3, #0
 80235a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80235a8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80235ac:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80235b0:	6862      	ldr	r2, [r4, #4]
 80235b2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80235b6:	2301      	movs	r3, #1
 80235b8:	4093      	lsls	r3, r2
 80235ba:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80235be:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80235c2:	431a      	orrs	r2, r3
 80235c4:	2f02      	cmp	r7, #2
 80235c6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80235ca:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80235ce:	bf02      	ittt	eq
 80235d0:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80235d4:	4313      	orreq	r3, r2
 80235d6:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80235da:	6863      	ldr	r3, [r4, #4]
 80235dc:	1c5a      	adds	r2, r3, #1
 80235de:	3302      	adds	r3, #2
 80235e0:	6062      	str	r2, [r4, #4]
 80235e2:	2000      	movs	r0, #0
 80235e4:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80235e8:	e7c5      	b.n	8023576 <__register_exitproc+0x2e>
 80235ea:	2f00      	cmp	r7, #0
 80235ec:	d0f5      	beq.n	80235da <__register_exitproc+0x92>
 80235ee:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80235f2:	2800      	cmp	r0, #0
 80235f4:	d1dc      	bne.n	80235b0 <__register_exitproc+0x68>
 80235f6:	4b05      	ldr	r3, [pc, #20]	; (802360c <__register_exitproc+0xc4>)
 80235f8:	2b00      	cmp	r3, #0
 80235fa:	d0ba      	beq.n	8023572 <__register_exitproc+0x2a>
 80235fc:	e7cb      	b.n	8023596 <__register_exitproc+0x4e>
 80235fe:	bf00      	nop
 8023600:	2000bb9c 	.word	0x2000bb9c
 8023604:	00000000 	.word	0x00000000
 8023608:	2000bb10 	.word	0x2000bb10
 802360c:	08022bf9 	.word	0x08022bf9

08023610 <__sflush_r>:
 8023610:	898a      	ldrh	r2, [r1, #12]
 8023612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023616:	4605      	mov	r5, r0
 8023618:	0710      	lsls	r0, r2, #28
 802361a:	460c      	mov	r4, r1
 802361c:	d458      	bmi.n	80236d0 <__sflush_r+0xc0>
 802361e:	684b      	ldr	r3, [r1, #4]
 8023620:	2b00      	cmp	r3, #0
 8023622:	dc05      	bgt.n	8023630 <__sflush_r+0x20>
 8023624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023626:	2b00      	cmp	r3, #0
 8023628:	dc02      	bgt.n	8023630 <__sflush_r+0x20>
 802362a:	2000      	movs	r0, #0
 802362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023632:	2e00      	cmp	r6, #0
 8023634:	d0f9      	beq.n	802362a <__sflush_r+0x1a>
 8023636:	2300      	movs	r3, #0
 8023638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802363c:	682f      	ldr	r7, [r5, #0]
 802363e:	6a21      	ldr	r1, [r4, #32]
 8023640:	602b      	str	r3, [r5, #0]
 8023642:	d032      	beq.n	80236aa <__sflush_r+0x9a>
 8023644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023646:	89a3      	ldrh	r3, [r4, #12]
 8023648:	075a      	lsls	r2, r3, #29
 802364a:	d505      	bpl.n	8023658 <__sflush_r+0x48>
 802364c:	6863      	ldr	r3, [r4, #4]
 802364e:	1ac0      	subs	r0, r0, r3
 8023650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023652:	b10b      	cbz	r3, 8023658 <__sflush_r+0x48>
 8023654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023656:	1ac0      	subs	r0, r0, r3
 8023658:	2300      	movs	r3, #0
 802365a:	4602      	mov	r2, r0
 802365c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802365e:	6a21      	ldr	r1, [r4, #32]
 8023660:	4628      	mov	r0, r5
 8023662:	47b0      	blx	r6
 8023664:	1c43      	adds	r3, r0, #1
 8023666:	89a3      	ldrh	r3, [r4, #12]
 8023668:	d106      	bne.n	8023678 <__sflush_r+0x68>
 802366a:	6829      	ldr	r1, [r5, #0]
 802366c:	291d      	cmp	r1, #29
 802366e:	d848      	bhi.n	8023702 <__sflush_r+0xf2>
 8023670:	4a29      	ldr	r2, [pc, #164]	; (8023718 <__sflush_r+0x108>)
 8023672:	40ca      	lsrs	r2, r1
 8023674:	07d6      	lsls	r6, r2, #31
 8023676:	d544      	bpl.n	8023702 <__sflush_r+0xf2>
 8023678:	2200      	movs	r2, #0
 802367a:	6062      	str	r2, [r4, #4]
 802367c:	04d9      	lsls	r1, r3, #19
 802367e:	6922      	ldr	r2, [r4, #16]
 8023680:	6022      	str	r2, [r4, #0]
 8023682:	d504      	bpl.n	802368e <__sflush_r+0x7e>
 8023684:	1c42      	adds	r2, r0, #1
 8023686:	d101      	bne.n	802368c <__sflush_r+0x7c>
 8023688:	682b      	ldr	r3, [r5, #0]
 802368a:	b903      	cbnz	r3, 802368e <__sflush_r+0x7e>
 802368c:	6560      	str	r0, [r4, #84]	; 0x54
 802368e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023690:	602f      	str	r7, [r5, #0]
 8023692:	2900      	cmp	r1, #0
 8023694:	d0c9      	beq.n	802362a <__sflush_r+0x1a>
 8023696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802369a:	4299      	cmp	r1, r3
 802369c:	d002      	beq.n	80236a4 <__sflush_r+0x94>
 802369e:	4628      	mov	r0, r5
 80236a0:	f7ff face 	bl	8022c40 <_free_r>
 80236a4:	2000      	movs	r0, #0
 80236a6:	6360      	str	r0, [r4, #52]	; 0x34
 80236a8:	e7c0      	b.n	802362c <__sflush_r+0x1c>
 80236aa:	2301      	movs	r3, #1
 80236ac:	4628      	mov	r0, r5
 80236ae:	47b0      	blx	r6
 80236b0:	1c41      	adds	r1, r0, #1
 80236b2:	d1c8      	bne.n	8023646 <__sflush_r+0x36>
 80236b4:	682b      	ldr	r3, [r5, #0]
 80236b6:	2b00      	cmp	r3, #0
 80236b8:	d0c5      	beq.n	8023646 <__sflush_r+0x36>
 80236ba:	2b1d      	cmp	r3, #29
 80236bc:	d001      	beq.n	80236c2 <__sflush_r+0xb2>
 80236be:	2b16      	cmp	r3, #22
 80236c0:	d101      	bne.n	80236c6 <__sflush_r+0xb6>
 80236c2:	602f      	str	r7, [r5, #0]
 80236c4:	e7b1      	b.n	802362a <__sflush_r+0x1a>
 80236c6:	89a3      	ldrh	r3, [r4, #12]
 80236c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80236cc:	81a3      	strh	r3, [r4, #12]
 80236ce:	e7ad      	b.n	802362c <__sflush_r+0x1c>
 80236d0:	690f      	ldr	r7, [r1, #16]
 80236d2:	2f00      	cmp	r7, #0
 80236d4:	d0a9      	beq.n	802362a <__sflush_r+0x1a>
 80236d6:	0793      	lsls	r3, r2, #30
 80236d8:	680e      	ldr	r6, [r1, #0]
 80236da:	bf08      	it	eq
 80236dc:	694b      	ldreq	r3, [r1, #20]
 80236de:	600f      	str	r7, [r1, #0]
 80236e0:	bf18      	it	ne
 80236e2:	2300      	movne	r3, #0
 80236e4:	eba6 0807 	sub.w	r8, r6, r7
 80236e8:	608b      	str	r3, [r1, #8]
 80236ea:	f1b8 0f00 	cmp.w	r8, #0
 80236ee:	dd9c      	ble.n	802362a <__sflush_r+0x1a>
 80236f0:	4643      	mov	r3, r8
 80236f2:	463a      	mov	r2, r7
 80236f4:	6a21      	ldr	r1, [r4, #32]
 80236f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80236f8:	4628      	mov	r0, r5
 80236fa:	47b0      	blx	r6
 80236fc:	2800      	cmp	r0, #0
 80236fe:	dc06      	bgt.n	802370e <__sflush_r+0xfe>
 8023700:	89a3      	ldrh	r3, [r4, #12]
 8023702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023706:	81a3      	strh	r3, [r4, #12]
 8023708:	f04f 30ff 	mov.w	r0, #4294967295
 802370c:	e78e      	b.n	802362c <__sflush_r+0x1c>
 802370e:	4407      	add	r7, r0
 8023710:	eba8 0800 	sub.w	r8, r8, r0
 8023714:	e7e9      	b.n	80236ea <__sflush_r+0xda>
 8023716:	bf00      	nop
 8023718:	20400001 	.word	0x20400001

0802371c <_fflush_r>:
 802371c:	b538      	push	{r3, r4, r5, lr}
 802371e:	690b      	ldr	r3, [r1, #16]
 8023720:	4605      	mov	r5, r0
 8023722:	460c      	mov	r4, r1
 8023724:	b1db      	cbz	r3, 802375e <_fflush_r+0x42>
 8023726:	b118      	cbz	r0, 8023730 <_fflush_r+0x14>
 8023728:	6983      	ldr	r3, [r0, #24]
 802372a:	b90b      	cbnz	r3, 8023730 <_fflush_r+0x14>
 802372c:	f000 f860 	bl	80237f0 <__sinit>
 8023730:	4b0c      	ldr	r3, [pc, #48]	; (8023764 <_fflush_r+0x48>)
 8023732:	429c      	cmp	r4, r3
 8023734:	d109      	bne.n	802374a <_fflush_r+0x2e>
 8023736:	686c      	ldr	r4, [r5, #4]
 8023738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802373c:	b17b      	cbz	r3, 802375e <_fflush_r+0x42>
 802373e:	4621      	mov	r1, r4
 8023740:	4628      	mov	r0, r5
 8023742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023746:	f7ff bf63 	b.w	8023610 <__sflush_r>
 802374a:	4b07      	ldr	r3, [pc, #28]	; (8023768 <_fflush_r+0x4c>)
 802374c:	429c      	cmp	r4, r3
 802374e:	d101      	bne.n	8023754 <_fflush_r+0x38>
 8023750:	68ac      	ldr	r4, [r5, #8]
 8023752:	e7f1      	b.n	8023738 <_fflush_r+0x1c>
 8023754:	4b05      	ldr	r3, [pc, #20]	; (802376c <_fflush_r+0x50>)
 8023756:	429c      	cmp	r4, r3
 8023758:	bf08      	it	eq
 802375a:	68ec      	ldreq	r4, [r5, #12]
 802375c:	e7ec      	b.n	8023738 <_fflush_r+0x1c>
 802375e:	2000      	movs	r0, #0
 8023760:	bd38      	pop	{r3, r4, r5, pc}
 8023762:	bf00      	nop
 8023764:	08026ab4 	.word	0x08026ab4
 8023768:	08026ad4 	.word	0x08026ad4
 802376c:	08026a94 	.word	0x08026a94

08023770 <std>:
 8023770:	2300      	movs	r3, #0
 8023772:	b510      	push	{r4, lr}
 8023774:	4604      	mov	r4, r0
 8023776:	e9c0 3300 	strd	r3, r3, [r0]
 802377a:	6083      	str	r3, [r0, #8]
 802377c:	8181      	strh	r1, [r0, #12]
 802377e:	6643      	str	r3, [r0, #100]	; 0x64
 8023780:	81c2      	strh	r2, [r0, #14]
 8023782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023786:	6183      	str	r3, [r0, #24]
 8023788:	4619      	mov	r1, r3
 802378a:	2208      	movs	r2, #8
 802378c:	305c      	adds	r0, #92	; 0x5c
 802378e:	f7ff fa4e 	bl	8022c2e <memset>
 8023792:	4b05      	ldr	r3, [pc, #20]	; (80237a8 <std+0x38>)
 8023794:	6263      	str	r3, [r4, #36]	; 0x24
 8023796:	4b05      	ldr	r3, [pc, #20]	; (80237ac <std+0x3c>)
 8023798:	62a3      	str	r3, [r4, #40]	; 0x28
 802379a:	4b05      	ldr	r3, [pc, #20]	; (80237b0 <std+0x40>)
 802379c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802379e:	4b05      	ldr	r3, [pc, #20]	; (80237b4 <std+0x44>)
 80237a0:	6224      	str	r4, [r4, #32]
 80237a2:	6323      	str	r3, [r4, #48]	; 0x30
 80237a4:	bd10      	pop	{r4, pc}
 80237a6:	bf00      	nop
 80237a8:	080239d1 	.word	0x080239d1
 80237ac:	080239f3 	.word	0x080239f3
 80237b0:	08023a2b 	.word	0x08023a2b
 80237b4:	08023a4f 	.word	0x08023a4f

080237b8 <_cleanup_r>:
 80237b8:	4901      	ldr	r1, [pc, #4]	; (80237c0 <_cleanup_r+0x8>)
 80237ba:	f000 b885 	b.w	80238c8 <_fwalk_reent>
 80237be:	bf00      	nop
 80237c0:	0802371d 	.word	0x0802371d

080237c4 <__sfmoreglue>:
 80237c4:	b570      	push	{r4, r5, r6, lr}
 80237c6:	1e4a      	subs	r2, r1, #1
 80237c8:	2568      	movs	r5, #104	; 0x68
 80237ca:	4355      	muls	r5, r2
 80237cc:	460e      	mov	r6, r1
 80237ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80237d2:	f7ff fa83 	bl	8022cdc <_malloc_r>
 80237d6:	4604      	mov	r4, r0
 80237d8:	b140      	cbz	r0, 80237ec <__sfmoreglue+0x28>
 80237da:	2100      	movs	r1, #0
 80237dc:	e9c0 1600 	strd	r1, r6, [r0]
 80237e0:	300c      	adds	r0, #12
 80237e2:	60a0      	str	r0, [r4, #8]
 80237e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80237e8:	f7ff fa21 	bl	8022c2e <memset>
 80237ec:	4620      	mov	r0, r4
 80237ee:	bd70      	pop	{r4, r5, r6, pc}

080237f0 <__sinit>:
 80237f0:	6983      	ldr	r3, [r0, #24]
 80237f2:	b510      	push	{r4, lr}
 80237f4:	4604      	mov	r4, r0
 80237f6:	bb33      	cbnz	r3, 8023846 <__sinit+0x56>
 80237f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80237fc:	6503      	str	r3, [r0, #80]	; 0x50
 80237fe:	4b12      	ldr	r3, [pc, #72]	; (8023848 <__sinit+0x58>)
 8023800:	4a12      	ldr	r2, [pc, #72]	; (802384c <__sinit+0x5c>)
 8023802:	681b      	ldr	r3, [r3, #0]
 8023804:	6282      	str	r2, [r0, #40]	; 0x28
 8023806:	4298      	cmp	r0, r3
 8023808:	bf04      	itt	eq
 802380a:	2301      	moveq	r3, #1
 802380c:	6183      	streq	r3, [r0, #24]
 802380e:	f000 f81f 	bl	8023850 <__sfp>
 8023812:	6060      	str	r0, [r4, #4]
 8023814:	4620      	mov	r0, r4
 8023816:	f000 f81b 	bl	8023850 <__sfp>
 802381a:	60a0      	str	r0, [r4, #8]
 802381c:	4620      	mov	r0, r4
 802381e:	f000 f817 	bl	8023850 <__sfp>
 8023822:	2200      	movs	r2, #0
 8023824:	60e0      	str	r0, [r4, #12]
 8023826:	2104      	movs	r1, #4
 8023828:	6860      	ldr	r0, [r4, #4]
 802382a:	f7ff ffa1 	bl	8023770 <std>
 802382e:	2201      	movs	r2, #1
 8023830:	2109      	movs	r1, #9
 8023832:	68a0      	ldr	r0, [r4, #8]
 8023834:	f7ff ff9c 	bl	8023770 <std>
 8023838:	2202      	movs	r2, #2
 802383a:	2112      	movs	r1, #18
 802383c:	68e0      	ldr	r0, [r4, #12]
 802383e:	f7ff ff97 	bl	8023770 <std>
 8023842:	2301      	movs	r3, #1
 8023844:	61a3      	str	r3, [r4, #24]
 8023846:	bd10      	pop	{r4, pc}
 8023848:	08026a5c 	.word	0x08026a5c
 802384c:	080237b9 	.word	0x080237b9

08023850 <__sfp>:
 8023850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023852:	4b1b      	ldr	r3, [pc, #108]	; (80238c0 <__sfp+0x70>)
 8023854:	681e      	ldr	r6, [r3, #0]
 8023856:	69b3      	ldr	r3, [r6, #24]
 8023858:	4607      	mov	r7, r0
 802385a:	b913      	cbnz	r3, 8023862 <__sfp+0x12>
 802385c:	4630      	mov	r0, r6
 802385e:	f7ff ffc7 	bl	80237f0 <__sinit>
 8023862:	3648      	adds	r6, #72	; 0x48
 8023864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023868:	3b01      	subs	r3, #1
 802386a:	d503      	bpl.n	8023874 <__sfp+0x24>
 802386c:	6833      	ldr	r3, [r6, #0]
 802386e:	b133      	cbz	r3, 802387e <__sfp+0x2e>
 8023870:	6836      	ldr	r6, [r6, #0]
 8023872:	e7f7      	b.n	8023864 <__sfp+0x14>
 8023874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023878:	b16d      	cbz	r5, 8023896 <__sfp+0x46>
 802387a:	3468      	adds	r4, #104	; 0x68
 802387c:	e7f4      	b.n	8023868 <__sfp+0x18>
 802387e:	2104      	movs	r1, #4
 8023880:	4638      	mov	r0, r7
 8023882:	f7ff ff9f 	bl	80237c4 <__sfmoreglue>
 8023886:	6030      	str	r0, [r6, #0]
 8023888:	2800      	cmp	r0, #0
 802388a:	d1f1      	bne.n	8023870 <__sfp+0x20>
 802388c:	230c      	movs	r3, #12
 802388e:	603b      	str	r3, [r7, #0]
 8023890:	4604      	mov	r4, r0
 8023892:	4620      	mov	r0, r4
 8023894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023896:	4b0b      	ldr	r3, [pc, #44]	; (80238c4 <__sfp+0x74>)
 8023898:	6665      	str	r5, [r4, #100]	; 0x64
 802389a:	e9c4 5500 	strd	r5, r5, [r4]
 802389e:	60a5      	str	r5, [r4, #8]
 80238a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80238a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80238a8:	2208      	movs	r2, #8
 80238aa:	4629      	mov	r1, r5
 80238ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80238b0:	f7ff f9bd 	bl	8022c2e <memset>
 80238b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80238b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80238bc:	e7e9      	b.n	8023892 <__sfp+0x42>
 80238be:	bf00      	nop
 80238c0:	08026a5c 	.word	0x08026a5c
 80238c4:	ffff0001 	.word	0xffff0001

080238c8 <_fwalk_reent>:
 80238c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80238cc:	4680      	mov	r8, r0
 80238ce:	4689      	mov	r9, r1
 80238d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80238d4:	2600      	movs	r6, #0
 80238d6:	b914      	cbnz	r4, 80238de <_fwalk_reent+0x16>
 80238d8:	4630      	mov	r0, r6
 80238da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80238de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80238e2:	3f01      	subs	r7, #1
 80238e4:	d501      	bpl.n	80238ea <_fwalk_reent+0x22>
 80238e6:	6824      	ldr	r4, [r4, #0]
 80238e8:	e7f5      	b.n	80238d6 <_fwalk_reent+0xe>
 80238ea:	89ab      	ldrh	r3, [r5, #12]
 80238ec:	2b01      	cmp	r3, #1
 80238ee:	d907      	bls.n	8023900 <_fwalk_reent+0x38>
 80238f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80238f4:	3301      	adds	r3, #1
 80238f6:	d003      	beq.n	8023900 <_fwalk_reent+0x38>
 80238f8:	4629      	mov	r1, r5
 80238fa:	4640      	mov	r0, r8
 80238fc:	47c8      	blx	r9
 80238fe:	4306      	orrs	r6, r0
 8023900:	3568      	adds	r5, #104	; 0x68
 8023902:	e7ee      	b.n	80238e2 <_fwalk_reent+0x1a>

08023904 <__swhatbuf_r>:
 8023904:	b570      	push	{r4, r5, r6, lr}
 8023906:	460e      	mov	r6, r1
 8023908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802390c:	2900      	cmp	r1, #0
 802390e:	b096      	sub	sp, #88	; 0x58
 8023910:	4614      	mov	r4, r2
 8023912:	461d      	mov	r5, r3
 8023914:	da07      	bge.n	8023926 <__swhatbuf_r+0x22>
 8023916:	2300      	movs	r3, #0
 8023918:	602b      	str	r3, [r5, #0]
 802391a:	89b3      	ldrh	r3, [r6, #12]
 802391c:	061a      	lsls	r2, r3, #24
 802391e:	d410      	bmi.n	8023942 <__swhatbuf_r+0x3e>
 8023920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023924:	e00e      	b.n	8023944 <__swhatbuf_r+0x40>
 8023926:	466a      	mov	r2, sp
 8023928:	f000 f8b8 	bl	8023a9c <_fstat_r>
 802392c:	2800      	cmp	r0, #0
 802392e:	dbf2      	blt.n	8023916 <__swhatbuf_r+0x12>
 8023930:	9a01      	ldr	r2, [sp, #4]
 8023932:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023936:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802393a:	425a      	negs	r2, r3
 802393c:	415a      	adcs	r2, r3
 802393e:	602a      	str	r2, [r5, #0]
 8023940:	e7ee      	b.n	8023920 <__swhatbuf_r+0x1c>
 8023942:	2340      	movs	r3, #64	; 0x40
 8023944:	2000      	movs	r0, #0
 8023946:	6023      	str	r3, [r4, #0]
 8023948:	b016      	add	sp, #88	; 0x58
 802394a:	bd70      	pop	{r4, r5, r6, pc}

0802394c <__smakebuf_r>:
 802394c:	898b      	ldrh	r3, [r1, #12]
 802394e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023950:	079d      	lsls	r5, r3, #30
 8023952:	4606      	mov	r6, r0
 8023954:	460c      	mov	r4, r1
 8023956:	d507      	bpl.n	8023968 <__smakebuf_r+0x1c>
 8023958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802395c:	6023      	str	r3, [r4, #0]
 802395e:	6123      	str	r3, [r4, #16]
 8023960:	2301      	movs	r3, #1
 8023962:	6163      	str	r3, [r4, #20]
 8023964:	b002      	add	sp, #8
 8023966:	bd70      	pop	{r4, r5, r6, pc}
 8023968:	ab01      	add	r3, sp, #4
 802396a:	466a      	mov	r2, sp
 802396c:	f7ff ffca 	bl	8023904 <__swhatbuf_r>
 8023970:	9900      	ldr	r1, [sp, #0]
 8023972:	4605      	mov	r5, r0
 8023974:	4630      	mov	r0, r6
 8023976:	f7ff f9b1 	bl	8022cdc <_malloc_r>
 802397a:	b948      	cbnz	r0, 8023990 <__smakebuf_r+0x44>
 802397c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023980:	059a      	lsls	r2, r3, #22
 8023982:	d4ef      	bmi.n	8023964 <__smakebuf_r+0x18>
 8023984:	f023 0303 	bic.w	r3, r3, #3
 8023988:	f043 0302 	orr.w	r3, r3, #2
 802398c:	81a3      	strh	r3, [r4, #12]
 802398e:	e7e3      	b.n	8023958 <__smakebuf_r+0xc>
 8023990:	4b0d      	ldr	r3, [pc, #52]	; (80239c8 <__smakebuf_r+0x7c>)
 8023992:	62b3      	str	r3, [r6, #40]	; 0x28
 8023994:	89a3      	ldrh	r3, [r4, #12]
 8023996:	6020      	str	r0, [r4, #0]
 8023998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802399c:	81a3      	strh	r3, [r4, #12]
 802399e:	9b00      	ldr	r3, [sp, #0]
 80239a0:	6163      	str	r3, [r4, #20]
 80239a2:	9b01      	ldr	r3, [sp, #4]
 80239a4:	6120      	str	r0, [r4, #16]
 80239a6:	b15b      	cbz	r3, 80239c0 <__smakebuf_r+0x74>
 80239a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80239ac:	4630      	mov	r0, r6
 80239ae:	f000 f887 	bl	8023ac0 <_isatty_r>
 80239b2:	b128      	cbz	r0, 80239c0 <__smakebuf_r+0x74>
 80239b4:	89a3      	ldrh	r3, [r4, #12]
 80239b6:	f023 0303 	bic.w	r3, r3, #3
 80239ba:	f043 0301 	orr.w	r3, r3, #1
 80239be:	81a3      	strh	r3, [r4, #12]
 80239c0:	89a3      	ldrh	r3, [r4, #12]
 80239c2:	431d      	orrs	r5, r3
 80239c4:	81a5      	strh	r5, [r4, #12]
 80239c6:	e7cd      	b.n	8023964 <__smakebuf_r+0x18>
 80239c8:	080237b9 	.word	0x080237b9

080239cc <__malloc_lock>:
 80239cc:	4770      	bx	lr

080239ce <__malloc_unlock>:
 80239ce:	4770      	bx	lr

080239d0 <__sread>:
 80239d0:	b510      	push	{r4, lr}
 80239d2:	460c      	mov	r4, r1
 80239d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239d8:	f000 f894 	bl	8023b04 <_read_r>
 80239dc:	2800      	cmp	r0, #0
 80239de:	bfab      	itete	ge
 80239e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80239e2:	89a3      	ldrhlt	r3, [r4, #12]
 80239e4:	181b      	addge	r3, r3, r0
 80239e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80239ea:	bfac      	ite	ge
 80239ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80239ee:	81a3      	strhlt	r3, [r4, #12]
 80239f0:	bd10      	pop	{r4, pc}

080239f2 <__swrite>:
 80239f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239f6:	461f      	mov	r7, r3
 80239f8:	898b      	ldrh	r3, [r1, #12]
 80239fa:	05db      	lsls	r3, r3, #23
 80239fc:	4605      	mov	r5, r0
 80239fe:	460c      	mov	r4, r1
 8023a00:	4616      	mov	r6, r2
 8023a02:	d505      	bpl.n	8023a10 <__swrite+0x1e>
 8023a04:	2302      	movs	r3, #2
 8023a06:	2200      	movs	r2, #0
 8023a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a0c:	f000 f868 	bl	8023ae0 <_lseek_r>
 8023a10:	89a3      	ldrh	r3, [r4, #12]
 8023a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023a1a:	81a3      	strh	r3, [r4, #12]
 8023a1c:	4632      	mov	r2, r6
 8023a1e:	463b      	mov	r3, r7
 8023a20:	4628      	mov	r0, r5
 8023a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a26:	f000 b817 	b.w	8023a58 <_write_r>

08023a2a <__sseek>:
 8023a2a:	b510      	push	{r4, lr}
 8023a2c:	460c      	mov	r4, r1
 8023a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a32:	f000 f855 	bl	8023ae0 <_lseek_r>
 8023a36:	1c43      	adds	r3, r0, #1
 8023a38:	89a3      	ldrh	r3, [r4, #12]
 8023a3a:	bf15      	itete	ne
 8023a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8023a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023a46:	81a3      	strheq	r3, [r4, #12]
 8023a48:	bf18      	it	ne
 8023a4a:	81a3      	strhne	r3, [r4, #12]
 8023a4c:	bd10      	pop	{r4, pc}

08023a4e <__sclose>:
 8023a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a52:	f000 b813 	b.w	8023a7c <_close_r>
	...

08023a58 <_write_r>:
 8023a58:	b538      	push	{r3, r4, r5, lr}
 8023a5a:	4c07      	ldr	r4, [pc, #28]	; (8023a78 <_write_r+0x20>)
 8023a5c:	4605      	mov	r5, r0
 8023a5e:	4608      	mov	r0, r1
 8023a60:	4611      	mov	r1, r2
 8023a62:	2200      	movs	r2, #0
 8023a64:	6022      	str	r2, [r4, #0]
 8023a66:	461a      	mov	r2, r3
 8023a68:	f7f6 fdd9 	bl	801a61e <_write>
 8023a6c:	1c43      	adds	r3, r0, #1
 8023a6e:	d102      	bne.n	8023a76 <_write_r+0x1e>
 8023a70:	6823      	ldr	r3, [r4, #0]
 8023a72:	b103      	cbz	r3, 8023a76 <_write_r+0x1e>
 8023a74:	602b      	str	r3, [r5, #0]
 8023a76:	bd38      	pop	{r3, r4, r5, pc}
 8023a78:	2000c72c 	.word	0x2000c72c

08023a7c <_close_r>:
 8023a7c:	b538      	push	{r3, r4, r5, lr}
 8023a7e:	4c06      	ldr	r4, [pc, #24]	; (8023a98 <_close_r+0x1c>)
 8023a80:	2300      	movs	r3, #0
 8023a82:	4605      	mov	r5, r0
 8023a84:	4608      	mov	r0, r1
 8023a86:	6023      	str	r3, [r4, #0]
 8023a88:	f7f6 fde5 	bl	801a656 <_close>
 8023a8c:	1c43      	adds	r3, r0, #1
 8023a8e:	d102      	bne.n	8023a96 <_close_r+0x1a>
 8023a90:	6823      	ldr	r3, [r4, #0]
 8023a92:	b103      	cbz	r3, 8023a96 <_close_r+0x1a>
 8023a94:	602b      	str	r3, [r5, #0]
 8023a96:	bd38      	pop	{r3, r4, r5, pc}
 8023a98:	2000c72c 	.word	0x2000c72c

08023a9c <_fstat_r>:
 8023a9c:	b538      	push	{r3, r4, r5, lr}
 8023a9e:	4c07      	ldr	r4, [pc, #28]	; (8023abc <_fstat_r+0x20>)
 8023aa0:	2300      	movs	r3, #0
 8023aa2:	4605      	mov	r5, r0
 8023aa4:	4608      	mov	r0, r1
 8023aa6:	4611      	mov	r1, r2
 8023aa8:	6023      	str	r3, [r4, #0]
 8023aaa:	f7f6 fde0 	bl	801a66e <_fstat>
 8023aae:	1c43      	adds	r3, r0, #1
 8023ab0:	d102      	bne.n	8023ab8 <_fstat_r+0x1c>
 8023ab2:	6823      	ldr	r3, [r4, #0]
 8023ab4:	b103      	cbz	r3, 8023ab8 <_fstat_r+0x1c>
 8023ab6:	602b      	str	r3, [r5, #0]
 8023ab8:	bd38      	pop	{r3, r4, r5, pc}
 8023aba:	bf00      	nop
 8023abc:	2000c72c 	.word	0x2000c72c

08023ac0 <_isatty_r>:
 8023ac0:	b538      	push	{r3, r4, r5, lr}
 8023ac2:	4c06      	ldr	r4, [pc, #24]	; (8023adc <_isatty_r+0x1c>)
 8023ac4:	2300      	movs	r3, #0
 8023ac6:	4605      	mov	r5, r0
 8023ac8:	4608      	mov	r0, r1
 8023aca:	6023      	str	r3, [r4, #0]
 8023acc:	f7f6 fddf 	bl	801a68e <_isatty>
 8023ad0:	1c43      	adds	r3, r0, #1
 8023ad2:	d102      	bne.n	8023ada <_isatty_r+0x1a>
 8023ad4:	6823      	ldr	r3, [r4, #0]
 8023ad6:	b103      	cbz	r3, 8023ada <_isatty_r+0x1a>
 8023ad8:	602b      	str	r3, [r5, #0]
 8023ada:	bd38      	pop	{r3, r4, r5, pc}
 8023adc:	2000c72c 	.word	0x2000c72c

08023ae0 <_lseek_r>:
 8023ae0:	b538      	push	{r3, r4, r5, lr}
 8023ae2:	4c07      	ldr	r4, [pc, #28]	; (8023b00 <_lseek_r+0x20>)
 8023ae4:	4605      	mov	r5, r0
 8023ae6:	4608      	mov	r0, r1
 8023ae8:	4611      	mov	r1, r2
 8023aea:	2200      	movs	r2, #0
 8023aec:	6022      	str	r2, [r4, #0]
 8023aee:	461a      	mov	r2, r3
 8023af0:	f7f6 fdd8 	bl	801a6a4 <_lseek>
 8023af4:	1c43      	adds	r3, r0, #1
 8023af6:	d102      	bne.n	8023afe <_lseek_r+0x1e>
 8023af8:	6823      	ldr	r3, [r4, #0]
 8023afa:	b103      	cbz	r3, 8023afe <_lseek_r+0x1e>
 8023afc:	602b      	str	r3, [r5, #0]
 8023afe:	bd38      	pop	{r3, r4, r5, pc}
 8023b00:	2000c72c 	.word	0x2000c72c

08023b04 <_read_r>:
 8023b04:	b538      	push	{r3, r4, r5, lr}
 8023b06:	4c07      	ldr	r4, [pc, #28]	; (8023b24 <_read_r+0x20>)
 8023b08:	4605      	mov	r5, r0
 8023b0a:	4608      	mov	r0, r1
 8023b0c:	4611      	mov	r1, r2
 8023b0e:	2200      	movs	r2, #0
 8023b10:	6022      	str	r2, [r4, #0]
 8023b12:	461a      	mov	r2, r3
 8023b14:	f7f6 fd66 	bl	801a5e4 <_read>
 8023b18:	1c43      	adds	r3, r0, #1
 8023b1a:	d102      	bne.n	8023b22 <_read_r+0x1e>
 8023b1c:	6823      	ldr	r3, [r4, #0]
 8023b1e:	b103      	cbz	r3, 8023b22 <_read_r+0x1e>
 8023b20:	602b      	str	r3, [r5, #0]
 8023b22:	bd38      	pop	{r3, r4, r5, pc}
 8023b24:	2000c72c 	.word	0x2000c72c

08023b28 <_init>:
 8023b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b2a:	bf00      	nop
 8023b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b2e:	bc08      	pop	{r3}
 8023b30:	469e      	mov	lr, r3
 8023b32:	4770      	bx	lr

08023b34 <_fini>:
 8023b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b36:	bf00      	nop
 8023b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b3a:	bc08      	pop	{r3}
 8023b3c:	469e      	mov	lr, r3
 8023b3e:	4770      	bx	lr
