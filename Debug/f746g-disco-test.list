
f746g-disco-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026054  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030a0  08026224  08026224  00036224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000485e  080292c4  080292c4  000392c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00093cc4  0802db24  0802db24  0003db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000028  080c17e8  080c17e8  000d17e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080c1810  080c1810  000e00e0  2**0
                  CONTENTS
  7 .ARM          00000008  080c1810  080c1810  000d1810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080c1818  080c1818  000e00e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000010  080c1818  080c1818  000d1818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080c1828  080c1828  000d1828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000e0  20000000  080c1830  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000c86c  200000e0  080c1910  000e00e0  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000c94c  080c1910  000ec94c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000e00e0  2**0
                  CONTENTS, READONLY
 15 .debug_info   000c7a0c  00000000  00000000  000e0110  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0001c71a  00000000  00000000  001a7b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000053f0  00000000  00000000  001c4238  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00006830  00000000  00000000  001c9628  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000459ea  00000000  00000000  001cfe58  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00064985  00000000  00000000  00215842  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001447ea  00000000  00000000  0027a1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003be9b1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001359c  00000000  00000000  003beaac  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    00017c92  00000000  00000000  003d2048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802620c 	.word	0x0802620c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	0802620c 	.word	0x0802620c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f018 ff0a 	bl	80193d4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 fa7a 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 fa5e 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f018 fec5 	bl	8019398 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa44 	bl	8000ad8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f018 fe8f 	bl	8019398 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000fc 	.word	0x200000fc

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f018 fddc 	bl	8019398 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f018 fdce 	bl	8019398 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f018 fdb3 	bl	8019398 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f018 fda5 	bl	8019398 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000fc 	.word	0x200000fc
 8000890:	20000100 	.word	0x20000100

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f018 fd58 	bl	8019364 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f018 fd44 	bl	8019364 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f018 fd35 	bl	8019398 <TS_IO_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4603      	mov	r3, r0
 8000952:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <ft5336_TS_GetTouchInfo+0x158>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	461a      	mov	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4293      	cmp	r3, r2
 800096e:	f080 8090 	bcs.w	8000a92 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d85d      	bhi.n	8000a34 <ft5336_TS_GetTouchInfo+0xf0>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <ft5336_TS_GetTouchInfo+0x3c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a9 	.word	0x080009a9
 8000984:	080009b7 	.word	0x080009b7
 8000988:	080009c5 	.word	0x080009c5
 800098c:	080009d3 	.word	0x080009d3
 8000990:	080009e1 	.word	0x080009e1
 8000994:	080009ef 	.word	0x080009ef
 8000998:	080009fd 	.word	0x080009fd
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	08000a19 	.word	0x08000a19
 80009a4:	08000a27 	.word	0x08000a27
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009ac:	2307      	movs	r3, #7
 80009ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009b0:	2308      	movs	r3, #8
 80009b2:	757b      	strb	r3, [r7, #21]
      break;
 80009b4:	e03f      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009b6:	2309      	movs	r3, #9
 80009b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009ba:	230d      	movs	r3, #13
 80009bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80009be:	230e      	movs	r3, #14
 80009c0:	757b      	strb	r3, [r7, #21]
      break;
 80009c2:	e038      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80009c4:	230f      	movs	r3, #15
 80009c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80009c8:	2313      	movs	r3, #19
 80009ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80009cc:	2314      	movs	r3, #20
 80009ce:	757b      	strb	r3, [r7, #21]
      break;
 80009d0:	e031      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80009d2:	2315      	movs	r3, #21
 80009d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009d6:	2319      	movs	r3, #25
 80009d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009da:	231a      	movs	r3, #26
 80009dc:	757b      	strb	r3, [r7, #21]
      break;
 80009de:	e02a      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009e0:	231b      	movs	r3, #27
 80009e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009e4:	231f      	movs	r3, #31
 80009e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009e8:	2320      	movs	r3, #32
 80009ea:	757b      	strb	r3, [r7, #21]
      break;
 80009ec:	e023      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009ee:	2321      	movs	r3, #33	; 0x21
 80009f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009f2:	2325      	movs	r3, #37	; 0x25
 80009f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009f6:	2326      	movs	r3, #38	; 0x26
 80009f8:	757b      	strb	r3, [r7, #21]
      break;
 80009fa:	e01c      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009fc:	2327      	movs	r3, #39	; 0x27
 80009fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a00:	232b      	movs	r3, #43	; 0x2b
 8000a02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a04:	232c      	movs	r3, #44	; 0x2c
 8000a06:	757b      	strb	r3, [r7, #21]
      break;
 8000a08:	e015      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a0a:	232d      	movs	r3, #45	; 0x2d
 8000a0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a0e:	2331      	movs	r3, #49	; 0x31
 8000a10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	757b      	strb	r3, [r7, #21]
      break;
 8000a16:	e00e      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a18:	2333      	movs	r3, #51	; 0x33
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a1c:	2337      	movs	r3, #55	; 0x37
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a20:	2338      	movs	r3, #56	; 0x38
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e007      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a26:	2339      	movs	r3, #57	; 0x39
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a2a:	233d      	movs	r3, #61	; 0x3d
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a2e:	233e      	movs	r3, #62	; 0x3e
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e000      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a34:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f018 fcaa 	bl	8019398 <TS_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	119b      	asrs	r3, r3, #6
 8000a4e:	f003 0203 	and.w	r2, r3, #3
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	7dba      	ldrb	r2, [r7, #22]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f018 fc9a 	bl	8019398 <TS_IO_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a68:	7d3b      	ldrb	r3, [r7, #20]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7d7a      	ldrb	r2, [r7, #21]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f018 fc8c 	bl	8019398 <TS_IO_Read>
 8000a80:	4603      	mov	r3, r0
 8000a82:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a84:	7d3b      	ldrb	r3, [r7, #20]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	111b      	asrs	r3, r3, #4
 8000a8a:	f003 0204 	and.w	r2, r3, #4
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000fc 	.word	0x200000fc

08000aa0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200000fc 	.word	0x200000fc

08000ab8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000abc:	f7ff fff0 	bl	8000aa0 <ft5336_Get_I2C_InitializedStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000ac6:	f018 fc43 	bl	8019350 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000fc 	.word	0x200000fc

08000ad8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 fb8c 	bl	8001216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f01b ffa6 	bl	801ca50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f01b f8a4 	bl	801bc50 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000028 	.word	0x20000028
 8000b34:	2000bc68 	.word	0x2000bc68

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2000bc68 	.word	0x2000bc68

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_Delay+0x40>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffde 	bl	8000b38 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000028 	.word	0x20000028

08000b94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e031      	b.n	8000c0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d109      	bne.n	8000bc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f01b f874 	bl	801bca0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d116      	bne.n	8000c00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_Init+0x84>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	f043 0202 	orr.w	r2, r3, #2
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f94e 	bl	8000e84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f023 0303 	bic.w	r3, r3, #3
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfe:	e001      	b.n	8000c04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	ffffeefd 	.word	0xffffeefd

08000c1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1c>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e115      	b.n	8000e64 <HAL_ADC_ConfigChannel+0x248>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b09      	cmp	r3, #9
 8000c46:	d935      	bls.n	8000cb4 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68d9      	ldr	r1, [r3, #12]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b1e      	subs	r3, #30
 8000c5e:	2207      	movs	r2, #7
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43da      	mvns	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a7f      	ldr	r2, [pc, #508]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d10a      	bne.n	8000c8e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68d9      	ldr	r1, [r3, #12]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	061a      	lsls	r2, r3, #24
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	e035      	b.n	8000cfa <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68d9      	ldr	r1, [r3, #12]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4403      	add	r3, r0
 8000ca6:	3b1e      	subs	r3, #30
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	e022      	b.n	8000cfa <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6919      	ldr	r1, [r3, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2207      	movs	r2, #7
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6919      	ldr	r1, [r3, #16]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4403      	add	r3, r0
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d824      	bhi.n	8000d4c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	3b05      	subs	r3, #5
 8000d14:	221f      	movs	r2, #31
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	400a      	ands	r2, r1
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b05      	subs	r3, #5
 8000d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4a:	e04c      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b0c      	cmp	r3, #12
 8000d52:	d824      	bhi.n	8000d9e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	3b23      	subs	r3, #35	; 0x23
 8000d66:	221f      	movs	r2, #31
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	400a      	ands	r2, r1
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3b23      	subs	r3, #35	; 0x23
 8000d90:	fa00 f203 	lsl.w	r2, r0, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d9c:	e023      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	3b41      	subs	r3, #65	; 0x41
 8000db0:	221f      	movs	r2, #31
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b41      	subs	r3, #65	; 0x41
 8000dda:	fa00 f203 	lsl.w	r2, r0, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_ADC_ConfigChannel+0x258>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d109      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1e8>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b12      	cmp	r3, #18
 8000df6:	d105      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e02:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <HAL_ADC_ConfigChannel+0x258>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d125      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d003      	beq.n	8000e20 <HAL_ADC_ConfigChannel+0x204>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d11c      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e2a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d111      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_ADC_ConfigChannel+0x260>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_ADC_ConfigChannel+0x264>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	0c9a      	lsrs	r2, r3, #18
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f9      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	10000012 	.word	0x10000012
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40012300 	.word	0x40012300
 8000e7c:	20000060 	.word	0x20000060
 8000e80:	431bde83 	.word	0x431bde83

08000e84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000e8c:	4b78      	ldr	r3, [pc, #480]	; (8001070 <ADC_Init+0x1ec>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a77      	ldr	r2, [pc, #476]	; (8001070 <ADC_Init+0x1ec>)
 8000e92:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000e98:	4b75      	ldr	r3, [pc, #468]	; (8001070 <ADC_Init+0x1ec>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4973      	ldr	r1, [pc, #460]	; (8001070 <ADC_Init+0x1ec>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6859      	ldr	r1, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	021a      	lsls	r2, r3, #8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6859      	ldr	r1, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6899      	ldr	r1, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	4a58      	ldr	r2, [pc, #352]	; (8001074 <ADC_Init+0x1f0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d022      	beq.n	8000f5e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6899      	ldr	r1, [r3, #8]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6899      	ldr	r1, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	e00f      	b.n	8000f7e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0202 	bic.w	r2, r2, #2
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6899      	ldr	r1, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	005a      	lsls	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01b      	beq.n	8000fe4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	035a      	lsls	r2, r3, #13
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	e007      	b.n	8000ff4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	3b01      	subs	r3, #1
 8001010:	051a      	lsls	r2, r3, #20
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6899      	ldr	r1, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001036:	025a      	lsls	r2, r3, #9
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6899      	ldr	r1, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	029a      	lsls	r2, r3, #10
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	609a      	str	r2, [r3, #8]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40012300 	.word	0x40012300
 8001074:	0f000001 	.word	0x0f000001

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0000 	.word	0x05fa0000

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db10      	blt.n	800114c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <__NVIC_DisableIRQ+0x40>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	3320      	adds	r3, #32
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001148:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff2a 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff3f 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb1 	bl	80011b0 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff80 	bl	800115c <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff32 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff42 	bl	8001118 <__NVIC_DisableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e054      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7f5b      	ldrb	r3, [r3, #29]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f01a fd48 	bl	801bd54 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_CRC_Init+0xc4>)
 80012d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0218 	bic.w	r2, r2, #24
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e00c      	b.n	8001306 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	461a      	mov	r2, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f834 	bl	8001364 <HAL_CRCEx_Polynomial_Set>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e028      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	e004      	b.n	8001324 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6912      	ldr	r2, [r2, #16]
 8001322:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	04c11db7 	.word	0x04c11db7

08001364 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001374:	231f      	movs	r3, #31
 8001376:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001378:	bf00      	nop
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	613a      	str	r2, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d009      	beq.n	8001398 <HAL_CRCEx_Polynomial_Set+0x34>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b18      	cmp	r3, #24
 800139c:	d846      	bhi.n	800142c <HAL_CRCEx_Polynomial_Set+0xc8>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	08001433 	.word	0x08001433
 80013a8:	0800142d 	.word	0x0800142d
 80013ac:	0800142d 	.word	0x0800142d
 80013b0:	0800142d 	.word	0x0800142d
 80013b4:	0800142d 	.word	0x0800142d
 80013b8:	0800142d 	.word	0x0800142d
 80013bc:	0800142d 	.word	0x0800142d
 80013c0:	0800142d 	.word	0x0800142d
 80013c4:	08001421 	.word	0x08001421
 80013c8:	0800142d 	.word	0x0800142d
 80013cc:	0800142d 	.word	0x0800142d
 80013d0:	0800142d 	.word	0x0800142d
 80013d4:	0800142d 	.word	0x0800142d
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	0800142d 	.word	0x0800142d
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	08001415 	.word	0x08001415
 80013e8:	0800142d 	.word	0x0800142d
 80013ec:	0800142d 	.word	0x0800142d
 80013f0:	0800142d 	.word	0x0800142d
 80013f4:	0800142d 	.word	0x0800142d
 80013f8:	0800142d 	.word	0x0800142d
 80013fc:	0800142d 	.word	0x0800142d
 8001400:	0800142d 	.word	0x0800142d
 8001404:	08001409 	.word	0x08001409
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d913      	bls.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001412:	e010      	b.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b07      	cmp	r3, #7
 8001418:	d90f      	bls.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800141e:	e00c      	b.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d90b      	bls.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800142a:	e008      	b.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	75fb      	strb	r3, [r7, #23]
      break;
 8001430:	e006      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001432:	bf00      	nop
 8001434:	e004      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001436:	bf00      	nop
 8001438:	e002      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 0118 	bic.w	r1, r3, #24
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e062      	b.n	8001548 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f01a fc80 	bl	801bd94 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_DCMI_Init+0xe0>)
 80014a8:	400b      	ands	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6819      	ldr	r1, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014d8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014f0:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d112      	bne.n	8001528 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7f5b      	ldrb	r3, [r3, #29]
 800150c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800150e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7f9b      	ldrb	r3, [r3, #30]
 8001514:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001516:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7fdb      	ldrb	r3, [r3, #31]
 800151e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001524:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001526:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 021e 	orr.w	r2, r2, #30
 8001536:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	ffe0f007 	.word	0xffe0f007

08001554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff faea 	bl	8000b38 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e099      	b.n	80016a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001590:	e00f      	b.n	80015b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001592:	f7ff fad1 	bl	8000b38 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b05      	cmp	r3, #5
 800159e:	d908      	bls.n	80015b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2220      	movs	r2, #32
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e078      	b.n	80016a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e8      	bne.n	8001592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_DMA_Init+0x158>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	2b04      	cmp	r3, #4
 800160a:	d107      	bne.n	800161c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	4313      	orrs	r3, r2
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4313      	orrs	r3, r2
 800161a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f023 0307 	bic.w	r3, r3, #7
 8001632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	4313      	orrs	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	2b04      	cmp	r3, #4
 8001644:	d117      	bne.n	8001676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4313      	orrs	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00e      	beq.n	8001676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 faa5 	bl	8001ba8 <DMA_CheckFifoParam>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001672:	2301      	movs	r3, #1
 8001674:	e016      	b.n	80016a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fa5c 	bl	8001b3c <DMA_CalcBaseAndBitshift>
 8001684:	4603      	mov	r3, r0
 8001686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	223f      	movs	r2, #63	; 0x3f
 800168e:	409a      	lsls	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f010803f 	.word	0xf010803f

080016b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_DMA_Start_IT+0x26>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e048      	b.n	8001768 <HAL_DMA_Start_IT+0xb8>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d137      	bne.n	800175a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f9ee 	bl	8001ae0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	223f      	movs	r2, #63	; 0x3f
 800170a:	409a      	lsls	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0216 	orr.w	r2, r2, #22
 800171e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800172e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0208 	orr.w	r2, r2, #8
 8001746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e005      	b.n	8001766 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001762:	2302      	movs	r3, #2
 8001764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001766:	7dfb      	ldrb	r3, [r7, #23]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d004      	beq.n	800178e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00c      	b.n	80017a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2205      	movs	r2, #5
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0201 	bic.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80017c0:	4b92      	ldr	r3, [pc, #584]	; (8001a0c <HAL_DMA_IRQHandler+0x258>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a92      	ldr	r2, [pc, #584]	; (8001a10 <HAL_DMA_IRQHandler+0x25c>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0a9b      	lsrs	r3, r3, #10
 80017cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2208      	movs	r2, #8
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01a      	beq.n	8001820 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0204 	bic.w	r2, r2, #4
 8001806:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2208      	movs	r2, #8
 800180e:	409a      	lsls	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	2201      	movs	r2, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d012      	beq.n	8001856 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2201      	movs	r2, #1
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	f043 0202 	orr.w	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	2204      	movs	r2, #4
 800185c:	409a      	lsls	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d012      	beq.n	800188c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	2204      	movs	r2, #4
 800187a:	409a      	lsls	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	f043 0204 	orr.w	r2, r3, #4
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	2210      	movs	r2, #16
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d043      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d03c      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	2210      	movs	r2, #16
 80018b0:	409a      	lsls	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d018      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d108      	bne.n	80018e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d024      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
 80018e2:	e01f      	b.n	8001924 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01b      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
 80018f4:	e016      	b.n	8001924 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d107      	bne.n	8001914 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0208 	bic.w	r2, r2, #8
 8001912:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2220      	movs	r2, #32
 800192a:	409a      	lsls	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 808e 	beq.w	8001a52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8086 	beq.w	8001a52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	2220      	movs	r2, #32
 800194c:	409a      	lsls	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b05      	cmp	r3, #5
 800195c:	d136      	bne.n	80019cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0216 	bic.w	r2, r2, #22
 800196c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800197c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_DMA_IRQHandler+0x1da>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0208 	bic.w	r2, r2, #8
 800199c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	223f      	movs	r2, #63	; 0x3f
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d07d      	beq.n	8001abe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
        }
        return;
 80019ca:	e078      	b.n	8001abe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d01c      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d108      	bne.n	80019fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d030      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
 80019f8:	e02b      	b.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d027      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
 8001a0a:	e022      	b.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
 8001a0c:	20000060 	.word	0x20000060
 8001a10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0210 	bic.w	r2, r2, #16
 8001a30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d032      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d022      	beq.n	8001aac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2205      	movs	r2, #5
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d307      	bcc.n	8001a9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f2      	bne.n	8001a7e <HAL_DMA_IRQHandler+0x2ca>
 8001a98:	e000      	b.n	8001a9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e000      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001abe:	bf00      	nop
    }
  }
}
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop

08001ac8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001afc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b40      	cmp	r3, #64	; 0x40
 8001b0c:	d108      	bne.n	8001b20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b1e:	e007      	b.n	8001b30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3b10      	subs	r3, #16
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <DMA_CalcBaseAndBitshift+0x60>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <DMA_CalcBaseAndBitshift+0x64>)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d908      	bls.n	8001b7c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <DMA_CalcBaseAndBitshift+0x68>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	1d1a      	adds	r2, r3, #4
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58
 8001b7a:	e006      	b.n	8001b8a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <DMA_CalcBaseAndBitshift+0x68>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ba0:	08026314 	.word	0x08026314
 8001ba4:	fffffc00 	.word	0xfffffc00

08001ba8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11f      	bne.n	8001c02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d855      	bhi.n	8001c74 <DMA_CheckFifoParam+0xcc>
 8001bc8:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <DMA_CheckFifoParam+0x28>)
 8001bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bce:	bf00      	nop
 8001bd0:	08001be1 	.word	0x08001be1
 8001bd4:	08001bf3 	.word	0x08001bf3
 8001bd8:	08001be1 	.word	0x08001be1
 8001bdc:	08001c75 	.word	0x08001c75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d045      	beq.n	8001c78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf0:	e042      	b.n	8001c78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bfa:	d13f      	bne.n	8001c7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c00:	e03c      	b.n	8001c7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c0a:	d121      	bne.n	8001c50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d836      	bhi.n	8001c80 <DMA_CheckFifoParam+0xd8>
 8001c12:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <DMA_CheckFifoParam+0x70>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c2f 	.word	0x08001c2f
 8001c20:	08001c29 	.word	0x08001c29
 8001c24:	08001c41 	.word	0x08001c41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c2c:	e02f      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d024      	beq.n	8001c84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3e:	e021      	b.n	8001c84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c48:	d11e      	bne.n	8001c88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c4e:	e01b      	b.n	8001c88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d902      	bls.n	8001c5c <DMA_CheckFifoParam+0xb4>
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d003      	beq.n	8001c62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c5a:	e018      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c60:	e015      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00e      	beq.n	8001c8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
      break;
 8001c72:	e00b      	b.n	8001c8c <DMA_CheckFifoParam+0xe4>
      break;
 8001c74:	bf00      	nop
 8001c76:	e00a      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      break;
 8001c78:	bf00      	nop
 8001c7a:	e008      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      break;
 8001c7c:	bf00      	nop
 8001c7e:	e006      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      break;
 8001c80:	bf00      	nop
 8001c82:	e004      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      break;
 8001c84:	bf00      	nop
 8001c86:	e002      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      break;   
 8001c88:	bf00      	nop
 8001c8a:	e000      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      break;
 8001c8c:	bf00      	nop
    }
  } 
  
  return status; 
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e039      	b.n	8001d22 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f018 fa6c 	bl	801a1a0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	f023 0107 	bic.w	r1, r3, #7
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_DMA2D_Init+0x90>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68d1      	ldr	r1, [r2, #12]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	ffffc000 	.word	0xffffc000

08001d30 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e05f      	b.n	8001e02 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8001d42:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_DMA2D_DeInit+0xdc>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d02e      	beq.n	8001dac <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f8c1 	bl	8001ee4 <HAL_DMA2D_Abort>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d021      	beq.n	8001dac <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e04a      	b.n	8001e02 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d108      	bne.n	8001d8c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8f7 	bl	8001f70 <HAL_DMA2D_CLUTLoading_Abort>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d011      	beq.n	8001dac <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e03a      	b.n	8001e02 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d108      	bne.n	8001dac <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8e7 	bl	8001f70 <HAL_DMA2D_CLUTLoading_Abort>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e02a      	b.n	8001e02 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	223f      	movs	r2, #63	; 0x3f
 8001dba:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f018 f9fb 	bl	801a1e0 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_DMA2D_Start_IT+0x1c>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e020      	b.n	8001e6e <HAL_DMA2D_Start_IT+0x5e>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 fa84 	bl	8002354 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af02      	add	r7, sp, #8
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e024      	b.n	8001edc <HAL_DMA2D_BlendingStart_IT+0x66>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fa4d 	bl	8002354 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001ec8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0205 	bic.w	r2, r3, #5
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0204 	orr.w	r2, r2, #4
 8001efe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f00:	f7fe fe1a 	bl	8000b38 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001f06:	e017      	b.n	8001f38 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8001f08:	f7fe fe16 	bl	8000b38 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f16:	d90f      	bls.n	8001f38 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2203      	movs	r2, #3
 8001f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e017      	b.n	8001f68 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1e0      	bne.n	8001f08 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8001f54:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3324      	adds	r3, #36	; 0x24
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0204 	orr.w	r2, r2, #4
 8001f90:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d103      	bne.n	8001fa0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	331c      	adds	r3, #28
 8001f9e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa0:	f7fe fdca 	bl	8000b38 <HAL_GetTick>
 8001fa4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8001fa6:	e017      	b.n	8001fd8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8001fa8:	f7fe fdc6 	bl	8000b38 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb6:	d90f      	bls.n	8001fd8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e016      	b.n	8002006 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1e1      	bne.n	8001fa8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d026      	beq.n	800207e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d021      	beq.n	800207e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002048:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2204      	movs	r2, #4
 8002062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b00      	cmp	r3, #0
 8002086:	d026      	beq.n	80020d6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d021      	beq.n	80020d6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020a0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2220      	movs	r2, #32
 80020a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2204      	movs	r2, #4
 80020ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d026      	beq.n	800212e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d021      	beq.n	800212e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2208      	movs	r2, #8
 8002100:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2204      	movs	r2, #4
 8002112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00e      	beq.n	8002160 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002150:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2204      	movs	r2, #4
 8002158:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f853 	bl	8002206 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d024      	beq.n	80021b4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01f      	beq.n	80021b4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2202      	movs	r2, #2
 800218a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01f      	beq.n	80021fe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01a      	beq.n	80021fe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2210      	movs	r2, #16
 80021de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f80e 	bl	800221a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_DMA2D_ConfigLayer+0x20>
 800224c:	2302      	movs	r3, #2
 800224e:	e079      	b.n	8002344 <HAL_DMA2D_ConfigLayer+0x114>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	3318      	adds	r3, #24
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_DMA2D_ConfigLayer+0x120>)
 800227c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b0a      	cmp	r3, #10
 8002284:	d003      	beq.n	800228e <HAL_DMA2D_ConfigLayer+0x5e>
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b09      	cmp	r3, #9
 800228c:	d107      	bne.n	800229e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e005      	b.n	80022aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	061b      	lsls	r3, r3, #24
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d120      	bne.n	80022f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	ea02 0103 	and.w	r1, r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b0a      	cmp	r3, #10
 80022d8:	d003      	beq.n	80022e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b09      	cmp	r3, #9
 80022e0:	d127      	bne.n	8002332 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
 80022f0:	e01f      	b.n	8002332 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	ea02 0103 	and.w	r1, r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	430a      	orrs	r2, r1
 8002308:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b0a      	cmp	r3, #10
 800231a:	d003      	beq.n	8002324 <HAL_DMA2D_ConfigLayer+0xf4>
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d106      	bne.n	8002332 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002330:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	ff03000f 	.word	0xff03000f

08002354 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002354:	b480      	push	{r7}
 8002356:	b08b      	sub	sp, #44	; 0x2c
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	041a      	lsls	r2, r3, #16
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	431a      	orrs	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800238c:	d174      	bne.n	8002478 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002394:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800239c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80023a4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d108      	bne.n	80023c6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	4313      	orrs	r3, r2
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
 80023c4:	e053      	b.n	800246e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d106      	bne.n	80023dc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	e048      	b.n	800246e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d111      	bne.n	8002408 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	0cdb      	lsrs	r3, r3, #19
 80023e8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	0a9b      	lsrs	r3, r3, #10
 80023ee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	08db      	lsrs	r3, r3, #3
 80023f4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	02db      	lsls	r3, r3, #11
 80023fe:	4313      	orrs	r3, r2
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	e032      	b.n	800246e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d117      	bne.n	8002440 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	0fdb      	lsrs	r3, r3, #31
 8002414:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	0cdb      	lsrs	r3, r3, #19
 800241a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	0adb      	lsrs	r3, r3, #11
 8002420:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	029b      	lsls	r3, r3, #10
 8002430:	431a      	orrs	r2, r3
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	03db      	lsls	r3, r3, #15
 8002436:	4313      	orrs	r3, r2
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	e016      	b.n	800246e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	0f1b      	lsrs	r3, r3, #28
 8002444:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	0d1b      	lsrs	r3, r3, #20
 800244a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	0b1b      	lsrs	r3, r3, #12
 8002450:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	011a      	lsls	r2, r3, #4
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	431a      	orrs	r2, r3
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	031b      	lsls	r3, r3, #12
 8002466:	4313      	orrs	r3, r2
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002476:	e003      	b.n	8002480 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	60da      	str	r2, [r3, #12]
}
 8002480:	bf00      	nop
 8002482:	372c      	adds	r7, #44	; 0x2c
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800249c:	4ba9      	ldr	r3, [pc, #676]	; (8002744 <HAL_ETH_Init+0x2b8>)
 800249e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e183      	b.n	80027ba <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f019 fd22 	bl	801bf10 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024cc:	4b9e      	ldr	r3, [pc, #632]	; (8002748 <HAL_ETH_Init+0x2bc>)
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	4a9d      	ldr	r2, [pc, #628]	; (8002748 <HAL_ETH_Init+0x2bc>)
 80024d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d6:	6453      	str	r3, [r2, #68]	; 0x44
 80024d8:	4b9b      	ldr	r3, [pc, #620]	; (8002748 <HAL_ETH_Init+0x2bc>)
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024e4:	4b99      	ldr	r3, [pc, #612]	; (800274c <HAL_ETH_Init+0x2c0>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a98      	ldr	r2, [pc, #608]	; (800274c <HAL_ETH_Init+0x2c0>)
 80024ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024ee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024f0:	4b96      	ldr	r3, [pc, #600]	; (800274c <HAL_ETH_Init+0x2c0>)
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4994      	ldr	r1, [pc, #592]	; (800274c <HAL_ETH_Init+0x2c0>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002514:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002516:	f7fe fb0f 	bl	8000b38 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800251c:	e011      	b.n	8002542 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800251e:	f7fe fb0b 	bl	8000b38 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800252c:	d909      	bls.n	8002542 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e13b      	b.n	80027ba <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e4      	bne.n	800251e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f023 031c 	bic.w	r3, r3, #28
 8002562:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002564:	f004 fa5e 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 8002568:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4a78      	ldr	r2, [pc, #480]	; (8002750 <HAL_ETH_Init+0x2c4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d908      	bls.n	8002584 <HAL_ETH_Init+0xf8>
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4a77      	ldr	r2, [pc, #476]	; (8002754 <HAL_ETH_Init+0x2c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d804      	bhi.n	8002584 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e027      	b.n	80025d4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4a73      	ldr	r2, [pc, #460]	; (8002754 <HAL_ETH_Init+0x2c8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d908      	bls.n	800259e <HAL_ETH_Init+0x112>
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_ETH_Init+0x2cc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d804      	bhi.n	800259e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f043 030c 	orr.w	r3, r3, #12
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	e01a      	b.n	80025d4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4a6d      	ldr	r2, [pc, #436]	; (8002758 <HAL_ETH_Init+0x2cc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d903      	bls.n	80025ae <HAL_ETH_Init+0x122>
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4a6c      	ldr	r2, [pc, #432]	; (800275c <HAL_ETH_Init+0x2d0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d911      	bls.n	80025d2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	; (800275c <HAL_ETH_Init+0x2d0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d908      	bls.n	80025c8 <HAL_ETH_Init+0x13c>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4a69      	ldr	r2, [pc, #420]	; (8002760 <HAL_ETH_Init+0x2d4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d804      	bhi.n	80025c8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e005      	b.n	80025d4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f043 0310 	orr.w	r3, r3, #16
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	e000      	b.n	80025d4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80025dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025e0:	2100      	movs	r1, #0
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f956 	bl	8002894 <HAL_ETH_WritePHYRegister>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80025f2:	6939      	ldr	r1, [r7, #16]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f9b3 	bl	8002960 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0d9      	b.n	80027ba <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002606:	f640 70ff 	movw	r0, #4095	; 0xfff
 800260a:	f7fe faa1 	bl	8000b50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80a6 	beq.w	8002764 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002618:	f7fe fa8e 	bl	8000b38 <HAL_GetTick>
 800261c:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800261e:	f107 030c 	add.w	r3, r7, #12
 8002622:	461a      	mov	r2, r3
 8002624:	2101      	movs	r1, #1
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8cc 	bl	80027c4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800262c:	f7fe fa84 	bl	8000b38 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d90f      	bls.n	800265e <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002642:	6939      	ldr	r1, [r7, #16]
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f98b 	bl	8002960 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e0ad      	b.n	80027ba <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0da      	beq.n	800261e <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800266c:	2100      	movs	r1, #0
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f910 	bl	8002894 <HAL_ETH_WritePHYRegister>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800267e:	6939      	ldr	r1, [r7, #16]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f96d 	bl	8002960 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800268e:	2301      	movs	r3, #1
 8002690:	e093      	b.n	80027ba <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002692:	f7fe fa51 	bl	8000b38 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	461a      	mov	r2, r3
 800269e:	2101      	movs	r1, #1
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f88f 	bl	80027c4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80026a6:	f7fe fa47 	bl	8000b38 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d90f      	bls.n	80026d8 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026bc:	6939      	ldr	r1, [r7, #16]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f94e 	bl	8002960 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e070      	b.n	80027ba <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0da      	beq.n	8002698 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80026e2:	f107 030c 	add.w	r3, r7, #12
 80026e6:	461a      	mov	r2, r3
 80026e8:	211f      	movs	r1, #31
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f86a 	bl	80027c4 <HAL_ETH_ReadPHYRegister>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80026fa:	6939      	ldr	r1, [r7, #16]
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f92f 	bl	8002960 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800270a:	2301      	movs	r3, #1
 800270c:	e055      	b.n	80027ba <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	e002      	b.n	8002728 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e036      	b.n	80027a8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	e031      	b.n	80027a8 <HAL_ETH_Init+0x31c>
 8002744:	03938700 	.word	0x03938700
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	01312cff 	.word	0x01312cff
 8002754:	02160ebf 	.word	0x02160ebf
 8002758:	039386ff 	.word	0x039386ff
 800275c:	05f5e0ff 	.word	0x05f5e0ff
 8002760:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	08db      	lsrs	r3, r3, #3
 800276a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002774:	4313      	orrs	r3, r2
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f889 	bl	8002894 <HAL_ETH_WritePHYRegister>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800278c:	6939      	ldr	r1, [r7, #16]
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8e6 	bl	8002960 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e00c      	b.n	80027ba <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80027a0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80027a4:	f7fe f9d4 	bl	8000b50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80027a8:	6939      	ldr	r1, [r7, #16]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8d8 	bl	8002960 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop

080027c4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	460b      	mov	r3, r1
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b82      	cmp	r3, #130	; 0x82
 80027e4:	d101      	bne.n	80027ea <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	e050      	b.n	800288c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2282      	movs	r2, #130	; 0x82
 80027ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 031c 	and.w	r3, r3, #28
 8002800:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8a1b      	ldrh	r3, [r3, #16]
 8002806:	02db      	lsls	r3, r3, #11
 8002808:	b29b      	uxth	r3, r3
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	019b      	lsls	r3, r3, #6
 8002814:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f023 0302 	bic.w	r3, r3, #2
 8002824:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002836:	f7fe f97f 	bl	8000b38 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800283c:	e015      	b.n	800286a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800283e:	f7fe f97b 	bl	8000b38 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d309      	bcc.n	8002862 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e014      	b.n	800288c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e4      	bne.n	800283e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	b29b      	uxth	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	460b      	mov	r3, r1
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b42      	cmp	r3, #66	; 0x42
 80028b4:	d101      	bne.n	80028ba <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	e04e      	b.n	8002958 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2242      	movs	r2, #66	; 0x42
 80028be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f003 031c 	and.w	r3, r3, #28
 80028d0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8a1b      	ldrh	r3, [r3, #16]
 80028d6:	02db      	lsls	r3, r3, #11
 80028d8:	b29b      	uxth	r3, r3
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80028e0:	897b      	ldrh	r3, [r7, #10]
 80028e2:	019b      	lsls	r3, r3, #6
 80028e4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002910:	f7fe f912 	bl	8000b38 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002916:	e015      	b.n	8002944 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002918:	f7fe f90e 	bl	8000b38 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002926:	d309      	bcc.n	800293c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e00d      	b.n	8002958 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e4      	bne.n	8002918 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b0b0      	sub	sp, #192	; 0xc0
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002984:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800298e:	2300      	movs	r3, #0
 8002990:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80029a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029aa:	663b      	str	r3, [r7, #96]	; 0x60
 80029ac:	e001      	b.n	80029b2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80029b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029bc:	2300      	movs	r3, #0
 80029be:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80029cc:	2340      	movs	r3, #64	; 0x40
 80029ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002a34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a38:	4bab      	ldr	r3, [pc, #684]	; (8002ce8 <ETH_MACDMAConfig+0x388>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a44:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002a48:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002a4c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002a52:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002a56:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002a5a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002a60:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002a64:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002a68:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002a6c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002a70:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002a74:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a88:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a94:	2001      	movs	r0, #1
 8002a96:	f7fe f85b 	bl	8000b50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aa2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002aa4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002aa8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002aac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002ab2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002ab8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002abe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002ac4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002ac8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002ad0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ad2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f7fe f836 	bl	8000b50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002af6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b00:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002b0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b10:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b14:	4013      	ands	r3, r2
 8002b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b1e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002b20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002b24:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002b2a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002b30:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002b36:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002b3c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002b3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b50:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7fd fff7 	bl	8000b50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b6a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b6c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002b70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f7fd ffe2 	bl	8000b50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b94:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b9e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002ba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ba8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002bde:	2300      	movs	r3, #0
 8002be0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bea:	4413      	add	r3, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002bf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <ETH_MACDMAConfig+0x38c>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bfe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002c00:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c02:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002c04:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002c06:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002c08:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002c0a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002c0c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002c0e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002c10:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002c12:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002c14:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002c16:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002c1a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002c1e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c32:	4413      	add	r3, r2
 8002c34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c42:	4413      	add	r3, r2
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f7fd ff80 	bl	8000b50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c58:	4413      	add	r3, r2
 8002c5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c5e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c64:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002c68:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c6c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002c70:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c74:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002c76:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002c7a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c88:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c98:	2001      	movs	r0, #1
 8002c9a:	f7fd ff59 	bl	8000b50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002caa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10d      	bne.n	8002cd0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f241 031c 	movw	r3, #4124	; 0x101c
 8002cbc:	4413      	add	r3, r2
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6811      	ldr	r1, [r2, #0]
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <ETH_MACDMAConfig+0x390>)
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	f241 031c 	movw	r3, #4124	; 0x101c
 8002ccc:	440b      	add	r3, r1
 8002cce:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f80b 	bl	8002cf4 <ETH_MACAddressConfig>
}
 8002cde:	bf00      	nop
 8002ce0:	37c0      	adds	r7, #192	; 0xc0
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	ff20810f 	.word	0xff20810f
 8002cec:	f8de3f23 	.word	0xf8de3f23
 8002cf0:	00010040 	.word	0x00010040

08002cf4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3305      	adds	r3, #5
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	3204      	adds	r2, #4
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <ETH_MACAddressConfig+0x68>)
 8002d16:	4413      	add	r3, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3303      	adds	r3, #3
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	061a      	lsls	r2, r3, #24
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3301      	adds	r3, #1
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <ETH_MACAddressConfig+0x6c>)
 8002d46:	4413      	add	r3, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6013      	str	r3, [r2, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40028040 	.word	0x40028040
 8002d60:	40028044 	.word	0x40028044

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e175      	b.n	8003070 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 8164 	bne.w	800306a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x4e>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b12      	cmp	r3, #18
 8002db0:	d123      	bne.n	8002dfa <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	08da      	lsrs	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3208      	adds	r2, #8
 8002df4:	69b9      	ldr	r1, [r7, #24]
 8002df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0203 	and.w	r2, r3, #3
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d00b      	beq.n	8002e4e <HAL_GPIO_Init+0xea>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e42:	2b11      	cmp	r3, #17
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b12      	cmp	r3, #18
 8002e4c:	d130      	bne.n	8002eb0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e84:	2201      	movs	r2, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 0201 	and.w	r2, r3, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	2203      	movs	r2, #3
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80be 	beq.w	800306a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	4a64      	ldr	r2, [pc, #400]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f06:	4a60      	ldr	r2, [pc, #384]	; (8003088 <HAL_GPIO_Init+0x324>)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_GPIO_Init+0x328>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d037      	beq.n	8002fa2 <HAL_GPIO_Init+0x23e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a56      	ldr	r2, [pc, #344]	; (8003090 <HAL_GPIO_Init+0x32c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_GPIO_Init+0x23a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a55      	ldr	r2, [pc, #340]	; (8003094 <HAL_GPIO_Init+0x330>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_Init+0x236>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a54      	ldr	r2, [pc, #336]	; (8003098 <HAL_GPIO_Init+0x334>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_Init+0x232>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a53      	ldr	r2, [pc, #332]	; (800309c <HAL_GPIO_Init+0x338>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x22e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_GPIO_Init+0x33c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x22a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a51      	ldr	r2, [pc, #324]	; (80030a4 <HAL_GPIO_Init+0x340>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x226>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a50      	ldr	r2, [pc, #320]	; (80030a8 <HAL_GPIO_Init+0x344>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x222>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <HAL_GPIO_Init+0x348>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x21e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4e      	ldr	r2, [pc, #312]	; (80030b0 <HAL_GPIO_Init+0x34c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x21a>
 8002f7a:	2309      	movs	r3, #9
 8002f7c:	e012      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f7e:	230a      	movs	r3, #10
 8002f80:	e010      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f82:	2308      	movs	r3, #8
 8002f84:	e00e      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f86:	2307      	movs	r3, #7
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fb4:	4934      	ldr	r1, [pc, #208]	; (8003088 <HAL_GPIO_Init+0x324>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc2:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fe6:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fec:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003010:	4a28      	ldr	r2, [pc, #160]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003016:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303a:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_GPIO_Init+0x350>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	f67f ae86 	bls.w	8002d84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3724      	adds	r7, #36	; 0x24
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40023800 	.word	0x40023800
 8003088:	40013800 	.word	0x40013800
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40020800 	.word	0x40020800
 8003098:	40020c00 	.word	0x40020c00
 800309c:	40021000 	.word	0x40021000
 80030a0:	40021400 	.word	0x40021400
 80030a4:	40021800 	.word	0x40021800
 80030a8:	40021c00 	.word	0x40021c00
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40022400 	.word	0x40022400
 80030b4:	40013c00 	.word	0x40013c00

080030b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e0d9      	b.n	8003288 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	f040 80c9 	bne.w	8003282 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80030f0:	4a6a      	ldr	r2, [pc, #424]	; (800329c <HAL_GPIO_DeInit+0x1e4>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a62      	ldr	r2, [pc, #392]	; (80032a0 <HAL_GPIO_DeInit+0x1e8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d037      	beq.n	800318a <HAL_GPIO_DeInit+0xd2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a61      	ldr	r2, [pc, #388]	; (80032a4 <HAL_GPIO_DeInit+0x1ec>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_GPIO_DeInit+0xce>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a60      	ldr	r2, [pc, #384]	; (80032a8 <HAL_GPIO_DeInit+0x1f0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02b      	beq.n	8003182 <HAL_GPIO_DeInit+0xca>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a5f      	ldr	r2, [pc, #380]	; (80032ac <HAL_GPIO_DeInit+0x1f4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d025      	beq.n	800317e <HAL_GPIO_DeInit+0xc6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a5e      	ldr	r2, [pc, #376]	; (80032b0 <HAL_GPIO_DeInit+0x1f8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01f      	beq.n	800317a <HAL_GPIO_DeInit+0xc2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a5d      	ldr	r2, [pc, #372]	; (80032b4 <HAL_GPIO_DeInit+0x1fc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d019      	beq.n	8003176 <HAL_GPIO_DeInit+0xbe>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <HAL_GPIO_DeInit+0x200>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_DeInit+0xba>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a5b      	ldr	r2, [pc, #364]	; (80032bc <HAL_GPIO_DeInit+0x204>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_DeInit+0xb6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a5a      	ldr	r2, [pc, #360]	; (80032c0 <HAL_GPIO_DeInit+0x208>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_DeInit+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a59      	ldr	r2, [pc, #356]	; (80032c4 <HAL_GPIO_DeInit+0x20c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_DeInit+0xae>
 8003162:	2309      	movs	r3, #9
 8003164:	e012      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003166:	230a      	movs	r3, #10
 8003168:	e010      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800316a:	2308      	movs	r3, #8
 800316c:	e00e      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800316e:	2307      	movs	r3, #7
 8003170:	e00c      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003172:	2306      	movs	r3, #6
 8003174:	e00a      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003176:	2305      	movs	r3, #5
 8003178:	e008      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800317a:	2304      	movs	r3, #4
 800317c:	e006      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_DeInit+0xd4>
 800318a:	2300      	movs	r3, #0
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	429a      	cmp	r2, r3
 800319a:	d132      	bne.n	8003202 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80031ac:	4a3b      	ldr	r2, [pc, #236]	; (800329c <HAL_GPIO_DeInit+0x1e4>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	43da      	mvns	r2, r3
 80031bc:	4837      	ldr	r0, [pc, #220]	; (800329c <HAL_GPIO_DeInit+0x1e4>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	400a      	ands	r2, r1
 80031c4:	3302      	adds	r3, #2
 80031c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031ca:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <HAL_GPIO_DeInit+0x210>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	493d      	ldr	r1, [pc, #244]	; (80032c8 <HAL_GPIO_DeInit+0x210>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031d8:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_GPIO_DeInit+0x210>)
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43db      	mvns	r3, r3
 80031e0:	4939      	ldr	r1, [pc, #228]	; (80032c8 <HAL_GPIO_DeInit+0x210>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031e6:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <HAL_GPIO_DeInit+0x210>)
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4936      	ldr	r1, [pc, #216]	; (80032c8 <HAL_GPIO_DeInit+0x210>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031f4:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <HAL_GPIO_DeInit+0x210>)
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4932      	ldr	r1, [pc, #200]	; (80032c8 <HAL_GPIO_DeInit+0x210>)
 80031fe:	4013      	ands	r3, r2
 8003200:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2103      	movs	r1, #3
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	401a      	ands	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	08da      	lsrs	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3208      	adds	r2, #8
 8003220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	220f      	movs	r2, #15
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	08d2      	lsrs	r2, r2, #3
 8003238:	4019      	ands	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2103      	movs	r1, #3
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	401a      	ands	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	2101      	movs	r1, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	401a      	ands	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2103      	movs	r1, #3
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	401a      	ands	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	3301      	adds	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b0f      	cmp	r3, #15
 800328c:	f67f af22 	bls.w	80030d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40013800 	.word	0x40013800
 80032a0:	40020000 	.word	0x40020000
 80032a4:	40020400 	.word	0x40020400
 80032a8:	40020800 	.word	0x40020800
 80032ac:	40020c00 	.word	0x40020c00
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40021400 	.word	0x40021400
 80032b8:	40021800 	.word	0x40021800
 80032bc:	40021c00 	.word	0x40021c00
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40022400 	.word	0x40022400
 80032c8:	40013c00 	.word	0x40013c00

080032cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
 80032e8:	e001      	b.n	80032ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800330c:	787b      	ldrb	r3, [r7, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003318:	e003      	b.n	8003322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800331a:	887b      	ldrh	r3, [r7, #2]
 800331c:	041a      	lsls	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	619a      	str	r2, [r3, #24]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800332e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003330:	b08d      	sub	sp, #52	; 0x34
 8003332:	af0a      	add	r7, sp, #40	; 0x28
 8003334:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e048      	b.n	80033d2 <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f019 fd79 	bl	801ce4c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f008 fdeb 	bl	800bf42 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	687e      	ldr	r6, [r7, #4]
 8003374:	466d      	mov	r5, sp
 8003376:	f106 0410 	add.w	r4, r6, #16
 800337a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003382:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003386:	e885 0003 	stmia.w	r5, {r0, r1}
 800338a:	1d33      	adds	r3, r6, #4
 800338c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f008 fd6e 	bl	800be70 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	4618      	mov	r0, r3
 800339c:	f008 fde2 	bl	800bf64 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	687e      	ldr	r6, [r7, #4]
 80033a8:	466d      	mov	r5, sp
 80033aa:	f106 0410 	add.w	r4, r6, #16
 80033ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80033be:	1d33      	adds	r3, r6, #4
 80033c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c2:	6838      	ldr	r0, [r7, #0]
 80033c4:	f008 fef4 	bl	800c1b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80033da:	b590      	push	{r4, r7, lr}
 80033dc:	b089      	sub	sp, #36	; 0x24
 80033de:	af04      	add	r7, sp, #16
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	4608      	mov	r0, r1
 80033e4:	4611      	mov	r1, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	70fb      	strb	r3, [r7, #3]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70bb      	strb	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_HCD_HC_Init+0x28>
 80033fe:	2302      	movs	r3, #2
 8003400:	e07f      	b.n	8003502 <HAL_HCD_HC_Init+0x128>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	333d      	adds	r3, #61	; 0x3d
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	3338      	adds	r3, #56	; 0x38
 800342e:	787a      	ldrb	r2, [r7, #1]
 8003430:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	3340      	adds	r3, #64	; 0x40
 8003442:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003444:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	3339      	adds	r3, #57	; 0x39
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	333f      	adds	r3, #63	; 0x3f
 800346a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800346e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	78bb      	ldrb	r3, [r7, #2]
 8003474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003478:	b2d8      	uxtb	r0, r3
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	333a      	adds	r3, #58	; 0x3a
 8003488:	4602      	mov	r2, r0
 800348a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800348c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003490:	2b00      	cmp	r3, #0
 8003492:	da0a      	bge.n	80034aa <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	333b      	adds	r3, #59	; 0x3b
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	e009      	b.n	80034be <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	440b      	add	r3, r1
 80034b8:	333b      	adds	r3, #59	; 0x3b
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	440b      	add	r3, r1
 80034cc:	333c      	adds	r3, #60	; 0x3c
 80034ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034d2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	787c      	ldrb	r4, [r7, #1]
 80034da:	78ba      	ldrb	r2, [r7, #2]
 80034dc:	78f9      	ldrb	r1, [r7, #3]
 80034de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034e0:	9302      	str	r3, [sp, #8]
 80034e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4623      	mov	r3, r4
 80034f0:	f008 ffd4 	bl	800c49c <USB_HC_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}

0800350a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_HCD_HC_Halt+0x1e>
 8003524:	2302      	movs	r3, #2
 8003526:	e00f      	b.n	8003548 <HAL_HCD_HC_Halt+0x3e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f009 fa0e 	bl	800c95a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	70fb      	strb	r3, [r7, #3]
 8003562:	460b      	mov	r3, r1
 8003564:	70bb      	strb	r3, [r7, #2]
 8003566:	4613      	mov	r3, r2
 8003568:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	333b      	adds	r3, #59	; 0x3b
 800357a:	78ba      	ldrb	r2, [r7, #2]
 800357c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	333f      	adds	r3, #63	; 0x3f
 800358e:	787a      	ldrb	r2, [r7, #1]
 8003590:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003592:	7c3b      	ldrb	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	440b      	add	r3, r1
 80035a6:	3342      	adds	r3, #66	; 0x42
 80035a8:	2203      	movs	r2, #3
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e009      	b.n	80035c2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	440b      	add	r3, r1
 80035bc:	3342      	adds	r3, #66	; 0x42
 80035be:	2202      	movs	r2, #2
 80035c0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80035c2:	787b      	ldrb	r3, [r7, #1]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	f200 80d6 	bhi.w	8003776 <HAL_HCD_HC_SubmitRequest+0x226>
 80035ca:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <HAL_HCD_HC_SubmitRequest+0x80>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	080035e1 	.word	0x080035e1
 80035d4:	08003761 	.word	0x08003761
 80035d8:	0800364d 	.word	0x0800364d
 80035dc:	080036d7 	.word	0x080036d7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80035e0:	7c3b      	ldrb	r3, [r7, #16]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	f040 80c9 	bne.w	800377a <HAL_HCD_HC_SubmitRequest+0x22a>
 80035e8:	78bb      	ldrb	r3, [r7, #2]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 80c5 	bne.w	800377a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80035f0:	8b3b      	ldrh	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	3351      	adds	r3, #81	; 0x51
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3351      	adds	r3, #81	; 0x51
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	440b      	add	r3, r1
 800362e:	3342      	adds	r3, #66	; 0x42
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003634:	e0a1      	b.n	800377a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	440b      	add	r3, r1
 8003644:	3342      	adds	r3, #66	; 0x42
 8003646:	2202      	movs	r2, #2
 8003648:	701a      	strb	r2, [r3, #0]
      break;
 800364a:	e096      	b.n	800377a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800364c:	78bb      	ldrb	r3, [r7, #2]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d120      	bne.n	8003694 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	440b      	add	r3, r1
 8003660:	3351      	adds	r3, #81	; 0x51
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	3342      	adds	r3, #66	; 0x42
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800367c:	e07e      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	3342      	adds	r3, #66	; 0x42
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
      break;
 8003692:	e073      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	3350      	adds	r3, #80	; 0x50
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	440b      	add	r3, r1
 80036b8:	3342      	adds	r3, #66	; 0x42
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
      break;
 80036be:	e05d      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	3342      	adds	r3, #66	; 0x42
 80036d0:	2202      	movs	r2, #2
 80036d2:	701a      	strb	r2, [r3, #0]
      break;
 80036d4:	e052      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80036d6:	78bb      	ldrb	r3, [r7, #2]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d120      	bne.n	800371e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	440b      	add	r3, r1
 80036ea:	3351      	adds	r3, #81	; 0x51
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	440b      	add	r3, r1
 8003700:	3342      	adds	r3, #66	; 0x42
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003706:	e039      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	3342      	adds	r3, #66	; 0x42
 8003718:	2202      	movs	r2, #2
 800371a:	701a      	strb	r2, [r3, #0]
      break;
 800371c:	e02e      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	440b      	add	r3, r1
 800372c:	3350      	adds	r3, #80	; 0x50
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	440b      	add	r3, r1
 8003742:	3342      	adds	r3, #66	; 0x42
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
      break;
 8003748:	e018      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	440b      	add	r3, r1
 8003758:	3342      	adds	r3, #66	; 0x42
 800375a:	2202      	movs	r2, #2
 800375c:	701a      	strb	r2, [r3, #0]
      break;
 800375e:	e00d      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	3342      	adds	r3, #66	; 0x42
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
      break;
 8003774:	e002      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800377a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	3344      	adds	r3, #68	; 0x44
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	8b39      	ldrh	r1, [r7, #24]
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4403      	add	r3, r0
 80037a0:	3348      	adds	r3, #72	; 0x48
 80037a2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	335c      	adds	r3, #92	; 0x5c
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	334c      	adds	r3, #76	; 0x4c
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	3339      	adds	r3, #57	; 0x39
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	440b      	add	r3, r1
 80037ee:	335d      	adds	r3, #93	; 0x5d
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	3338      	adds	r3, #56	; 0x38
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	18d1      	adds	r1, r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	f008 ff4e 	bl	800c6b0 <USB_HC_StartXfer>
 8003814:	4603      	mov	r3, r0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f008 fc77 	bl	800c12a <USB_GetMode>
 800383c:	4603      	mov	r3, r0
 800383e:	2b01      	cmp	r3, #1
 8003840:	f040 80f1 	bne.w	8003a26 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f008 fc5b 	bl	800c104 <USB_ReadInterrupts>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80e7 	beq.w	8003a24 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f008 fc52 	bl	800c104 <USB_ReadInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800386a:	d104      	bne.n	8003876 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003874:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f008 fc42 	bl	800c104 <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388a:	d104      	bne.n	8003896 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003894:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f008 fc32 	bl	800c104 <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038aa:	d104      	bne.n	80038b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f008 fc22 	bl	800c104 <USB_ReadInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d103      	bne.n	80038d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2202      	movs	r2, #2
 80038d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f008 fc14 	bl	800c104 <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e6:	d117      	bne.n	8003918 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80038f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038fa:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f019 fb17 	bl	801cf30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f008 fd01 	bl	800c310 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f008 fbf1 	bl	800c104 <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392c:	d102      	bne.n	8003934 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f001 f8c8 	bl	8004ac4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f008 fbe3 	bl	800c104 <USB_ReadInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b08      	cmp	r3, #8
 8003946:	d106      	bne.n	8003956 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f019 fad5 	bl	801cef8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2208      	movs	r2, #8
 8003954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f008 fbd2 	bl	800c104 <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800396a:	d138      	bne.n	80039de <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f008 ffe1 	bl	800c938 <USB_HC_ReadInterrupt>
 8003976:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	e025      	b.n	80039ca <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a8:	d106      	bne.n	80039b8 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f8cf 	bl	8003b54 <HCD_HC_IN_IRQHandler>
 80039b6:	e005      	b.n	80039c4 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fc5f 	bl	8004282 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3301      	adds	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d3d4      	bcc.n	800397e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f008 fb8e 	bl	800c104 <USB_ReadInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d101      	bne.n	80039f6 <HAL_HCD_IRQHandler+0x1d6>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_HCD_IRQHandler+0x1d8>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d014      	beq.n	8003a26 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0210 	bic.w	r2, r2, #16
 8003a0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 ffad 	bl	800496c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0210 	orr.w	r2, r2, #16
 8003a20:	619a      	str	r2, [r3, #24]
 8003a22:	e000      	b.n	8003a26 <HAL_HCD_IRQHandler+0x206>
      return;
 8003a24:	bf00      	nop
    }
  }
}
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_HCD_Start+0x16>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e013      	b.n	8003a6a <HAL_HCD_Start+0x3e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f008 fa66 	bl	800bf20 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f008 fcbc 	bl	800c3d8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_HCD_Stop+0x16>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e00d      	b.n	8003aa4 <HAL_HCD_Stop+0x32>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f009 f89b 	bl	800cbd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f008 fc63 	bl	800c384 <USB_ResetPort>
 8003abe:	4603      	mov	r3, r0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	335c      	adds	r3, #92	; 0x5c
 8003ae4:	781b      	ldrb	r3, [r3, #0]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	440b      	add	r3, r1
 8003b0c:	334c      	adds	r3, #76	; 0x4c
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f008 fca5 	bl	800c478 <USB_GetCurrentFrame>
 8003b2e:	4603      	mov	r3, r0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f008 fc80 	bl	800c44a <USB_GetHostSpeed>
 8003b4a:	4603      	mov	r3, r0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d119      	bne.n	8003bb8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	2304      	movs	r3, #4
 8003b94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	60d3      	str	r3, [r2, #12]
 8003bb6:	e095      	b.n	8003ce4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d109      	bne.n	8003be2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2320      	movs	r3, #32
 8003bde:	6093      	str	r3, [r2, #8]
 8003be0:	e080      	b.n	8003ce4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d134      	bne.n	8003c62 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c12:	f043 0302 	orr.w	r3, r3, #2
 8003c16:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	335d      	adds	r3, #93	; 0x5d
 8003c28:	2205      	movs	r2, #5
 8003c2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f008 fe7d 	bl	800c95a <USB_HC_Halt>
 8003c60:	e040      	b.n	8003ce4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c78:	d134      	bne.n	8003ce4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f008 fe58 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2310      	movs	r3, #16
 8003cba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	440b      	add	r3, r1
 8003cca:	335d      	adds	r3, #93	; 0x5d
 8003ccc:	2208      	movs	r2, #8
 8003cce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ce2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfa:	d122      	bne.n	8003d42 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f008 fe17 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d3e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d40:	e29b      	b.n	800427a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f040 80c1 	bne.w	8003edc <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01b      	beq.n	8003d9a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	440b      	add	r3, r1
 8003d70:	3348      	adds	r3, #72	; 0x48
 8003d72:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	0159      	lsls	r1, r3, #5
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003d86:	1ad1      	subs	r1, r2, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4403      	add	r3, r0
 8003d96:	334c      	adds	r3, #76	; 0x4c
 8003d98:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	335d      	adds	r3, #93	; 0x5d
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	3358      	adds	r3, #88	; 0x58
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	440b      	add	r3, r1
 8003de2:	333f      	adds	r3, #63	; 0x3f
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	440b      	add	r3, r1
 8003df8:	333f      	adds	r3, #63	; 0x3f
 8003dfa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d121      	bne.n	8003e44 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	0151      	lsls	r1, r2, #5
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	440a      	add	r2, r1
 8003e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f008 fd95 	bl	800c95a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2310      	movs	r3, #16
 8003e40:	6093      	str	r3, [r2, #8]
 8003e42:	e034      	b.n	8003eae <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	440b      	add	r3, r1
 8003e52:	333f      	adds	r3, #63	; 0x3f
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d129      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e78:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	440b      	add	r3, r1
 8003e88:	335c      	adds	r3, #92	; 0x5c
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	b2d8      	uxtb	r0, r3
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	335c      	adds	r3, #92	; 0x5c
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f019 f84f 	bl	801cf4c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	440b      	add	r3, r1
 8003ebc:	3350      	adds	r3, #80	; 0x50
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	f083 0301 	eor.w	r3, r3, #1
 8003ec4:	b2d8      	uxtb	r0, r3
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3350      	adds	r3, #80	; 0x50
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	701a      	strb	r2, [r3, #0]
}
 8003eda:	e1ce      	b.n	800427a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	f040 80f1 	bne.w	80040d6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	0151      	lsls	r1, r2, #5
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	440a      	add	r2, r1
 8003f0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f0e:	f023 0302 	bic.w	r3, r3, #2
 8003f12:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	335d      	adds	r3, #93	; 0x5d
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10a      	bne.n	8003f40 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	335c      	adds	r3, #92	; 0x5c
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e0b0      	b.n	80040a2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	440b      	add	r3, r1
 8003f4e:	335d      	adds	r3, #93	; 0x5d
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b05      	cmp	r3, #5
 8003f54:	d10a      	bne.n	8003f6c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	440b      	add	r3, r1
 8003f64:	335c      	adds	r3, #92	; 0x5c
 8003f66:	2205      	movs	r2, #5
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e09a      	b.n	80040a2 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	440b      	add	r3, r1
 8003f7a:	335d      	adds	r3, #93	; 0x5d
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b06      	cmp	r3, #6
 8003f80:	d00a      	beq.n	8003f98 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	440b      	add	r3, r1
 8003f90:	335d      	adds	r3, #93	; 0x5d
 8003f92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d156      	bne.n	8004046 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3358      	adds	r3, #88	; 0x58
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4403      	add	r3, r0
 8003fba:	3358      	adds	r3, #88	; 0x58
 8003fbc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	3358      	adds	r3, #88	; 0x58
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d914      	bls.n	8003ffe <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3358      	adds	r3, #88	; 0x58
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e009      	b.n	8004012 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	440b      	add	r3, r1
 800400c:	335c      	adds	r3, #92	; 0x5c
 800400e:	2202      	movs	r2, #2
 8004010:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004028:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004030:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403e:	461a      	mov	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	e02d      	b.n	80040a2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	335d      	adds	r3, #93	; 0x5d
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d122      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	335c      	adds	r3, #92	; 0x5c
 800406c:	2202      	movs	r2, #2
 800406e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004086:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800408e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	461a      	mov	r2, r3
 80040b0:	2302      	movs	r3, #2
 80040b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	b2d8      	uxtb	r0, r3
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	440b      	add	r3, r1
 80040c6:	335c      	adds	r3, #92	; 0x5c
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	4601      	mov	r1, r0
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f018 ff3c 	bl	801cf4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80040d4:	e0d1      	b.n	800427a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e8:	2b80      	cmp	r3, #128	; 0x80
 80040ea:	d13e      	bne.n	800416a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	440a      	add	r2, r1
 8004102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	440b      	add	r3, r1
 800411a:	3358      	adds	r3, #88	; 0x58
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4403      	add	r3, r0
 800412e:	3358      	adds	r3, #88	; 0x58
 8004130:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	440b      	add	r3, r1
 8004140:	335d      	adds	r3, #93	; 0x5d
 8004142:	2206      	movs	r2, #6
 8004144:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f008 fc02 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004162:	461a      	mov	r2, r3
 8004164:	2380      	movs	r3, #128	; 0x80
 8004166:	6093      	str	r3, [r2, #8]
}
 8004168:	e087      	b.n	800427a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b10      	cmp	r3, #16
 800417e:	d17c      	bne.n	800427a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	440b      	add	r3, r1
 800418e:	333f      	adds	r3, #63	; 0x3f
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b03      	cmp	r3, #3
 8004194:	d122      	bne.n	80041dc <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	440b      	add	r3, r1
 80041a4:	3358      	adds	r3, #88	; 0x58
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f008 fbc0 	bl	800c95a <USB_HC_Halt>
 80041da:	e045      	b.n	8004268 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	440b      	add	r3, r1
 80041ea:	333f      	adds	r3, #63	; 0x3f
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	440b      	add	r3, r1
 8004200:	333f      	adds	r3, #63	; 0x3f
 8004202:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004204:	2b02      	cmp	r3, #2
 8004206:	d12f      	bne.n	8004268 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	440b      	add	r3, r1
 8004216:	3358      	adds	r3, #88	; 0x58
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d121      	bne.n	8004268 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	440b      	add	r3, r1
 8004232:	335d      	adds	r3, #93	; 0x5d
 8004234:	2203      	movs	r2, #3
 8004236:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	440a      	add	r2, r1
 800424e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f008 fb79 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004274:	461a      	mov	r2, r3
 8004276:	2310      	movs	r3, #16
 8004278:	6093      	str	r3, [r2, #8]
}
 800427a:	bf00      	nop
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d119      	bne.n	80042e6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042be:	461a      	mov	r2, r3
 80042c0:	2304      	movs	r3, #4
 80042c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042de:	f043 0302 	orr.w	r3, r3, #2
 80042e2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80042e4:	e33e      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d141      	bne.n	8004380 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	461a      	mov	r2, r3
 800430a:	2320      	movs	r3, #32
 800430c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	333d      	adds	r3, #61	; 0x3d
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	f040 831f 	bne.w	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	333d      	adds	r3, #61	; 0x3d
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	440b      	add	r3, r1
 8004348:	335c      	adds	r3, #92	; 0x5c
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	440a      	add	r2, r1
 8004364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f008 faee 	bl	800c95a <USB_HC_Halt>
}
 800437e:	e2f1      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d13f      	bne.n	8004416 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	440b      	add	r3, r1
 80043a4:	335d      	adds	r3, #93	; 0x5d
 80043a6:	2204      	movs	r2, #4
 80043a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	440b      	add	r3, r1
 80043b8:	333d      	adds	r3, #61	; 0x3d
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	440b      	add	r3, r1
 80043cc:	3358      	adds	r3, #88	; 0x58
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	0151      	lsls	r1, r2, #5
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	440a      	add	r2, r1
 80043e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f008 faac 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	461a      	mov	r2, r3
 8004410:	2340      	movs	r3, #64	; 0x40
 8004412:	6093      	str	r3, [r2, #8]
}
 8004414:	e2a6      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d122      	bne.n	8004474 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4413      	add	r3, r2
 8004436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	0151      	lsls	r1, r2, #5
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	440a      	add	r2, r1
 8004444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004448:	f043 0302 	orr.w	r3, r3, #2
 800444c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f008 fa7e 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004470:	6093      	str	r3, [r2, #8]
}
 8004472:	e277      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b01      	cmp	r3, #1
 8004488:	d135      	bne.n	80044f6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	440b      	add	r3, r1
 8004498:	3358      	adds	r3, #88	; 0x58
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f008 fa46 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044da:	461a      	mov	r2, r3
 80044dc:	2301      	movs	r3, #1
 80044de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	440b      	add	r3, r1
 80044ee:	335d      	adds	r3, #93	; 0x5d
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
}
 80044f4:	e236      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d12b      	bne.n	8004564 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4413      	add	r3, r2
 8004514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004518:	461a      	mov	r2, r3
 800451a:	2308      	movs	r3, #8
 800451c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	440a      	add	r2, r1
 8004534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f008 fa06 	bl	800c95a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	440b      	add	r3, r1
 800455c:	335d      	adds	r3, #93	; 0x5d
 800455e:	2205      	movs	r2, #5
 8004560:	701a      	strb	r2, [r3, #0]
}
 8004562:	e1ff      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b10      	cmp	r3, #16
 8004578:	d155      	bne.n	8004626 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	440b      	add	r3, r1
 8004588:	3358      	adds	r3, #88	; 0x58
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	440b      	add	r3, r1
 800459c:	335d      	adds	r3, #93	; 0x5d
 800459e:	2203      	movs	r2, #3
 80045a0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	440b      	add	r3, r1
 80045b0:	333d      	adds	r3, #61	; 0x3d
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d114      	bne.n	80045e2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	333c      	adds	r3, #60	; 0x3c
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	333d      	adds	r3, #61	; 0x3d
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f008 f9a4 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	461a      	mov	r2, r3
 8004620:	2310      	movs	r3, #16
 8004622:	6093      	str	r3, [r2, #8]
}
 8004624:	e19e      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d12b      	bne.n	8004694 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	440a      	add	r2, r1
 8004652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f008 f977 	bl	800c95a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	440b      	add	r3, r1
 800467a:	335d      	adds	r3, #93	; 0x5d
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	461a      	mov	r2, r3
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	6093      	str	r3, [r2, #8]
}
 8004692:	e167      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046aa:	d135      	bne.n	8004718 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c6:	f043 0302 	orr.w	r3, r3, #2
 80046ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f008 f93f 	bl	800c95a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e8:	461a      	mov	r2, r3
 80046ea:	2310      	movs	r3, #16
 80046ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fa:	461a      	mov	r2, r3
 80046fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004700:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	440b      	add	r3, r1
 8004710:	335d      	adds	r3, #93	; 0x5d
 8004712:	2208      	movs	r2, #8
 8004714:	701a      	strb	r2, [r3, #0]
}
 8004716:	e125      	b.n	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	f040 811a 	bne.w	8004964 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	440a      	add	r2, r1
 8004746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474a:	f023 0302 	bic.w	r3, r3, #2
 800474e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	440b      	add	r3, r1
 800475e:	335d      	adds	r3, #93	; 0x5d
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d137      	bne.n	80047d6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	440b      	add	r3, r1
 8004774:	335c      	adds	r3, #92	; 0x5c
 8004776:	2201      	movs	r2, #1
 8004778:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	440b      	add	r3, r1
 8004788:	333f      	adds	r3, #63	; 0x3f
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d00b      	beq.n	80047a8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	440b      	add	r3, r1
 800479e:	333f      	adds	r3, #63	; 0x3f
 80047a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	f040 80c5 	bne.w	8004932 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	440b      	add	r3, r1
 80047b6:	3351      	adds	r3, #81	; 0x51
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	f083 0301 	eor.w	r3, r3, #1
 80047be:	b2d8      	uxtb	r0, r3
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	440b      	add	r3, r1
 80047ce:	3351      	adds	r3, #81	; 0x51
 80047d0:	4602      	mov	r2, r0
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	e0ad      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	440b      	add	r3, r1
 80047e4:	335d      	adds	r3, #93	; 0x5d
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d10a      	bne.n	8004802 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	440b      	add	r3, r1
 80047fa:	335c      	adds	r3, #92	; 0x5c
 80047fc:	2202      	movs	r2, #2
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e097      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	440b      	add	r3, r1
 8004810:	335d      	adds	r3, #93	; 0x5d
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d10a      	bne.n	800482e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	440b      	add	r3, r1
 8004826:	335c      	adds	r3, #92	; 0x5c
 8004828:	2202      	movs	r2, #2
 800482a:	701a      	strb	r2, [r3, #0]
 800482c:	e081      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	440b      	add	r3, r1
 800483c:	335d      	adds	r3, #93	; 0x5d
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b05      	cmp	r3, #5
 8004842:	d10a      	bne.n	800485a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	440b      	add	r3, r1
 8004852:	335c      	adds	r3, #92	; 0x5c
 8004854:	2205      	movs	r2, #5
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	e06b      	b.n	8004932 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	440b      	add	r3, r1
 8004868:	335d      	adds	r3, #93	; 0x5d
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b06      	cmp	r3, #6
 800486e:	d00a      	beq.n	8004886 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	440b      	add	r3, r1
 800487e:	335d      	adds	r3, #93	; 0x5d
 8004880:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004882:	2b08      	cmp	r3, #8
 8004884:	d155      	bne.n	8004932 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	440b      	add	r3, r1
 8004894:	3358      	adds	r3, #88	; 0x58
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4403      	add	r3, r0
 80048a8:	3358      	adds	r3, #88	; 0x58
 80048aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	440b      	add	r3, r1
 80048ba:	3358      	adds	r3, #88	; 0x58
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d914      	bls.n	80048ec <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	440b      	add	r3, r1
 80048d0:	3358      	adds	r3, #88	; 0x58
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	440b      	add	r3, r1
 80048e4:	335c      	adds	r3, #92	; 0x5c
 80048e6:	2204      	movs	r2, #4
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e009      	b.n	8004900 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	440b      	add	r3, r1
 80048fa:	335c      	adds	r3, #92	; 0x5c
 80048fc:	2202      	movs	r2, #2
 80048fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004916:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800491e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	461a      	mov	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4413      	add	r3, r2
 800493a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493e:	461a      	mov	r2, r3
 8004940:	2302      	movs	r3, #2
 8004942:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	b2d8      	uxtb	r0, r3
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	440b      	add	r3, r1
 8004956:	335c      	adds	r3, #92	; 0x5c
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	4601      	mov	r1, r0
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f018 faf4 	bl	801cf4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004964:	bf00      	nop
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	0c5b      	lsrs	r3, r3, #17
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d003      	beq.n	80049b0 <HCD_RXQLVL_IRQHandler+0x44>
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	f000 8082 	beq.w	8004ab2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049ae:	e083      	b.n	8004ab8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d07f      	beq.n	8004ab6 <HCD_RXQLVL_IRQHandler+0x14a>
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	440b      	add	r3, r1
 80049c4:	3344      	adds	r3, #68	; 0x44
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d074      	beq.n	8004ab6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	440b      	add	r3, r1
 80049de:	3344      	adds	r3, #68	; 0x44
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	b292      	uxth	r2, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	f007 fb63 	bl	800c0b2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	440b      	add	r3, r1
 80049fa:	3344      	adds	r3, #68	; 0x44
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	18d1      	adds	r1, r2, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4403      	add	r3, r0
 8004a10:	3344      	adds	r3, #68	; 0x44
 8004a12:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	440b      	add	r3, r1
 8004a22:	334c      	adds	r3, #76	; 0x4c
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	18d1      	adds	r1, r2, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4403      	add	r3, r0
 8004a38:	334c      	adds	r3, #76	; 0x4c
 8004a3a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HCD_RXQLVL_IRQHandler+0x154>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d031      	beq.n	8004ab6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a68:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a70:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	440b      	add	r3, r1
 8004a92:	3350      	adds	r3, #80	; 0x50
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	f083 0301 	eor.w	r3, r3, #1
 8004a9a:	b2d8      	uxtb	r0, r3
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3350      	adds	r3, #80	; 0x50
 8004aac:	4602      	mov	r2, r0
 8004aae:	701a      	strb	r2, [r3, #0]
      break;
 8004ab0:	e001      	b.n	8004ab6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004ab6:	bf00      	nop
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	1ff80000 	.word	0x1ff80000

08004ac4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004af0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d113      	bne.n	8004b24 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10a      	bne.n	8004b1c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699a      	ldr	r2, [r3, #24]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b14:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f018 f9fc 	bl	801cf14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d147      	bne.n	8004bbe <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f043 0308 	orr.w	r3, r3, #8
 8004b34:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d129      	bne.n	8004b94 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d113      	bne.n	8004b70 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b52:	d106      	bne.n	8004b62 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2102      	movs	r1, #2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f007 fbd8 	bl	800c310 <USB_InitFSLSPClkSel>
 8004b60:	e011      	b.n	8004b86 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2101      	movs	r1, #1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f007 fbd1 	bl	800c310 <USB_InitFSLSPClkSel>
 8004b6e:	e00a      	b.n	8004b86 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d106      	bne.n	8004b86 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b84:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f018 f9f2 	bl	801cf70 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f018 f9c1 	bl	801cf14 <HAL_HCD_Connect_Callback>
 8004b92:	e014      	b.n	8004bbe <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f018 f9f9 	bl	801cf8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ba8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bac:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004bbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d103      	bne.n	8004bd0 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f043 0320 	orr.w	r3, r3, #32
 8004bce:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e07f      	b.n	8004cf6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f017 fa18 	bl	801c040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2224      	movs	r2, #36	; 0x24
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	e006      	b.n	8004c6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d104      	bne.n	8004c7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6859      	ldr	r1, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <HAL_I2C_Init+0x11c>)
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	ea42 0103 	orr.w	r1, r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69d9      	ldr	r1, [r3, #28]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	02008000 	.word	0x02008000

08004d04 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e021      	b.n	8004d5a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2224      	movs	r2, #36	; 0x24
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f017 f9fe 	bl	801c130 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	461a      	mov	r2, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	817b      	strh	r3, [r7, #10]
 8004d76:	460b      	mov	r3, r1
 8004d78:	813b      	strh	r3, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	f040 80f9 	bne.w	8004f7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_I2C_Mem_Write+0x34>
 8004d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0ed      	b.n	8004f80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_I2C_Mem_Write+0x4e>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e0e6      	b.n	8004f80 <HAL_I2C_Mem_Write+0x21c>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dba:	f7fb febd 	bl	8000b38 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	2319      	movs	r3, #25
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fad1 	bl	8005374 <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0d1      	b.n	8004f80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2221      	movs	r2, #33	; 0x21
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2240      	movs	r2, #64	; 0x40
 8004de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e04:	88f8      	ldrh	r0, [r7, #6]
 8004e06:	893a      	ldrh	r2, [r7, #8]
 8004e08:	8979      	ldrh	r1, [r7, #10]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4603      	mov	r3, r0
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f9e1 	bl	80051dc <I2C_RequestMemoryWrite>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0a9      	b.n	8004f80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2bff      	cmp	r3, #255	; 0xff
 8004e34:	d90e      	bls.n	8004e54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	22ff      	movs	r2, #255	; 0xff
 8004e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	8979      	ldrh	r1, [r7, #10]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 fbb3 	bl	80055b8 <I2C_TransferConfig>
 8004e52:	e00f      	b.n	8004e74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	8979      	ldrh	r1, [r7, #10]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fba2 	bl	80055b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fabb 	bl	80053f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e07b      	b.n	8004f80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d034      	beq.n	8004f2c <HAL_I2C_Mem_Write+0x1c8>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d130      	bne.n	8004f2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2180      	movs	r1, #128	; 0x80
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fa4d 	bl	8005374 <I2C_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e04d      	b.n	8004f80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2bff      	cmp	r3, #255	; 0xff
 8004eec:	d90e      	bls.n	8004f0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	22ff      	movs	r2, #255	; 0xff
 8004ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	8979      	ldrh	r1, [r7, #10]
 8004efc:	2300      	movs	r3, #0
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fb57 	bl	80055b8 <I2C_TransferConfig>
 8004f0a:	e00f      	b.n	8004f2c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	8979      	ldrh	r1, [r7, #10]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fb46 	bl	80055b8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d19e      	bne.n	8004e74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fa9a 	bl	8005474 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e01a      	b.n	8004f80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6859      	ldr	r1, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <HAL_I2C_Mem_Write+0x224>)
 8004f5e:	400b      	ands	r3, r1
 8004f60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004f7e:	2302      	movs	r3, #2
  }
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	fe00e800 	.word	0xfe00e800

08004f8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	f040 80fd 	bne.w	80051ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_I2C_Mem_Read+0x34>
 8004fba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0f1      	b.n	80051b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_I2C_Mem_Read+0x4e>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e0ea      	b.n	80051b0 <HAL_I2C_Mem_Read+0x224>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fb fda9 	bl	8000b38 <HAL_GetTick>
 8004fe6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	2319      	movs	r3, #25
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f9bd 	bl	8005374 <I2C_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0d5      	b.n	80051b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2222      	movs	r2, #34	; 0x22
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2240      	movs	r2, #64	; 0x40
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a3a      	ldr	r2, [r7, #32]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800502c:	88f8      	ldrh	r0, [r7, #6]
 800502e:	893a      	ldrh	r2, [r7, #8]
 8005030:	8979      	ldrh	r1, [r7, #10]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	4603      	mov	r3, r0
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f921 	bl	8005284 <I2C_RequestMemoryRead>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0ad      	b.n	80051b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	2bff      	cmp	r3, #255	; 0xff
 800505c:	d90e      	bls.n	800507c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	22ff      	movs	r2, #255	; 0xff
 8005062:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005068:	b2da      	uxtb	r2, r3
 800506a:	8979      	ldrh	r1, [r7, #10]
 800506c:	4b52      	ldr	r3, [pc, #328]	; (80051b8 <HAL_I2C_Mem_Read+0x22c>)
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fa9f 	bl	80055b8 <I2C_TransferConfig>
 800507a:	e00f      	b.n	800509c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508a:	b2da      	uxtb	r2, r3
 800508c:	8979      	ldrh	r1, [r7, #10]
 800508e:	4b4a      	ldr	r3, [pc, #296]	; (80051b8 <HAL_I2C_Mem_Read+0x22c>)
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fa8e 	bl	80055b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	2200      	movs	r2, #0
 80050a4:	2104      	movs	r1, #4
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f964 	bl	8005374 <I2C_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e07c      	b.n	80051b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d034      	beq.n	800515c <HAL_I2C_Mem_Read+0x1d0>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d130      	bne.n	800515c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	2200      	movs	r2, #0
 8005102:	2180      	movs	r1, #128	; 0x80
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f935 	bl	8005374 <I2C_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e04d      	b.n	80051b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2bff      	cmp	r3, #255	; 0xff
 800511c:	d90e      	bls.n	800513c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	22ff      	movs	r2, #255	; 0xff
 8005122:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005128:	b2da      	uxtb	r2, r3
 800512a:	8979      	ldrh	r1, [r7, #10]
 800512c:	2300      	movs	r3, #0
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fa3f 	bl	80055b8 <I2C_TransferConfig>
 800513a:	e00f      	b.n	800515c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514a:	b2da      	uxtb	r2, r3
 800514c:	8979      	ldrh	r1, [r7, #10]
 800514e:	2300      	movs	r3, #0
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fa2e 	bl	80055b8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d19a      	bne.n	800509c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f982 	bl	8005474 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e01a      	b.n	80051b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2220      	movs	r2, #32
 8005180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_I2C_Mem_Read+0x230>)
 800518e:	400b      	ands	r3, r1
 8005190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
  }
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	80002400 	.word	0x80002400
 80051bc:	fe00e800 	.word	0xfe00e800

080051c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ce:	b2db      	uxtb	r3, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	817b      	strh	r3, [r7, #10]
 80051ee:	460b      	mov	r3, r1
 80051f0:	813b      	strh	r3, [r7, #8]
 80051f2:	4613      	mov	r3, r2
 80051f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	8979      	ldrh	r1, [r7, #10]
 80051fc:	4b20      	ldr	r3, [pc, #128]	; (8005280 <I2C_RequestMemoryWrite+0xa4>)
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f9d7 	bl	80055b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	69b9      	ldr	r1, [r7, #24]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f8f0 	bl	80053f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e02c      	b.n	8005278 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d105      	bne.n	8005230 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005224:	893b      	ldrh	r3, [r7, #8]
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
 800522e:	e015      	b.n	800525c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005230:	893b      	ldrh	r3, [r7, #8]
 8005232:	0a1b      	lsrs	r3, r3, #8
 8005234:	b29b      	uxth	r3, r3
 8005236:	b2da      	uxtb	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	69b9      	ldr	r1, [r7, #24]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f8d6 	bl	80053f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e012      	b.n	8005278 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005252:	893b      	ldrh	r3, [r7, #8]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2200      	movs	r2, #0
 8005264:	2180      	movs	r1, #128	; 0x80
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f884 	bl	8005374 <I2C_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	80002000 	.word	0x80002000

08005284 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	4608      	mov	r0, r1
 800528e:	4611      	mov	r1, r2
 8005290:	461a      	mov	r2, r3
 8005292:	4603      	mov	r3, r0
 8005294:	817b      	strh	r3, [r7, #10]
 8005296:	460b      	mov	r3, r1
 8005298:	813b      	strh	r3, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	8979      	ldrh	r1, [r7, #10]
 80052a4:	4b20      	ldr	r3, [pc, #128]	; (8005328 <I2C_RequestMemoryRead+0xa4>)
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f984 	bl	80055b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	69b9      	ldr	r1, [r7, #24]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f89d 	bl	80053f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e02c      	b.n	800531e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d105      	bne.n	80052d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052ca:	893b      	ldrh	r3, [r7, #8]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
 80052d4:	e015      	b.n	8005302 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052d6:	893b      	ldrh	r3, [r7, #8]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	b29b      	uxth	r3, r3
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	69b9      	ldr	r1, [r7, #24]
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f883 	bl	80053f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e012      	b.n	800531e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052f8:	893b      	ldrh	r3, [r7, #8]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2200      	movs	r2, #0
 800530a:	2140      	movs	r1, #64	; 0x40
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f831 	bl	8005374 <I2C_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	80002000 	.word	0x80002000

0800532c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d103      	bne.n	800534a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2200      	movs	r2, #0
 8005348:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d007      	beq.n	8005368 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	619a      	str	r2, [r3, #24]
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	4613      	mov	r3, r2
 8005382:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005384:	e022      	b.n	80053cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d01e      	beq.n	80053cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fb fbd3 	bl	8000b38 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d113      	bne.n	80053cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a8:	f043 0220 	orr.w	r2, r3, #32
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e00f      	b.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d0cd      	beq.n	8005386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005400:	e02c      	b.n	800545c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f870 	bl	80054ec <I2C_IsAcknowledgeFailed>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e02a      	b.n	800546c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541c:	d01e      	beq.n	800545c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541e:	f7fb fb8b 	bl	8000b38 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	429a      	cmp	r2, r3
 800542c:	d302      	bcc.n	8005434 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d113      	bne.n	800545c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e007      	b.n	800546c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b02      	cmp	r3, #2
 8005468:	d1cb      	bne.n	8005402 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005480:	e028      	b.n	80054d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f830 	bl	80054ec <I2C_IsAcknowledgeFailed>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e026      	b.n	80054e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fb fb4f 	bl	8000b38 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d113      	bne.n	80054d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e007      	b.n	80054e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d1cf      	bne.n	8005482 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b10      	cmp	r3, #16
 8005504:	d151      	bne.n	80055aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005506:	e022      	b.n	800554e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d01e      	beq.n	800554e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005510:	f7fb fb12 	bl	8000b38 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	429a      	cmp	r2, r3
 800551e:	d302      	bcc.n	8005526 <I2C_IsAcknowledgeFailed+0x3a>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d113      	bne.n	800554e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e02e      	b.n	80055ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b20      	cmp	r3, #32
 800555a:	d1d5      	bne.n	8005508 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2210      	movs	r2, #16
 8005562:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2220      	movs	r2, #32
 800556a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff fedd 	bl	800532c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6859      	ldr	r1, [r3, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800557e:	400b      	ands	r3, r1
 8005580:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	f043 0204 	orr.w	r2, r3, #4
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	fe00e800 	.word	0xfe00e800

080055b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	607b      	str	r3, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	817b      	strh	r3, [r7, #10]
 80055c6:	4613      	mov	r3, r2
 80055c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	0d5b      	lsrs	r3, r3, #21
 80055d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <I2C_TransferConfig+0x58>)
 80055da:	430b      	orrs	r3, r1
 80055dc:	43db      	mvns	r3, r3
 80055de:	ea02 0103 	and.w	r1, r2, r3
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80055e8:	7a7b      	ldrb	r3, [r7, #9]
 80055ea:	041b      	lsls	r3, r3, #16
 80055ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	03ff63ff 	.word	0x03ff63ff

08005614 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b20      	cmp	r3, #32
 8005628:	d138      	bne.n	800569c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005634:	2302      	movs	r3, #2
 8005636:	e032      	b.n	800569e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2224      	movs	r2, #36	; 0x24
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005666:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	e000      	b.n	800569e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800569c:	2302      	movs	r3, #2
  }
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d139      	bne.n	8005734 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e033      	b.n	8005736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2224      	movs	r2, #36	; 0x24
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0201 	bic.w	r2, r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e000      	b.n	8005736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
  }
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e0bf      	b.n	80058d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f014 fc4e 	bl	801a00c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005786:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6999      	ldr	r1, [r3, #24]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800579c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6899      	ldr	r1, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b4a      	ldr	r3, [pc, #296]	; (80058e0 <HAL_LTDC_Init+0x19c>)
 80057b8:	400b      	ands	r3, r1
 80057ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	041b      	lsls	r3, r3, #16
 80057c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6899      	ldr	r1, [r3, #8]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68d9      	ldr	r1, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	4b3e      	ldr	r3, [pc, #248]	; (80058e0 <HAL_LTDC_Init+0x19c>)
 80057e6:	400b      	ands	r3, r1
 80057e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	041b      	lsls	r3, r3, #16
 80057f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68d9      	ldr	r1, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6919      	ldr	r1, [r3, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b33      	ldr	r3, [pc, #204]	; (80058e0 <HAL_LTDC_Init+0x19c>)
 8005814:	400b      	ands	r3, r1
 8005816:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6919      	ldr	r1, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6959      	ldr	r1, [r3, #20]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <HAL_LTDC_Init+0x19c>)
 8005842:	400b      	ands	r3, r1
 8005844:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6959      	ldr	r1, [r3, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0206 	orr.w	r2, r2, #6
 80058b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	f000f800 	.word	0xf000f800

080058e4 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f014 fc1f 	bl	801a130 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d023      	beq.n	800597e <HAL_LTDC_IRQHandler+0x6a>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01e      	beq.n	800597e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0204 	bic.w	r2, r2, #4
 800594e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2204      	movs	r2, #4
 8005956:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800595e:	f043 0201 	orr.w	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2204      	movs	r2, #4
 800596c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f86f 	bl	8005a5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d023      	beq.n	80059d0 <HAL_LTDC_IRQHandler+0xbc>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01e      	beq.n	80059d0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0202 	bic.w	r2, r2, #2
 80059a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2202      	movs	r2, #2
 80059a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059b0:	f043 0202 	orr.w	r2, r3, #2
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f846 	bl	8005a5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01b      	beq.n	8005a12 <HAL_LTDC_IRQHandler+0xfe>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d016      	beq.n	8005a12 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2201      	movs	r2, #1
 80059fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f014 ff4f 	bl	801a8b0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01b      	beq.n	8005a54 <HAL_LTDC_IRQHandler+0x140>
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d016      	beq.n	8005a54 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0208 	bic.w	r2, r2, #8
 8005a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2208      	movs	r2, #8
 8005a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f80e 	bl	8005a70 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a84:	b5b0      	push	{r4, r5, r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_LTDC_ConfigLayer+0x1a>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e02c      	b.n	8005af8 <HAL_LTDC_ConfigLayer+0x74>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2134      	movs	r1, #52	; 0x34
 8005ab4:	fb01 f303 	mul.w	r3, r1, r3
 8005ab8:	4413      	add	r3, r2
 8005aba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	461d      	mov	r5, r3
 8005ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f8cf 	bl	8005c7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bdb0      	pop	{r4, r5, r7, pc}

08005b00 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b089      	sub	sp, #36	; 0x24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_LTDC_SetPitch+0x1a>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e06e      	b.n	8005bf8 <HAL_LTDC_SetPitch+0xf8>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2134      	movs	r1, #52	; 0x34
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	3348      	adds	r3, #72	; 0x48
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8005b42:	2304      	movs	r3, #4
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	e016      	b.n	8005b76 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d102      	bne.n	8005b54 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	e010      	b.n	8005b76 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d008      	beq.n	8005b6c <HAL_LTDC_SetPitch+0x6c>
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d005      	beq.n	8005b6c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d002      	beq.n	8005b6c <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b07      	cmp	r3, #7
 8005b6a:	d102      	bne.n	8005b72 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e001      	b.n	8005b76 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8005b72:	2301      	movs	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	01db      	lsls	r3, r3, #7
 8005b8c:	4413      	add	r3, r2
 8005b8e:	3384      	adds	r3, #132	; 0x84
 8005b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4619      	mov	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	01db      	lsls	r3, r3, #7
 8005b9c:	440b      	add	r3, r1
 8005b9e:	3384      	adds	r3, #132	; 0x84
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <HAL_LTDC_SetPitch+0x104>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_LTDC_SetPitch+0x108>)
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <HAL_LTDC_SetPitch+0x108>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	01db      	lsls	r3, r3, #7
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3384      	adds	r3, #132	; 0x84
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	01db      	lsls	r3, r3, #7
 8005bce:	440b      	add	r3, r1
 8005bd0:	3384      	adds	r3, #132	; 0x84
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_LTDC_SetPitch+0x108>)
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <HAL_LTDC_SetPitch+0x108>)
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3724      	adds	r7, #36	; 0x24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	e000ffff 	.word	0xe000ffff
 8005c08:	40016800 	.word	0x40016800

08005c0c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_LTDC_ProgramLineEvent+0x18>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e023      	b.n	8005c6c <HAL_LTDC_ProgramLineEvent+0x60>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005c44:	4a0c      	ldr	r2, [pc, #48]	; (8005c78 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0201 	orr.w	r2, r2, #1
 8005c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40016800 	.word	0x40016800

08005c7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	0c1b      	lsrs	r3, r3, #16
 8005c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c98:	4413      	add	r3, r2
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	01db      	lsls	r3, r3, #7
 8005ca8:	4413      	add	r3, r2
 8005caa:	3384      	adds	r3, #132	; 0x84
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	01d2      	lsls	r2, r2, #7
 8005cb8:	440a      	add	r2, r1
 8005cba:	3284      	adds	r2, #132	; 0x84
 8005cbc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005cc0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd2:	4413      	add	r3, r2
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	01db      	lsls	r3, r3, #7
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3384      	adds	r3, #132	; 0x84
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cfa:	4413      	add	r3, r2
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	01db      	lsls	r3, r3, #7
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3384      	adds	r3, #132	; 0x84
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	4611      	mov	r1, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	01d2      	lsls	r2, r2, #7
 8005d1a:	440a      	add	r2, r1
 8005d1c:	3284      	adds	r2, #132	; 0x84
 8005d1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d32:	4413      	add	r3, r2
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	01db      	lsls	r3, r3, #7
 8005d40:	440b      	add	r3, r1
 8005d42:	3384      	adds	r3, #132	; 0x84
 8005d44:	4619      	mov	r1, r3
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	01db      	lsls	r3, r3, #7
 8005d56:	4413      	add	r3, r2
 8005d58:	3384      	adds	r3, #132	; 0x84
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	4611      	mov	r1, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	01d2      	lsls	r2, r2, #7
 8005d66:	440a      	add	r2, r1
 8005d68:	3284      	adds	r2, #132	; 0x84
 8005d6a:	f023 0307 	bic.w	r3, r3, #7
 8005d6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	01db      	lsls	r3, r3, #7
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3384      	adds	r3, #132	; 0x84
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	061b      	lsls	r3, r3, #24
 8005da0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	01db      	lsls	r3, r3, #7
 8005dac:	4413      	add	r3, r2
 8005dae:	3384      	adds	r3, #132	; 0x84
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	01db      	lsls	r3, r3, #7
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3384      	adds	r3, #132	; 0x84
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dcc:	461a      	mov	r2, r3
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	01db      	lsls	r3, r3, #7
 8005de0:	440b      	add	r3, r1
 8005de2:	3384      	adds	r3, #132	; 0x84
 8005de4:	4619      	mov	r1, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	01db      	lsls	r3, r3, #7
 8005df6:	4413      	add	r3, r2
 8005df8:	3384      	adds	r3, #132	; 0x84
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	6812      	ldr	r2, [r2, #0]
 8005e00:	4611      	mov	r1, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	01d2      	lsls	r2, r2, #7
 8005e06:	440a      	add	r2, r1
 8005e08:	3284      	adds	r2, #132	; 0x84
 8005e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3384      	adds	r3, #132	; 0x84
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	01db      	lsls	r3, r3, #7
 8005e30:	4413      	add	r3, r2
 8005e32:	3384      	adds	r3, #132	; 0x84
 8005e34:	69da      	ldr	r2, [r3, #28]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	01db      	lsls	r3, r3, #7
 8005e40:	440b      	add	r3, r1
 8005e42:	3384      	adds	r3, #132	; 0x84
 8005e44:	4619      	mov	r1, r3
 8005e46:	4b58      	ldr	r3, [pc, #352]	; (8005fa8 <LTDC_SetConfig+0x32c>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	6809      	ldr	r1, [r1, #0]
 8005e58:	4608      	mov	r0, r1
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	01c9      	lsls	r1, r1, #7
 8005e5e:	4401      	add	r1, r0
 8005e60:	3184      	adds	r1, #132	; 0x84
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	01db      	lsls	r3, r3, #7
 8005e70:	4413      	add	r3, r2
 8005e72:	3384      	adds	r3, #132	; 0x84
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	01db      	lsls	r3, r3, #7
 8005e80:	4413      	add	r3, r2
 8005e82:	3384      	adds	r3, #132	; 0x84
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	01db      	lsls	r3, r3, #7
 8005e94:	4413      	add	r3, r2
 8005e96:	3384      	adds	r3, #132	; 0x84
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	e01b      	b.n	8005ee6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d102      	bne.n	8005ebc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e014      	b.n	8005ee6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d00b      	beq.n	8005edc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d007      	beq.n	8005edc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d003      	beq.n	8005edc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ed8:	2b07      	cmp	r3, #7
 8005eda:	d102      	bne.n	8005ee2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005edc:	2302      	movs	r3, #2
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	e001      	b.n	8005ee6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	01db      	lsls	r3, r3, #7
 8005ef0:	4413      	add	r3, r2
 8005ef2:	3384      	adds	r3, #132	; 0x84
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	4611      	mov	r1, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	01d2      	lsls	r2, r2, #7
 8005f00:	440a      	add	r2, r1
 8005f02:	3284      	adds	r2, #132	; 0x84
 8005f04:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005f08:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	fb02 f303 	mul.w	r3, r2, r3
 8005f14:	041a      	lsls	r2, r3, #16
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1acb      	subs	r3, r1, r3
 8005f20:	69f9      	ldr	r1, [r7, #28]
 8005f22:	fb01 f303 	mul.w	r3, r1, r3
 8005f26:	3303      	adds	r3, #3
 8005f28:	68f9      	ldr	r1, [r7, #12]
 8005f2a:	6809      	ldr	r1, [r1, #0]
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	01c9      	lsls	r1, r1, #7
 8005f32:	4401      	add	r1, r0
 8005f34:	3184      	adds	r1, #132	; 0x84
 8005f36:	4313      	orrs	r3, r2
 8005f38:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	01db      	lsls	r3, r3, #7
 8005f44:	4413      	add	r3, r2
 8005f46:	3384      	adds	r3, #132	; 0x84
 8005f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	01db      	lsls	r3, r3, #7
 8005f54:	440b      	add	r3, r1
 8005f56:	3384      	adds	r3, #132	; 0x84
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4b14      	ldr	r3, [pc, #80]	; (8005fac <LTDC_SetConfig+0x330>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	01db      	lsls	r3, r3, #7
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3384      	adds	r3, #132	; 0x84
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	01db      	lsls	r3, r3, #7
 8005f80:	4413      	add	r3, r2
 8005f82:	3384      	adds	r3, #132	; 0x84
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	01d2      	lsls	r2, r2, #7
 8005f90:	440a      	add	r2, r1
 8005f92:	3284      	adds	r2, #132	; 0x84
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	6013      	str	r3, [r2, #0]
}
 8005f9a:	bf00      	nop
 8005f9c:	3724      	adds	r7, #36	; 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	fffff8f8 	.word	0xfffff8f8
 8005fac:	fffff800 	.word	0xfffff800

08005fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbe:	6013      	str	r3, [r2, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40007000 	.word	0x40007000

08005fd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fda:	4b23      	ldr	r3, [pc, #140]	; (8006068 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	4a22      	ldr	r2, [pc, #136]	; (8006068 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe6:	4b20      	ldr	r3, [pc, #128]	; (8006068 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ff2:	4b1e      	ldr	r3, [pc, #120]	; (800606c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1d      	ldr	r2, [pc, #116]	; (800606c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ffe:	f7fa fd9b 	bl	8000b38 <HAL_GetTick>
 8006002:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006004:	e009      	b.n	800601a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006006:	f7fa fd97 	bl	8000b38 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006014:	d901      	bls.n	800601a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e022      	b.n	8006060 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <HAL_PWREx_EnableOverDrive+0x9c>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006026:	d1ee      	bne.n	8006006 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <HAL_PWREx_EnableOverDrive+0x9c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a0f      	ldr	r2, [pc, #60]	; (800606c <HAL_PWREx_EnableOverDrive+0x9c>)
 800602e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006032:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006034:	f7fa fd80 	bl	8000b38 <HAL_GetTick>
 8006038:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800603a:	e009      	b.n	8006050 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800603c:	f7fa fd7c 	bl	8000b38 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800604a:	d901      	bls.n	8006050 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e007      	b.n	8006060 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800605c:	d1ee      	bne.n	800603c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40023800 	.word	0x40023800
 800606c:	40007000 	.word	0x40007000

08006070 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af02      	add	r7, sp, #8
 8006076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800607c:	f7fa fd5c 	bl	8000b38 <HAL_GetTick>
 8006080:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e073      	b.n	8006174 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_QSPI_Init+0x2c>
 8006098:	2302      	movs	r3, #2
 800609a:	e06b      	b.n	8006174 <HAL_QSPI_Init+0x104>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f016 f86d 	bl	801c198 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80060be:	f241 3188 	movw	r1, #5000	; 0x1388
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f85e 	bl	8006184 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	021a      	lsls	r2, r3, #8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2120      	movs	r1, #32
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f856 	bl	80061a0 <QSPI_WaitFlagStateUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d135      	bne.n	800616a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b1d      	ldr	r3, [pc, #116]	; (800617c <HAL_QSPI_Init+0x10c>)
 8006106:	4013      	ands	r3, r2
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6852      	ldr	r2, [r2, #4]
 800610c:	0611      	lsls	r1, r2, #24
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	68d2      	ldr	r2, [r2, #12]
 8006112:	4311      	orrs	r1, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	69d2      	ldr	r2, [r2, #28]
 8006118:	4311      	orrs	r1, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6a12      	ldr	r2, [r2, #32]
 800611e:	4311      	orrs	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	430b      	orrs	r3, r1
 8006126:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	4b14      	ldr	r3, [pc, #80]	; (8006180 <HAL_QSPI_Init+0x110>)
 8006130:	4013      	ands	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6912      	ldr	r2, [r2, #16]
 8006136:	0411      	lsls	r1, r2, #16
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6952      	ldr	r2, [r2, #20]
 800613c:	4311      	orrs	r1, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6992      	ldr	r2, [r2, #24]
 8006142:	4311      	orrs	r1, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	430b      	orrs	r3, r1
 800614a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	00ffff2f 	.word	0x00ffff2f
 8006180:	ffe0f8fe 	.word	0xffe0f8fe

08006184 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	4613      	mov	r3, r2
 80061ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80061b0:	e01a      	b.n	80061e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d016      	beq.n	80061e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80061c0:	f7fa fcba 	bl	8000b38 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d20b      	bcs.n	80061e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2204      	movs	r2, #4
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061dc:	f043 0201 	orr.w	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e00e      	b.n	8006206 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	bf14      	ite	ne
 80061f6:	2301      	movne	r3, #1
 80061f8:	2300      	moveq	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	429a      	cmp	r2, r3
 8006202:	d1d6      	bne.n	80061b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006218:	2300      	movs	r3, #0
 800621a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e25c      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8087 	beq.w	8006342 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006234:	4b96      	ldr	r3, [pc, #600]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 030c 	and.w	r3, r3, #12
 800623c:	2b04      	cmp	r3, #4
 800623e:	d00c      	beq.n	800625a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006240:	4b93      	ldr	r3, [pc, #588]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b08      	cmp	r3, #8
 800624a:	d112      	bne.n	8006272 <HAL_RCC_OscConfig+0x62>
 800624c:	4b90      	ldr	r3, [pc, #576]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006258:	d10b      	bne.n	8006272 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800625a:	4b8d      	ldr	r3, [pc, #564]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d06c      	beq.n	8006340 <HAL_RCC_OscConfig+0x130>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d168      	bne.n	8006340 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e236      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x7a>
 800627c:	4b84      	ldr	r3, [pc, #528]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a83      	ldr	r2, [pc, #524]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	e02e      	b.n	80062e8 <HAL_RCC_OscConfig+0xd8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0x9c>
 8006292:	4b7f      	ldr	r3, [pc, #508]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a7e      	ldr	r2, [pc, #504]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4b7c      	ldr	r3, [pc, #496]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a7b      	ldr	r2, [pc, #492]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	e01d      	b.n	80062e8 <HAL_RCC_OscConfig+0xd8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b4:	d10c      	bne.n	80062d0 <HAL_RCC_OscConfig+0xc0>
 80062b6:	4b76      	ldr	r3, [pc, #472]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a75      	ldr	r2, [pc, #468]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	4b73      	ldr	r3, [pc, #460]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a72      	ldr	r2, [pc, #456]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	e00b      	b.n	80062e8 <HAL_RCC_OscConfig+0xd8>
 80062d0:	4b6f      	ldr	r3, [pc, #444]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a6e      	ldr	r2, [pc, #440]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	4b6c      	ldr	r3, [pc, #432]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a6b      	ldr	r2, [pc, #428]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80062e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d013      	beq.n	8006318 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fa fc22 	bl	8000b38 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f8:	f7fa fc1e 	bl	8000b38 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b64      	cmp	r3, #100	; 0x64
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e1ea      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630a:	4b61      	ldr	r3, [pc, #388]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0xe8>
 8006316:	e014      	b.n	8006342 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fa fc0e 	bl	8000b38 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006320:	f7fa fc0a 	bl	8000b38 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b64      	cmp	r3, #100	; 0x64
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e1d6      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006332:	4b57      	ldr	r3, [pc, #348]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0x110>
 800633e:	e000      	b.n	8006342 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d069      	beq.n	8006422 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800634e:	4b50      	ldr	r3, [pc, #320]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800635a:	4b4d      	ldr	r3, [pc, #308]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 030c 	and.w	r3, r3, #12
 8006362:	2b08      	cmp	r3, #8
 8006364:	d11c      	bne.n	80063a0 <HAL_RCC_OscConfig+0x190>
 8006366:	4b4a      	ldr	r3, [pc, #296]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d116      	bne.n	80063a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006372:	4b47      	ldr	r3, [pc, #284]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_RCC_OscConfig+0x17a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d001      	beq.n	800638a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e1aa      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638a:	4b41      	ldr	r3, [pc, #260]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	493d      	ldr	r1, [pc, #244]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800639a:	4313      	orrs	r3, r2
 800639c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800639e:	e040      	b.n	8006422 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d023      	beq.n	80063f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063a8:	4b39      	ldr	r3, [pc, #228]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a38      	ldr	r2, [pc, #224]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b4:	f7fa fbc0 	bl	8000b38 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063bc:	f7fa fbbc 	bl	8000b38 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e188      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ce:	4b30      	ldr	r3, [pc, #192]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063da:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4929      	ldr	r1, [pc, #164]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]
 80063ee:	e018      	b.n	8006422 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063f0:	4b27      	ldr	r3, [pc, #156]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a26      	ldr	r2, [pc, #152]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fa fb9c 	bl	8000b38 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006404:	f7fa fb98 	bl	8000b38 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e164      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006416:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d038      	beq.n	80064a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d019      	beq.n	800646a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006436:	4b16      	ldr	r3, [pc, #88]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800643a:	4a15      	ldr	r2, [pc, #84]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006442:	f7fa fb79 	bl	8000b38 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800644a:	f7fa fb75 	bl	8000b38 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e141      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800645c:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800645e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x23a>
 8006468:	e01a      	b.n	80064a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 800646c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646e:	4a08      	ldr	r2, [pc, #32]	; (8006490 <HAL_RCC_OscConfig+0x280>)
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006476:	f7fa fb5f 	bl	8000b38 <HAL_GetTick>
 800647a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800647c:	e00a      	b.n	8006494 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800647e:	f7fa fb5b 	bl	8000b38 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d903      	bls.n	8006494 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e127      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
 8006490:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	4b94      	ldr	r3, [pc, #592]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ee      	bne.n	800647e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80a4 	beq.w	80065f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ae:	4b8e      	ldr	r3, [pc, #568]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ba:	4b8b      	ldr	r3, [pc, #556]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	4a8a      	ldr	r2, [pc, #552]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6413      	str	r3, [r2, #64]	; 0x40
 80064c6:	4b88      	ldr	r3, [pc, #544]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064d6:	4b85      	ldr	r3, [pc, #532]	; (80066ec <HAL_RCC_OscConfig+0x4dc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d118      	bne.n	8006514 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80064e2:	4b82      	ldr	r3, [pc, #520]	; (80066ec <HAL_RCC_OscConfig+0x4dc>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a81      	ldr	r2, [pc, #516]	; (80066ec <HAL_RCC_OscConfig+0x4dc>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ee:	f7fa fb23 	bl	8000b38 <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064f4:	e008      	b.n	8006508 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064f6:	f7fa fb1f 	bl	8000b38 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b64      	cmp	r3, #100	; 0x64
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e0eb      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006508:	4b78      	ldr	r3, [pc, #480]	; (80066ec <HAL_RCC_OscConfig+0x4dc>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0f0      	beq.n	80064f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <HAL_RCC_OscConfig+0x31a>
 800651c:	4b72      	ldr	r3, [pc, #456]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	4a71      	ldr	r2, [pc, #452]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	6713      	str	r3, [r2, #112]	; 0x70
 8006528:	e02d      	b.n	8006586 <HAL_RCC_OscConfig+0x376>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10c      	bne.n	800654c <HAL_RCC_OscConfig+0x33c>
 8006532:	4b6d      	ldr	r3, [pc, #436]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	4a6c      	ldr	r2, [pc, #432]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	6713      	str	r3, [r2, #112]	; 0x70
 800653e:	4b6a      	ldr	r3, [pc, #424]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	4a69      	ldr	r2, [pc, #420]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006544:	f023 0304 	bic.w	r3, r3, #4
 8006548:	6713      	str	r3, [r2, #112]	; 0x70
 800654a:	e01c      	b.n	8006586 <HAL_RCC_OscConfig+0x376>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b05      	cmp	r3, #5
 8006552:	d10c      	bne.n	800656e <HAL_RCC_OscConfig+0x35e>
 8006554:	4b64      	ldr	r3, [pc, #400]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006558:	4a63      	ldr	r2, [pc, #396]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	6713      	str	r3, [r2, #112]	; 0x70
 8006560:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	4a60      	ldr	r2, [pc, #384]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	6713      	str	r3, [r2, #112]	; 0x70
 800656c:	e00b      	b.n	8006586 <HAL_RCC_OscConfig+0x376>
 800656e:	4b5e      	ldr	r3, [pc, #376]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a5d      	ldr	r2, [pc, #372]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	4b5b      	ldr	r3, [pc, #364]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	4a5a      	ldr	r2, [pc, #360]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d015      	beq.n	80065ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658e:	f7fa fad3 	bl	8000b38 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006594:	e00a      	b.n	80065ac <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fa facf 	bl	8000b38 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e099      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ac:	4b4e      	ldr	r3, [pc, #312]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80065ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0ee      	beq.n	8006596 <HAL_RCC_OscConfig+0x386>
 80065b8:	e014      	b.n	80065e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ba:	f7fa fabd 	bl	8000b38 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c2:	f7fa fab9 	bl	8000b38 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e083      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d8:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1ee      	bne.n	80065c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d105      	bne.n	80065f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ea:	4b3f      	ldr	r3, [pc, #252]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	4a3e      	ldr	r2, [pc, #248]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80065f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d06f      	beq.n	80066de <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065fe:	4b3a      	ldr	r3, [pc, #232]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 030c 	and.w	r3, r3, #12
 8006606:	2b08      	cmp	r3, #8
 8006608:	d067      	beq.n	80066da <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d149      	bne.n	80066a6 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006612:	4b35      	ldr	r3, [pc, #212]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a34      	ldr	r2, [pc, #208]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800661c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661e:	f7fa fa8b 	bl	8000b38 <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006626:	f7fa fa87 	bl	8000b38 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e053      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006638:	4b2b      	ldr	r3, [pc, #172]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f0      	bne.n	8006626 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	019b      	lsls	r3, r3, #6
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	3b01      	subs	r3, #1
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	061b      	lsls	r3, r3, #24
 8006668:	4313      	orrs	r3, r2
 800666a:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 800666c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006670:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006672:	4b1d      	ldr	r3, [pc, #116]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 8006678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800667c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667e:	f7fa fa5b 	bl	8000b38 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006686:	f7fa fa57 	bl	8000b38 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e023      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006698:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x476>
 80066a4:	e01b      	b.n	80066de <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a6:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a0f      	ldr	r2, [pc, #60]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80066ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fa fa41 	bl	8000b38 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ba:	f7fa fa3d 	bl	8000b38 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e009      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <HAL_RCC_OscConfig+0x4d8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x4aa>
 80066d8:	e001      	b.n	80066de <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40023800 	.word	0x40023800
 80066ec:	40007000 	.word	0x40007000

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0ce      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006708:	4b69      	ldr	r3, [pc, #420]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d910      	bls.n	8006738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006716:	4b66      	ldr	r3, [pc, #408]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f023 020f 	bic.w	r2, r3, #15
 800671e:	4964      	ldr	r1, [pc, #400]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	4313      	orrs	r3, r2
 8006724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006726:	4b62      	ldr	r3, [pc, #392]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e0b6      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d020      	beq.n	8006786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006750:	4b58      	ldr	r3, [pc, #352]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	4a57      	ldr	r2, [pc, #348]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800675a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006768:	4b52      	ldr	r3, [pc, #328]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	4a51      	ldr	r2, [pc, #324]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800676e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006774:	4b4f      	ldr	r3, [pc, #316]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	494c      	ldr	r1, [pc, #304]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006782:	4313      	orrs	r3, r2
 8006784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d040      	beq.n	8006814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d107      	bne.n	80067aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	4b46      	ldr	r3, [pc, #280]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d115      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e07d      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d107      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b2:	4b40      	ldr	r3, [pc, #256]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e071      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c2:	4b3c      	ldr	r3, [pc, #240]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e069      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067d2:	4b38      	ldr	r3, [pc, #224]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f023 0203 	bic.w	r2, r3, #3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4935      	ldr	r1, [pc, #212]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e4:	f7fa f9a8 	bl	8000b38 <HAL_GetTick>
 80067e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ea:	e00a      	b.n	8006802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ec:	f7fa f9a4 	bl	8000b38 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e051      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	4b2c      	ldr	r3, [pc, #176]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 020c 	and.w	r2, r3, #12
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	429a      	cmp	r2, r3
 8006812:	d1eb      	bne.n	80067ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006814:	4b26      	ldr	r3, [pc, #152]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d210      	bcs.n	8006844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f023 020f 	bic.w	r2, r3, #15
 800682a:	4921      	ldr	r1, [pc, #132]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	4313      	orrs	r3, r2
 8006830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006832:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d001      	beq.n	8006844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e030      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006850:	4b18      	ldr	r3, [pc, #96]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	4915      	ldr	r1, [pc, #84]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800685e:	4313      	orrs	r3, r2
 8006860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800686e:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	490d      	ldr	r1, [pc, #52]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800687e:	4313      	orrs	r3, r2
 8006880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006882:	f000 f81d 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8006886:	4601      	mov	r1, r0
 8006888:	4b0a      	ldr	r3, [pc, #40]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	091b      	lsrs	r3, r3, #4
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	4a09      	ldr	r2, [pc, #36]	; (80068b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006894:	5cd3      	ldrb	r3, [r2, r3]
 8006896:	fa21 f303 	lsr.w	r3, r1, r3
 800689a:	4a08      	ldr	r2, [pc, #32]	; (80068bc <HAL_RCC_ClockConfig+0x1cc>)
 800689c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800689e:	2000      	movs	r0, #0
 80068a0:	f016 f8d6 	bl	801ca50 <HAL_InitTick>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40023c00 	.word	0x40023c00
 80068b4:	40023800 	.word	0x40023800
 80068b8:	08027ac8 	.word	0x08027ac8
 80068bc:	20000060 	.word	0x20000060

080068c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	607b      	str	r3, [r7, #4]
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	2300      	movs	r3, #0
 80068d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d6:	4b50      	ldr	r3, [pc, #320]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x158>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 030c 	and.w	r3, r3, #12
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d007      	beq.n	80068f2 <HAL_RCC_GetSysClockFreq+0x32>
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d008      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0x38>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 808d 	bne.w	8006a06 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068ec:	4b4b      	ldr	r3, [pc, #300]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x15c>)
 80068ee:	60bb      	str	r3, [r7, #8]
       break;
 80068f0:	e08c      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068f2:	4b4b      	ldr	r3, [pc, #300]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x160>)
 80068f4:	60bb      	str	r3, [r7, #8]
      break;
 80068f6:	e089      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068f8:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x158>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006900:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006902:	4b45      	ldr	r3, [pc, #276]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x158>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d023      	beq.n	8006956 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800690e:	4b42      	ldr	r3, [pc, #264]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x158>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	099b      	lsrs	r3, r3, #6
 8006914:	f04f 0400 	mov.w	r4, #0
 8006918:	f240 11ff 	movw	r1, #511	; 0x1ff
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	ea03 0501 	and.w	r5, r3, r1
 8006924:	ea04 0602 	and.w	r6, r4, r2
 8006928:	4a3d      	ldr	r2, [pc, #244]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x160>)
 800692a:	fb02 f106 	mul.w	r1, r2, r6
 800692e:	2200      	movs	r2, #0
 8006930:	fb02 f205 	mul.w	r2, r2, r5
 8006934:	440a      	add	r2, r1
 8006936:	493a      	ldr	r1, [pc, #232]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x160>)
 8006938:	fba5 0101 	umull	r0, r1, r5, r1
 800693c:	1853      	adds	r3, r2, r1
 800693e:	4619      	mov	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f04f 0400 	mov.w	r4, #0
 8006946:	461a      	mov	r2, r3
 8006948:	4623      	mov	r3, r4
 800694a:	f7f9 fcb1 	bl	80002b0 <__aeabi_uldivmod>
 800694e:	4603      	mov	r3, r0
 8006950:	460c      	mov	r4, r1
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e049      	b.n	80069ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006956:	4b30      	ldr	r3, [pc, #192]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x158>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	099b      	lsrs	r3, r3, #6
 800695c:	f04f 0400 	mov.w	r4, #0
 8006960:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	ea03 0501 	and.w	r5, r3, r1
 800696c:	ea04 0602 	and.w	r6, r4, r2
 8006970:	4629      	mov	r1, r5
 8006972:	4632      	mov	r2, r6
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	f04f 0400 	mov.w	r4, #0
 800697c:	0154      	lsls	r4, r2, #5
 800697e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006982:	014b      	lsls	r3, r1, #5
 8006984:	4619      	mov	r1, r3
 8006986:	4622      	mov	r2, r4
 8006988:	1b49      	subs	r1, r1, r5
 800698a:	eb62 0206 	sbc.w	r2, r2, r6
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	f04f 0400 	mov.w	r4, #0
 8006996:	0194      	lsls	r4, r2, #6
 8006998:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800699c:	018b      	lsls	r3, r1, #6
 800699e:	1a5b      	subs	r3, r3, r1
 80069a0:	eb64 0402 	sbc.w	r4, r4, r2
 80069a4:	f04f 0100 	mov.w	r1, #0
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	00e2      	lsls	r2, r4, #3
 80069ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069b2:	00d9      	lsls	r1, r3, #3
 80069b4:	460b      	mov	r3, r1
 80069b6:	4614      	mov	r4, r2
 80069b8:	195b      	adds	r3, r3, r5
 80069ba:	eb44 0406 	adc.w	r4, r4, r6
 80069be:	f04f 0100 	mov.w	r1, #0
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	02a2      	lsls	r2, r4, #10
 80069c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80069cc:	0299      	lsls	r1, r3, #10
 80069ce:	460b      	mov	r3, r1
 80069d0:	4614      	mov	r4, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	4621      	mov	r1, r4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f04f 0400 	mov.w	r4, #0
 80069dc:	461a      	mov	r2, r3
 80069de:	4623      	mov	r3, r4
 80069e0:	f7f9 fc66 	bl	80002b0 <__aeabi_uldivmod>
 80069e4:	4603      	mov	r3, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80069ea:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x158>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	0c1b      	lsrs	r3, r3, #16
 80069f0:	f003 0303 	and.w	r3, r3, #3
 80069f4:	3301      	adds	r3, #1
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a02:	60bb      	str	r3, [r7, #8]
      break;
 8006a04:	e002      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006a08:	60bb      	str	r3, [r7, #8]
      break;
 8006a0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	00f42400 	.word	0x00f42400
 8006a20:	017d7840 	.word	0x017d7840

08006a24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a28:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000060 	.word	0x20000060

08006a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a40:	f7ff fff0 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 8006a44:	4601      	mov	r1, r0
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	0a9b      	lsrs	r3, r3, #10
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	4a03      	ldr	r2, [pc, #12]	; (8006a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a52:	5cd3      	ldrb	r3, [r2, r3]
 8006a54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	08027ad8 	.word	0x08027ad8

08006a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a68:	f7ff ffdc 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	0b5b      	lsrs	r3, r3, #13
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	4a03      	ldr	r2, [pc, #12]	; (8006a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a7a:	5cd3      	ldrb	r3, [r2, r3]
 8006a7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40023800 	.word	0x40023800
 8006a88:	08027ad8 	.word	0x08027ad8

08006a8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	220f      	movs	r2, #15
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a9c:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f003 0203 	and.w	r2, r3, #3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006aa8:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ab4:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ac0:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	08db      	lsrs	r3, r3, #3
 8006ac6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ace:	4b07      	ldr	r3, [pc, #28]	; (8006aec <HAL_RCC_GetClockConfig+0x60>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	40023c00 	.word	0x40023c00

08006af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d012      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b18:	4b69      	ldr	r3, [pc, #420]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	4a68      	ldr	r2, [pc, #416]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b22:	6093      	str	r3, [r2, #8]
 8006b24:	4b66      	ldr	r3, [pc, #408]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2c:	4964      	ldr	r1, [pc, #400]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d017      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b4a:	4b5d      	ldr	r3, [pc, #372]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	4959      	ldr	r1, [pc, #356]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b68:	d101      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006b76:	2301      	movs	r3, #1
 8006b78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d017      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b86:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	494a      	ldr	r1, [pc, #296]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ba4:	d101      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 808b 	beq.w	8006cea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bd4:	4b3a      	ldr	r3, [pc, #232]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	4a39      	ldr	r2, [pc, #228]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bde:	6413      	str	r3, [r2, #64]	; 0x40
 8006be0:	4b37      	ldr	r3, [pc, #220]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006bec:	4b35      	ldr	r3, [pc, #212]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a34      	ldr	r2, [pc, #208]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf8:	f7f9 ff9e 	bl	8000b38 <HAL_GetTick>
 8006bfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c00:	f7f9 ff9a 	bl	8000b38 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b64      	cmp	r3, #100	; 0x64
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e355      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c12:	4b2c      	ldr	r3, [pc, #176]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0f0      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c1e:	4b28      	ldr	r3, [pc, #160]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d035      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d02e      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c3c:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c46:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c52:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4a1a      	ldr	r2, [pc, #104]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c5e:	4a18      	ldr	r2, [pc, #96]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c64:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d114      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7f9 ff62 	bl	8000b38 <HAL_GetTick>
 8006c74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c76:	e00a      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c78:	f7f9 ff5e 	bl	8000b38 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e317      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0ee      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca6:	d111      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006cb6:	400b      	ands	r3, r1
 8006cb8:	4901      	ldr	r1, [pc, #4]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	608b      	str	r3, [r1, #8]
 8006cbe:	e00b      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	40007000 	.word	0x40007000
 8006cc8:	0ffffcff 	.word	0x0ffffcff
 8006ccc:	4bb0      	ldr	r3, [pc, #704]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	4aaf      	ldr	r2, [pc, #700]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cd6:	6093      	str	r3, [r2, #8]
 8006cd8:	4bad      	ldr	r3, [pc, #692]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce4:	49aa      	ldr	r1, [pc, #680]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cf6:	4ba6      	ldr	r3, [pc, #664]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfc:	4aa4      	ldr	r2, [pc, #656]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d06:	4ba2      	ldr	r3, [pc, #648]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	499f      	ldr	r1, [pc, #636]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d24:	4b9a      	ldr	r3, [pc, #616]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d32:	4997      	ldr	r1, [pc, #604]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d46:	4b92      	ldr	r3, [pc, #584]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d54:	498e      	ldr	r1, [pc, #568]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d68:	4b89      	ldr	r3, [pc, #548]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d76:	4986      	ldr	r1, [pc, #536]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d8a:	4b81      	ldr	r3, [pc, #516]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d98:	497d      	ldr	r1, [pc, #500]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dac:	4b78      	ldr	r3, [pc, #480]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	f023 0203 	bic.w	r2, r3, #3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	4975      	ldr	r1, [pc, #468]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dce:	4b70      	ldr	r3, [pc, #448]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd4:	f023 020c 	bic.w	r2, r3, #12
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ddc:	496c      	ldr	r1, [pc, #432]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006df0:	4b67      	ldr	r3, [pc, #412]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfe:	4964      	ldr	r1, [pc, #400]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e12:	4b5f      	ldr	r3, [pc, #380]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e20:	495b      	ldr	r1, [pc, #364]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e34:	4b56      	ldr	r3, [pc, #344]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	4953      	ldr	r1, [pc, #332]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e56:	4b4e      	ldr	r3, [pc, #312]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e64:	494a      	ldr	r1, [pc, #296]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006e78:	4b45      	ldr	r3, [pc, #276]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e86:	4942      	ldr	r1, [pc, #264]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e9a:	4b3d      	ldr	r3, [pc, #244]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea8:	4939      	ldr	r1, [pc, #228]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ebc:	4b34      	ldr	r3, [pc, #208]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eca:	4931      	ldr	r1, [pc, #196]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d011      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ede:	4b2c      	ldr	r3, [pc, #176]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eec:	4928      	ldr	r1, [pc, #160]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006efc:	d101      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006efe:	2301      	movs	r3, #1
 8006f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f1e:	4b1c      	ldr	r3, [pc, #112]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2c:	4918      	ldr	r1, [pc, #96]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f40:	4b13      	ldr	r3, [pc, #76]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f50:	490f      	ldr	r1, [pc, #60]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d005      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f66:	f040 80d8 	bne.w	800711a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006f70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f76:	f7f9 fddf 	bl	8000b38 <HAL_GetTick>
 8006f7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f7c:	e00a      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f7e:	f7f9 fddb 	bl	8000b38 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b64      	cmp	r3, #100	; 0x64
 8006f8a:	d903      	bls.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e196      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006f90:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f94:	4b6c      	ldr	r3, [pc, #432]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ee      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d021      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d11d      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fb4:	4b64      	ldr	r3, [pc, #400]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fba:	0c1b      	lsrs	r3, r3, #16
 8006fbc:	f003 0303 	and.w	r3, r3, #3
 8006fc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fc2:	4b61      	ldr	r3, [pc, #388]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc8:	0e1b      	lsrs	r3, r3, #24
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	019a      	lsls	r2, r3, #6
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	041b      	lsls	r3, r3, #16
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	071b      	lsls	r3, r3, #28
 8006fe8:	4957      	ldr	r1, [pc, #348]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007004:	d00a      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800700e:	2b00      	cmp	r3, #0
 8007010:	d02e      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800701a:	d129      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800701c:	4b4a      	ldr	r3, [pc, #296]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800701e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800702a:	4b47      	ldr	r3, [pc, #284]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800702c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007030:	0f1b      	lsrs	r3, r3, #28
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	019a      	lsls	r2, r3, #6
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	061b      	lsls	r3, r3, #24
 800704a:	431a      	orrs	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	071b      	lsls	r3, r3, #28
 8007050:	493d      	ldr	r1, [pc, #244]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007058:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800705a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705e:	f023 021f 	bic.w	r2, r3, #31
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	3b01      	subs	r3, #1
 8007068:	4937      	ldr	r1, [pc, #220]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800706a:	4313      	orrs	r3, r2
 800706c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01d      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800707c:	4b32      	ldr	r3, [pc, #200]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800707e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007082:	0e1b      	lsrs	r3, r3, #24
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800708a:	4b2f      	ldr	r3, [pc, #188]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800708c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007090:	0f1b      	lsrs	r3, r3, #28
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	019a      	lsls	r2, r3, #6
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	041b      	lsls	r3, r3, #16
 80070a4:	431a      	orrs	r2, r3
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	061b      	lsls	r3, r3, #24
 80070aa:	431a      	orrs	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	071b      	lsls	r3, r3, #28
 80070b0:	4925      	ldr	r1, [pc, #148]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d011      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	019a      	lsls	r2, r3, #6
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	061b      	lsls	r3, r3, #24
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	071b      	lsls	r3, r3, #28
 80070e0:	4919      	ldr	r1, [pc, #100]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070e8:	4b17      	ldr	r3, [pc, #92]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a16      	ldr	r2, [pc, #88]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f4:	f7f9 fd20 	bl	8000b38 <HAL_GetTick>
 80070f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070fc:	f7f9 fd1c 	bl	8000b38 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b64      	cmp	r3, #100	; 0x64
 8007108:	d901      	bls.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e0d7      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800710e:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d0f0      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b01      	cmp	r3, #1
 800711e:	f040 80cd 	bne.w	80072bc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a08      	ldr	r2, [pc, #32]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800712c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712e:	f7f9 fd03 	bl	8000b38 <HAL_GetTick>
 8007132:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007134:	e00a      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007136:	f7f9 fcff 	bl	8000b38 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b64      	cmp	r3, #100	; 0x64
 8007142:	d903      	bls.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e0ba      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007148:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800714c:	4b5e      	ldr	r3, [pc, #376]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007158:	d0ed      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02e      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d12a      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007182:	4b51      	ldr	r3, [pc, #324]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007190:	4b4d      	ldr	r3, [pc, #308]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007196:	0f1b      	lsrs	r3, r3, #28
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	019a      	lsls	r2, r3, #6
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	061b      	lsls	r3, r3, #24
 80071b0:	431a      	orrs	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	071b      	lsls	r3, r3, #28
 80071b6:	4944      	ldr	r1, [pc, #272]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80071be:	4b42      	ldr	r3, [pc, #264]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	3b01      	subs	r3, #1
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	493d      	ldr	r1, [pc, #244]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d022      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ec:	d11d      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071ee:	4b36      	ldr	r3, [pc, #216]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f4:	0e1b      	lsrs	r3, r3, #24
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071fc:	4b32      	ldr	r3, [pc, #200]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007202:	0f1b      	lsrs	r3, r3, #28
 8007204:	f003 0307 	and.w	r3, r3, #7
 8007208:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	019a      	lsls	r2, r3, #6
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	431a      	orrs	r2, r3
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	061b      	lsls	r3, r3, #24
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	071b      	lsls	r3, r3, #28
 8007222:	4929      	ldr	r1, [pc, #164]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d028      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007236:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723c:	0e1b      	lsrs	r3, r3, #24
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007244:	4b20      	ldr	r3, [pc, #128]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724a:	0c1b      	lsrs	r3, r3, #16
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	019a      	lsls	r2, r3, #6
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	041b      	lsls	r3, r3, #16
 800725c:	431a      	orrs	r2, r3
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	061b      	lsls	r3, r3, #24
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	071b      	lsls	r3, r3, #28
 800726a:	4917      	ldr	r1, [pc, #92]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007272:	4b15      	ldr	r3, [pc, #84]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	4911      	ldr	r1, [pc, #68]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007288:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a0e      	ldr	r2, [pc, #56]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800728e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007294:	f7f9 fc50 	bl	8000b38 <HAL_GetTick>
 8007298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800729a:	e008      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800729c:	f7f9 fc4c 	bl	8000b38 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b64      	cmp	r3, #100	; 0x64
 80072a8:	d901      	bls.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e007      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072ae:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ba:	d1ef      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40023800 	.word	0x40023800

080072cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072ea:	f040 8086 	bne.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80072ee:	4b8d      	ldr	r3, [pc, #564]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072f4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80072fc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007304:	d03e      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800730a:	d073      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d000      	beq.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007310:	e074      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007312:	4b84      	ldr	r3, [pc, #528]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800731e:	4b81      	ldr	r3, [pc, #516]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007326:	4a80      	ldr	r2, [pc, #512]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007328:	fbb2 f3f3 	udiv	r3, r2, r3
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	e007      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007330:	4b7c      	ldr	r3, [pc, #496]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007338:	4a7c      	ldr	r2, [pc, #496]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007340:	4b78      	ldr	r3, [pc, #480]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007346:	0e1b      	lsrs	r3, r3, #24
 8007348:	f003 030f 	and.w	r3, r3, #15
 800734c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800734e:	4b75      	ldr	r3, [pc, #468]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007354:	099b      	lsrs	r3, r3, #6
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	fb02 f203 	mul.w	r2, r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	fbb2 f3f3 	udiv	r3, r2, r3
 8007366:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007368:	4b6e      	ldr	r3, [pc, #440]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800736a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	3301      	adds	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007380:	617b      	str	r3, [r7, #20]
        break;
 8007382:	e03b      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007384:	4b67      	ldr	r3, [pc, #412]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d108      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007390:	4b64      	ldr	r3, [pc, #400]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007398:	4a63      	ldr	r2, [pc, #396]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800739a:	fbb2 f3f3 	udiv	r3, r2, r3
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	e007      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80073a2:	4b60      	ldr	r3, [pc, #384]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073aa:	4a60      	ldr	r2, [pc, #384]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80073ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80073b2:	4b5c      	ldr	r3, [pc, #368]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b8:	0e1b      	lsrs	r3, r3, #24
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80073c0:	4b58      	ldr	r3, [pc, #352]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c6:	099b      	lsrs	r3, r3, #6
 80073c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	fb02 f203 	mul.w	r2, r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80073da:	4b52      	ldr	r3, [pc, #328]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]
        break;
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80073f4:	4b4e      	ldr	r3, [pc, #312]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80073f6:	617b      	str	r3, [r7, #20]
        break;
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80073fa:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007402:	f040 8086 	bne.w	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007406:	4b47      	ldr	r3, [pc, #284]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800740c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007414:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800741c:	d03e      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800741e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007422:	d073      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d000      	beq.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007428:	e074      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800742a:	4b3e      	ldr	r3, [pc, #248]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007436:	4b3b      	ldr	r3, [pc, #236]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800743e:	4a3a      	ldr	r2, [pc, #232]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007440:	fbb2 f3f3 	udiv	r3, r2, r3
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	e007      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007448:	4b36      	ldr	r3, [pc, #216]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007450:	4a36      	ldr	r2, [pc, #216]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007452:	fbb2 f3f3 	udiv	r3, r2, r3
 8007456:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007458:	4b32      	ldr	r3, [pc, #200]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800745a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745e:	0e1b      	lsrs	r3, r3, #24
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007466:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746c:	099b      	lsrs	r3, r3, #6
 800746e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	fb02 f203 	mul.w	r2, r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	fbb2 f3f3 	udiv	r3, r2, r3
 800747e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007480:	4b28      	ldr	r3, [pc, #160]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	3301      	adds	r3, #1
 800748e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	fbb2 f3f3 	udiv	r3, r2, r3
 8007498:	617b      	str	r3, [r7, #20]
        break;
 800749a:	e03b      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800749c:	4b21      	ldr	r3, [pc, #132]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d108      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074a8:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074b0:	4a1d      	ldr	r2, [pc, #116]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80074b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	e007      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074c2:	4a1a      	ldr	r2, [pc, #104]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80074ca:	4b16      	ldr	r3, [pc, #88]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80074cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d0:	0e1b      	lsrs	r3, r3, #24
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80074da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074de:	099b      	lsrs	r3, r3, #6
 80074e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	fb02 f203 	mul.w	r2, r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80074f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f8:	f003 031f 	and.w	r3, r3, #31
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	fbb2 f3f3 	udiv	r3, r2, r3
 8007508:	617b      	str	r3, [r7, #20]
        break;
 800750a:	e003      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800750c:	4b08      	ldr	r3, [pc, #32]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800750e:	617b      	str	r3, [r7, #20]
        break;
 8007510:	e000      	b.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007512:	bf00      	nop

  return frequency;
 8007514:	697b      	ldr	r3, [r7, #20]
}
 8007516:	4618      	mov	r0, r3
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40023800 	.word	0x40023800
 8007528:	00f42400 	.word	0x00f42400
 800752c:	017d7840 	.word	0x017d7840
 8007530:	00bb8000 	.word	0x00bb8000

08007534 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e06b      	b.n	800761e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7f5b      	ldrb	r3, [r3, #29]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f014 feae 	bl	801c2b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	22ca      	movs	r2, #202	; 0xca
 8007568:	625a      	str	r2, [r3, #36]	; 0x24
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2253      	movs	r2, #83	; 0x53
 8007570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fb00 	bl	8007b78 <RTC_EnterInitMode>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	22ff      	movs	r2, #255	; 0xff
 8007584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2204      	movs	r2, #4
 800758a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e046      	b.n	800761e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6899      	ldr	r1, [r3, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b23      	ldr	r3, [pc, #140]	; (8007628 <HAL_RTC_Init+0xf4>)
 800759c:	400b      	ands	r3, r1
 800759e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6899      	ldr	r1, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	68d2      	ldr	r2, [r2, #12]
 80075c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6919      	ldr	r1, [r3, #16]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	041a      	lsls	r2, r3, #16
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075ea:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0208 	bic.w	r2, r2, #8
 80075fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	22ff      	movs	r2, #255	; 0xff
 8007614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800761c:	2300      	movs	r3, #0
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	ff8fffbf 	.word	0xff8fffbf

0800762c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800762c:	b590      	push	{r4, r7, lr}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	7f1b      	ldrb	r3, [r3, #28]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_RTC_SetTime+0x1c>
 8007644:	2302      	movs	r3, #2
 8007646:	e0a8      	b.n	800779a <HAL_RTC_SetTime+0x16e>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2202      	movs	r2, #2
 8007652:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d126      	bne.n	80076a8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2200      	movs	r2, #0
 800766c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 faac 	bl	8007bd0 <RTC_ByteToBcd2>
 8007678:	4603      	mov	r3, r0
 800767a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	4618      	mov	r0, r3
 8007682:	f000 faa5 	bl	8007bd0 <RTC_ByteToBcd2>
 8007686:	4603      	mov	r3, r0
 8007688:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800768a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	789b      	ldrb	r3, [r3, #2]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fa9d 	bl	8007bd0 <RTC_ByteToBcd2>
 8007696:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007698:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	7b1b      	ldrb	r3, [r3, #12]
 80076a0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	e018      	b.n	80076da <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d102      	bne.n	80076bc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2200      	movs	r2, #0
 80076ba:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80076c8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80076ce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	7b1b      	ldrb	r3, [r3, #12]
 80076d4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	22ca      	movs	r2, #202	; 0xca
 80076e0:	625a      	str	r2, [r3, #36]	; 0x24
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2253      	movs	r2, #83	; 0x53
 80076e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fa44 	bl	8007b78 <RTC_EnterInitMode>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00b      	beq.n	800770e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	22ff      	movs	r2, #255	; 0xff
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2204      	movs	r2, #4
 8007702:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e045      	b.n	800779a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	6979      	ldr	r1, [r7, #20]
 8007714:	4b23      	ldr	r3, [pc, #140]	; (80077a4 <HAL_RTC_SetTime+0x178>)
 8007716:	400b      	ands	r3, r1
 8007718:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007728:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6899      	ldr	r1, [r3, #8]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	431a      	orrs	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007750:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d111      	bne.n	8007784 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f9e1 	bl	8007b28 <HAL_RTC_WaitForSynchro>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	22ff      	movs	r2, #255	; 0xff
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2204      	movs	r2, #4
 8007778:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e00a      	b.n	800779a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	22ff      	movs	r2, #255	; 0xff
 800778a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007798:	2300      	movs	r3, #0
  }
}
 800779a:	4618      	mov	r0, r3
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd90      	pop	{r4, r7, pc}
 80077a2:	bf00      	nop
 80077a4:	007f7f7f 	.word	0x007f7f7f

080077a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80077a8:	b590      	push	{r4, r7, lr}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	7f1b      	ldrb	r3, [r3, #28]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_RTC_SetDate+0x1c>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e092      	b.n	80078ea <HAL_RTC_SetDate+0x142>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2202      	movs	r2, #2
 80077ce:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10e      	bne.n	80077f4 <HAL_RTC_SetDate+0x4c>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	f023 0310 	bic.w	r3, r3, #16
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	330a      	adds	r3, #10
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d11c      	bne.n	8007834 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	78db      	ldrb	r3, [r3, #3]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f9e6 	bl	8007bd0 <RTC_ByteToBcd2>
 8007804:	4603      	mov	r3, r0
 8007806:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 f9df 	bl	8007bd0 <RTC_ByteToBcd2>
 8007812:	4603      	mov	r3, r0
 8007814:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007816:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	789b      	ldrb	r3, [r3, #2]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 f9d7 	bl	8007bd0 <RTC_ByteToBcd2>
 8007822:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007824:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	e00e      	b.n	8007852 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	78db      	ldrb	r3, [r3, #3]
 8007838:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007840:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007846:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	22ca      	movs	r2, #202	; 0xca
 8007858:	625a      	str	r2, [r3, #36]	; 0x24
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2253      	movs	r2, #83	; 0x53
 8007860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 f988 	bl	8007b78 <RTC_EnterInitMode>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	22ff      	movs	r2, #255	; 0xff
 8007874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2204      	movs	r2, #4
 800787a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e031      	b.n	80078ea <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	6979      	ldr	r1, [r7, #20]
 800788c:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <HAL_RTC_SetDate+0x14c>)
 800788e:	400b      	ands	r3, r1
 8007890:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d111      	bne.n	80078d4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f939 	bl	8007b28 <HAL_RTC_WaitForSynchro>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	22ff      	movs	r2, #255	; 0xff
 80078c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2204      	movs	r2, #4
 80078c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e00a      	b.n	80078ea <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	22ff      	movs	r2, #255	; 0xff
 80078da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80078e8:	2300      	movs	r3, #0
  }
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd90      	pop	{r4, r7, pc}
 80078f2:	bf00      	nop
 80078f4:	00ffff3f 	.word	0x00ffff3f

080078f8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b089      	sub	sp, #36	; 0x24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	7f1b      	ldrb	r3, [r3, #28]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_RTC_SetAlarm+0x24>
 8007918:	2302      	movs	r3, #2
 800791a:	e101      	b.n	8007b20 <HAL_RTC_SetAlarm+0x228>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d137      	bne.n	800799e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	d102      	bne.n	8007942 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f942 	bl	8007bd0 <RTC_ByteToBcd2>
 800794c:	4603      	mov	r3, r0
 800794e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	785b      	ldrb	r3, [r3, #1]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f93b 	bl	8007bd0 <RTC_ByteToBcd2>
 800795a:	4603      	mov	r3, r0
 800795c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800795e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	789b      	ldrb	r3, [r3, #2]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f933 	bl	8007bd0 <RTC_ByteToBcd2>
 800796a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800796c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	7b1b      	ldrb	r3, [r3, #12]
 8007974:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007976:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f925 	bl	8007bd0 <RTC_ByteToBcd2>
 8007986:	4603      	mov	r3, r0
 8007988:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800798a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007992:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007998:	4313      	orrs	r3, r2
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	e023      	b.n	80079e6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80079be:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80079c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	7b1b      	ldrb	r3, [r3, #12]
 80079ca:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80079cc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079d4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80079d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80079dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80079e2:	4313      	orrs	r3, r2
 80079e4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	22ca      	movs	r2, #202	; 0xca
 80079f8:	625a      	str	r2, [r3, #36]	; 0x24
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2253      	movs	r2, #83	; 0x53
 8007a00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0a:	d13f      	bne.n	8007a8c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a1a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a2a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a2c:	f7f9 f884 	bl	8000b38 <HAL_GetTick>
 8007a30:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007a32:	e013      	b.n	8007a5c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007a34:	f7f9 f880 	bl	8000b38 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a42:	d90b      	bls.n	8007a5c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	22ff      	movs	r2, #255	; 0xff
 8007a4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2203      	movs	r2, #3
 8007a50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e061      	b.n	8007b20 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0e4      	beq.n	8007a34 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a88:	609a      	str	r2, [r3, #8]
 8007a8a:	e03e      	b.n	8007b0a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007a9a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007aaa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007aac:	f7f9 f844 	bl	8000b38 <HAL_GetTick>
 8007ab0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007ab2:	e013      	b.n	8007adc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ab4:	f7f9 f840 	bl	8000b38 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ac2:	d90b      	bls.n	8007adc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	22ff      	movs	r2, #255	; 0xff
 8007aca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2203      	movs	r2, #3
 8007ad0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e021      	b.n	8007b20 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0e4      	beq.n	8007ab4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b08:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	22ff      	movs	r2, #255	; 0xff
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3724      	adds	r7, #36	; 0x24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd90      	pop	{r4, r7, pc}

08007b28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b42:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b44:	f7f8 fff8 	bl	8000b38 <HAL_GetTick>
 8007b48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b4a:	e009      	b.n	8007b60 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b4c:	f7f8 fff4 	bl	8000b38 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b5a:	d901      	bls.n	8007b60 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e007      	b.n	8007b70 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0ee      	beq.n	8007b4c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d119      	bne.n	8007bc6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b9c:	f7f8 ffcc 	bl	8000b38 <HAL_GetTick>
 8007ba0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ba2:	e009      	b.n	8007bb8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ba4:	f7f8 ffc8 	bl	8000b38 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bb2:	d901      	bls.n	8007bb8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e007      	b.n	8007bc8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0ee      	beq.n	8007ba4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007bde:	e005      	b.n	8007bec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	3b0a      	subs	r3, #10
 8007bea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b09      	cmp	r3, #9
 8007bf0:	d8f6      	bhi.n	8007be0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	b2db      	uxtb	r3, r3
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	7f1b      	ldrb	r3, [r3, #28]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e03e      	b.n	8007ca6 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2202      	movs	r2, #2
 8007c32:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	4b1e      	ldr	r3, [pc, #120]	; (8007cb4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	22ca      	movs	r2, #202	; 0xca
 8007c4e:	625a      	str	r2, [r3, #36]	; 0x24
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2253      	movs	r2, #83	; 0x53
 8007c56:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0206 	bic.w	r2, r2, #6
 8007c66:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c8e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	22ff      	movs	r2, #255	; 0xff
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	371c      	adds	r7, #28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	fffff7f7 	.word	0xfffff7f7

08007cb8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e149      	b.n	8007f6a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f014 fe46 	bl	801c97c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f94f 	bl	8007f9c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d007      	beq.n	8007d16 <HAL_SAI_Init+0x5e>
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d302      	bcc.n	8007d10 <HAL_SAI_Init+0x58>
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d006      	beq.n	8007d1c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007d0e:	e008      	b.n	8007d22 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61fb      	str	r3, [r7, #28]
      break;
 8007d14:	e005      	b.n	8007d22 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007d16:	2310      	movs	r3, #16
 8007d18:	61fb      	str	r3, [r7, #28]
      break;
 8007d1a:	e002      	b.n	8007d22 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	61fb      	str	r3, [r7, #28]
      break;
 8007d20:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d81d      	bhi.n	8007d66 <HAL_SAI_Init+0xae>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <HAL_SAI_Init+0x78>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d47 	.word	0x08007d47
 8007d38:	08007d4f 	.word	0x08007d4f
 8007d3c:	08007d57 	.word	0x08007d57
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
      }
      break;
 8007d44:	e010      	b.n	8007d68 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d4a:	617b      	str	r3, [r7, #20]
      }
      break;
 8007d4c:	e00c      	b.n	8007d68 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d52:	617b      	str	r3, [r7, #20]
      }
      break;
 8007d54:	e008      	b.n	8007d68 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d5a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f043 0301 	orr.w	r3, r3, #1
 8007d62:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007d64:	e000      	b.n	8007d68 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007d66:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a81      	ldr	r2, [pc, #516]	; (8007f74 <HAL_SAI_Init+0x2bc>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <HAL_SAI_Init+0xc4>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a80      	ldr	r2, [pc, #512]	; (8007f78 <HAL_SAI_Init+0x2c0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d103      	bne.n	8007d84 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007d7c:	4a7f      	ldr	r2, [pc, #508]	; (8007f7c <HAL_SAI_Init+0x2c4>)
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	e002      	b.n	8007d8a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007d84:	4a7e      	ldr	r2, [pc, #504]	; (8007f80 <HAL_SAI_Init+0x2c8>)
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d043      	beq.n	8007e1a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a76      	ldr	r2, [pc, #472]	; (8007f74 <HAL_SAI_Init+0x2bc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_SAI_Init+0xf2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a74      	ldr	r2, [pc, #464]	; (8007f78 <HAL_SAI_Init+0x2c0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d104      	bne.n	8007db4 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007daa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007dae:	f7ff fa8d 	bl	80072cc <HAL_RCCEx_GetPeriphCLKFreq>
 8007db2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a72      	ldr	r2, [pc, #456]	; (8007f84 <HAL_SAI_Init+0x2cc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d004      	beq.n	8007dc8 <HAL_SAI_Init+0x110>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a71      	ldr	r2, [pc, #452]	; (8007f88 <HAL_SAI_Init+0x2d0>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d104      	bne.n	8007dd2 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007dc8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007dcc:	f7ff fa7e 	bl	80072cc <HAL_RCCEx_GetPeriphCLKFreq>
 8007dd0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	461a      	mov	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	025b      	lsls	r3, r3, #9
 8007de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a67      	ldr	r2, [pc, #412]	; (8007f8c <HAL_SAI_Init+0x2d4>)
 8007dee:	fba2 2303 	umull	r2, r3, r2, r3
 8007df2:	08da      	lsrs	r2, r3, #3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007df8:	68f9      	ldr	r1, [r7, #12]
 8007dfa:	4b64      	ldr	r3, [pc, #400]	; (8007f8c <HAL_SAI_Init+0x2d4>)
 8007dfc:	fba3 2301 	umull	r2, r3, r3, r1
 8007e00:	08da      	lsrs	r2, r3, #3
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	1aca      	subs	r2, r1, r3
 8007e0c:	2a08      	cmp	r2, #8
 8007e0e:	d904      	bls.n	8007e1a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_SAI_Init+0x172>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d109      	bne.n	8007e3e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_SAI_Init+0x17e>
 8007e32:	2300      	movs	r3, #0
 8007e34:	e001      	b.n	8007e3a <HAL_SAI_Init+0x182>
 8007e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	e008      	b.n	8007e50 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d102      	bne.n	8007e4c <HAL_SAI_Init+0x194>
 8007e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e4a:	e000      	b.n	8007e4e <HAL_SAI_Init+0x196>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6819      	ldr	r1, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4b4d      	ldr	r3, [pc, #308]	; (8007f90 <HAL_SAI_Init+0x2d8>)
 8007e5c:	400b      	ands	r3, r1
 8007e5e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6819      	ldr	r1, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e74:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007e88:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e94:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	051b      	lsls	r3, r3, #20
 8007e9c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6859      	ldr	r1, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	4b38      	ldr	r3, [pc, #224]	; (8007f94 <HAL_SAI_Init+0x2dc>)
 8007eb2:	400b      	ands	r3, r1
 8007eb4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6859      	ldr	r1, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699a      	ldr	r2, [r3, #24]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6899      	ldr	r1, [r3, #8]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4b2e      	ldr	r3, [pc, #184]	; (8007f98 <HAL_SAI_Init+0x2e0>)
 8007ee0:	400b      	ands	r3, r1
 8007ee2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6899      	ldr	r1, [r3, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007ef4:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007efa:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007f00:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f06:	3b01      	subs	r3, #1
 8007f08:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007f0a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68d9      	ldr	r1, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007f22:	400b      	ands	r3, r1
 8007f24:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68d9      	ldr	r1, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f34:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3a:	041b      	lsls	r3, r3, #16
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f42:	3b01      	subs	r3, #1
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	40015804 	.word	0x40015804
 8007f78:	40015824 	.word	0x40015824
 8007f7c:	40015800 	.word	0x40015800
 8007f80:	40015c00 	.word	0x40015c00
 8007f84:	40015c04 	.word	0x40015c04
 8007f88:	40015c24 	.word	0x40015c24
 8007f8c:	cccccccd 	.word	0xcccccccd
 8007f90:	ff05c010 	.word	0xff05c010
 8007f94:	ffff1ff0 	.word	0xffff1ff0
 8007f98:	fff88000 	.word	0xfff88000

08007f9c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007f9c:	b490      	push	{r4, r7}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007fa4:	4b16      	ldr	r3, [pc, #88]	; (8008000 <SAI_Disable+0x64>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a16      	ldr	r2, [pc, #88]	; (8008004 <SAI_Disable+0x68>)
 8007faa:	fba2 2303 	umull	r2, r3, r2, r3
 8007fae:	0b1b      	lsrs	r3, r3, #12
 8007fb0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007fc4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007fc6:	4623      	mov	r3, r4
 8007fc8:	1e5c      	subs	r4, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe2:	e006      	b.n	8007ff2 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e9      	bne.n	8007fc6 <SAI_Disable+0x2a>

  return status;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc90      	pop	{r4, r7}
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000060 	.word	0x20000060
 8008004:	95cbec1b 	.word	0x95cbec1b

08008008 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e01d      	b.n	8008056 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d105      	bne.n	8008032 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f014 f95d 	bl	801c2ec <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2203      	movs	r2, #3
 8008036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f80f 	bl	800805e <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800805e:	b5b0      	push	{r4, r5, r7, lr}
 8008060:	b08e      	sub	sp, #56	; 0x38
 8008062:	af04      	add	r7, sp, #16
 8008064:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008066:	2300      	movs	r3, #0
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800807a:	2300      	movs	r3, #0
 800807c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800807e:	2376      	movs	r3, #118	; 0x76
 8008080:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681d      	ldr	r5, [r3, #0]
 8008086:	466c      	mov	r4, sp
 8008088:	f107 0318 	add.w	r3, r7, #24
 800808c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008090:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008094:	f107 030c 	add.w	r3, r7, #12
 8008098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800809a:	4628      	mov	r0, r5
 800809c:	f003 f986 	bl	800b3ac <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080ae:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f003 f9c3 	bl	800b440 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080c8:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80080ca:	2002      	movs	r0, #2
 80080cc:	f7f8 fd40 	bl	8000b50 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fff4 	bl	80090be <SD_PowerON>
 80080d6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e013      	b.n	800811e <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 ff18 	bl	8008f2c <SD_InitCard>
 80080fc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	431a      	orrs	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e000      	b.n	800811e <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3728      	adds	r7, #40	; 0x28
 8008122:	46bd      	mov	sp, r7
 8008124:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008128 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08c      	sub	sp, #48	; 0x30
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008136:	2300      	movs	r3, #0
 8008138:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e0b0      	b.n	80082b2 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b01      	cmp	r3, #1
 800815a:	f040 80a9 	bne.w	80082b0 <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	441a      	add	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816e:	429a      	cmp	r2, r3
 8008170:	d907      	bls.n	8008182 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e097      	b.n	80082b2 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2203      	movs	r2, #3
 8008186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80081a0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a6:	4a45      	ldr	r2, [pc, #276]	; (80082bc <HAL_SD_ReadBlocks_DMA+0x194>)
 80081a8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ae:	4a44      	ldr	r2, [pc, #272]	; (80082c0 <HAL_SD_ReadBlocks_DMA+0x198>)
 80081b0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	2200      	movs	r2, #0
 80081b8:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3380      	adds	r3, #128	; 0x80
 80081c4:	4619      	mov	r1, r3
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	025b      	lsls	r3, r3, #9
 80081cc:	089b      	lsrs	r3, r3, #2
 80081ce:	f7f9 fa6f 	bl	80016b0 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f042 0208 	orr.w	r2, r2, #8
 80081e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d002      	beq.n	80081f0 <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	025b      	lsls	r3, r3, #9
 80081ee:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081f0:	f04f 33ff 	mov.w	r3, #4294967295
 80081f4:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	025b      	lsls	r3, r3, #9
 80081fa:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081fc:	2390      	movs	r3, #144	; 0x90
 80081fe:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008200:	2302      	movs	r3, #2
 8008202:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008204:	2300      	movs	r3, #0
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008208:	2301      	movs	r3, #1
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f107 0214 	add.w	r2, r7, #20
 8008214:	4611      	mov	r1, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f003 f97a 	bl	800b510 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008224:	4618      	mov	r0, r3
 8008226:	f003 f99f 	bl	800b568 <SDMMC_CmdBlockLength>
 800822a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800822c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d010      	beq.n	8008254 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	431a      	orrs	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e02e      	b.n	80082b2 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d90a      	bls.n	8008270 <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2282      	movs	r2, #130	; 0x82
 800825e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	4618      	mov	r0, r3
 8008268:	f003 f9c6 	bl	800b5f8 <SDMMC_CmdReadMultiBlock>
 800826c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800826e:	e009      	b.n	8008284 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2281      	movs	r2, #129	; 0x81
 8008274:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4618      	mov	r0, r3
 800827e:	f003 f997 	bl	800b5b0 <SDMMC_CmdReadSingleBlock>
 8008282:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d010      	beq.n	80082ac <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008292:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	431a      	orrs	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e002      	b.n	80082b2 <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e000      	b.n	80082b2 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80082b0:	2302      	movs	r3, #2
  }
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3730      	adds	r7, #48	; 0x30
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	08008d31 	.word	0x08008d31
 80082c0:	08008d9f 	.word	0x08008d9f

080082c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08c      	sub	sp, #48	; 0x30
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80082d2:	2300      	movs	r3, #0
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d107      	bne.n	80082ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e0b0      	b.n	800844e <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	f040 80a9 	bne.w	800844c <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	441a      	add	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830a:	429a      	cmp	r2, r3
 800830c:	d907      	bls.n	800831e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e097      	b.n	800844e <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2203      	movs	r2, #3
 8008322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 021a 	orr.w	r2, r2, #26
 800833c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	4a45      	ldr	r2, [pc, #276]	; (8008458 <HAL_SD_WriteBlocks_DMA+0x194>)
 8008344:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	4a44      	ldr	r2, [pc, #272]	; (800845c <HAL_SD_WriteBlocks_DMA+0x198>)
 800834c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	2200      	movs	r2, #0
 8008354:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835a:	2b01      	cmp	r3, #1
 800835c:	d002      	beq.n	8008364 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	025b      	lsls	r3, r3, #9
 8008362:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800836c:	4618      	mov	r0, r3
 800836e:	f003 f8fb 	bl	800b568 <SDMMC_CmdBlockLength>
 8008372:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d010      	beq.n	800839c <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008382:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	431a      	orrs	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e058      	b.n	800844e <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d90a      	bls.n	80083b8 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	22a0      	movs	r2, #160	; 0xa0
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f003 f96a 	bl	800b688 <SDMMC_CmdWriteMultiBlock>
 80083b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80083b6:	e009      	b.n	80083cc <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2290      	movs	r2, #144	; 0x90
 80083bc:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f003 f93b 	bl	800b640 <SDMMC_CmdWriteSingleBlock>
 80083ca:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d010      	beq.n	80083f4 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	431a      	orrs	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e02c      	b.n	800844e <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0208 	orr.w	r2, r2, #8
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008408:	68b9      	ldr	r1, [r7, #8]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3380      	adds	r3, #128	; 0x80
 8008410:	461a      	mov	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	025b      	lsls	r3, r3, #9
 8008416:	089b      	lsrs	r3, r3, #2
 8008418:	f7f9 f94a 	bl	80016b0 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	025b      	lsls	r3, r3, #9
 8008426:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008428:	2390      	movs	r3, #144	; 0x90
 800842a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800842c:	2300      	movs	r3, #0
 800842e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008430:	2300      	movs	r3, #0
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8008434:	2301      	movs	r3, #1
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f107 0214 	add.w	r2, r7, #20
 8008440:	4611      	mov	r1, r2
 8008442:	4618      	mov	r0, r3
 8008444:	f003 f864 	bl	800b510 <SDMMC_ConfigData>
    
    return HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	e000      	b.n	800844e <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800844c:	2302      	movs	r3, #2
  }
}
 800844e:	4618      	mov	r0, r3
 8008450:	3730      	adds	r7, #48	; 0x30
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	08008d07 	.word	0x08008d07
 800845c:	08008d9f 	.word	0x08008d9f

08008460 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDMMC interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 808b 	beq.w	8008592 <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
    
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008494:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d03a      	beq.n	8008518 <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d105      	bne.n	80084ba <HAL_SD_IRQHandler+0x5a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d011      	beq.n	80084de <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f003 f906 	bl	800b6d0 <SDMMC_CmdStopTransfer>
 80084c4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d008      	beq.n	80084de <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f915 	bl	8008708 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d105      	bne.n	8008508 <HAL_SD_IRQHandler+0xa8>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <HAL_SD_IRQHandler+0xb0>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f012 fb89 	bl	801ac20 <HAL_SD_RxCpltCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }
}
 800850e:	e0f3      	b.n	80086f8 <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f012 fb7b 	bl	801ac0c <HAL_SD_TxCpltCallback>
}
 8008516:	e0ef      	b.n	80086f8 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80e9 	beq.w	80086f8 <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d011      	beq.n	8008556 <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f003 f8ca 	bl	800b6d0 <SDMMC_CmdStopTransfer>
 800853c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f8d9 	bl	8008708 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 80ca 	bne.w	80086f8 <HAL_SD_IRQHandler+0x298>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	f003 0302 	and.w	r3, r3, #2
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 80c3 	bne.w	80086f8 <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0208 	bic.w	r2, r2, #8
 8008580:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f012 fb3e 	bl	801ac0c <HAL_SD_TxCpltCallback>
}
 8008590:	e0b2      	b.n	80086f8 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d008      	beq.n	80085b2 <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085a8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 ffe4 	bl	8009578 <SD_Write_IT>
}
 80085b0:	e0a2      	b.n	80086f8 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d008      	beq.n	80085d2 <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 ffac 	bl	8009528 <SD_Read_IT>
}
 80085d0:	e092      	b.n	80086f8 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 808b 	beq.w	80086f8 <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	f043 0202 	orr.w	r2, r3, #2
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	f003 0308 	and.w	r3, r3, #8
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	f043 0208 	orr.w	r2, r3, #8
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008628:	f043 0220 	orr.w	r2, r3, #32
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	f003 0310 	and.w	r3, r3, #16
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	f043 0210 	orr.w	r2, r3, #16
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008652:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008662:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800866c:	2b00      	cmp	r3, #0
 800866e:	d036      	beq.n	80086de <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d011      	beq.n	800869c <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867c:	4a20      	ldr	r2, [pc, #128]	; (8008700 <HAL_SD_IRQHandler+0x2a0>)
 800867e:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008684:	4618      	mov	r0, r3
 8008686:	f7f9 f873 	bl	8001770 <HAL_DMA_Abort_IT>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d033      	beq.n	80086f8 <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fbcd 	bl	8008e34 <SD_DMATxAbort>
}
 800869a:	e02d      	b.n	80086f8 <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d011      	beq.n	80086c8 <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a8:	4a16      	ldr	r2, [pc, #88]	; (8008704 <HAL_SD_IRQHandler+0x2a4>)
 80086aa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7f9 f85d 	bl	8001770 <HAL_DMA_Abort_IT>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01d      	beq.n	80086f8 <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fbf5 	bl	8008eb0 <SD_DMARxAbort>
}
 80086c6:	e017      	b.n	80086f8 <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f012 fa8e 	bl	801abf8 <HAL_SD_AbortCallback>
}
 80086dc:	e00c      	b.n	80086f8 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d006      	beq.n	80086f8 <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f808 	bl	8008708 <HAL_SD_ErrorCallback>
}
 80086f8:	bf00      	nop
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	08008e35 	.word	0x08008e35
 8008704:	08008eb1 	.word	0x08008eb1

08008708 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872e:	0e1b      	lsrs	r3, r3, #24
 8008730:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	099b      	lsrs	r3, r3, #6
 8008736:	b2db      	uxtb	r3, r3
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	b2da      	uxtb	r2, r3
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	089b      	lsrs	r3, r3, #2
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	b2da      	uxtb	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	b2da      	uxtb	r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008764:	0c1b      	lsrs	r3, r3, #16
 8008766:	b2db      	uxtb	r3, r3
 8008768:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	b2da      	uxtb	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	b2db      	uxtb	r3, r3
 800877a:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	b2da      	uxtb	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008788:	b2db      	uxtb	r3, r3
 800878a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	b2da      	uxtb	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008798:	0e1b      	lsrs	r3, r3, #24
 800879a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ac:	0c1b      	lsrs	r3, r3, #16
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	88db      	ldrh	r3, [r3, #6]
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	091b      	lsrs	r3, r3, #4
 80087bc:	b29b      	uxth	r3, r3
 80087be:	f003 030f 	and.w	r3, r3, #15
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	4313      	orrs	r3, r2
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087de:	0a1b      	lsrs	r3, r3, #8
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	09db      	lsrs	r3, r3, #7
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	099b      	lsrs	r3, r3, #6
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	b2db      	uxtb	r3, r3
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	b2da      	uxtb	r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	091b      	lsrs	r3, r3, #4
 8008818:	b2db      	uxtb	r3, r3
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	b2da      	uxtb	r2, r3
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2200      	movs	r2, #0
 8008828:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882e:	2b00      	cmp	r3, #0
 8008830:	f040 8086 	bne.w	8008940 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	029b      	lsls	r3, r3, #10
 8008838:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008844:	b2db      	uxtb	r3, r3
 8008846:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	431a      	orrs	r2, r3
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800885a:	0e1b      	lsrs	r3, r3, #24
 800885c:	b2db      	uxtb	r3, r3
 800885e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	099b      	lsrs	r3, r3, #6
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	431a      	orrs	r2, r3
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	08db      	lsrs	r3, r3, #3
 8008876:	b2db      	uxtb	r3, r3
 8008878:	f003 0307 	and.w	r3, r3, #7
 800887c:	b2da      	uxtb	r2, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	b2da      	uxtb	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008894:	0c1b      	lsrs	r3, r3, #16
 8008896:	b2db      	uxtb	r3, r3
 8008898:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	095b      	lsrs	r3, r3, #5
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f003 0307 	and.w	r3, r3, #7
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	089b      	lsrs	r3, r3, #2
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f003 0307 	and.w	r3, r3, #7
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 0306 	and.w	r3, r3, #6
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d0:	0a1b      	lsrs	r3, r3, #8
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	7e1b      	ldrb	r3, [r3, #24]
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	09db      	lsrs	r3, r3, #7
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	7e1b      	ldrb	r3, [r3, #24]
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	3302      	adds	r3, #2
 8008902:	2201      	movs	r2, #1
 8008904:	409a      	lsls	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890a:	fb02 f203 	mul.w	r2, r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	7a1b      	ldrb	r3, [r3, #8]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	2301      	movs	r3, #1
 800891c:	4093      	lsls	r3, r2
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800892c:	0a52      	lsrs	r2, r2, #9
 800892e:	fb02 f203 	mul.w	r2, r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800893c:	661a      	str	r2, [r3, #96]	; 0x60
 800893e:	e04d      	b.n	80089dc <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008944:	2b01      	cmp	r3, #1
 8008946:	d138      	bne.n	80089ba <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800894c:	b2db      	uxtb	r3, r3
 800894e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	041b      	lsls	r3, r3, #16
 8008954:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008960:	0e1b      	lsrs	r3, r3, #24
 8008962:	b2db      	uxtb	r3, r3
 8008964:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	431a      	orrs	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008978:	0c1b      	lsrs	r3, r3, #16
 800897a:	b2db      	uxtb	r3, r3
 800897c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	691a      	ldr	r2, [r3, #16]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	431a      	orrs	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800898e:	0a1b      	lsrs	r3, r3, #8
 8008990:	b2db      	uxtb	r3, r3
 8008992:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	3301      	adds	r3, #1
 800899a:	029a      	lsls	r2, r3, #10
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	655a      	str	r2, [r3, #84]	; 0x54
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089ae:	659a      	str	r2, [r3, #88]	; 0x58
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	661a      	str	r2, [r3, #96]	; 0x60
 80089b8:	e010      	b.n	80089dc <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80089c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e0c1      	b.n	8008b60 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	099b      	lsrs	r3, r3, #6
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	7e9b      	ldrb	r3, [r3, #26]
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	09db      	lsrs	r3, r3, #7
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	0e1b      	lsrs	r3, r3, #24
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	09db      	lsrs	r3, r3, #7
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	089b      	lsrs	r3, r3, #2
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f003 030c 	and.w	r3, r3, #12
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	7fdb      	ldrb	r3, [r3, #31]
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	099b      	lsrs	r3, r3, #6
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 0303 	and.w	r3, r3, #3
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	4313      	orrs	r3, r2
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	095b      	lsrs	r3, r3, #5
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008acc:	0a1b      	lsrs	r3, r3, #8
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	09db      	lsrs	r3, r3, #7
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	099b      	lsrs	r3, r3, #6
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	095b      	lsrs	r3, r3, #5
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	091b      	lsrs	r3, r3, #4
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	089b      	lsrs	r3, r3, #2
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 0303 	and.w	r3, r3, #3
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008bc4:	b5b0      	push	{r4, r5, r7, lr}
 8008bc6:	b08e      	sub	sp, #56	; 0x38
 8008bc8:	af04      	add	r7, sp, #16
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2203      	movs	r2, #3
 8008bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d02e      	beq.n	8008c40 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be8:	d106      	bne.n	8008bf8 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8008bf6:	e029      	b.n	8008c4c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bfe:	d10a      	bne.n	8008c16 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fb2e 	bl	8009262 <SD_WideBus_Enable>
 8008c06:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	639a      	str	r2, [r3, #56]	; 0x38
 8008c14:	e01a      	b.n	8008c4c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fb6d 	bl	80092fc <SD_WideBus_Disable>
 8008c22:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8008c30:	e00c      	b.n	8008c4c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8008c3e:	e005      	b.n	8008c4c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00a      	beq.n	8008c6a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e024      	b.n	8008cb4 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681d      	ldr	r5, [r3, #0]
 8008c90:	466c      	mov	r4, sp
 8008c92:	f107 0318 	add.w	r3, r7, #24
 8008c96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c9e:	f107 030c 	add.w	r3, r7, #12
 8008ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f002 fb81 	bl	800b3ac <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3728      	adds	r7, #40	; 0x28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bdb0      	pop	{r4, r5, r7, pc}

08008cbc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008cc4:	2304      	movs	r3, #4
 8008cc6:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008cd0:	f107 030c 	add.w	r3, r7, #12
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa99 	bl	800920e <SD_SendStatus>
 8008cdc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d005      	beq.n	8008cf0 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	0a5b      	lsrs	r3, r3, #9
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d12:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d22:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008d24:	bf00      	nop
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d46:	2b82      	cmp	r3, #130	; 0x82
 8008d48:	d111      	bne.n	8008d6e <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f002 fcbe 	bl	800b6d0 <SDMMC_CmdStopTransfer>
 8008d54:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d008      	beq.n	8008d6e <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7ff fccd 	bl	8008708 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0208 	bic.w	r2, r2, #8
 8008d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f011 ff45 	bl	801ac20 <HAL_SD_RxCpltCallback>
#endif
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7f8 fe8b 	bl	8001ac8 <HAL_DMA_GetError>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d039      	beq.n	8008e2c <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d004      	beq.n	8008dcc <SD_DMAError+0x2e>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d12c      	bne.n	8008e26 <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008de4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f7ff ff62 	bl	8008cbc <HAL_SD_GetCardState>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	2b06      	cmp	r3, #6
 8008e00:	d002      	beq.n	8008e08 <SD_DMAError+0x6a>
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	2b05      	cmp	r3, #5
 8008e06:	d10a      	bne.n	8008e1e <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f002 fc5f 	bl	800b6d0 <SDMMC_CmdStopTransfer>
 8008e12:	4602      	mov	r2, r0
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7ff fc6e 	bl	8008708 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008e2c:	bf00      	nop
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d127      	bne.n	8008ea8 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff ff2f 	bl	8008cbc <HAL_SD_GetCardState>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	2b06      	cmp	r3, #6
 8008e74:	d002      	beq.n	8008e7c <SD_DMATxAbort+0x48>
 8008e76:	7afb      	ldrb	r3, [r7, #11]
 8008e78:	2b05      	cmp	r3, #5
 8008e7a:	d115      	bne.n	8008ea8 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f002 fc25 	bl	800b6d0 <SDMMC_CmdStopTransfer>
 8008e86:	4602      	mov	r2, r0
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f011 feac 	bl	801abf8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8008ea0:	e002      	b.n	8008ea8 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f7ff fc30 	bl	8008708 <HAL_SD_ErrorCallback>
}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d127      	bne.n	8008f24 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fef1 	bl	8008cbc <HAL_SD_GetCardState>
 8008eda:	4603      	mov	r3, r0
 8008edc:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008eec:	7afb      	ldrb	r3, [r7, #11]
 8008eee:	2b06      	cmp	r3, #6
 8008ef0:	d002      	beq.n	8008ef8 <SD_DMARxAbort+0x48>
 8008ef2:	7afb      	ldrb	r3, [r7, #11]
 8008ef4:	2b05      	cmp	r3, #5
 8008ef6:	d115      	bne.n	8008f24 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f002 fbe7 	bl	800b6d0 <SDMMC_CmdStopTransfer>
 8008f02:	4602      	mov	r2, r0
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f011 fe6e 	bl	801abf8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8008f1c:	e002      	b.n	8008f24 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f7ff fbf2 	bl	8008708 <HAL_SD_ErrorCallback>
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f2c:	b5b0      	push	{r4, r5, r7, lr}
 8008f2e:	b094      	sub	sp, #80	; 0x50
 8008f30:	af04      	add	r7, sp, #16
 8008f32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008f34:	2300      	movs	r3, #0
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f002 fa8b 	bl	800b45c <SDMMC_GetPowerState>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f50:	e0b1      	b.n	80090b6 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d02f      	beq.n	8008fba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f002 fcd1 	bl	800b906 <SDMMC_CmdSendCID>
 8008f64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <SD_InitCard+0x44>
    {
      return errorstate;
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6e:	e0a2      	b.n	80090b6 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f002 fab5 	bl	800b4e6 <SDMMC_GetResponse>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2104      	movs	r1, #4
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f002 faac 	bl	800b4e6 <SDMMC_GetResponse>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2108      	movs	r1, #8
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f002 faa3 	bl	800b4e6 <SDMMC_GetResponse>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	210c      	movs	r1, #12
 8008fac:	4618      	mov	r0, r3
 8008fae:	f002 fa9a 	bl	800b4e6 <SDMMC_GetResponse>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d00d      	beq.n	8008fde <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f107 020e 	add.w	r2, r7, #14
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f002 fcdb 	bl	800b988 <SDMMC_CmdSetRelAdd>
 8008fd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <SD_InitCard+0xb2>
    {
      return errorstate;
 8008fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fdc:	e06b      	b.n	80090b6 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d036      	beq.n	8009054 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008fe6:	89fb      	ldrh	r3, [r7, #14]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff6:	041b      	lsls	r3, r3, #16
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f002 fca3 	bl	800b946 <SDMMC_CmdSendCSD>
 8009000:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <SD_InitCard+0xe0>
    {
      return errorstate;
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900a:	e054      	b.n	80090b6 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2100      	movs	r1, #0
 8009012:	4618      	mov	r0, r3
 8009014:	f002 fa67 	bl	800b4e6 <SDMMC_GetResponse>
 8009018:	4602      	mov	r2, r0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2104      	movs	r1, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f002 fa5e 	bl	800b4e6 <SDMMC_GetResponse>
 800902a:	4602      	mov	r2, r0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2108      	movs	r1, #8
 8009036:	4618      	mov	r0, r3
 8009038:	f002 fa55 	bl	800b4e6 <SDMMC_GetResponse>
 800903c:	4602      	mov	r2, r0
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	210c      	movs	r1, #12
 8009048:	4618      	mov	r0, r3
 800904a:	f002 fa4c 	bl	800b4e6 <SDMMC_GetResponse>
 800904e:	4602      	mov	r2, r0
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2104      	movs	r1, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f002 fa43 	bl	800b4e6 <SDMMC_GetResponse>
 8009060:	4603      	mov	r3, r0
 8009062:	0d1a      	lsrs	r2, r3, #20
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8009068:	f107 0310 	add.w	r3, r7, #16
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fb54 	bl	800871c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6819      	ldr	r1, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907c:	041b      	lsls	r3, r3, #16
 800907e:	f04f 0400 	mov.w	r4, #0
 8009082:	461a      	mov	r2, r3
 8009084:	4623      	mov	r3, r4
 8009086:	4608      	mov	r0, r1
 8009088:	f002 fb46 	bl	800b718 <SDMMC_CmdSelDesel>
 800908c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800908e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <SD_InitCard+0x16c>
  {
    return errorstate;
 8009094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009096:	e00e      	b.n	80090b6 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681d      	ldr	r5, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	466c      	mov	r4, sp
 80090a0:	f103 0210 	add.w	r2, r3, #16
 80090a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80090a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090aa:	3304      	adds	r3, #4
 80090ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090ae:	4628      	mov	r0, r5
 80090b0:	f002 f97c 	bl	800b3ac <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3740      	adds	r7, #64	; 0x40
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bdb0      	pop	{r4, r5, r7, pc}

080090be <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b086      	sub	sp, #24
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]
 80090ce:	2300      	movs	r3, #0
 80090d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80090d2:	2300      	movs	r3, #0
 80090d4:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f002 fb41 	bl	800b762 <SDMMC_CmdGoIdleState>
 80090e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <SD_PowerON+0x2e>
  {
    return errorstate;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	e08c      	b.n	8009206 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 fb56 	bl	800b7a2 <SDMMC_CmdOperCond>
 80090f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d03d      	beq.n	800917a <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8009104:	e032      	b.n	800916c <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	60ba      	str	r2, [r7, #8]
 800910c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009110:	4293      	cmp	r3, r2
 8009112:	d102      	bne.n	800911a <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009118:	e075      	b.n	8009206 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f002 fb5f 	bl	800b7e4 <SDMMC_CmdAppCommand>
 8009126:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800912e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009132:	e068      	b.n	8009206 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2100      	movs	r1, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f002 fb76 	bl	800b82c <SDMMC_CmdAppOperCommand>
 8009140:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009148:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800914c:	e05b      	b.n	8009206 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f002 f9c6 	bl	800b4e6 <SDMMC_GetResponse>
 800915a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	0fdb      	lsrs	r3, r3, #31
 8009160:	2b01      	cmp	r3, #1
 8009162:	bf0c      	ite	eq
 8009164:	2301      	moveq	r3, #1
 8009166:	2300      	movne	r3, #0
 8009168:	b2db      	uxtb	r3, r3
 800916a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0c9      	beq.n	8009106 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	645a      	str	r2, [r3, #68]	; 0x44
 8009178:	e044      	b.n	8009204 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8009180:	e031      	b.n	80091e6 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	60ba      	str	r2, [r7, #8]
 8009188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800918c:	4293      	cmp	r3, r2
 800918e:	d102      	bne.n	8009196 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009194:	e037      	b.n	8009206 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2100      	movs	r1, #0
 800919c:	4618      	mov	r0, r3
 800919e:	f002 fb21 	bl	800b7e4 <SDMMC_CmdAppCommand>
 80091a2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <SD_PowerON+0xf0>
      {
        return errorstate;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	e02b      	b.n	8009206 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80091b6:	4618      	mov	r0, r3
 80091b8:	f002 fb38 	bl	800b82c <SDMMC_CmdAppOperCommand>
 80091bc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <SD_PowerON+0x10a>
      {
        return errorstate;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	e01e      	b.n	8009206 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f002 f989 	bl	800b4e6 <SDMMC_GetResponse>
 80091d4:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	0fdb      	lsrs	r3, r3, #31
 80091da:	2b01      	cmp	r3, #1
 80091dc:	bf0c      	ite	eq
 80091de:	2301      	moveq	r3, #1
 80091e0:	2300      	movne	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0ca      	beq.n	8009182 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	645a      	str	r2, [r3, #68]	; 0x44
 80091fc:	e002      	b.n	8009204 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d102      	bne.n	8009228 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8009222:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009226:	e018      	b.n	800925a <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009230:	041b      	lsls	r3, r3, #16
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f002 fbca 	bl	800b9ce <SDMMC_CmdSendStatus>
 800923a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <SD_SendStatus+0x38>
  {
    return errorstate;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	e009      	b.n	800925a <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f002 f94a 	bl	800b4e6 <SDMMC_GetResponse>
 8009252:	4602      	mov	r2, r0
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b086      	sub	sp, #24
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	2300      	movs	r3, #0
 8009270:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2100      	movs	r1, #0
 800927c:	4618      	mov	r0, r3
 800927e:	f002 f932 	bl	800b4e6 <SDMMC_GetResponse>
 8009282:	4603      	mov	r3, r0
 8009284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800928c:	d102      	bne.n	8009294 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800928e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009292:	e02f      	b.n	80092f4 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009294:	f107 030c 	add.w	r3, r7, #12
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f87b 	bl	8009396 <SD_FindSCR>
 80092a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	e023      	b.n	80092f4 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01c      	beq.n	80092f0 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092be:	041b      	lsls	r3, r3, #16
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f002 fa8e 	bl	800b7e4 <SDMMC_CmdAppCommand>
 80092c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	e00f      	b.n	80092f4 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2102      	movs	r1, #2
 80092da:	4618      	mov	r0, r3
 80092dc:	f002 facc 	bl	800b878 <SDMMC_CmdBusWidth>
 80092e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	e003      	b.n	80092f4 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	e001      	b.n	80092f4 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	2300      	movs	r3, #0
 800930a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2100      	movs	r1, #0
 8009316:	4618      	mov	r0, r3
 8009318:	f002 f8e5 	bl	800b4e6 <SDMMC_GetResponse>
 800931c:	4603      	mov	r3, r0
 800931e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009322:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009326:	d102      	bne.n	800932e <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800932c:	e02f      	b.n	800938e <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800932e:	f107 030c 	add.w	r3, r7, #12
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f82e 	bl	8009396 <SD_FindSCR>
 800933a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	e023      	b.n	800938e <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d01c      	beq.n	800938a <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009358:	041b      	lsls	r3, r3, #16
 800935a:	4619      	mov	r1, r3
 800935c:	4610      	mov	r0, r2
 800935e:	f002 fa41 	bl	800b7e4 <SDMMC_CmdAppCommand>
 8009362:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	e00f      	b.n	800938e <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f002 fa7f 	bl	800b878 <SDMMC_CmdBusWidth>
 800937a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	e003      	b.n	800938e <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8009386:	2300      	movs	r3, #0
 8009388:	e001      	b.n	800938e <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800938a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009396:	b590      	push	{r4, r7, lr}
 8009398:	b08f      	sub	sp, #60	; 0x3c
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80093a4:	f7f7 fbc8 	bl	8000b38 <HAL_GetTick>
 80093a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	2300      	movs	r3, #0
 80093b4:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2108      	movs	r1, #8
 80093bc:	4618      	mov	r0, r3
 80093be:	f002 f8d3 	bl	800b568 <SDMMC_CmdBlockLength>
 80093c2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <SD_FindSCR+0x38>
  {
    return errorstate;
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	e0a8      	b.n	8009520 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f002 fa02 	bl	800b7e4 <SDMMC_CmdAppCommand>
 80093e0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_FindSCR+0x56>
  {
    return errorstate;
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	e099      	b.n	8009520 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093ec:	f04f 33ff 	mov.w	r3, #4294967295
 80093f0:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 80093f2:	2308      	movs	r3, #8
 80093f4:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80093f6:	2330      	movs	r3, #48	; 0x30
 80093f8:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093fa:	2302      	movs	r3, #2
 80093fc:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093fe:	2300      	movs	r3, #0
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009402:	2301      	movs	r3, #1
 8009404:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f107 0214 	add.w	r2, r7, #20
 800940e:	4611      	mov	r1, r2
 8009410:	4618      	mov	r0, r3
 8009412:	f002 f87d 	bl	800b510 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	f002 fa50 	bl	800b8c0 <SDMMC_CmdSendSCR>
 8009420:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	2b00      	cmp	r3, #0
 8009426:	d022      	beq.n	800946e <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	e079      	b.n	8009520 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00e      	beq.n	8009458 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6819      	ldr	r1, [r3, #0]
 800943e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	f107 020c 	add.w	r2, r7, #12
 8009446:	18d4      	adds	r4, r2, r3
 8009448:	4608      	mov	r0, r1
 800944a:	f001 ffdb 	bl	800b404 <SDMMC_ReadFIFO>
 800944e:	4603      	mov	r3, r0
 8009450:	6023      	str	r3, [r4, #0]
      index++;
 8009452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009454:	3301      	adds	r3, #1
 8009456:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009458:	f7f7 fb6e 	bl	8000b38 <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009466:	d102      	bne.n	800946e <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800946c:	e058      	b.n	8009520 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009474:	f240 432a 	movw	r3, #1066	; 0x42a
 8009478:	4013      	ands	r3, r2
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0d6      	beq.n	800942c <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009484:	f003 0308 	and.w	r3, r3, #8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d005      	beq.n	8009498 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2208      	movs	r2, #8
 8009492:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009494:	2308      	movs	r3, #8
 8009496:	e043      	b.n	8009520 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d005      	beq.n	80094b2 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2202      	movs	r2, #2
 80094ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094ae:	2302      	movs	r3, #2
 80094b0:	e036      	b.n	8009520 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2220      	movs	r2, #32
 80094c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80094c8:	2320      	movs	r3, #32
 80094ca:	e029      	b.n	8009520 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	061a      	lsls	r2, r3, #24
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094e2:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	0a1b      	lsrs	r3, r3, #8
 80094e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094ec:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80094f8:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094fa:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	061a      	lsls	r2, r3, #24
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	021b      	lsls	r3, r3, #8
 8009504:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009508:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	0a1b      	lsrs	r3, r3, #8
 800950e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009512:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	0e1b      	lsrs	r3, r3, #24
 8009518:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	373c      	adds	r7, #60	; 0x3c
 8009524:	46bd      	mov	sp, r7
 8009526:	bd90      	pop	{r4, r7, pc}

08009528 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDMMC Rx FIFO */
  for(count = 0; count < 8; count++)
 800953a:	2300      	movs	r3, #0
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	e00d      	b.n	800955c <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6819      	ldr	r1, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	18d4      	adds	r4, r2, r3
 800954c:	4608      	mov	r0, r1
 800954e:	f001 ff59 	bl	800b404 <SDMMC_ReadFIFO>
 8009552:	4603      	mov	r3, r0
 8009554:	6023      	str	r3, [r4, #0]
  for(count = 0; count < 8; count++)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3301      	adds	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2b07      	cmp	r3, #7
 8009560:	d9ee      	bls.n	8009540 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	f103 0220 	add.w	r2, r3, #32
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	bd90      	pop	{r4, r7, pc}

08009578 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e00b      	b.n	80095a8 <SD_Write_IT+0x30>
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	4413      	add	r3, r2
 800959c:	4619      	mov	r1, r3
 800959e:	f001 ff3e 	bl	800b41e <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b07      	cmp	r3, #7
 80095ac:	d9f0      	bls.n	8009590 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	f103 0220 	add.w	r2, r3, #32
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e025      	b.n	8009624 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f010 fdd3 	bl	801a198 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3304      	adds	r3, #4
 8009602:	4619      	mov	r1, r3
 8009604:	4610      	mov	r0, r2
 8009606:	f001 fdab 	bl	800b160 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	461a      	mov	r2, r3
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	f001 fe15 	bl	800b244 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b02      	cmp	r3, #2
 8009642:	d101      	bne.n	8009648 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009644:	2302      	movs	r3, #2
 8009646:	e018      	b.n	800967a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	4618      	mov	r0, r3
 800965a:	f001 fe73 	bl	800b344 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d104      	bne.n	8009670 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2205      	movs	r2, #5
 800966a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800966e:	e003      	b.n	8009678 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b02      	cmp	r3, #2
 8009696:	d101      	bne.n	800969c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009698:	2302      	movs	r3, #2
 800969a:	e00e      	b.n	80096ba <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 fe6b 	bl	800b386 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e04c      	b.n	8009770 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f012 fee8 	bl	801c4c0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0203 	bic.w	r2, r2, #3
 8009706:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	4b19      	ldr	r3, [pc, #100]	; (8009778 <HAL_SPDIFRX_Init+0xb4>)
 8009714:	4013      	ands	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009720:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009726:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800972c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009732:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009738:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800973e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009744:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800974a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009750:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	fff88407 	.word	0xfff88407

0800977c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e084      	b.n	8009898 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d106      	bne.n	80097ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f012 fecb 	bl	801c544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2202      	movs	r2, #2
 80097b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097ce:	d902      	bls.n	80097d6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e002      	b.n	80097dc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097e4:	d007      	beq.n	80097f6 <HAL_SPI_Init+0x7a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097ee:	d002      	beq.n	80097f6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009806:	d903      	bls.n	8009810 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	631a      	str	r2, [r3, #48]	; 0x30
 800980e:	e002      	b.n	8009816 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	431a      	orrs	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	ea42 0103 	orr.w	r1, r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	0c1b      	lsrs	r3, r3, #16
 8009856:	f003 0204 	and.w	r2, r3, #4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	ea42 0103 	orr.w	r1, r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	430a      	orrs	r2, r1
 8009876:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	69da      	ldr	r2, [r3, #28]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009886:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e01d      	b.n	80098ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d106      	bne.n	80098cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f012 fe9e 	bl	801c608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3304      	adds	r3, #4
 80098dc:	4619      	mov	r1, r3
 80098de:	4610      	mov	r0, r2
 80098e0:	f000 fba2 	bl	800a028 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	4b0e      	ldr	r3, [pc, #56]	; (8009948 <HAL_TIM_Base_Start+0x50>)
 8009910:	4013      	ands	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b06      	cmp	r3, #6
 8009918:	d00b      	beq.n	8009932 <HAL_TIM_Base_Start+0x3a>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009920:	d007      	beq.n	8009932 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f042 0201 	orr.w	r2, r2, #1
 8009930:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	00010007 	.word	0x00010007

0800994c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	4b0c      	ldr	r3, [pc, #48]	; (800999c <HAL_TIM_Base_Start_IT+0x50>)
 800996c:	4013      	ands	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b06      	cmp	r3, #6
 8009974:	d00b      	beq.n	800998e <HAL_TIM_Base_Start_IT+0x42>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800997c:	d007      	beq.n	800998e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0201 	orr.w	r2, r2, #1
 800998c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	00010007 	.word	0x00010007

080099a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e01d      	b.n	80099ee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f012 fe7a 	bl	801c6c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	4610      	mov	r0, r2
 80099e0:	f000 fb22 	bl	800a028 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3708      	adds	r7, #8
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b082      	sub	sp, #8
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d122      	bne.n	8009a52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d11b      	bne.n	8009a52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f06f 0202 	mvn.w	r2, #2
 8009a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fad7 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8009a3e:	e005      	b.n	8009a4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fac9 	bl	8009fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fada 	bl	800a000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d122      	bne.n	8009aa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d11b      	bne.n	8009aa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f06f 0204 	mvn.w	r2, #4
 8009a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 faad 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8009a92:	e005      	b.n	8009aa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fa9f 	bl	8009fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fab0 	bl	800a000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	f003 0308 	and.w	r3, r3, #8
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d122      	bne.n	8009afa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f003 0308 	and.w	r3, r3, #8
 8009abe:	2b08      	cmp	r3, #8
 8009ac0:	d11b      	bne.n	8009afa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f06f 0208 	mvn.w	r2, #8
 8009aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2204      	movs	r2, #4
 8009ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	f003 0303 	and.w	r3, r3, #3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d003      	beq.n	8009ae8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fa83 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8009ae6:	e005      	b.n	8009af4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fa75 	bl	8009fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa86 	bl	800a000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f003 0310 	and.w	r3, r3, #16
 8009b04:	2b10      	cmp	r3, #16
 8009b06:	d122      	bne.n	8009b4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	f003 0310 	and.w	r3, r3, #16
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d11b      	bne.n	8009b4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f06f 0210 	mvn.w	r2, #16
 8009b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2208      	movs	r2, #8
 8009b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fa59 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8009b3a:	e005      	b.n	8009b48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fa4b 	bl	8009fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa5c 	bl	800a000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d10e      	bne.n	8009b7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d107      	bne.n	8009b7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f06f 0201 	mvn.w	r2, #1
 8009b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f011 fe3d 	bl	801b7f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b84:	2b80      	cmp	r3, #128	; 0x80
 8009b86:	d10e      	bne.n	8009ba6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b92:	2b80      	cmp	r3, #128	; 0x80
 8009b94:	d107      	bne.n	8009ba6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 febd 	bl	800a920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bb4:	d10e      	bne.n	8009bd4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc0:	2b80      	cmp	r3, #128	; 0x80
 8009bc2:	d107      	bne.n	8009bd4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 feb0 	bl	800a934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bde:	2b40      	cmp	r3, #64	; 0x40
 8009be0:	d10e      	bne.n	8009c00 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bec:	2b40      	cmp	r3, #64	; 0x40
 8009bee:	d107      	bne.n	8009c00 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa0a 	bl	800a014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	f003 0320 	and.w	r3, r3, #32
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	d10e      	bne.n	8009c2c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	d107      	bne.n	8009c2c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f06f 0220 	mvn.w	r2, #32
 8009c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fe70 	bl	800a90c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e105      	b.n	8009e5a <HAL_TIM_PWM_ConfigChannel+0x226>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b14      	cmp	r3, #20
 8009c62:	f200 80f0 	bhi.w	8009e46 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009cc1 	.word	0x08009cc1
 8009c70:	08009e47 	.word	0x08009e47
 8009c74:	08009e47 	.word	0x08009e47
 8009c78:	08009e47 	.word	0x08009e47
 8009c7c:	08009d01 	.word	0x08009d01
 8009c80:	08009e47 	.word	0x08009e47
 8009c84:	08009e47 	.word	0x08009e47
 8009c88:	08009e47 	.word	0x08009e47
 8009c8c:	08009d43 	.word	0x08009d43
 8009c90:	08009e47 	.word	0x08009e47
 8009c94:	08009e47 	.word	0x08009e47
 8009c98:	08009e47 	.word	0x08009e47
 8009c9c:	08009d83 	.word	0x08009d83
 8009ca0:	08009e47 	.word	0x08009e47
 8009ca4:	08009e47 	.word	0x08009e47
 8009ca8:	08009e47 	.word	0x08009e47
 8009cac:	08009dc5 	.word	0x08009dc5
 8009cb0:	08009e47 	.word	0x08009e47
 8009cb4:	08009e47 	.word	0x08009e47
 8009cb8:	08009e47 	.word	0x08009e47
 8009cbc:	08009e05 	.word	0x08009e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 fa4e 	bl	800a168 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	699a      	ldr	r2, [r3, #24]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f042 0208 	orr.w	r2, r2, #8
 8009cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 0204 	bic.w	r2, r2, #4
 8009cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6999      	ldr	r1, [r3, #24]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	691a      	ldr	r2, [r3, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	619a      	str	r2, [r3, #24]
      break;
 8009cfe:	e0a3      	b.n	8009e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68b9      	ldr	r1, [r7, #8]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 faa0 	bl	800a24c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	699a      	ldr	r2, [r3, #24]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699a      	ldr	r2, [r3, #24]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6999      	ldr	r1, [r3, #24]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	021a      	lsls	r2, r3, #8
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	619a      	str	r2, [r3, #24]
      break;
 8009d40:	e082      	b.n	8009e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68b9      	ldr	r1, [r7, #8]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 faf7 	bl	800a33c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69da      	ldr	r2, [r3, #28]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0208 	orr.w	r2, r2, #8
 8009d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69da      	ldr	r2, [r3, #28]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0204 	bic.w	r2, r2, #4
 8009d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69d9      	ldr	r1, [r3, #28]
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	691a      	ldr	r2, [r3, #16]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	61da      	str	r2, [r3, #28]
      break;
 8009d80:	e062      	b.n	8009e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68b9      	ldr	r1, [r7, #8]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 fb4d 	bl	800a428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	69da      	ldr	r2, [r3, #28]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69da      	ldr	r2, [r3, #28]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	69d9      	ldr	r1, [r3, #28]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	021a      	lsls	r2, r3, #8
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	61da      	str	r2, [r3, #28]
      break;
 8009dc2:	e041      	b.n	8009e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fb84 	bl	800a4d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0208 	orr.w	r2, r2, #8
 8009dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f022 0204 	bic.w	r2, r2, #4
 8009dee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	691a      	ldr	r2, [r3, #16]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e02:	e021      	b.n	8009e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fbb6 	bl	800a57c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	021a      	lsls	r2, r3, #8
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e44:	e000      	b.n	8009e48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009e46:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop

08009e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_TIM_ConfigClockSource+0x18>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e0a6      	b.n	8009fca <HAL_TIM_ConfigClockSource+0x166>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	4b4f      	ldr	r3, [pc, #316]	; (8009fd4 <HAL_TIM_ConfigClockSource+0x170>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ea2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b40      	cmp	r3, #64	; 0x40
 8009eb2:	d067      	beq.n	8009f84 <HAL_TIM_ConfigClockSource+0x120>
 8009eb4:	2b40      	cmp	r3, #64	; 0x40
 8009eb6:	d80b      	bhi.n	8009ed0 <HAL_TIM_ConfigClockSource+0x6c>
 8009eb8:	2b10      	cmp	r3, #16
 8009eba:	d073      	beq.n	8009fa4 <HAL_TIM_ConfigClockSource+0x140>
 8009ebc:	2b10      	cmp	r3, #16
 8009ebe:	d802      	bhi.n	8009ec6 <HAL_TIM_ConfigClockSource+0x62>
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d06f      	beq.n	8009fa4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009ec4:	e078      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009ec6:	2b20      	cmp	r3, #32
 8009ec8:	d06c      	beq.n	8009fa4 <HAL_TIM_ConfigClockSource+0x140>
 8009eca:	2b30      	cmp	r3, #48	; 0x30
 8009ecc:	d06a      	beq.n	8009fa4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009ece:	e073      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009ed0:	2b70      	cmp	r3, #112	; 0x70
 8009ed2:	d00d      	beq.n	8009ef0 <HAL_TIM_ConfigClockSource+0x8c>
 8009ed4:	2b70      	cmp	r3, #112	; 0x70
 8009ed6:	d804      	bhi.n	8009ee2 <HAL_TIM_ConfigClockSource+0x7e>
 8009ed8:	2b50      	cmp	r3, #80	; 0x50
 8009eda:	d033      	beq.n	8009f44 <HAL_TIM_ConfigClockSource+0xe0>
 8009edc:	2b60      	cmp	r3, #96	; 0x60
 8009ede:	d041      	beq.n	8009f64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009ee0:	e06a      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ee6:	d066      	beq.n	8009fb6 <HAL_TIM_ConfigClockSource+0x152>
 8009ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eec:	d017      	beq.n	8009f1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009eee:	e063      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	6899      	ldr	r1, [r3, #8]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f000 fc0a 	bl	800a718 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	609a      	str	r2, [r3, #8]
      break;
 8009f1c:	e04c      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	6899      	ldr	r1, [r3, #8]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f000 fbf3 	bl	800a718 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f40:	609a      	str	r2, [r3, #8]
      break;
 8009f42:	e039      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6818      	ldr	r0, [r3, #0]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	6859      	ldr	r1, [r3, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	461a      	mov	r2, r3
 8009f52:	f000 fb67 	bl	800a624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2150      	movs	r1, #80	; 0x50
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fbc0 	bl	800a6e2 <TIM_ITRx_SetConfig>
      break;
 8009f62:	e029      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	6859      	ldr	r1, [r3, #4]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	461a      	mov	r2, r3
 8009f72:	f000 fb86 	bl	800a682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2160      	movs	r1, #96	; 0x60
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fbb0 	bl	800a6e2 <TIM_ITRx_SetConfig>
      break;
 8009f82:	e019      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	6859      	ldr	r1, [r3, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	461a      	mov	r2, r3
 8009f92:	f000 fb47 	bl	800a624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2140      	movs	r1, #64	; 0x40
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fba0 	bl	800a6e2 <TIM_ITRx_SetConfig>
      break;
 8009fa2:	e009      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4619      	mov	r1, r3
 8009fae:	4610      	mov	r0, r2
 8009fb0:	f000 fb97 	bl	800a6e2 <TIM_ITRx_SetConfig>
      break;
 8009fb4:	e000      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009fb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	fffeff88 	.word	0xfffeff88

08009fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a40      	ldr	r2, [pc, #256]	; (800a13c <TIM_Base_SetConfig+0x114>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d013      	beq.n	800a068 <TIM_Base_SetConfig+0x40>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a046:	d00f      	beq.n	800a068 <TIM_Base_SetConfig+0x40>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a3d      	ldr	r2, [pc, #244]	; (800a140 <TIM_Base_SetConfig+0x118>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00b      	beq.n	800a068 <TIM_Base_SetConfig+0x40>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a3c      	ldr	r2, [pc, #240]	; (800a144 <TIM_Base_SetConfig+0x11c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d007      	beq.n	800a068 <TIM_Base_SetConfig+0x40>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a3b      	ldr	r2, [pc, #236]	; (800a148 <TIM_Base_SetConfig+0x120>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d003      	beq.n	800a068 <TIM_Base_SetConfig+0x40>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a3a      	ldr	r2, [pc, #232]	; (800a14c <TIM_Base_SetConfig+0x124>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d108      	bne.n	800a07a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a06e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4313      	orrs	r3, r2
 800a078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a2f      	ldr	r2, [pc, #188]	; (800a13c <TIM_Base_SetConfig+0x114>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d02b      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a088:	d027      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a2c      	ldr	r2, [pc, #176]	; (800a140 <TIM_Base_SetConfig+0x118>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d023      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a2b      	ldr	r2, [pc, #172]	; (800a144 <TIM_Base_SetConfig+0x11c>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d01f      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a2a      	ldr	r2, [pc, #168]	; (800a148 <TIM_Base_SetConfig+0x120>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d01b      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a29      	ldr	r2, [pc, #164]	; (800a14c <TIM_Base_SetConfig+0x124>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d017      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a28      	ldr	r2, [pc, #160]	; (800a150 <TIM_Base_SetConfig+0x128>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d013      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a27      	ldr	r2, [pc, #156]	; (800a154 <TIM_Base_SetConfig+0x12c>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d00f      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a26      	ldr	r2, [pc, #152]	; (800a158 <TIM_Base_SetConfig+0x130>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d00b      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a25      	ldr	r2, [pc, #148]	; (800a15c <TIM_Base_SetConfig+0x134>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d007      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a24      	ldr	r2, [pc, #144]	; (800a160 <TIM_Base_SetConfig+0x138>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d003      	beq.n	800a0da <TIM_Base_SetConfig+0xb2>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a23      	ldr	r2, [pc, #140]	; (800a164 <TIM_Base_SetConfig+0x13c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d108      	bne.n	800a0ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	689a      	ldr	r2, [r3, #8]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <TIM_Base_SetConfig+0x114>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_Base_SetConfig+0xf8>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a0c      	ldr	r2, [pc, #48]	; (800a14c <TIM_Base_SetConfig+0x124>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d103      	bne.n	800a128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	615a      	str	r2, [r3, #20]
}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	40010000 	.word	0x40010000
 800a140:	40000400 	.word	0x40000400
 800a144:	40000800 	.word	0x40000800
 800a148:	40000c00 	.word	0x40000c00
 800a14c:	40010400 	.word	0x40010400
 800a150:	40014000 	.word	0x40014000
 800a154:	40014400 	.word	0x40014400
 800a158:	40014800 	.word	0x40014800
 800a15c:	40001800 	.word	0x40001800
 800a160:	40001c00 	.word	0x40001c00
 800a164:	40002000 	.word	0x40002000

0800a168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	f023 0201 	bic.w	r2, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4b2b      	ldr	r3, [pc, #172]	; (800a240 <TIM_OC1_SetConfig+0xd8>)
 800a194:	4013      	ands	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0303 	bic.w	r3, r3, #3
 800a19e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f023 0302 	bic.w	r3, r3, #2
 800a1b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a21      	ldr	r2, [pc, #132]	; (800a244 <TIM_OC1_SetConfig+0xdc>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d003      	beq.n	800a1cc <TIM_OC1_SetConfig+0x64>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a20      	ldr	r2, [pc, #128]	; (800a248 <TIM_OC1_SetConfig+0xe0>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d10c      	bne.n	800a1e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f023 0308 	bic.w	r3, r3, #8
 800a1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f023 0304 	bic.w	r3, r3, #4
 800a1e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a16      	ldr	r2, [pc, #88]	; (800a244 <TIM_OC1_SetConfig+0xdc>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d003      	beq.n	800a1f6 <TIM_OC1_SetConfig+0x8e>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a15      	ldr	r2, [pc, #84]	; (800a248 <TIM_OC1_SetConfig+0xe0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d111      	bne.n	800a21a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	699b      	ldr	r3, [r3, #24]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	4313      	orrs	r3, r2
 800a218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	621a      	str	r2, [r3, #32]
}
 800a234:	bf00      	nop
 800a236:	371c      	adds	r7, #28
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	fffeff8f 	.word	0xfffeff8f
 800a244:	40010000 	.word	0x40010000
 800a248:	40010400 	.word	0x40010400

0800a24c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	f023 0210 	bic.w	r2, r3, #16
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4b2e      	ldr	r3, [pc, #184]	; (800a330 <TIM_OC2_SetConfig+0xe4>)
 800a278:	4013      	ands	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	021b      	lsls	r3, r3, #8
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f023 0320 	bic.w	r3, r3, #32
 800a296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	011b      	lsls	r3, r3, #4
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a23      	ldr	r2, [pc, #140]	; (800a334 <TIM_OC2_SetConfig+0xe8>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d003      	beq.n	800a2b4 <TIM_OC2_SetConfig+0x68>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a22      	ldr	r2, [pc, #136]	; (800a338 <TIM_OC2_SetConfig+0xec>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d10d      	bne.n	800a2d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a18      	ldr	r2, [pc, #96]	; (800a334 <TIM_OC2_SetConfig+0xe8>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <TIM_OC2_SetConfig+0x94>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a17      	ldr	r2, [pc, #92]	; (800a338 <TIM_OC2_SetConfig+0xec>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d113      	bne.n	800a308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	4313      	orrs	r3, r2
 800a306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	621a      	str	r2, [r3, #32]
}
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	feff8fff 	.word	0xfeff8fff
 800a334:	40010000 	.word	0x40010000
 800a338:	40010400 	.word	0x40010400

0800a33c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4b2d      	ldr	r3, [pc, #180]	; (800a41c <TIM_OC3_SetConfig+0xe0>)
 800a368:	4013      	ands	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	021b      	lsls	r3, r3, #8
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	4313      	orrs	r3, r2
 800a390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a22      	ldr	r2, [pc, #136]	; (800a420 <TIM_OC3_SetConfig+0xe4>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d003      	beq.n	800a3a2 <TIM_OC3_SetConfig+0x66>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a21      	ldr	r2, [pc, #132]	; (800a424 <TIM_OC3_SetConfig+0xe8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d10d      	bne.n	800a3be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	021b      	lsls	r3, r3, #8
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a17      	ldr	r2, [pc, #92]	; (800a420 <TIM_OC3_SetConfig+0xe4>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d003      	beq.n	800a3ce <TIM_OC3_SetConfig+0x92>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a16      	ldr	r2, [pc, #88]	; (800a424 <TIM_OC3_SetConfig+0xe8>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d113      	bne.n	800a3f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	621a      	str	r2, [r3, #32]
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	fffeff8f 	.word	0xfffeff8f
 800a420:	40010000 	.word	0x40010000
 800a424:	40010400 	.word	0x40010400

0800a428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a1b      	ldr	r3, [r3, #32]
 800a442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4b1e      	ldr	r3, [pc, #120]	; (800a4cc <TIM_OC4_SetConfig+0xa4>)
 800a454:	4013      	ands	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	031b      	lsls	r3, r3, #12
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a13      	ldr	r2, [pc, #76]	; (800a4d0 <TIM_OC4_SetConfig+0xa8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d003      	beq.n	800a490 <TIM_OC4_SetConfig+0x68>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a12      	ldr	r2, [pc, #72]	; (800a4d4 <TIM_OC4_SetConfig+0xac>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d109      	bne.n	800a4a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a496:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	019b      	lsls	r3, r3, #6
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	621a      	str	r2, [r3, #32]
}
 800a4be:	bf00      	nop
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	feff8fff 	.word	0xfeff8fff
 800a4d0:	40010000 	.word	0x40010000
 800a4d4:	40010400 	.word	0x40010400

0800a4d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	4b1b      	ldr	r3, [pc, #108]	; (800a570 <TIM_OC5_SetConfig+0x98>)
 800a504:	4013      	ands	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4313      	orrs	r3, r2
 800a510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a518:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	041b      	lsls	r3, r3, #16
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	4313      	orrs	r3, r2
 800a524:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a12      	ldr	r2, [pc, #72]	; (800a574 <TIM_OC5_SetConfig+0x9c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d003      	beq.n	800a536 <TIM_OC5_SetConfig+0x5e>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a11      	ldr	r2, [pc, #68]	; (800a578 <TIM_OC5_SetConfig+0xa0>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d109      	bne.n	800a54a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a53c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	4313      	orrs	r3, r2
 800a548:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	621a      	str	r2, [r3, #32]
}
 800a564:	bf00      	nop
 800a566:	371c      	adds	r7, #28
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	fffeff8f 	.word	0xfffeff8f
 800a574:	40010000 	.word	0x40010000
 800a578:	40010400 	.word	0x40010400

0800a57c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4b1c      	ldr	r3, [pc, #112]	; (800a618 <TIM_OC6_SetConfig+0x9c>)
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	021b      	lsls	r3, r3, #8
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	051b      	lsls	r3, r3, #20
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a13      	ldr	r2, [pc, #76]	; (800a61c <TIM_OC6_SetConfig+0xa0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d003      	beq.n	800a5dc <TIM_OC6_SetConfig+0x60>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a12      	ldr	r2, [pc, #72]	; (800a620 <TIM_OC6_SetConfig+0xa4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d109      	bne.n	800a5f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	029b      	lsls	r3, r3, #10
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	621a      	str	r2, [r3, #32]
}
 800a60a:	bf00      	nop
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	feff8fff 	.word	0xfeff8fff
 800a61c:	40010000 	.word	0x40010000
 800a620:	40010400 	.word	0x40010400

0800a624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	f023 0201 	bic.w	r2, r3, #1
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a64e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	4313      	orrs	r3, r2
 800a658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f023 030a 	bic.w	r3, r3, #10
 800a660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	4313      	orrs	r3, r2
 800a668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	621a      	str	r2, [r3, #32]
}
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a682:	b480      	push	{r7}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	f023 0210 	bic.w	r2, r3, #16
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	031b      	lsls	r3, r3, #12
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	011b      	lsls	r3, r3, #4
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	621a      	str	r2, [r3, #32]
}
 800a6d6:	bf00      	nop
 800a6d8:	371c      	adds	r7, #28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b085      	sub	sp, #20
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	f043 0307 	orr.w	r3, r3, #7
 800a704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	609a      	str	r2, [r3, #8]
}
 800a70c:	bf00      	nop
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	021a      	lsls	r2, r3, #8
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	431a      	orrs	r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4313      	orrs	r3, r2
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	4313      	orrs	r3, r2
 800a744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	609a      	str	r2, [r3, #8]
}
 800a74c:	bf00      	nop
 800a74e:	371c      	adds	r7, #28
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d101      	bne.n	800a770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e045      	b.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a1c      	ldr	r2, [pc, #112]	; (800a808 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d004      	beq.n	800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a1b      	ldr	r2, [pc, #108]	; (800a80c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d108      	bne.n	800a7b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7ce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	40010000 	.word	0x40010000
 800a80c:	40010400 	.word	0x40010400

0800a810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a824:	2b01      	cmp	r3, #1
 800a826:	d101      	bne.n	800a82c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a828:	2302      	movs	r3, #2
 800a82a:	e065      	b.n	800a8f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4313      	orrs	r3, r2
 800a86a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	4313      	orrs	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	041b      	lsls	r3, r3, #16
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a16      	ldr	r2, [pc, #88]	; (800a904 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d004      	beq.n	800a8ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a14      	ldr	r2, [pc, #80]	; (800a908 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d115      	bne.n	800a8e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	051b      	lsls	r3, r3, #20
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	40010000 	.word	0x40010000
 800a908:	40010400 	.word	0x40010400

0800a90c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e040      	b.n	800a9dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d106      	bne.n	800a970 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f011 ff72 	bl	801c854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2224      	movs	r2, #36	; 0x24
 800a974:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f022 0201 	bic.w	r2, r2, #1
 800a984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f82c 	bl	800a9e4 <UART_SetConfig>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e022      	b.n	800a9dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fac4 	bl	800af2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9c2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f042 0201 	orr.w	r2, r2, #1
 800a9d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fb4b 	bl	800b070 <UART_CheckIdleState>
 800a9da:	4603      	mov	r3, r0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b088      	sub	sp, #32
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	431a      	orrs	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	69db      	ldr	r3, [r3, #28]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	4bb1      	ldr	r3, [pc, #708]	; (800acd8 <UART_SetConfig+0x2f4>)
 800aa14:	4013      	ands	r3, r2
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6812      	ldr	r2, [r2, #0]
 800aa1a:	6939      	ldr	r1, [r7, #16]
 800aa1c:	430b      	orrs	r3, r1
 800aa1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	430a      	orrs	r2, r1
 800aa34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	430a      	orrs	r2, r1
 800aa58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a9f      	ldr	r2, [pc, #636]	; (800acdc <UART_SetConfig+0x2f8>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d121      	bne.n	800aaa8 <UART_SetConfig+0xc4>
 800aa64:	4b9e      	ldr	r3, [pc, #632]	; (800ace0 <UART_SetConfig+0x2fc>)
 800aa66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa6a:	f003 0303 	and.w	r3, r3, #3
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d816      	bhi.n	800aaa0 <UART_SetConfig+0xbc>
 800aa72:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <UART_SetConfig+0x94>)
 800aa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa78:	0800aa89 	.word	0x0800aa89
 800aa7c:	0800aa95 	.word	0x0800aa95
 800aa80:	0800aa8f 	.word	0x0800aa8f
 800aa84:	0800aa9b 	.word	0x0800aa9b
 800aa88:	2301      	movs	r3, #1
 800aa8a:	77fb      	strb	r3, [r7, #31]
 800aa8c:	e151      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	77fb      	strb	r3, [r7, #31]
 800aa92:	e14e      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aa94:	2304      	movs	r3, #4
 800aa96:	77fb      	strb	r3, [r7, #31]
 800aa98:	e14b      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aa9a:	2308      	movs	r3, #8
 800aa9c:	77fb      	strb	r3, [r7, #31]
 800aa9e:	e148      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	77fb      	strb	r3, [r7, #31]
 800aaa4:	bf00      	nop
 800aaa6:	e144      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a8d      	ldr	r2, [pc, #564]	; (800ace4 <UART_SetConfig+0x300>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d134      	bne.n	800ab1c <UART_SetConfig+0x138>
 800aab2:	4b8b      	ldr	r3, [pc, #556]	; (800ace0 <UART_SetConfig+0x2fc>)
 800aab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab8:	f003 030c 	and.w	r3, r3, #12
 800aabc:	2b0c      	cmp	r3, #12
 800aabe:	d829      	bhi.n	800ab14 <UART_SetConfig+0x130>
 800aac0:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <UART_SetConfig+0xe4>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800aafd 	.word	0x0800aafd
 800aacc:	0800ab15 	.word	0x0800ab15
 800aad0:	0800ab15 	.word	0x0800ab15
 800aad4:	0800ab15 	.word	0x0800ab15
 800aad8:	0800ab09 	.word	0x0800ab09
 800aadc:	0800ab15 	.word	0x0800ab15
 800aae0:	0800ab15 	.word	0x0800ab15
 800aae4:	0800ab15 	.word	0x0800ab15
 800aae8:	0800ab03 	.word	0x0800ab03
 800aaec:	0800ab15 	.word	0x0800ab15
 800aaf0:	0800ab15 	.word	0x0800ab15
 800aaf4:	0800ab15 	.word	0x0800ab15
 800aaf8:	0800ab0f 	.word	0x0800ab0f
 800aafc:	2300      	movs	r3, #0
 800aafe:	77fb      	strb	r3, [r7, #31]
 800ab00:	e117      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab02:	2302      	movs	r3, #2
 800ab04:	77fb      	strb	r3, [r7, #31]
 800ab06:	e114      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab08:	2304      	movs	r3, #4
 800ab0a:	77fb      	strb	r3, [r7, #31]
 800ab0c:	e111      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab0e:	2308      	movs	r3, #8
 800ab10:	77fb      	strb	r3, [r7, #31]
 800ab12:	e10e      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab14:	2310      	movs	r3, #16
 800ab16:	77fb      	strb	r3, [r7, #31]
 800ab18:	bf00      	nop
 800ab1a:	e10a      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a71      	ldr	r2, [pc, #452]	; (800ace8 <UART_SetConfig+0x304>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d120      	bne.n	800ab68 <UART_SetConfig+0x184>
 800ab26:	4b6e      	ldr	r3, [pc, #440]	; (800ace0 <UART_SetConfig+0x2fc>)
 800ab28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab30:	2b10      	cmp	r3, #16
 800ab32:	d00f      	beq.n	800ab54 <UART_SetConfig+0x170>
 800ab34:	2b10      	cmp	r3, #16
 800ab36:	d802      	bhi.n	800ab3e <UART_SetConfig+0x15a>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d005      	beq.n	800ab48 <UART_SetConfig+0x164>
 800ab3c:	e010      	b.n	800ab60 <UART_SetConfig+0x17c>
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	d005      	beq.n	800ab4e <UART_SetConfig+0x16a>
 800ab42:	2b30      	cmp	r3, #48	; 0x30
 800ab44:	d009      	beq.n	800ab5a <UART_SetConfig+0x176>
 800ab46:	e00b      	b.n	800ab60 <UART_SetConfig+0x17c>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	77fb      	strb	r3, [r7, #31]
 800ab4c:	e0f1      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab4e:	2302      	movs	r3, #2
 800ab50:	77fb      	strb	r3, [r7, #31]
 800ab52:	e0ee      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab54:	2304      	movs	r3, #4
 800ab56:	77fb      	strb	r3, [r7, #31]
 800ab58:	e0eb      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab5a:	2308      	movs	r3, #8
 800ab5c:	77fb      	strb	r3, [r7, #31]
 800ab5e:	e0e8      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab60:	2310      	movs	r3, #16
 800ab62:	77fb      	strb	r3, [r7, #31]
 800ab64:	bf00      	nop
 800ab66:	e0e4      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a5f      	ldr	r2, [pc, #380]	; (800acec <UART_SetConfig+0x308>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d120      	bne.n	800abb4 <UART_SetConfig+0x1d0>
 800ab72:	4b5b      	ldr	r3, [pc, #364]	; (800ace0 <UART_SetConfig+0x2fc>)
 800ab74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab7c:	2b40      	cmp	r3, #64	; 0x40
 800ab7e:	d00f      	beq.n	800aba0 <UART_SetConfig+0x1bc>
 800ab80:	2b40      	cmp	r3, #64	; 0x40
 800ab82:	d802      	bhi.n	800ab8a <UART_SetConfig+0x1a6>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <UART_SetConfig+0x1b0>
 800ab88:	e010      	b.n	800abac <UART_SetConfig+0x1c8>
 800ab8a:	2b80      	cmp	r3, #128	; 0x80
 800ab8c:	d005      	beq.n	800ab9a <UART_SetConfig+0x1b6>
 800ab8e:	2bc0      	cmp	r3, #192	; 0xc0
 800ab90:	d009      	beq.n	800aba6 <UART_SetConfig+0x1c2>
 800ab92:	e00b      	b.n	800abac <UART_SetConfig+0x1c8>
 800ab94:	2300      	movs	r3, #0
 800ab96:	77fb      	strb	r3, [r7, #31]
 800ab98:	e0cb      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	77fb      	strb	r3, [r7, #31]
 800ab9e:	e0c8      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aba0:	2304      	movs	r3, #4
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	e0c5      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aba6:	2308      	movs	r3, #8
 800aba8:	77fb      	strb	r3, [r7, #31]
 800abaa:	e0c2      	b.n	800ad32 <UART_SetConfig+0x34e>
 800abac:	2310      	movs	r3, #16
 800abae:	77fb      	strb	r3, [r7, #31]
 800abb0:	bf00      	nop
 800abb2:	e0be      	b.n	800ad32 <UART_SetConfig+0x34e>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a4d      	ldr	r2, [pc, #308]	; (800acf0 <UART_SetConfig+0x30c>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d124      	bne.n	800ac08 <UART_SetConfig+0x224>
 800abbe:	4b48      	ldr	r3, [pc, #288]	; (800ace0 <UART_SetConfig+0x2fc>)
 800abc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abcc:	d012      	beq.n	800abf4 <UART_SetConfig+0x210>
 800abce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abd2:	d802      	bhi.n	800abda <UART_SetConfig+0x1f6>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <UART_SetConfig+0x204>
 800abd8:	e012      	b.n	800ac00 <UART_SetConfig+0x21c>
 800abda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abde:	d006      	beq.n	800abee <UART_SetConfig+0x20a>
 800abe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abe4:	d009      	beq.n	800abfa <UART_SetConfig+0x216>
 800abe6:	e00b      	b.n	800ac00 <UART_SetConfig+0x21c>
 800abe8:	2300      	movs	r3, #0
 800abea:	77fb      	strb	r3, [r7, #31]
 800abec:	e0a1      	b.n	800ad32 <UART_SetConfig+0x34e>
 800abee:	2302      	movs	r3, #2
 800abf0:	77fb      	strb	r3, [r7, #31]
 800abf2:	e09e      	b.n	800ad32 <UART_SetConfig+0x34e>
 800abf4:	2304      	movs	r3, #4
 800abf6:	77fb      	strb	r3, [r7, #31]
 800abf8:	e09b      	b.n	800ad32 <UART_SetConfig+0x34e>
 800abfa:	2308      	movs	r3, #8
 800abfc:	77fb      	strb	r3, [r7, #31]
 800abfe:	e098      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac00:	2310      	movs	r3, #16
 800ac02:	77fb      	strb	r3, [r7, #31]
 800ac04:	bf00      	nop
 800ac06:	e094      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a39      	ldr	r2, [pc, #228]	; (800acf4 <UART_SetConfig+0x310>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d124      	bne.n	800ac5c <UART_SetConfig+0x278>
 800ac12:	4b33      	ldr	r3, [pc, #204]	; (800ace0 <UART_SetConfig+0x2fc>)
 800ac14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac20:	d012      	beq.n	800ac48 <UART_SetConfig+0x264>
 800ac22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac26:	d802      	bhi.n	800ac2e <UART_SetConfig+0x24a>
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d007      	beq.n	800ac3c <UART_SetConfig+0x258>
 800ac2c:	e012      	b.n	800ac54 <UART_SetConfig+0x270>
 800ac2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac32:	d006      	beq.n	800ac42 <UART_SetConfig+0x25e>
 800ac34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac38:	d009      	beq.n	800ac4e <UART_SetConfig+0x26a>
 800ac3a:	e00b      	b.n	800ac54 <UART_SetConfig+0x270>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	77fb      	strb	r3, [r7, #31]
 800ac40:	e077      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac42:	2302      	movs	r3, #2
 800ac44:	77fb      	strb	r3, [r7, #31]
 800ac46:	e074      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac48:	2304      	movs	r3, #4
 800ac4a:	77fb      	strb	r3, [r7, #31]
 800ac4c:	e071      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac4e:	2308      	movs	r3, #8
 800ac50:	77fb      	strb	r3, [r7, #31]
 800ac52:	e06e      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac54:	2310      	movs	r3, #16
 800ac56:	77fb      	strb	r3, [r7, #31]
 800ac58:	bf00      	nop
 800ac5a:	e06a      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a25      	ldr	r2, [pc, #148]	; (800acf8 <UART_SetConfig+0x314>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d124      	bne.n	800acb0 <UART_SetConfig+0x2cc>
 800ac66:	4b1e      	ldr	r3, [pc, #120]	; (800ace0 <UART_SetConfig+0x2fc>)
 800ac68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ac70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac74:	d012      	beq.n	800ac9c <UART_SetConfig+0x2b8>
 800ac76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac7a:	d802      	bhi.n	800ac82 <UART_SetConfig+0x29e>
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d007      	beq.n	800ac90 <UART_SetConfig+0x2ac>
 800ac80:	e012      	b.n	800aca8 <UART_SetConfig+0x2c4>
 800ac82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac86:	d006      	beq.n	800ac96 <UART_SetConfig+0x2b2>
 800ac88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac8c:	d009      	beq.n	800aca2 <UART_SetConfig+0x2be>
 800ac8e:	e00b      	b.n	800aca8 <UART_SetConfig+0x2c4>
 800ac90:	2300      	movs	r3, #0
 800ac92:	77fb      	strb	r3, [r7, #31]
 800ac94:	e04d      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac96:	2302      	movs	r3, #2
 800ac98:	77fb      	strb	r3, [r7, #31]
 800ac9a:	e04a      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ac9c:	2304      	movs	r3, #4
 800ac9e:	77fb      	strb	r3, [r7, #31]
 800aca0:	e047      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aca2:	2308      	movs	r3, #8
 800aca4:	77fb      	strb	r3, [r7, #31]
 800aca6:	e044      	b.n	800ad32 <UART_SetConfig+0x34e>
 800aca8:	2310      	movs	r3, #16
 800acaa:	77fb      	strb	r3, [r7, #31]
 800acac:	bf00      	nop
 800acae:	e040      	b.n	800ad32 <UART_SetConfig+0x34e>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a11      	ldr	r2, [pc, #68]	; (800acfc <UART_SetConfig+0x318>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d139      	bne.n	800ad2e <UART_SetConfig+0x34a>
 800acba:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <UART_SetConfig+0x2fc>)
 800acbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800acc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acc8:	d027      	beq.n	800ad1a <UART_SetConfig+0x336>
 800acca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acce:	d817      	bhi.n	800ad00 <UART_SetConfig+0x31c>
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01c      	beq.n	800ad0e <UART_SetConfig+0x32a>
 800acd4:	e027      	b.n	800ad26 <UART_SetConfig+0x342>
 800acd6:	bf00      	nop
 800acd8:	efff69f3 	.word	0xefff69f3
 800acdc:	40011000 	.word	0x40011000
 800ace0:	40023800 	.word	0x40023800
 800ace4:	40004400 	.word	0x40004400
 800ace8:	40004800 	.word	0x40004800
 800acec:	40004c00 	.word	0x40004c00
 800acf0:	40005000 	.word	0x40005000
 800acf4:	40011400 	.word	0x40011400
 800acf8:	40007800 	.word	0x40007800
 800acfc:	40007c00 	.word	0x40007c00
 800ad00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad04:	d006      	beq.n	800ad14 <UART_SetConfig+0x330>
 800ad06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ad0a:	d009      	beq.n	800ad20 <UART_SetConfig+0x33c>
 800ad0c:	e00b      	b.n	800ad26 <UART_SetConfig+0x342>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	77fb      	strb	r3, [r7, #31]
 800ad12:	e00e      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ad14:	2302      	movs	r3, #2
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	e00b      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ad1a:	2304      	movs	r3, #4
 800ad1c:	77fb      	strb	r3, [r7, #31]
 800ad1e:	e008      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ad20:	2308      	movs	r3, #8
 800ad22:	77fb      	strb	r3, [r7, #31]
 800ad24:	e005      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ad26:	2310      	movs	r3, #16
 800ad28:	77fb      	strb	r3, [r7, #31]
 800ad2a:	bf00      	nop
 800ad2c:	e001      	b.n	800ad32 <UART_SetConfig+0x34e>
 800ad2e:	2310      	movs	r3, #16
 800ad30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad3a:	d17c      	bne.n	800ae36 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800ad3c:	7ffb      	ldrb	r3, [r7, #31]
 800ad3e:	2b08      	cmp	r3, #8
 800ad40:	d859      	bhi.n	800adf6 <UART_SetConfig+0x412>
 800ad42:	a201      	add	r2, pc, #4	; (adr r2, 800ad48 <UART_SetConfig+0x364>)
 800ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad48:	0800ad6d 	.word	0x0800ad6d
 800ad4c:	0800ad8b 	.word	0x0800ad8b
 800ad50:	0800ada9 	.word	0x0800ada9
 800ad54:	0800adf7 	.word	0x0800adf7
 800ad58:	0800adc1 	.word	0x0800adc1
 800ad5c:	0800adf7 	.word	0x0800adf7
 800ad60:	0800adf7 	.word	0x0800adf7
 800ad64:	0800adf7 	.word	0x0800adf7
 800ad68:	0800addf 	.word	0x0800addf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800ad6c:	f7fb fe66 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 800ad70:	4603      	mov	r3, r0
 800ad72:	005a      	lsls	r2, r3, #1
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	085b      	lsrs	r3, r3, #1
 800ad7a:	441a      	add	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	61bb      	str	r3, [r7, #24]
        break;
 800ad88:	e038      	b.n	800adfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800ad8a:	f7fb fe6b 	bl	8006a64 <HAL_RCC_GetPCLK2Freq>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	005a      	lsls	r2, r3, #1
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	085b      	lsrs	r3, r3, #1
 800ad98:	441a      	add	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	61bb      	str	r3, [r7, #24]
        break;
 800ada6:	e029      	b.n	800adfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	085a      	lsrs	r2, r3, #1
 800adae:	4b5d      	ldr	r3, [pc, #372]	; (800af24 <UART_SetConfig+0x540>)
 800adb0:	4413      	add	r3, r2
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	6852      	ldr	r2, [r2, #4]
 800adb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800adba:	b29b      	uxth	r3, r3
 800adbc:	61bb      	str	r3, [r7, #24]
        break;
 800adbe:	e01d      	b.n	800adfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800adc0:	f7fb fd7e 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 800adc4:	4603      	mov	r3, r0
 800adc6:	005a      	lsls	r2, r3, #1
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	085b      	lsrs	r3, r3, #1
 800adce:	441a      	add	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	fbb2 f3f3 	udiv	r3, r2, r3
 800add8:	b29b      	uxth	r3, r3
 800adda:	61bb      	str	r3, [r7, #24]
        break;
 800addc:	e00e      	b.n	800adfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	085b      	lsrs	r3, r3, #1
 800ade4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	61bb      	str	r3, [r7, #24]
        break;
 800adf4:	e002      	b.n	800adfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	75fb      	strb	r3, [r7, #23]
        break;
 800adfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	2b0f      	cmp	r3, #15
 800ae00:	d916      	bls.n	800ae30 <UART_SetConfig+0x44c>
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae08:	d212      	bcs.n	800ae30 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	f023 030f 	bic.w	r3, r3, #15
 800ae12:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	085b      	lsrs	r3, r3, #1
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	f003 0307 	and.w	r3, r3, #7
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	89fb      	ldrh	r3, [r7, #14]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	89fa      	ldrh	r2, [r7, #14]
 800ae2c:	60da      	str	r2, [r3, #12]
 800ae2e:	e06e      	b.n	800af0e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	75fb      	strb	r3, [r7, #23]
 800ae34:	e06b      	b.n	800af0e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800ae36:	7ffb      	ldrb	r3, [r7, #31]
 800ae38:	2b08      	cmp	r3, #8
 800ae3a:	d857      	bhi.n	800aeec <UART_SetConfig+0x508>
 800ae3c:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <UART_SetConfig+0x460>)
 800ae3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae42:	bf00      	nop
 800ae44:	0800ae69 	.word	0x0800ae69
 800ae48:	0800ae85 	.word	0x0800ae85
 800ae4c:	0800aea1 	.word	0x0800aea1
 800ae50:	0800aeed 	.word	0x0800aeed
 800ae54:	0800aeb9 	.word	0x0800aeb9
 800ae58:	0800aeed 	.word	0x0800aeed
 800ae5c:	0800aeed 	.word	0x0800aeed
 800ae60:	0800aeed 	.word	0x0800aeed
 800ae64:	0800aed5 	.word	0x0800aed5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800ae68:	f7fb fde8 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	085b      	lsrs	r3, r3, #1
 800ae74:	441a      	add	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	61bb      	str	r3, [r7, #24]
        break;
 800ae82:	e036      	b.n	800aef2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800ae84:	f7fb fdee 	bl	8006a64 <HAL_RCC_GetPCLK2Freq>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	085b      	lsrs	r3, r3, #1
 800ae90:	441a      	add	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	61bb      	str	r3, [r7, #24]
        break;
 800ae9e:	e028      	b.n	800aef2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	085a      	lsrs	r2, r3, #1
 800aea6:	4b20      	ldr	r3, [pc, #128]	; (800af28 <UART_SetConfig+0x544>)
 800aea8:	4413      	add	r3, r2
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	6852      	ldr	r2, [r2, #4]
 800aeae:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	61bb      	str	r3, [r7, #24]
        break;
 800aeb6:	e01c      	b.n	800aef2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800aeb8:	f7fb fd02 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 800aebc:	4602      	mov	r2, r0
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	085b      	lsrs	r3, r3, #1
 800aec4:	441a      	add	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	fbb2 f3f3 	udiv	r3, r2, r3
 800aece:	b29b      	uxth	r3, r3
 800aed0:	61bb      	str	r3, [r7, #24]
        break;
 800aed2:	e00e      	b.n	800aef2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	085b      	lsrs	r3, r3, #1
 800aeda:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	61bb      	str	r3, [r7, #24]
        break;
 800aeea:	e002      	b.n	800aef2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	75fb      	strb	r3, [r7, #23]
        break;
 800aef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	2b0f      	cmp	r3, #15
 800aef6:	d908      	bls.n	800af0a <UART_SetConfig+0x526>
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aefe:	d204      	bcs.n	800af0a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	60da      	str	r2, [r3, #12]
 800af08:	e001      	b.n	800af0e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3720      	adds	r7, #32
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	01e84800 	.word	0x01e84800
 800af28:	00f42400 	.word	0x00f42400

0800af2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00a      	beq.n	800af56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	430a      	orrs	r2, r1
 800af54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	f003 0302 	and.w	r3, r3, #2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00a      	beq.n	800af78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	430a      	orrs	r2, r1
 800af76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00a      	beq.n	800af9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	430a      	orrs	r2, r1
 800af98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9e:	f003 0308 	and.w	r3, r3, #8
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	430a      	orrs	r2, r1
 800afba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc0:	f003 0310 	and.w	r3, r3, #16
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00a      	beq.n	800afde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	430a      	orrs	r2, r1
 800afdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	430a      	orrs	r2, r1
 800affe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d01a      	beq.n	800b042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b02a:	d10a      	bne.n	800b042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00a      	beq.n	800b064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	605a      	str	r2, [r3, #4]
  }
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af02      	add	r7, sp, #8
 800b076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b07e:	f7f5 fd5b 	bl	8000b38 <HAL_GetTick>
 800b082:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0308 	and.w	r3, r3, #8
 800b08e:	2b08      	cmp	r3, #8
 800b090:	d10e      	bne.n	800b0b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f814 	bl	800b0ce <UART_WaitOnFlagUntilTimeout>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e00a      	b.n	800b0c6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0de:	e02a      	b.n	800b136 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e6:	d026      	beq.n	800b136 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0e8:	f7f5 fd26 	bl	8000b38 <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d302      	bcc.n	800b0fe <UART_WaitOnFlagUntilTimeout+0x30>
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d11b      	bne.n	800b136 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b10c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f022 0201 	bic.w	r2, r2, #1
 800b11c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2220      	movs	r2, #32
 800b122:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2220      	movs	r2, #32
 800b128:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e00f      	b.n	800b156 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	69da      	ldr	r2, [r3, #28]
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	4013      	ands	r3, r2
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	429a      	cmp	r2, r3
 800b144:	bf0c      	ite	eq
 800b146:	2301      	moveq	r3, #1
 800b148:	2300      	movne	r3, #0
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	461a      	mov	r2, r3
 800b14e:	79fb      	ldrb	r3, [r7, #7]
 800b150:	429a      	cmp	r2, r3
 800b152:	d0c5      	beq.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d027      	beq.n	800b1ca <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4b2f      	ldr	r3, [pc, #188]	; (800b240 <FMC_SDRAM_Init+0xe0>)
 800b184:	4013      	ands	r3, r2
 800b186:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b190:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b196:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b19c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b1a2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b1a8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b1ae:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b1b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b1ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	e032      	b.n	800b230 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b1d6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b1e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b1e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	4b12      	ldr	r3, [pc, #72]	; (800b240 <FMC_SDRAM_Init+0xe0>)
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b204:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b20a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b210:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b216:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b21c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	4313      	orrs	r3, r2
 800b222:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	ffff8000 	.word	0xffff8000

0800b244 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b244:	b480      	push	{r7}
 800b246:	b087      	sub	sp, #28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d02e      	beq.n	800b2bc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b26a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	3b01      	subs	r3, #1
 800b278:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b27a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	3b01      	subs	r3, #1
 800b282:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b284:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b28e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	3b01      	subs	r3, #1
 800b296:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b298:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b2a2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	609a      	str	r2, [r3, #8]
 800b2ba:	e039      	b.n	800b330 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <FMC_SDRAM_Timing_Init+0xfc>)
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b2ee:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b2fe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	3b01      	subs	r3, #1
 800b306:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b308:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	3b01      	subs	r3, #1
 800b310:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b312:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	3b01      	subs	r3, #1
 800b31a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b31c:	4313      	orrs	r3, r2
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	4313      	orrs	r3, r2
 800b322:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	371c      	adds	r7, #28
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	ff0f0fff 	.word	0xff0f0fff

0800b344 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b35c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	3b01      	subs	r3, #1
 800b364:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b366:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b36e:	4313      	orrs	r3, r2
 800b370:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	371c      	adds	r7, #28
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	695a      	ldr	r2, [r3, #20]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	431a      	orrs	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b3ac:	b084      	sub	sp, #16
 800b3ae:	b480      	push	{r7}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	f107 001c 	add.w	r0, r7, #28
 800b3ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b3c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b3c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b3ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b3ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b3d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b3d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685a      	ldr	r2, [r3, #4]
 800b3e2:	4b07      	ldr	r3, [pc, #28]	; (800b400 <SDMMC_Init+0x54>)
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	b004      	add	sp, #16
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	ffff8100 	.word	0xffff8100

0800b404 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b412:	4618      	mov	r0, r3
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2203      	movs	r2, #3
 800b44c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0303 	and.w	r3, r3, #3
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b496:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b49c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b4a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <SDMMC_SendCommand+0x50>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	431a      	orrs	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	fffff000 	.word	0xfffff000

0800b4cc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	b2db      	uxtb	r3, r3
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b085      	sub	sp, #20
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3314      	adds	r3, #20
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
}  
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b536:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b53c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b542:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	4313      	orrs	r3, r2
 800b548:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	431a      	orrs	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0

}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b572:	2300      	movs	r3, #0
 800b574:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b57a:	2310      	movs	r3, #16
 800b57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b58a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b58c:	f107 0308 	add.w	r3, r7, #8
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7ff ff70 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b598:	f241 3288 	movw	r2, #5000	; 0x1388
 800b59c:	2110      	movs	r1, #16
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa64 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b5a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a6:	69fb      	ldr	r3, [r7, #28]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3720      	adds	r7, #32
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b5c2:	2311      	movs	r3, #17
 800b5c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c6:	2340      	movs	r3, #64	; 0x40
 800b5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5d2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d4:	f107 0308 	add.w	r3, r7, #8
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff ff4c 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e4:	2111      	movs	r1, #17
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fa40 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b5ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ee:	69fb      	ldr	r3, [r7, #28]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3720      	adds	r7, #32
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b602:	2300      	movs	r3, #0
 800b604:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b60a:	2312      	movs	r3, #18
 800b60c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b60e:	2340      	movs	r3, #64	; 0x40
 800b610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b612:	2300      	movs	r3, #0
 800b614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b61a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b61c:	f107 0308 	add.w	r3, r7, #8
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff ff28 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b628:	f241 3288 	movw	r2, #5000	; 0x1388
 800b62c:	2112      	movs	r1, #18
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa1c 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b636:	69fb      	ldr	r3, [r7, #28]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b64a:	2300      	movs	r3, #0
 800b64c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b652:	2318      	movs	r3, #24
 800b654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b656:	2340      	movs	r3, #64	; 0x40
 800b658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b65a:	2300      	movs	r3, #0
 800b65c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b662:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b664:	f107 0308 	add.w	r3, r7, #8
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ff04 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b670:	f241 3288 	movw	r2, #5000	; 0x1388
 800b674:	2118      	movs	r1, #24
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f9f8 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b67c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b67e:	69fb      	ldr	r3, [r7, #28]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b692:	2300      	movs	r3, #0
 800b694:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b69a:	2319      	movs	r3, #25
 800b69c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b69e:	2340      	movs	r3, #64	; 0x40
 800b6a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6aa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ac:	f107 0308 	add.w	r3, r7, #8
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7ff fee0 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b6b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6bc:	2119      	movs	r1, #25
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f9d4 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b6c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3720      	adds	r7, #32
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b6e0:	230c      	movs	r3, #12
 800b6e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6e4:	2340      	movs	r3, #64	; 0x40
 800b6e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6f2:	f107 0308 	add.w	r3, r7, #8
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff febd 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800b6fe:	4a05      	ldr	r2, [pc, #20]	; (800b714 <SDMMC_CmdStopTransfer+0x44>)
 800b700:	210c      	movs	r1, #12
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f9b2 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b70a:	69fb      	ldr	r3, [r7, #28]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3720      	adds	r7, #32
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	05f5e100 	.word	0x05f5e100

0800b718 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08a      	sub	sp, #40	; 0x28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b724:	2300      	movs	r3, #0
 800b726:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b72c:	2307      	movs	r3, #7
 800b72e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b730:	2340      	movs	r3, #64	; 0x40
 800b732:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b734:	2300      	movs	r3, #0
 800b736:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b73c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b73e:	f107 0310 	add.w	r3, r7, #16
 800b742:	4619      	mov	r1, r3
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fe97 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b74a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b74e:	2107      	movs	r1, #7
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 f98b 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b756:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3728      	adds	r7, #40	; 0x28
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b088      	sub	sp, #32
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b76a:	2300      	movs	r3, #0
 800b76c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b776:	2300      	movs	r3, #0
 800b778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b77a:	2300      	movs	r3, #0
 800b77c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b77e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b782:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b784:	f107 0308 	add.w	r3, r7, #8
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7ff fe74 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f941 	bl	800ba18 <SDMMC_GetCmdError>
 800b796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b798:	69fb      	ldr	r3, [r7, #28]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3720      	adds	r7, #32
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b088      	sub	sp, #32
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b7ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b7b4:	2308      	movs	r3, #8
 800b7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7b8:	2340      	movs	r3, #64	; 0x40
 800b7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7c4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7c6:	f107 0308 	add.w	r3, r7, #8
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7ff fe53 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fb12 	bl	800bdfc <SDMMC_GetCmdResp7>
 800b7d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7da:	69fb      	ldr	r3, [r7, #28]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3720      	adds	r7, #32
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b088      	sub	sp, #32
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b7f6:	2337      	movs	r3, #55	; 0x37
 800b7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7fa:	2340      	movs	r3, #64	; 0x40
 800b7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7fe:	2300      	movs	r3, #0
 800b800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b806:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b808:	f107 0308 	add.w	r3, r7, #8
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff fe32 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b814:	f241 3288 	movw	r2, #5000	; 0x1388
 800b818:	2137      	movs	r1, #55	; 0x37
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f926 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b822:	69fb      	ldr	r3, [r7, #28]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3720      	adds	r7, #32
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b836:	2300      	movs	r3, #0
 800b838:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	4b0d      	ldr	r3, [pc, #52]	; (800b874 <SDMMC_CmdAppOperCommand+0x48>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b842:	2329      	movs	r3, #41	; 0x29
 800b844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b846:	2340      	movs	r3, #64	; 0x40
 800b848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b852:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b854:	f107 0308 	add.w	r3, r7, #8
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff fe0c 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fa29 	bl	800bcb8 <SDMMC_GetCmdResp3>
 800b866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b868:	69fb      	ldr	r3, [r7, #28]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3720      	adds	r7, #32
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	80100000 	.word	0x80100000

0800b878 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b882:	2300      	movs	r3, #0
 800b884:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b88a:	2306      	movs	r3, #6
 800b88c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b88e:	2340      	movs	r3, #64	; 0x40
 800b890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b892:	2300      	movs	r3, #0
 800b894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b89a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b89c:	f107 0308 	add.w	r3, r7, #8
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7ff fde8 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b8a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ac:	2106      	movs	r1, #6
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f8dc 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b8b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8b6:	69fb      	ldr	r3, [r7, #28]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3720      	adds	r7, #32
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b8d0:	2333      	movs	r3, #51	; 0x33
 800b8d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8d4:	2340      	movs	r3, #64	; 0x40
 800b8d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8e0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8e2:	f107 0308 	add.w	r3, r7, #8
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7ff fdc5 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b8ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8f2:	2133      	movs	r1, #51	; 0x33
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f8b9 	bl	800ba6c <SDMMC_GetCmdResp1>
 800b8fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8fc:	69fb      	ldr	r3, [r7, #28]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3720      	adds	r7, #32
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b088      	sub	sp, #32
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b90e:	2300      	movs	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b916:	2302      	movs	r3, #2
 800b918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b91a:	23c0      	movs	r3, #192	; 0xc0
 800b91c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b91e:	2300      	movs	r3, #0
 800b920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b926:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b928:	f107 0308 	add.w	r3, r7, #8
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff fda2 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f97f 	bl	800bc38 <SDMMC_GetCmdResp2>
 800b93a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b93c:	69fb      	ldr	r3, [r7, #28]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3720      	adds	r7, #32
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b088      	sub	sp, #32
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b950:	2300      	movs	r3, #0
 800b952:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b958:	2309      	movs	r3, #9
 800b95a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b95c:	23c0      	movs	r3, #192	; 0xc0
 800b95e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b960:	2300      	movs	r3, #0
 800b962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b968:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b96a:	f107 0308 	add.w	r3, r7, #8
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff fd81 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f95e 	bl	800bc38 <SDMMC_GetCmdResp2>
 800b97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b97e:	69fb      	ldr	r3, [r7, #28]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3720      	adds	r7, #32
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b992:	2300      	movs	r3, #0
 800b994:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b99a:	2303      	movs	r3, #3
 800b99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b99e:	2340      	movs	r3, #64	; 0x40
 800b9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9aa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ac:	f107 0308 	add.w	r3, r7, #8
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7ff fd60 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	2103      	movs	r1, #3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f9af 	bl	800bd20 <SDMMC_GetCmdResp6>
 800b9c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9c4:	69fb      	ldr	r3, [r7, #28]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3720      	adds	r7, #32
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b088      	sub	sp, #32
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b9e0:	230d      	movs	r3, #13
 800b9e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9e4:	2340      	movs	r3, #64	; 0x40
 800b9e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9f0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9f2:	f107 0308 	add.w	r3, r7, #8
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7ff fd3d 	bl	800b478 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b9fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba02:	210d      	movs	r1, #13
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f831 	bl	800ba6c <SDMMC_GetCmdResp1>
 800ba0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3720      	adds	r7, #32
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ba18:	b490      	push	{r4, r7}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800ba20:	4b10      	ldr	r3, [pc, #64]	; (800ba64 <SDMMC_GetCmdError+0x4c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a10      	ldr	r2, [pc, #64]	; (800ba68 <SDMMC_GetCmdError+0x50>)
 800ba26:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2a:	0a5b      	lsrs	r3, r3, #9
 800ba2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ba34:	4623      	mov	r3, r4
 800ba36:	1e5c      	subs	r4, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d102      	bne.n	800ba42 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba40:	e00a      	b.n	800ba58 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d0f2      	beq.n	800ba34 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ba54:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bc90      	pop	{r4, r7}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20000060 	.word	0x20000060
 800ba68:	10624dd3 	.word	0x10624dd3

0800ba6c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba6c:	b590      	push	{r4, r7, lr}
 800ba6e:	b087      	sub	sp, #28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	460b      	mov	r3, r1
 800ba76:	607a      	str	r2, [r7, #4]
 800ba78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800ba7a:	4b6c      	ldr	r3, [pc, #432]	; (800bc2c <SDMMC_GetCmdResp1+0x1c0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a6c      	ldr	r2, [pc, #432]	; (800bc30 <SDMMC_GetCmdResp1+0x1c4>)
 800ba80:	fba2 2303 	umull	r2, r3, r2, r3
 800ba84:	0a5b      	lsrs	r3, r3, #9
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ba8c:	4623      	mov	r3, r4
 800ba8e:	1e5c      	subs	r4, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d102      	bne.n	800ba9a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba98:	e0c3      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0f2      	beq.n	800ba8c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baaa:	f003 0304 	and.w	r3, r3, #4
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d004      	beq.n	800babc <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2204      	movs	r2, #4
 800bab6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bab8:	2304      	movs	r3, #4
 800baba:	e0b2      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d004      	beq.n	800bad2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2201      	movs	r2, #1
 800bacc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bace:	2301      	movs	r3, #1
 800bad0:	e0a7      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fcfa 	bl	800b4cc <SDMMC_GetCommandResponse>
 800bad8:	4603      	mov	r3, r0
 800bada:	461a      	mov	r2, r3
 800badc:	7afb      	ldrb	r3, [r7, #11]
 800bade:	4293      	cmp	r3, r2
 800bae0:	d001      	beq.n	800bae6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bae2:	2301      	movs	r3, #1
 800bae4:	e09d      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800baec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800baee:	2100      	movs	r1, #0
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f7ff fcf8 	bl	800b4e6 <SDMMC_GetResponse>
 800baf6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	4b4e      	ldr	r3, [pc, #312]	; (800bc34 <SDMMC_GetCmdResp1+0x1c8>)
 800bafc:	4013      	ands	r3, r2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e08d      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	da02      	bge.n	800bb12 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb10:	e087      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb1c:	2340      	movs	r3, #64	; 0x40
 800bb1e:	e080      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb2a:	2380      	movs	r3, #128	; 0x80
 800bb2c:	e079      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb3c:	e071      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb4c:	e069      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb5c:	e061      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb6c:	e059      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb7c:	e051      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb8c:	e049      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb9c:	e041      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800bba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbac:	e039      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbbc:	e031      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d002      	beq.n	800bbce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bbcc:	e029      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bbd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bbdc:	e021      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d002      	beq.n	800bbee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bbe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bbec:	e019      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bbf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bbfc:	e011      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d002      	beq.n	800bc0e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bc08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bc0c:	e009      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f003 0308 	and.w	r3, r3, #8
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bc18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bc1c:	e001      	b.n	800bc22 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	371c      	adds	r7, #28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd90      	pop	{r4, r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20000060 	.word	0x20000060
 800bc30:	10624dd3 	.word	0x10624dd3
 800bc34:	fdffe008 	.word	0xfdffe008

0800bc38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bc38:	b490      	push	{r4, r7}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800bc40:	4b1b      	ldr	r3, [pc, #108]	; (800bcb0 <SDMMC_GetCmdResp2+0x78>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a1b      	ldr	r2, [pc, #108]	; (800bcb4 <SDMMC_GetCmdResp2+0x7c>)
 800bc46:	fba2 2303 	umull	r2, r3, r2, r3
 800bc4a:	0a5b      	lsrs	r3, r3, #9
 800bc4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800bc54:	4623      	mov	r3, r4
 800bc56:	1e5c      	subs	r4, r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc60:	e020      	b.n	800bca4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc66:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0f2      	beq.n	800bc54 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc72:	f003 0304 	and.w	r3, r3, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d004      	beq.n	800bc84 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2204      	movs	r2, #4
 800bc7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc80:	2304      	movs	r3, #4
 800bc82:	e00f      	b.n	800bca4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d004      	beq.n	800bc9a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e004      	b.n	800bca4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bca0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bc90      	pop	{r4, r7}
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	20000060 	.word	0x20000060
 800bcb4:	10624dd3 	.word	0x10624dd3

0800bcb8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bcb8:	b490      	push	{r4, r7}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800bcc0:	4b15      	ldr	r3, [pc, #84]	; (800bd18 <SDMMC_GetCmdResp3+0x60>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a15      	ldr	r2, [pc, #84]	; (800bd1c <SDMMC_GetCmdResp3+0x64>)
 800bcc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcca:	0a5b      	lsrs	r3, r3, #9
 800bccc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800bcd4:	4623      	mov	r3, r4
 800bcd6:	1e5c      	subs	r4, r3, #1
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d102      	bne.n	800bce2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bce0:	e015      	b.n	800bd0e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0f2      	beq.n	800bcd4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf2:	f003 0304 	and.w	r3, r3, #4
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d004      	beq.n	800bd04 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2204      	movs	r2, #4
 800bcfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd00:	2304      	movs	r3, #4
 800bd02:	e004      	b.n	800bd0e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bc90      	pop	{r4, r7}
 800bd16:	4770      	bx	lr
 800bd18:	20000060 	.word	0x20000060
 800bd1c:	10624dd3 	.word	0x10624dd3

0800bd20 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd20:	b590      	push	{r4, r7, lr}
 800bd22:	b087      	sub	sp, #28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	607a      	str	r2, [r7, #4]
 800bd2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800bd2e:	4b31      	ldr	r3, [pc, #196]	; (800bdf4 <SDMMC_GetCmdResp6+0xd4>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a31      	ldr	r2, [pc, #196]	; (800bdf8 <SDMMC_GetCmdResp6+0xd8>)
 800bd34:	fba2 2303 	umull	r2, r3, r2, r3
 800bd38:	0a5b      	lsrs	r3, r3, #9
 800bd3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd3e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800bd42:	4623      	mov	r3, r4
 800bd44:	1e5c      	subs	r4, r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d102      	bne.n	800bd50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd4e:	e04c      	b.n	800bdea <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd54:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d0f2      	beq.n	800bd42 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2204      	movs	r2, #4
 800bd6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd6e:	2304      	movs	r3, #4
 800bd70:	e03b      	b.n	800bdea <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d004      	beq.n	800bd88 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e030      	b.n	800bdea <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f7ff fb9f 	bl	800b4cc <SDMMC_GetCommandResponse>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	461a      	mov	r2, r3
 800bd92:	7afb      	ldrb	r3, [r7, #11]
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d001      	beq.n	800bd9c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e026      	b.n	800bdea <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bda2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bda4:	2100      	movs	r1, #0
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f7ff fb9d 	bl	800b4e6 <SDMMC_GetResponse>
 800bdac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d106      	bne.n	800bdc6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	0c1b      	lsrs	r3, r3, #16
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e011      	b.n	800bdea <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bdd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdd4:	e009      	b.n	800bdea <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bde0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bde4:	e001      	b.n	800bdea <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bde6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd90      	pop	{r4, r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20000060 	.word	0x20000060
 800bdf8:	10624dd3 	.word	0x10624dd3

0800bdfc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bdfc:	b490      	push	{r4, r7}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800be04:	4b18      	ldr	r3, [pc, #96]	; (800be68 <SDMMC_GetCmdResp7+0x6c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a18      	ldr	r2, [pc, #96]	; (800be6c <SDMMC_GetCmdResp7+0x70>)
 800be0a:	fba2 2303 	umull	r2, r3, r2, r3
 800be0e:	0a5b      	lsrs	r3, r3, #9
 800be10:	f241 3288 	movw	r2, #5000	; 0x1388
 800be14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800be18:	4623      	mov	r3, r4
 800be1a:	1e5c      	subs	r4, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d102      	bne.n	800be26 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be24:	e01a      	b.n	800be5c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0f2      	beq.n	800be18 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be36:	f003 0304 	and.w	r3, r3, #4
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2240      	movs	r2, #64	; 0x40
 800be42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be44:	2304      	movs	r3, #4
 800be46:	e009      	b.n	800be5c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2240      	movs	r2, #64	; 0x40
 800be58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800be5a:	2300      	movs	r3, #0
  
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bc90      	pop	{r4, r7}
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	20000060 	.word	0x20000060
 800be6c:	10624dd3 	.word	0x10624dd3

0800be70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be70:	b084      	sub	sp, #16
 800be72:	b580      	push	{r7, lr}
 800be74:	b084      	sub	sp, #16
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	f107 001c 	add.w	r0, r7, #28
 800be7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	2b01      	cmp	r3, #1
 800be86:	d120      	bne.n	800beca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	68da      	ldr	r2, [r3, #12]
 800be98:	4b20      	ldr	r3, [pc, #128]	; (800bf1c <USB_CoreInit+0xac>)
 800be9a:	4013      	ands	r3, r2
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800beac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d105      	bne.n	800bebe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f942 	bl	800c148 <USB_CoreReset>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73fb      	strb	r3, [r7, #15]
 800bec8:	e010      	b.n	800beec <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f936 	bl	800c148 <USB_CoreReset>
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d10b      	bne.n	800bf0a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	f043 0206 	orr.w	r2, r3, #6
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	f043 0220 	orr.w	r2, r3, #32
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf16:	b004      	add	sp, #16
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	ffbdffbf 	.word	0xffbdffbf

0800bf20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	f043 0201 	orr.w	r2, r3, #1
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f023 0201 	bic.w	r2, r3, #1
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d106      	bne.n	800bf90 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	60da      	str	r2, [r3, #12]
 800bf8e:	e00b      	b.n	800bfa8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf90:	78fb      	ldrb	r3, [r7, #3]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d106      	bne.n	800bfa4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	60da      	str	r2, [r3, #12]
 800bfa2:	e001      	b.n	800bfa8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e003      	b.n	800bfb0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bfa8:	2032      	movs	r0, #50	; 0x32
 800bfaa:	f7f4 fdd1 	bl	8000b50 <HAL_Delay>

  return HAL_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	019b      	lsls	r3, r3, #6
 800bfca:	f043 0220 	orr.w	r2, r3, #32
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	4a09      	ldr	r2, [pc, #36]	; (800c000 <USB_FlushTxFifo+0x48>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d901      	bls.n	800bfe4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e006      	b.n	800bff2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	f003 0320 	and.w	r3, r3, #32
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d0f0      	beq.n	800bfd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	00030d40 	.word	0x00030d40

0800c004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2210      	movs	r2, #16
 800c014:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3301      	adds	r3, #1
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4a09      	ldr	r2, [pc, #36]	; (800c044 <USB_FlushRxFifo+0x40>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d901      	bls.n	800c028 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	e006      	b.n	800c036 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	f003 0310 	and.w	r3, r3, #16
 800c030:	2b10      	cmp	r3, #16
 800c032:	d0f0      	beq.n	800c016 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	00030d40 	.word	0x00030d40

0800c048 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c048:	b480      	push	{r7}
 800c04a:	b089      	sub	sp, #36	; 0x24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	4611      	mov	r1, r2
 800c054:	461a      	mov	r2, r3
 800c056:	460b      	mov	r3, r1
 800c058:	71fb      	strb	r3, [r7, #7]
 800c05a:	4613      	mov	r3, r2
 800c05c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c066:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d11a      	bne.n	800c0a4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c06e:	88bb      	ldrh	r3, [r7, #4]
 800c070:	3303      	adds	r3, #3
 800c072:	089b      	lsrs	r3, r3, #2
 800c074:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c076:	2300      	movs	r3, #0
 800c078:	61bb      	str	r3, [r7, #24]
 800c07a:	e00f      	b.n	800c09c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	031a      	lsls	r2, r3, #12
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	4413      	add	r3, r2
 800c084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c088:	461a      	mov	r2, r3
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	3304      	adds	r3, #4
 800c094:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	3301      	adds	r3, #1
 800c09a:	61bb      	str	r3, [r7, #24]
 800c09c:	69ba      	ldr	r2, [r7, #24]
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d3eb      	bcc.n	800c07c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3724      	adds	r7, #36	; 0x24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	b089      	sub	sp, #36	; 0x24
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c0c8:	88fb      	ldrh	r3, [r7, #6]
 800c0ca:	3303      	adds	r3, #3
 800c0cc:	089b      	lsrs	r3, r3, #2
 800c0ce:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61bb      	str	r3, [r7, #24]
 800c0d4:	e00b      	b.n	800c0ee <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	601a      	str	r2, [r3, #0]
    pDest++;
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	61bb      	str	r3, [r7, #24]
 800c0ee:	69ba      	ldr	r2, [r7, #24]
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d3ef      	bcc.n	800c0d6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c0f6:	69fb      	ldr	r3, [r7, #28]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3724      	adds	r7, #36	; 0x24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	4013      	ands	r3, r2
 800c11a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c11c:	68fb      	ldr	r3, [r7, #12]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3714      	adds	r7, #20
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr

0800c12a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	f003 0301 	and.w	r3, r3, #1
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
	...

0800c148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c150:	2300      	movs	r3, #0
 800c152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3301      	adds	r3, #1
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	4a13      	ldr	r2, [pc, #76]	; (800c1ac <USB_CoreReset+0x64>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d901      	bls.n	800c166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e01b      	b.n	800c19e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	daf2      	bge.n	800c154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	f043 0201 	orr.w	r2, r3, #1
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3301      	adds	r3, #1
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	4a09      	ldr	r2, [pc, #36]	; (800c1ac <USB_CoreReset+0x64>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d901      	bls.n	800c190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e006      	b.n	800c19e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d0f0      	beq.n	800c17e <USB_CoreReset+0x36>

  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	00030d40 	.word	0x00030d40

0800c1b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1b0:	b084      	sub	sp, #16
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	f107 001c 	add.w	r0, r7, #28
 800c1be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d018      	beq.n	800c21c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	2b03      	cmp	r3, #3
 800c1ee:	d10a      	bne.n	800c206 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1fe:	f043 0304 	orr.w	r3, r3, #4
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	e014      	b.n	800c230 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c214:	f023 0304 	bic.w	r3, r3, #4
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	e009      	b.n	800c230 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c22a:	f023 0304 	bic.w	r3, r3, #4
 800c22e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c230:	2110      	movs	r1, #16
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff fec0 	bl	800bfb8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff fee3 	bl	800c004 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c23e:	2300      	movs	r3, #0
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	e015      	b.n	800c270 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	015a      	lsls	r2, r3, #5
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	4413      	add	r3, r2
 800c24c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c250:	461a      	mov	r2, r3
 800c252:	f04f 33ff 	mov.w	r3, #4294967295
 800c256:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	015a      	lsls	r2, r3, #5
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	4413      	add	r3, r2
 800c260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c264:	461a      	mov	r2, r3
 800c266:	2300      	movs	r3, #0
 800c268:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	3301      	adds	r3, #1
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	429a      	cmp	r2, r3
 800c276:	d3e5      	bcc.n	800c244 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800c278:	2101      	movs	r1, #1
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f8ac 	bl	800c3d8 <USB_DriveVbus>

  HAL_Delay(200U);
 800c280:	20c8      	movs	r0, #200	; 0xc8
 800c282:	f7f4 fc65 	bl	8000b50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f04f 32ff 	mov.w	r2, #4294967295
 800c292:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00b      	beq.n	800c2b8 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a14      	ldr	r2, [pc, #80]	; (800c2fc <USB_HostInit+0x14c>)
 800c2ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a13      	ldr	r2, [pc, #76]	; (800c300 <USB_HostInit+0x150>)
 800c2b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c2b6:	e009      	b.n	800c2cc <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2280      	movs	r2, #128	; 0x80
 800c2bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a10      	ldr	r2, [pc, #64]	; (800c304 <USB_HostInit+0x154>)
 800c2c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a10      	ldr	r2, [pc, #64]	; (800c308 <USB_HostInit+0x158>)
 800c2c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d105      	bne.n	800c2de <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	f043 0210 	orr.w	r2, r3, #16
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	699a      	ldr	r2, [r3, #24]
 800c2e2:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <USB_HostInit+0x15c>)
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2f6:	b004      	add	sp, #16
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	01000200 	.word	0x01000200
 800c300:	00e00300 	.word	0x00e00300
 800c304:	00600080 	.word	0x00600080
 800c308:	004000e0 	.word	0x004000e0
 800c30c:	a3200008 	.word	0xa3200008

0800c310 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c32e:	f023 0303 	bic.w	r3, r3, #3
 800c332:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	78fb      	ldrb	r3, [r7, #3]
 800c33e:	f003 0303 	and.w	r3, r3, #3
 800c342:	68f9      	ldr	r1, [r7, #12]
 800c344:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c348:	4313      	orrs	r3, r2
 800c34a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c34c:	78fb      	ldrb	r3, [r7, #3]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d107      	bne.n	800c362 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c358:	461a      	mov	r2, r3
 800c35a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c35e:	6053      	str	r3, [r2, #4]
 800c360:	e009      	b.n	800c376 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c362:	78fb      	ldrb	r3, [r7, #3]
 800c364:	2b02      	cmp	r3, #2
 800c366:	d106      	bne.n	800c376 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c36e:	461a      	mov	r2, r3
 800c370:	f241 7370 	movw	r3, #6000	; 0x1770
 800c374:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3714      	adds	r7, #20
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c390:	2300      	movs	r3, #0
 800c392:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c3a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c3ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c3b4:	2064      	movs	r0, #100	; 0x64
 800c3b6:	f7f4 fbcb 	bl	8000b50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c3c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c3c8:	200a      	movs	r0, #10
 800c3ca:	f7f4 fbc1 	bl	8000b50 <HAL_Delay>

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c3fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d109      	bne.n	800c41c <USB_DriveVbus+0x44>
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d106      	bne.n	800c41c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c41a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c426:	d109      	bne.n	800c43c <USB_DriveVbus+0x64>
 800c428:	78fb      	ldrb	r3, [r7, #3]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d106      	bne.n	800c43c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c43a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c44a:	b480      	push	{r7}
 800c44c:	b085      	sub	sp, #20
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c456:	2300      	movs	r3, #0
 800c458:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	0c5b      	lsrs	r3, r3, #17
 800c468:	f003 0303 	and.w	r3, r3, #3
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	b29b      	uxth	r3, r3
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
	...

0800c49c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b087      	sub	sp, #28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	70fb      	strb	r3, [r7, #3]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	70bb      	strb	r3, [r7, #2]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c4d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d87e      	bhi.n	800c5d8 <USB_HC_Init+0x13c>
 800c4da:	a201      	add	r2, pc, #4	; (adr r2, 800c4e0 <USB_HC_Init+0x44>)
 800c4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c59b 	.word	0x0800c59b
 800c4e8:	0800c4f1 	.word	0x0800c4f1
 800c4ec:	0800c55d 	.word	0x0800c55d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	015a      	lsls	r2, r3, #5
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	f240 439d 	movw	r3, #1181	; 0x49d
 800c502:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c504:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	da10      	bge.n	800c52e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c50c:	78fb      	ldrb	r3, [r7, #3]
 800c50e:	015a      	lsls	r2, r3, #5
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4413      	add	r3, r2
 800c514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	78fa      	ldrb	r2, [r7, #3]
 800c51c:	0151      	lsls	r1, r2, #5
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	440a      	add	r2, r1
 800c522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c52a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800c52c:	e057      	b.n	800c5de <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c536:	2b00      	cmp	r3, #0
 800c538:	d051      	beq.n	800c5de <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c53a:	78fb      	ldrb	r3, [r7, #3]
 800c53c:	015a      	lsls	r2, r3, #5
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	4413      	add	r3, r2
 800c542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	78fa      	ldrb	r2, [r7, #3]
 800c54a:	0151      	lsls	r1, r2, #5
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	440a      	add	r2, r1
 800c550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c554:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c558:	60d3      	str	r3, [r2, #12]
      break;
 800c55a:	e040      	b.n	800c5de <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c55c:	78fb      	ldrb	r3, [r7, #3]
 800c55e:	015a      	lsls	r2, r3, #5
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	4413      	add	r3, r2
 800c564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c568:	461a      	mov	r2, r3
 800c56a:	f240 639d 	movw	r3, #1693	; 0x69d
 800c56e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c570:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c574:	2b00      	cmp	r3, #0
 800c576:	da34      	bge.n	800c5e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c578:	78fb      	ldrb	r3, [r7, #3]
 800c57a:	015a      	lsls	r2, r3, #5
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	4413      	add	r3, r2
 800c580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	78fa      	ldrb	r2, [r7, #3]
 800c588:	0151      	lsls	r1, r2, #5
 800c58a:	68ba      	ldr	r2, [r7, #8]
 800c58c:	440a      	add	r2, r1
 800c58e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c596:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c598:	e023      	b.n	800c5e2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c59a:	78fb      	ldrb	r3, [r7, #3]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f240 2325 	movw	r3, #549	; 0x225
 800c5ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c5ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	da17      	bge.n	800c5e6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c5b6:	78fb      	ldrb	r3, [r7, #3]
 800c5b8:	015a      	lsls	r2, r3, #5
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	78fa      	ldrb	r2, [r7, #3]
 800c5c6:	0151      	lsls	r1, r2, #5
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	440a      	add	r2, r1
 800c5cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5d0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c5d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c5d6:	e006      	b.n	800c5e6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	75fb      	strb	r3, [r7, #23]
      break;
 800c5dc:	e004      	b.n	800c5e8 <USB_HC_Init+0x14c>
      break;
 800c5de:	bf00      	nop
 800c5e0:	e002      	b.n	800c5e8 <USB_HC_Init+0x14c>
      break;
 800c5e2:	bf00      	nop
 800c5e4:	e000      	b.n	800c5e8 <USB_HC_Init+0x14c>
      break;
 800c5e6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5ee:	699a      	ldr	r2, [r3, #24]
 800c5f0:	78fb      	ldrb	r3, [r7, #3]
 800c5f2:	f003 030f 	and.w	r3, r3, #15
 800c5f6:	2101      	movs	r1, #1
 800c5f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c5fc:	68b9      	ldr	r1, [r7, #8]
 800c5fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c602:	4313      	orrs	r3, r2
 800c604:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c612:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c616:	2b00      	cmp	r3, #0
 800c618:	da03      	bge.n	800c622 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c61a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c61e:	613b      	str	r3, [r7, #16]
 800c620:	e001      	b.n	800c626 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800c626:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d103      	bne.n	800c636 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c62e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c632:	60fb      	str	r3, [r7, #12]
 800c634:	e001      	b.n	800c63a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c636:	2300      	movs	r3, #0
 800c638:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c63a:	787b      	ldrb	r3, [r7, #1]
 800c63c:	059b      	lsls	r3, r3, #22
 800c63e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c642:	78bb      	ldrb	r3, [r7, #2]
 800c644:	02db      	lsls	r3, r3, #11
 800c646:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c64a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c64c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c650:	049b      	lsls	r3, r3, #18
 800c652:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c656:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c658:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c65a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c65e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c664:	78fb      	ldrb	r3, [r7, #3]
 800c666:	0159      	lsls	r1, r3, #5
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	440b      	add	r3, r1
 800c66c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c670:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c676:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c678:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d10f      	bne.n	800c6a0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	4413      	add	r3, r2
 800c688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	78fa      	ldrb	r2, [r7, #3]
 800c690:	0151      	lsls	r1, r2, #5
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	440a      	add	r2, r1
 800c696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c69a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c69e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	371c      	adds	r7, #28
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop

0800c6b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08c      	sub	sp, #48	; 0x30
 800c6b4:	af02      	add	r7, sp, #8
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	785b      	ldrb	r3, [r3, #1]
 800c6c6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c6c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6cc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d028      	beq.n	800c72c <USB_HC_StartXfer+0x7c>
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	791b      	ldrb	r3, [r3, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d124      	bne.n	800c72c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800c6e2:	79fb      	ldrb	r3, [r7, #7]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10b      	bne.n	800c700 <USB_HC_StartXfer+0x50>
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	795b      	ldrb	r3, [r3, #5]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d107      	bne.n	800c700 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	785b      	ldrb	r3, [r3, #1]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f000 fa2e 	bl	800cb58 <USB_DoPing>
      return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	e112      	b.n	800c926 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800c700:	79fb      	ldrb	r3, [r7, #7]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d112      	bne.n	800c72c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	015a      	lsls	r2, r3, #5
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	69fa      	ldr	r2, [r7, #28]
 800c716:	0151      	lsls	r1, r2, #5
 800c718:	6a3a      	ldr	r2, [r7, #32]
 800c71a:	440a      	add	r2, r1
 800c71c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c720:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800c724:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	2200      	movs	r2, #0
 800c72a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d018      	beq.n	800c766 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	8912      	ldrh	r2, [r2, #8]
 800c73c:	4413      	add	r3, r2
 800c73e:	3b01      	subs	r3, #1
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	8912      	ldrh	r2, [r2, #8]
 800c744:	fbb3 f3f2 	udiv	r3, r3, r2
 800c748:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c74a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c74c:	8b7b      	ldrh	r3, [r7, #26]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d90b      	bls.n	800c76a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800c752:	8b7b      	ldrh	r3, [r7, #26]
 800c754:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c756:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	8912      	ldrh	r2, [r2, #8]
 800c75c:	fb02 f203 	mul.w	r2, r2, r3
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	611a      	str	r2, [r3, #16]
 800c764:	e001      	b.n	800c76a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800c766:	2301      	movs	r3, #1
 800c768:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	78db      	ldrb	r3, [r3, #3]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d006      	beq.n	800c780 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c772:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	8912      	ldrh	r2, [r2, #8]
 800c778:	fb02 f203 	mul.w	r2, r2, r3
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c788:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c78a:	04d9      	lsls	r1, r3, #19
 800c78c:	4b68      	ldr	r3, [pc, #416]	; (800c930 <USB_HC_StartXfer+0x280>)
 800c78e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c790:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	7a9b      	ldrb	r3, [r3, #10]
 800c796:	075b      	lsls	r3, r3, #29
 800c798:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c79c:	69f9      	ldr	r1, [r7, #28]
 800c79e:	0148      	lsls	r0, r1, #5
 800c7a0:	6a39      	ldr	r1, [r7, #32]
 800c7a2:	4401      	add	r1, r0
 800c7a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c7a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c7aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c7ac:	79fb      	ldrb	r3, [r7, #7]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d009      	beq.n	800c7c6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	68d9      	ldr	r1, [r3, #12]
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	015a      	lsls	r2, r3, #5
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	4413      	add	r3, r2
 800c7be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7c2:	460a      	mov	r2, r1
 800c7c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	bf0c      	ite	eq
 800c7d6:	2301      	moveq	r3, #1
 800c7d8:	2300      	movne	r3, #0
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	015a      	lsls	r2, r3, #5
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	69fa      	ldr	r2, [r7, #28]
 800c7ee:	0151      	lsls	r1, r2, #5
 800c7f0:	6a3a      	ldr	r2, [r7, #32]
 800c7f2:	440a      	add	r2, r1
 800c7f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c7fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	6a3b      	ldr	r3, [r7, #32]
 800c804:	4413      	add	r3, r2
 800c806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	7e7b      	ldrb	r3, [r7, #25]
 800c80e:	075b      	lsls	r3, r3, #29
 800c810:	69f9      	ldr	r1, [r7, #28]
 800c812:	0148      	lsls	r0, r1, #5
 800c814:	6a39      	ldr	r1, [r7, #32]
 800c816:	4401      	add	r1, r0
 800c818:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c81c:	4313      	orrs	r3, r2
 800c81e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	4413      	add	r3, r2
 800c828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a41      	ldr	r2, [pc, #260]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c830:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c832:	4b40      	ldr	r3, [pc, #256]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c83a:	4a3e      	ldr	r2, [pc, #248]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c83c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	78db      	ldrb	r3, [r3, #3]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d006      	beq.n	800c854 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c846:	4b3b      	ldr	r3, [pc, #236]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c84e:	4a39      	ldr	r2, [pc, #228]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	e005      	b.n	800c860 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c854:	4b37      	ldr	r3, [pc, #220]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c85c:	4a35      	ldr	r2, [pc, #212]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c85e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c860:	4b34      	ldr	r3, [pc, #208]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c868:	4a32      	ldr	r2, [pc, #200]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c86a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	6a3b      	ldr	r3, [r7, #32]
 800c872:	4413      	add	r3, r2
 800c874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c878:	461a      	mov	r2, r3
 800c87a:	4b2e      	ldr	r3, [pc, #184]	; (800c934 <USB_HC_StartXfer+0x284>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d14e      	bne.n	800c924 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	78db      	ldrb	r3, [r3, #3]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d14a      	bne.n	800c924 <USB_HC_StartXfer+0x274>
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d046      	beq.n	800c924 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	79db      	ldrb	r3, [r3, #7]
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d830      	bhi.n	800c900 <USB_HC_StartXfer+0x250>
 800c89e:	a201      	add	r2, pc, #4	; (adr r2, 800c8a4 <USB_HC_StartXfer+0x1f4>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c8b5 	.word	0x0800c8b5
 800c8a8:	0800c8d9 	.word	0x0800c8d9
 800c8ac:	0800c8b5 	.word	0x0800c8b5
 800c8b0:	0800c8d9 	.word	0x0800c8d9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	3303      	adds	r3, #3
 800c8ba:	089b      	lsrs	r3, r3, #2
 800c8bc:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c8be:	8afa      	ldrh	r2, [r7, #22]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d91c      	bls.n	800c904 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	f043 0220 	orr.w	r2, r3, #32
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	619a      	str	r2, [r3, #24]
          }
          break;
 800c8d6:	e015      	b.n	800c904 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	3303      	adds	r3, #3
 800c8de:	089b      	lsrs	r3, r3, #2
 800c8e0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c8e2:	8afa      	ldrh	r2, [r7, #22]
 800c8e4:	6a3b      	ldr	r3, [r7, #32]
 800c8e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d90a      	bls.n	800c908 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	619a      	str	r2, [r3, #24]
          }
          break;
 800c8fe:	e003      	b.n	800c908 <USB_HC_StartXfer+0x258>

        default:
          break;
 800c900:	bf00      	nop
 800c902:	e002      	b.n	800c90a <USB_HC_StartXfer+0x25a>
          break;
 800c904:	bf00      	nop
 800c906:	e000      	b.n	800c90a <USB_HC_StartXfer+0x25a>
          break;
 800c908:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	68d9      	ldr	r1, [r3, #12]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	785a      	ldrb	r2, [r3, #1]
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	b298      	uxth	r0, r3
 800c918:	2300      	movs	r3, #0
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	4603      	mov	r3, r0
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f7ff fb92 	bl	800c048 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3728      	adds	r7, #40	; 0x28
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	1ff80000 	.word	0x1ff80000
 800c934:	20000104 	.word	0x20000104

0800c938 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	b29b      	uxth	r3, r3
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c95a:	b480      	push	{r7}
 800c95c:	b087      	sub	sp, #28
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	460b      	mov	r3, r1
 800c964:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c96a:	78fb      	ldrb	r3, [r7, #3]
 800c96c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	015a      	lsls	r2, r3, #5
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	4413      	add	r3, r2
 800c97a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	0c9b      	lsrs	r3, r3, #18
 800c982:	f003 0303 	and.w	r3, r3, #3
 800c986:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d002      	beq.n	800c994 <USB_HC_Halt+0x3a>
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	2b02      	cmp	r3, #2
 800c992:	d16c      	bne.n	800ca6e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	0151      	lsls	r1, r2, #5
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	440a      	add	r2, r1
 800c9aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9b2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d143      	bne.n	800ca48 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	0151      	lsls	r1, r2, #5
 800c9d2:	693a      	ldr	r2, [r7, #16]
 800c9d4:	440a      	add	r2, r1
 800c9d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	0151      	lsls	r1, r2, #5
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	440a      	add	r2, r1
 800c9f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	0151      	lsls	r1, r2, #5
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	440a      	add	r2, r1
 800ca16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca1e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	3301      	adds	r3, #1
 800ca24:	617b      	str	r3, [r7, #20]
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca2c:	d81d      	bhi.n	800ca6a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	015a      	lsls	r2, r3, #5
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	4413      	add	r3, r2
 800ca36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca44:	d0ec      	beq.n	800ca20 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ca46:	e080      	b.n	800cb4a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	015a      	lsls	r2, r3, #5
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	4413      	add	r3, r2
 800ca50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	0151      	lsls	r1, r2, #5
 800ca5a:	693a      	ldr	r2, [r7, #16]
 800ca5c:	440a      	add	r2, r1
 800ca5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca66:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ca68:	e06f      	b.n	800cb4a <USB_HC_Halt+0x1f0>
          break;
 800ca6a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ca6c:	e06d      	b.n	800cb4a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	015a      	lsls	r2, r3, #5
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	4413      	add	r3, r2
 800ca76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	0151      	lsls	r1, r2, #5
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	440a      	add	r2, r1
 800ca84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca8c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d143      	bne.n	800cb26 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	015a      	lsls	r2, r3, #5
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	4413      	add	r3, r2
 800caa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	0151      	lsls	r1, r2, #5
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	440a      	add	r2, r1
 800cab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cabc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	015a      	lsls	r2, r3, #5
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	4413      	add	r3, r2
 800cac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	0151      	lsls	r1, r2, #5
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	440a      	add	r2, r1
 800cad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cadc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	015a      	lsls	r2, r3, #5
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	4413      	add	r3, r2
 800cae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	0151      	lsls	r1, r2, #5
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	440a      	add	r2, r1
 800caf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800caf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cafc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	3301      	adds	r3, #1
 800cb02:	617b      	str	r3, [r7, #20]
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb0a:	d81d      	bhi.n	800cb48 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	015a      	lsls	r2, r3, #5
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	4413      	add	r3, r2
 800cb14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb22:	d0ec      	beq.n	800cafe <USB_HC_Halt+0x1a4>
 800cb24:	e011      	b.n	800cb4a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	015a      	lsls	r2, r3, #5
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	0151      	lsls	r1, r2, #5
 800cb38:	693a      	ldr	r2, [r7, #16]
 800cb3a:	440a      	add	r2, r1
 800cb3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb44:	6013      	str	r3, [r2, #0]
 800cb46:	e000      	b.n	800cb4a <USB_HC_Halt+0x1f0>
          break;
 800cb48:	bf00      	nop
    }
  }

  return HAL_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	371c      	adds	r7, #28
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	460b      	mov	r3, r1
 800cb62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cb68:	78fb      	ldrb	r3, [r7, #3]
 800cb6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	04da      	lsls	r2, r3, #19
 800cb74:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <USB_DoPing+0x74>)
 800cb76:	4013      	ands	r3, r2
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	0151      	lsls	r1, r2, #5
 800cb7c:	697a      	ldr	r2, [r7, #20]
 800cb7e:	440a      	add	r2, r1
 800cb80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	015a      	lsls	r2, r3, #5
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	4413      	add	r3, r2
 800cb92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cba0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cba8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	015a      	lsls	r2, r3, #5
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	1ff80000 	.word	0x1ff80000

0800cbd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff f9ae 	bl	800bf42 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cbe6:	2110      	movs	r1, #16
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff f9e5 	bl	800bfb8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7ff fa08 	bl	800c004 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	613b      	str	r3, [r7, #16]
 800cbf8:	e01f      	b.n	800cc3a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	015a      	lsls	r2, r3, #5
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4413      	add	r3, r2
 800cc02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc2e:	461a      	mov	r2, r3
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	3301      	adds	r3, #1
 800cc38:	613b      	str	r3, [r7, #16]
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	2b0f      	cmp	r3, #15
 800cc3e:	d9dc      	bls.n	800cbfa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cc40:	2300      	movs	r3, #0
 800cc42:	613b      	str	r3, [r7, #16]
 800cc44:	e034      	b.n	800ccb0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	015a      	lsls	r2, r3, #5
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	015a      	lsls	r2, r3, #5
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	4413      	add	r3, r2
 800cc76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	3301      	adds	r3, #1
 800cc84:	617b      	str	r3, [r7, #20]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc8c:	d80c      	bhi.n	800cca8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	015a      	lsls	r2, r3, #5
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	4413      	add	r3, r2
 800cc96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cca4:	d0ec      	beq.n	800cc80 <USB_StopHost+0xb0>
 800cca6:	e000      	b.n	800ccaa <USB_StopHost+0xda>
        break;
 800cca8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	3301      	adds	r3, #1
 800ccae:	613b      	str	r3, [r7, #16]
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	2b0f      	cmp	r3, #15
 800ccb4:	d9c7      	bls.n	800cc46 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccca:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7ff f927 	bl	800bf20 <USB_EnableGlobalInt>

  return HAL_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3718      	adds	r7, #24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800ccdc:	b590      	push	{r4, r7, lr}
 800ccde:	b089      	sub	sp, #36	; 0x24
 800cce0:	af04      	add	r7, sp, #16
 800cce2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800cce4:	2302      	movs	r3, #2
 800cce6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800cce8:	2301      	movs	r3, #1
 800ccea:	2202      	movs	r2, #2
 800ccec:	2102      	movs	r1, #2
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fc8c 	bl	800d60c <USBH_FindInterface>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800ccf8:	7bbb      	ldrb	r3, [r7, #14]
 800ccfa:	2bff      	cmp	r3, #255	; 0xff
 800ccfc:	f000 812a 	beq.w	800cf54 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fc65 	bl	800d5d4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800cd10:	2050      	movs	r0, #80	; 0x50
 800cd12:	f018 fadb 	bl	80252cc <malloc>
 800cd16:	4603      	mov	r3, r0
 800cd18:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	211a      	movs	r1, #26
 800cd2a:	fb01 f303 	mul.w	r3, r1, r3
 800cd2e:	4413      	add	r3, r2
 800cd30:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	b25b      	sxtb	r3, r3
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	da15      	bge.n	800cd68 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cd3c:	7bbb      	ldrb	r3, [r7, #14]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	211a      	movs	r1, #26
 800cd42:	fb01 f303 	mul.w	r3, r1, r3
 800cd46:	4413      	add	r3, r2
 800cd48:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800cd4c:	781a      	ldrb	r2, [r3, #0]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cd52:	7bbb      	ldrb	r3, [r7, #14]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	211a      	movs	r1, #26
 800cd58:	fb01 f303 	mul.w	r3, r1, r3
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800cd62:	881a      	ldrh	r2, [r3, #0]
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	785b      	ldrb	r3, [r3, #1]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f001 ff2f 	bl	800ebd2 <USBH_AllocPipe>
 800cd74:	4603      	mov	r3, r0
 800cd76:	461a      	mov	r2, r3
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	7819      	ldrb	r1, [r3, #0]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	7858      	ldrb	r0, [r3, #1]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	8952      	ldrh	r2, [r2, #10]
 800cd94:	9202      	str	r2, [sp, #8]
 800cd96:	2203      	movs	r2, #3
 800cd98:	9201      	str	r2, [sp, #4]
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	4623      	mov	r3, r4
 800cd9e:	4602      	mov	r2, r0
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f001 fee7 	bl	800eb74 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f010 fa68 	bl	801d284 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	210a      	movs	r1, #10
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fc26 	bl	800d60c <USBH_FindInterface>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
 800cdc6:	2bff      	cmp	r3, #255	; 0xff
 800cdc8:	f000 80c4 	beq.w	800cf54 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800cdcc:	7bbb      	ldrb	r3, [r7, #14]
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	211a      	movs	r1, #26
 800cdd2:	fb01 f303 	mul.w	r3, r1, r3
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	b25b      	sxtb	r3, r3
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	da16      	bge.n	800ce12 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cde4:	7bbb      	ldrb	r3, [r7, #14]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	211a      	movs	r1, #26
 800cdea:	fb01 f303 	mul.w	r3, r1, r3
 800cdee:	4413      	add	r3, r2
 800cdf0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800cdf4:	781a      	ldrb	r2, [r3, #0]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cdfa:	7bbb      	ldrb	r3, [r7, #14]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	211a      	movs	r1, #26
 800ce00:	fb01 f303 	mul.w	r3, r1, r3
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800ce0a:	881a      	ldrh	r2, [r3, #0]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	835a      	strh	r2, [r3, #26]
 800ce10:	e015      	b.n	800ce3e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ce12:	7bbb      	ldrb	r3, [r7, #14]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	211a      	movs	r1, #26
 800ce18:	fb01 f303 	mul.w	r3, r1, r3
 800ce1c:	4413      	add	r3, r2
 800ce1e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800ce22:	781a      	ldrb	r2, [r3, #0]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	211a      	movs	r1, #26
 800ce2e:	fb01 f303 	mul.w	r3, r1, r3
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800ce38:	881a      	ldrh	r2, [r3, #0]
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ce3e:	7bbb      	ldrb	r3, [r7, #14]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	211a      	movs	r1, #26
 800ce44:	fb01 f303 	mul.w	r3, r1, r3
 800ce48:	4413      	add	r3, r2
 800ce4a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	b25b      	sxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	da16      	bge.n	800ce84 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	211a      	movs	r1, #26
 800ce5c:	fb01 f303 	mul.w	r3, r1, r3
 800ce60:	4413      	add	r3, r2
 800ce62:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ce66:	781a      	ldrb	r2, [r3, #0]
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	211a      	movs	r1, #26
 800ce72:	fb01 f303 	mul.w	r3, r1, r3
 800ce76:	4413      	add	r3, r2
 800ce78:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800ce7c:	881a      	ldrh	r2, [r3, #0]
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	835a      	strh	r2, [r3, #26]
 800ce82:	e015      	b.n	800ceb0 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	211a      	movs	r1, #26
 800ce8a:	fb01 f303 	mul.w	r3, r1, r3
 800ce8e:	4413      	add	r3, r2
 800ce90:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ce94:	781a      	ldrb	r2, [r3, #0]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ce9a:	7bbb      	ldrb	r3, [r7, #14]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	211a      	movs	r1, #26
 800cea0:	fb01 f303 	mul.w	r3, r1, r3
 800cea4:	4413      	add	r3, r2
 800cea6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800ceaa:	881a      	ldrh	r2, [r3, #0]
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	7b9b      	ldrb	r3, [r3, #14]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f001 fe8b 	bl	800ebd2 <USBH_AllocPipe>
 800cebc:	4603      	mov	r3, r0
 800cebe:	461a      	mov	r2, r3
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	7bdb      	ldrb	r3, [r3, #15]
 800cec8:	4619      	mov	r1, r3
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f001 fe81 	bl	800ebd2 <USBH_AllocPipe>
 800ced0:	4603      	mov	r3, r0
 800ced2:	461a      	mov	r2, r3
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	7b59      	ldrb	r1, [r3, #13]
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	7b98      	ldrb	r0, [r3, #14]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	8b12      	ldrh	r2, [r2, #24]
 800cef0:	9202      	str	r2, [sp, #8]
 800cef2:	2202      	movs	r2, #2
 800cef4:	9201      	str	r2, [sp, #4]
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	4623      	mov	r3, r4
 800cefa:	4602      	mov	r2, r0
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f001 fe39 	bl	800eb74 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	7b19      	ldrb	r1, [r3, #12]
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	7bd8      	ldrb	r0, [r3, #15]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	8b52      	ldrh	r2, [r2, #26]
 800cf1a:	9202      	str	r2, [sp, #8]
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	9201      	str	r2, [sp, #4]
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	4623      	mov	r3, r4
 800cf24:	4602      	mov	r2, r0
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f001 fe24 	bl	800eb74 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	7b5b      	ldrb	r3, [r3, #13]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f010 f9a1 	bl	801d284 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	7b1b      	ldrb	r3, [r3, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	4619      	mov	r1, r3
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f010 f99a 	bl	801d284 <USBH_LL_SetToggle>
      status = USBH_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd90      	pop	{r4, r7, pc}

0800cf5e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b084      	sub	sp, #16
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00e      	beq.n	800cf96 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f001 fe17 	bl	800ebb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f001 fe3f 	bl	800ec0e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	7b1b      	ldrb	r3, [r3, #12]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00e      	beq.n	800cfbc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	7b1b      	ldrb	r3, [r3, #12]
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f001 fe04 	bl	800ebb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	7b1b      	ldrb	r3, [r3, #12]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f001 fe2c 	bl	800ec0e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	7b5b      	ldrb	r3, [r3, #13]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00e      	beq.n	800cfe2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	7b5b      	ldrb	r3, [r3, #13]
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f001 fdf1 	bl	800ebb2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	7b5b      	ldrb	r3, [r3, #13]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f001 fe19 	bl	800ec0e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfe8:	69db      	ldr	r3, [r3, #28]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00b      	beq.n	800d006 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cff4:	69db      	ldr	r3, [r3, #28]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f018 f970 	bl	80252dc <free>
    phost->pActiveClass->pData = 0U;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d002:	2200      	movs	r2, #0
 800d004:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800d018:	2302      	movs	r3, #2
 800d01a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d022:	69db      	ldr	r3, [r3, #28]
 800d024:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	3340      	adds	r3, #64	; 0x40
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f8b2 	bl	800d196 <GetLineCoding>
 800d032:	4603      	mov	r3, r0
 800d034:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800d036:	7bfb      	ldrb	r3, [r7, #15]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d105      	bne.n	800d048 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d042:	2102      	movs	r1, #2
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	4798      	blx	r3
  }
  return status;
 800d048:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
	...

0800d054 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d05c:	2301      	movs	r3, #1
 800d05e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d06a:	69db      	ldr	r3, [r3, #28]
 800d06c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d074:	2b04      	cmp	r3, #4
 800d076:	d877      	bhi.n	800d168 <USBH_CDC_Process+0x114>
 800d078:	a201      	add	r2, pc, #4	; (adr r2, 800d080 <USBH_CDC_Process+0x2c>)
 800d07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07e:	bf00      	nop
 800d080:	0800d095 	.word	0x0800d095
 800d084:	0800d09b 	.word	0x0800d09b
 800d088:	0800d0cb 	.word	0x0800d0cb
 800d08c:	0800d13f 	.word	0x0800d13f
 800d090:	0800d14d 	.word	0x0800d14d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	73fb      	strb	r3, [r7, #15]
    break;
 800d098:	e06d      	b.n	800d176 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d09e:	4619      	mov	r1, r3
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f897 	bl	800d1d4 <SetLineCoding>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800d0aa:	7bbb      	ldrb	r3, [r7, #14]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d104      	bne.n	800d0ba <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800d0b8:	e058      	b.n	800d16c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d055      	beq.n	800d16c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	2204      	movs	r2, #4
 800d0c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800d0c8:	e050      	b.n	800d16c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	3340      	adds	r3, #64	; 0x40
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f860 	bl	800d196 <GetLineCoding>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800d0da:	7bbb      	ldrb	r3, [r7, #14]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d126      	bne.n	800d12e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0f2:	791b      	ldrb	r3, [r3, #4]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d13b      	bne.n	800d170 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d102:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d104:	429a      	cmp	r2, r3
 800d106:	d133      	bne.n	800d170 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d112:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d114:	429a      	cmp	r2, r3
 800d116:	d12b      	bne.n	800d170 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d120:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d122:	429a      	cmp	r2, r3
 800d124:	d124      	bne.n	800d170 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f984 	bl	800d434 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800d12c:	e020      	b.n	800d170 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
 800d130:	2b01      	cmp	r3, #1
 800d132:	d01d      	beq.n	800d170 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	2204      	movs	r2, #4
 800d138:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800d13c:	e018      	b.n	800d170 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f867 	bl	800d212 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f8f8 	bl	800d33a <CDC_ProcessReception>
    break;
 800d14a:	e014      	b.n	800d176 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800d14c:	2100      	movs	r1, #0
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 fffa 	bl	800e148 <USBH_ClrFeature>
 800d154:	4603      	mov	r3, r0
 800d156:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800d158:	7bbb      	ldrb	r3, [r7, #14]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10a      	bne.n	800d174 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800d166:	e005      	b.n	800d174 <USBH_CDC_Process+0x120>

  default:
    break;
 800d168:	bf00      	nop
 800d16a:	e004      	b.n	800d176 <USBH_CDC_Process+0x122>
    break;
 800d16c:	bf00      	nop
 800d16e:	e002      	b.n	800d176 <USBH_CDC_Process+0x122>
    break;
 800d170:	bf00      	nop
 800d172:	e000      	b.n	800d176 <USBH_CDC_Process+0x122>
    break;
 800d174:	bf00      	nop

  }

  return status;
 800d176:	7bfb      	ldrb	r3, [r7, #15]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b082      	sub	sp, #8
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
 800d19e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	22a1      	movs	r2, #161	; 0xa1
 800d1a4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2221      	movs	r2, #33	; 0x21
 800d1aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2207      	movs	r2, #7
 800d1bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2207      	movs	r2, #7
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f001 f99f 	bl	800e508 <USBH_CtlReq>
 800d1ca:	4603      	mov	r3, r0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2221      	movs	r2, #33	; 0x21
 800d1e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2220      	movs	r2, #32
 800d1e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2207      	movs	r2, #7
 800d1fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	2207      	movs	r2, #7
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f001 f980 	bl	800e508 <USBH_CtlReq>
 800d208:	4603      	mov	r3, r0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b086      	sub	sp, #24
 800d216:	af02      	add	r7, sp, #8
 800d218:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d220:	69db      	ldr	r3, [r3, #28]
 800d222:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d224:	2300      	movs	r3, #0
 800d226:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d002      	beq.n	800d238 <CDC_ProcessTransmission+0x26>
 800d232:	2b02      	cmp	r3, #2
 800d234:	d025      	beq.n	800d282 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800d236:	e07c      	b.n	800d332 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	8b12      	ldrh	r2, [r2, #24]
 800d240:	4293      	cmp	r3, r2
 800d242:	d90c      	bls.n	800d25e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	69d9      	ldr	r1, [r3, #28]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8b1a      	ldrh	r2, [r3, #24]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	7b58      	ldrb	r0, [r3, #13]
 800d250:	2301      	movs	r3, #1
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	4603      	mov	r3, r0
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f001 fc49 	bl	800eaee <USBH_BulkSendData>
 800d25c:	e00c      	b.n	800d278 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800d266:	b29a      	uxth	r2, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	7b58      	ldrb	r0, [r3, #13]
 800d26c:	2301      	movs	r3, #1
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	4603      	mov	r3, r0
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f001 fc3b 	bl	800eaee <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2202      	movs	r2, #2
 800d27c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800d280:	e057      	b.n	800d332 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	7b5b      	ldrb	r3, [r3, #13]
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f00f ffd1 	bl	801d230 <USBH_LL_GetURBState>
 800d28e:	4603      	mov	r3, r0
 800d290:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800d292:	7afb      	ldrb	r3, [r7, #11]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d136      	bne.n	800d306 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	8b12      	ldrh	r2, [r2, #24]
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d90e      	bls.n	800d2c2 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	8b12      	ldrh	r2, [r2, #24]
 800d2ac:	1a9a      	subs	r2, r3, r2
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	69db      	ldr	r3, [r3, #28]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	8b12      	ldrh	r2, [r2, #24]
 800d2ba:	441a      	add	r2, r3
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	61da      	str	r2, [r3, #28]
 800d2c0:	e002      	b.n	800d2c8 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d004      	beq.n	800d2da <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d2d8:	e006      	b.n	800d2e8 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f892 	bl	800d40c <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2204      	movs	r2, #4
 800d2ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4619      	mov	r1, r3
 800d300:	f009 fa24 	bl	801674c <osMessagePut>
    break;
 800d304:	e014      	b.n	800d330 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800d306:	7afb      	ldrb	r3, [r7, #11]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d111      	bne.n	800d330 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2204      	movs	r2, #4
 800d318:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d328:	2200      	movs	r2, #0
 800d32a:	4619      	mov	r1, r3
 800d32c:	f009 fa0e 	bl	801674c <osMessagePut>
    break;
 800d330:	bf00      	nop
  }
}
 800d332:	bf00      	nop
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b086      	sub	sp, #24
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d348:	69db      	ldr	r3, [r3, #28]
 800d34a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d356:	2b03      	cmp	r3, #3
 800d358:	d002      	beq.n	800d360 <CDC_ProcessReception+0x26>
 800d35a:	2b04      	cmp	r3, #4
 800d35c:	d00e      	beq.n	800d37c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800d35e:	e051      	b.n	800d404 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	6a19      	ldr	r1, [r3, #32]
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	8b5a      	ldrh	r2, [r3, #26]
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	7b1b      	ldrb	r3, [r3, #12]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f001 fbe3 	bl	800eb38 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	2204      	movs	r2, #4
 800d376:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800d37a:	e043      	b.n	800d404 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	7b1b      	ldrb	r3, [r3, #12]
 800d380:	4619      	mov	r1, r3
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f00f ff54 	bl	801d230 <USBH_LL_GetURBState>
 800d388:	4603      	mov	r3, r0
 800d38a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800d38c:	7cfb      	ldrb	r3, [r7, #19]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d137      	bne.n	800d402 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	7b1b      	ldrb	r3, [r3, #12]
 800d396:	4619      	mov	r1, r3
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f00f feb7 	bl	801d10c <USBH_LL_GetLastXferSize>
 800d39e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d016      	beq.n	800d3d8 <CDC_ProcessReception+0x9e>
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	8b5b      	ldrh	r3, [r3, #26]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d910      	bls.n	800d3d8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	1ad2      	subs	r2, r2, r3
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	6a1a      	ldr	r2, [r3, #32]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	441a      	add	r2, r3
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	2203      	movs	r2, #3
 800d3d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d3d6:	e006      	b.n	800d3e6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f81d 	bl	800d420 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2204      	movs	r2, #4
 800d3ea:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	f009 f9a5 	bl	801674c <osMessagePut>
    break;
 800d402:	bf00      	nop
  }
}
 800d404:	bf00      	nop
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]

}
 800d414:	bf00      	nop
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]

}
 800d428:	bf00      	nop
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]

}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800d448:	b5b0      	push	{r4, r5, r7, lr}
 800d44a:	b08c      	sub	sp, #48	; 0x30
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	4613      	mov	r3, r2
 800d454:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d45c:	2302      	movs	r3, #2
 800d45e:	e03c      	b.n	800d4da <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	79fa      	ldrb	r2, [r7, #7]
 800d464:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f000 f837 	bl	800d4ec <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d003      	beq.n	800d48c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800d48c:	4a15      	ldr	r2, [pc, #84]	; (800d4e4 <USBH_Init+0x9c>)
 800d48e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d492:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d496:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800d49a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d49e:	2100      	movs	r1, #0
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f009 f940 	bl	8016726 <osMessageCreate>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800d4ae:	4b0e      	ldr	r3, [pc, #56]	; (800d4e8 <USBH_Init+0xa0>)
 800d4b0:	f107 0414 	add.w	r4, r7, #20
 800d4b4:	461d      	mov	r5, r3
 800d4b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4ba:	682b      	ldr	r3, [r5, #0]
 800d4bc:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800d4be:	f107 0314 	add.w	r3, r7, #20
 800d4c2:	68f9      	ldr	r1, [r7, #12]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f009 f837 	bl	8016538 <osThreadCreate>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f00f fd68 	bl	801cfa8 <USBH_LL_Init>

  return USBH_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3730      	adds	r7, #48	; 0x30
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	08026228 	.word	0x08026228
 800d4e8:	0802623c 	.word	0x0802623c

0800d4ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800d4f8:	e008      	b.n	800d50c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	32e0      	adds	r2, #224	; 0xe0
 800d500:	2100      	movs	r1, #0
 800d502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	3301      	adds	r3, #1
 800d50a:	60fb      	str	r3, [r7, #12]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b0e      	cmp	r3, #14
 800d510:	d9f3      	bls.n	800d4fa <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800d512:	2300      	movs	r3, #0
 800d514:	60fb      	str	r3, [r7, #12]
 800d516:	e009      	b.n	800d52c <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	4413      	add	r3, r2
 800d51e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d522:	2200      	movs	r2, #0
 800d524:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	3301      	adds	r3, #1
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d532:	d3f1      	bcc.n	800d518 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2201      	movs	r2, #1
 800d552:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2240      	movs	r2, #64	; 0x40
 800d558:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3714      	adds	r7, #20
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d57e:	b480      	push	{r7}
 800d580:	b085      	sub	sp, #20
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800d588:	2300      	movs	r3, #0
 800d58a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d017      	beq.n	800d5c2 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10f      	bne.n	800d5bc <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5a2:	1c59      	adds	r1, r3, #1
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	33dc      	adds	r3, #220	; 0xdc
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	4413      	add	r3, r2
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]
 800d5ba:	e004      	b.n	800d5c6 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d5bc:	2302      	movs	r3, #2
 800d5be:	73fb      	strb	r3, [r7, #15]
 800d5c0:	e001      	b.n	800d5c6 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3714      	adds	r7, #20
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800d5ea:	78fa      	ldrb	r2, [r7, #3]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d204      	bcs.n	800d5fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	78fa      	ldrb	r2, [r7, #3]
 800d5f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800d5f8:	e001      	b.n	800d5fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	461a      	mov	r2, r3
 800d61a:	4603      	mov	r3, r0
 800d61c:	70fb      	strb	r3, [r7, #3]
 800d61e:	460b      	mov	r3, r1
 800d620:	70bb      	strb	r3, [r7, #2]
 800d622:	4613      	mov	r3, r2
 800d624:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800d626:	2300      	movs	r3, #0
 800d628:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d634:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d636:	e025      	b.n	800d684 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d638:	7dfb      	ldrb	r3, [r7, #23]
 800d63a:	221a      	movs	r2, #26
 800d63c:	fb02 f303 	mul.w	r3, r2, r3
 800d640:	3308      	adds	r3, #8
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	4413      	add	r3, r2
 800d646:	3302      	adds	r3, #2
 800d648:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	795b      	ldrb	r3, [r3, #5]
 800d64e:	78fa      	ldrb	r2, [r7, #3]
 800d650:	429a      	cmp	r2, r3
 800d652:	d002      	beq.n	800d65a <USBH_FindInterface+0x4e>
 800d654:	78fb      	ldrb	r3, [r7, #3]
 800d656:	2bff      	cmp	r3, #255	; 0xff
 800d658:	d111      	bne.n	800d67e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800d65e:	78ba      	ldrb	r2, [r7, #2]
 800d660:	429a      	cmp	r2, r3
 800d662:	d002      	beq.n	800d66a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d664:	78bb      	ldrb	r3, [r7, #2]
 800d666:	2bff      	cmp	r3, #255	; 0xff
 800d668:	d109      	bne.n	800d67e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800d66e:	787a      	ldrb	r2, [r7, #1]
 800d670:	429a      	cmp	r2, r3
 800d672:	d002      	beq.n	800d67a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d674:	787b      	ldrb	r3, [r7, #1]
 800d676:	2bff      	cmp	r3, #255	; 0xff
 800d678:	d101      	bne.n	800d67e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
 800d67c:	e006      	b.n	800d68c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d67e:	7dfb      	ldrb	r3, [r7, #23]
 800d680:	3301      	adds	r3, #1
 800d682:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d684:	7dfb      	ldrb	r3, [r7, #23]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d9d6      	bls.n	800d638 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d68a:	23ff      	movs	r3, #255	; 0xff
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	371c      	adds	r7, #28
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f00f fcbd 	bl	801d020 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800d6a6:	2101      	movs	r1, #1
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f00f fdd4 	bl	801d256 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af04      	add	r7, sp, #16
 800d6be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 fb7e 	bl	800ddca <USBH_IsPortEnabled>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10c      	bne.n	800d6ee <USBH_Process+0x36>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d007      	beq.n	800d6ee <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d002      	beq.n	800d6ee <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2203      	movs	r2, #3
 800d6ec:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b0b      	cmp	r3, #11
 800d6f6:	f200 81ab 	bhi.w	800da50 <USBH_Process+0x398>
 800d6fa:	a201      	add	r2, pc, #4	; (adr r2, 800d700 <USBH_Process+0x48>)
 800d6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d700:	0800d731 	.word	0x0800d731
 800d704:	0800d76f 	.word	0x0800d76f
 800d708:	0800d783 	.word	0x0800d783
 800d70c:	0800da2b 	.word	0x0800da2b
 800d710:	0800da51 	.word	0x0800da51
 800d714:	0800d82d 	.word	0x0800d82d
 800d718:	0800d9c5 	.word	0x0800d9c5
 800d71c:	0800d85d 	.word	0x0800d85d
 800d720:	0800d899 	.word	0x0800d899
 800d724:	0800d8d3 	.word	0x0800d8d3
 800d728:	0800d91b 	.word	0x0800d91b
 800d72c:	0800da13 	.word	0x0800da13
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d736:	b2db      	uxtb	r3, r3
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f000 818b 	beq.w	800da54 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2201      	movs	r2, #1
 800d742:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800d744:	20c8      	movs	r0, #200	; 0xc8
 800d746:	f00f fdd0 	bl	801d2ea <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f00f fcc3 	bl	801d0d6 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d764:	2200      	movs	r2, #0
 800d766:	4619      	mov	r1, r3
 800d768:	f008 fff0 	bl	801674c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d76c:	e172      	b.n	800da54 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d774:	2b01      	cmp	r3, #1
 800d776:	f040 816f 	bne.w	800da58 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2202      	movs	r2, #2
 800d77e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d780:	e16a      	b.n	800da58 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800d782:	2064      	movs	r0, #100	; 0x64
 800d784:	f00f fdb1 	bl	801d2ea <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f00f fc7f 	bl	801d08c <USBH_LL_GetSpeed>
 800d78e:	4603      	mov	r3, r0
 800d790:	461a      	mov	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2205      	movs	r2, #5
 800d79c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800d79e:	2100      	movs	r1, #0
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f001 fa16 	bl	800ebd2 <USBH_AllocPipe>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800d7ae:	2180      	movs	r1, #128	; 0x80
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f001 fa0e 	bl	800ebd2 <USBH_AllocPipe>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	7919      	ldrb	r1, [r3, #4]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800d7d2:	b292      	uxth	r2, r2
 800d7d4:	9202      	str	r2, [sp, #8]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	9201      	str	r2, [sp, #4]
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2280      	movs	r2, #128	; 0x80
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 f9c7 	bl	800eb74 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	7959      	ldrb	r1, [r3, #5]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800d7fa:	b292      	uxth	r2, r2
 800d7fc:	9202      	str	r2, [sp, #8]
 800d7fe:	2200      	movs	r2, #0
 800d800:	9201      	str	r2, [sp, #4]
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	4603      	mov	r3, r0
 800d806:	2200      	movs	r2, #0
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f001 f9b3 	bl	800eb74 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d822:	2200      	movs	r2, #0
 800d824:	4619      	mov	r1, r3
 800d826:	f008 ff91 	bl	801674c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d82a:	e120      	b.n	800da6e <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 f923 	bl	800da78 <USBH_HandleEnum>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	f040 8111 	bne.w	800da5c <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d103      	bne.n	800d854 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2208      	movs	r2, #8
 800d850:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800d852:	e103      	b.n	800da5c <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2207      	movs	r2, #7
 800d858:	701a      	strb	r2, [r3, #0]
    break;
 800d85a:	e0ff      	b.n	800da5c <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d862:	2b00      	cmp	r3, #0
 800d864:	f000 80fc 	beq.w	800da60 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d86e:	2101      	movs	r1, #1
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2208      	movs	r2, #8
 800d878:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2205      	movs	r2, #5
 800d87e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d88e:	2200      	movs	r2, #0
 800d890:	4619      	mov	r1, r3
 800d892:	f008 ff5b 	bl	801674c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d896:	e0e3      	b.n	800da60 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 fc09 	bl	800e0ba <USBH_SetCfg>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d102      	bne.n	800d8b4 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2209      	movs	r2, #9
 800d8b2:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	f008 ff3e 	bl	801674c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d8d0:	e0cd      	b.n	800da6e <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800d8d8:	f003 0320 	and.w	r3, r3, #32
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00a      	beq.n	800d8f6 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d8e0:	2101      	movs	r1, #1
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fc0c 	bl	800e100 <USBH_SetFeature>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d106      	bne.n	800d8fc <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	220a      	movs	r2, #10
 800d8f2:	701a      	strb	r2, [r3, #0]
 800d8f4:	e002      	b.n	800d8fc <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	220a      	movs	r2, #10
 800d8fa:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d910:	2200      	movs	r2, #0
 800d912:	4619      	mov	r1, r3
 800d914:	f008 ff1a 	bl	801674c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d918:	e0a9      	b.n	800da6e <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d920:	2b00      	cmp	r3, #0
 800d922:	d040      	beq.n	800d9a6 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d92c:	2300      	movs	r3, #0
 800d92e:	73fb      	strb	r3, [r7, #15]
 800d930:	e017      	b.n	800d962 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	33dc      	adds	r3, #220	; 0xdc
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	4413      	add	r3, r2
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	791a      	ldrb	r2, [r3, #4]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800d946:	429a      	cmp	r2, r3
 800d948:	d108      	bne.n	800d95c <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	33dc      	adds	r3, #220	; 0xdc
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	4413      	add	r3, r2
 800d954:	685a      	ldr	r2, [r3, #4]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
 800d95e:	3301      	adds	r3, #1
 800d960:	73fb      	strb	r3, [r7, #15]
 800d962:	7bfb      	ldrb	r3, [r7, #15]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d0e4      	beq.n	800d932 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d016      	beq.n	800d9a0 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	4798      	blx	r3
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d109      	bne.n	800d998 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2206      	movs	r2, #6
 800d988:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d990:	2103      	movs	r1, #3
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	4798      	blx	r3
 800d996:	e006      	b.n	800d9a6 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	220d      	movs	r2, #13
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	e002      	b.n	800d9a6 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	220d      	movs	r2, #13
 800d9a4:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2205      	movs	r2, #5
 800d9aa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	4619      	mov	r1, r3
 800d9be:	f008 fec5 	bl	801674c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d9c2:	e054      	b.n	800da6e <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00f      	beq.n	800d9ee <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d9d4:	691b      	ldr	r3, [r3, #16]
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	4798      	blx	r3
 800d9da:	4603      	mov	r3, r0
 800d9dc:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800d9de:	7bbb      	ldrb	r3, [r7, #14]
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d13e      	bne.n	800da64 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	220b      	movs	r2, #11
 800d9ea:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800d9ec:	e03a      	b.n	800da64 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	220d      	movs	r2, #13
 800d9f2:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2205      	movs	r2, #5
 800d9f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800da08:	2200      	movs	r2, #0
 800da0a:	4619      	mov	r1, r3
 800da0c:	f008 fe9e 	bl	801674c <osMessagePut>
    break;
 800da10:	e028      	b.n	800da64 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d025      	beq.n	800da68 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	4798      	blx	r3
    }
    break;
 800da28:	e01e      	b.n	800da68 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff fd5e 	bl	800d4ec <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800da36:	2b00      	cmp	r3, #0
 800da38:	d018      	beq.n	800da6c <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800da4e:	e00d      	b.n	800da6c <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800da50:	bf00      	nop
 800da52:	e00c      	b.n	800da6e <USBH_Process+0x3b6>
    break;
 800da54:	bf00      	nop
 800da56:	e00a      	b.n	800da6e <USBH_Process+0x3b6>
    break;
 800da58:	bf00      	nop
 800da5a:	e008      	b.n	800da6e <USBH_Process+0x3b6>
    break;
 800da5c:	bf00      	nop
 800da5e:	e006      	b.n	800da6e <USBH_Process+0x3b6>
    break;
 800da60:	bf00      	nop
 800da62:	e004      	b.n	800da6e <USBH_Process+0x3b6>
    break;
 800da64:	bf00      	nop
 800da66:	e002      	b.n	800da6e <USBH_Process+0x3b6>
    break;
 800da68:	bf00      	nop
 800da6a:	e000      	b.n	800da6e <USBH_Process+0x3b6>
    break;
 800da6c:	bf00      	nop
  }
 return USBH_OK;
 800da6e:	2300      	movs	r3, #0
}
 800da70:	4618      	mov	r0, r3
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b088      	sub	sp, #32
 800da7c:	af04      	add	r7, sp, #16
 800da7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800da80:	2301      	movs	r3, #1
 800da82:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	785b      	ldrb	r3, [r3, #1]
 800da88:	2b07      	cmp	r3, #7
 800da8a:	f200 8132 	bhi.w	800dcf2 <USBH_HandleEnum+0x27a>
 800da8e:	a201      	add	r2, pc, #4	; (adr r2, 800da94 <USBH_HandleEnum+0x1c>)
 800da90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da94:	0800dab5 	.word	0x0800dab5
 800da98:	0800db27 	.word	0x0800db27
 800da9c:	0800db3f 	.word	0x0800db3f
 800daa0:	0800dbb5 	.word	0x0800dbb5
 800daa4:	0800dbcd 	.word	0x0800dbcd
 800daa8:	0800dbeb 	.word	0x0800dbeb
 800daac:	0800dc57 	.word	0x0800dc57
 800dab0:	0800dca7 	.word	0x0800dca7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800dab4:	2108      	movs	r1, #8
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 fa2f 	bl	800df1a <USBH_Get_DevDesc>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f040 8119 	bne.w	800dcf6 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	7919      	ldrb	r1, [r3, #4]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800dae8:	b292      	uxth	r2, r2
 800daea:	9202      	str	r2, [sp, #8]
 800daec:	2200      	movs	r2, #0
 800daee:	9201      	str	r2, [sp, #4]
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	4603      	mov	r3, r0
 800daf4:	2280      	movs	r2, #128	; 0x80
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f001 f83c 	bl	800eb74 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	7959      	ldrb	r1, [r3, #5]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800db10:	b292      	uxth	r2, r2
 800db12:	9202      	str	r2, [sp, #8]
 800db14:	2200      	movs	r2, #0
 800db16:	9201      	str	r2, [sp, #4]
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	4603      	mov	r3, r0
 800db1c:	2200      	movs	r2, #0
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f001 f828 	bl	800eb74 <USBH_OpenPipe>

    }
    break;
 800db24:	e0e7      	b.n	800dcf6 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800db26:	2112      	movs	r1, #18
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f9f6 	bl	800df1a <USBH_Get_DevDesc>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	f040 80e2 	bne.w	800dcfa <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2202      	movs	r2, #2
 800db3a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800db3c:	e0dd      	b.n	800dcfa <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800db3e:	2101      	movs	r1, #1
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 fa96 	bl	800e072 <USBH_SetAddress>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f040 80d8 	bne.w	800dcfe <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800db4e:	2002      	movs	r0, #2
 800db50:	f00f fbcb 	bl	801d2ea <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2203      	movs	r2, #3
 800db60:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	7919      	ldrb	r1, [r3, #4]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800db76:	b292      	uxth	r2, r2
 800db78:	9202      	str	r2, [sp, #8]
 800db7a:	2200      	movs	r2, #0
 800db7c:	9201      	str	r2, [sp, #4]
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	4603      	mov	r3, r0
 800db82:	2280      	movs	r2, #128	; 0x80
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 fff5 	bl	800eb74 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	7959      	ldrb	r1, [r3, #5]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800db9e:	b292      	uxth	r2, r2
 800dba0:	9202      	str	r2, [sp, #8]
 800dba2:	2200      	movs	r2, #0
 800dba4:	9201      	str	r2, [sp, #4]
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2200      	movs	r2, #0
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 ffe1 	bl	800eb74 <USBH_OpenPipe>
    }
    break;
 800dbb2:	e0a4      	b.n	800dcfe <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800dbb4:	2109      	movs	r1, #9
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 f9d7 	bl	800df6a <USBH_Get_CfgDesc>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f040 809f 	bne.w	800dd02 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2204      	movs	r2, #4
 800dbc8:	705a      	strb	r2, [r3, #1]
    }
    break;
 800dbca:	e09a      	b.n	800dd02 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 f9c8 	bl	800df6a <USBH_Get_CfgDesc>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f040 8092 	bne.w	800dd06 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2205      	movs	r2, #5
 800dbe6:	705a      	strb	r2, [r3, #1]
    }
    break;
 800dbe8:	e08d      	b.n	800dd06 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d01e      	beq.n	800dc32 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800dc00:	23ff      	movs	r3, #255	; 0xff
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f9d5 	bl	800dfb2 <USBH_Get_StringDesc>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d17d      	bne.n	800dd0a <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2206      	movs	r2, #6
 800dc12:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2205      	movs	r2, #5
 800dc18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc28:	2200      	movs	r2, #0
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	f008 fd8e 	bl	801674c <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800dc30:	e06b      	b.n	800dd0a <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2206      	movs	r2, #6
 800dc36:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2205      	movs	r2, #5
 800dc3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	4619      	mov	r1, r3
 800dc50:	f008 fd7c 	bl	801674c <osMessagePut>
    break;
 800dc54:	e059      	b.n	800dd0a <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d010      	beq.n	800dc82 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800dc6c:	23ff      	movs	r3, #255	; 0xff
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f99f 	bl	800dfb2 <USBH_Get_StringDesc>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d149      	bne.n	800dd0e <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2207      	movs	r2, #7
 800dc7e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800dc80:	e045      	b.n	800dd0e <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2207      	movs	r2, #7
 800dc86:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2205      	movs	r2, #5
 800dc8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	4619      	mov	r1, r3
 800dca0:	f008 fd54 	bl	801674c <osMessagePut>
    break;
 800dca4:	e033      	b.n	800dd0e <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00f      	beq.n	800dcd0 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800dcbc:	23ff      	movs	r3, #255	; 0xff
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f977 	bl	800dfb2 <USBH_Get_StringDesc>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d123      	bne.n	800dd12 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800dcca:	2300      	movs	r3, #0
 800dccc:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800dcce:	e020      	b.n	800dd12 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2205      	movs	r2, #5
 800dcd8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dce8:	2200      	movs	r2, #0
 800dcea:	4619      	mov	r1, r3
 800dcec:	f008 fd2e 	bl	801674c <osMessagePut>
    break;
 800dcf0:	e00f      	b.n	800dd12 <USBH_HandleEnum+0x29a>

  default:
    break;
 800dcf2:	bf00      	nop
 800dcf4:	e00e      	b.n	800dd14 <USBH_HandleEnum+0x29c>
    break;
 800dcf6:	bf00      	nop
 800dcf8:	e00c      	b.n	800dd14 <USBH_HandleEnum+0x29c>
    break;
 800dcfa:	bf00      	nop
 800dcfc:	e00a      	b.n	800dd14 <USBH_HandleEnum+0x29c>
    break;
 800dcfe:	bf00      	nop
 800dd00:	e008      	b.n	800dd14 <USBH_HandleEnum+0x29c>
    break;
 800dd02:	bf00      	nop
 800dd04:	e006      	b.n	800dd14 <USBH_HandleEnum+0x29c>
    break;
 800dd06:	bf00      	nop
 800dd08:	e004      	b.n	800dd14 <USBH_HandleEnum+0x29c>
    break;
 800dd0a:	bf00      	nop
 800dd0c:	e002      	b.n	800dd14 <USBH_HandleEnum+0x29c>
    break;
 800dd0e:	bf00      	nop
 800dd10:	e000      	b.n	800dd14 <USBH_HandleEnum+0x29c>
    break;
 800dd12:	bf00      	nop
  }
  return Status;
 800dd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop

0800dd20 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	683a      	ldr	r2, [r7, #0]
 800dd2e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800dd32:	bf00      	nop
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b082      	sub	sp, #8
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f804 	bl	800dd62 <USBH_HandleSof>
}
 800dd5a:	bf00      	nop
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b082      	sub	sp, #8
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	2b0b      	cmp	r3, #11
 800dd72:	d10a      	bne.n	800dd8a <USBH_HandleSof+0x28>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d005      	beq.n	800dd8a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	4798      	blx	r3
  }
}
 800dd8a:	bf00      	nop
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b083      	sub	sp, #12
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800dda2:	bf00      	nop
}
 800dda4:	370c      	adds	r7, #12
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr

0800ddae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800ddae:	b480      	push	{r7}
 800ddb0:	b083      	sub	sp, #12
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800ddbe:	bf00      	nop
}
 800ddc0:	370c      	adds	r7, #12
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr

0800ddca <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800ddca:	b480      	push	{r7}
 800ddcc:	b083      	sub	sp, #12
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10f      	bne.n	800de16 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00e      	beq.n	800de26 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800de0e:	2104      	movs	r1, #4
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	4798      	blx	r3
 800de14:	e007      	b.n	800de26 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d102      	bne.n	800de26 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2202      	movs	r2, #2
 800de24:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2201      	movs	r2, #1
 800de2a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de3a:	2200      	movs	r2, #0
 800de3c:	4619      	mov	r1, r3
 800de3e:	f008 fc85 	bl	801674c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f00f f8fe 	bl	801d056 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	791b      	ldrb	r3, [r3, #4]
 800de5e:	4619      	mov	r1, r3
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 fed4 	bl	800ec0e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	795b      	ldrb	r3, [r3, #5]
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fece 	bl	800ec0e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800de80:	2b00      	cmp	r3, #0
 800de82:	d005      	beq.n	800de90 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800de8a:	2105      	movs	r1, #5
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f00f f8c5 	bl	801d020 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2203      	movs	r2, #3
 800de9a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2201      	movs	r2, #1
 800dea0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800deb0:	2200      	movs	r2, #0
 800deb2:	4619      	mov	r1, r3
 800deb4:	f008 fc4a 	bl	801674c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b086      	sub	sp, #24
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800ded0:	f107 030c 	add.w	r3, r7, #12
 800ded4:	f04f 32ff 	mov.w	r2, #4294967295
 800ded8:	4618      	mov	r0, r3
 800deda:	f008 fc77 	bl	80167cc <osMessageGet>
    if(event.status == osEventMessage)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b10      	cmp	r3, #16
 800dee2:	d1f2      	bne.n	800deca <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7ff fbe7 	bl	800d6b8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800deea:	e7ee      	b.n	800deca <USBH_Process_OS+0x8>

0800deec <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2201      	movs	r2, #1
 800def8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df08:	2200      	movs	r2, #0
 800df0a:	4619      	mov	r1, r3
 800df0c:	f008 fc1e 	bl	801674c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b086      	sub	sp, #24
 800df1e:	af02      	add	r7, sp, #8
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	460b      	mov	r3, r1
 800df24:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800df2c:	78fb      	ldrb	r3, [r7, #3]
 800df2e:	b29b      	uxth	r3, r3
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	4613      	mov	r3, r2
 800df34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df38:	2100      	movs	r1, #0
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f864 	bl	800e008 <USBH_GetDescriptor>
 800df40:	4603      	mov	r3, r0
 800df42:	73fb      	strb	r3, [r7, #15]
 800df44:	7bfb      	ldrb	r3, [r7, #15]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d10a      	bne.n	800df60 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f203 3022 	addw	r0, r3, #802	; 0x322
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800df56:	78fa      	ldrb	r2, [r7, #3]
 800df58:	b292      	uxth	r2, r2
 800df5a:	4619      	mov	r1, r3
 800df5c:	f000 f918 	bl	800e190 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800df60:	7bfb      	ldrb	r3, [r7, #15]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b086      	sub	sp, #24
 800df6e:	af02      	add	r7, sp, #8
 800df70:	6078      	str	r0, [r7, #4]
 800df72:	460b      	mov	r3, r1
 800df74:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	331c      	adds	r3, #28
 800df7a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800df7c:	887b      	ldrh	r3, [r7, #2]
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df86:	2100      	movs	r1, #0
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f83d 	bl	800e008 <USBH_GetDescriptor>
 800df8e:	4603      	mov	r3, r0
 800df90:	72fb      	strb	r3, [r7, #11]
 800df92:	7afb      	ldrb	r3, [r7, #11]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d107      	bne.n	800dfa8 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800df9e:	887a      	ldrh	r2, [r7, #2]
 800dfa0:	68f9      	ldr	r1, [r7, #12]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f000 f964 	bl	800e270 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800dfa8:	7afb      	ldrb	r3, [r7, #11]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b088      	sub	sp, #32
 800dfb6:	af02      	add	r7, sp, #8
 800dfb8:	60f8      	str	r0, [r7, #12]
 800dfba:	607a      	str	r2, [r7, #4]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	72fb      	strb	r3, [r7, #11]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800dfc6:	7afb      	ldrb	r3, [r7, #11]
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800dfce:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800dfd6:	893b      	ldrh	r3, [r7, #8]
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	460b      	mov	r3, r1
 800dfdc:	2100      	movs	r1, #0
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f000 f812 	bl	800e008 <USBH_GetDescriptor>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	75fb      	strb	r3, [r7, #23]
 800dfe8:	7dfb      	ldrb	r3, [r7, #23]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d107      	bne.n	800dffe <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dff4:	893a      	ldrh	r2, [r7, #8]
 800dff6:	6879      	ldr	r1, [r7, #4]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f000 fa37 	bl	800e46c <USBH_ParseStringDesc>
  }
  return status;
 800dffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	607b      	str	r3, [r7, #4]
 800e012:	460b      	mov	r3, r1
 800e014:	72fb      	strb	r3, [r7, #11]
 800e016:	4613      	mov	r3, r2
 800e018:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	789b      	ldrb	r3, [r3, #2]
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d11c      	bne.n	800e05c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e022:	7afb      	ldrb	r3, [r7, #11]
 800e024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e028:	b2da      	uxtb	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2206      	movs	r2, #6
 800e032:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	893a      	ldrh	r2, [r7, #8]
 800e038:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e03a:	893b      	ldrh	r3, [r7, #8]
 800e03c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e044:	d104      	bne.n	800e050 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f240 4209 	movw	r2, #1033	; 0x409
 800e04c:	829a      	strh	r2, [r3, #20]
 800e04e:	e002      	b.n	800e056 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2200      	movs	r2, #0
 800e054:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	8b3a      	ldrh	r2, [r7, #24]
 800e05a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800e05c:	8b3b      	ldrh	r3, [r7, #24]
 800e05e:	461a      	mov	r2, r3
 800e060:	6879      	ldr	r1, [r7, #4]
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f000 fa50 	bl	800e508 <USBH_CtlReq>
 800e068:	4603      	mov	r3, r0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b082      	sub	sp, #8
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	460b      	mov	r3, r1
 800e07c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	789b      	ldrb	r3, [r3, #2]
 800e082:	2b01      	cmp	r3, #1
 800e084:	d10f      	bne.n	800e0a6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2205      	movs	r2, #5
 800e090:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e092:	78fb      	ldrb	r3, [r7, #3]
 800e094:	b29a      	uxth	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fa2c 	bl	800e508 <USBH_CtlReq>
 800e0b0:	4603      	mov	r3, r0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	789b      	ldrb	r3, [r3, #2]
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d10e      	bne.n	800e0ec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2209      	movs	r2, #9
 800e0d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	887a      	ldrh	r2, [r7, #2]
 800e0de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fa09 	bl	800e508 <USBH_CtlReq>
 800e0f6:	4603      	mov	r3, r0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	460b      	mov	r3, r1
 800e10a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	789b      	ldrb	r3, [r3, #2]
 800e110:	2b01      	cmp	r3, #1
 800e112:	d10f      	bne.n	800e134 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2203      	movs	r2, #3
 800e11e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e120:	78fb      	ldrb	r3, [r7, #3]
 800e122:	b29a      	uxth	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e134:	2200      	movs	r2, #0
 800e136:	2100      	movs	r1, #0
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 f9e5 	bl	800e508 <USBH_CtlReq>
 800e13e:	4603      	mov	r3, r0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	460b      	mov	r3, r1
 800e152:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	789b      	ldrb	r3, [r3, #2]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d10f      	bne.n	800e17c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2202      	movs	r2, #2
 800e160:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2201      	movs	r2, #1
 800e166:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e16e:	78fb      	ldrb	r3, [r7, #3]
 800e170:	b29a      	uxth	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800e17c:	2200      	movs	r2, #0
 800e17e:	2100      	movs	r1, #0
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 f9c1 	bl	800e508 <USBH_CtlReq>
 800e186:	4603      	mov	r3, r0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	60f8      	str	r0, [r7, #12]
 800e198:	60b9      	str	r1, [r7, #8]
 800e19a:	4613      	mov	r3, r2
 800e19c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	781a      	ldrb	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	785a      	ldrb	r2, [r3, #1]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	3302      	adds	r3, #2
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	3303      	adds	r3, #3
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	021b      	lsls	r3, r3, #8
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	791a      	ldrb	r2, [r3, #4]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	795a      	ldrb	r2, [r3, #5]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	799a      	ldrb	r2, [r3, #6]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	79da      	ldrb	r2, [r3, #7]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800e1ea:	88fb      	ldrh	r3, [r7, #6]
 800e1ec:	2b08      	cmp	r3, #8
 800e1ee:	d939      	bls.n	800e264 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	3309      	adds	r3, #9
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	021b      	lsls	r3, r3, #8
 800e202:	b29b      	uxth	r3, r3
 800e204:	4313      	orrs	r3, r2
 800e206:	b29a      	uxth	r2, r3
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	330a      	adds	r3, #10
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	b29a      	uxth	r2, r3
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	330b      	adds	r3, #11
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	021b      	lsls	r3, r3, #8
 800e21e:	b29b      	uxth	r3, r3
 800e220:	4313      	orrs	r3, r2
 800e222:	b29a      	uxth	r2, r3
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	330c      	adds	r3, #12
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	b29a      	uxth	r2, r3
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	330d      	adds	r3, #13
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	b29b      	uxth	r3, r3
 800e238:	021b      	lsls	r3, r3, #8
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	4313      	orrs	r3, r2
 800e23e:	b29a      	uxth	r2, r3
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	7b9a      	ldrb	r2, [r3, #14]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	7bda      	ldrb	r2, [r3, #15]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	7c1a      	ldrb	r2, [r3, #16]
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	7c5a      	ldrb	r2, [r3, #17]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	745a      	strb	r2, [r3, #17]
  }
}
 800e264:	bf00      	nop
 800e266:	3714      	adds	r7, #20
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08a      	sub	sp, #40	; 0x28
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	4613      	mov	r3, r2
 800e27c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e282:	2300      	movs	r3, #0
 800e284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e288:	2300      	movs	r3, #0
 800e28a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	781a      	ldrb	r2, [r3, #0]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	785a      	ldrb	r2, [r3, #1]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	3302      	adds	r3, #2
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	3303      	adds	r3, #3
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	021b      	lsls	r3, r3, #8
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	791a      	ldrb	r2, [r3, #4]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	795a      	ldrb	r2, [r3, #5]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	799a      	ldrb	r2, [r3, #6]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	79da      	ldrb	r2, [r3, #7]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	7a1a      	ldrb	r2, [r3, #8]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e2e6:	88fb      	ldrh	r3, [r7, #6]
 800e2e8:	2b09      	cmp	r3, #9
 800e2ea:	d95f      	bls.n	800e3ac <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e2ec:	2309      	movs	r3, #9
 800e2ee:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e2f4:	e051      	b.n	800e39a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e2f6:	f107 0316 	add.w	r3, r7, #22
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2fe:	f000 f8e8 	bl	800e4d2 <USBH_GetNextDesc>
 800e302:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	785b      	ldrb	r3, [r3, #1]
 800e308:	2b04      	cmp	r3, #4
 800e30a:	d146      	bne.n	800e39a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e30c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e310:	221a      	movs	r2, #26
 800e312:	fb02 f303 	mul.w	r3, r2, r3
 800e316:	3308      	adds	r3, #8
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	4413      	add	r3, r2
 800e31c:	3302      	adds	r3, #2
 800e31e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800e320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e322:	69f8      	ldr	r0, [r7, #28]
 800e324:	f000 f846 	bl	800e3b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e328:	2300      	movs	r3, #0
 800e32a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e32e:	2300      	movs	r3, #0
 800e330:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e332:	e022      	b.n	800e37a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800e334:	f107 0316 	add.w	r3, r7, #22
 800e338:	4619      	mov	r1, r3
 800e33a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e33c:	f000 f8c9 	bl	800e4d2 <USBH_GetNextDesc>
 800e340:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e344:	785b      	ldrb	r3, [r3, #1]
 800e346:	2b05      	cmp	r3, #5
 800e348:	d117      	bne.n	800e37a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e34a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e34e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e352:	3201      	adds	r2, #1
 800e354:	00d2      	lsls	r2, r2, #3
 800e356:	211a      	movs	r1, #26
 800e358:	fb01 f303 	mul.w	r3, r1, r3
 800e35c:	4413      	add	r3, r2
 800e35e:	3308      	adds	r3, #8
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	4413      	add	r3, r2
 800e364:	3304      	adds	r3, #4
 800e366:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800e368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e36a:	69b8      	ldr	r0, [r7, #24]
 800e36c:	f000 f851 	bl	800e412 <USBH_ParseEPDesc>
            ep_ix++;
 800e370:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e374:	3301      	adds	r3, #1
 800e376:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	791b      	ldrb	r3, [r3, #4]
 800e37e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e382:	429a      	cmp	r2, r3
 800e384:	d204      	bcs.n	800e390 <USBH_ParseCfgDesc+0x120>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	885a      	ldrh	r2, [r3, #2]
 800e38a:	8afb      	ldrh	r3, [r7, #22]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d8d1      	bhi.n	800e334 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e394:	3301      	adds	r3, #1
 800e396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e39a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d804      	bhi.n	800e3ac <USBH_ParseCfgDesc+0x13c>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	885a      	ldrh	r2, [r3, #2]
 800e3a6:	8afb      	ldrh	r3, [r7, #22]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d8a4      	bhi.n	800e2f6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e3ac:	bf00      	nop
 800e3ae:	3728      	adds	r7, #40	; 0x28
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	781a      	ldrb	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	785a      	ldrb	r2, [r3, #1]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	789a      	ldrb	r2, [r3, #2]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	78da      	ldrb	r2, [r3, #3]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	791a      	ldrb	r2, [r3, #4]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	795a      	ldrb	r2, [r3, #5]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	799a      	ldrb	r2, [r3, #6]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	79da      	ldrb	r2, [r3, #7]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	7a1a      	ldrb	r2, [r3, #8]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	721a      	strb	r2, [r3, #8]
}
 800e406:	bf00      	nop
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800e412:	b480      	push	{r7}
 800e414:	b083      	sub	sp, #12
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	781a      	ldrb	r2, [r3, #0]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	785a      	ldrb	r2, [r3, #1]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	789a      	ldrb	r2, [r3, #2]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	78da      	ldrb	r2, [r3, #3]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	3304      	adds	r3, #4
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	b29a      	uxth	r2, r3
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	3305      	adds	r3, #5
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	021b      	lsls	r3, r3, #8
 800e44e:	b29b      	uxth	r3, r3
 800e450:	4313      	orrs	r3, r2
 800e452:	b29a      	uxth	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	799a      	ldrb	r2, [r3, #6]
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	719a      	strb	r2, [r3, #6]
}
 800e460:	bf00      	nop
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b087      	sub	sp, #28
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4613      	mov	r3, r2
 800e478:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	3301      	adds	r3, #1
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	2b03      	cmp	r3, #3
 800e482:	d120      	bne.n	800e4c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	1e9a      	subs	r2, r3, #2
 800e48a:	88fb      	ldrh	r3, [r7, #6]
 800e48c:	4293      	cmp	r3, r2
 800e48e:	bf28      	it	cs
 800e490:	4613      	movcs	r3, r2
 800e492:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	3302      	adds	r3, #2
 800e498:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e49a:	2300      	movs	r3, #0
 800e49c:	82fb      	strh	r3, [r7, #22]
 800e49e:	e00b      	b.n	800e4b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e4a0:	8afb      	ldrh	r3, [r7, #22]
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	781a      	ldrb	r2, [r3, #0]
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e4b2:	8afb      	ldrh	r3, [r7, #22]
 800e4b4:	3302      	adds	r3, #2
 800e4b6:	82fb      	strh	r3, [r7, #22]
 800e4b8:	8afa      	ldrh	r2, [r7, #22]
 800e4ba:	8abb      	ldrh	r3, [r7, #20]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d3ef      	bcc.n	800e4a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	701a      	strb	r2, [r3, #0]
  }
}
 800e4c6:	bf00      	nop
 800e4c8:	371c      	adds	r7, #28
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr

0800e4d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800e4d2:	b480      	push	{r7}
 800e4d4:	b085      	sub	sp, #20
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	881a      	ldrh	r2, [r3, #0]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	4413      	add	r3, r2
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	4613      	mov	r3, r2
 800e514:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e516:	2301      	movs	r3, #1
 800e518:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	789b      	ldrb	r3, [r3, #2]
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d002      	beq.n	800e528 <USBH_CtlReq+0x20>
 800e522:	2b02      	cmp	r3, #2
 800e524:	d01d      	beq.n	800e562 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800e526:	e042      	b.n	800e5ae <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	88fa      	ldrh	r2, [r7, #6]
 800e532:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2201      	movs	r2, #1
 800e538:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2202      	movs	r2, #2
 800e53e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800e540:	2301      	movs	r3, #1
 800e542:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2203      	movs	r2, #3
 800e548:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e558:	2200      	movs	r2, #0
 800e55a:	4619      	mov	r1, r3
 800e55c:	f008 f8f6 	bl	801674c <osMessagePut>
    break;
 800e560:	e025      	b.n	800e5ae <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f000 f828 	bl	800e5b8 <USBH_HandleControl>
 800e568:	4603      	mov	r3, r0
 800e56a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d108      	bne.n	800e584 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2201      	movs	r2, #1
 800e576:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2200      	movs	r2, #0
 800e57c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800e57e:	2300      	movs	r3, #0
 800e580:	75fb      	strb	r3, [r7, #23]
    break;
 800e582:	e013      	b.n	800e5ac <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800e584:	7dfb      	ldrb	r3, [r7, #23]
 800e586:	2b03      	cmp	r3, #3
 800e588:	d108      	bne.n	800e59c <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2201      	movs	r2, #1
 800e58e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2200      	movs	r2, #0
 800e594:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800e596:	2303      	movs	r3, #3
 800e598:	75fb      	strb	r3, [r7, #23]
    break;
 800e59a:	e007      	b.n	800e5ac <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800e59c:	7dfb      	ldrb	r3, [r7, #23]
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d104      	bne.n	800e5ac <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	75fb      	strb	r3, [r7, #23]
    break;
 800e5ac:	bf00      	nop
  }
  return status;
 800e5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af02      	add	r7, sp, #8
 800e5be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	7e1b      	ldrb	r3, [r3, #24]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	2b0a      	cmp	r3, #10
 800e5d0:	f200 821f 	bhi.w	800ea12 <USBH_HandleControl+0x45a>
 800e5d4:	a201      	add	r2, pc, #4	; (adr r2, 800e5dc <USBH_HandleControl+0x24>)
 800e5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5da:	bf00      	nop
 800e5dc:	0800e609 	.word	0x0800e609
 800e5e0:	0800e623 	.word	0x0800e623
 800e5e4:	0800e6c5 	.word	0x0800e6c5
 800e5e8:	0800e6eb 	.word	0x0800e6eb
 800e5ec:	0800e777 	.word	0x0800e777
 800e5f0:	0800e7a3 	.word	0x0800e7a3
 800e5f4:	0800e865 	.word	0x0800e865
 800e5f8:	0800e887 	.word	0x0800e887
 800e5fc:	0800e919 	.word	0x0800e919
 800e600:	0800e941 	.word	0x0800e941
 800e604:	0800e9d3 	.word	0x0800e9d3
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f103 0110 	add.w	r1, r3, #16
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	795b      	ldrb	r3, [r3, #5]
 800e612:	461a      	mov	r2, r3
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 fa0d 	bl	800ea34 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2202      	movs	r2, #2
 800e61e:	761a      	strb	r2, [r3, #24]
    break;
 800e620:	e202      	b.n	800ea28 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	795b      	ldrb	r3, [r3, #5]
 800e626:	4619      	mov	r1, r3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f00e fe01 	bl	801d230 <USBH_LL_GetURBState>
 800e62e:	4603      	mov	r3, r0
 800e630:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800e632:	7bbb      	ldrb	r3, [r7, #14]
 800e634:	2b01      	cmp	r3, #1
 800e636:	d12c      	bne.n	800e692 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	7c1b      	ldrb	r3, [r3, #16]
 800e63c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e640:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	8adb      	ldrh	r3, [r3, #22]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00a      	beq.n	800e660 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800e64a:	7b7b      	ldrb	r3, [r7, #13]
 800e64c:	2b80      	cmp	r3, #128	; 0x80
 800e64e:	d103      	bne.n	800e658 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2203      	movs	r2, #3
 800e654:	761a      	strb	r2, [r3, #24]
 800e656:	e00d      	b.n	800e674 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2205      	movs	r2, #5
 800e65c:	761a      	strb	r2, [r3, #24]
 800e65e:	e009      	b.n	800e674 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800e660:	7b7b      	ldrb	r3, [r7, #13]
 800e662:	2b80      	cmp	r3, #128	; 0x80
 800e664:	d103      	bne.n	800e66e <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2209      	movs	r2, #9
 800e66a:	761a      	strb	r2, [r3, #24]
 800e66c:	e002      	b.n	800e674 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2207      	movs	r2, #7
 800e672:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2203      	movs	r2, #3
 800e678:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e688:	2200      	movs	r2, #0
 800e68a:	4619      	mov	r1, r3
 800e68c:	f008 f85e 	bl	801674c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e690:	e1c1      	b.n	800ea16 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e692:	7bbb      	ldrb	r3, [r7, #14]
 800e694:	2b04      	cmp	r3, #4
 800e696:	d003      	beq.n	800e6a0 <USBH_HandleControl+0xe8>
 800e698:	7bbb      	ldrb	r3, [r7, #14]
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	f040 81bb 	bne.w	800ea16 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	220b      	movs	r2, #11
 800e6a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2203      	movs	r2, #3
 800e6aa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	4619      	mov	r1, r3
 800e6be:	f008 f845 	bl	801674c <osMessagePut>
    break;
 800e6c2:	e1a8      	b.n	800ea16 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6899      	ldr	r1, [r3, #8]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	899a      	ldrh	r2, [r3, #12]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	791b      	ldrb	r3, [r3, #4]
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f000 f9e8 	bl	800eab2 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2204      	movs	r2, #4
 800e6e6:	761a      	strb	r2, [r3, #24]
    break;
 800e6e8:	e19e      	b.n	800ea28 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	791b      	ldrb	r3, [r3, #4]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f00e fd9d 	bl	801d230 <USBH_LL_GetURBState>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800e6fa:	7bbb      	ldrb	r3, [r7, #14]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d110      	bne.n	800e722 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2209      	movs	r2, #9
 800e704:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2203      	movs	r2, #3
 800e70a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e71a:	2200      	movs	r2, #0
 800e71c:	4619      	mov	r1, r3
 800e71e:	f008 f815 	bl	801674c <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800e722:	7bbb      	ldrb	r3, [r7, #14]
 800e724:	2b05      	cmp	r3, #5
 800e726:	d110      	bne.n	800e74a <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800e728:	2303      	movs	r3, #3
 800e72a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2203      	movs	r2, #3
 800e730:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e740:	2200      	movs	r2, #0
 800e742:	4619      	mov	r1, r3
 800e744:	f008 f802 	bl	801674c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e748:	e167      	b.n	800ea1a <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800e74a:	7bbb      	ldrb	r3, [r7, #14]
 800e74c:	2b04      	cmp	r3, #4
 800e74e:	f040 8164 	bne.w	800ea1a <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	220b      	movs	r2, #11
 800e756:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2203      	movs	r2, #3
 800e75c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e76c:	2200      	movs	r2, #0
 800e76e:	4619      	mov	r1, r3
 800e770:	f007 ffec 	bl	801674c <osMessagePut>
    break;
 800e774:	e151      	b.n	800ea1a <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6899      	ldr	r1, [r3, #8]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	899a      	ldrh	r2, [r3, #12]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	7958      	ldrb	r0, [r3, #5]
 800e782:	2301      	movs	r3, #1
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	4603      	mov	r3, r0
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 f96d 	bl	800ea68 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2206      	movs	r2, #6
 800e79e:	761a      	strb	r2, [r3, #24]
    break;
 800e7a0:	e142      	b.n	800ea28 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	795b      	ldrb	r3, [r3, #5]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f00e fd41 	bl	801d230 <USBH_LL_GetURBState>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800e7b2:	7bbb      	ldrb	r3, [r7, #14]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d111      	bne.n	800e7dc <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2207      	movs	r2, #7
 800e7bc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2203      	movs	r2, #3
 800e7c2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	f007 ffb9 	bl	801674c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e7da:	e120      	b.n	800ea1e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800e7dc:	7bbb      	ldrb	r3, [r7, #14]
 800e7de:	2b05      	cmp	r3, #5
 800e7e0:	d113      	bne.n	800e80a <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	220c      	movs	r2, #12
 800e7e6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2203      	movs	r2, #3
 800e7f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e800:	2200      	movs	r2, #0
 800e802:	4619      	mov	r1, r3
 800e804:	f007 ffa2 	bl	801674c <osMessagePut>
    break;
 800e808:	e109      	b.n	800ea1e <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800e80a:	7bbb      	ldrb	r3, [r7, #14]
 800e80c:	2b02      	cmp	r3, #2
 800e80e:	d111      	bne.n	800e834 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2205      	movs	r2, #5
 800e814:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2203      	movs	r2, #3
 800e81a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e82a:	2200      	movs	r2, #0
 800e82c:	4619      	mov	r1, r3
 800e82e:	f007 ff8d 	bl	801674c <osMessagePut>
    break;
 800e832:	e0f4      	b.n	800ea1e <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800e834:	7bbb      	ldrb	r3, [r7, #14]
 800e836:	2b04      	cmp	r3, #4
 800e838:	f040 80f1 	bne.w	800ea1e <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	220b      	movs	r2, #11
 800e840:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800e842:	2302      	movs	r3, #2
 800e844:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2203      	movs	r2, #3
 800e84a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e85a:	2200      	movs	r2, #0
 800e85c:	4619      	mov	r1, r3
 800e85e:	f007 ff75 	bl	801674c <osMessagePut>
    break;
 800e862:	e0dc      	b.n	800ea1e <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	791b      	ldrb	r3, [r3, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	2100      	movs	r1, #0
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 f920 	bl	800eab2 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800e878:	b29a      	uxth	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2208      	movs	r2, #8
 800e882:	761a      	strb	r2, [r3, #24]

    break;
 800e884:	e0d0      	b.n	800ea28 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	791b      	ldrb	r3, [r3, #4]
 800e88a:	4619      	mov	r1, r3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f00e fccf 	bl	801d230 <USBH_LL_GetURBState>
 800e892:	4603      	mov	r3, r0
 800e894:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800e896:	7bbb      	ldrb	r3, [r7, #14]
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d113      	bne.n	800e8c4 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	220d      	movs	r2, #13
 800e8a0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2203      	movs	r2, #3
 800e8aa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	4619      	mov	r1, r3
 800e8be:	f007 ff45 	bl	801674c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e8c2:	e0ae      	b.n	800ea22 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800e8c4:	7bbb      	ldrb	r3, [r7, #14]
 800e8c6:	2b04      	cmp	r3, #4
 800e8c8:	d111      	bne.n	800e8ee <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	220b      	movs	r2, #11
 800e8ce:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2203      	movs	r2, #3
 800e8d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	f007 ff30 	bl	801674c <osMessagePut>
    break;
 800e8ec:	e099      	b.n	800ea22 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800e8ee:	7bbb      	ldrb	r3, [r7, #14]
 800e8f0:	2b05      	cmp	r3, #5
 800e8f2:	f040 8096 	bne.w	800ea22 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2203      	movs	r2, #3
 800e8fe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e90e:	2200      	movs	r2, #0
 800e910:	4619      	mov	r1, r3
 800e912:	f007 ff1b 	bl	801674c <osMessagePut>
    break;
 800e916:	e084      	b.n	800ea22 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	795a      	ldrb	r2, [r3, #5]
 800e91c:	2301      	movs	r3, #1
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	4613      	mov	r3, r2
 800e922:	2200      	movs	r2, #0
 800e924:	2100      	movs	r1, #0
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f89e 	bl	800ea68 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	220a      	movs	r2, #10
 800e93c:	761a      	strb	r2, [r3, #24]
    break;
 800e93e:	e073      	b.n	800ea28 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	795b      	ldrb	r3, [r3, #5]
 800e944:	4619      	mov	r1, r3
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f00e fc72 	bl	801d230 <USBH_LL_GetURBState>
 800e94c:	4603      	mov	r3, r0
 800e94e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800e950:	7bbb      	ldrb	r3, [r7, #14]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d113      	bne.n	800e97e <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	220d      	movs	r2, #13
 800e95e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2203      	movs	r2, #3
 800e964:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e974:	2200      	movs	r2, #0
 800e976:	4619      	mov	r1, r3
 800e978:	f007 fee8 	bl	801674c <osMessagePut>
#endif
#endif
      }

    }
    break;
 800e97c:	e053      	b.n	800ea26 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800e97e:	7bbb      	ldrb	r3, [r7, #14]
 800e980:	2b02      	cmp	r3, #2
 800e982:	d111      	bne.n	800e9a8 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2209      	movs	r2, #9
 800e988:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2203      	movs	r2, #3
 800e98e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e99e:	2200      	movs	r2, #0
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	f007 fed3 	bl	801674c <osMessagePut>
    break;
 800e9a6:	e03e      	b.n	800ea26 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800e9a8:	7bbb      	ldrb	r3, [r7, #14]
 800e9aa:	2b04      	cmp	r3, #4
 800e9ac:	d13b      	bne.n	800ea26 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	220b      	movs	r2, #11
 800e9b2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2203      	movs	r2, #3
 800e9b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	f007 febe 	bl	801674c <osMessagePut>
    break;
 800e9d0:	e029      	b.n	800ea26 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	7e5b      	ldrb	r3, [r3, #25]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	765a      	strb	r2, [r3, #25]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7e5b      	ldrb	r3, [r3, #25]
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d809      	bhi.n	800e9fa <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f00e fb35 	bl	801d056 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800e9f8:	e016      	b.n	800ea28 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ea00:	2106      	movs	r1, #6
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800ea0c:	2302      	movs	r3, #2
 800ea0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea10:	e00a      	b.n	800ea28 <USBH_HandleControl+0x470>

  default:
    break;
 800ea12:	bf00      	nop
 800ea14:	e008      	b.n	800ea28 <USBH_HandleControl+0x470>
    break;
 800ea16:	bf00      	nop
 800ea18:	e006      	b.n	800ea28 <USBH_HandleControl+0x470>
    break;
 800ea1a:	bf00      	nop
 800ea1c:	e004      	b.n	800ea28 <USBH_HandleControl+0x470>
    break;
 800ea1e:	bf00      	nop
 800ea20:	e002      	b.n	800ea28 <USBH_HandleControl+0x470>
    break;
 800ea22:	bf00      	nop
 800ea24:	e000      	b.n	800ea28 <USBH_HandleControl+0x470>
    break;
 800ea26:	bf00      	nop
  }
  return status;
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop

0800ea34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af04      	add	r7, sp, #16
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ea42:	79f9      	ldrb	r1, [r7, #7]
 800ea44:	2300      	movs	r3, #0
 800ea46:	9303      	str	r3, [sp, #12]
 800ea48:	2308      	movs	r3, #8
 800ea4a:	9302      	str	r3, [sp, #8]
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	9301      	str	r3, [sp, #4]
 800ea50:	2300      	movs	r3, #0
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	2300      	movs	r3, #0
 800ea56:	2200      	movs	r2, #0
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f00e fbb8 	bl	801d1ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b088      	sub	sp, #32
 800ea6c:	af04      	add	r7, sp, #16
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	4611      	mov	r1, r2
 800ea74:	461a      	mov	r2, r3
 800ea76:	460b      	mov	r3, r1
 800ea78:	80fb      	strh	r3, [r7, #6]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d001      	beq.n	800ea8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ea8c:	7979      	ldrb	r1, [r7, #5]
 800ea8e:	7e3b      	ldrb	r3, [r7, #24]
 800ea90:	9303      	str	r3, [sp, #12]
 800ea92:	88fb      	ldrh	r3, [r7, #6]
 800ea94:	9302      	str	r3, [sp, #8]
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	9301      	str	r3, [sp, #4]
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	f00e fb93 	bl	801d1ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800eaa8:	2300      	movs	r3, #0
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b088      	sub	sp, #32
 800eab6:	af04      	add	r7, sp, #16
 800eab8:	60f8      	str	r0, [r7, #12]
 800eaba:	60b9      	str	r1, [r7, #8]
 800eabc:	4611      	mov	r1, r2
 800eabe:	461a      	mov	r2, r3
 800eac0:	460b      	mov	r3, r1
 800eac2:	80fb      	strh	r3, [r7, #6]
 800eac4:	4613      	mov	r3, r2
 800eac6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800eac8:	7979      	ldrb	r1, [r7, #5]
 800eaca:	2300      	movs	r3, #0
 800eacc:	9303      	str	r3, [sp, #12]
 800eace:	88fb      	ldrh	r3, [r7, #6]
 800ead0:	9302      	str	r3, [sp, #8]
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	2301      	movs	r3, #1
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	2300      	movs	r3, #0
 800eadc:	2201      	movs	r2, #1
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f00e fb75 	bl	801d1ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800eae4:	2300      	movs	r3, #0

}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b088      	sub	sp, #32
 800eaf2:	af04      	add	r7, sp, #16
 800eaf4:	60f8      	str	r0, [r7, #12]
 800eaf6:	60b9      	str	r1, [r7, #8]
 800eaf8:	4611      	mov	r1, r2
 800eafa:	461a      	mov	r2, r3
 800eafc:	460b      	mov	r3, r1
 800eafe:	80fb      	strh	r3, [r7, #6]
 800eb00:	4613      	mov	r3, r2
 800eb02:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800eb12:	7979      	ldrb	r1, [r7, #5]
 800eb14:	7e3b      	ldrb	r3, [r7, #24]
 800eb16:	9303      	str	r3, [sp, #12]
 800eb18:	88fb      	ldrh	r3, [r7, #6]
 800eb1a:	9302      	str	r3, [sp, #8]
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	9301      	str	r3, [sp, #4]
 800eb20:	2301      	movs	r3, #1
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	2302      	movs	r3, #2
 800eb26:	2200      	movs	r2, #0
 800eb28:	68f8      	ldr	r0, [r7, #12]
 800eb2a:	f00e fb50 	bl	801d1ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af04      	add	r7, sp, #16
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	4611      	mov	r1, r2
 800eb44:	461a      	mov	r2, r3
 800eb46:	460b      	mov	r3, r1
 800eb48:	80fb      	strh	r3, [r7, #6]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800eb4e:	7979      	ldrb	r1, [r7, #5]
 800eb50:	2300      	movs	r3, #0
 800eb52:	9303      	str	r3, [sp, #12]
 800eb54:	88fb      	ldrh	r3, [r7, #6]
 800eb56:	9302      	str	r3, [sp, #8]
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	9301      	str	r3, [sp, #4]
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	2302      	movs	r3, #2
 800eb62:	2201      	movs	r2, #1
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f00e fb32 	bl	801d1ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af04      	add	r7, sp, #16
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	4608      	mov	r0, r1
 800eb7e:	4611      	mov	r1, r2
 800eb80:	461a      	mov	r2, r3
 800eb82:	4603      	mov	r3, r0
 800eb84:	70fb      	strb	r3, [r7, #3]
 800eb86:	460b      	mov	r3, r1
 800eb88:	70bb      	strb	r3, [r7, #2]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800eb8e:	7878      	ldrb	r0, [r7, #1]
 800eb90:	78ba      	ldrb	r2, [r7, #2]
 800eb92:	78f9      	ldrb	r1, [r7, #3]
 800eb94:	8b3b      	ldrh	r3, [r7, #24]
 800eb96:	9302      	str	r3, [sp, #8]
 800eb98:	7d3b      	ldrb	r3, [r7, #20]
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	7c3b      	ldrb	r3, [r7, #16]
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	4603      	mov	r3, r0
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f00e fac5 	bl	801d132 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800eba8:	2300      	movs	r3, #0

}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b082      	sub	sp, #8
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
 800ebba:	460b      	mov	r3, r1
 800ebbc:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800ebbe:	78fb      	ldrb	r3, [r7, #3]
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f00e fae4 	bl	801d190 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ebc8:	2300      	movs	r3, #0

}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b084      	sub	sp, #16
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	460b      	mov	r3, r1
 800ebdc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 f831 	bl	800ec46 <USBH_GetFreePipe>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ebe8:	89fb      	ldrh	r3, [r7, #14]
 800ebea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d007      	beq.n	800ec02 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800ebf2:	78fb      	ldrb	r3, [r7, #3]
 800ebf4:	89fa      	ldrh	r2, [r7, #14]
 800ebf6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	32e0      	adds	r2, #224	; 0xe0
 800ebfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800ec02:	89fb      	ldrh	r3, [r7, #14]
 800ec04:	b2db      	uxtb	r3, r3
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ec0e:	b480      	push	{r7}
 800ec10:	b083      	sub	sp, #12
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	460b      	mov	r3, r1
 800ec18:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800ec1a:	78fb      	ldrb	r3, [r7, #3]
 800ec1c:	2b0a      	cmp	r3, #10
 800ec1e:	d80b      	bhi.n	800ec38 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800ec20:	78fa      	ldrb	r2, [r7, #3]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	32e0      	adds	r2, #224	; 0xe0
 800ec26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec2a:	78fa      	ldrb	r2, [r7, #3]
 800ec2c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	32e0      	adds	r2, #224	; 0xe0
 800ec34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800ec46:	b480      	push	{r7}
 800ec48:	b085      	sub	sp, #20
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ec52:	2300      	movs	r3, #0
 800ec54:	73fb      	strb	r3, [r7, #15]
 800ec56:	e00e      	b.n	800ec76 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ec58:	7bfa      	ldrb	r2, [r7, #15]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	32e0      	adds	r2, #224	; 0xe0
 800ec5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d102      	bne.n	800ec70 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	e007      	b.n	800ec80 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800ec70:	7bfb      	ldrb	r3, [r7, #15]
 800ec72:	3301      	adds	r3, #1
 800ec74:	73fb      	strb	r3, [r7, #15]
 800ec76:	7bfb      	ldrb	r3, [r7, #15]
 800ec78:	2b0a      	cmp	r3, #10
 800ec7a:	d9ed      	bls.n	800ec58 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800ec7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3714      	adds	r7, #20
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	4604      	mov	r4, r0
 800ec90:	461d      	mov	r5, r3
    {
        setXY(x, y);
 800ec92:	6803      	ldr	r3, [r0, #0]
 800ec94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec96:	4798      	blx	r3
        setWidth(width);
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	4620      	mov	r0, r4
 800eca0:	4798      	blx	r3
        setHeight(height);
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eca6:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800ecaa:	4620      	mov	r0, r4
 800ecac:	4798      	blx	r3
    };
 800ecae:	bd38      	pop	{r3, r4, r5, pc}

0800ecb0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800ecb0:	8081      	strh	r1, [r0, #4]
    }
 800ecb2:	4770      	bx	lr

0800ecb4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800ecb4:	80c1      	strh	r1, [r0, #6]
    }
 800ecb6:	4770      	bx	lr

0800ecb8 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4604      	mov	r4, r0
 800ecbc:	4615      	mov	r5, r2
    {
        setX(x);
 800ecbe:	6803      	ldr	r3, [r0, #0]
 800ecc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc2:	4798      	blx	r3
        setY(y);
 800ecc4:	6823      	ldr	r3, [r4, #0]
 800ecc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc8:	4629      	mov	r1, r5
 800ecca:	4620      	mov	r0, r4
 800eccc:	4798      	blx	r3
    }
 800ecce:	bd38      	pop	{r3, r4, r5, pc}

0800ecd0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800ecd0:	8101      	strh	r1, [r0, #8]
    }
 800ecd2:	4770      	bx	lr

0800ecd4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800ecd4:	8141      	strh	r1, [r0, #10]
    }
 800ecd6:	4770      	bx	lr

0800ecd8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800ecd8:	4770      	bx	lr

0800ecda <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800ecda:	4770      	bx	lr

0800ecdc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800ecdc:	4770      	bx	lr

0800ecde <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800ecde:	4770      	bx	lr

0800ece0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800ece0:	4770      	bx	lr

0800ece2 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ece2:	b538      	push	{r3, r4, r5, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 800ece4:	6803      	ldr	r3, [r0, #0]
 800ece6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800ece8:	8883      	ldrh	r3, [r0, #4]
 800ecea:	1ac9      	subs	r1, r1, r3
 800ecec:	88c3      	ldrh	r3, [r0, #6]
 800ecee:	1ad2      	subs	r2, r2, r3
 800ecf0:	b212      	sxth	r2, r2
 800ecf2:	b209      	sxth	r1, r1
 800ecf4:	47a8      	blx	r5
    }
 800ecf6:	bd38      	pop	{r3, r4, r5, pc}

0800ecf8 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800ecf8:	4770      	bx	lr

0800ecfa <_ZNK8touchgfx9Container7getTypeEv>:
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_CONTAINER;
    }
 800ecfa:	2012      	movs	r0, #18
 800ecfc:	4770      	bx	lr

0800ecfe <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
    bool found = false;
    Drawable* head = firstChild;
 800ecfe:	6a83      	ldr	r3, [r0, #40]	; 0x28
    bool found = false;
 800ed00:	2000      	movs	r0, #0
    while (head && !found)
 800ed02:	b133      	cbz	r3, 800ed12 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
 800ed04:	b928      	cbnz	r0, 800ed12 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    {
        found = (head == &d);
 800ed06:	428b      	cmp	r3, r1
 800ed08:	bf14      	ite	ne
 800ed0a:	2000      	movne	r0, #0
 800ed0c:	2001      	moveq	r0, #1
        head = head->nextSibling;
 800ed0e:	699b      	ldr	r3, [r3, #24]
    while (head && !found)
 800ed10:	e7f7      	b.n	800ed02 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
    }
    return found;
}
 800ed12:	4770      	bx	lr

0800ed14 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
    }
}

void Container::remove(Drawable& d)
{
    if (!firstChild)
 800ed14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ed16:	b1ab      	cbz	r3, 800ed44 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x30>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800ed18:	428b      	cmp	r3, r1
 800ed1a:	d10a      	bne.n	800ed32 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1e>
    {
        // d is first child.
        d.parent = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	614b      	str	r3, [r1, #20]
        if (!d.nextSibling)
 800ed20:	698b      	ldr	r3, [r1, #24]
 800ed22:	b11b      	cbz	r3, 800ed2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
            // d was only child, so now this container is empty
            firstChild = 0;
        }
        else
        {
            firstChild = d.nextSibling;
 800ed24:	6283      	str	r3, [r0, #40]	; 0x28
            d.nextSibling = 0;
 800ed26:	2300      	movs	r3, #0
 800ed28:	618b      	str	r3, [r1, #24]
 800ed2a:	4770      	bx	lr
            firstChild = 0;
 800ed2c:	6283      	str	r3, [r0, #40]	; 0x28
 800ed2e:	4770      	bx	lr
            d.nextSibling = 0;
            return;
        }
        else
        {
            tmp = tmp->nextSibling;
 800ed30:	4613      	mov	r3, r2
    while (tmp)
 800ed32:	b13b      	cbz	r3, 800ed44 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x30>
        if (tmp->nextSibling == &d)
 800ed34:	699a      	ldr	r2, [r3, #24]
 800ed36:	428a      	cmp	r2, r1
 800ed38:	d1fa      	bne.n	800ed30 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
            tmp->nextSibling = d.nextSibling;
 800ed3a:	698a      	ldr	r2, [r1, #24]
 800ed3c:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	614b      	str	r3, [r1, #20]
            d.nextSibling = 0;
 800ed42:	618b      	str	r3, [r1, #24]
        }
    }
}
 800ed44:	4770      	bx	lr

0800ed46 <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
    while (firstChild)
 800ed46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ed48:	b12b      	cbz	r3, 800ed56 <_ZN8touchgfx9Container9removeAllEv+0x10>
    {
        Drawable* d = firstChild;
        firstChild = firstChild->nextSibling;
 800ed4a:	699a      	ldr	r2, [r3, #24]
 800ed4c:	6282      	str	r2, [r0, #40]	; 0x28
        d->parent = 0;
 800ed4e:	2200      	movs	r2, #0
 800ed50:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800ed52:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800ed54:	e7f7      	b.n	800ed46 <_ZN8touchgfx9Container9removeAllEv>
    }
}
 800ed56:	4770      	bx	lr

0800ed58 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
    firstChild = 0;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	6283      	str	r3, [r0, #40]	; 0x28
}
 800ed5c:	4770      	bx	lr

0800ed5e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
        return visible;
 800ed5e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
void Container::draw(const Rect& invalidatedArea) const
{
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f000 8085 	beq.w	800ee72 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x114>
{
 800ed68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed6c:	b085      	sub	sp, #20
    if (!isVisible() || !firstChild)
 800ed6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ed70:	2c00      	cmp	r4, #0
 800ed72:	d07b      	beq.n	800ee6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x10e>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800ed74:	ab02      	add	r3, sp, #8
 800ed76:	6808      	ldr	r0, [r1, #0]
 800ed78:	6849      	ldr	r1, [r1, #4]
 800ed7a:	c303      	stmia	r3!, {r0, r1}
 800ed7c:	e012      	b.n	800eda4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x46>
        {
            int16_t newX = MAX(x, other.x);
            int16_t newY = MAX(y, other.y);

            width = MIN(right(), other.right()) - newX;
            height = MIN(bottom(), other.bottom()) - newY;
 800ed7e:	463b      	mov	r3, r7
 800ed80:	e057      	b.n	800ee32 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd4>
            x = newX;
            y = newY;
        }
        else
        {
            x = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	f8ad 3000 	strh.w	r3, [sp]
            y = 0;
 800ed88:	f8ad 3002 	strh.w	r3, [sp, #2]
            width = 0;
 800ed8c:	f8ad 3004 	strh.w	r3, [sp, #4]
            height = 0;
 800ed90:	f8ad 3006 	strh.w	r3, [sp, #6]
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
    {
        return ((width == 0) || (height == 0));
 800ed94:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800ed98:	b11b      	cbz	r3, 800eda2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x44>
 800ed9a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d150      	bne.n	800ee44 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xe6>
                drawableRegion.x -= d->getX();
                drawableRegion.y -= d->getY();
                d->draw(drawableRegion);
            }
        }
        d = d->nextSibling;
 800eda2:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800eda4:	2c00      	cmp	r4, #0
 800eda6:	d061      	beq.n	800ee6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x10e>
 800eda8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
        if (d->isVisible())
 800edac:	2b00      	cmp	r3, #0
 800edae:	d0f8      	beq.n	800eda2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x44>
        return rect;
 800edb0:	1d25      	adds	r5, r4, #4
        Rect r = *this;
 800edb2:	466b      	mov	r3, sp
 800edb4:	aa04      	add	r2, sp, #16
 800edb6:	e912 0003 	ldmdb	r2, {r0, r1}
 800edba:	e883 0003 	stmia.w	r3, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 800edbe:	f9bd 0000 	ldrsh.w	r0, [sp]
        return x + width;
 800edc2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800edc6:	88ab      	ldrh	r3, [r5, #4]
 800edc8:	fa13 f381 	uxtah	r3, r3, r1
 800edcc:	b29b      	uxth	r3, r3
 800edce:	b21e      	sxth	r6, r3
        return !(x >= other.right() || right() <= other.x ||
 800edd0:	42b0      	cmp	r0, r6
 800edd2:	dad6      	bge.n	800ed82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
        return x + width;
 800edd4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800edd8:	fa12 f280 	uxtah	r2, r2, r0
 800eddc:	b292      	uxth	r2, r2
 800edde:	fa0f fc82 	sxth.w	ip, r2
        return !(x >= other.right() || right() <= other.x ||
 800ede2:	4561      	cmp	r1, ip
 800ede4:	dacd      	bge.n	800ed82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
                 y >= other.bottom() || bottom() <= other.y);
 800ede6:	f9bd 8002 	ldrsh.w	r8, [sp, #2]
        return y + height;
 800edea:	f9b5 e002 	ldrsh.w	lr, [r5, #2]
 800edee:	88ef      	ldrh	r7, [r5, #6]
 800edf0:	fa17 f78e 	uxtah	r7, r7, lr
 800edf4:	b23f      	sxth	r7, r7
        return !(x >= other.right() || right() <= other.x ||
 800edf6:	45b8      	cmp	r8, r7
 800edf8:	dac3      	bge.n	800ed82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
        return y + height;
 800edfa:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 800edfe:	fa17 f788 	uxtah	r7, r7, r8
 800ee02:	b2bf      	uxth	r7, r7
 800ee04:	fa0f f987 	sxth.w	r9, r7
        return !(x >= other.right() || right() <= other.x ||
 800ee08:	45ce      	cmp	lr, r9
 800ee0a:	daba      	bge.n	800ed82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x24>
            int16_t newX = MAX(x, other.x);
 800ee0c:	4288      	cmp	r0, r1
 800ee0e:	dd00      	ble.n	800ee12 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xb4>
 800ee10:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 800ee12:	45f0      	cmp	r8, lr
 800ee14:	dd00      	ble.n	800ee18 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xba>
 800ee16:	46c6      	mov	lr, r8
            width = MIN(right(), other.right()) - newX;
 800ee18:	4566      	cmp	r6, ip
 800ee1a:	dd00      	ble.n	800ee1e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc0>
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	1a5b      	subs	r3, r3, r1
 800ee20:	f8ad 3004 	strh.w	r3, [sp, #4]
        return y + height;
 800ee24:	886b      	ldrh	r3, [r5, #2]
 800ee26:	88ea      	ldrh	r2, [r5, #6]
 800ee28:	4413      	add	r3, r2
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 800ee2e:	4591      	cmp	r9, r2
 800ee30:	dba5      	blt.n	800ed7e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x20>
 800ee32:	eba3 030e 	sub.w	r3, r3, lr
 800ee36:	f8ad 3006 	strh.w	r3, [sp, #6]
            x = newX;
 800ee3a:	f8ad 1000 	strh.w	r1, [sp]
            y = newY;
 800ee3e:	f8ad e002 	strh.w	lr, [sp, #2]
 800ee42:	e7a7      	b.n	800ed94 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x36>
        return rect.x;
 800ee44:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                drawableRegion.x -= d->getX();
 800ee48:	f8bd 3000 	ldrh.w	r3, [sp]
 800ee4c:	1a9b      	subs	r3, r3, r2
 800ee4e:	f8ad 3000 	strh.w	r3, [sp]
        return rect.y;
 800ee52:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
                drawableRegion.y -= d->getY();
 800ee56:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ee5a:	1a9b      	subs	r3, r3, r2
 800ee5c:	f8ad 3002 	strh.w	r3, [sp, #2]
                d->draw(drawableRegion);
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	4669      	mov	r1, sp
 800ee66:	4620      	mov	r0, r4
 800ee68:	4798      	blx	r3
 800ee6a:	e79a      	b.n	800eda2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x44>
    }
}
 800ee6c:	b005      	add	sp, #20
 800ee6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee72:	4770      	bx	lr

0800ee74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800ee74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee78:	460d      	mov	r5, r1
 800ee7a:	4616      	mov	r6, r2
 800ee7c:	461f      	mov	r7, r3
        return touchable;
 800ee7e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800ee82:	b103      	cbz	r3, 800ee86 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800ee84:	6038      	str	r0, [r7, #0]
    }

    Drawable* d = firstChild;
 800ee86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ee88:	e000      	b.n	800ee8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x18>
        {
            int16_t xadj = x - d->getX();
            int16_t yadj = y - d->getY();
            d->getLastChild(xadj, yadj, last);
        }
        d = d->nextSibling;
 800ee8a:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800ee8c:	b314      	cbz	r4, 800eed4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x60>
        return visible;
 800ee8e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
        if (d->isVisible() && d->getRect().intersect(x, y))
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d0f9      	beq.n	800ee8a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
        return (otherX >= x && otherX < right() &&
 800ee96:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
                otherY >= y && otherY < bottom());
 800ee9a:	428d      	cmp	r5, r1
 800ee9c:	dbf5      	blt.n	800ee8a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
        return x + width;
 800ee9e:	b289      	uxth	r1, r1
 800eea0:	8923      	ldrh	r3, [r4, #8]
 800eea2:	440b      	add	r3, r1
 800eea4:	b21b      	sxth	r3, r3
        return (otherX >= x && otherX < right() &&
 800eea6:	429d      	cmp	r5, r3
 800eea8:	daef      	bge.n	800ee8a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
                otherY >= y && otherY < bottom());
 800eeaa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        return (otherX >= x && otherX < right() &&
 800eeae:	429e      	cmp	r6, r3
 800eeb0:	dbeb      	blt.n	800ee8a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
        return y + height;
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	8962      	ldrh	r2, [r4, #10]
 800eeb6:	441a      	add	r2, r3
 800eeb8:	b212      	sxth	r2, r2
                otherY >= y && otherY < bottom());
 800eeba:	4296      	cmp	r6, r2
 800eebc:	dae5      	bge.n	800ee8a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
            int16_t xadj = x - d->getX();
 800eebe:	1a69      	subs	r1, r5, r1
            int16_t yadj = y - d->getY();
 800eec0:	1af2      	subs	r2, r6, r3
            d->getLastChild(xadj, yadj, last);
 800eec2:	6823      	ldr	r3, [r4, #0]
 800eec4:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800eec8:	463b      	mov	r3, r7
 800eeca:	b212      	sxth	r2, r2
 800eecc:	b209      	sxth	r1, r1
 800eece:	4620      	mov	r0, r4
 800eed0:	47c0      	blx	r8
 800eed2:	e7da      	b.n	800ee8a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x16>
    }
}
 800eed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eed8 <_ZNK8touchgfx9Container12getSolidRectEv>:
        this->x = x;
 800eed8:	2200      	movs	r2, #0
 800eeda:	8002      	strh	r2, [r0, #0]
        this->y = y;
 800eedc:	8042      	strh	r2, [r0, #2]
        this->width = width;
 800eede:	8082      	strh	r2, [r0, #4]
        this->height = height;
 800eee0:	80c2      	strh	r2, [r0, #6]

Rect Container::getSolidRect() const
{
    return Rect(0, 0, 0, 0);
}
 800eee2:	4770      	bx	lr

0800eee4 <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
    Drawable* d = firstChild;
 800eee4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        this->x = x;
 800eee6:	2200      	movs	r2, #0
 800eee8:	8002      	strh	r2, [r0, #0]
        this->y = y;
 800eeea:	8042      	strh	r2, [r0, #2]
        this->width = width;
 800eeec:	8082      	strh	r2, [r0, #4]
        this->height = height;
 800eeee:	80c2      	strh	r2, [r0, #6]
 800eef0:	e056      	b.n	800efa0 <_ZNK8touchgfx9Container16getContainedAreaEv+0xbc>
                x = other.x;
 800eef2:	f9b2 1000 	ldrsh.w	r1, [r2]
 800eef6:	8001      	strh	r1, [r0, #0]
                y = other.y;
 800eef8:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800eefc:	8041      	strh	r1, [r0, #2]
                width = other.width;
 800eefe:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800ef02:	8081      	strh	r1, [r0, #4]
                height = other.height;
 800ef04:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ef08:	80c2      	strh	r2, [r0, #6]
    Rect contained(0, 0, 0, 0);
    while (d)
    {
        contained.expandToFit(d->getRect());
        d = d->nextSibling;
 800ef0a:	699b      	ldr	r3, [r3, #24]
    while (d)
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d044      	beq.n	800ef9a <_ZNK8touchgfx9Container16getContainedAreaEv+0xb6>
        return rect;
 800ef10:	1d1a      	adds	r2, r3, #4
        return ((width == 0) || (height == 0));
 800ef12:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800ef16:	2900      	cmp	r1, #0
 800ef18:	d0f7      	beq.n	800ef0a <_ZNK8touchgfx9Container16getContainedAreaEv+0x26>
 800ef1a:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 800ef1e:	2c00      	cmp	r4, #0
 800ef20:	d0f3      	beq.n	800ef0a <_ZNK8touchgfx9Container16getContainedAreaEv+0x26>
 800ef22:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800ef26:	2e00      	cmp	r6, #0
 800ef28:	d0e3      	beq.n	800eef2 <_ZNK8touchgfx9Container16getContainedAreaEv+0xe>
 800ef2a:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 800ef2e:	f1b8 0f00 	cmp.w	r8, #0
 800ef32:	d0de      	beq.n	800eef2 <_ZNK8touchgfx9Container16getContainedAreaEv+0xe>
                int16_t newX = MIN(x, other.x);
 800ef34:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ef38:	f9b2 5000 	ldrsh.w	r5, [r2]
 800ef3c:	45a9      	cmp	r9, r5
 800ef3e:	da28      	bge.n	800ef92 <_ZNK8touchgfx9Container16getContainedAreaEv+0xae>
 800ef40:	464f      	mov	r7, r9
                int16_t newY = MIN(y, other.y);
 800ef42:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 800ef46:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ef4a:	4596      	cmp	lr, r2
 800ef4c:	da23      	bge.n	800ef96 <_ZNK8touchgfx9Container16getContainedAreaEv+0xb2>
 800ef4e:	46f4      	mov	ip, lr
        return x + width;
 800ef50:	b2b6      	uxth	r6, r6
 800ef52:	fa16 f689 	uxtah	r6, r6, r9
 800ef56:	b236      	sxth	r6, r6
 800ef58:	b289      	uxth	r1, r1
 800ef5a:	fa11 f185 	uxtah	r1, r1, r5
 800ef5e:	b209      	sxth	r1, r1
                int16_t endPointX = MAX(right(), other.right());
 800ef60:	428e      	cmp	r6, r1
 800ef62:	dd00      	ble.n	800ef66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x82>
 800ef64:	4631      	mov	r1, r6
        return y + height;
 800ef66:	fa1f f888 	uxth.w	r8, r8
 800ef6a:	fa18 fe8e 	uxtah	lr, r8, lr
 800ef6e:	fa0f fe8e 	sxth.w	lr, lr
 800ef72:	b2a4      	uxth	r4, r4
 800ef74:	fa14 f482 	uxtah	r4, r4, r2
 800ef78:	b224      	sxth	r4, r4
                int16_t endPointY = MAX(bottom(), other.bottom());
 800ef7a:	45a6      	cmp	lr, r4
 800ef7c:	dd00      	ble.n	800ef80 <_ZNK8touchgfx9Container16getContainedAreaEv+0x9c>
 800ef7e:	4674      	mov	r4, lr
                x = newX;
 800ef80:	8007      	strh	r7, [r0, #0]
                y = newY;
 800ef82:	f8a0 c002 	strh.w	ip, [r0, #2]
                width = endPointX - newX;
 800ef86:	1bc9      	subs	r1, r1, r7
 800ef88:	8081      	strh	r1, [r0, #4]
                height = endPointY - newY;
 800ef8a:	eba4 040c 	sub.w	r4, r4, ip
 800ef8e:	80c4      	strh	r4, [r0, #6]
 800ef90:	e7bb      	b.n	800ef0a <_ZNK8touchgfx9Container16getContainedAreaEv+0x26>
                int16_t newX = MIN(x, other.x);
 800ef92:	462f      	mov	r7, r5
 800ef94:	e7d5      	b.n	800ef42 <_ZNK8touchgfx9Container16getContainedAreaEv+0x5e>
                int16_t newY = MIN(y, other.y);
 800ef96:	4694      	mov	ip, r2
 800ef98:	e7da      	b.n	800ef50 <_ZNK8touchgfx9Container16getContainedAreaEv+0x6c>
    }
    return contained;
}
 800ef9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        d = d->nextSibling;
 800ef9e:	699b      	ldr	r3, [r3, #24]
    while (d)
 800efa0:	b13b      	cbz	r3, 800efb2 <_ZNK8touchgfx9Container16getContainedAreaEv+0xce>
 800efa2:	1d1a      	adds	r2, r3, #4
        return ((width == 0) || (height == 0));
 800efa4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800efa8:	2900      	cmp	r1, #0
 800efaa:	d0f8      	beq.n	800ef9e <_ZNK8touchgfx9Container16getContainedAreaEv+0xba>
{
 800efac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efb0:	e7b3      	b.n	800ef1a <_ZNK8touchgfx9Container16getContainedAreaEv+0x36>
}
 800efb2:	4770      	bx	lr

0800efb4 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	460e      	mov	r6, r1
 800efb8:	4615      	mov	r5, r2
    Drawable* d = firstChild;
 800efba:	6a84      	ldr	r4, [r0, #40]	; 0x28
    while (d)
 800efbc:	b13c      	cbz	r4, 800efce <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
    {
        d->moveRelative(deltaX, deltaY);
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efc2:	462a      	mov	r2, r5
 800efc4:	4631      	mov	r1, r6
 800efc6:	4620      	mov	r0, r4
 800efc8:	4798      	blx	r3
        d = d->nextSibling;
 800efca:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800efcc:	e7f6      	b.n	800efbc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
    }
}
 800efce:	bd70      	pop	{r4, r5, r6, pc}

0800efd0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	460d      	mov	r5, r1
    Drawable* d = firstChild;
 800efd4:	6a84      	ldr	r4, [r0, #40]	; 0x28
    while (d)
 800efd6:	b134      	cbz	r4, 800efe6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
    {
        function->execute(*d);
 800efd8:	682b      	ldr	r3, [r5, #0]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	4621      	mov	r1, r4
 800efde:	4628      	mov	r0, r5
 800efe0:	4798      	blx	r3
        d = d->nextSibling;
 800efe2:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800efe4:	e7f7      	b.n	800efd6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
    }
}
 800efe6:	bd38      	pop	{r3, r4, r5, pc}

0800efe8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800efe8:	b508      	push	{r3, lr}
    if (!firstChild)
 800efea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800efec:	b12b      	cbz	r3, 800effa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x12>
    {
        // Insert as only element
        add(d);
        return;
    }
    else if (!previous)
 800efee:	b149      	cbz	r1, 800f004 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
        d.parent = this;
    }
    else
    {
        Drawable* tmp = firstChild;
        while (tmp)
 800eff0:	b183      	cbz	r3, 800f014 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x2c>
        {
            if (tmp == previous)
 800eff2:	428b      	cmp	r3, r1
 800eff4:	d00a      	beq.n	800f00c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
                d.nextSibling = tmp->nextSibling;
                tmp->nextSibling = &d;
                d.parent = this;
                return;
            }
            tmp = tmp->nextSibling;
 800eff6:	699b      	ldr	r3, [r3, #24]
        while (tmp)
 800eff8:	e7fa      	b.n	800eff0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x8>
 800effa:	4611      	mov	r1, r2
        add(d);
 800effc:	6803      	ldr	r3, [r0, #0]
 800effe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f000:	4798      	blx	r3
        return;
 800f002:	e007      	b.n	800f014 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x2c>
        d.nextSibling = firstChild;
 800f004:	6193      	str	r3, [r2, #24]
        firstChild = &d;
 800f006:	6282      	str	r2, [r0, #40]	; 0x28
        d.parent = this;
 800f008:	6150      	str	r0, [r2, #20]
 800f00a:	e003      	b.n	800f014 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x2c>
                d.nextSibling = tmp->nextSibling;
 800f00c:	6999      	ldr	r1, [r3, #24]
 800f00e:	6191      	str	r1, [r2, #24]
                tmp->nextSibling = &d;
 800f010:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800f012:	6150      	str	r0, [r2, #20]
        }
    }
}
 800f014:	bd08      	pop	{r3, pc}
	...

0800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
{
 800f018:	b508      	push	{r3, lr}
    assert(&d != this && "Cannot add Drawable to self");
 800f01a:	4288      	cmp	r0, r1
 800f01c:	d008      	beq.n	800f030 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x18>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800f01e:	694b      	ldr	r3, [r1, #20]
 800f020:	b963      	cbnz	r3, 800f03c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x24>
    d.parent = this;
 800f022:	6148      	str	r0, [r1, #20]
    d.nextSibling = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	618b      	str	r3, [r1, #24]
    if (!firstChild)
 800f028:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f02a:	b973      	cbnz	r3, 800f04a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
        firstChild = &d;
 800f02c:	6281      	str	r1, [r0, #40]	; 0x28
 800f02e:	e019      	b.n	800f064 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>
    assert(&d != this && "Cannot add Drawable to self");
 800f030:	4b10      	ldr	r3, [pc, #64]	; (800f074 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800f032:	4a11      	ldr	r2, [pc, #68]	; (800f078 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800f034:	2123      	movs	r1, #35	; 0x23
 800f036:	4811      	ldr	r0, [pc, #68]	; (800f07c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800f038:	f016 f8e8 	bl	802520c <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800f03c:	4b10      	ldr	r3, [pc, #64]	; (800f080 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x68>)
 800f03e:	4a0e      	ldr	r2, [pc, #56]	; (800f078 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800f040:	2124      	movs	r1, #36	; 0x24
 800f042:	480e      	ldr	r0, [pc, #56]	; (800f07c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800f044:	f016 f8e2 	bl	802520c <__assert_func>
            head = head->nextSibling;
 800f048:	4613      	mov	r3, r2
        while (head->nextSibling)
 800f04a:	699a      	ldr	r2, [r3, #24]
 800f04c:	b13a      	cbz	r2, 800f05e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x46>
            assert(head != &d && "Cannot add Drawable multiple times");
 800f04e:	428b      	cmp	r3, r1
 800f050:	d1fa      	bne.n	800f048 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x30>
 800f052:	4b0c      	ldr	r3, [pc, #48]	; (800f084 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x6c>)
 800f054:	4a08      	ldr	r2, [pc, #32]	; (800f078 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800f056:	2135      	movs	r1, #53	; 0x35
 800f058:	4808      	ldr	r0, [pc, #32]	; (800f07c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800f05a:	f016 f8d7 	bl	802520c <__assert_func>
        assert(head != &d && "Cannot add Drawable multiple times");
 800f05e:	428b      	cmp	r3, r1
 800f060:	d001      	beq.n	800f066 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
        head->nextSibling = &d;
 800f062:	6199      	str	r1, [r3, #24]
}
 800f064:	bd08      	pop	{r3, pc}
        assert(head != &d && "Cannot add Drawable multiple times");
 800f066:	4b07      	ldr	r3, [pc, #28]	; (800f084 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x6c>)
 800f068:	4a03      	ldr	r2, [pc, #12]	; (800f078 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 800f06a:	2138      	movs	r1, #56	; 0x38
 800f06c:	4803      	ldr	r0, [pc, #12]	; (800f07c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x64>)
 800f06e:	f016 f8cd 	bl	802520c <__assert_func>
 800f072:	bf00      	nop
 800f074:	0802631c 	.word	0x0802631c
 800f078:	0802649c 	.word	0x0802649c
 800f07c:	08026348 	.word	0x08026348
 800f080:	080263a0 	.word	0x080263a0
 800f084:	080263d8 	.word	0x080263d8

0800f088 <_ZN8touchgfx9ContainerD0Ev>:
    virtual ~Container() { }
 800f088:	b510      	push	{r4, lr}
 800f08a:	4604      	mov	r4, r0
 800f08c:	212c      	movs	r1, #44	; 0x2c
 800f08e:	f016 f8a1 	bl	80251d4 <_ZdlPvj>
 800f092:	4620      	mov	r0, r4
 800f094:	bd10      	pop	{r4, pc}

0800f096 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
        return visible;
 800f096:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f000 8084 	beq.w	800f1a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x112>
{
 800f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	b083      	sub	sp, #12
 800f0a6:	4616      	mov	r6, r2
 800f0a8:	460d      	mov	r5, r1
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800f0aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f0ac:	b9ac      	cbnz	r4, 800f0da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x44>
                d->setupDrawChain(drawableRegion, nextPreviousElement);
            }
        }
        d = d->nextSibling;
    }
}
 800f0ae:	b003      	add	sp, #12
 800f0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            height = MIN(bottom(), other.bottom()) - newY;
 800f0b4:	464b      	mov	r3, r9
 800f0b6:	e059      	b.n	800f16c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xd6>
            x = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f8ad 3000 	strh.w	r3, [sp]
            y = 0;
 800f0be:	f8ad 3002 	strh.w	r3, [sp, #2]
            width = 0;
 800f0c2:	f8ad 3004 	strh.w	r3, [sp, #4]
            height = 0;
 800f0c6:	f8ad 3006 	strh.w	r3, [sp, #6]
        return ((width == 0) || (height == 0));
 800f0ca:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800f0ce:	b11b      	cbz	r3, 800f0d8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x42>
 800f0d0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d152      	bne.n	800f17e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe8>
        d = d->nextSibling;
 800f0d8:	69a4      	ldr	r4, [r4, #24]
    while (d)
 800f0da:	2c00      	cmp	r4, #0
 800f0dc:	d0e7      	beq.n	800f0ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x18>
 800f0de:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
        if (d->isVisible())
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d0f8      	beq.n	800f0d8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x42>
        return rect;
 800f0e6:	1d27      	adds	r7, r4, #4
        Rect r = *this;
 800f0e8:	466b      	mov	r3, sp
 800f0ea:	6828      	ldr	r0, [r5, #0]
 800f0ec:	6869      	ldr	r1, [r5, #4]
 800f0ee:	c303      	stmia	r3!, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 800f0f0:	f9bd 0000 	ldrsh.w	r0, [sp]
        return x + width;
 800f0f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f0f8:	88bb      	ldrh	r3, [r7, #4]
 800f0fa:	fa13 f381 	uxtah	r3, r3, r1
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	fa0f fc83 	sxth.w	ip, r3
        return !(x >= other.right() || right() <= other.x ||
 800f104:	4560      	cmp	r0, ip
 800f106:	dad7      	bge.n	800f0b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x22>
        return x + width;
 800f108:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800f10c:	fa12 f280 	uxtah	r2, r2, r0
 800f110:	b292      	uxth	r2, r2
 800f112:	fa0f fe82 	sxth.w	lr, r2
        return !(x >= other.right() || right() <= other.x ||
 800f116:	4571      	cmp	r1, lr
 800f118:	dace      	bge.n	800f0b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x22>
                 y >= other.bottom() || bottom() <= other.y);
 800f11a:	f9bd b002 	ldrsh.w	fp, [sp, #2]
        return y + height;
 800f11e:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 800f122:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 800f126:	fa19 f988 	uxtah	r9, r9, r8
 800f12a:	fa0f f989 	sxth.w	r9, r9
        return !(x >= other.right() || right() <= other.x ||
 800f12e:	45cb      	cmp	fp, r9
 800f130:	dac2      	bge.n	800f0b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x22>
        return y + height;
 800f132:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 800f136:	fa19 f98b 	uxtah	r9, r9, fp
 800f13a:	fa1f f989 	uxth.w	r9, r9
 800f13e:	fa0f fa89 	sxth.w	sl, r9
        return !(x >= other.right() || right() <= other.x ||
 800f142:	45d0      	cmp	r8, sl
 800f144:	dab8      	bge.n	800f0b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x22>
            int16_t newX = MAX(x, other.x);
 800f146:	4288      	cmp	r0, r1
 800f148:	dd00      	ble.n	800f14c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb6>
 800f14a:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 800f14c:	45c3      	cmp	fp, r8
 800f14e:	dd00      	ble.n	800f152 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
 800f150:	46d8      	mov	r8, fp
            width = MIN(right(), other.right()) - newX;
 800f152:	45f4      	cmp	ip, lr
 800f154:	dd00      	ble.n	800f158 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xc2>
 800f156:	4613      	mov	r3, r2
 800f158:	1a5b      	subs	r3, r3, r1
 800f15a:	f8ad 3004 	strh.w	r3, [sp, #4]
        return y + height;
 800f15e:	887b      	ldrh	r3, [r7, #2]
 800f160:	88fa      	ldrh	r2, [r7, #6]
 800f162:	4413      	add	r3, r2
 800f164:	b29b      	uxth	r3, r3
 800f166:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 800f168:	4592      	cmp	sl, r2
 800f16a:	dba3      	blt.n	800f0b4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x1e>
 800f16c:	eba3 0308 	sub.w	r3, r3, r8
 800f170:	f8ad 3006 	strh.w	r3, [sp, #6]
            x = newX;
 800f174:	f8ad 1000 	strh.w	r1, [sp]
            y = newY;
 800f178:	f8ad 8002 	strh.w	r8, [sp, #2]
 800f17c:	e7a5      	b.n	800f0ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x34>
        return rect.x;
 800f17e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                drawableRegion.x -= d->getX();
 800f182:	f8bd 3000 	ldrh.w	r3, [sp]
 800f186:	1a9b      	subs	r3, r3, r2
 800f188:	f8ad 3000 	strh.w	r3, [sp]
        return rect.y;
 800f18c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
                drawableRegion.y -= d->getY();
 800f190:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f194:	1a9b      	subs	r3, r3, r2
 800f196:	f8ad 3002 	strh.w	r3, [sp, #2]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f19e:	4632      	mov	r2, r6
 800f1a0:	4669      	mov	r1, sp
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	4798      	blx	r3
 800f1a6:	e797      	b.n	800f0d8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x42>
 800f1a8:	4770      	bx	lr

0800f1aa <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800f1aa:	4770      	bx	lr

0800f1ac <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_CLICK;
    }
 800f1ac:	2000      	movs	r0, #0
 800f1ae:	4770      	bx	lr

0800f1b0 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800f1b0:	4770      	bx	lr

0800f1b2 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_DRAG;
    }
 800f1b2:	2001      	movs	r0, #1
 800f1b4:	4770      	bx	lr

0800f1b6 <_ZN8touchgfx10ClickEventD0Ev>:
    virtual ~ClickEvent() { }
 800f1b6:	b510      	push	{r4, lr}
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	210c      	movs	r1, #12
 800f1bc:	f016 f80a 	bl	80251d4 <_ZdlPvj>
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	bd10      	pop	{r4, pc}

0800f1c4 <_ZN8touchgfx9DragEventD0Ev>:
    virtual ~DragEvent() { }
 800f1c4:	b510      	push	{r4, lr}
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	2110      	movs	r1, #16
 800f1ca:	f016 f803 	bl	80251d4 <_ZdlPvj>
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	bd10      	pop	{r4, pc}

0800f1d2 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
     * @see getIndicatorMax
     */
    virtual uint16_t getIndicatorMin() const
    {
        return indicatorMaxPosition;
    }
 800f1d2:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 800f1d6:	4770      	bx	lr

0800f1d8 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
     * @see getIndicatorMin
     */
    virtual uint16_t getIndicatorMax() const
    {
        return indicatorMaxPosition;
    }
 800f1d8:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 800f1dc:	4770      	bx	lr

0800f1de <_ZNK8touchgfx6Slider11getMinValueEv>:
     * @see getMaxValue
     */
    virtual uint16_t getMinValue() const
    {
        return valueRangeMin;
    }
 800f1de:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 800f1e0:	4770      	bx	lr

0800f1e2 <_ZNK8touchgfx6Slider11getMaxValueEv>:
     * @see getMinValue
     */
    virtual uint16_t getMaxValue() const
    {
        return valueRangeMax;
    }
 800f1e2:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 800f1e4:	4770      	bx	lr

0800f1e6 <_ZNK8touchgfx6Slider7getTypeEv>:
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_SLIDER;
    }
 800f1e6:	2018      	movs	r0, #24
 800f1e8:	4770      	bx	lr

0800f1ea <_ZN8touchgfx6SliderD1Ev>:
    setValueRange(0, 100);
}

Slider::~Slider()
{
}
 800f1ea:	4770      	bx	lr

0800f1ec <_ZN8touchgfx6Slider8setValueEi>:

    setValue(currentValue);
}

void Slider::setValue(int value)
{
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	4604      	mov	r4, r0
    updateIndicatorPosition(valueToPosition(value));
 800f1f0:	6803      	ldr	r3, [r0, #0]
 800f1f2:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800f1f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f1fa:	4798      	blx	r3
 800f1fc:	4601      	mov	r1, r0
 800f1fe:	4620      	mov	r0, r4
 800f200:	47a8      	blx	r5
}
 800f202:	bd38      	pop	{r3, r4, r5, pc}

0800f204 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:

void Slider::handleClickEvent(const ClickEvent& evt)
{
 800f204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return _type;
 800f206:	790b      	ldrb	r3, [r1, #4]
    if ((evt.getType() == ClickEvent::PRESSED) || (evt.getType() == ClickEvent::RELEASED))
 800f208:	b10b      	cbz	r3, 800f20e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0xa>
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d11d      	bne.n	800f24a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x46>
 800f20e:	460d      	mov	r5, r1
 800f210:	4604      	mov	r4, r0
    {
        // Communicate the start value if a listener is registered
        if ((evt.getType() == ClickEvent::PRESSED) && (startValueCallback != 0) && startValueCallback->isValid())
 800f212:	b933      	cbnz	r3, 800f222 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x1e>
 800f214:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 800f218:	b118      	cbz	r0, 800f222 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x1e>
 800f21a:	6803      	ldr	r3, [r0, #0]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	4798      	blx	r3
 800f220:	b9a0      	cbnz	r0, 800f24c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x48>
        {
            startValueCallback->execute(*this, currentValue);
        }

        if (sliderOrientation == HORIZONTAL)
 800f222:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f226:	b9cb      	cbnz	r3, 800f25c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
        {
            updateIndicatorPosition(evt.getX() - getIndicatorRadius());
 800f228:	6823      	ldr	r3, [r4, #0]
 800f22a:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
        return _x;
 800f22e:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 800f232:	b2b6      	uxth	r6, r6
 800f234:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f238:	4620      	mov	r0, r4
 800f23a:	4798      	blx	r3
 800f23c:	1a31      	subs	r1, r6, r0
 800f23e:	b209      	sxth	r1, r1
 800f240:	4620      	mov	r0, r4
 800f242:	47b8      	blx	r7
        return _type;
 800f244:	792b      	ldrb	r3, [r5, #4]
        {
            updateIndicatorPosition(evt.getY() - getIndicatorRadius());
        }

        // Communicate the stop value if a listener is registered
        if ((evt.getType() == ClickEvent::RELEASED) && (stopValueCallback != 0) && stopValueCallback->isValid())
 800f246:	2b01      	cmp	r3, #1
 800f248:	d017      	beq.n	800f27a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x76>
        {
            stopValueCallback->execute(*this, currentValue);
        }
    }
}
 800f24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            startValueCallback->execute(*this, currentValue);
 800f24c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 800f250:	6803      	ldr	r3, [r0, #0]
 800f252:	689b      	ldr	r3, [r3, #8]
 800f254:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f256:	4621      	mov	r1, r4
 800f258:	4798      	blx	r3
 800f25a:	e7e2      	b.n	800f222 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x1e>
            updateIndicatorPosition(evt.getY() - getIndicatorRadius());
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
        return _y;
 800f262:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 800f266:	b2b6      	uxth	r6, r6
 800f268:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f26c:	4620      	mov	r0, r4
 800f26e:	4798      	blx	r3
 800f270:	1a31      	subs	r1, r6, r0
 800f272:	b209      	sxth	r1, r1
 800f274:	4620      	mov	r0, r4
 800f276:	47b8      	blx	r7
 800f278:	e7e4      	b.n	800f244 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x40>
        if ((evt.getType() == ClickEvent::RELEASED) && (stopValueCallback != 0) && stopValueCallback->isValid())
 800f27a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 800f27e:	2800      	cmp	r0, #0
 800f280:	d0e3      	beq.n	800f24a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x46>
 800f282:	6803      	ldr	r3, [r0, #0]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	4798      	blx	r3
 800f288:	2800      	cmp	r0, #0
 800f28a:	d0de      	beq.n	800f24a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x46>
            stopValueCallback->execute(*this, currentValue);
 800f28c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 800f290:	6803      	ldr	r3, [r0, #0]
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f296:	4621      	mov	r1, r4
 800f298:	4798      	blx	r3
}
 800f29a:	e7d6      	b.n	800f24a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x46>

0800f29c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:

void Slider::handleDragEvent(const DragEvent& evt)
{
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	4604      	mov	r4, r0
    if (sliderOrientation == HORIZONTAL)
 800f2a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f2a4:	b16b      	cbz	r3, 800f2c2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
    {
        updateIndicatorPosition(evt.getNewX() - getIndicatorRadius());
    }
    else
    {
        updateIndicatorPosition(evt.getNewY() - getIndicatorRadius());
 800f2a6:	6803      	ldr	r3, [r0, #0]
 800f2a8:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
        return _newY;
 800f2ac:	f9b1 500c 	ldrsh.w	r5, [r1, #12]
 800f2b0:	b2ad      	uxth	r5, r5
 800f2b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f2b6:	4798      	blx	r3
 800f2b8:	1a29      	subs	r1, r5, r0
 800f2ba:	b209      	sxth	r1, r1
 800f2bc:	4620      	mov	r0, r4
 800f2be:	47b0      	blx	r6
    }
}
 800f2c0:	bd70      	pop	{r4, r5, r6, pc}
        updateIndicatorPosition(evt.getNewX() - getIndicatorRadius());
 800f2c2:	6803      	ldr	r3, [r0, #0]
 800f2c4:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
        return _newX;
 800f2c8:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 800f2cc:	b2ad      	uxth	r5, r5
 800f2ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f2d2:	4798      	blx	r3
 800f2d4:	1a29      	subs	r1, r5, r0
 800f2d6:	b209      	sxth	r1, r1
 800f2d8:	4620      	mov	r0, r4
 800f2da:	47b0      	blx	r6
 800f2dc:	e7f0      	b.n	800f2c0 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x24>

0800f2de <_ZNK8touchgfx6Slider15valueToPositionEi>:

int16_t Slider::valueToPosition(int value) const
{
 800f2de:	b538      	push	{r3, r4, r5, lr}
 800f2e0:	4605      	mov	r5, r0
    value = MAX(MIN(valueRangeMax, value), valueRangeMin);
 800f2e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f2e4:	428b      	cmp	r3, r1
 800f2e6:	da00      	bge.n	800f2ea <_ZNK8touchgfx6Slider15valueToPositionEi+0xc>
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800f2ec:	428c      	cmp	r4, r1
 800f2ee:	db00      	blt.n	800f2f2 <_ZNK8touchgfx6Slider15valueToPositionEi+0x14>
 800f2f0:	4621      	mov	r1, r4

    int coordinateOffset = ((value - valueRangeMin) * (getIndicatorPositionRangeSize() + 1)) / getValueRangeSize();
 800f2f2:	1b0c      	subs	r4, r1, r4
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	4798      	blx	r3
 800f2fe:	fb00 4404 	mla	r4, r0, r4, r4
 800f302:	682b      	ldr	r3, [r5, #0]
 800f304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f308:	4628      	mov	r0, r5
 800f30a:	4798      	blx	r3
 800f30c:	fb94 f0f0 	sdiv	r0, r4, r0

    int result = indicatorMinPosition + coordinateOffset;
 800f310:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 800f314:	4418      	add	r0, r3

    if (sliderOrientation == VERTICAL)
 800f316:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800f31a:	2a01      	cmp	r2, #1
 800f31c:	d001      	beq.n	800f322 <_ZNK8touchgfx6Slider15valueToPositionEi+0x44>
        // Vertical slider grows as the position decreases so invert the coordinate
        result = indicatorMinPosition + (indicatorMaxPosition - result);
    }

    return result;
}
 800f31e:	b200      	sxth	r0, r0
 800f320:	bd38      	pop	{r3, r4, r5, pc}
        result = indicatorMinPosition + (indicatorMaxPosition - result);
 800f322:	f9b5 40ee 	ldrsh.w	r4, [r5, #238]	; 0xee
 800f326:	1a20      	subs	r0, r4, r0
 800f328:	4418      	add	r0, r3
 800f32a:	e7f8      	b.n	800f31e <_ZNK8touchgfx6Slider15valueToPositionEi+0x40>

0800f32c <_ZNK8touchgfx6Slider15positionToValueEs>:

int Slider::positionToValue(int16_t position) const
{
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	4604      	mov	r4, r0
    int result;

    if (position == indicatorMinPosition)
 800f330:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 800f334:	428b      	cmp	r3, r1
 800f336:	d023      	beq.n	800f380 <_ZNK8touchgfx6Slider15positionToValueEs+0x54>
 800f338:	460d      	mov	r5, r1
    {
        // Ensure that min coordinate always results in min value
        result = valueRangeMin;
    }
    else if (position == indicatorMaxPosition)
 800f33a:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 800f33e:	428b      	cmp	r3, r1
 800f340:	d020      	beq.n	800f384 <_ZNK8touchgfx6Slider15positionToValueEs+0x58>
        // Ensure that max coordinate always results in max value
        result = valueRangeMax;
    }
    else
    {
        int rounding = getIndicatorPositionRangeSize() / 2;
 800f342:	6803      	ldr	r3, [r0, #0]
 800f344:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f348:	4798      	blx	r3
 800f34a:	2800      	cmp	r0, #0
 800f34c:	db1c      	blt.n	800f388 <_ZNK8touchgfx6Slider15positionToValueEs+0x5c>
 800f34e:	1046      	asrs	r6, r0, #1
        int valueOffset = (((position - indicatorMinPosition) * getValueRangeSize()) + rounding) / getIndicatorPositionRangeSize();
 800f350:	f9b4 00ec 	ldrsh.w	r0, [r4, #236]	; 0xec
 800f354:	1a2d      	subs	r5, r5, r0
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f35c:	4620      	mov	r0, r4
 800f35e:	4798      	blx	r3
 800f360:	fb00 6505 	mla	r5, r0, r5, r6
 800f364:	6823      	ldr	r3, [r4, #0]
 800f366:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f36a:	4620      	mov	r0, r4
 800f36c:	4798      	blx	r3
 800f36e:	fb95 f0f0 	sdiv	r0, r5, r0

        result = valueRangeMin + valueOffset;
 800f372:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800f374:	4428      	add	r0, r5
    }

    if (sliderOrientation == VERTICAL)
 800f376:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d006      	beq.n	800f38c <_ZNK8touchgfx6Slider15positionToValueEs+0x60>
        // Vertical slider grows as the position decreases so invert the value
        result = valueRangeMin + (valueRangeMax - result);
    }

    return result;
}
 800f37e:	bd70      	pop	{r4, r5, r6, pc}
        result = valueRangeMin;
 800f380:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800f382:	e7f8      	b.n	800f376 <_ZNK8touchgfx6Slider15positionToValueEs+0x4a>
        result = valueRangeMax;
 800f384:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f386:	e7f6      	b.n	800f376 <_ZNK8touchgfx6Slider15positionToValueEs+0x4a>
        int rounding = getIndicatorPositionRangeSize() / 2;
 800f388:	3001      	adds	r0, #1
 800f38a:	e7e0      	b.n	800f34e <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
        result = valueRangeMin + (valueRangeMax - result);
 800f38c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f38e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800f390:	1a28      	subs	r0, r5, r0
 800f392:	4418      	add	r0, r3
    return result;
 800f394:	e7f3      	b.n	800f37e <_ZNK8touchgfx6Slider15positionToValueEs+0x52>

0800f396 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:

uint16_t Slider::getIndicatorRadius() const
{
    uint16_t result;

    if (sliderOrientation == HORIZONTAL)
 800f396:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f39a:	b133      	cbz	r3, 800f3aa <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
        return rect.height;
 800f39c:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
    {
        result = indicator.getWidth() / 2;
    }
    else
    {
        result = indicator.getHeight() / 2;
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	db0b      	blt.n	800f3bc <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x26>
 800f3a4:	f3c0 004f 	ubfx	r0, r0, #1, #16
    }

    return result;
}
 800f3a8:	4770      	bx	lr
        return rect.width;
 800f3aa:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
        result = indicator.getWidth() / 2;
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	db02      	blt.n	800f3b8 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x22>
 800f3b2:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800f3b6:	4770      	bx	lr
 800f3b8:	3001      	adds	r0, #1
 800f3ba:	e7fa      	b.n	800f3b2 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x1c>
        result = indicator.getHeight() / 2;
 800f3bc:	3001      	adds	r0, #1
 800f3be:	e7f1      	b.n	800f3a4 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xe>

0800f3c0 <_ZN8touchgfx6Slider13setValueRangeEii>:

    setValue(newValue);
}

void Slider::setValueRange(int minValue, int maxValue)
{
 800f3c0:	b510      	push	{r4, lr}
    int newValue = currentValue;
 800f3c2:	6b03      	ldr	r3, [r0, #48]	; 0x30

    if (currentValue < minValue)
 800f3c4:	428b      	cmp	r3, r1
 800f3c6:	db03      	blt.n	800f3d0 <_ZN8touchgfx6Slider13setValueRangeEii+0x10>
    {
        newValue = minValue;
    }
    else if (currentValue > maxValue)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	dd02      	ble.n	800f3d2 <_ZN8touchgfx6Slider13setValueRangeEii+0x12>
    {
        newValue = maxValue;
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	e000      	b.n	800f3d2 <_ZN8touchgfx6Slider13setValueRangeEii+0x12>
        newValue = minValue;
 800f3d0:	460b      	mov	r3, r1
    }

    setValueRange(minValue, maxValue, newValue);
 800f3d2:	6804      	ldr	r4, [r0, #0]
 800f3d4:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
 800f3d8:	47a0      	blx	r4
}
 800f3da:	bd10      	pop	{r4, pc}

0800f3dc <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:

int Slider::getIndicatorPositionRangeSize() const
{
    return indicatorMaxPosition - indicatorMinPosition;
 800f3dc:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 800f3e0:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
}
 800f3e4:	1a10      	subs	r0, r2, r0
 800f3e6:	4770      	bx	lr

0800f3e8 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:

int Slider::getValueRangeSize() const
{
    return valueRangeMax - valueRangeMin;
 800f3e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800f3ea:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800f3ec:	1a10      	subs	r0, r2, r0
 800f3ee:	4770      	bx	lr

0800f3f0 <_ZN8touchgfx6SliderD0Ev>:
Slider::~Slider()
 800f3f0:	b510      	push	{r4, lr}
 800f3f2:	4604      	mov	r4, r0
}
 800f3f4:	21fc      	movs	r1, #252	; 0xfc
 800f3f6:	f015 feed 	bl	80251d4 <_ZdlPvj>
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	bd10      	pop	{r4, pc}
	...

0800f400 <_ZN8touchgfx6Slider13setValueRangeEiii>:
{
 800f400:	b508      	push	{r3, lr}
    assert(minValue < maxValue && "Slider::setValueRange - minValue must be smaller than maxValue");
 800f402:	4291      	cmp	r1, r2
 800f404:	da07      	bge.n	800f416 <_ZN8touchgfx6Slider13setValueRangeEiii+0x16>
    valueRangeMin = minValue;
 800f406:	6341      	str	r1, [r0, #52]	; 0x34
    valueRangeMax = maxValue;
 800f408:	6382      	str	r2, [r0, #56]	; 0x38
    setValue(newValue);
 800f40a:	6802      	ldr	r2, [r0, #0]
 800f40c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800f410:	4619      	mov	r1, r3
 800f412:	4790      	blx	r2
}
 800f414:	bd08      	pop	{r3, pc}
    assert(minValue < maxValue && "Slider::setValueRange - minValue must be smaller than maxValue");
 800f416:	4b03      	ldr	r3, [pc, #12]	; (800f424 <_ZN8touchgfx6Slider13setValueRangeEiii+0x24>)
 800f418:	4a03      	ldr	r2, [pc, #12]	; (800f428 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 800f41a:	f240 110b 	movw	r1, #267	; 0x10b
 800f41e:	4803      	ldr	r0, [pc, #12]	; (800f42c <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 800f420:	f015 fef4 	bl	802520c <__assert_func>
 800f424:	080265e0 	.word	0x080265e0
 800f428:	080268b0 	.word	0x080268b0
 800f42c:	08026638 	.word	0x08026638

0800f430 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
{
 800f430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f434:	b083      	sub	sp, #12
 800f436:	9200      	str	r2, [sp, #0]
 800f438:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800f43c:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
    assert(indicatorMinX < indicatorMaxX && "Slider::setupHorizontalSlider - indicatorMinX must be smaller than indicatorMaxX");
 800f440:	45b0      	cmp	r8, r6
 800f442:	d267      	bcs.n	800f514 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xe4>
 800f444:	4604      	mov	r4, r0
 800f446:	468a      	mov	sl, r1
 800f448:	4699      	mov	r9, r3
    sliderOrientation = HORIZONTAL;
 800f44a:	2700      	movs	r7, #0
 800f44c:	f880 702c 	strb.w	r7, [r0, #44]	; 0x2c
    background.setXY(backgroundX, backgroundY);
 800f450:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 800f454:	b20d      	sxth	r5, r1
 800f456:	f9bd b000 	ldrsh.w	fp, [sp]
        setX(x);
 800f45a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45e:	4629      	mov	r1, r5
 800f460:	9201      	str	r2, [sp, #4]
 800f462:	4610      	mov	r0, r2
 800f464:	4798      	blx	r3
        setY(y);
 800f466:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f46a:	4659      	mov	r1, fp
 800f46c:	9801      	ldr	r0, [sp, #4]
 800f46e:	4798      	blx	r3
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 800f470:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
        setX(x);
 800f474:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f47a:	4629      	mov	r1, r5
 800f47c:	4615      	mov	r5, r2
 800f47e:	4610      	mov	r0, r2
 800f480:	4798      	blx	r3
        setY(y);
 800f482:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f488:	4659      	mov	r1, fp
 800f48a:	4628      	mov	r0, r5
 800f48c:	4798      	blx	r3
    backgroundSelected.setXY(0, 0);
 800f48e:	f104 0568 	add.w	r5, r4, #104	; 0x68
        setX(x);
 800f492:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f496:	4639      	mov	r1, r7
 800f498:	4628      	mov	r0, r5
 800f49a:	4798      	blx	r3
        setY(y);
 800f49c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4a0:	4639      	mov	r1, r7
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	4798      	blx	r3
        rect.y = y;
 800f4a6:	f8a4 909a 	strh.w	r9, [r4, #154]	; 0x9a
        return rect.width;
 800f4aa:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 800f4ae:	fa1a fa81 	uxtah	sl, sl, r1
 800f4b2:	fa1f fa8a 	uxth.w	sl, sl
 800f4b6:	f9b4 109c 	ldrsh.w	r1, [r4, #156]	; 0x9c
    uint16_t indicatorWidth = indicatorMaxX + static_cast<uint16_t>(indicator.getWidth());
 800f4ba:	fa16 f181 	uxtah	r1, r6, r1
 800f4be:	b289      	uxth	r1, r1
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800f4c0:	458a      	cmp	sl, r1
 800f4c2:	d92d      	bls.n	800f520 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf0>
 800f4c4:	fa0f f18a 	sxth.w	r1, sl
        return rect.height;
 800f4c8:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	; 0x46
    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 800f4cc:	9b00      	ldr	r3, [sp, #0]
 800f4ce:	fa13 f282 	uxtah	r2, r3, r2
 800f4d2:	b292      	uxth	r2, r2
 800f4d4:	f9b4 309e 	ldrsh.w	r3, [r4, #158]	; 0x9e
    uint16_t indicatorHeight = indicatorY + static_cast<uint16_t>(indicator.getHeight());
 800f4d8:	fa19 f983 	uxtah	r9, r9, r3
 800f4dc:	fa1f f989 	uxth.w	r9, r9
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800f4e0:	454a      	cmp	r2, r9
 800f4e2:	d81f      	bhi.n	800f524 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf4>
 800f4e4:	fa0f f989 	sxth.w	r9, r9
    indicatorMinPosition = indicatorMinX;
 800f4e8:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxX;
 800f4ec:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
    setWidth(newWidth);
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	4798      	blx	r3
    setHeight(newHeight);
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4fc:	4649      	mov	r1, r9
 800f4fe:	4620      	mov	r0, r4
 800f500:	4798      	blx	r3
    setValue(currentValue);
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f508:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f50a:	4620      	mov	r0, r4
 800f50c:	4798      	blx	r3
}
 800f50e:	b003      	add	sp, #12
 800f510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(indicatorMinX < indicatorMaxX && "Slider::setupHorizontalSlider - indicatorMinX must be smaller than indicatorMaxX");
 800f514:	4b05      	ldr	r3, [pc, #20]	; (800f52c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xfc>)
 800f516:	4a06      	ldr	r2, [pc, #24]	; (800f530 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x100>)
 800f518:	2147      	movs	r1, #71	; 0x47
 800f51a:	4806      	ldr	r0, [pc, #24]	; (800f534 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x104>)
 800f51c:	f015 fe76 	bl	802520c <__assert_func>
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800f520:	b209      	sxth	r1, r1
 800f522:	e7d1      	b.n	800f4c8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x98>
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800f524:	fa0f f982 	sxth.w	r9, r2
 800f528:	e7de      	b.n	800f4e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>
 800f52a:	bf00      	nop
 800f52c:	08026700 	.word	0x08026700
 800f530:	08026954 	.word	0x08026954
 800f534:	08026638 	.word	0x08026638

0800f538 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
{
 800f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53c:	b083      	sub	sp, #12
 800f53e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800f542:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
    assert(indicatorMinY < indicatorMaxY && "Slider::setupVerticalSlider - indicatorMinY must be smaller than indicatorMaxY");
 800f546:	42ae      	cmp	r6, r5
 800f548:	d259      	bcs.n	800f5fe <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xc6>
 800f54a:	4604      	mov	r4, r0
 800f54c:	4689      	mov	r9, r1
 800f54e:	4617      	mov	r7, r2
 800f550:	4698      	mov	r8, r3
    sliderOrientation = VERTICAL;
 800f552:	2301      	movs	r3, #1
 800f554:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    background.setXY(backgroundX, backgroundY);
 800f558:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 800f55c:	fa0f fa81 	sxth.w	sl, r1
 800f560:	fa0f fb87 	sxth.w	fp, r7
        setX(x);
 800f564:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f568:	4651      	mov	r1, sl
 800f56a:	9201      	str	r2, [sp, #4]
 800f56c:	4610      	mov	r0, r2
 800f56e:	4798      	blx	r3
        setY(y);
 800f570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f574:	4659      	mov	r1, fp
 800f576:	9801      	ldr	r0, [sp, #4]
 800f578:	4798      	blx	r3
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 800f57a:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
        setX(x);
 800f57e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f584:	4651      	mov	r1, sl
 800f586:	4692      	mov	sl, r2
 800f588:	4610      	mov	r0, r2
 800f58a:	4798      	blx	r3
        setY(y);
 800f58c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f592:	4659      	mov	r1, fp
 800f594:	4650      	mov	r0, sl
 800f596:	4798      	blx	r3
        rect.x = x;
 800f598:	f8a4 8098 	strh.w	r8, [r4, #152]	; 0x98
        return rect.width;
 800f59c:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 800f5a0:	fa19 f181 	uxtah	r1, r9, r1
 800f5a4:	b289      	uxth	r1, r1
 800f5a6:	f9b4 309c 	ldrsh.w	r3, [r4, #156]	; 0x9c
    uint16_t indicatorWidth = indicatorX + static_cast<uint16_t>(indicator.getWidth());
 800f5aa:	fa18 f883 	uxtah	r8, r8, r3
 800f5ae:	fa1f f888 	uxth.w	r8, r8
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800f5b2:	4541      	cmp	r1, r8
 800f5b4:	d929      	bls.n	800f60a <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xd2>
 800f5b6:	b209      	sxth	r1, r1
        return rect.height;
 800f5b8:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 800f5bc:	fa17 f783 	uxtah	r7, r7, r3
 800f5c0:	b2bf      	uxth	r7, r7
 800f5c2:	f9b4 309e 	ldrsh.w	r3, [r4, #158]	; 0x9e
    uint16_t indicatorHeight = indicatorMaxY + static_cast<uint16_t>(indicator.getHeight());
 800f5c6:	fa15 f383 	uxtah	r3, r5, r3
 800f5ca:	b29b      	uxth	r3, r3
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800f5cc:	429f      	cmp	r7, r3
 800f5ce:	d81f      	bhi.n	800f610 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xd8>
 800f5d0:	b21f      	sxth	r7, r3
    indicatorMinPosition = indicatorMinY;
 800f5d2:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxY;
 800f5d6:	f8a4 50ee 	strh.w	r5, [r4, #238]	; 0xee
    setWidth(newWidth);
 800f5da:	6823      	ldr	r3, [r4, #0]
 800f5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4798      	blx	r3
    setHeight(newHeight);
 800f5e2:	6823      	ldr	r3, [r4, #0]
 800f5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5e6:	4639      	mov	r1, r7
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	4798      	blx	r3
    setValue(currentValue);
 800f5ec:	6823      	ldr	r3, [r4, #0]
 800f5ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f5f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	4798      	blx	r3
}
 800f5f8:	b003      	add	sp, #12
 800f5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(indicatorMinY < indicatorMaxY && "Slider::setupVerticalSlider - indicatorMinY must be smaller than indicatorMaxY");
 800f5fe:	4b05      	ldr	r3, [pc, #20]	; (800f614 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xdc>)
 800f600:	4a05      	ldr	r2, [pc, #20]	; (800f618 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe0>)
 800f602:	2163      	movs	r1, #99	; 0x63
 800f604:	4805      	ldr	r0, [pc, #20]	; (800f61c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe4>)
 800f606:	f015 fe01 	bl	802520c <__assert_func>
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800f60a:	fa0f f188 	sxth.w	r1, r8
 800f60e:	e7d3      	b.n	800f5b8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x80>
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800f610:	b23f      	sxth	r7, r7
 800f612:	e7de      	b.n	800f5d2 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x9a>
 800f614:	0802668c 	.word	0x0802668c
 800f618:	080268ec 	.word	0x080268ec
 800f61c:	08026638 	.word	0x08026638

0800f620 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
{
 800f620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f624:	4604      	mov	r4, r0
    position = MIN(MAX(position, indicatorMinPosition), indicatorMaxPosition);
 800f626:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 800f62a:	461a      	mov	r2, r3
 800f62c:	428b      	cmp	r3, r1
 800f62e:	bfb8      	it	lt
 800f630:	460a      	movlt	r2, r1
 800f632:	f9b0 60ee 	ldrsh.w	r6, [r0, #238]	; 0xee
 800f636:	42b2      	cmp	r2, r6
 800f638:	da02      	bge.n	800f640 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x20>
 800f63a:	428b      	cmp	r3, r1
 800f63c:	da36      	bge.n	800f6ac <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 800f63e:	460e      	mov	r6, r1
    if (sliderOrientation == HORIZONTAL)
 800f640:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f644:	2b00      	cmp	r3, #0
 800f646:	d133      	bne.n	800f6b0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x90>
        moveRelative(x - rect.x, y - rect.y);
 800f648:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800f64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64e:	b2b5      	uxth	r5, r6
 800f650:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 800f654:	1a69      	subs	r1, r5, r1
 800f656:	2200      	movs	r2, #0
 800f658:	b209      	sxth	r1, r1
 800f65a:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800f65e:	4798      	blx	r3
        backgroundSelectedViewPort.invalidate();
 800f660:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 800f664:	4638      	mov	r0, r7
 800f666:	f012 f874 	bl	8021752 <_ZNK8touchgfx8Drawable10invalidateEv>
        return rect.x;
 800f66a:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
        backgroundSelectedViewPort.setWidth((position - backgroundSelectedViewPort.getX()) + getIndicatorRadius());
 800f66e:	b280      	uxth	r0, r0
 800f670:	1a2d      	subs	r5, r5, r0
 800f672:	b2ad      	uxth	r5, r5
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f67a:	4620      	mov	r0, r4
 800f67c:	4798      	blx	r3
 800f67e:	4405      	add	r5, r0
        rect.width = width;
 800f680:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
        backgroundSelectedViewPort.invalidate();
 800f684:	4638      	mov	r0, r7
 800f686:	f012 f864 	bl	8021752 <_ZNK8touchgfx8Drawable10invalidateEv>
    currentValue = positionToValue(position);
 800f68a:	6823      	ldr	r3, [r4, #0]
 800f68c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f690:	4631      	mov	r1, r6
 800f692:	4620      	mov	r0, r4
 800f694:	4798      	blx	r3
 800f696:	6320      	str	r0, [r4, #48]	; 0x30
    if ((newValueCallback != 0) && newValueCallback->isValid())
 800f698:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 800f69c:	b120      	cbz	r0, 800f6a8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x88>
 800f69e:	6803      	ldr	r3, [r0, #0]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	4798      	blx	r3
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d14e      	bne.n	800f746 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x126>
}
 800f6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    position = MIN(MAX(position, indicatorMinPosition), indicatorMaxPosition);
 800f6ac:	461e      	mov	r6, r3
 800f6ae:	e7c7      	b.n	800f640 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x20>
        moveRelative(x - rect.x, y - rect.y);
 800f6b0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800f6b4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800f6b6:	b2b2      	uxth	r2, r6
 800f6b8:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 800f6bc:	4690      	mov	r8, r2
 800f6be:	1ad2      	subs	r2, r2, r3
 800f6c0:	b212      	sxth	r2, r2
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800f6c8:	47a8      	blx	r5
        backgroundSelectedViewPort.invalidate();
 800f6ca:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	f012 f83f 	bl	8021752 <_ZNK8touchgfx8Drawable10invalidateEv>
        return y + height;
 800f6d4:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
 800f6d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800f6dc:	441d      	add	r5, r3
 800f6de:	b2ad      	uxth	r5, r5
        int16_t newViewPortHeight = background.getRect().bottom() - (position + getIndicatorRadius());
 800f6e0:	6823      	ldr	r3, [r4, #0]
 800f6e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	4798      	blx	r3
 800f6ea:	4440      	add	r0, r8
 800f6ec:	b280      	uxth	r0, r0
 800f6ee:	1a2d      	subs	r5, r5, r0
 800f6f0:	b2ad      	uxth	r5, r5
 800f6f2:	fa0f f985 	sxth.w	r9, r5
        return rect.x;
 800f6f6:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
        backgroundSelectedViewPort.setPosition(backgroundSelectedViewPort.getX(), position + getIndicatorRadius(), backgroundSelectedViewPort.getWidth(), newViewPortHeight);
 800f6fa:	6823      	ldr	r3, [r4, #0]
 800f6fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f700:	4620      	mov	r0, r4
 800f702:	4798      	blx	r3
 800f704:	eb00 0208 	add.w	r2, r0, r8
        return rect.width;
 800f708:	f9b4 80c8 	ldrsh.w	r8, [r4, #200]	; 0xc8
        setXY(x, y);
 800f70c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f712:	b212      	sxth	r2, r2
 800f714:	4651      	mov	r1, sl
 800f716:	4638      	mov	r0, r7
 800f718:	4798      	blx	r3
        setWidth(width);
 800f71a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f720:	4641      	mov	r1, r8
 800f722:	4638      	mov	r0, r7
 800f724:	4798      	blx	r3
        setHeight(height);
 800f726:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f72c:	4649      	mov	r1, r9
 800f72e:	4638      	mov	r0, r7
 800f730:	4798      	blx	r3
        return rect.height;
 800f732:	f9b4 3072 	ldrsh.w	r3, [r4, #114]	; 0x72
        backgroundSelected.setY(-(backgroundSelected.getHeight() - newViewPortHeight));
 800f736:	b29b      	uxth	r3, r3
 800f738:	1aed      	subs	r5, r5, r3
        rect.y = y;
 800f73a:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
        backgroundSelectedViewPort.invalidate();
 800f73e:	4638      	mov	r0, r7
 800f740:	f012 f807 	bl	8021752 <_ZNK8touchgfx8Drawable10invalidateEv>
 800f744:	e7a1      	b.n	800f68a <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x6a>
        newValueCallback->execute(*this, currentValue);
 800f746:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 800f74a:	6803      	ldr	r3, [r0, #0]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f750:	4621      	mov	r1, r4
 800f752:	4798      	blx	r3
}
 800f754:	e7a8      	b.n	800f6a8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x88>
	...

0800f758 <_ZN8touchgfx6SliderC1Ev>:
Slider::Slider() :
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	b085      	sub	sp, #20
 800f75e:	4605      	mov	r5, r0
        this->x = x;
 800f760:	2400      	movs	r4, #0
 800f762:	8084      	strh	r4, [r0, #4]
        this->y = y;
 800f764:	80c4      	strh	r4, [r0, #6]
        this->width = width;
 800f766:	8104      	strh	r4, [r0, #8]
        this->height = height;
 800f768:	8144      	strh	r4, [r0, #10]
        this->x = 0;
 800f76a:	8184      	strh	r4, [r0, #12]
        this->y = 0;
 800f76c:	81c4      	strh	r4, [r0, #14]
        this->width = 0;
 800f76e:	8204      	strh	r4, [r0, #16]
        this->height = 0;
 800f770:	8244      	strh	r4, [r0, #18]
        visible(true)
 800f772:	6144      	str	r4, [r0, #20]
 800f774:	6184      	str	r4, [r0, #24]
 800f776:	61c4      	str	r4, [r0, #28]
 800f778:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800f77c:	f04f 0a01 	mov.w	sl, #1
 800f780:	f880 a025 	strb.w	sl, [r0, #37]	; 0x25
        firstChild(0)
 800f784:	6284      	str	r4, [r0, #40]	; 0x28
    newValueCallback(0)
 800f786:	4b5a      	ldr	r3, [pc, #360]	; (800f8f0 <_ZN8touchgfx6SliderC1Ev+0x198>)
 800f788:	6003      	str	r3, [r0, #0]
 800f78a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
 800f78e:	6304      	str	r4, [r0, #48]	; 0x30
 800f790:	6344      	str	r4, [r0, #52]	; 0x34
 800f792:	f8c0 a038 	str.w	sl, [r0, #56]	; 0x38
 800f796:	f100 073c 	add.w	r7, r0, #60	; 0x3c
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800f79a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800f79e:	a904      	add	r1, sp, #16
 800f7a0:	f821 9d0c 	strh.w	r9, [r1, #-12]!
        this->x = x;
 800f7a4:	80bc      	strh	r4, [r7, #4]
        this->y = y;
 800f7a6:	80fc      	strh	r4, [r7, #6]
        this->width = width;
 800f7a8:	813c      	strh	r4, [r7, #8]
        this->height = height;
 800f7aa:	817c      	strh	r4, [r7, #10]
        this->x = 0;
 800f7ac:	81bc      	strh	r4, [r7, #12]
        this->y = 0;
 800f7ae:	81fc      	strh	r4, [r7, #14]
        this->width = 0;
 800f7b0:	823c      	strh	r4, [r7, #16]
        this->height = 0;
 800f7b2:	827c      	strh	r4, [r7, #18]
 800f7b4:	617c      	str	r4, [r7, #20]
 800f7b6:	61bc      	str	r4, [r7, #24]
 800f7b8:	61fc      	str	r4, [r7, #28]
 800f7ba:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 800f7be:	f887 a025 	strb.w	sl, [r7, #37]	; 0x25
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800f7c2:	f8df b134 	ldr.w	fp, [pc, #308]	; 800f8f8 <_ZN8touchgfx6SliderC1Ev+0x1a0>
 800f7c6:	f8c0 b03c 	str.w	fp, [r0, #60]	; 0x3c
 800f7ca:	f8a7 9026 	strh.w	r9, [r7, #38]	; 0x26
 800f7ce:	f887 9028 	strb.w	r9, [r7, #40]	; 0x28
    {
        setBitmap(bmp);
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	f000 ffe2 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f7d8:	f105 0868 	add.w	r8, r5, #104	; 0x68
 800f7dc:	a904      	add	r1, sp, #16
 800f7de:	f821 9d08 	strh.w	r9, [r1, #-8]!
        this->x = x;
 800f7e2:	f8a8 4004 	strh.w	r4, [r8, #4]
        this->y = y;
 800f7e6:	f8a8 4006 	strh.w	r4, [r8, #6]
        this->width = width;
 800f7ea:	f8a8 4008 	strh.w	r4, [r8, #8]
        this->height = height;
 800f7ee:	f8a8 400a 	strh.w	r4, [r8, #10]
        this->x = 0;
 800f7f2:	f8a8 400c 	strh.w	r4, [r8, #12]
        this->y = 0;
 800f7f6:	f8a8 400e 	strh.w	r4, [r8, #14]
        this->width = 0;
 800f7fa:	f8a8 4010 	strh.w	r4, [r8, #16]
        this->height = 0;
 800f7fe:	f8a8 4012 	strh.w	r4, [r8, #18]
 800f802:	f8c8 4014 	str.w	r4, [r8, #20]
 800f806:	f8c8 4018 	str.w	r4, [r8, #24]
 800f80a:	f8c8 401c 	str.w	r4, [r8, #28]
 800f80e:	f888 4024 	strb.w	r4, [r8, #36]	; 0x24
 800f812:	f888 a025 	strb.w	sl, [r8, #37]	; 0x25
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800f816:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
 800f81a:	f8a8 9026 	strh.w	r9, [r8, #38]	; 0x26
 800f81e:	f888 9028 	strb.w	r9, [r8, #40]	; 0x28
        setBitmap(bmp);
 800f822:	4640      	mov	r0, r8
 800f824:	f000 ffba 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f828:	f105 0694 	add.w	r6, r5, #148	; 0x94
 800f82c:	a904      	add	r1, sp, #16
 800f82e:	f821 9d04 	strh.w	r9, [r1, #-4]!
        this->x = x;
 800f832:	80b4      	strh	r4, [r6, #4]
        this->y = y;
 800f834:	80f4      	strh	r4, [r6, #6]
        this->width = width;
 800f836:	8134      	strh	r4, [r6, #8]
        this->height = height;
 800f838:	8174      	strh	r4, [r6, #10]
        this->x = 0;
 800f83a:	81b4      	strh	r4, [r6, #12]
        this->y = 0;
 800f83c:	81f4      	strh	r4, [r6, #14]
        this->width = 0;
 800f83e:	8234      	strh	r4, [r6, #16]
        this->height = 0;
 800f840:	8274      	strh	r4, [r6, #18]
 800f842:	6174      	str	r4, [r6, #20]
 800f844:	61b4      	str	r4, [r6, #24]
 800f846:	61f4      	str	r4, [r6, #28]
 800f848:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 800f84c:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800f850:	f8c5 b094 	str.w	fp, [r5, #148]	; 0x94
 800f854:	f8a6 9026 	strh.w	r9, [r6, #38]	; 0x26
 800f858:	f886 9028 	strb.w	r9, [r6, #40]	; 0x28
        setBitmap(bmp);
 800f85c:	4630      	mov	r0, r6
 800f85e:	f000 ff9d 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f862:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
        this->x = x;
 800f866:	f8a5 40c4 	strh.w	r4, [r5, #196]	; 0xc4
        this->y = y;
 800f86a:	f8a5 40c6 	strh.w	r4, [r5, #198]	; 0xc6
        this->width = width;
 800f86e:	f8a5 40c8 	strh.w	r4, [r5, #200]	; 0xc8
        this->height = height;
 800f872:	f8a5 40ca 	strh.w	r4, [r5, #202]	; 0xca
        this->x = 0;
 800f876:	f8a5 40cc 	strh.w	r4, [r5, #204]	; 0xcc
        this->y = 0;
 800f87a:	f8a5 40ce 	strh.w	r4, [r5, #206]	; 0xce
        this->width = 0;
 800f87e:	f8a5 40d0 	strh.w	r4, [r5, #208]	; 0xd0
        this->height = 0;
 800f882:	f8a5 40d2 	strh.w	r4, [r5, #210]	; 0xd2
 800f886:	f8c5 40d4 	str.w	r4, [r5, #212]	; 0xd4
 800f88a:	f8c5 40d8 	str.w	r4, [r5, #216]	; 0xd8
 800f88e:	f8c5 40dc 	str.w	r4, [r5, #220]	; 0xdc
 800f892:	f885 40e4 	strb.w	r4, [r5, #228]	; 0xe4
 800f896:	f885 a0e5 	strb.w	sl, [r5, #229]	; 0xe5
 800f89a:	4b16      	ldr	r3, [pc, #88]	; (800f8f4 <_ZN8touchgfx6SliderC1Ev+0x19c>)
 800f89c:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800f8a0:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
 800f8a4:	f8a5 40ec 	strh.w	r4, [r5, #236]	; 0xec
 800f8a8:	f8a5 a0ee 	strh.w	sl, [r5, #238]	; 0xee
 800f8ac:	f8c5 40f0 	str.w	r4, [r5, #240]	; 0xf0
 800f8b0:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
 800f8b4:	f8c5 40f8 	str.w	r4, [r5, #248]	; 0xf8
        touchable = touch;
 800f8b8:	f885 a024 	strb.w	sl, [r5, #36]	; 0x24
    backgroundSelectedViewPort.add(backgroundSelected);
 800f8bc:	4641      	mov	r1, r8
 800f8be:	4648      	mov	r0, r9
 800f8c0:	f7ff fbaa 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(background);
 800f8c4:	4639      	mov	r1, r7
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f7ff fba6 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(backgroundSelectedViewPort);
 800f8cc:	4649      	mov	r1, r9
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f7ff fba2 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(indicator);
 800f8d4:	4631      	mov	r1, r6
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	f7ff fb9e 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    setValueRange(0, 100);
 800f8dc:	2264      	movs	r2, #100	; 0x64
 800f8de:	4621      	mov	r1, r4
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	f7ff fd6d 	bl	800f3c0 <_ZN8touchgfx6Slider13setValueRangeEii>
}
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	b005      	add	sp, #20
 800f8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ee:	bf00      	nop
 800f8f0:	0802677c 	.word	0x0802677c
 800f8f4:	08026414 	.word	0x08026414
 800f8f8:	08027054 	.word	0x08027054

0800f8fc <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
{
 800f8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f900:	4604      	mov	r4, r0
 800f902:	460e      	mov	r6, r1
 800f904:	4615      	mov	r5, r2
 800f906:	4698      	mov	r8, r3
    assert(sliderBackground.getWidth() == sliderBackgroundSelected.getWidth() &&
 800f908:	4608      	mov	r0, r1
 800f90a:	f013 fb33 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f90e:	4607      	mov	r7, r0
 800f910:	4628      	mov	r0, r5
 800f912:	f013 fb2f 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f916:	4287      	cmp	r7, r0
 800f918:	d121      	bne.n	800f95e <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x62>
 800f91a:	4630      	mov	r0, r6
 800f91c:	f013 fb62 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f920:	4607      	mov	r7, r0
 800f922:	4628      	mov	r0, r5
 800f924:	f013 fb5e 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f928:	4287      	cmp	r7, r0
 800f92a:	d118      	bne.n	800f95e <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x62>
    background.setBitmap(sliderBackground);
 800f92c:	4631      	mov	r1, r6
 800f92e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800f932:	f000 ff33 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundSelected.setBitmap(sliderBackgroundSelected);
 800f936:	4629      	mov	r1, r5
 800f938:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f93c:	f000 ff2e 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    indicator.setBitmap(indicatorBitmap);
 800f940:	4641      	mov	r1, r8
 800f942:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800f946:	f000 ff29 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        return rect.width;
 800f94a:	f9b4 3070 	ldrsh.w	r3, [r4, #112]	; 0x70
        rect.width = width;
 800f94e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
        return rect.height;
 800f952:	f9b4 3072 	ldrsh.w	r3, [r4, #114]	; 0x72
        rect.height = height;
 800f956:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
}
 800f95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(sliderBackground.getWidth() == sliderBackgroundSelected.getWidth() &&
 800f95e:	4b03      	ldr	r3, [pc, #12]	; (800f96c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 800f960:	4a03      	ldr	r2, [pc, #12]	; (800f970 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 800f962:	2137      	movs	r1, #55	; 0x37
 800f964:	4803      	ldr	r0, [pc, #12]	; (800f974 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 800f966:	f015 fc51 	bl	802520c <__assert_func>
 800f96a:	bf00      	nop
 800f96c:	08026500 	.word	0x08026500
 800f970:	08026840 	.word	0x08026840
 800f974:	08026638 	.word	0x08026638

0800f978 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f97c:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f97e:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f980:	8443      	strh	r3, [r0, #34]	; 0x22
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800f982:	6813      	ldr	r3, [r2, #0]
 800f984:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800f986:	6010      	str	r0, [r2, #0]
    }
 800f988:	4770      	bx	lr

0800f98a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 800f98a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800f98e:	b11a      	cbz	r2, 800f998 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 800f990:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800f994:	b102      	cbz	r2, 800f998 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800f996:	6018      	str	r0, [r3, #0]
        }
    }
 800f998:	4770      	bx	lr

0800f99a <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        this->x = x;
 800f99a:	2200      	movs	r2, #0
 800f99c:	8002      	strh	r2, [r0, #0]
        this->y = y;
 800f99e:	8042      	strh	r2, [r0, #2]
        this->width = width;
 800f9a0:	8082      	strh	r2, [r0, #4]
        this->height = height;
 800f9a2:	80c2      	strh	r2, [r0, #6]
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
    {
        return Rect(0, 0, 0, 0);
    }
 800f9a4:	4770      	bx	lr

0800f9a6 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800f9a6:	b538      	push	{r3, r4, r5, lr}
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	4615      	mov	r5, r2
    {
        setX(x);
 800f9ac:	6803      	ldr	r3, [r0, #0]
 800f9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b0:	4798      	blx	r3
        setBaselineY(baselineY);
 800f9b2:	6823      	ldr	r3, [r4, #0]
 800f9b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9b6:	4629      	mov	r1, r5
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	4798      	blx	r3
    }
 800f9bc:	bd38      	pop	{r3, r4, r5, pc}

0800f9be <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
    }
 800f9be:	200e      	movs	r0, #14
 800f9c0:	4770      	bx	lr

0800f9c2 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800f9c2:	4770      	bx	lr

0800f9c4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800f9c4:	b510      	push	{r4, lr}
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	2138      	movs	r1, #56	; 0x38
 800f9ca:	f015 fc03 	bl	80251d4 <_ZdlPvj>
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	bd10      	pop	{r4, pc}
	...

0800f9d4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
    virtual void setBaselineY(int16_t baselineY)
 800f9d4:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800f9d6:	6803      	ldr	r3, [r0, #0]
 800f9d8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
    {
        return typedText;
 800f9da:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    }

private:
    void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f9dc:	4a13      	ldr	r2, [pc, #76]	; (800fa2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800f9de:	6812      	ldr	r2, [r2, #0]
 800f9e0:	b1ba      	cbz	r2, 800fa12 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3e>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	b28d      	uxth	r5, r1
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	4911      	ldr	r1, [pc, #68]	; (800fa30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800f9ea:	8809      	ldrh	r1, [r1, #0]
 800f9ec:	428a      	cmp	r2, r1
 800f9ee:	d216      	bcs.n	800fa1e <_ZN8touchgfx8TextArea12setBaselineYEs+0x4a>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	4a0e      	ldr	r2, [pc, #56]	; (800fa2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800f9f4:	6812      	ldr	r2, [r2, #0]
 800f9f6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f9fa:	4b0e      	ldr	r3, [pc, #56]	; (800fa34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800fa02:	6803      	ldr	r3, [r0, #0]
 800fa04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa06:	4798      	blx	r3
 800fa08:	1a29      	subs	r1, r5, r0
 800fa0a:	b209      	sxth	r1, r1
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	47b0      	blx	r6
    }
 800fa10:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fa12:	4b09      	ldr	r3, [pc, #36]	; (800fa38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800fa14:	4a09      	ldr	r2, [pc, #36]	; (800fa3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800fa16:	21cf      	movs	r1, #207	; 0xcf
 800fa18:	4809      	ldr	r0, [pc, #36]	; (800fa40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x6c>)
 800fa1a:	f015 fbf7 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fa1e:	4b09      	ldr	r3, [pc, #36]	; (800fa44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
 800fa20:	4a06      	ldr	r2, [pc, #24]	; (800fa3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800fa22:	21d0      	movs	r1, #208	; 0xd0
 800fa24:	4806      	ldr	r0, [pc, #24]	; (800fa40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x6c>)
 800fa26:	f015 fbf1 	bl	802520c <__assert_func>
 800fa2a:	bf00      	nop
 800fa2c:	2000bb94 	.word	0x2000bb94
 800fa30:	2000bb98 	.word	0x2000bb98
 800fa34:	2000bb9c 	.word	0x2000bb9c
 800fa38:	08026a38 	.word	0x08026a38
 800fa3c:	08026b20 	.word	0x08026b20
 800fa40:	08026a7c 	.word	0x08026a7c
 800fa44:	08026acc 	.word	0x08026acc

0800fa48 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
    virtual int16_t getTextHeight()
 800fa48:	b508      	push	{r3, lr}
        return typedTextId != TYPED_TEXT_INVALID;
 800fa4a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800fa4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d01b      	beq.n	800fa8c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x44>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fa54:	4a0e      	ldr	r2, [pc, #56]	; (800fa90 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x48>)
 800fa56:	6812      	ldr	r2, [r2, #0]
 800fa58:	b162      	cbz	r2, 800fa74 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x2c>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fa5a:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800fa5c:	4a0d      	ldr	r2, [pc, #52]	; (800fa94 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>)
 800fa5e:	8812      	ldrh	r2, [r2, #0]
 800fa60:	4291      	cmp	r1, r2
 800fa62:	d20d      	bcs.n	800fa80 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x38>
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText(TypedTextId id) const
    {
        return currentLanguagePtr[id];
 800fa64:	4a0c      	ldr	r2, [pc, #48]	; (800fa98 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 800fa66:	6811      	ldr	r1, [r2, #0]
 800fa68:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800fa6a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fa6e:	f001 f981 	bl	8010d74 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
    }
 800fa72:	bd08      	pop	{r3, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fa74:	4b09      	ldr	r3, [pc, #36]	; (800fa9c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 800fa76:	4a0a      	ldr	r2, [pc, #40]	; (800faa0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800fa78:	21cf      	movs	r1, #207	; 0xcf
 800fa7a:	480a      	ldr	r0, [pc, #40]	; (800faa4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800fa7c:	f015 fbc6 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fa80:	4b09      	ldr	r3, [pc, #36]	; (800faa8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 800fa82:	4a07      	ldr	r2, [pc, #28]	; (800faa0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 800fa84:	21d0      	movs	r1, #208	; 0xd0
 800fa86:	4807      	ldr	r0, [pc, #28]	; (800faa4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 800fa88:	f015 fbc0 	bl	802520c <__assert_func>
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	e7f0      	b.n	800fa72 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x2a>
 800fa90:	2000bb94 	.word	0x2000bb94
 800fa94:	2000bb98 	.word	0x2000bb98
 800fa98:	2000baf4 	.word	0x2000baf4
 800fa9c:	08026a38 	.word	0x08026a38
 800faa0:	08026b20 	.word	0x08026b20
 800faa4:	08026a7c 	.word	0x08026a7c
 800faa8:	08026acc 	.word	0x08026acc

0800faac <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
        return typedTextId != TYPED_TEXT_INVALID;
 800faac:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800faae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d053      	beq.n	800fb5e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb2>
    virtual uint16_t getTextWidth() const
 800fab6:	b570      	push	{r4, r5, r6, lr}
 800fab8:	4603      	mov	r3, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800faba:	492a      	ldr	r1, [pc, #168]	; (800fb64 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb8>)
 800fabc:	6809      	ldr	r1, [r1, #0]
 800fabe:	2900      	cmp	r1, #0
 800fac0:	d029      	beq.n	800fb16 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6a>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fac2:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 800fac4:	4928      	ldr	r1, [pc, #160]	; (800fb68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xbc>)
 800fac6:	8809      	ldrh	r1, [r1, #0]
 800fac8:	4288      	cmp	r0, r1
 800faca:	d22a      	bcs.n	800fb22 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x76>
        return fonts[typedTexts[typedTextId].fontIdx];
 800facc:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800face:	4925      	ldr	r1, [pc, #148]	; (800fb64 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb8>)
 800fad0:	6809      	ldr	r1, [r1, #0]
 800fad2:	f811 4010 	ldrb.w	r4, [r1, r0, lsl #1]
 800fad6:	4825      	ldr	r0, [pc, #148]	; (800fb6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc0>)
 800fad8:	6800      	ldr	r0, [r0, #0]
 800fada:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800fade:	6804      	ldr	r4, [r0, #0]
 800fae0:	69e5      	ldr	r5, [r4, #28]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fae2:	b321      	cbz	r1, 800fb2e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x82>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fae4:	8cdc      	ldrh	r4, [r3, #38]	; 0x26
 800fae6:	4920      	ldr	r1, [pc, #128]	; (800fb68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xbc>)
 800fae8:	8809      	ldrh	r1, [r1, #0]
 800faea:	428c      	cmp	r4, r1
 800faec:	d225      	bcs.n	800fb3a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x8e>
        return typedTexts[typedTextId].direction;
 800faee:	491d      	ldr	r1, [pc, #116]	; (800fb64 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xb8>)
 800faf0:	680c      	ldr	r4, [r1, #0]
 800faf2:	eb04 0142 	add.w	r1, r4, r2, lsl #1
 800faf6:	7849      	ldrb	r1, [r1, #1]
 800faf8:	f3c1 0181 	ubfx	r1, r1, #2, #2
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fafc:	b31c      	cbz	r4, 800fb46 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x9a>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fafe:	8cde      	ldrh	r6, [r3, #38]	; 0x26
 800fb00:	4c19      	ldr	r4, [pc, #100]	; (800fb68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xbc>)
 800fb02:	8824      	ldrh	r4, [r4, #0]
 800fb04:	42a6      	cmp	r6, r4
 800fb06:	d224      	bcs.n	800fb52 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xa6>
 800fb08:	4c19      	ldr	r4, [pc, #100]	; (800fb70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc4>)
 800fb0a:	6824      	ldr	r4, [r4, #0]
 800fb0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb12:	47a8      	blx	r5
    }
 800fb14:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fb16:	4b17      	ldr	r3, [pc, #92]	; (800fb74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc8>)
 800fb18:	4a17      	ldr	r2, [pc, #92]	; (800fb78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800fb1a:	21cf      	movs	r1, #207	; 0xcf
 800fb1c:	4817      	ldr	r0, [pc, #92]	; (800fb7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800fb1e:	f015 fb75 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fb22:	4b17      	ldr	r3, [pc, #92]	; (800fb80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd4>)
 800fb24:	4a14      	ldr	r2, [pc, #80]	; (800fb78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800fb26:	21d0      	movs	r1, #208	; 0xd0
 800fb28:	4814      	ldr	r0, [pc, #80]	; (800fb7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800fb2a:	f015 fb6f 	bl	802520c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fb2e:	4b11      	ldr	r3, [pc, #68]	; (800fb74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc8>)
 800fb30:	4a11      	ldr	r2, [pc, #68]	; (800fb78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800fb32:	21cf      	movs	r1, #207	; 0xcf
 800fb34:	4811      	ldr	r0, [pc, #68]	; (800fb7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800fb36:	f015 fb69 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fb3a:	4b11      	ldr	r3, [pc, #68]	; (800fb80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd4>)
 800fb3c:	4a0e      	ldr	r2, [pc, #56]	; (800fb78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800fb3e:	21d0      	movs	r1, #208	; 0xd0
 800fb40:	480e      	ldr	r0, [pc, #56]	; (800fb7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800fb42:	f015 fb63 	bl	802520c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fb46:	4b0b      	ldr	r3, [pc, #44]	; (800fb74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xc8>)
 800fb48:	4a0b      	ldr	r2, [pc, #44]	; (800fb78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800fb4a:	21cf      	movs	r1, #207	; 0xcf
 800fb4c:	480b      	ldr	r0, [pc, #44]	; (800fb7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800fb4e:	f015 fb5d 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fb52:	4b0b      	ldr	r3, [pc, #44]	; (800fb80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd4>)
 800fb54:	4a08      	ldr	r2, [pc, #32]	; (800fb78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xcc>)
 800fb56:	21d0      	movs	r1, #208	; 0xd0
 800fb58:	4808      	ldr	r0, [pc, #32]	; (800fb7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0xd0>)
 800fb5a:	f015 fb57 	bl	802520c <__assert_func>
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800fb5e:	2000      	movs	r0, #0
    }
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop
 800fb64:	2000bb94 	.word	0x2000bb94
 800fb68:	2000bb98 	.word	0x2000bb98
 800fb6c:	2000bb9c 	.word	0x2000bb9c
 800fb70:	2000baf4 	.word	0x2000baf4
 800fb74:	08026a38 	.word	0x08026a38
 800fb78:	08026b20 	.word	0x08026b20
 800fb7c:	08026a7c 	.word	0x08026a7c
 800fb80:	08026acc 	.word	0x08026acc

0800fb84 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
    virtual void draw(const Rect& area) const
 800fb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb88:	b08c      	sub	sp, #48	; 0x30
        return typedTextId != TYPED_TEXT_INVALID;
 800fb8a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
        if (typedText.hasValidId())
 800fb8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fb90:	42a2      	cmp	r2, r4
 800fb92:	d06b      	beq.n	800fc6c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>
 800fb94:	460d      	mov	r5, r1
 800fb96:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fb98:	4b4e      	ldr	r3, [pc, #312]	; (800fcd4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d068      	beq.n	800fc72 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xee>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fba0:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800fba2:	4b4d      	ldr	r3, [pc, #308]	; (800fcd8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x154>)
 800fba4:	881b      	ldrh	r3, [r3, #0]
 800fba6:	4299      	cmp	r1, r3
 800fba8:	d269      	bcs.n	800fc7e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xfa>
        return fonts[typedTexts[typedTextId].fontIdx];
 800fbaa:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 800fbac:	4b49      	ldr	r3, [pc, #292]	; (800fcd4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 800fbb4:	4b49      	ldr	r3, [pc, #292]	; (800fcdc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x158>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            if (fontToDraw != 0)
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d055      	beq.n	800fc6c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800fbc0:	f890 e02e 	ldrb.w	lr, [r0, #46]	; 0x2e
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fbc4:	4943      	ldr	r1, [pc, #268]	; (800fcd4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800fbc6:	6809      	ldr	r1, [r1, #0]
 800fbc8:	2900      	cmp	r1, #0
 800fbca:	d05e      	beq.n	800fc8a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x106>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fbcc:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 800fbce:	4942      	ldr	r1, [pc, #264]	; (800fcd8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x154>)
 800fbd0:	8809      	ldrh	r1, [r1, #0]
 800fbd2:	4288      	cmp	r0, r1
 800fbd4:	d25f      	bcs.n	800fc96 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x112>
        return typedTexts[typedTextId].alignment;
 800fbd6:	493f      	ldr	r1, [pc, #252]	; (800fcd4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800fbd8:	6808      	ldr	r0, [r1, #0]
 800fbda:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800fbde:	7851      	ldrb	r1, [r2, #1]
 800fbe0:	f3c1 0101 	ubfx	r1, r1, #0, #2
 800fbe4:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
 800fbe8:	f894 8030 	ldrb.w	r8, [r4, #48]	; 0x30
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d058      	beq.n	800fca2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x11e>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fbf0:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 800fbf2:	4839      	ldr	r0, [pc, #228]	; (800fcd8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x154>)
 800fbf4:	8800      	ldrh	r0, [r0, #0]
 800fbf6:	4286      	cmp	r6, r0
 800fbf8:	d259      	bcs.n	800fcae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x12a>
        return typedTexts[typedTextId].direction;
 800fbfa:	7852      	ldrb	r2, [r2, #1]
 800fbfc:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800fc00:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
 800fc04:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 800fc08:	6aa7      	ldr	r7, [r4, #40]	; 0x28
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, uint16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
        {
            this->font = font;
 800fc0a:	9305      	str	r3, [sp, #20]
            this->color = color;
 800fc0c:	9707      	str	r7, [sp, #28]
            this->alpha = alpha;
 800fc0e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
            this->alignment = alignment;
 800fc12:	f88d 1018 	strb.w	r1, [sp, #24]
            this->textDirection = textDirection;
 800fc16:	f88d 2019 	strb.w	r2, [sp, #25]
            this->rotation = rotation;
 800fc1a:	f88d 801a 	strb.w	r8, [sp, #26]
            this->linespace = linespace;
 800fc1e:	f8ad c020 	strh.w	ip, [sp, #32]
            this->indentation = indentation;
 800fc22:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23
            this->wideTextAction = wideTextAction;
 800fc26:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
    {
        return instance->lcdRef;
 800fc2a:	4b2d      	ldr	r3, [pc, #180]	; (800fce0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x15c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	689e      	ldr	r6, [r3, #8]
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard);
 800fc30:	4621      	mov	r1, r4
 800fc32:	a80a      	add	r0, sp, #40	; 0x28
 800fc34:	f011 fe37 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fc38:	4b26      	ldr	r3, [pc, #152]	; (800fcd4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x150>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d03c      	beq.n	800fcba <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x136>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fc40:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800fc42:	4b25      	ldr	r3, [pc, #148]	; (800fcd8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x154>)
 800fc44:	881b      	ldrh	r3, [r3, #0]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d23d      	bcs.n	800fcc6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x142>
        return texts->getText(typedTextId);
 800fc4a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800fc4c:	4b25      	ldr	r3, [pc, #148]	; (800fce4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x160>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc54:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fc56:	9202      	str	r2, [sp, #8]
 800fc58:	9301      	str	r3, [sp, #4]
 800fc5a:	ab05      	add	r3, sp, #20
 800fc5c:	9300      	str	r3, [sp, #0]
 800fc5e:	462b      	mov	r3, r5
 800fc60:	aa0c      	add	r2, sp, #48	; 0x30
 800fc62:	e912 0006 	ldmdb	r2, {r1, r2}
 800fc66:	4630      	mov	r0, r6
 800fc68:	f010 f9d4 	bl	8020014 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
    }
 800fc6c:	b00c      	add	sp, #48	; 0x30
 800fc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fc72:	4b1d      	ldr	r3, [pc, #116]	; (800fce8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x164>)
 800fc74:	4a1d      	ldr	r2, [pc, #116]	; (800fcec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800fc76:	21cf      	movs	r1, #207	; 0xcf
 800fc78:	481d      	ldr	r0, [pc, #116]	; (800fcf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800fc7a:	f015 fac7 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fc7e:	4b1d      	ldr	r3, [pc, #116]	; (800fcf4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x170>)
 800fc80:	4a1a      	ldr	r2, [pc, #104]	; (800fcec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800fc82:	21d0      	movs	r1, #208	; 0xd0
 800fc84:	481a      	ldr	r0, [pc, #104]	; (800fcf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800fc86:	f015 fac1 	bl	802520c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fc8a:	4b17      	ldr	r3, [pc, #92]	; (800fce8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x164>)
 800fc8c:	4a17      	ldr	r2, [pc, #92]	; (800fcec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800fc8e:	21cf      	movs	r1, #207	; 0xcf
 800fc90:	4817      	ldr	r0, [pc, #92]	; (800fcf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800fc92:	f015 fabb 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fc96:	4b17      	ldr	r3, [pc, #92]	; (800fcf4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x170>)
 800fc98:	4a14      	ldr	r2, [pc, #80]	; (800fcec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800fc9a:	21d0      	movs	r1, #208	; 0xd0
 800fc9c:	4814      	ldr	r0, [pc, #80]	; (800fcf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800fc9e:	f015 fab5 	bl	802520c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fca2:	4b11      	ldr	r3, [pc, #68]	; (800fce8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x164>)
 800fca4:	4a11      	ldr	r2, [pc, #68]	; (800fcec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800fca6:	21cf      	movs	r1, #207	; 0xcf
 800fca8:	4811      	ldr	r0, [pc, #68]	; (800fcf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800fcaa:	f015 faaf 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fcae:	4b11      	ldr	r3, [pc, #68]	; (800fcf4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x170>)
 800fcb0:	4a0e      	ldr	r2, [pc, #56]	; (800fcec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800fcb2:	21d0      	movs	r1, #208	; 0xd0
 800fcb4:	480e      	ldr	r0, [pc, #56]	; (800fcf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800fcb6:	f015 faa9 	bl	802520c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fcba:	4b0b      	ldr	r3, [pc, #44]	; (800fce8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x164>)
 800fcbc:	4a0b      	ldr	r2, [pc, #44]	; (800fcec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800fcbe:	21cf      	movs	r1, #207	; 0xcf
 800fcc0:	480b      	ldr	r0, [pc, #44]	; (800fcf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800fcc2:	f015 faa3 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fcc6:	4b0b      	ldr	r3, [pc, #44]	; (800fcf4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x170>)
 800fcc8:	4a08      	ldr	r2, [pc, #32]	; (800fcec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x168>)
 800fcca:	21d0      	movs	r1, #208	; 0xd0
 800fccc:	4808      	ldr	r0, [pc, #32]	; (800fcf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x16c>)
 800fcce:	f015 fa9d 	bl	802520c <__assert_func>
 800fcd2:	bf00      	nop
 800fcd4:	2000bb94 	.word	0x2000bb94
 800fcd8:	2000bb98 	.word	0x2000bb98
 800fcdc:	2000bb9c 	.word	0x2000bb9c
 800fce0:	2000bb14 	.word	0x2000bb14
 800fce4:	2000baf4 	.word	0x2000baf4
 800fce8:	08026a38 	.word	0x08026a38
 800fcec:	08026b20 	.word	0x08026b20
 800fcf0:	08026a7c 	.word	0x08026a7c
 800fcf4:	08026acc 	.word	0x08026acc

0800fcf8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
    Container::add(progressIndicatorContainer);
}

touchgfx::AbstractProgressIndicator::~AbstractProgressIndicator()
{
}
 800fcf8:	4770      	bx	lr

0800fcfa <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
}

int16_t AbstractProgressIndicator::getProgressIndicatorX() const
{
    return progressIndicatorContainer.getX();
}
 800fcfa:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 800fcfe:	4770      	bx	lr

0800fd00 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorY() const
{
    return progressIndicatorContainer.getY();
}
 800fd00:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 800fd04:	4770      	bx	lr

0800fd06 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorWidth() const
{
    return progressIndicatorContainer.getWidth();
}
 800fd06:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 800fd0a:	4770      	bx	lr

0800fd0c <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorHeight() const
{
    return progressIndicatorContainer.getHeight();
}
 800fd0c:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 800fd10:	4770      	bx	lr

0800fd12 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
    rangeStepsMin = minStep;
    assert(rangeStepsMin < rangeSteps);
}

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max, uint16_t& steps, uint16_t& minStep) const
{
 800fd12:	b410      	push	{r4}
    min = rangeMin;
 800fd14:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 800fd18:	800c      	strh	r4, [r1, #0]
    max = rangeMax;
 800fd1a:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 800fd1e:	8011      	strh	r1, [r2, #0]
    steps = rangeSteps;
 800fd20:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 800fd24:	801a      	strh	r2, [r3, #0]
    minStep = rangeStepsMin;
 800fd26:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 800fd2a:	9b01      	ldr	r3, [sp, #4]
 800fd2c:	801a      	strh	r2, [r3, #0]
}
 800fd2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max, uint16_t& steps) const
{
 800fd34:	b410      	push	{r4}
    min = rangeMin;
 800fd36:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 800fd3a:	800c      	strh	r4, [r1, #0]
    max = rangeMax;
 800fd3c:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 800fd40:	8011      	strh	r1, [r2, #0]
    steps = rangeSteps;
 800fd42:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 800fd46:	801a      	strh	r2, [r3, #0]
}
 800fd48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd4c:	4770      	bx	lr

0800fd4e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max) const
{
    min = rangeMin;
 800fd4e:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 800fd52:	800b      	strh	r3, [r1, #0]
    max = rangeMax;
 800fd54:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 800fd58:	8013      	strh	r3, [r2, #0]
}
 800fd5a:	4770      	bx	lr

0800fd5c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:

void AbstractProgressIndicator::setValue(int value)
{
    int newValue = MAX(value, rangeMin);
 800fd5c:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 800fd60:	4299      	cmp	r1, r3
 800fd62:	bfb8      	it	lt
 800fd64:	4619      	movlt	r1, r3
    newValue = MIN(newValue, rangeMax);
 800fd66:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 800fd6a:	4299      	cmp	r1, r3
 800fd6c:	bfa8      	it	ge
 800fd6e:	4619      	movge	r1, r3
    currentValue = newValue;
 800fd70:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
}
 800fd74:	4770      	bx	lr

0800fd76 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:

int AbstractProgressIndicator::getValue() const
{
    return currentValue;
}
 800fd76:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 800fd7a:	4770      	bx	lr

0800fd7c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
touchgfx::AbstractProgressIndicator::~AbstractProgressIndicator()
 800fd7c:	b510      	push	{r4, lr}
 800fd7e:	4604      	mov	r4, r0
}
 800fd80:	2190      	movs	r1, #144	; 0x90
 800fd82:	f015 fa27 	bl	80251d4 <_ZdlPvj>
 800fd86:	4620      	mov	r0, r4
 800fd88:	bd10      	pop	{r4, pc}

0800fd8a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
{
 800fd8a:	b510      	push	{r4, lr}
 800fd8c:	4604      	mov	r4, r0
    background.setBitmap(bmpBackground);
 800fd8e:	302c      	adds	r0, #44	; 0x2c
 800fd90:	f000 fd04 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        return rect.width;
 800fd94:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
        rect.width = width;
 800fd98:	8123      	strh	r3, [r4, #8]
        return rect.height;
 800fd9a:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
        rect.height = height;
 800fd9e:	8163      	strh	r3, [r4, #10]
}
 800fda0:	bd10      	pop	{r4, pc}
	...

0800fda4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
{
 800fda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fda8:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    assert(min < max);
 800fdac:	4291      	cmp	r1, r2
 800fdae:	da1b      	bge.n	800fde8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x44>
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	460e      	mov	r6, r1
 800fdb4:	4615      	mov	r5, r2
 800fdb6:	4698      	mov	r8, r3
    rangeMin = min;
 800fdb8:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
    rangeMax = max;
 800fdbc:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
    setValue(currentValue);
 800fdc0:	6803      	ldr	r3, [r0, #0]
 800fdc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fdc6:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 800fdca:	4798      	blx	r3
    if (steps == 0)
 800fdcc:	f1b8 0f00 	cmp.w	r8, #0
 800fdd0:	d110      	bne.n	800fdf4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x50>
        rangeSteps = max - min;
 800fdd2:	1bad      	subs	r5, r5, r6
 800fdd4:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
    rangeStepsMin = minStep;
 800fdd8:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
    assert(rangeStepsMin < rangeSteps);
 800fddc:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 800fde0:	42bb      	cmp	r3, r7
 800fde2:	d90a      	bls.n	800fdfa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x56>
}
 800fde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(min < max);
 800fde8:	4b07      	ldr	r3, [pc, #28]	; (800fe08 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 800fdea:	4a08      	ldr	r2, [pc, #32]	; (800fe0c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 800fdec:	214d      	movs	r1, #77	; 0x4d
 800fdee:	4808      	ldr	r0, [pc, #32]	; (800fe10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 800fdf0:	f015 fa0c 	bl	802520c <__assert_func>
        rangeSteps = steps;
 800fdf4:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 800fdf8:	e7ee      	b.n	800fdd8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x34>
    assert(rangeStepsMin < rangeSteps);
 800fdfa:	4b06      	ldr	r3, [pc, #24]	; (800fe14 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x70>)
 800fdfc:	4a03      	ldr	r2, [pc, #12]	; (800fe0c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 800fdfe:	215a      	movs	r1, #90	; 0x5a
 800fe00:	4803      	ldr	r0, [pc, #12]	; (800fe10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 800fe02:	f015 fa03 	bl	802520c <__assert_func>
 800fe06:	bf00      	nop
 800fe08:	08026b50 	.word	0x08026b50
 800fe0c:	08026cb8 	.word	0x08026cb8
 800fe10:	08026b5c 	.word	0x08026b5c
 800fe14:	08026bd8 	.word	0x08026bd8

0800fe18 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:

uint16_t AbstractProgressIndicator::getProgress(uint16_t range /*= 100*/) const
{
 800fe18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe1a:	b083      	sub	sp, #12
    if (range == 0)
 800fe1c:	460d      	mov	r5, r1
 800fe1e:	b911      	cbnz	r1, 800fe26 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0xe>
    // Find out at what step the current value is.
    int32_t step = rangeStepsMin + muldiv(currentValue - rangeMin, rangeSteps - rangeStepsMin, rangeMax - rangeMin, remainder);
    // Scale the step up to [0..range]
    int32_t prog = muldiv(step, range, rangeSteps, remainder);
    return (uint16_t)prog;
}
 800fe20:	4628      	mov	r0, r5
 800fe22:	b003      	add	sp, #12
 800fe24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe26:	4604      	mov	r4, r0
    int32_t step = rangeStepsMin + muldiv(currentValue - rangeMin, rangeSteps - rangeStepsMin, rangeMax - rangeMin, remainder);
 800fe28:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 800fe2c:	f8b0 7088 	ldrh.w	r7, [r0, #136]	; 0x88
 800fe30:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 800fe34:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 800fe38:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 800fe3c:	ab01      	add	r3, sp, #4
 800fe3e:	1a12      	subs	r2, r2, r0
 800fe40:	1b89      	subs	r1, r1, r6
 800fe42:	1a38      	subs	r0, r7, r0
 800fe44:	f011 fd8b 	bl	802195e <_ZN8touchgfx6muldivElllRl>
    int32_t prog = muldiv(step, range, rangeSteps, remainder);
 800fe48:	ab01      	add	r3, sp, #4
 800fe4a:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 800fe4e:	4629      	mov	r1, r5
 800fe50:	4430      	add	r0, r6
 800fe52:	f011 fd84 	bl	802195e <_ZN8touchgfx6muldivElllRl>
    return (uint16_t)prog;
 800fe56:	b285      	uxth	r5, r0
 800fe58:	e7e2      	b.n	800fe20 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x8>

0800fe5a <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
{
 800fe5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe5e:	4604      	mov	r4, r0
 800fe60:	4688      	mov	r8, r1
 800fe62:	4616      	mov	r6, r2
 800fe64:	4699      	mov	r9, r3
 800fe66:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    progressIndicatorContainer.setPosition(x, y, width, height);
 800fe6a:	f100 0558 	add.w	r5, r0, #88	; 0x58
        setXY(x, y);
 800fe6e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800fe70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe72:	4628      	mov	r0, r5
 800fe74:	4798      	blx	r3
        setWidth(width);
 800fe76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fe78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe7a:	4649      	mov	r1, r9
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	4798      	blx	r3
        setHeight(height);
 800fe80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fe82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe84:	4639      	mov	r1, r7
 800fe86:	4628      	mov	r0, r5
 800fe88:	4798      	blx	r3
        return rect.width;
 800fe8a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    if (getWidth() < x + width)
 800fe8e:	eb08 0309 	add.w	r3, r8, r9
 800fe92:	429a      	cmp	r2, r3
 800fe94:	da00      	bge.n	800fe98 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss+0x3e>
        rect.width = width;
 800fe96:	8123      	strh	r3, [r4, #8]
        return rect.height;
 800fe98:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    if (getHeight() < y + height)
 800fe9c:	19f3      	adds	r3, r6, r7
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	da00      	bge.n	800fea4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss+0x4a>
        rect.height = height;
 800fea2:	8163      	strh	r3, [r4, #10]
}
 800fea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fea8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
AbstractProgressIndicator::AbstractProgressIndicator()
 800fea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feaa:	b083      	sub	sp, #12
 800feac:	4605      	mov	r5, r0
        this->x = x;
 800feae:	2400      	movs	r4, #0
 800feb0:	8084      	strh	r4, [r0, #4]
        this->y = y;
 800feb2:	80c4      	strh	r4, [r0, #6]
        this->width = width;
 800feb4:	8104      	strh	r4, [r0, #8]
        this->height = height;
 800feb6:	8144      	strh	r4, [r0, #10]
        this->x = 0;
 800feb8:	8184      	strh	r4, [r0, #12]
        this->y = 0;
 800feba:	81c4      	strh	r4, [r0, #14]
        this->width = 0;
 800febc:	8204      	strh	r4, [r0, #16]
        this->height = 0;
 800febe:	8244      	strh	r4, [r0, #18]
        visible(true)
 800fec0:	6144      	str	r4, [r0, #20]
 800fec2:	6184      	str	r4, [r0, #24]
 800fec4:	61c4      	str	r4, [r0, #28]
 800fec6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800feca:	2701      	movs	r7, #1
 800fecc:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
 800fed0:	6284      	str	r4, [r0, #40]	; 0x28
    : Container(), rangeMin(0), rangeMax(100), currentValue(0), rangeSteps(100), rangeStepsMin(0)
 800fed2:	4606      	mov	r6, r0
 800fed4:	4b2d      	ldr	r3, [pc, #180]	; (800ff8c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xe4>)
 800fed6:	f846 3b2c 	str.w	r3, [r6], #44
 800feda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fede:	a902      	add	r1, sp, #8
 800fee0:	f821 3d04 	strh.w	r3, [r1, #-4]!
        this->x = x;
 800fee4:	80b4      	strh	r4, [r6, #4]
        this->y = y;
 800fee6:	80f4      	strh	r4, [r6, #6]
        this->width = width;
 800fee8:	8134      	strh	r4, [r6, #8]
        this->height = height;
 800feea:	8174      	strh	r4, [r6, #10]
        this->x = 0;
 800feec:	81b4      	strh	r4, [r6, #12]
        this->y = 0;
 800feee:	81f4      	strh	r4, [r6, #14]
        this->width = 0;
 800fef0:	8234      	strh	r4, [r6, #16]
        this->height = 0;
 800fef2:	8274      	strh	r4, [r6, #18]
 800fef4:	6174      	str	r4, [r6, #20]
 800fef6:	61b4      	str	r4, [r6, #24]
 800fef8:	61f4      	str	r4, [r6, #28]
 800fefa:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 800fefe:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800ff02:	4a23      	ldr	r2, [pc, #140]	; (800ff90 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xe8>)
 800ff04:	62c2      	str	r2, [r0, #44]	; 0x2c
 800ff06:	84f3      	strh	r3, [r6, #38]	; 0x26
 800ff08:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
        setBitmap(bmp);
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f000 fc45 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        this->x = x;
 800ff12:	f8a5 405c 	strh.w	r4, [r5, #92]	; 0x5c
        this->y = y;
 800ff16:	f8a5 405e 	strh.w	r4, [r5, #94]	; 0x5e
        this->width = width;
 800ff1a:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
        this->height = height;
 800ff1e:	f8a5 4062 	strh.w	r4, [r5, #98]	; 0x62
        this->x = 0;
 800ff22:	f8a5 4064 	strh.w	r4, [r5, #100]	; 0x64
        this->y = 0;
 800ff26:	f8a5 4066 	strh.w	r4, [r5, #102]	; 0x66
        this->width = 0;
 800ff2a:	f8a5 4068 	strh.w	r4, [r5, #104]	; 0x68
        this->height = 0;
 800ff2e:	f8a5 406a 	strh.w	r4, [r5, #106]	; 0x6a
 800ff32:	66ec      	str	r4, [r5, #108]	; 0x6c
 800ff34:	672c      	str	r4, [r5, #112]	; 0x70
 800ff36:	676c      	str	r4, [r5, #116]	; 0x74
 800ff38:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
 800ff3c:	f885 707d 	strb.w	r7, [r5, #125]	; 0x7d
 800ff40:	4b14      	ldr	r3, [pc, #80]	; (800ff94 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xec>)
 800ff42:	65ab      	str	r3, [r5, #88]	; 0x58
 800ff44:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 800ff48:	f8a5 4084 	strh.w	r4, [r5, #132]	; 0x84
 800ff4c:	2364      	movs	r3, #100	; 0x64
 800ff4e:	f8a5 3086 	strh.w	r3, [r5, #134]	; 0x86
 800ff52:	f8a5 4088 	strh.w	r4, [r5, #136]	; 0x88
 800ff56:	f8a5 308a 	strh.w	r3, [r5, #138]	; 0x8a
 800ff5a:	f8a5 408c 	strh.w	r4, [r5, #140]	; 0x8c
        setX(x);
 800ff5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ff60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff62:	4621      	mov	r1, r4
 800ff64:	4630      	mov	r0, r6
 800ff66:	4798      	blx	r3
        setY(y);
 800ff68:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ff6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff6c:	4621      	mov	r1, r4
 800ff6e:	4630      	mov	r0, r6
 800ff70:	4798      	blx	r3
    Container::add(background);
 800ff72:	4631      	mov	r1, r6
 800ff74:	4628      	mov	r0, r5
 800ff76:	f7ff f84f 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(progressIndicatorContainer);
 800ff7a:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800ff7e:	4628      	mov	r0, r5
 800ff80:	f7ff f84a 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800ff84:	4628      	mov	r0, r5
 800ff86:	b003      	add	sp, #12
 800ff88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	08026bfc 	.word	0x08026bfc
 800ff90:	08027054 	.word	0x08027054
 800ff94:	08026414 	.word	0x08026414

0800ff98 <_ZN8touchgfx14CircleProgress9setCenterEii>:
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800ff98:	0149      	lsls	r1, r1, #5
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 800ff9a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 800ff9e:	0152      	lsls	r2, r2, #5
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 800ffa0:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
}

void CircleProgress::setCenter(int x, int y)
{
    circle.setCenter(x, y);
}
 800ffa4:	4770      	bx	lr

0800ffa6 <_ZNK8touchgfx14CircleProgress9getCenterERiS1_>:
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800ffa6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	db08      	blt.n	800ffc0 <_ZNK8touchgfx14CircleProgress9getCenterERiS1_+0x1a>
 800ffae:	115b      	asrs	r3, r3, #5
     * @param [out] y The y coordinate of the center.
     */
    template <typename T>
    void getCenter(T& x, T& y) const
    {
        x = circleCenterX.to<T>();
 800ffb0:	600b      	str	r3, [r1, #0]
 800ffb2:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	db04      	blt.n	800ffc4 <_ZNK8touchgfx14CircleProgress9getCenterERiS1_+0x1e>
 800ffba:	115b      	asrs	r3, r3, #5
        y = circleCenterY.to<T>();
 800ffbc:	6013      	str	r3, [r2, #0]

void CircleProgress::getCenter(int& x, int& y) const
{
    circle.getCenter(x, y);
}
 800ffbe:	4770      	bx	lr
 800ffc0:	331f      	adds	r3, #31
 800ffc2:	e7f4      	b.n	800ffae <_ZNK8touchgfx14CircleProgress9getCenterERiS1_+0x8>
 800ffc4:	331f      	adds	r3, #31
 800ffc6:	e7f8      	b.n	800ffba <_ZNK8touchgfx14CircleProgress9getCenterERiS1_+0x14>

0800ffc8 <_ZN8touchgfx14CircleProgress9setRadiusEi>:
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800ffc8:	0149      	lsls	r1, r1, #5
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setRadius(const T r)
    {
        this->circleRadius = CWRUtil::toQ5<T>(r);
 800ffca:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8

void CircleProgress::setRadius(int r)
{
    circle.setRadius(r);
}
 800ffce:	4770      	bx	lr

0800ffd0 <_ZNK8touchgfx14CircleProgress9getRadiusEv>:
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800ffd0:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	db01      	blt.n	800ffdc <_ZNK8touchgfx14CircleProgress9getRadiusEv+0xc>
int CircleProgress::getRadius() const
{
    int radius;
    circle.getRadius(radius);
    return radius;
}
 800ffd8:	1140      	asrs	r0, r0, #5
 800ffda:	4770      	bx	lr
 800ffdc:	301f      	adds	r0, #31
 800ffde:	e7fb      	b.n	800ffd8 <_ZNK8touchgfx14CircleProgress9getRadiusEv+0x8>

0800ffe0 <_ZN8touchgfx14CircleProgress12setLineWidthEi>:
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800ffe0:	0149      	lsls	r1, r1, #5
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 800ffe2:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4

void CircleProgress::setLineWidth(int width)
{
    circle.setLineWidth(width);
}
 800ffe6:	4770      	bx	lr

0800ffe8 <_ZNK8touchgfx14CircleProgress12getLineWidthEv>:
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 800ffe8:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
 800ffec:	2800      	cmp	r0, #0
 800ffee:	db01      	blt.n	800fff4 <_ZNK8touchgfx14CircleProgress12getLineWidthEv+0xc>
int CircleProgress::getLineWidth() const
{
    int width;
    circle.getLineWidth(width);
    return width;
}
 800fff0:	1140      	asrs	r0, r0, #5
 800fff2:	4770      	bx	lr
 800fff4:	301f      	adds	r0, #31
 800fff6:	e7fb      	b.n	800fff0 <_ZNK8touchgfx14CircleProgress12getLineWidthEv+0x8>

0800fff8 <_ZNK8touchgfx14CircleProgress13getStartAngleEv>:
 800fff8:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 800fffc:	2800      	cmp	r0, #0
 800fffe:	db02      	blt.n	8010006 <_ZNK8touchgfx14CircleProgress13getStartAngleEv+0xe>
}

int CircleProgress::getStartAngle() const
{
    return circle.getArcStart();
}
 8010000:	f340 104f 	sbfx	r0, r0, #5, #16
 8010004:	4770      	bx	lr
 8010006:	301f      	adds	r0, #31
 8010008:	e7fa      	b.n	8010000 <_ZNK8touchgfx14CircleProgress13getStartAngleEv+0x8>

0801000a <_ZNK8touchgfx14CircleProgress11getEndAngleEv>:

int CircleProgress::getEndAngle() const
{
    return circleEndAngle;
}
 801000a:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 801000e:	4770      	bx	lr

08010010 <_ZN8touchgfx14CircleProgress8setAlphaEh>:
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    virtual void setAlpha(uint8_t alpha)
    {
        this->alpha = alpha;
 8010010:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe

void CircleProgress::setAlpha(uint8_t alpha)
{
    circle.setAlpha(alpha);
}
 8010014:	4770      	bx	lr

08010016 <_ZNK8touchgfx14CircleProgress8getAlphaEv>:

uint8_t CircleProgress::getAlpha() const
{
    return circle.getAlpha();
}
 8010016:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
 801001a:	4770      	bx	lr

0801001c <_ZN8touchgfx14CircleProgressD1Ev>:
CircleProgress::~CircleProgress()
 801001c:	b510      	push	{r4, lr}
 801001e:	4604      	mov	r4, r0
 8010020:	4b05      	ldr	r3, [pc, #20]	; (8010038 <_ZN8touchgfx14CircleProgressD1Ev+0x1c>)
 8010022:	6003      	str	r3, [r0, #0]
class Circle : public CanvasWidget
 8010024:	4b05      	ldr	r3, [pc, #20]	; (801003c <_ZN8touchgfx14CircleProgressD1Ev+0x20>)
 8010026:	f840 3f90 	str.w	r3, [r0, #144]!
 801002a:	f001 ff7f 	bl	8011f2c <_ZN8touchgfx12CanvasWidgetD1Ev>
 801002e:	4620      	mov	r0, r4
 8010030:	f7ff fe62 	bl	800fcf8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
}
 8010034:	4620      	mov	r0, r4
 8010036:	bd10      	pop	{r4, pc}
 8010038:	08026dac 	.word	0x08026dac
 801003c:	08027578 	.word	0x08027578

08010040 <_ZN8touchgfx14CircleProgress10setPainterERNS_15AbstractPainterE>:
{
 8010040:	b508      	push	{r3, lr}
    circle.setPainter(painter);
 8010042:	3090      	adds	r0, #144	; 0x90
 8010044:	f001 fe80 	bl	8011d48 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
}
 8010048:	bd08      	pop	{r3, pc}

0801004a <_ZN8touchgfx14CircleProgressD0Ev>:
CircleProgress::~CircleProgress()
 801004a:	b510      	push	{r4, lr}
 801004c:	4604      	mov	r4, r0
}
 801004e:	f7ff ffe5 	bl	801001c <_ZN8touchgfx14CircleProgressD1Ev>
 8010052:	21e0      	movs	r1, #224	; 0xe0
 8010054:	4620      	mov	r0, r4
 8010056:	f015 f8bd 	bl	80251d4 <_ZdlPvj>
 801005a:	4620      	mov	r0, r4
 801005c:	bd10      	pop	{r4, pc}

0801005e <_ZN8touchgfx14CircleProgress15setCapPrecisionEi>:
{
 801005e:	b508      	push	{r3, lr}
    circle.setCapPrecision(precision);
 8010060:	3090      	adds	r0, #144	; 0x90
 8010062:	f001 ff99 	bl	8011f98 <_ZN8touchgfx6Circle15setCapPrecisionEi>
}
 8010066:	bd08      	pop	{r3, pc}

08010068 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>:
{
 8010068:	b508      	push	{r3, lr}
    assert(startAngle != endAngle);
 801006a:	4291      	cmp	r1, r2
 801006c:	d008      	beq.n	8010080 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x18>
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 801006e:	0149      	lsls	r1, r1, #5
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 8010070:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
 8010074:	0153      	lsls	r3, r2, #5
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 8010076:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
    circleEndAngle = endAngle;
 801007a:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
}
 801007e:	bd08      	pop	{r3, pc}
    assert(startAngle != endAngle);
 8010080:	4b02      	ldr	r3, [pc, #8]	; (801008c <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x24>)
 8010082:	4a03      	ldr	r2, [pc, #12]	; (8010090 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x28>)
 8010084:	2155      	movs	r1, #85	; 0x55
 8010086:	4803      	ldr	r0, [pc, #12]	; (8010094 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii+0x2c>)
 8010088:	f015 f8c0 	bl	802520c <__assert_func>
 801008c:	08026d1c 	.word	0x08026d1c
 8010090:	08026ea0 	.word	0x08026ea0
 8010094:	08026d34 	.word	0x08026d34

08010098 <_ZNK8touchgfx14CircleProgress15getCapPrecisionEv>:
     *
     *        Gets the cap precision.
     *
     * @return The cap precision.
     */
    virtual int getCapPrecision() const
 8010098:	b508      	push	{r3, lr}
    {
        return circle.getCapPrecision();
 801009a:	3090      	adds	r0, #144	; 0x90
 801009c:	f001 ff86 	bl	8011fac <_ZNK8touchgfx6Circle15getCapPrecisionEv>
    }
 80100a0:	bd08      	pop	{r3, pc}
	...

080100a4 <_ZN8touchgfx14CircleProgressC1Ev>:
CircleProgress::CircleProgress()
 80100a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a6:	4604      	mov	r4, r0
    : AbstractProgressIndicator(), circle()
 80100a8:	f7ff fefe 	bl	800fea8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80100ac:	4625      	mov	r5, r4
 80100ae:	4b15      	ldr	r3, [pc, #84]	; (8010104 <_ZN8touchgfx14CircleProgressC1Ev+0x60>)
 80100b0:	f845 3b90 	str.w	r3, [r5], #144
 80100b4:	4628      	mov	r0, r5
 80100b6:	f001 ff53 	bl	8011f60 <_ZN8touchgfx6CircleC1Ev>
    progressIndicatorContainer.add(circle);
 80100ba:	4629      	mov	r1, r5
 80100bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100c0:	f7fe ffaa 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        return rect.width;
 80100c4:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
        return rect.height;
 80100c8:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
        setXY(x, y);
 80100cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80100d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100d2:	2200      	movs	r2, #0
 80100d4:	4611      	mov	r1, r2
 80100d6:	4628      	mov	r0, r5
 80100d8:	4798      	blx	r3
        setWidth(width);
 80100da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80100de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100e0:	4639      	mov	r1, r7
 80100e2:	4628      	mov	r0, r5
 80100e4:	4798      	blx	r3
        setHeight(height);
 80100e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80100ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ec:	4631      	mov	r1, r6
 80100ee:	4628      	mov	r0, r5
 80100f0:	4798      	blx	r3
    CircleProgress::setStartEndAngle(0, 360);
 80100f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80100f6:	2100      	movs	r1, #0
 80100f8:	4620      	mov	r0, r4
 80100fa:	f7ff ffb5 	bl	8010068 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>
}
 80100fe:	4620      	mov	r0, r4
 8010100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010102:	bf00      	nop
 8010104:	08026dac 	.word	0x08026dac

08010108 <_ZN8touchgfx14CircleProgress28setProgressIndicatorPositionEssss>:
{
 8010108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801010c:	b083      	sub	sp, #12
 801010e:	4604      	mov	r4, r0
 8010110:	4688      	mov	r8, r1
 8010112:	4691      	mov	r9, r2
 8010114:	461e      	mov	r6, r3
 8010116:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
    circle.setPosition(0, 0, width, height);
 801011a:	f100 0590 	add.w	r5, r0, #144	; 0x90
        setXY(x, y);
 801011e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8010122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010124:	2200      	movs	r2, #0
 8010126:	4611      	mov	r1, r2
 8010128:	4628      	mov	r0, r5
 801012a:	4798      	blx	r3
        setWidth(width);
 801012c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8010130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010132:	4631      	mov	r1, r6
 8010134:	4628      	mov	r0, r5
 8010136:	4798      	blx	r3
        setHeight(height);
 8010138:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801013c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801013e:	4639      	mov	r1, r7
 8010140:	4628      	mov	r0, r5
 8010142:	4798      	blx	r3
    AbstractProgressIndicator::setProgressIndicatorPosition(x, y, width, height);
 8010144:	9700      	str	r7, [sp, #0]
 8010146:	4633      	mov	r3, r6
 8010148:	464a      	mov	r2, r9
 801014a:	4641      	mov	r1, r8
 801014c:	4620      	mov	r0, r4
 801014e:	f7ff fe84 	bl	800fe5a <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>
}
 8010152:	b003      	add	sp, #12
 8010154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010158 <_ZN8touchgfx14CircleProgress8setValueEi>:

void CircleProgress::setValue(int value)
{
 8010158:	b570      	push	{r4, r5, r6, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	4605      	mov	r5, r0
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801015e:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
 8010162:	2c00      	cmp	r4, #0
 8010164:	db1e      	blt.n	80101a4 <_ZN8touchgfx14CircleProgress8setValueEi+0x4c>
 8010166:	1164      	asrs	r4, r4, #5
        return circleArcAngleStart.to<int>();
 8010168:	b226      	sxth	r6, r4
    int startAngle = circle.getArcStart();
    AbstractProgressIndicator::setValue(value);
 801016a:	4628      	mov	r0, r5
 801016c:	f7ff fdf6 	bl	800fd5c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
    uint16_t rangeAngleSteps = circleEndAngle < startAngle ? startAngle - circleEndAngle : circleEndAngle - startAngle;
 8010170:	f8d5 10dc 	ldr.w	r1, [r5, #220]	; 0xdc
 8010174:	42b1      	cmp	r1, r6
 8010176:	da17      	bge.n	80101a8 <_ZN8touchgfx14CircleProgress8setValueEi+0x50>
 8010178:	b2a3      	uxth	r3, r4
 801017a:	b289      	uxth	r1, r1
 801017c:	1a59      	subs	r1, r3, r1
 801017e:	b289      	uxth	r1, r1
    uint16_t progress = AbstractProgressIndicator::getProgress(rangeAngleSteps);
 8010180:	4628      	mov	r0, r5
 8010182:	f7ff fe49 	bl	800fe18 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
    if (circleEndAngle < startAngle)
 8010186:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
 801018a:	42b3      	cmp	r3, r6
 801018c:	db11      	blt.n	80101b2 <_ZN8touchgfx14CircleProgress8setValueEi+0x5a>
    {
        circle.updateArcEnd(startAngle - progress);
    }
    else
    {
        circle.updateArcEnd(startAngle + progress);
 801018e:	f105 0490 	add.w	r4, r5, #144	; 0x90
 8010192:	4430      	add	r0, r6
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8010194:	0140      	lsls	r0, r0, #5
        CWRUtil::Q5 endAngleQ5 = CWRUtil::toQ5<T>(endAngle);
 8010196:	9001      	str	r0, [sp, #4]
            return v;
 8010198:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
        if (circleArcAngleEnd == endAngleQ5)
 801019c:	4298      	cmp	r0, r3
 801019e:	d120      	bne.n	80101e2 <_ZN8touchgfx14CircleProgress8setValueEi+0x8a>
    }
}
 80101a0:	b004      	add	sp, #16
 80101a2:	bd70      	pop	{r4, r5, r6, pc}
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80101a4:	341f      	adds	r4, #31
 80101a6:	e7de      	b.n	8010166 <_ZN8touchgfx14CircleProgress8setValueEi+0xe>
    uint16_t rangeAngleSteps = circleEndAngle < startAngle ? startAngle - circleEndAngle : circleEndAngle - startAngle;
 80101a8:	b289      	uxth	r1, r1
 80101aa:	b2a3      	uxth	r3, r4
 80101ac:	1ac9      	subs	r1, r1, r3
 80101ae:	b289      	uxth	r1, r1
 80101b0:	e7e6      	b.n	8010180 <_ZN8touchgfx14CircleProgress8setValueEi+0x28>
        circle.updateArcEnd(startAngle - progress);
 80101b2:	f105 0490 	add.w	r4, r5, #144	; 0x90
 80101b6:	1a30      	subs	r0, r6, r0
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80101b8:	0140      	lsls	r0, r0, #5
        CWRUtil::Q5 endAngleQ5 = CWRUtil::toQ5<T>(endAngle);
 80101ba:	9001      	str	r0, [sp, #4]
            return v;
 80101bc:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
        if (circleArcAngleEnd == endAngleQ5)
 80101c0:	4298      	cmp	r0, r3
 80101c2:	d0ed      	beq.n	80101a0 <_ZN8touchgfx14CircleProgress8setValueEi+0x48>
        Rect minimalRect = getMinimalRectForUpdatedEndAngle(endAngleQ5);
 80101c4:	aa01      	add	r2, sp, #4
 80101c6:	4621      	mov	r1, r4
 80101c8:	a802      	add	r0, sp, #8
 80101ca:	f002 ff3c 	bl	8013046 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>
        circleArcAngleEnd = endAngleQ5;
 80101ce:	9b01      	ldr	r3, [sp, #4]
 80101d0:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
        invalidateRect(minimalRect);
 80101d4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80101d8:	691b      	ldr	r3, [r3, #16]
 80101da:	a902      	add	r1, sp, #8
 80101dc:	4620      	mov	r0, r4
 80101de:	4798      	blx	r3
 80101e0:	e7de      	b.n	80101a0 <_ZN8touchgfx14CircleProgress8setValueEi+0x48>
        Rect minimalRect = getMinimalRectForUpdatedEndAngle(endAngleQ5);
 80101e2:	aa01      	add	r2, sp, #4
 80101e4:	4621      	mov	r1, r4
 80101e6:	a802      	add	r0, sp, #8
 80101e8:	f002 ff2d 	bl	8013046 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>
        circleArcAngleEnd = endAngleQ5;
 80101ec:	9b01      	ldr	r3, [sp, #4]
 80101ee:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
        invalidateRect(minimalRect);
 80101f2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80101f6:	691b      	ldr	r3, [r3, #16]
 80101f8:	a902      	add	r1, sp, #8
 80101fa:	4620      	mov	r0, r4
 80101fc:	4798      	blx	r3
 80101fe:	e7cf      	b.n	80101a0 <_ZN8touchgfx14CircleProgress8setValueEi+0x48>

08010200 <_ZN8touchgfx3absIlEET_S1_>:
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    if (d < 0)
 8010200:	2800      	cmp	r0, #0
 8010202:	db00      	blt.n	8010206 <_ZN8touchgfx3absIlEET_S1_+0x6>
    {
        return -d;
    }
    return d;
}
 8010204:	4770      	bx	lr
        return -d;
 8010206:	4240      	negs	r0, r0
 8010208:	e7fc      	b.n	8010204 <_ZN8touchgfx3absIlEET_S1_+0x4>

0801020a <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
    {
        return pressed;
    }
 801020a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801020e:	4770      	bx	lr

08010210 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 8010210:	b570      	push	{r4, r5, r6, lr}
 8010212:	4604      	mov	r4, r0
 8010214:	460e      	mov	r6, r1
    bool wasPressed = pressed;
 8010216:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
        return _type;
 801021a:	790b      	ldrb	r3, [r1, #4]
    pressed = (event.getType() == ClickEvent::PRESSED);
 801021c:	fab3 f383 	clz	r3, r3
 8010220:	095b      	lsrs	r3, r3, #5
 8010222:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 8010226:	b103      	cbz	r3, 801022a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1a>
 8010228:	b10d      	cbz	r5, 801022e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1e>
 801022a:	b923      	cbnz	r3, 8010236 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x26>
 801022c:	b11d      	cbz	r5, 8010236 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x26>
    {
        // Pressed state changed, so invalidate
        invalidate();
 801022e:	6823      	ldr	r3, [r4, #0]
 8010230:	695b      	ldr	r3, [r3, #20]
 8010232:	4620      	mov	r0, r4
 8010234:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8010236:	b115      	cbz	r5, 801023e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8010238:	7933      	ldrb	r3, [r6, #4]
 801023a:	2b01      	cmp	r3, #1
 801023c:	d000      	beq.n	8010240 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
        if (action->isValid())
        {
            action->execute(*this);
        }
    }
}
 801023e:	bd70      	pop	{r4, r5, r6, pc}
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8010240:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010242:	2800      	cmp	r0, #0
 8010244:	d0fb      	beq.n	801023e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
        if (action->isValid())
 8010246:	6803      	ldr	r3, [r0, #0]
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	4798      	blx	r3
 801024c:	2800      	cmp	r0, #0
 801024e:	d0f6      	beq.n	801023e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
            action->execute(*this);
 8010250:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010252:	6803      	ldr	r3, [r0, #0]
 8010254:	689b      	ldr	r3, [r3, #8]
 8010256:	4621      	mov	r1, r4
 8010258:	4798      	blx	r3
}
 801025a:	e7f0      	b.n	801023e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>

0801025c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
    }
}

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 801025c:	b538      	push	{r3, r4, r5, lr}
 801025e:	4604      	mov	r4, r0
    up = bmpReleased;
 8010260:	880b      	ldrh	r3, [r1, #0]
 8010262:	85c3      	strh	r3, [r0, #46]	; 0x2e
    down = bmpPressed;
 8010264:	8813      	ldrh	r3, [r2, #0]
 8010266:	4605      	mov	r5, r0
 8010268:	f825 3f30 	strh.w	r3, [r5, #48]!
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 801026c:	4628      	mov	r0, r5
 801026e:	f012 fe81 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
        rect.width = width;
 8010272:	8120      	strh	r0, [r4, #8]
    Drawable::setHeight(down.getHeight());
 8010274:	4628      	mov	r0, r5
 8010276:	f012 feb5 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
        rect.height = height;
 801027a:	8160      	strh	r0, [r4, #10]
}
 801027c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010280 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
{
 8010280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010284:	b08b      	sub	sp, #44	; 0x2c
 8010286:	4606      	mov	r6, r0
 8010288:	460d      	mov	r5, r1
    Bitmap bmp(AbstractButton::pressed ? down : up);
 801028a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801028e:	2b00      	cmp	r3, #0
 8010290:	d051      	beq.n	8010336 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xb6>
 8010292:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	ac0a      	add	r4, sp, #40	; 0x28
 801029a:	f824 3d04 	strh.w	r3, [r4, #-4]!
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 801029e:	4620      	mov	r0, r4
 80102a0:	f012 fe68 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80102a4:	b207      	sxth	r7, r0
 80102a6:	4620      	mov	r0, r4
 80102a8:	f012 fe9c 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
        this->x = x;
 80102ac:	2200      	movs	r2, #0
        this->y = y;
 80102ae:	f8ad 201e 	strh.w	r2, [sp, #30]
        this->width = width;
 80102b2:	f8ad 7020 	strh.w	r7, [sp, #32]
        this->height = height;
 80102b6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        return x + width;
 80102ba:	f9b5 1000 	ldrsh.w	r1, [r5]
 80102be:	88ab      	ldrh	r3, [r5, #4]
 80102c0:	fa13 f381 	uxtah	r3, r3, r1
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	b218      	sxth	r0, r3
        return !(x >= other.right() || right() <= other.x ||
 80102c8:	4282      	cmp	r2, r0
 80102ca:	da39      	bge.n	8010340 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xc0>
        return x + width;
 80102cc:	fa1f fc87 	uxth.w	ip, r7
 80102d0:	fa0f f78c 	sxth.w	r7, ip
        return !(x >= other.right() || right() <= other.x ||
 80102d4:	42b9      	cmp	r1, r7
 80102d6:	da33      	bge.n	8010340 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xc0>
                 y >= other.bottom() || bottom() <= other.y);
 80102d8:	fa0f f882 	sxth.w	r8, r2
        return y + height;
 80102dc:	f9b5 e002 	ldrsh.w	lr, [r5, #2]
 80102e0:	88ec      	ldrh	r4, [r5, #6]
 80102e2:	fa14 f48e 	uxtah	r4, r4, lr
 80102e6:	b224      	sxth	r4, r4
        return !(x >= other.right() || right() <= other.x ||
 80102e8:	45a0      	cmp	r8, r4
 80102ea:	da29      	bge.n	8010340 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xc0>
        return y + height;
 80102ec:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 80102f0:	fa14 f488 	uxtah	r4, r4, r8
 80102f4:	b2a4      	uxth	r4, r4
 80102f6:	fa0f f984 	sxth.w	r9, r4
        return !(x >= other.right() || right() <= other.x ||
 80102fa:	45ce      	cmp	lr, r9
 80102fc:	da20      	bge.n	8010340 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xc0>
            int16_t newX = MAX(x, other.x);
 80102fe:	428a      	cmp	r2, r1
 8010300:	dd00      	ble.n	8010304 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x84>
 8010302:	4611      	mov	r1, r2
            int16_t newY = MAX(y, other.y);
 8010304:	45f0      	cmp	r8, lr
 8010306:	dd00      	ble.n	801030a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8010308:	46c6      	mov	lr, r8
            width = MIN(right(), other.right()) - newX;
 801030a:	42b8      	cmp	r0, r7
 801030c:	dd00      	ble.n	8010310 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x90>
 801030e:	4663      	mov	r3, ip
 8010310:	1a5b      	subs	r3, r3, r1
 8010312:	f8ad 3020 	strh.w	r3, [sp, #32]
        return y + height;
 8010316:	886b      	ldrh	r3, [r5, #2]
 8010318:	88ea      	ldrh	r2, [r5, #6]
 801031a:	4413      	add	r3, r2
 801031c:	b29b      	uxth	r3, r3
 801031e:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 8010320:	4591      	cmp	r9, r2
 8010322:	db0b      	blt.n	801033c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8010324:	eba3 030e 	sub.w	r3, r3, lr
 8010328:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            x = newX;
 801032c:	f8ad 101c 	strh.w	r1, [sp, #28]
            y = newY;
 8010330:	f8ad e01e 	strh.w	lr, [sp, #30]
 8010334:	e00d      	b.n	8010352 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xd2>
    Bitmap bmp(AbstractButton::pressed ? down : up);
 8010336:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 801033a:	e7ac      	b.n	8010296 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x16>
            height = MIN(bottom(), other.bottom()) - newY;
 801033c:	4623      	mov	r3, r4
 801033e:	e7f1      	b.n	8010324 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
            x = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	f8ad 301c 	strh.w	r3, [sp, #28]
            y = 0;
 8010346:	f8ad 301e 	strh.w	r3, [sp, #30]
            width = 0;
 801034a:	f8ad 3020 	strh.w	r3, [sp, #32]
            height = 0;
 801034e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8010352:	4b1c      	ldr	r3, [pc, #112]	; (80103c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x144>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	b173      	cbz	r3, 8010376 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf6>
        return bitmapId;
 8010358:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 801035c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010360:	429a      	cmp	r2, r3
 8010362:	d005      	beq.n	8010370 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
        return ((width == 0) || (height == 0));
 8010364:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8010368:	b113      	cbz	r3, 8010370 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 801036a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801036e:	b943      	cbnz	r3, 8010382 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x102>
}
 8010370:	b00b      	add	sp, #44	; 0x2c
 8010372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8010376:	4b14      	ldr	r3, [pc, #80]	; (80103c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x148>)
 8010378:	4a14      	ldr	r2, [pc, #80]	; (80103cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14c>)
 801037a:	2195      	movs	r1, #149	; 0x95
 801037c:	4814      	ldr	r0, [pc, #80]	; (80103d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x150>)
 801037e:	f014 ff45 	bl	802520c <__assert_func>
        this->x = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	f8ad 3014 	strh.w	r3, [sp, #20]
        this->y = 0;
 8010388:	f8ad 3016 	strh.w	r3, [sp, #22]
        this->width = 0;
 801038c:	f8ad 3018 	strh.w	r3, [sp, #24]
        this->height = 0;
 8010390:	f8ad 301a 	strh.w	r3, [sp, #26]
        translateRectToAbsolute(r);
 8010394:	6833      	ldr	r3, [r6, #0]
 8010396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010398:	a905      	add	r1, sp, #20
 801039a:	4630      	mov	r0, r6
 801039c:	4798      	blx	r3
 801039e:	4b0d      	ldr	r3, [pc, #52]	; (80103d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x154>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	6898      	ldr	r0, [r3, #8]
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 80103a4:	6803      	ldr	r3, [r0, #0]
 80103a6:	68dc      	ldr	r4, [r3, #12]
 80103a8:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
 80103ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80103b0:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80103b4:	2501      	movs	r5, #1
 80103b6:	9502      	str	r5, [sp, #8]
 80103b8:	9101      	str	r1, [sp, #4]
 80103ba:	a907      	add	r1, sp, #28
 80103bc:	9100      	str	r1, [sp, #0]
 80103be:	a909      	add	r1, sp, #36	; 0x24
 80103c0:	47a0      	blx	r4
}
 80103c2:	e7d5      	b.n	8010370 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf0>
 80103c4:	2000bbcc 	.word	0x2000bbcc
 80103c8:	08026ee4 	.word	0x08026ee4
 80103cc:	08026f6c 	.word	0x08026f6c
 80103d0:	08026f20 	.word	0x08026f20
 80103d4:	2000bb14 	.word	0x2000bb14

080103d8 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 80103d8:	b510      	push	{r4, lr}
 80103da:	4604      	mov	r4, r0
    if (alpha < 255)
 80103dc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80103e0:	2bff      	cmp	r3, #255	; 0xff
 80103e2:	d006      	beq.n	80103f2 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
        this->x = x;
 80103e4:	2300      	movs	r3, #0
 80103e6:	8003      	strh	r3, [r0, #0]
        this->y = y;
 80103e8:	8043      	strh	r3, [r0, #2]
        this->width = width;
 80103ea:	8083      	strh	r3, [r0, #4]
        this->height = height;
 80103ec:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(0, 0, 0, 0);
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
}
 80103ee:	4620      	mov	r0, r4
 80103f0:	bd10      	pop	{r4, pc}
    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 80103f2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80103f6:	b91b      	cbnz	r3, 8010400 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80103f8:	312e      	adds	r1, #46	; 0x2e
 80103fa:	f012 fe2b 	bl	8023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80103fe:	e7f6      	b.n	80103ee <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8010400:	3130      	adds	r1, #48	; 0x30
 8010402:	f012 fe27 	bl	8023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010406:	e7f2      	b.n	80103ee <_ZNK8touchgfx6Button12getSolidRectEv+0x16>

08010408 <_ZNK8touchgfx14ButtonWithIcon7getTypeEv>:
     * @return TYPE_BUTTONWITHICON.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_BUTTONWITHICON;
    }
 8010408:	2006      	movs	r0, #6
 801040a:	4770      	bx	lr

0801040c <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 801040c:	4770      	bx	lr

0801040e <_ZN8touchgfx14ButtonWithIconD0Ev>:
 801040e:	b510      	push	{r4, lr}
 8010410:	4604      	mov	r4, r0
 8010412:	213c      	movs	r1, #60	; 0x3c
 8010414:	f014 fede 	bl	80251d4 <_ZdlPvj>
 8010418:	4620      	mov	r0, r4
 801041a:	bd10      	pop	{r4, pc}

0801041c <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
{
}

void ButtonWithIcon::setBitmaps(const Bitmap& newBackgroundReleased, const Bitmap& newBackgroundPressed,
                                const Bitmap& newIconReleased, const Bitmap& newIconPressed)
{
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	4605      	mov	r5, r0
 8010420:	461c      	mov	r4, r3
 8010422:	9e04      	ldr	r6, [sp, #16]
    Button::setBitmaps(newBackgroundReleased, newBackgroundPressed);
 8010424:	f7ff ff1a 	bl	801025c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    iconReleased = newIconReleased;
 8010428:	8823      	ldrh	r3, [r4, #0]
 801042a:	86ab      	strh	r3, [r5, #52]	; 0x34
    iconPressed = newIconPressed;
 801042c:	8833      	ldrh	r3, [r6, #0]
 801042e:	86eb      	strh	r3, [r5, #54]	; 0x36
        return rect.width;
 8010430:	f9b5 0008 	ldrsh.w	r0, [r5, #8]

    iconX = (getWidth() / 2) - (newIconPressed.getWidth() / 2);
 8010434:	2800      	cmp	r0, #0
 8010436:	db16      	blt.n	8010466 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x4a>
 8010438:	f3c0 044f 	ubfx	r4, r0, #1, #16
 801043c:	4630      	mov	r0, r6
 801043e:	f012 fd99 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010442:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8010446:	1a20      	subs	r0, r4, r0
 8010448:	8728      	strh	r0, [r5, #56]	; 0x38
        return rect.height;
 801044a:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
    iconY = (getHeight() / 2) - (newIconPressed.getHeight() / 2);
 801044e:	2800      	cmp	r0, #0
 8010450:	db0b      	blt.n	801046a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x4e>
 8010452:	f3c0 044f 	ubfx	r4, r0, #1, #16
 8010456:	4630      	mov	r0, r6
 8010458:	f012 fdc4 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801045c:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8010460:	1a20      	subs	r0, r4, r0
 8010462:	8768      	strh	r0, [r5, #58]	; 0x3a
}
 8010464:	bd70      	pop	{r4, r5, r6, pc}
    iconX = (getWidth() / 2) - (newIconPressed.getWidth() / 2);
 8010466:	3001      	adds	r0, #1
 8010468:	e7e6      	b.n	8010438 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x1c>
    iconY = (getHeight() / 2) - (newIconPressed.getHeight() / 2);
 801046a:	3001      	adds	r0, #1
 801046c:	e7f1      	b.n	8010452 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x36>
	...

08010470 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:

void ButtonWithIcon::draw(const Rect& invalidatedArea) const
{
 8010470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010474:	b08d      	sub	sp, #52	; 0x34
 8010476:	4605      	mov	r5, r0
 8010478:	4688      	mov	r8, r1
    Button::draw(invalidatedArea);
 801047a:	f7ff ff01 	bl	8010280 <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    Bitmap bmp((pressed ? iconPressed : iconReleased));
 801047e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8010482:	2b00      	cmp	r3, #0
 8010484:	d061      	beq.n	801054a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xda>
 8010486:	f105 0336 	add.w	r3, r5, #54	; 0x36
 801048a:	881b      	ldrh	r3, [r3, #0]
 801048c:	ae0c      	add	r6, sp, #48	; 0x30
 801048e:	f826 3d04 	strh.w	r3, [r6, #-4]!
    Rect iconRect(iconX, iconY, bmp.getWidth(), bmp.getHeight());
 8010492:	f9b5 7038 	ldrsh.w	r7, [r5, #56]	; 0x38
 8010496:	f9b5 903a 	ldrsh.w	r9, [r5, #58]	; 0x3a
 801049a:	4630      	mov	r0, r6
 801049c:	f012 fd6a 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80104a0:	b204      	sxth	r4, r0
 80104a2:	4630      	mov	r0, r6
 80104a4:	f012 fd9e 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
        this->x = x;
 80104a8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
        this->y = y;
 80104ac:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
        this->width = width;
 80104b0:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
        this->height = height;
 80104b4:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        Rect r = *this;
 80104b8:	ab07      	add	r3, sp, #28
 80104ba:	f8d8 0000 	ldr.w	r0, [r8]
 80104be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80104c2:	c303      	stmia	r3!, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 80104c4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
        return x + width;
 80104c8:	b2a4      	uxth	r4, r4
 80104ca:	fa14 f487 	uxtah	r4, r4, r7
 80104ce:	b2a4      	uxth	r4, r4
 80104d0:	b221      	sxth	r1, r4
        return !(x >= other.right() || right() <= other.x ||
 80104d2:	428a      	cmp	r2, r1
 80104d4:	da3e      	bge.n	8010554 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>
        return x + width;
 80104d6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80104da:	fa13 f382 	uxtah	r3, r3, r2
 80104de:	b29b      	uxth	r3, r3
 80104e0:	b21e      	sxth	r6, r3
        return !(x >= other.right() || right() <= other.x ||
 80104e2:	42b7      	cmp	r7, r6
 80104e4:	da36      	bge.n	8010554 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>
                 y >= other.bottom() || bottom() <= other.y);
 80104e6:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
        return y + height;
 80104ea:	fa0f fc89 	sxth.w	ip, r9
 80104ee:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 80104f2:	fa10 f08c 	uxtah	r0, r0, ip
 80104f6:	b200      	sxth	r0, r0
        return !(x >= other.right() || right() <= other.x ||
 80104f8:	4586      	cmp	lr, r0
 80104fa:	da2b      	bge.n	8010554 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>
        return y + height;
 80104fc:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 8010500:	fa10 f08e 	uxtah	r0, r0, lr
 8010504:	b280      	uxth	r0, r0
 8010506:	fa0f f880 	sxth.w	r8, r0
        return !(x >= other.right() || right() <= other.x ||
 801050a:	45c4      	cmp	ip, r8
 801050c:	da22      	bge.n	8010554 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>
            int16_t newX = MAX(x, other.x);
 801050e:	42ba      	cmp	r2, r7
 8010510:	dd00      	ble.n	8010514 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa4>
 8010512:	4617      	mov	r7, r2
            int16_t newY = MAX(y, other.y);
 8010514:	45e6      	cmp	lr, ip
 8010516:	dd00      	ble.n	801051a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xaa>
 8010518:	46f4      	mov	ip, lr
            width = MIN(right(), other.right()) - newX;
 801051a:	42b1      	cmp	r1, r6
 801051c:	dd00      	ble.n	8010520 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xb0>
 801051e:	461c      	mov	r4, r3
 8010520:	1be4      	subs	r4, r4, r7
 8010522:	f8ad 4020 	strh.w	r4, [sp, #32]
        return y + height;
 8010526:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801052a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801052e:	4413      	add	r3, r2
 8010530:	b29b      	uxth	r3, r3
 8010532:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 8010534:	4590      	cmp	r8, r2
 8010536:	db0b      	blt.n	8010550 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8010538:	eba3 030c 	sub.w	r3, r3, ip
 801053c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            x = newX;
 8010540:	f8ad 701c 	strh.w	r7, [sp, #28]
            y = newY;
 8010544:	f8ad c01e 	strh.w	ip, [sp, #30]
 8010548:	e00d      	b.n	8010566 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf6>
    Bitmap bmp((pressed ? iconPressed : iconReleased));
 801054a:	f105 0334 	add.w	r3, r5, #52	; 0x34
 801054e:	e79c      	b.n	801048a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x1a>
            height = MIN(bottom(), other.bottom()) - newY;
 8010550:	4603      	mov	r3, r0
 8010552:	e7f1      	b.n	8010538 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xc8>
            x = 0;
 8010554:	2300      	movs	r3, #0
 8010556:	f8ad 301c 	strh.w	r3, [sp, #28]
            y = 0;
 801055a:	f8ad 301e 	strh.w	r3, [sp, #30]
            width = 0;
 801055e:	f8ad 3020 	strh.w	r3, [sp, #32]
            height = 0;
 8010562:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010566:	4b26      	ldr	r3, [pc, #152]	; (8010600 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x190>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	b173      	cbz	r3, 801058a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x11a>
        return bitmapId;
 801056c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    Rect dirty = invalidatedArea & iconRect;
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 8010570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010574:	429a      	cmp	r2, r3
 8010576:	d005      	beq.n	8010584 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x114>
        return ((width == 0) || (height == 0));
 8010578:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801057c:	b113      	cbz	r3, 8010584 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x114>
 801057e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8010582:	b943      	cbnz	r3, 8010596 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x126>
        translateRectToAbsolute(r);
        dirty.x -= iconX;
        dirty.y -= iconY;
        HAL::lcd().drawPartialBitmap(bmp, r.x + iconX, r.y + iconY, dirty, alpha);
    }
}
 8010584:	b00d      	add	sp, #52	; 0x34
 8010586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 801058a:	4b1e      	ldr	r3, [pc, #120]	; (8010604 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x194>)
 801058c:	4a1e      	ldr	r2, [pc, #120]	; (8010608 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x198>)
 801058e:	2195      	movs	r1, #149	; 0x95
 8010590:	481e      	ldr	r0, [pc, #120]	; (801060c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x19c>)
 8010592:	f014 fe3b 	bl	802520c <__assert_func>
        this->x = 0;
 8010596:	2300      	movs	r3, #0
 8010598:	f8ad 3014 	strh.w	r3, [sp, #20]
        this->y = 0;
 801059c:	f8ad 3016 	strh.w	r3, [sp, #22]
        this->width = 0;
 80105a0:	f8ad 3018 	strh.w	r3, [sp, #24]
        this->height = 0;
 80105a4:	f8ad 301a 	strh.w	r3, [sp, #26]
        translateRectToAbsolute(r);
 80105a8:	682b      	ldr	r3, [r5, #0]
 80105aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ac:	a905      	add	r1, sp, #20
 80105ae:	4628      	mov	r0, r5
 80105b0:	4798      	blx	r3
        dirty.x -= iconX;
 80105b2:	f9b5 2038 	ldrsh.w	r2, [r5, #56]	; 0x38
 80105b6:	b292      	uxth	r2, r2
 80105b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80105bc:	1a9b      	subs	r3, r3, r2
 80105be:	f8ad 301c 	strh.w	r3, [sp, #28]
        dirty.y -= iconY;
 80105c2:	f9b5 303a 	ldrsh.w	r3, [r5, #58]	; 0x3a
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80105cc:	1ac9      	subs	r1, r1, r3
 80105ce:	f8ad 101e 	strh.w	r1, [sp, #30]
 80105d2:	490f      	ldr	r1, [pc, #60]	; (8010610 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x1a0>)
 80105d4:	6809      	ldr	r1, [r1, #0]
 80105d6:	6888      	ldr	r0, [r1, #8]
        HAL::lcd().drawPartialBitmap(bmp, r.x + iconX, r.y + iconY, dirty, alpha);
 80105d8:	6801      	ldr	r1, [r0, #0]
 80105da:	68cc      	ldr	r4, [r1, #12]
 80105dc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80105e0:	440a      	add	r2, r1
 80105e2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80105e6:	440b      	add	r3, r1
 80105e8:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
 80105ec:	2501      	movs	r5, #1
 80105ee:	9502      	str	r5, [sp, #8]
 80105f0:	9101      	str	r1, [sp, #4]
 80105f2:	a907      	add	r1, sp, #28
 80105f4:	9100      	str	r1, [sp, #0]
 80105f6:	b21b      	sxth	r3, r3
 80105f8:	b212      	sxth	r2, r2
 80105fa:	a90b      	add	r1, sp, #44	; 0x2c
 80105fc:	47a0      	blx	r4
}
 80105fe:	e7c1      	b.n	8010584 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x114>
 8010600:	2000bbcc 	.word	0x2000bbcc
 8010604:	08026ee4 	.word	0x08026ee4
 8010608:	08027018 	.word	0x08027018
 801060c:	08026f20 	.word	0x08026f20
 8010610:	2000bb14 	.word	0x2000bb14

08010614 <_ZN8touchgfx14ButtonWithIconC1Ev>:
ButtonWithIcon::ButtonWithIcon() :
 8010614:	b410      	push	{r4}
        this->x = x;
 8010616:	2200      	movs	r2, #0
 8010618:	8082      	strh	r2, [r0, #4]
        this->y = y;
 801061a:	80c2      	strh	r2, [r0, #6]
        this->width = width;
 801061c:	8102      	strh	r2, [r0, #8]
        this->height = height;
 801061e:	8142      	strh	r2, [r0, #10]
        this->x = 0;
 8010620:	8182      	strh	r2, [r0, #12]
        this->y = 0;
 8010622:	81c2      	strh	r2, [r0, #14]
        this->width = 0;
 8010624:	8202      	strh	r2, [r0, #16]
        this->height = 0;
 8010626:	8242      	strh	r2, [r0, #18]
        visible(true)
 8010628:	6142      	str	r2, [r0, #20]
 801062a:	6182      	str	r2, [r0, #24]
 801062c:	61c2      	str	r2, [r0, #28]
 801062e:	2101      	movs	r1, #1
 8010630:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    AbstractButton() : Widget(), action(), pressed(false)
 8010634:	6282      	str	r2, [r0, #40]	; 0x28
 8010636:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
        touchable = touch;
 801063a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 801063e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010642:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8010644:	8601      	strh	r1, [r0, #48]	; 0x30
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8010646:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    iconY(0)
 801064a:	4c04      	ldr	r4, [pc, #16]	; (801065c <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 801064c:	6004      	str	r4, [r0, #0]
 801064e:	8681      	strh	r1, [r0, #52]	; 0x34
 8010650:	86c1      	strh	r1, [r0, #54]	; 0x36
 8010652:	8702      	strh	r2, [r0, #56]	; 0x38
 8010654:	8742      	strh	r2, [r0, #58]	; 0x3a
}
 8010656:	f85d 4b04 	ldr.w	r4, [sp], #4
 801065a:	4770      	bx	lr
 801065c:	08026fa8 	.word	0x08026fa8

08010660 <_ZNK8touchgfx5Image7getTypeEv>:
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_IMAGE;
    }
 8010660:	2008      	movs	r0, #8
 8010662:	4770      	bx	lr

08010664 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010664:	4770      	bx	lr
	...

08010668 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
}

void Image::draw(const Rect& invalidatedArea) const
{
 8010668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801066c:	b08a      	sub	sp, #40	; 0x28
 801066e:	4607      	mov	r7, r0
 8010670:	460e      	mov	r6, r1
        this->x = 0;
 8010672:	2400      	movs	r4, #0
 8010674:	f8ad 4018 	strh.w	r4, [sp, #24]
        this->y = 0;
 8010678:	f8ad 401a 	strh.w	r4, [sp, #26]
        this->width = 0;
 801067c:	f8ad 401c 	strh.w	r4, [sp, #28]
        this->height = 0;
 8010680:	f8ad 401e 	strh.w	r4, [sp, #30]
    Rect meAbs;
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 8010684:	4605      	mov	r5, r0
 8010686:	f855 3b26 	ldr.w	r3, [r5], #38
 801068a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068c:	a906      	add	r1, sp, #24
 801068e:	4798      	blx	r3
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 8010690:	4628      	mov	r0, r5
 8010692:	f012 fc6f 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010696:	fa0f f880 	sxth.w	r8, r0
 801069a:	4628      	mov	r0, r5
 801069c:	f012 fca2 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
        this->x = x;
 80106a0:	f8ad 4020 	strh.w	r4, [sp, #32]
        this->y = y;
 80106a4:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
        this->width = width;
 80106a8:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
        this->height = height;
 80106ac:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        Rect r = *this;
 80106b0:	ab04      	add	r3, sp, #16
 80106b2:	aa0a      	add	r2, sp, #40	; 0x28
 80106b4:	e912 0003 	ldmdb	r2, {r0, r1}
 80106b8:	e883 0003 	stmia.w	r3, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 80106bc:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
        return x + width;
 80106c0:	f9b6 1000 	ldrsh.w	r1, [r6]
 80106c4:	88b3      	ldrh	r3, [r6, #4]
 80106c6:	fa13 f381 	uxtah	r3, r3, r1
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	b21c      	sxth	r4, r3
        return !(x >= other.right() || right() <= other.x ||
 80106ce:	42a0      	cmp	r0, r4
 80106d0:	da3c      	bge.n	801074c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe4>
        return x + width;
 80106d2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80106d6:	fa12 f280 	uxtah	r2, r2, r0
 80106da:	b292      	uxth	r2, r2
 80106dc:	fa0f fe82 	sxth.w	lr, r2
        return !(x >= other.right() || right() <= other.x ||
 80106e0:	4571      	cmp	r1, lr
 80106e2:	da33      	bge.n	801074c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe4>
                 y >= other.bottom() || bottom() <= other.y);
 80106e4:	f9bd 9012 	ldrsh.w	r9, [sp, #18]
        return y + height;
 80106e8:	f9b6 8002 	ldrsh.w	r8, [r6, #2]
 80106ec:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 80106f0:	fa1c fc88 	uxtah	ip, ip, r8
 80106f4:	fa0f fc8c 	sxth.w	ip, ip
        return !(x >= other.right() || right() <= other.x ||
 80106f8:	45e1      	cmp	r9, ip
 80106fa:	da27      	bge.n	801074c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe4>
        return y + height;
 80106fc:	f8bd c016 	ldrh.w	ip, [sp, #22]
 8010700:	fa1c fc89 	uxtah	ip, ip, r9
 8010704:	fa1f fc8c 	uxth.w	ip, ip
 8010708:	fa0f fa8c 	sxth.w	sl, ip
        return !(x >= other.right() || right() <= other.x ||
 801070c:	45d0      	cmp	r8, sl
 801070e:	da1d      	bge.n	801074c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe4>
            int16_t newX = MAX(x, other.x);
 8010710:	4288      	cmp	r0, r1
 8010712:	dd00      	ble.n	8010716 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xae>
 8010714:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 8010716:	45c1      	cmp	r9, r8
 8010718:	dd00      	ble.n	801071c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xb4>
 801071a:	46c8      	mov	r8, r9
            width = MIN(right(), other.right()) - newX;
 801071c:	4574      	cmp	r4, lr
 801071e:	dd00      	ble.n	8010722 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xba>
 8010720:	4613      	mov	r3, r2
 8010722:	1a5b      	subs	r3, r3, r1
 8010724:	f8ad 3014 	strh.w	r3, [sp, #20]
        return y + height;
 8010728:	8873      	ldrh	r3, [r6, #2]
 801072a:	88f2      	ldrh	r2, [r6, #6]
 801072c:	4413      	add	r3, r2
 801072e:	b29b      	uxth	r3, r3
 8010730:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 8010732:	4592      	cmp	sl, r2
 8010734:	db08      	blt.n	8010748 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xe0>
 8010736:	eba3 0308 	sub.w	r3, r3, r8
 801073a:	f8ad 3016 	strh.w	r3, [sp, #22]
            x = newX;
 801073e:	f8ad 1010 	strh.w	r1, [sp, #16]
            y = newY;
 8010742:	f8ad 8012 	strh.w	r8, [sp, #18]
 8010746:	e00a      	b.n	801075e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xf6>
            height = MIN(bottom(), other.bottom()) - newY;
 8010748:	4663      	mov	r3, ip
 801074a:	e7f4      	b.n	8010736 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0xce>
            x = 0;
 801074c:	2300      	movs	r3, #0
 801074e:	f8ad 3010 	strh.w	r3, [sp, #16]
            y = 0;
 8010752:	f8ad 3012 	strh.w	r3, [sp, #18]
            width = 0;
 8010756:	f8ad 3014 	strh.w	r3, [sp, #20]
            height = 0;
 801075a:	f8ad 3016 	strh.w	r3, [sp, #22]
        return ((width == 0) || (height == 0));
 801075e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010762:	b113      	cbz	r3, 801076a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x102>
 8010764:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010768:	b913      	cbnz	r3, 8010770 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x108>

    if (!dirtyBitmapArea.isEmpty())
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
    }
}
 801076a:	b00a      	add	sp, #40	; 0x28
 801076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010770:	4b09      	ldr	r3, [pc, #36]	; (8010798 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x130>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	6898      	ldr	r0, [r3, #8]
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 8010776:	6803      	ldr	r3, [r0, #0]
 8010778:	68dc      	ldr	r4, [r3, #12]
 801077a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 801077e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8010782:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8010786:	2601      	movs	r6, #1
 8010788:	9602      	str	r6, [sp, #8]
 801078a:	9101      	str	r1, [sp, #4]
 801078c:	a904      	add	r1, sp, #16
 801078e:	9100      	str	r1, [sp, #0]
 8010790:	4629      	mov	r1, r5
 8010792:	47a0      	blx	r4
}
 8010794:	e7e9      	b.n	801076a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x102>
 8010796:	bf00      	nop
 8010798:	2000bb14 	.word	0x2000bb14

0801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
{
 801079c:	b570      	push	{r4, r5, r6, lr}
 801079e:	4604      	mov	r4, r0
    bitmap = bmp;
 80107a0:	880b      	ldrh	r3, [r1, #0]
 80107a2:	84c3      	strh	r3, [r0, #38]	; 0x26
    setWidth(bitmap.getWidth());
 80107a4:	4605      	mov	r5, r0
 80107a6:	f855 3b26 	ldr.w	r3, [r5], #38
 80107aa:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80107ac:	4628      	mov	r0, r5
 80107ae:	f012 fbe1 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80107b2:	b201      	sxth	r1, r0
 80107b4:	4620      	mov	r0, r4
 80107b6:	47b0      	blx	r6
    setHeight(bitmap.getHeight());
 80107b8:	6823      	ldr	r3, [r4, #0]
 80107ba:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80107bc:	4628      	mov	r0, r5
 80107be:	f012 fc11 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80107c2:	b201      	sxth	r1, r0
 80107c4:	4620      	mov	r0, r4
 80107c6:	47b0      	blx	r6
    hasTransparentPixels = bitmap.hasTransparentPixels();
 80107c8:	4628      	mov	r0, r5
 80107ca:	f012 fc9b 	bl	8023104 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80107ce:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 80107d2:	bd70      	pop	{r4, r5, r6, pc}

080107d4 <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 80107d4:	b510      	push	{r4, lr}
 80107d6:	4604      	mov	r4, r0
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 80107d8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80107dc:	2bff      	cmp	r3, #255	; 0xff
 80107de:	d006      	beq.n	80107ee <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
        this->x = x;
 80107e0:	2300      	movs	r3, #0
 80107e2:	8003      	strh	r3, [r0, #0]
        this->y = y;
 80107e4:	8043      	strh	r3, [r0, #2]
        this->width = width;
 80107e6:	8083      	strh	r3, [r0, #4]
        this->height = height;
 80107e8:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(0, 0, 0, 0);
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
}
 80107ea:	4620      	mov	r0, r4
 80107ec:	bd10      	pop	{r4, pc}
    return bitmap.getSolidRect();
 80107ee:	3126      	adds	r1, #38	; 0x26
 80107f0:	f012 fc30 	bl	8023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80107f4:	e7f9      	b.n	80107ea <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080107f6 <_ZN8touchgfx5ImageD0Ev>:
 80107f6:	b510      	push	{r4, lr}
 80107f8:	4604      	mov	r4, r0
 80107fa:	212c      	movs	r1, #44	; 0x2c
 80107fc:	f014 fcea 	bl	80251d4 <_ZdlPvj>
 8010800:	4620      	mov	r0, r4
 8010802:	bd10      	pop	{r4, pc}

08010804 <_ZNK8touchgfx6Widget7getTypeEv>:
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_WIDGET;
    }
 8010804:	2001      	movs	r0, #1
 8010806:	4770      	bx	lr

08010808 <_ZN8touchgfx13ScalableImage8setAlphaEh>:
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    virtual void setAlpha(uint8_t alpha)
    {
        this->alpha = alpha;
 8010808:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    }
 801080c:	4770      	bx	lr

0801080e <_ZNK8touchgfx13ScalableImage8getAlphaEv>:
     * @return The current alpha value.
     */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 801080e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8010812:	4770      	bx	lr

08010814 <_ZNK8touchgfx13ScalableImage7getTypeEv>:
     * @return TYPE_SCALABLEIMAGE.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_SCALABLEIMAGE;
    }
 8010814:	200b      	movs	r0, #11
 8010816:	4770      	bx	lr

08010818 <_ZN8touchgfx13ScalableImageD1Ev>:
{
}

ScalableImage::~ScalableImage()
{
}
 8010818:	4770      	bx	lr

0801081a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
    setHeight(bitmap.getHeight());
}

void ScalableImage::setScalingAlgorithm(ScalingAlgorithm algorithm)
{
    currentScalingAlgorithm = algorithm;
 801081a:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
}
 801081e:	4770      	bx	lr

08010820 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:

ScalableImage::ScalingAlgorithm ScalableImage::getScalingAlgorithm()
{
    return currentScalingAlgorithm;
}
 8010820:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8010824:	4770      	bx	lr

08010826 <_ZN8touchgfx13ScalableImageD0Ev>:
ScalableImage::~ScalableImage()
 8010826:	b510      	push	{r4, lr}
 8010828:	4604      	mov	r4, r0
}
 801082a:	212c      	movs	r1, #44	; 0x2c
 801082c:	f014 fcd2 	bl	80251d4 <_ZdlPvj>
 8010830:	4620      	mov	r0, r4
 8010832:	bd10      	pop	{r4, pc}

08010834 <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>:
{
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	4604      	mov	r4, r0
    bitmap = bmp;
 8010838:	880b      	ldrh	r3, [r1, #0]
 801083a:	8503      	strh	r3, [r0, #40]	; 0x28
    setWidth(bitmap.getWidth());
 801083c:	4605      	mov	r5, r0
 801083e:	f855 3b28 	ldr.w	r3, [r5], #40
 8010842:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8010844:	4628      	mov	r0, r5
 8010846:	f012 fb95 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801084a:	b201      	sxth	r1, r0
 801084c:	4620      	mov	r0, r4
 801084e:	47b0      	blx	r6
    setHeight(bitmap.getHeight());
 8010850:	6823      	ldr	r3, [r4, #0]
 8010852:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8010854:	4628      	mov	r0, r5
 8010856:	f012 fbc5 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801085a:	b201      	sxth	r1, r0
 801085c:	4620      	mov	r0, r4
 801085e:	47b0      	blx	r6
}
 8010860:	bd70      	pop	{r4, r5, r6, pc}

08010862 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:

    HAL::getInstance()->unlockFrameBuffer();
}

Rect ScalableImage::getSolidRect() const
{
 8010862:	b570      	push	{r4, r5, r6, lr}
 8010864:	b084      	sub	sp, #16
 8010866:	4604      	mov	r4, r0
    if (alpha < 255)
 8010868:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 801086c:	2bff      	cmp	r3, #255	; 0xff
 801086e:	d007      	beq.n	8010880 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1e>
        this->x = x;
 8010870:	2300      	movs	r3, #0
 8010872:	8003      	strh	r3, [r0, #0]
        this->y = y;
 8010874:	8043      	strh	r3, [r0, #2]
        this->width = width;
 8010876:	8083      	strh	r3, [r0, #4]
        this->height = height;
 8010878:	80c3      	strh	r3, [r0, #6]
    if ((bitmap.getSolidRect().width == bitmap.getWidth()) && (bitmap.getSolidRect().height == bitmap.getHeight()))
    {
        return bitmap.getSolidRect();
    }
    return Rect(0, 0, 0, 0);
}
 801087a:	4620      	mov	r0, r4
 801087c:	b004      	add	sp, #16
 801087e:	bd70      	pop	{r4, r5, r6, pc}
    if ((bitmap.getSolidRect().width == bitmap.getWidth()) && (bitmap.getSolidRect().height == bitmap.getHeight()))
 8010880:	f101 0528 	add.w	r5, r1, #40	; 0x28
 8010884:	4629      	mov	r1, r5
 8010886:	4668      	mov	r0, sp
 8010888:	f012 fbe4 	bl	8023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801088c:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8010890:	4628      	mov	r0, r5
 8010892:	f012 fb6f 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010896:	4286      	cmp	r6, r0
 8010898:	d005      	beq.n	80108a6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>
        this->x = x;
 801089a:	2300      	movs	r3, #0
 801089c:	8023      	strh	r3, [r4, #0]
        this->y = y;
 801089e:	8063      	strh	r3, [r4, #2]
        this->width = width;
 80108a0:	80a3      	strh	r3, [r4, #4]
        this->height = height;
 80108a2:	80e3      	strh	r3, [r4, #6]
 80108a4:	e7e9      	b.n	801087a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x18>
 80108a6:	4629      	mov	r1, r5
 80108a8:	a802      	add	r0, sp, #8
 80108aa:	f012 fbd3 	bl	8023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80108ae:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80108b2:	4628      	mov	r0, r5
 80108b4:	f012 fb96 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80108b8:	4286      	cmp	r6, r0
 80108ba:	d1ee      	bne.n	801089a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x38>
        return bitmap.getSolidRect();
 80108bc:	4629      	mov	r1, r5
 80108be:	4620      	mov	r0, r4
 80108c0:	f012 fbc8 	bl	8023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80108c4:	e7d9      	b.n	801087a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x18>
	...

080108c8 <_ZN8touchgfx13ScalableImageC1Ev>:
        this->x = x;
 80108c8:	2200      	movs	r2, #0
 80108ca:	8082      	strh	r2, [r0, #4]
        this->y = y;
 80108cc:	80c2      	strh	r2, [r0, #6]
        this->width = width;
 80108ce:	8102      	strh	r2, [r0, #8]
        this->height = height;
 80108d0:	8142      	strh	r2, [r0, #10]
        this->x = 0;
 80108d2:	8182      	strh	r2, [r0, #12]
        this->y = 0;
 80108d4:	81c2      	strh	r2, [r0, #14]
        this->width = 0;
 80108d6:	8202      	strh	r2, [r0, #16]
        this->height = 0;
 80108d8:	8242      	strh	r2, [r0, #18]
        visible(true)
 80108da:	6142      	str	r2, [r0, #20]
 80108dc:	6182      	str	r2, [r0, #24]
 80108de:	61c2      	str	r2, [r0, #28]
 80108e0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80108e4:	2201      	movs	r2, #1
 80108e6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    alpha(255)
 80108ea:	4905      	ldr	r1, [pc, #20]	; (8010900 <_ZN8touchgfx13ScalableImageC1Ev+0x38>)
 80108ec:	6001      	str	r1, [r0, #0]
 80108ee:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 80108f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108f6:	8502      	strh	r2, [r0, #40]	; 0x28
 80108f8:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	080270c4 	.word	0x080270c4

08010904 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
{
 8010904:	b508      	push	{r3, lr}
    if (currentScalingAlgorithm == NEAREST_NEIGHBOR)
 8010906:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 801090a:	b11b      	cbz	r3, 8010914 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0x10>
        renderVariant = lookupBilinearRenderVariant(bitmap);
 801090c:	3028      	adds	r0, #40	; 0x28
 801090e:	f010 fff3 	bl	80218f8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
}
 8010912:	bd08      	pop	{r3, pc}
        renderVariant = lookupNearestNeighborRenderVariant(bitmap);
 8010914:	3028      	adds	r0, #40	; 0x28
 8010916:	f010 ffdf 	bl	80218d8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801091a:	e7fa      	b.n	8010912 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>

0801091c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>:
{
 801091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010920:	b0bf      	sub	sp, #252	; 0xfc
 8010922:	4604      	mov	r4, r0
 8010924:	460d      	mov	r5, r1
 8010926:	9207      	str	r2, [sp, #28]
 8010928:	469b      	mov	fp, r3
 801092a:	f8dd a120 	ldr.w	sl, [sp, #288]	; 0x120
 801092e:	f8dd 9124 	ldr.w	r9, [sp, #292]	; 0x124
 8010932:	f8dd 8128 	ldr.w	r8, [sp, #296]	; 0x128
        return rect.width;
 8010936:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
        return rect.height;
 801093a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
        this->x = x;
 801093e:	2300      	movs	r3, #0
 8010940:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        this->y = y;
 8010944:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        this->width = width;
 8010948:	f8ad 10f4 	strh.w	r1, [sp, #244]	; 0xf4
        this->height = height;
 801094c:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        Rect r = *this;
 8010950:	ab3a      	add	r3, sp, #232	; 0xe8
 8010952:	aa3e      	add	r2, sp, #248	; 0xf8
 8010954:	e912 0003 	ldmdb	r2, {r0, r1}
 8010958:	e883 0003 	stmia.w	r3, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 801095c:	f9bd 10e8 	ldrsh.w	r1, [sp, #232]	; 0xe8
        return x + width;
 8010960:	f9b5 2000 	ldrsh.w	r2, [r5]
 8010964:	88ab      	ldrh	r3, [r5, #4]
 8010966:	fa13 f382 	uxtah	r3, r3, r2
 801096a:	b29b      	uxth	r3, r3
 801096c:	b218      	sxth	r0, r3
        return !(x >= other.right() || right() <= other.x ||
 801096e:	4281      	cmp	r1, r0
 8010970:	da39      	bge.n	80109e6 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xca>
        return x + width;
 8010972:	f8bd 60ec 	ldrh.w	r6, [sp, #236]	; 0xec
 8010976:	fa16 f681 	uxtah	r6, r6, r1
 801097a:	b2b6      	uxth	r6, r6
 801097c:	9608      	str	r6, [sp, #32]
 801097e:	b237      	sxth	r7, r6
        return !(x >= other.right() || right() <= other.x ||
 8010980:	42ba      	cmp	r2, r7
 8010982:	da30      	bge.n	80109e6 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xca>
                 y >= other.bottom() || bottom() <= other.y);
 8010984:	f9bd e0ea 	ldrsh.w	lr, [sp, #234]	; 0xea
        return y + height;
 8010988:	f9b5 c002 	ldrsh.w	ip, [r5, #2]
 801098c:	88ee      	ldrh	r6, [r5, #6]
 801098e:	fa16 f68c 	uxtah	r6, r6, ip
 8010992:	b236      	sxth	r6, r6
        return !(x >= other.right() || right() <= other.x ||
 8010994:	45b6      	cmp	lr, r6
 8010996:	da26      	bge.n	80109e6 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xca>
        return y + height;
 8010998:	f8bd 60ee 	ldrh.w	r6, [sp, #238]	; 0xee
 801099c:	fa16 f68e 	uxtah	r6, r6, lr
 80109a0:	b2b6      	uxth	r6, r6
 80109a2:	9609      	str	r6, [sp, #36]	; 0x24
 80109a4:	b236      	sxth	r6, r6
        return !(x >= other.right() || right() <= other.x ||
 80109a6:	45b4      	cmp	ip, r6
 80109a8:	da1d      	bge.n	80109e6 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xca>
            int16_t newX = MAX(x, other.x);
 80109aa:	4291      	cmp	r1, r2
 80109ac:	dd00      	ble.n	80109b0 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x94>
 80109ae:	460a      	mov	r2, r1
            int16_t newY = MAX(y, other.y);
 80109b0:	45e6      	cmp	lr, ip
 80109b2:	dd00      	ble.n	80109b6 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x9a>
 80109b4:	46f4      	mov	ip, lr
            width = MIN(right(), other.right()) - newX;
 80109b6:	42b8      	cmp	r0, r7
 80109b8:	dd00      	ble.n	80109bc <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xa0>
 80109ba:	9b08      	ldr	r3, [sp, #32]
 80109bc:	1a9b      	subs	r3, r3, r2
 80109be:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
        return y + height;
 80109c2:	886b      	ldrh	r3, [r5, #2]
 80109c4:	88e9      	ldrh	r1, [r5, #6]
 80109c6:	440b      	add	r3, r1
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	b219      	sxth	r1, r3
            height = MIN(bottom(), other.bottom()) - newY;
 80109cc:	428e      	cmp	r6, r1
 80109ce:	db08      	blt.n	80109e2 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xc6>
 80109d0:	eba3 030c 	sub.w	r3, r3, ip
 80109d4:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
            x = newX;
 80109d8:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
            y = newY;
 80109dc:	f8ad c0ea 	strh.w	ip, [sp, #234]	; 0xea
 80109e0:	e00a      	b.n	80109f8 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xdc>
            height = MIN(bottom(), other.bottom()) - newY;
 80109e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109e4:	e7f4      	b.n	80109d0 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0xb4>
            x = 0;
 80109e6:	2300      	movs	r3, #0
 80109e8:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
            y = 0;
 80109ec:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            width = 0;
 80109f0:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
            height = 0;
 80109f4:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
    Rect dirtyAreaAbsolute = dirtyArea;
 80109f8:	ad38      	add	r5, sp, #224	; 0xe0
 80109fa:	ae3a      	add	r6, sp, #232	; 0xe8
 80109fc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010a00:	e885 0003 	stmia.w	r5, {r0, r1}
    translateRectToAbsolute(dirtyAreaAbsolute);
 8010a04:	6823      	ldr	r3, [r4, #0]
 8010a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	4798      	blx	r3
    Rect absoluteRect = getAbsoluteRect();
 8010a0e:	4621      	mov	r1, r4
 8010a10:	a836      	add	r0, sp, #216	; 0xd8
 8010a12:	f010 ff48 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
    DisplayTransformation::transformDisplayToFrameBuffer(absoluteRect);
 8010a16:	a836      	add	r0, sp, #216	; 0xd8
 8010a18:	f010 f918 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
        return rect;
 8010a1c:	1d27      	adds	r7, r4, #4
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyArea, this->getRect());
 8010a1e:	4639      	mov	r1, r7
 8010a20:	4630      	mov	r0, r6
 8010a22:	f010 f8fb 	bl	8020c1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyAreaAbsolute);
 8010a26:	4628      	mov	r0, r5
 8010a28:	f010 f910 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
    const uint16_t* textmap = (const uint16_t*)bitmap.getData();
 8010a2c:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8010a30:	4628      	mov	r0, r5
 8010a32:	f012 fb9d 	bl	8023170 <_ZNK8touchgfx6Bitmap7getDataEv>
    if (!textmap)
 8010a36:	4606      	mov	r6, r0
 8010a38:	b910      	cbnz	r0, 8010a40 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x124>
}
 8010a3a:	b03f      	add	sp, #252	; 0xfc
 8010a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float x0 = triangleXs[0];
 8010a40:	f8db 3000 	ldr.w	r3, [fp]
 8010a44:	9335      	str	r3, [sp, #212]	; 0xd4
    float x1 = triangleXs[1];
 8010a46:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010a4a:	9334      	str	r3, [sp, #208]	; 0xd0
    float x2 = triangleXs[2];
 8010a4c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010a50:	9333      	str	r3, [sp, #204]	; 0xcc
    float y0 = triangleYs[0];
 8010a52:	f8da 3000 	ldr.w	r3, [sl]
 8010a56:	9332      	str	r3, [sp, #200]	; 0xc8
    float y1 = triangleYs[1];
 8010a58:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010a5c:	9331      	str	r3, [sp, #196]	; 0xc4
    float y2 = triangleYs[2];
 8010a5e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010a62:	9330      	str	r3, [sp, #192]	; 0xc0
    DisplayTransformation::transformDisplayToFrameBuffer(x0, y0, this->getRect());
 8010a64:	463a      	mov	r2, r7
 8010a66:	a932      	add	r1, sp, #200	; 0xc8
 8010a68:	a835      	add	r0, sp, #212	; 0xd4
 8010a6a:	f010 f8bb 	bl	8020be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x1, y1, this->getRect());
 8010a6e:	463a      	mov	r2, r7
 8010a70:	a931      	add	r1, sp, #196	; 0xc4
 8010a72:	a834      	add	r0, sp, #208	; 0xd0
 8010a74:	f010 f8b6 	bl	8020be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x2, y2, this->getRect());
 8010a78:	463a      	mov	r2, r7
 8010a7a:	a930      	add	r1, sp, #192	; 0xc0
 8010a7c:	a833      	add	r0, sp, #204	; 0xcc
 8010a7e:	f010 f8b1 	bl	8020be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 *
 * @return The value as fixed28_4.
 */
inline fixed28_4 floatToFixed28_4(float value)
{
    return (fixed28_4)(value * 16);
 8010a82:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8010a86:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
    Point3D point0 = { floatToFixed28_4(x0), floatToFixed28_4(y0), (float)(triangleZs[0]), (float)(triangleUs[0]), (float)(triangleVs[0]) };
 8010a8a:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8010a8e:	eddd 7a32 	vldr	s15, [sp, #200]	; 0xc8
 8010a92:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010a96:	edcd 7a1d 	vstr	s15, [sp, #116]	; 0x74
 8010a9a:	f8d9 3000 	ldr.w	r3, [r9]
 8010a9e:	931e      	str	r3, [sp, #120]	; 0x78
 8010aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8010aa4:	931f      	str	r3, [sp, #124]	; 0x7c
 8010aa6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	9320      	str	r3, [sp, #128]	; 0x80
 8010aac:	eddd 7a34 	vldr	s15, [sp, #208]	; 0xd0
 8010ab0:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
    Point3D point1 = { floatToFixed28_4(x1), floatToFixed28_4(y1), (float)(triangleZs[1]), (float)(triangleUs[1]), (float)(triangleVs[1]) };
 8010ab4:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 8010ab8:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
 8010abc:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010ac0:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8010ac4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010ac8:	9319      	str	r3, [sp, #100]	; 0x64
 8010aca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010ace:	931a      	str	r3, [sp, #104]	; 0x68
 8010ad0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	931b      	str	r3, [sp, #108]	; 0x6c
 8010ad6:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8010ada:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
    Point3D point2 = { floatToFixed28_4(x2), floatToFixed28_4(y2), (float)(triangleZs[2]), (float)(triangleUs[2]), (float)(triangleVs[2]) };
 8010ade:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 8010ae2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8010ae6:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8010aea:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 8010aee:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010af2:	9314      	str	r3, [sp, #80]	; 0x50
 8010af4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010af8:	9315      	str	r3, [sp, #84]	; 0x54
 8010afa:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	9316      	str	r3, [sp, #88]	; 0x58
    vertices[0] = point0;
 8010b00:	af21      	add	r7, sp, #132	; 0x84
 8010b02:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8010b06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b0a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010b0c:	f8dc 3000 	ldr.w	r3, [ip]
 8010b10:	603b      	str	r3, [r7, #0]
    vertices[1] = point1;
 8010b12:	af26      	add	r7, sp, #152	; 0x98
 8010b14:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8010b18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b1c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8010b22:	603b      	str	r3, [r7, #0]
    vertices[2] = point2;
 8010b24:	af2b      	add	r7, sp, #172	; 0xac
 8010b26:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 8010b2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b2e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010b30:	f8dc 3000 	ldr.w	r3, [ip]
 8010b34:	603b      	str	r3, [r7, #0]
    DrawingSurface dest = { fb, HAL::FRAME_BUFFER_WIDTH };
 8010b36:	9b07      	ldr	r3, [sp, #28]
 8010b38:	9310      	str	r3, [sp, #64]	; 0x40
 8010b3a:	4b16      	ldr	r3, [pc, #88]	; (8010b94 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x278>)
 8010b3c:	881b      	ldrh	r3, [r3, #0]
 8010b3e:	9311      	str	r3, [sp, #68]	; 0x44
    TextureSurface src = { textmap, bitmap.getAlphaData(), bitmap.getWidth(), bitmap.getHeight(), bitmap.getWidth() };
 8010b40:	960b      	str	r6, [sp, #44]	; 0x2c
 8010b42:	4628      	mov	r0, r5
 8010b44:	f012 fb44 	bl	80231d0 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 8010b48:	900c      	str	r0, [sp, #48]	; 0x30
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f012 fa12 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010b50:	900d      	str	r0, [sp, #52]	; 0x34
 8010b52:	4628      	mov	r0, r5
 8010b54:	f012 fa46 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010b58:	900e      	str	r0, [sp, #56]	; 0x38
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f012 fa0a 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010b60:	900f      	str	r0, [sp, #60]	; 0x3c
 8010b62:	4b0d      	ldr	r3, [pc, #52]	; (8010b98 <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x27c>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	689d      	ldr	r5, [r3, #8]
    HAL::lcd().drawTextureMapTriangle(dest, vertices, src, absoluteRect, dirtyAreaAbsolute, lookupRenderVariant(), alpha, 0xFFFF);
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f7ff fecb 	bl	8010904 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 8010b6e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8010b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b76:	9204      	str	r2, [sp, #16]
 8010b78:	9303      	str	r3, [sp, #12]
 8010b7a:	9002      	str	r0, [sp, #8]
 8010b7c:	ab38      	add	r3, sp, #224	; 0xe0
 8010b7e:	9301      	str	r3, [sp, #4]
 8010b80:	ab36      	add	r3, sp, #216	; 0xd8
 8010b82:	9300      	str	r3, [sp, #0]
 8010b84:	ab0b      	add	r3, sp, #44	; 0x2c
 8010b86:	aa21      	add	r2, sp, #132	; 0x84
 8010b88:	a910      	add	r1, sp, #64	; 0x40
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	f00f fe02 	bl	8020794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 8010b90:	e753      	b.n	8010a3a <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_+0x11e>
 8010b92:	bf00      	nop
 8010b94:	2000bb0c 	.word	0x2000bb0c
 8010b98:	2000bb14 	.word	0x2000bb14

08010b9c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
    if (!alpha)
 8010b9c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8010ba0:	b903      	cbnz	r3, 8010ba4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x8>
 8010ba2:	4770      	bx	lr
{
 8010ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba8:	ed2d 8b08 	vpush	{d8-d11}
 8010bac:	b095      	sub	sp, #84	; 0x54
 8010bae:	468a      	mov	sl, r1
 8010bb0:	4680      	mov	r8, r0
        return instance;
 8010bb2:	4b4d      	ldr	r3, [pc, #308]	; (8010ce8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x14c>)
 8010bb4:	6818      	ldr	r0, [r3, #0]
    uint16_t* fb = HAL::getInstance()->lockFrameBuffer();
 8010bb6:	6803      	ldr	r3, [r0, #0]
 8010bb8:	6a1b      	ldr	r3, [r3, #32]
 8010bba:	4798      	blx	r3
 8010bbc:	4683      	mov	fp, r0
        return rect.width;
 8010bbe:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 8010bc2:	ee08 3a90 	vmov	s17, r3
    float imageX1 = imageX0 + getWidth();
 8010bc6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8010bca:	eddf 7a48 	vldr	s15, [pc, #288]	; 8010cec <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>
 8010bce:	ee78 8aa7 	vadd.f32	s17, s17, s15
        return rect.height;
 8010bd2:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
 8010bd6:	ee08 3a10 	vmov	s16, r3
    float imageY2 = imageY0 + getHeight();
 8010bda:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8010bde:	ee38 8a27 	vadd.f32	s16, s16, s15
    triangleZs[0] = 100.f;
 8010be2:	4b43      	ldr	r3, [pc, #268]	; (8010cf0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x154>)
 8010be4:	930b      	str	r3, [sp, #44]	; 0x2c
    triangleZs[1] = 100.f;
 8010be6:	930c      	str	r3, [sp, #48]	; 0x30
    triangleZs[2] = 100.f;
 8010be8:	930d      	str	r3, [sp, #52]	; 0x34
    float right = (float)(bitmap.getWidth() - 1);
 8010bea:	f108 0428 	add.w	r4, r8, #40	; 0x28
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f012 f9c0 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010bf4:	3801      	subs	r0, #1
 8010bf6:	ee07 0a90 	vmov	s15, r0
 8010bfa:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
    float bottom = (float)(bitmap.getHeight() - 1);
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f012 f9f0 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010c04:	3801      	subs	r0, #1
 8010c06:	ee07 0a90 	vmov	s15, r0
 8010c0a:	eef8 9ae7 	vcvt.f32.s32	s19, s15
    if (HAL::DISPLAY_ROTATION == rotate90)
 8010c0e:	4b39      	ldr	r3, [pc, #228]	; (8010cf4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x158>)
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d05e      	beq.n	8010cd4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x138>
    float textureV3 = bottom;
 8010c16:	eef0 aa69 	vmov.f32	s21, s19
    float textureV2 = bottom;
 8010c1a:	eeb0 aa69 	vmov.f32	s20, s19
    float textureU2 = right;
 8010c1e:	eef0 9a49 	vmov.f32	s19, s18
    float textureU1 = right;
 8010c22:	ee19 3a10 	vmov	r3, s18
    float textureU3 = 0.0f;
 8010c26:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010cec <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>
    float textureV0 = 0.0f;
 8010c2a:	eeb0 ba49 	vmov.f32	s22, s18
    triangleXs[0] = imageX0;
 8010c2e:	f04f 0900 	mov.w	r9, #0
 8010c32:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    triangleXs[1] = imageX1;
 8010c36:	edcd 8a12 	vstr	s17, [sp, #72]	; 0x48
    triangleXs[2] = imageX2;
 8010c3a:	edcd 8a13 	vstr	s17, [sp, #76]	; 0x4c
    triangleYs[0] = imageY0;
 8010c3e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    triangleYs[1] = imageY1;
 8010c42:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    triangleYs[2] = imageY2;
 8010c46:	ed8d 8a10 	vstr	s16, [sp, #64]	; 0x40
    triangleUs[0] = textureU0;
 8010c4a:	f8cd 9020 	str.w	r9, [sp, #32]
    triangleUs[1] = textureU1;
 8010c4e:	9309      	str	r3, [sp, #36]	; 0x24
    triangleUs[2] = textureU2;
 8010c50:	edcd 9a0a 	vstr	s19, [sp, #40]	; 0x28
    triangleVs[0] = textureV0;
 8010c54:	ed8d 9a05 	vstr	s18, [sp, #20]
    triangleVs[1] = textureV1;
 8010c58:	f8cd 9018 	str.w	r9, [sp, #24]
    triangleVs[2] = textureV2;
 8010c5c:	ed8d aa07 	vstr	s20, [sp, #28]
    drawTriangle(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
 8010c60:	af05      	add	r7, sp, #20
 8010c62:	9703      	str	r7, [sp, #12]
 8010c64:	ae08      	add	r6, sp, #32
 8010c66:	9602      	str	r6, [sp, #8]
 8010c68:	ad0b      	add	r5, sp, #44	; 0x2c
 8010c6a:	9501      	str	r5, [sp, #4]
 8010c6c:	ac0e      	add	r4, sp, #56	; 0x38
 8010c6e:	9400      	str	r4, [sp, #0]
 8010c70:	ab11      	add	r3, sp, #68	; 0x44
 8010c72:	465a      	mov	r2, fp
 8010c74:	4651      	mov	r1, sl
 8010c76:	4640      	mov	r0, r8
 8010c78:	f7ff fe50 	bl	801091c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
    triangleXs[0] = imageX0;
 8010c7c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    triangleXs[1] = imageX2;
 8010c80:	edcd 8a12 	vstr	s17, [sp, #72]	; 0x48
    triangleXs[2] = imageX3;
 8010c84:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    triangleYs[0] = imageY0;
 8010c88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    triangleYs[1] = imageY2;
 8010c8c:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
    triangleYs[2] = imageY3;
 8010c90:	ed8d 8a10 	vstr	s16, [sp, #64]	; 0x40
    triangleUs[0] = textureU0;
 8010c94:	f8cd 9020 	str.w	r9, [sp, #32]
    triangleUs[1] = textureU2;
 8010c98:	edcd 9a09 	vstr	s19, [sp, #36]	; 0x24
    triangleUs[2] = textureU3;
 8010c9c:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
    triangleVs[0] = textureV0;
 8010ca0:	ed8d 9a05 	vstr	s18, [sp, #20]
    triangleVs[1] = textureV2;
 8010ca4:	ed8d aa06 	vstr	s20, [sp, #24]
    triangleVs[2] = textureV3;
 8010ca8:	edcd aa07 	vstr	s21, [sp, #28]
    drawTriangle(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
 8010cac:	9703      	str	r7, [sp, #12]
 8010cae:	9602      	str	r6, [sp, #8]
 8010cb0:	9501      	str	r5, [sp, #4]
 8010cb2:	9400      	str	r4, [sp, #0]
 8010cb4:	ab11      	add	r3, sp, #68	; 0x44
 8010cb6:	465a      	mov	r2, fp
 8010cb8:	4651      	mov	r1, sl
 8010cba:	4640      	mov	r0, r8
 8010cbc:	f7ff fe2e 	bl	801091c <_ZNK8touchgfx13ScalableImage12drawTriangleERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8010cc0:	4b09      	ldr	r3, [pc, #36]	; (8010ce8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x14c>)
 8010cc2:	6818      	ldr	r0, [r3, #0]
    HAL::getInstance()->unlockFrameBuffer();
 8010cc4:	6803      	ldr	r3, [r0, #0]
 8010cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc8:	4798      	blx	r3
}
 8010cca:	b015      	add	sp, #84	; 0x54
 8010ccc:	ecbd 8b08 	vpop	{d8-d11}
 8010cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        textureV3 = right;
 8010cd4:	eef0 aa49 	vmov.f32	s21, s18
        textureU3 = bottom;
 8010cd8:	eeb0 ba69 	vmov.f32	s22, s19
        textureV2 = 0.0f;
 8010cdc:	ed9f aa03 	vldr	s20, [pc, #12]	; 8010cec <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x150>
        textureU1 = 0.0f;
 8010ce0:	ee1a 3a10 	vmov	r3, s20
 8010ce4:	e7a3      	b.n	8010c2e <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x92>
 8010ce6:	bf00      	nop
 8010ce8:	2000bb14 	.word	0x2000bb14
 8010cec:	00000000 	.word	0x00000000
 8010cf0:	42c80000 	.word	0x42c80000
 8010cf4:	2000bb0a 	.word	0x2000bb0a

08010cf8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
        return typedTextId != TYPED_TEXT_INVALID;
 8010cf8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    }
}

void TextArea::resizeToCurrentText()
{
    if (typedText.hasValidId())
 8010cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d02a      	beq.n	8010d58 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x60>
{
 8010d02:	b570      	push	{r4, r5, r6, lr}
 8010d04:	4604      	mov	r4, r0
    {
        uint16_t w = getTextWidth();
 8010d06:	6803      	ldr	r3, [r0, #0]
 8010d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d0a:	4798      	blx	r3
 8010d0c:	4605      	mov	r5, r0
        uint16_t h = getTextHeight();
 8010d0e:	6823      	ldr	r3, [r4, #0]
 8010d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d12:	4620      	mov	r0, r4
 8010d14:	4798      	blx	r3
 8010d16:	4606      	mov	r6, r0
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 8010d18:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8010d1c:	2a02      	cmp	r2, #2
 8010d1e:	bf14      	ite	ne
 8010d20:	2300      	movne	r3, #0
 8010d22:	2301      	moveq	r3, #1
 8010d24:	2a00      	cmp	r2, #0
 8010d26:	bf08      	it	eq
 8010d28:	2301      	moveq	r3, #1
 8010d2a:	b953      	cbnz	r3, 8010d42 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x4a>
            setWidth(w);
            setHeight(h);
        }
        else
        {
            setWidth(h);
 8010d2c:	6823      	ldr	r3, [r4, #0]
 8010d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d30:	4601      	mov	r1, r0
 8010d32:	4620      	mov	r0, r4
 8010d34:	4798      	blx	r3
            setHeight(w);
 8010d36:	6823      	ldr	r3, [r4, #0]
 8010d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d3a:	b229      	sxth	r1, r5
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	4798      	blx	r3
        }
    }
}
 8010d40:	bd70      	pop	{r4, r5, r6, pc}
            setWidth(w);
 8010d42:	6823      	ldr	r3, [r4, #0]
 8010d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d46:	b229      	sxth	r1, r5
 8010d48:	4620      	mov	r0, r4
 8010d4a:	4798      	blx	r3
            setHeight(h);
 8010d4c:	6823      	ldr	r3, [r4, #0]
 8010d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d50:	4631      	mov	r1, r6
 8010d52:	4620      	mov	r0, r4
 8010d54:	4798      	blx	r3
 8010d56:	e7f3      	b.n	8010d40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x48>
 8010d58:	4770      	bx	lr

08010d5a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
{
 8010d5a:	b508      	push	{r3, lr}
    typedText = t;
 8010d5c:	84c1      	strh	r1, [r0, #38]	; 0x26
        return rect.width;
 8010d5e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    if ((getWidth() == 0) && (getHeight() == 0))
 8010d62:	b913      	cbnz	r3, 8010d6a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x10>
        return rect.height;
 8010d64:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010d68:	b103      	cbz	r3, 8010d6c <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
}
 8010d6a:	bd08      	pop	{r3, pc}
        resizeToCurrentText();
 8010d6c:	f7ff ffc4 	bl	8010cf8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
}
 8010d70:	e7fb      	b.n	8010d6a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x10>
	...

08010d74 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
int16_t TextAreaWithWildcardBase::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 8010d74:	b40e      	push	{r1, r2, r3}
 8010d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d78:	b08a      	sub	sp, #40	; 0x28
 8010d7a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    if (!typedText.hasValidId())
 8010d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d07b      	beq.n	8010e7c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x108>
 8010d84:	4604      	mov	r4, r0
    {
        return 0;
    }

    va_list pArg;
    va_start(pArg, format);
 8010d86:	ab10      	add	r3, sp, #64	; 0x40
 8010d88:	9309      	str	r3, [sp, #36]	; 0x24

    TextProvider textProvider;
 8010d8a:	a803      	add	r0, sp, #12
 8010d8c:	f011 fa64 	bl	8022258 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 8010d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010d94:	a803      	add	r0, sp, #12
 8010d96:	f011 fa68 	bl	802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 8010d9a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010d9e:	4b38      	ldr	r3, [pc, #224]	; (8010e80 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x10c>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d046      	beq.n	8010e34 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xc0>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010da6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8010da8:	4b36      	ldr	r3, [pc, #216]	; (8010e84 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x110>)
 8010daa:	881b      	ldrh	r3, [r3, #0]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d247      	bcs.n	8010e40 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xcc>
        return typedTexts[typedTextId].direction;
 8010db0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8010db2:	4a33      	ldr	r2, [pc, #204]	; (8010e80 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x10c>)
 8010db4:	6810      	ldr	r0, [r2, #0]
 8010db6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010dba:	785a      	ldrb	r2, [r3, #1]
 8010dbc:	f3c2 0281 	ubfx	r2, r2, #2, #2
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d043      	beq.n	8010e4c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xd8>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010dc4:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8010dc6:	4b2f      	ldr	r3, [pc, #188]	; (8010e84 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x110>)
 8010dc8:	881b      	ldrh	r3, [r3, #0]
 8010dca:	4298      	cmp	r0, r3
 8010dcc:	d244      	bcs.n	8010e58 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xe4>
        return fonts[typedTexts[typedTextId].fontIdx];
 8010dce:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8010dd0:	4f2b      	ldr	r7, [pc, #172]	; (8010e80 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x10c>)
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	f813 0010 	ldrb.w	r0, [r3, r0, lsl #1]
 8010dd8:	4b2b      	ldr	r3, [pc, #172]	; (8010e88 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x114>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
        return rect.width;
 8010de0:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8010de4:	9000      	str	r0, [sp, #0]
 8010de6:	a803      	add	r0, sp, #12
 8010de8:	f00f fb39 	bl	802045e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010dec:	4605      	mov	r5, r0
 8010dee:	b206      	sxth	r6, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d036      	beq.n	8010e64 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xf0>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010df6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8010df8:	4b22      	ldr	r3, [pc, #136]	; (8010e84 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x110>)
 8010dfa:	881b      	ldrh	r3, [r3, #0]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d237      	bcs.n	8010e70 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xfc>
        return fonts[typedTexts[typedTextId].fontIdx];
 8010e00:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8010e02:	4b1f      	ldr	r3, [pc, #124]	; (8010e80 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x10c>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8010e0a:	4b1f      	ldr	r3, [pc, #124]	; (8010e88 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x114>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

    const Font* fontToDraw = typedText.getFont();
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 8010e12:	6803      	ldr	r3, [r0, #0]
 8010e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e16:	4798      	blx	r3

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 8010e18:	fb15 f000 	smulbb	r0, r5, r0
 8010e1c:	3e01      	subs	r6, #1
 8010e1e:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8010e20:	fb16 f505 	smulbb	r5, r6, r5
 8010e24:	fa15 f080 	uxtah	r0, r5, r0
 8010e28:	b200      	sxth	r0, r0
}
 8010e2a:	b00a      	add	sp, #40	; 0x28
 8010e2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e30:	b003      	add	sp, #12
 8010e32:	4770      	bx	lr
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010e34:	4b15      	ldr	r3, [pc, #84]	; (8010e8c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x118>)
 8010e36:	4a16      	ldr	r2, [pc, #88]	; (8010e90 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 8010e38:	21cf      	movs	r1, #207	; 0xcf
 8010e3a:	4816      	ldr	r0, [pc, #88]	; (8010e94 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 8010e3c:	f014 f9e6 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010e40:	4b15      	ldr	r3, [pc, #84]	; (8010e98 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x124>)
 8010e42:	4a13      	ldr	r2, [pc, #76]	; (8010e90 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 8010e44:	21d0      	movs	r1, #208	; 0xd0
 8010e46:	4813      	ldr	r0, [pc, #76]	; (8010e94 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 8010e48:	f014 f9e0 	bl	802520c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010e4c:	4b0f      	ldr	r3, [pc, #60]	; (8010e8c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x118>)
 8010e4e:	4a10      	ldr	r2, [pc, #64]	; (8010e90 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 8010e50:	21cf      	movs	r1, #207	; 0xcf
 8010e52:	4810      	ldr	r0, [pc, #64]	; (8010e94 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 8010e54:	f014 f9da 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010e58:	4b0f      	ldr	r3, [pc, #60]	; (8010e98 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x124>)
 8010e5a:	4a0d      	ldr	r2, [pc, #52]	; (8010e90 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 8010e5c:	21d0      	movs	r1, #208	; 0xd0
 8010e5e:	480d      	ldr	r0, [pc, #52]	; (8010e94 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 8010e60:	f014 f9d4 	bl	802520c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010e64:	4b09      	ldr	r3, [pc, #36]	; (8010e8c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x118>)
 8010e66:	4a0a      	ldr	r2, [pc, #40]	; (8010e90 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 8010e68:	21cf      	movs	r1, #207	; 0xcf
 8010e6a:	480a      	ldr	r0, [pc, #40]	; (8010e94 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 8010e6c:	f014 f9ce 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010e70:	4b09      	ldr	r3, [pc, #36]	; (8010e98 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x124>)
 8010e72:	4a07      	ldr	r2, [pc, #28]	; (8010e90 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x11c>)
 8010e74:	21d0      	movs	r1, #208	; 0xd0
 8010e76:	4807      	ldr	r0, [pc, #28]	; (8010e94 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x120>)
 8010e78:	f014 f9c8 	bl	802520c <__assert_func>
        return 0;
 8010e7c:	2000      	movs	r0, #0
 8010e7e:	e7d4      	b.n	8010e2a <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xb6>
 8010e80:	2000bb94 	.word	0x2000bb94
 8010e84:	2000bb98 	.word	0x2000bb98
 8010e88:	2000bb9c 	.word	0x2000bb9c
 8010e8c:	08026a38 	.word	0x08026a38
 8010e90:	0802713c 	.word	0x0802713c
 8010e94:	08026a7c 	.word	0x08026a7c
 8010e98:	08026acc 	.word	0x08026acc

08010e9c <_ZNK8touchgfx10TiledImage7getTypeEv>:
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
    {
        return (uint16_t)TYPE_TILEDIMAGE;
    }
 8010e9c:	2009      	movs	r0, #9
 8010e9e:	4770      	bx	lr

08010ea0 <_ZN8touchgfx10TiledImage9setOffsetEss>:
    // Make sure the xOffset and yOffset are correct
    setOffset(xOffset, yOffset);
}

void TiledImage::setOffset(int16_t x, int16_t y)
{
 8010ea0:	b538      	push	{r3, r4, r5, lr}
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	4615      	mov	r5, r2
    setXOffset(x);
 8010ea6:	6803      	ldr	r3, [r0, #0]
 8010ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eaa:	4798      	blx	r3
    setYOffset(y);
 8010eac:	6823      	ldr	r3, [r4, #0]
 8010eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	4798      	blx	r3
}
 8010eb6:	bd38      	pop	{r3, r4, r5, pc}

08010eb8 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
        yOffset = ((yOffset % bitmap.getHeight()) + bitmap.getHeight()) % bitmap.getHeight();
    }
}

void TiledImage::getOffset(int16_t& x, int16_t& y)
{
 8010eb8:	b570      	push	{r4, r5, r6, lr}
 8010eba:	4604      	mov	r4, r0
 8010ebc:	460e      	mov	r6, r1
 8010ebe:	4615      	mov	r5, r2
    x = getXOffset();
 8010ec0:	6803      	ldr	r3, [r0, #0]
 8010ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ec4:	4798      	blx	r3
 8010ec6:	8030      	strh	r0, [r6, #0]
    y = getYOffset();
 8010ec8:	6823      	ldr	r3, [r4, #0]
 8010eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4798      	blx	r3
 8010ed0:	8028      	strh	r0, [r5, #0]
}
 8010ed2:	bd70      	pop	{r4, r5, r6, pc}

08010ed4 <_ZN8touchgfx10TiledImage10getXOffsetEv>:

int16_t TiledImage::getXOffset()
{
    return xOffset;
}
 8010ed4:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 8010ed8:	4770      	bx	lr

08010eda <_ZN8touchgfx10TiledImage10getYOffsetEv>:

int16_t TiledImage::getYOffset()
{
    return yOffset;
}
 8010eda:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8010ede:	4770      	bx	lr

08010ee0 <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 8010ee0:	4770      	bx	lr

08010ee2 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
{
 8010ee2:	b510      	push	{r4, lr}
 8010ee4:	4604      	mov	r4, r0
    Image::setBitmap(bmp);
 8010ee6:	f7ff fc59 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    setOffset(xOffset, yOffset);
 8010eea:	6823      	ldr	r3, [r4, #0]
 8010eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010eee:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8010ef2:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	4798      	blx	r3
}
 8010efa:	bd10      	pop	{r4, pc}

08010efc <_ZN8touchgfx10TiledImage10setXOffsetEs>:
{
 8010efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010efe:	4604      	mov	r4, r0
    xOffset = x;
 8010f00:	8541      	strh	r1, [r0, #42]	; 0x2a
    if (bitmap.getWidth() != 0)
 8010f02:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8010f06:	4628      	mov	r0, r5
 8010f08:	f012 f834 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f0c:	b900      	cbnz	r0, 8010f10 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x14>
}
 8010f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        xOffset = ((xOffset % bitmap.getWidth()) + bitmap.getWidth()) % bitmap.getWidth();
 8010f10:	f9b4 702a 	ldrsh.w	r7, [r4, #42]	; 0x2a
 8010f14:	4628      	mov	r0, r5
 8010f16:	f012 f82d 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f1a:	fb97 f6f0 	sdiv	r6, r7, r0
 8010f1e:	fb00 7616 	mls	r6, r0, r6, r7
 8010f22:	4628      	mov	r0, r5
 8010f24:	f012 f826 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f28:	4406      	add	r6, r0
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	f012 f822 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f30:	fb96 f3f0 	sdiv	r3, r6, r0
 8010f34:	fb00 6613 	mls	r6, r0, r3, r6
 8010f38:	8566      	strh	r6, [r4, #42]	; 0x2a
}
 8010f3a:	e7e8      	b.n	8010f0e <_ZN8touchgfx10TiledImage10setXOffsetEs+0x12>

08010f3c <_ZN8touchgfx10TiledImage10setYOffsetEs>:
{
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3e:	4604      	mov	r4, r0
    yOffset = y;
 8010f40:	8581      	strh	r1, [r0, #44]	; 0x2c
    if (bitmap.getHeight() != 0)
 8010f42:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8010f46:	4628      	mov	r0, r5
 8010f48:	f012 f84c 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010f4c:	b900      	cbnz	r0, 8010f50 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x14>
}
 8010f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        yOffset = ((yOffset % bitmap.getHeight()) + bitmap.getHeight()) % bitmap.getHeight();
 8010f50:	f9b4 702c 	ldrsh.w	r7, [r4, #44]	; 0x2c
 8010f54:	4628      	mov	r0, r5
 8010f56:	f012 f845 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010f5a:	fb97 f6f0 	sdiv	r6, r7, r0
 8010f5e:	fb00 7616 	mls	r6, r0, r6, r7
 8010f62:	4628      	mov	r0, r5
 8010f64:	f012 f83e 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010f68:	4406      	add	r6, r0
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f012 f83a 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010f70:	fb96 f3f0 	sdiv	r3, r6, r0
 8010f74:	fb00 6613 	mls	r6, r0, r3, r6
 8010f78:	85a6      	strh	r6, [r4, #44]	; 0x2c
}
 8010f7a:	e7e8      	b.n	8010f4e <_ZN8touchgfx10TiledImage10setYOffsetEs+0x12>

08010f7c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:

void TiledImage::draw(const Rect& invalidatedArea) const
{
 8010f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f80:	b091      	sub	sp, #68	; 0x44
 8010f82:	4682      	mov	sl, r0
 8010f84:	460d      	mov	r5, r1
    uint16_t bitmapWidth = bitmap.getWidth();
 8010f86:	f100 0326 	add.w	r3, r0, #38	; 0x26
 8010f8a:	461c      	mov	r4, r3
 8010f8c:	9304      	str	r3, [sp, #16]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f011 fff0 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f94:	4683      	mov	fp, r0
    uint16_t bitmapHeight = bitmap.getHeight();
 8010f96:	4620      	mov	r0, r4
 8010f98:	f012 f824 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>

    if (bitmapWidth == 0 || bitmapHeight == 0)
 8010f9c:	4607      	mov	r7, r0
 8010f9e:	fab0 f080 	clz	r0, r0
 8010fa2:	0940      	lsrs	r0, r0, #5
 8010fa4:	f1bb 0f00 	cmp.w	fp, #0
 8010fa8:	bf08      	it	eq
 8010faa:	2001      	moveq	r0, #1
 8010fac:	b110      	cbz	r0, 8010fb4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x38>
            dirty.x -= x;
            dirty.y -= y;
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
        }
    }
}
 8010fae:	b011      	add	sp, #68	; 0x44
 8010fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        this->x = 0;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        this->y = 0;
 8010fba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        this->width = 0;
 8010fbe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        this->height = 0;
 8010fc2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    translateRectToAbsolute(meAbs);
 8010fc6:	f8da 3000 	ldr.w	r3, [sl]
 8010fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fcc:	a90c      	add	r1, sp, #48	; 0x30
 8010fce:	4650      	mov	r0, sl
 8010fd0:	4798      	blx	r3
    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 8010fd2:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010fd6:	f9ba 202a 	ldrsh.w	r2, [sl, #42]	; 0x2a
 8010fda:	189c      	adds	r4, r3, r2
 8010fdc:	fb94 f4fb 	sdiv	r4, r4, fp
 8010fe0:	b291      	uxth	r1, r2
 8010fe2:	fb14 f40b 	smulbb	r4, r4, fp
 8010fe6:	1a64      	subs	r4, r4, r1
 8010fe8:	b224      	sxth	r4, r4
        return x + width;
 8010fea:	88a9      	ldrh	r1, [r5, #4]
 8010fec:	fa11 f383 	uxtah	r3, r1, r3
    const int16_t maxX = (((invalidatedArea.right() + xOffset) - 1) / bitmapWidth) * bitmapWidth;
 8010ff0:	fa02 f383 	sxtah	r3, r2, r3
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	fb93 f3fb 	sdiv	r3, r3, fp
 8010ffa:	fb13 f30b 	smulbb	r3, r3, fp
 8010ffe:	b21b      	sxth	r3, r3
 8011000:	9308      	str	r3, [sp, #32]
    const int16_t minY = ((invalidatedArea.y + yOffset) / bitmapHeight) * bitmapHeight - yOffset;
 8011002:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011006:	f9ba 102c 	ldrsh.w	r1, [sl, #44]	; 0x2c
 801100a:	185a      	adds	r2, r3, r1
 801100c:	fb92 f2f7 	sdiv	r2, r2, r7
 8011010:	b288      	uxth	r0, r1
 8011012:	fb12 f207 	smulbb	r2, r2, r7
 8011016:	1a12      	subs	r2, r2, r0
 8011018:	b212      	sxth	r2, r2
 801101a:	9209      	str	r2, [sp, #36]	; 0x24
        return y + height;
 801101c:	88ea      	ldrh	r2, [r5, #6]
 801101e:	fa12 f383 	uxtah	r3, r2, r3
    const int16_t maxY = (((invalidatedArea.bottom() + yOffset) - 1) / bitmapHeight) * bitmapHeight;
 8011022:	fa01 f383 	sxtah	r3, r1, r3
 8011026:	3b01      	subs	r3, #1
 8011028:	fb93 f3f7 	sdiv	r3, r3, r7
 801102c:	fb13 f307 	smulbb	r3, r3, r7
 8011030:	b21b      	sxth	r3, r3
 8011032:	f8cd a018 	str.w	sl, [sp, #24]
 8011036:	469a      	mov	sl, r3
 8011038:	e08f      	b.n	801115a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1de>
            height = MIN(bottom(), other.bottom()) - newY;
 801103a:	4632      	mov	r2, r6
 801103c:	e082      	b.n	8011144 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c8>
            x = 0;
 801103e:	2200      	movs	r2, #0
 8011040:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            y = 0;
 8011044:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            width = 0;
 8011048:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            height = 0;
 801104c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            dirty.x -= x;
 8011050:	b2a2      	uxth	r2, r4
 8011052:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8011056:	1a89      	subs	r1, r1, r2
 8011058:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            dirty.y -= y;
 801105c:	b29e      	uxth	r6, r3
 801105e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8011062:	1b9b      	subs	r3, r3, r6
 8011064:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        return instance->lcdRef;
 8011068:	4b3f      	ldr	r3, [pc, #252]	; (8011168 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ec>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	6898      	ldr	r0, [r3, #8]
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
 801106e:	6803      	ldr	r3, [r0, #0]
 8011070:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8011074:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011078:	441a      	add	r2, r3
 801107a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801107e:	4433      	add	r3, r6
 8011080:	9906      	ldr	r1, [sp, #24]
 8011082:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8011086:	f04f 0c01 	mov.w	ip, #1
 801108a:	f8cd c008 	str.w	ip, [sp, #8]
 801108e:	9101      	str	r1, [sp, #4]
 8011090:	a90a      	add	r1, sp, #40	; 0x28
 8011092:	9100      	str	r1, [sp, #0]
 8011094:	b21b      	sxth	r3, r3
 8011096:	b212      	sxth	r2, r2
 8011098:	9904      	ldr	r1, [sp, #16]
 801109a:	47c0      	blx	r8
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 801109c:	19f3      	adds	r3, r6, r7
 801109e:	b21b      	sxth	r3, r3
 80110a0:	4553      	cmp	r3, sl
 80110a2:	dc58      	bgt.n	8011156 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1da>
        this->x = x;
 80110a4:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
        this->y = y;
 80110a8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        this->width = width;
 80110ac:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
        this->height = height;
 80110b0:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
        Rect r = *this;
 80110b4:	aa0a      	add	r2, sp, #40	; 0x28
 80110b6:	a910      	add	r1, sp, #64	; 0x40
 80110b8:	e911 0003 	ldmdb	r1, {r0, r1}
 80110bc:	e882 0003 	stmia.w	r2, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 80110c0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
        return x + width;
 80110c4:	f9b5 1000 	ldrsh.w	r1, [r5]
 80110c8:	88aa      	ldrh	r2, [r5, #4]
 80110ca:	fa12 f281 	uxtah	r2, r2, r1
 80110ce:	b292      	uxth	r2, r2
 80110d0:	b216      	sxth	r6, r2
 80110d2:	9605      	str	r6, [sp, #20]
        return !(x >= other.right() || right() <= other.x ||
 80110d4:	42b0      	cmp	r0, r6
 80110d6:	dab2      	bge.n	801103e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc2>
        return x + width;
 80110d8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80110dc:	fa1c fc80 	uxtah	ip, ip, r0
 80110e0:	fa1f f68c 	uxth.w	r6, ip
 80110e4:	9607      	str	r6, [sp, #28]
 80110e6:	fa0f fe86 	sxth.w	lr, r6
        return !(x >= other.right() || right() <= other.x ||
 80110ea:	4571      	cmp	r1, lr
 80110ec:	daa7      	bge.n	801103e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc2>
                 y >= other.bottom() || bottom() <= other.y);
 80110ee:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
        return y + height;
 80110f2:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 80110f6:	f8b5 c006 	ldrh.w	ip, [r5, #6]
 80110fa:	fa1c fc88 	uxtah	ip, ip, r8
 80110fe:	fa0f fc8c 	sxth.w	ip, ip
        return !(x >= other.right() || right() <= other.x ||
 8011102:	45e1      	cmp	r9, ip
 8011104:	da9b      	bge.n	801103e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc2>
        return y + height;
 8011106:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801110a:	fa1c fc89 	uxtah	ip, ip, r9
 801110e:	fa1f f68c 	uxth.w	r6, ip
 8011112:	fa0f fc86 	sxth.w	ip, r6
        return !(x >= other.right() || right() <= other.x ||
 8011116:	45e0      	cmp	r8, ip
 8011118:	da91      	bge.n	801103e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc2>
            int16_t newX = MAX(x, other.x);
 801111a:	4288      	cmp	r0, r1
 801111c:	dd00      	ble.n	8011120 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a4>
 801111e:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 8011120:	45c1      	cmp	r9, r8
 8011122:	dd00      	ble.n	8011126 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1aa>
 8011124:	46c8      	mov	r8, r9
            width = MIN(right(), other.right()) - newX;
 8011126:	9805      	ldr	r0, [sp, #20]
 8011128:	4570      	cmp	r0, lr
 801112a:	dd00      	ble.n	801112e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b2>
 801112c:	9a07      	ldr	r2, [sp, #28]
 801112e:	1a52      	subs	r2, r2, r1
 8011130:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        return y + height;
 8011134:	886a      	ldrh	r2, [r5, #2]
 8011136:	88e8      	ldrh	r0, [r5, #6]
 8011138:	4402      	add	r2, r0
 801113a:	b292      	uxth	r2, r2
 801113c:	b210      	sxth	r0, r2
            height = MIN(bottom(), other.bottom()) - newY;
 801113e:	4584      	cmp	ip, r0
 8011140:	f6ff af7b 	blt.w	801103a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xbe>
 8011144:	eba2 0208 	sub.w	r2, r2, r8
 8011148:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            x = newX;
 801114c:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            y = newY;
 8011150:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 8011154:	e77c      	b.n	8011050 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xd4>
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 8011156:	445c      	add	r4, fp
 8011158:	b224      	sxth	r4, r4
 801115a:	9b08      	ldr	r3, [sp, #32]
 801115c:	429c      	cmp	r4, r3
 801115e:	f73f af26 	bgt.w	8010fae <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x32>
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 8011162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011164:	e79c      	b.n	80110a0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x124>
 8011166:	bf00      	nop
 8011168:	2000bb14 	.word	0x2000bb14

0801116c <_ZNK8touchgfx10TiledImage12getSolidRectEv>:

Rect TiledImage::getSolidRect() const
{
 801116c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011170:	b085      	sub	sp, #20
 8011172:	4604      	mov	r4, r0
    if (alpha < 255)
 8011174:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8011178:	2bff      	cmp	r3, #255	; 0xff
 801117a:	d008      	beq.n	801118e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
        this->x = x;
 801117c:	2300      	movs	r3, #0
 801117e:	8003      	strh	r3, [r0, #0]
        this->y = y;
 8011180:	8043      	strh	r3, [r0, #2]
        this->width = width;
 8011182:	8083      	strh	r3, [r0, #4]
        this->height = height;
 8011184:	80c3      	strh	r3, [r0, #6]
        {
            solidRect = solidRect2;
        }
    }
    return solidRect;
}
 8011186:	4620      	mov	r0, r4
 8011188:	b005      	add	sp, #20
 801118a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801118e:	460d      	mov	r5, r1
    Rect solidRect = bitmap.getSolidRect();
 8011190:	f101 0726 	add.w	r7, r1, #38	; 0x26
 8011194:	4639      	mov	r1, r7
 8011196:	a802      	add	r0, sp, #8
 8011198:	f011 ff5c 	bl	8023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
    if (solidRect.width == bitmap.getWidth())
 801119c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80111a0:	4638      	mov	r0, r7
 80111a2:	f011 fee7 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80111a6:	4286      	cmp	r6, r0
 80111a8:	d113      	bne.n	80111d2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x66>
 80111aa:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
        solidRect.width = getWidth();
 80111ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (solidRect.height == bitmap.getHeight())
 80111b2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80111b6:	4638      	mov	r0, r7
 80111b8:	f011 ff14 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80111bc:	4286      	cmp	r6, r0
 80111be:	d14d      	bne.n	801125c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xf0>
        return rect.height;
 80111c0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
        solidRect.height = getHeight();
 80111c4:	f8ad 300e 	strh.w	r3, [sp, #14]
    return solidRect;
 80111c8:	ab02      	add	r3, sp, #8
 80111ca:	cb03      	ldmia	r3!, {r0, r1}
 80111cc:	6020      	str	r0, [r4, #0]
 80111ce:	6061      	str	r1, [r4, #4]
 80111d0:	e7d9      	b.n	8011186 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1a>
        solidRect.x -= xOffset;
 80111d2:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 80111d6:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 80111da:	eba8 0803 	sub.w	r8, r8, r3
 80111de:	fa1f f888 	uxth.w	r8, r8
 80111e2:	fa0f f988 	sxth.w	r9, r8
 80111e6:	f8ad 9008 	strh.w	r9, [sp, #8]
        Rect solidRect2 = solidRect;
 80111ea:	466b      	mov	r3, sp
 80111ec:	aa04      	add	r2, sp, #16
 80111ee:	e912 0003 	ldmdb	r2, {r0, r1}
 80111f2:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.x += bitmap.getWidth();
 80111f6:	4638      	mov	r0, r7
 80111f8:	f011 febc 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80111fc:	4440      	add	r0, r8
 80111fe:	b280      	uxth	r0, r0
 8011200:	f8ad 0000 	strh.w	r0, [sp]
        if (solidRect.x < 0)
 8011204:	f1b9 0f00 	cmp.w	r9, #0
 8011208:	db18      	blt.n	801123c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xd0>
        return x + width;
 801120a:	fa10 f686 	uxtah	r6, r0, r6
 801120e:	b2b6      	uxth	r6, r6
 8011210:	b232      	sxth	r2, r6
        return rect.width;
 8011212:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
        if (solidRect2.right() > getWidth())
 8011216:	4293      	cmp	r3, r2
 8011218:	da03      	bge.n	8011222 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xb6>
            solidRect2.width = solidRect2.right() - getWidth();
 801121a:	b29b      	uxth	r3, r3
 801121c:	1af6      	subs	r6, r6, r3
 801121e:	f8ad 6004 	strh.w	r6, [sp, #4]
        if (solidRect2.width > solidRect.width)
 8011222:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8011226:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801122a:	429a      	cmp	r2, r3
 801122c:	ddc1      	ble.n	80111b2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x46>
            solidRect = solidRect2;
 801122e:	466b      	mov	r3, sp
 8011230:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011234:	ab04      	add	r3, sp, #16
 8011236:	e903 0003 	stmdb	r3, {r0, r1}
 801123a:	e7ba      	b.n	80111b2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x46>
 801123c:	fa18 f886 	uxtah	r8, r8, r6
 8011240:	fa0f f888 	sxth.w	r8, r8
            solidRect.width = MAX(solidRect.right(), 0);
 8011244:	f1b8 0f00 	cmp.w	r8, #0
 8011248:	dd05      	ble.n	8011256 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xea>
 801124a:	f8ad 800c 	strh.w	r8, [sp, #12]
            solidRect.x = 0;
 801124e:	2300      	movs	r3, #0
 8011250:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011254:	e7d9      	b.n	801120a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x9e>
            solidRect.width = MAX(solidRect.right(), 0);
 8011256:	f04f 0800 	mov.w	r8, #0
 801125a:	e7f6      	b.n	801124a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xde>
        solidRect.y -= yOffset;
 801125c:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 8011260:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 8011264:	eba8 0803 	sub.w	r8, r8, r3
 8011268:	fa1f f888 	uxth.w	r8, r8
 801126c:	fa0f f988 	sxth.w	r9, r8
 8011270:	f8ad 900a 	strh.w	r9, [sp, #10]
        Rect solidRect2 = solidRect;
 8011274:	466b      	mov	r3, sp
 8011276:	aa04      	add	r2, sp, #16
 8011278:	e912 0003 	ldmdb	r2, {r0, r1}
 801127c:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.y += bitmap.getHeight();
 8011280:	4638      	mov	r0, r7
 8011282:	f011 feaf 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011286:	4440      	add	r0, r8
 8011288:	b280      	uxth	r0, r0
 801128a:	f8ad 0002 	strh.w	r0, [sp, #2]
        if (solidRect.y < 0)
 801128e:	f1b9 0f00 	cmp.w	r9, #0
 8011292:	db18      	blt.n	80112c6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x15a>
        return y + height;
 8011294:	fa10 f686 	uxtah	r6, r0, r6
 8011298:	b2b6      	uxth	r6, r6
 801129a:	b232      	sxth	r2, r6
        return rect.height;
 801129c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
        if (solidRect2.bottom() > getHeight())
 80112a0:	4293      	cmp	r3, r2
 80112a2:	da03      	bge.n	80112ac <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x140>
            solidRect2.height = solidRect2.bottom() - getHeight();
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	1af6      	subs	r6, r6, r3
 80112a8:	f8ad 6006 	strh.w	r6, [sp, #6]
        if (solidRect2.height > solidRect.height)
 80112ac:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80112b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	dd87      	ble.n	80111c8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5c>
            solidRect = solidRect2;
 80112b8:	466b      	mov	r3, sp
 80112ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80112be:	ab04      	add	r3, sp, #16
 80112c0:	e903 0003 	stmdb	r3, {r0, r1}
 80112c4:	e780      	b.n	80111c8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5c>
 80112c6:	fa18 f886 	uxtah	r8, r8, r6
 80112ca:	fa0f f888 	sxth.w	r8, r8
            solidRect.height = MAX(solidRect.bottom(), 0);
 80112ce:	f1b8 0f00 	cmp.w	r8, #0
 80112d2:	dd05      	ble.n	80112e0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x174>
 80112d4:	f8ad 800e 	strh.w	r8, [sp, #14]
            solidRect.y = 0;
 80112d8:	2300      	movs	r3, #0
 80112da:	f8ad 300a 	strh.w	r3, [sp, #10]
 80112de:	e7d9      	b.n	8011294 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x128>
            solidRect.height = MAX(solidRect.bottom(), 0);
 80112e0:	f04f 0800 	mov.w	r8, #0
 80112e4:	e7f6      	b.n	80112d4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x168>

080112e6 <_ZN8touchgfx10TiledImageD0Ev>:
 80112e6:	b510      	push	{r4, lr}
 80112e8:	4604      	mov	r4, r0
 80112ea:	2130      	movs	r1, #48	; 0x30
 80112ec:	f013 ff72 	bl	80251d4 <_ZdlPvj>
 80112f0:	4620      	mov	r0, r4
 80112f2:	bd10      	pop	{r4, pc}

080112f4 <_ZN8touchgfx15AbstractPainterC1Ev>:
namespace touchgfx
{
AbstractPainter::AbstractPainter() :
    areaOffsetX(0),
    areaOffsetY(0),
    widgetAlpha(255)
 80112f4:	4a03      	ldr	r2, [pc, #12]	; (8011304 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 80112f6:	6002      	str	r2, [r0, #0]
 80112f8:	2200      	movs	r2, #0
 80112fa:	8082      	strh	r2, [r0, #4]
 80112fc:	80c2      	strh	r2, [r0, #6]
 80112fe:	22ff      	movs	r2, #255	; 0xff
 8011300:	7202      	strb	r2, [r0, #8]
{
}
 8011302:	4770      	bx	lr
 8011304:	080271fc 	.word	0x080271fc

08011308 <_ZN8touchgfx15AbstractPainterD1Ev>:

AbstractPainter::~AbstractPainter()
{
}
 8011308:	4770      	bx	lr

0801130a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:

void AbstractPainter::setOffset(uint16_t offsetX, uint16_t offsetY)
{
    areaOffsetX = offsetX;
 801130a:	8081      	strh	r1, [r0, #4]
    areaOffsetY = offsetY;
 801130c:	80c2      	strh	r2, [r0, #6]
}
 801130e:	4770      	bx	lr

08011310 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:

void AbstractPainter::setWidgetAlpha(const uint8_t alpha)
{
    widgetAlpha = alpha;
 8011310:	7201      	strb	r1, [r0, #8]
}
 8011312:	4770      	bx	lr

08011314 <_ZN8touchgfx21AbstractPainterRGB56510renderInitEv>:
     * @return true if it succeeds, false if it fails.
     */
    virtual bool renderInit()
    {
        return true;
    }
 8011314:	2001      	movs	r0, #1
 8011316:	4770      	bx	lr

08011318 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh>:
                                   int x,
                                   int xAdjust,
                                   int y,
                                   unsigned count,
                                   const uint8_t* covers)
{
 8011318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801131c:	b084      	sub	sp, #16
 801131e:	4604      	mov	r4, r0
 8011320:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011322:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint16_t* p = reinterpret_cast<uint16_t*>(ptr) + (x + xAdjust);
 8011324:	4413      	add	r3, r2
 8011326:	eb01 0543 	add.w	r5, r1, r3, lsl #1

    currentX = x + areaOffsetX;
 801132a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801132e:	441a      	add	r2, r3
 8011330:	60c2      	str	r2, [r0, #12]
    currentY = y + areaOffsetY;
 8011332:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011338:	4413      	add	r3, r2
 801133a:	6103      	str	r3, [r0, #16]
    if (renderInit())
 801133c:	6803      	ldr	r3, [r0, #0]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	4798      	blx	r3
 8011342:	b9a8      	cbnz	r0, 8011370 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x58>
            p++;
            currentX++;
        }
        while (--count != 0);
    }
}
 8011344:	b004      	add	sp, #16
 8011346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    renderPixel(p, red, green, blue);
 801134a:	6823      	ldr	r3, [r4, #0]
 801134c:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8011350:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8011354:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011358:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801135c:	9100      	str	r1, [sp, #0]
 801135e:	4629      	mov	r1, r5
 8011360:	4620      	mov	r0, r4
 8011362:	47c0      	blx	r8
            p++;
 8011364:	3502      	adds	r5, #2
            currentX++;
 8011366:	68e2      	ldr	r2, [r4, #12]
 8011368:	3201      	adds	r2, #1
 801136a:	60e2      	str	r2, [r4, #12]
        while (--count != 0);
 801136c:	3e01      	subs	r6, #1
 801136e:	d0e9      	beq.n	8011344 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x2c>
            if (renderNext(red, green, blue, alpha))
 8011370:	6823      	ldr	r3, [r4, #0]
 8011372:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8011376:	f10d 030f 	add.w	r3, sp, #15
 801137a:	9300      	str	r3, [sp, #0]
 801137c:	f10d 030e 	add.w	r3, sp, #14
 8011380:	f10d 020d 	add.w	r2, sp, #13
 8011384:	a903      	add	r1, sp, #12
 8011386:	4620      	mov	r0, r4
 8011388:	47c0      	blx	r8
 801138a:	2800      	cmp	r0, #0
 801138c:	d0ea      	beq.n	8011364 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x4c>
                if (widgetAlpha < 255)
 801138e:	7a23      	ldrb	r3, [r4, #8]
 8011390:	2bff      	cmp	r3, #255	; 0xff
 8011392:	d00a      	beq.n	80113aa <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x92>
                    alpha = static_cast<uint8_t>((alpha * widgetAlpha) / 255);
 8011394:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011398:	fb03 f202 	mul.w	r2, r3, r2
 801139c:	4b24      	ldr	r3, [pc, #144]	; (8011430 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x118>)
 801139e:	fb83 1302 	smull	r1, r3, r3, r2
 80113a2:	4413      	add	r3, r2
 80113a4:	11db      	asrs	r3, r3, #7
 80113a6:	f88d 300f 	strb.w	r3, [sp, #15]
                uint32_t combinedAlpha = (*covers) * alpha;
 80113aa:	f817 cb01 	ldrb.w	ip, [r7], #1
 80113ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80113b2:	fb0c fc03 	mul.w	ip, ip, r3
                if (combinedAlpha == (255u * 255u)) // max alpha=255 on "*covers" and max alpha=255 on "widgetAlpha"
 80113b6:	f64f 6301 	movw	r3, #65025	; 0xfe01
 80113ba:	459c      	cmp	ip, r3
 80113bc:	d0c5      	beq.n	801134a <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x32>
                    uint8_t p_red = (*p & 0xF800) >> 8;
 80113be:	f8b5 e000 	ldrh.w	lr, [r5]
 80113c2:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80113c6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
                    p_red |= p_red >> 5;
 80113ca:	ea40 1060 	orr.w	r0, r0, r0, asr #5
                    uint8_t p_green = (*p & 0x07E0) >> 3;
 80113ce:	f3ce 01c7 	ubfx	r1, lr, #3, #8
 80113d2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
                    p_green |= p_green >> 6;
 80113d6:	ea41 11a1 	orr.w	r1, r1, r1, asr #6
                    uint8_t p_blue = (*p & 0x001F) << 3;
 80113da:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                    p_blue |= p_blue >> 5;
 80113de:	f3ce 1342 	ubfx	r3, lr, #5, #3
 80113e2:	ea43 0e0e 	orr.w	lr, r3, lr
 80113e6:	fa5f fe8e 	uxtb.w	lr, lr
                                static_cast<uint8_t>((((blue - p_blue)  * combinedAlpha) + (p_blue << 16)) >> 16));
 80113ea:	6823      	ldr	r3, [r4, #0]
 80113ec:	f8d3 8014 	ldr.w	r8, [r3, #20]
                                static_cast<uint8_t>((((red - p_red)   * combinedAlpha) + (p_red << 16)) >> 16),
 80113f0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80113f4:	1a12      	subs	r2, r2, r0
 80113f6:	0400      	lsls	r0, r0, #16
 80113f8:	fb0c 0202 	mla	r2, ip, r2, r0
                                static_cast<uint8_t>((((green - p_green) * combinedAlpha) + (p_green << 16)) >> 16),
 80113fc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8011400:	1a5b      	subs	r3, r3, r1
 8011402:	0409      	lsls	r1, r1, #16
 8011404:	fb0c 1303 	mla	r3, ip, r3, r1
                                static_cast<uint8_t>((((blue - p_blue)  * combinedAlpha) + (p_blue << 16)) >> 16));
 8011408:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801140c:	eba1 010e 	sub.w	r1, r1, lr
 8011410:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8011414:	fb0c ec01 	mla	ip, ip, r1, lr
                    renderPixel(p,
 8011418:	f3cc 4107 	ubfx	r1, ip, #16, #8
 801141c:	9100      	str	r1, [sp, #0]
 801141e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011422:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8011426:	4629      	mov	r1, r5
 8011428:	4620      	mov	r0, r4
 801142a:	47c0      	blx	r8
 801142c:	e79a      	b.n	8011364 <_ZN8touchgfx21AbstractPainterRGB5656renderEPhiiijPKh+0x4c>
 801142e:	bf00      	nop
 8011430:	80808081 	.word	0x80808081

08011434 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh>:

void AbstractPainterRGB565::renderPixel(uint16_t* p, uint8_t red, uint8_t green, uint8_t blue)
{
    *p = ((red << 8) & RMASK) | ((green << 3) & GMASK) | ((blue >> 3) & BMASK);
 8011434:	4806      	ldr	r0, [pc, #24]	; (8011450 <_ZN8touchgfx21AbstractPainterRGB56511renderPixelEPthhh+0x1c>)
 8011436:	ea00 2202 	and.w	r2, r0, r2, lsl #8
 801143a:	b212      	sxth	r2, r2
 801143c:	00db      	lsls	r3, r3, #3
 801143e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8011442:	431a      	orrs	r2, r3
 8011444:	f89d 0000 	ldrb.w	r0, [sp]
 8011448:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 801144c:	800a      	strh	r2, [r1, #0]
}
 801144e:	4770      	bx	lr
 8011450:	fffff800 	.word	0xfffff800

08011454 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8011454:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
    }
 8011458:	4770      	bx	lr

0801145a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     * @return The current alpha value.
     */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 801145a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801145e:	4770      	bx	lr

08011460 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:

#include <touchgfx/widgets/canvas/Canvas.hpp>

namespace touchgfx
{
Canvas::Canvas(const CanvasWidget* _widget, const Rect& invalidatedArea) : widget(_widget),
 8011460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011464:	b089      	sub	sp, #36	; 0x24
 8011466:	4604      	mov	r4, r0
 8011468:	4690      	mov	r8, r2
    enoughMemory(false), penUp(true), penHasBeenDown(false), previousOutside(0), penDownOutside(0)
 801146a:	4b94      	ldr	r3, [pc, #592]	; (80116bc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 801146c:	6003      	str	r3, [r0, #0]
 801146e:	6041      	str	r1, [r0, #4]
        Q5() : v(0) { }
 8011470:	2500      	movs	r5, #0
 8011472:	6085      	str	r5, [r0, #8]
 8011474:	60c5      	str	r5, [r0, #12]
 8011476:	6105      	str	r5, [r0, #16]
 8011478:	6145      	str	r5, [r0, #20]
 801147a:	f100 0618 	add.w	r6, r0, #24
 801147e:	4630      	mov	r0, r6
 8011480:	f00e fcbe 	bl	801fe00 <_ZN8touchgfx15RenderingBufferC1Ev>
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Rasterizer()
        : fillingRule(FILL_NON_ZERO)
 8011484:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8011488:	4638      	mov	r0, r7
 801148a:	f00d fbbb 	bl	801ec04 <_ZN8touchgfx7OutlineC1Ev>
 801148e:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8011492:	f00e fc6b 	bl	801fd6c <_ZN8touchgfx8ScanlineC1Ev>
 8011496:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 801149a:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
 801149e:	2301      	movs	r3, #1
 80114a0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80114a4:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 80114a8:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 80114ac:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80114b0:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80114b4:	f884 50ad 	strb.w	r5, [r4, #173]	; 0xad
 80114b8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 80114bc:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
{
    assert(CanvasWidgetRenderer::hasBuffer() && "No buffer allocated for CanvasWidgetRenderer drawing");
 80114c0:	f00e fc04 	bl	801fccc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d05c      	beq.n	8011582 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x122>
    assert(Rasterizer::POLY_BASE_SHIFT == 5 && "CanvasWidget assumes Q5 but Rasterizer uses a different setting");

    // Area to redraw (relative coordinates)
    Rect dirtyArea = Rect(0, 0, widget->getWidth(), widget->getHeight()) & invalidatedArea;
 80114c8:	6863      	ldr	r3, [r4, #4]
        return rect.width;
 80114ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
        return rect.height;
 80114ce:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
        this->x = x;
 80114d2:	2300      	movs	r3, #0
 80114d4:	f8ad 3018 	strh.w	r3, [sp, #24]
        this->y = y;
 80114d8:	f8ad 301a 	strh.w	r3, [sp, #26]
        this->width = width;
 80114dc:	f8ad 101c 	strh.w	r1, [sp, #28]
        this->height = height;
 80114e0:	f8ad 201e 	strh.w	r2, [sp, #30]
        Rect r = *this;
 80114e4:	ab02      	add	r3, sp, #8
 80114e6:	aa08      	add	r2, sp, #32
 80114e8:	e912 0003 	ldmdb	r2, {r0, r1}
 80114ec:	e883 0003 	stmia.w	r3, {r0, r1}
        return !(x >= other.right() || right() <= other.x ||
 80114f0:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
        return x + width;
 80114f4:	f9b8 1000 	ldrsh.w	r1, [r8]
 80114f8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80114fc:	fa13 f381 	uxtah	r3, r3, r1
 8011500:	b29b      	uxth	r3, r3
 8011502:	b21d      	sxth	r5, r3
        return !(x >= other.right() || right() <= other.x ||
 8011504:	42a8      	cmp	r0, r5
 8011506:	da44      	bge.n	8011592 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x132>
        return x + width;
 8011508:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801150c:	fa12 f280 	uxtah	r2, r2, r0
 8011510:	b292      	uxth	r2, r2
 8011512:	fa0f fc82 	sxth.w	ip, r2
        return !(x >= other.right() || right() <= other.x ||
 8011516:	4561      	cmp	r1, ip
 8011518:	da3b      	bge.n	8011592 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x132>
                 y >= other.bottom() || bottom() <= other.y);
 801151a:	f9bd b00a 	ldrsh.w	fp, [sp, #10]
        return y + height;
 801151e:	f9b8 e002 	ldrsh.w	lr, [r8, #2]
 8011522:	f8b8 9006 	ldrh.w	r9, [r8, #6]
 8011526:	fa19 f98e 	uxtah	r9, r9, lr
 801152a:	fa0f f989 	sxth.w	r9, r9
        return !(x >= other.right() || right() <= other.x ||
 801152e:	45cb      	cmp	fp, r9
 8011530:	da2f      	bge.n	8011592 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x132>
        return y + height;
 8011532:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8011536:	fa19 f98b 	uxtah	r9, r9, fp
 801153a:	fa1f f989 	uxth.w	r9, r9
 801153e:	fa0f fa89 	sxth.w	sl, r9
        return !(x >= other.right() || right() <= other.x ||
 8011542:	45d6      	cmp	lr, sl
 8011544:	da25      	bge.n	8011592 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x132>
            int16_t newX = MAX(x, other.x);
 8011546:	4288      	cmp	r0, r1
 8011548:	dd00      	ble.n	801154c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xec>
 801154a:	4601      	mov	r1, r0
            int16_t newY = MAX(y, other.y);
 801154c:	45f3      	cmp	fp, lr
 801154e:	dd00      	ble.n	8011552 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xf2>
 8011550:	46de      	mov	lr, fp
            width = MIN(right(), other.right()) - newX;
 8011552:	4565      	cmp	r5, ip
 8011554:	dd00      	ble.n	8011558 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xf8>
 8011556:	4613      	mov	r3, r2
 8011558:	1a5b      	subs	r3, r3, r1
 801155a:	f8ad 300c 	strh.w	r3, [sp, #12]
        return y + height;
 801155e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8011562:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8011566:	4413      	add	r3, r2
 8011568:	b29b      	uxth	r3, r3
 801156a:	b21a      	sxth	r2, r3
            height = MIN(bottom(), other.bottom()) - newY;
 801156c:	4592      	cmp	sl, r2
 801156e:	db0e      	blt.n	801158e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12e>
 8011570:	eba3 030e 	sub.w	r3, r3, lr
 8011574:	f8ad 300e 	strh.w	r3, [sp, #14]
            x = newX;
 8011578:	f8ad 1008 	strh.w	r1, [sp, #8]
            y = newY;
 801157c:	f8ad e00a 	strh.w	lr, [sp, #10]
 8011580:	e010      	b.n	80115a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x144>
    assert(CanvasWidgetRenderer::hasBuffer() && "No buffer allocated for CanvasWidgetRenderer drawing");
 8011582:	4b4f      	ldr	r3, [pc, #316]	; (80116c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x260>)
 8011584:	4a4f      	ldr	r2, [pc, #316]	; (80116c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x264>)
 8011586:	2117      	movs	r1, #23
 8011588:	484f      	ldr	r0, [pc, #316]	; (80116c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x268>)
 801158a:	f013 fe3f 	bl	802520c <__assert_func>
            height = MIN(bottom(), other.bottom()) - newY;
 801158e:	464b      	mov	r3, r9
 8011590:	e7ee      	b.n	8011570 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x110>
            x = 0;
 8011592:	2300      	movs	r3, #0
 8011594:	f8ad 3008 	strh.w	r3, [sp, #8]
            y = 0;
 8011598:	f8ad 300a 	strh.w	r3, [sp, #10]
            width = 0;
 801159c:	f8ad 300c 	strh.w	r3, [sp, #12]
            height = 0;
 80115a0:	f8ad 300e 	strh.w	r3, [sp, #14]

    // Absolute position of the scalableImage.
    Rect dirtyAreaAbsolute = dirtyArea;
 80115a4:	ad04      	add	r5, sp, #16
 80115a6:	f10d 0808 	add.w	r8, sp, #8
 80115aa:	e898 0003 	ldmia.w	r8, {r0, r1}
 80115ae:	e885 0003 	stmia.w	r5, {r0, r1}
    widget->translateRectToAbsolute(dirtyAreaAbsolute);
 80115b2:	6860      	ldr	r0, [r4, #4]
 80115b4:	6803      	ldr	r3, [r0, #0]
 80115b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b8:	4629      	mov	r1, r5
 80115ba:	4798      	blx	r3

    // Transform rects to match frame buffer coordinates
    // This is needed if the display is rotated compared to the frame buffer
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyArea, widget->getRect());
 80115bc:	6861      	ldr	r1, [r4, #4]
 80115be:	3104      	adds	r1, #4
 80115c0:	4640      	mov	r0, r8
 80115c2:	f00f fb2b 	bl	8020c1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyAreaAbsolute);
 80115c6:	4628      	mov	r0, r5
 80115c8:	f00f fb40 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>

    // Re-size buffers for optimum memory buffer layout.
    enoughMemory = CanvasWidgetRenderer::setScanlineWidth(dirtyArea.width);
 80115cc:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80115d0:	f00e fb0a 	bl	801fbe8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80115d4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
     *
     *        Resets this object. Basically this is done by resetting the the Outline.
     */
    void reset()
    {
        outline.reset();
 80115d8:	4638      	mov	r0, r7
 80115da:	f00d faef 	bl	801ebbc <_ZN8touchgfx7Outline5resetEv>
    ras.reset();

    offsetX = dirtyArea.x;
 80115de:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80115e2:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
    offsetY = dirtyArea.y;
 80115e6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80115ea:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80115ee:	0152      	lsls	r2, r2, #5
    invalidatedAreaX = CWRUtil::toQ5<int>(dirtyArea.x);
 80115f0:	60a2      	str	r2, [r4, #8]
 80115f2:	015b      	lsls	r3, r3, #5
    invalidatedAreaY = CWRUtil::toQ5<int>(dirtyArea.y);
 80115f4:	60e3      	str	r3, [r4, #12]
    invalidatedAreaWidth = CWRUtil::toQ5<int>(dirtyArea.width);
 80115f6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80115fa:	015b      	lsls	r3, r3, #5
 80115fc:	6123      	str	r3, [r4, #16]
    invalidatedAreaHeight = CWRUtil::toQ5<int>(dirtyArea.height);
 80115fe:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011602:	015b      	lsls	r3, r3, #5
 8011604:	6163      	str	r3, [r4, #20]
        return instance;
 8011606:	4f31      	ldr	r7, [pc, #196]	; (80116cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x26c>)
 8011608:	6838      	ldr	r0, [r7, #0]

    // Create the rendering buffer
    uint8_t* RESTRICT buf = reinterpret_cast<uint8_t*>(HAL::getInstance()->lockFrameBuffer());
 801160a:	6803      	ldr	r3, [r0, #0]
 801160c:	6a1b      	ldr	r3, [r3, #32]
 801160e:	4798      	blx	r3
 8011610:	4605      	mov	r5, r0
        return instance->lcdRef;
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	6898      	ldr	r0, [r3, #8]
    int stride = 0;
    uint8_t offset = 0;
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8011616:	6803      	ldr	r3, [r0, #0]
 8011618:	6a1b      	ldr	r3, [r3, #32]
 801161a:	4798      	blx	r3
    switch (bitDepth)
 801161c:	1e43      	subs	r3, r0, #1
 801161e:	2b1f      	cmp	r3, #31
 8011620:	d846      	bhi.n	80116b0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>
 8011622:	e8df f003 	tbb	[pc, r3]
 8011626:	1010      	.short	0x1010
 8011628:	45451045 	.word	0x45451045
 801162c:	45454545 	.word	0x45454545
 8011630:	45454545 	.word	0x45454545
 8011634:	45453445 	.word	0x45453445
 8011638:	45454545 	.word	0x45454545
 801163c:	45453445 	.word	0x45453445
 8011640:	45454545 	.word	0x45454545
 8011644:	3445      	.short	0x3445
    {
    case 1: // BW
    case 2: // GRAY2
    case 4: // GRAY4
        {
            uint8_t bitsPerByte = 8 / bitDepth;
 8011646:	2208      	movs	r2, #8
 8011648:	fb92 f2f0 	sdiv	r2, r2, r0
 801164c:	b2d3      	uxtb	r3, r2
            stride = (HAL::FRAME_BUFFER_WIDTH + (bitsPerByte - 1)) / bitsPerByte;
 801164e:	1e5a      	subs	r2, r3, #1
 8011650:	491f      	ldr	r1, [pc, #124]	; (80116d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x270>)
 8011652:	880f      	ldrh	r7, [r1, #0]
 8011654:	4417      	add	r7, r2
 8011656:	fb97 f7f3 	sdiv	r7, r7, r3
            buf += (dirtyAreaAbsolute.x / bitsPerByte) + dirtyAreaAbsolute.y * stride;
 801165a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801165e:	fb9c f2f3 	sdiv	r2, ip, r3
 8011662:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011666:	fb07 2001 	mla	r0, r7, r1, r2
 801166a:	1829      	adds	r1, r5, r0
            offset = dirtyAreaAbsolute.x % bitsPerByte;
 801166c:	fb03 c212 	mls	r2, r3, r2, ip
 8011670:	b2d2      	uxtb	r2, r2
        break;
    default:
        assert(0 && "Unsupported bit depth");
        break;
    }
    ras.setMaxRenderY(dirtyAreaAbsolute.height);
 8011672:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
     *
     * @param y The max y coordinate to render for the Outline.
     */
    void setMaxRenderY(int y)
    {
        maxRenderY = y;
 8011676:	66e0      	str	r0, [r4, #108]	; 0x6c
    rbuf.attach(buf, offset, dirtyAreaAbsolute.width, dirtyAreaAbsolute.height, stride);
 8011678:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801167c:	9701      	str	r7, [sp, #4]
 801167e:	9000      	str	r0, [sp, #0]
 8011680:	4630      	mov	r0, r6
 8011682:	f00e fbc5 	bl	801fe10 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
}
 8011686:	4620      	mov	r0, r4
 8011688:	b009      	add	sp, #36	; 0x24
 801168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        stride = HAL::FRAME_BUFFER_WIDTH * (bitDepth / 8);
 801168e:	4b10      	ldr	r3, [pc, #64]	; (80116d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x270>)
 8011690:	881f      	ldrh	r7, [r3, #0]
 8011692:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8011696:	fb00 f707 	mul.w	r7, r0, r7
        buf += dirtyAreaAbsolute.x * (bitDepth / 8) + dirtyAreaAbsolute.y * stride;
 801169a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801169e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80116a2:	fb07 f101 	mul.w	r1, r7, r1
 80116a6:	fb03 1000 	mla	r0, r3, r0, r1
 80116aa:	1829      	adds	r1, r5, r0
    uint8_t offset = 0;
 80116ac:	2200      	movs	r2, #0
        break;
 80116ae:	e7e0      	b.n	8011672 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x212>
        assert(0 && "Unsupported bit depth");
 80116b0:	4b08      	ldr	r3, [pc, #32]	; (80116d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x274>)
 80116b2:	4a04      	ldr	r2, [pc, #16]	; (80116c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x264>)
 80116b4:	2149      	movs	r1, #73	; 0x49
 80116b6:	4804      	ldr	r0, [pc, #16]	; (80116c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x268>)
 80116b8:	f013 fda8 	bl	802520c <__assert_func>
 80116bc:	080273bc 	.word	0x080273bc
 80116c0:	080272e0 	.word	0x080272e0
 80116c4:	080273c4 	.word	0x080273c4
 80116c8:	0802733c 	.word	0x0802733c
 80116cc:	2000bb14 	.word	0x2000bb14
 80116d0:	2000bb0c 	.word	0x2000bb0c
 80116d4:	08027394 	.word	0x08027394

080116d8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
            return v;
 80116d8:	6812      	ldr	r2, [r2, #0]

uint8_t Canvas::isOutside(const CWRUtil::Q5& x, const CWRUtil::Q5& y, const CWRUtil::Q5& width, const CWRUtil::Q5& height) const
{
    uint8_t outside = 0;
    // Find out if (x,y) is above/below of current area
    if (y < 0)
 80116da:	2a00      	cmp	r2, #0
 80116dc:	db05      	blt.n	80116ea <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80116de:	9800      	ldr	r0, [sp, #0]
 80116e0:	6800      	ldr	r0, [r0, #0]
    {
        outside = POINT_IS_ABOVE;
    }
    else if (y >= height)
 80116e2:	4290      	cmp	r0, r2
 80116e4:	dd0b      	ble.n	80116fe <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x26>
    uint8_t outside = 0;
 80116e6:	2000      	movs	r0, #0
 80116e8:	e000      	b.n	80116ec <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x14>
        outside = POINT_IS_ABOVE;
 80116ea:	2001      	movs	r0, #1
 80116ec:	680a      	ldr	r2, [r1, #0]
    {
        outside = POINT_IS_BELOW;
    }
    // Find out if (x,y) is left/right of current area
    if (x < 0)
 80116ee:	2a00      	cmp	r2, #0
 80116f0:	db07      	blt.n	8011702 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x2a>
 80116f2:	681b      	ldr	r3, [r3, #0]
    {
        outside |= POINT_IS_LEFT;
    }
    else if (x >= width)
 80116f4:	4293      	cmp	r3, r2
 80116f6:	dc01      	bgt.n	80116fc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x24>
    {
        outside |= POINT_IS_RIGHT;
 80116f8:	f040 0008 	orr.w	r0, r0, #8
    }
    return outside;
}
 80116fc:	4770      	bx	lr
        outside = POINT_IS_BELOW;
 80116fe:	2002      	movs	r0, #2
 8011700:	e7f4      	b.n	80116ec <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x14>
        outside |= POINT_IS_LEFT;
 8011702:	f040 0004 	orr.w	r0, r0, #4
 8011706:	4770      	bx	lr

08011708 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:

void Canvas::transformFrameBufferToDisplay(CWRUtil::Q5& x, CWRUtil::Q5& y) const
{
    switch (HAL::DISPLAY_ROTATION)
 8011708:	4b09      	ldr	r3, [pc, #36]	; (8011730 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x28>)
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	b173      	cbz	r3, 801172c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x24>
 801170e:	2b01      	cmp	r3, #1
 8011710:	d10c      	bne.n	801172c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x24>
{
 8011712:	b410      	push	{r4}
    {
    case rotate0:
        break;
    case rotate90:
        CWRUtil::Q5 tmpY = y;
 8011714:	6814      	ldr	r4, [r2, #0]
        y = CWRUtil::toQ5<int>(widget->getWidth()) - x;
 8011716:	6843      	ldr	r3, [r0, #4]
        return rect.width;
 8011718:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
            return Q5(v - q5.v);
 801171c:	680b      	ldr	r3, [r1, #0]
 801171e:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8011722:	6013      	str	r3, [r2, #0]
        x = tmpY;
 8011724:	600c      	str	r4, [r1, #0]
        break;
    }
}
 8011726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801172a:	4770      	bx	lr
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	2000bb0a 	.word	0x2000bb0a

08011734 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
{
 8011734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011736:	b085      	sub	sp, #20
 8011738:	9103      	str	r1, [sp, #12]
 801173a:	9202      	str	r2, [sp, #8]
    if (!enoughMemory)
 801173c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8011740:	b90b      	cbnz	r3, 8011746 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x12>
}
 8011742:	b005      	add	sp, #20
 8011744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011746:	4604      	mov	r4, r0
    transformFrameBufferToDisplay(x, y);
 8011748:	aa02      	add	r2, sp, #8
 801174a:	a903      	add	r1, sp, #12
 801174c:	f7ff ffdc 	bl	8011708 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8011750:	68a3      	ldr	r3, [r4, #8]
 8011752:	9d03      	ldr	r5, [sp, #12]
 8011754:	1aed      	subs	r5, r5, r3
    x = x - invalidatedAreaX;
 8011756:	9503      	str	r5, [sp, #12]
 8011758:	68e3      	ldr	r3, [r4, #12]
 801175a:	9e02      	ldr	r6, [sp, #8]
 801175c:	1af6      	subs	r6, r6, r3
    y = y - invalidatedAreaY;
 801175e:	9602      	str	r6, [sp, #8]
    uint8_t outside = isOutside(x, y, invalidatedAreaWidth, invalidatedAreaHeight);
 8011760:	f104 0314 	add.w	r3, r4, #20
 8011764:	9300      	str	r3, [sp, #0]
 8011766:	f104 0310 	add.w	r3, r4, #16
 801176a:	aa02      	add	r2, sp, #8
 801176c:	a903      	add	r1, sp, #12
 801176e:	4620      	mov	r0, r4
 8011770:	f7ff ffb2 	bl	80116d8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8011774:	4607      	mov	r7, r0
    if (!previousOutside)
 8011776:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 801177a:	b993      	cbnz	r3, 80117a2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6e>
     *
     * @return false if the buffer for Outline Cell objects was too small.
     */
    bool wasOutlineTooComplex()
    {
        return outlineTooComplex;
 801177c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
     * @param y The y coordinate.
     */
    void lineTo(int x, int y)
    {
#ifndef SIMULATOR
        if (!outline.wasOutlineTooComplex())
 8011780:	b143      	cbz	r3, 8011794 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
    previousX = x;
 8011782:	9b03      	ldr	r3, [sp, #12]
 8011784:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    previousY = y;
 8011788:	9b02      	ldr	r3, [sp, #8]
 801178a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    previousOutside = outside;
 801178e:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8011792:	e7d6      	b.n	8011742 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xe>
#endif
        {
            outline.lineTo(x, y);
 8011794:	4632      	mov	r2, r6
 8011796:	4629      	mov	r1, r5
 8011798:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801179c:	f00e f865 	bl	801f86a <_ZN8touchgfx7Outline6lineToEii>
 80117a0:	e7ef      	b.n	8011782 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
        if (!outside || !(previousOutside & outside))
 80117a2:	b110      	cbz	r0, 80117aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x76>
 80117a4:	ea13 0200 	ands.w	r2, r3, r0
 80117a8:	d12e      	bne.n	8011808 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xd4>
            if (penUp)
 80117aa:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 80117ae:	b1f2      	cbz	r2, 80117ee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xba>
                penDownOutside = previousOutside;
 80117b0:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
            return v;
 80117b4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80117b8:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80117bc:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 80117c0:	b183      	cbz	r3, 80117e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xb0>
                penUp = false;
 80117c2:	2300      	movs	r3, #0
 80117c4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
                penHasBeenDown = true;
 80117c8:	2301      	movs	r3, #1
 80117ca:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80117ce:	9903      	ldr	r1, [sp, #12]
 80117d0:	9a02      	ldr	r2, [sp, #8]
 80117d2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1d3      	bne.n	8011782 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
            outline.lineTo(x, y);
 80117da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80117de:	f00e f844 	bl	801f86a <_ZN8touchgfx7Outline6lineToEii>
 80117e2:	e7ce      	b.n	8011782 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
            outline.moveTo(x, y);
 80117e4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80117e8:	f00e f86f 	bl	801f8ca <_ZN8touchgfx7Outline6moveToEii>
 80117ec:	e7e9      	b.n	80117c2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8e>
 80117ee:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80117f2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80117f6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d1e7      	bne.n	80117ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9a>
            outline.lineTo(x, y);
 80117fe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8011802:	f00e f832 	bl	801f86a <_ZN8touchgfx7Outline6lineToEii>
 8011806:	e7e2      	b.n	80117ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9a>
            outside &= previousOutside;
 8011808:	4617      	mov	r7, r2
 801180a:	e7ba      	b.n	8011782 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>

0801180c <_ZN8touchgfx6Canvas5closeEv>:

void Canvas::close()
{
 801180c:	b510      	push	{r4, lr}
 801180e:	4604      	mov	r4, r0
    if (!penUp)
 8011810:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8011814:	b9a3      	cbnz	r3, 8011840 <_ZN8touchgfx6Canvas5closeEv+0x34>
    {
        if (previousOutside & penDownOutside)
 8011816:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 801181a:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 801181e:	4213      	tst	r3, r2
 8011820:	d10e      	bne.n	8011840 <_ZN8touchgfx6Canvas5closeEv+0x34>
            //  to close the path, CWR will do this for us.
            //lineTo(penDownX, penDownY);
        }
        else
        {
            if (previousOutside)
 8011822:	b133      	cbz	r3, 8011832 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8011824:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
 8011828:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 801182c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 8011830:	b153      	cbz	r3, 8011848 <_ZN8touchgfx6Canvas5closeEv+0x3c>
 8011832:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8011836:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 801183a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 801183e:	b13b      	cbz	r3, 8011850 <_ZN8touchgfx6Canvas5closeEv+0x44>
                ras.lineTo(previousX, previousY);
            }
            ras.lineTo(initialX, initialY);
        }
    }
    penUp = false;
 8011840:	2300      	movs	r3, #0
 8011842:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8011846:	bd10      	pop	{r4, pc}
            outline.lineTo(x, y);
 8011848:	302c      	adds	r0, #44	; 0x2c
 801184a:	f00e f80e 	bl	801f86a <_ZN8touchgfx7Outline6lineToEii>
 801184e:	e7f0      	b.n	8011832 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8011850:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8011854:	f00e f809 	bl	801f86a <_ZN8touchgfx7Outline6lineToEii>
 8011858:	e7f2      	b.n	8011840 <_ZN8touchgfx6Canvas5closeEv+0x34>

0801185a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
{
 801185a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801185c:	b085      	sub	sp, #20
 801185e:	9103      	str	r1, [sp, #12]
 8011860:	9202      	str	r2, [sp, #8]
    if (!enoughMemory)
 8011862:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8011866:	b35b      	cbz	r3, 80118c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8011868:	4604      	mov	r4, r0
    if (!penUp)
 801186a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 801186e:	b34b      	cbz	r3, 80118c4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
    transformFrameBufferToDisplay(x, y);
 8011870:	aa02      	add	r2, sp, #8
 8011872:	a903      	add	r1, sp, #12
 8011874:	4620      	mov	r0, r4
 8011876:	f7ff ff47 	bl	8011708 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
            return Q5(v - q5.v);
 801187a:	68a3      	ldr	r3, [r4, #8]
 801187c:	9d03      	ldr	r5, [sp, #12]
 801187e:	1aed      	subs	r5, r5, r3
    x = x - invalidatedAreaX;
 8011880:	9503      	str	r5, [sp, #12]
 8011882:	68e3      	ldr	r3, [r4, #12]
 8011884:	9e02      	ldr	r6, [sp, #8]
 8011886:	1af6      	subs	r6, r6, r3
    y = y - invalidatedAreaY;
 8011888:	9602      	str	r6, [sp, #8]
    uint8_t outside = isOutside(x, y, invalidatedAreaWidth, invalidatedAreaHeight);
 801188a:	f104 0314 	add.w	r3, r4, #20
 801188e:	9300      	str	r3, [sp, #0]
 8011890:	f104 0310 	add.w	r3, r4, #16
 8011894:	aa02      	add	r2, sp, #8
 8011896:	a903      	add	r1, sp, #12
 8011898:	4620      	mov	r0, r4
 801189a:	f7ff ff1d 	bl	80116d8 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
    if (outside)
 801189e:	4607      	mov	r7, r0
 80118a0:	b198      	cbz	r0, 80118ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x70>
        penUp = true;
 80118a2:	2301      	movs	r3, #1
 80118a4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    initialX = x;
 80118a8:	9a03      	ldr	r2, [sp, #12]
 80118aa:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    initialY = y;
 80118ae:	9b02      	ldr	r3, [sp, #8]
 80118b0:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    previousX = x;
 80118b4:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    previousY = y;
 80118b8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    previousOutside = outside;
 80118bc:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
}
 80118c0:	b005      	add	sp, #20
 80118c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        close();
 80118c4:	f7ff ffa2 	bl	801180c <_ZN8touchgfx6Canvas5closeEv>
 80118c8:	e7d2      	b.n	8011870 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x16>
        penDownOutside = outside;
 80118ca:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 80118ce:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
        if (!outline.wasOutlineTooComplex())
 80118d2:	b133      	cbz	r3, 80118e2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x88>
        penUp = false;
 80118d4:	2300      	movs	r3, #0
 80118d6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
        penHasBeenDown = true;
 80118da:	2301      	movs	r3, #1
 80118dc:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80118e0:	e7e2      	b.n	80118a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x4e>
            outline.moveTo(x, y);
 80118e2:	4632      	mov	r2, r6
 80118e4:	4629      	mov	r1, r5
 80118e6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80118ea:	f00d ffee 	bl	801f8ca <_ZN8touchgfx7Outline6moveToEii>
 80118ee:	e7f1      	b.n	80118d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x7a>

080118f0 <_ZN8touchgfx6Canvas6renderEv>:
    if (!enoughMemory)
 80118f0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	f000 81fd 	beq.w	8011cf4 <_ZN8touchgfx6Canvas6renderEv+0x404>
{
 80118fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fe:	b093      	sub	sp, #76	; 0x4c
 8011900:	f890 5070 	ldrb.w	r5, [r0, #112]	; 0x70
    if (ras.wasOutlineTooComplex())
 8011904:	2d00      	cmp	r5, #0
 8011906:	f040 81f8 	bne.w	8011cfa <_ZN8touchgfx6Canvas6renderEv+0x40a>
    if (!penHasBeenDown)
 801190a:	f890 b0a2 	ldrb.w	fp, [r0, #162]	; 0xa2
 801190e:	f1bb 0f00 	cmp.w	fp, #0
 8011912:	f000 81f3 	beq.w	8011cfc <_ZN8touchgfx6Canvas6renderEv+0x40c>
 8011916:	4681      	mov	r9, r0
    if (widget->getAlpha() == 0)
 8011918:	6840      	ldr	r0, [r0, #4]
 801191a:	6803      	ldr	r3, [r0, #0]
 801191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801191e:	4798      	blx	r3
 8011920:	b908      	cbnz	r0, 8011926 <_ZN8touchgfx6Canvas6renderEv+0x36>
        return true; // Invisible. Done
 8011922:	465b      	mov	r3, fp
 8011924:	e1ea      	b.n	8011cfc <_ZN8touchgfx6Canvas6renderEv+0x40c>
    close();
 8011926:	4648      	mov	r0, r9
 8011928:	f7ff ff70 	bl	801180c <_ZN8touchgfx6Canvas5closeEv>
    widget->getPainter().setOffset(offsetX/*+widget->getX()*/, offsetY/*+widget->getY()*/);
 801192c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8011930:	6803      	ldr	r3, [r0, #0]
 8011932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011934:	4798      	blx	r3
 8011936:	f9b9 109c 	ldrsh.w	r1, [r9, #156]	; 0x9c
 801193a:	f9b9 209e 	ldrsh.w	r2, [r9, #158]	; 0x9e
 801193e:	b292      	uxth	r2, r2
 8011940:	b289      	uxth	r1, r1
 8011942:	f7ff fce2 	bl	801130a <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
    widget->getPainter().setWidgetAlpha(widget->getAlpha());
 8011946:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801194a:	6803      	ldr	r3, [r0, #0]
 801194c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801194e:	4798      	blx	r3
 8011950:	4606      	mov	r6, r0
 8011952:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8011956:	6803      	ldr	r3, [r0, #0]
 8011958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801195a:	4798      	blx	r3
 801195c:	4601      	mov	r1, r0
 801195e:	4630      	mov	r0, r6
 8011960:	f7ff fcd6 	bl	8011310 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
    Renderer renderer(rbuf, widget->getPainter());
 8011964:	f109 0618 	add.w	r6, r9, #24
 8011968:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801196c:	6803      	ldr	r3, [r0, #0]
 801196e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011970:	4798      	blx	r3
     * @param [in] renderingBuffer The screen buffer to render the polygon in.
     * @param [in] painter         The painter to use for drawing individual pixels in a
     *                             scanline.
     */
    Renderer(RenderingBuffer& renderingBuffer, AbstractPainter& painter)
        : renderingBuffer(&renderingBuffer), painter(&painter)
 8011972:	9610      	str	r6, [sp, #64]	; 0x40
 8011974:	9011      	str	r0, [sp, #68]	; 0x44
    return ras.render(renderer);
 8011976:	f109 092c 	add.w	r9, r9, #44	; 0x2c
     *         false if there was insufficient memory and nothing was drawn.
     */
    template <class Renderer>
    bool render(Renderer& r)
    {
        const Cell* cells = outline.getCells();
 801197a:	4648      	mov	r0, r9
 801197c:	f00e f8ee 	bl	801fb5c <_ZN8touchgfx7Outline8getCellsEv>
 8011980:	4607      	mov	r7, r0
        return numCells;
 8011982:	f8d9 4008 	ldr.w	r4, [r9, #8]
        unsigned numCells = outline.getNumCells();
        if (numCells == 0)
 8011986:	b11c      	cbz	r4, 8011990 <_ZN8touchgfx6Canvas6renderEv+0xa0>
        return outlineTooComplex;
 8011988:	f899 3044 	ldrb.w	r3, [r9, #68]	; 0x44
        {
            return true;
        }

        // Not enough memory allocated, the outline will look wrong. Do not proceed with the drawing.
        if (outline.wasOutlineTooComplex())
 801198c:	b113      	cbz	r3, 8011994 <_ZN8touchgfx6Canvas6renderEv+0xa4>
        {
            return false;
 801198e:	46ab      	mov	fp, r5
 8011990:	465b      	mov	r3, fp
 8011992:	e1b3      	b.n	8011cfc <_ZN8touchgfx6Canvas6renderEv+0x40c>
        int x, y;
        int cover;
        int alpha;
        int area;

        scanline.reset();
 8011994:	f109 0348 	add.w	r3, r9, #72	; 0x48
 8011998:	9305      	str	r3, [sp, #20]
 801199a:	4618      	mov	r0, r3
 801199c:	f00e f9d0 	bl	801fd40 <_ZN8touchgfx8Scanline5resetEv>

        cover = 0;
        const Cell* curCell = cells++;
 80119a0:	f107 0808 	add.w	r8, r7, #8
        numCells--;
 80119a4:	1e63      	subs	r3, r4, #1
        cover = 0;
 80119a6:	f04f 0a00 	mov.w	sl, #0
 80119aa:	f8cd b018 	str.w	fp, [sp, #24]
 80119ae:	e0e3      	b.n	8011b78 <_ZN8touchgfx6Canvas6renderEv+0x288>
            cover += startCell->cover;

            //accumulate all start cells
            while (numCells-- > 0)
            {
                curCell = cells++;
 80119b0:	4647      	mov	r7, r8
 80119b2:	4688      	mov	r8, r1
                }
                area += curCell->area;
                cover += curCell->cover;
            }

            if (area)
 80119b4:	b30c      	cbz	r4, 80119fa <_ZN8touchgfx6Canvas6renderEv+0x10a>
            {
                alpha = calculateAlpha((cover << (Rasterizer::POLY_BASE_SHIFT + 1)) - area);
 80119b6:	ebc4 148a 	rsb	r4, r4, sl, lsl #6
        if (cover < 0)
 80119ba:	10e4      	asrs	r4, r4, #3
 80119bc:	d407      	bmi.n	80119ce <_ZN8touchgfx6Canvas6renderEv+0xde>
        if (fillingRule == FILL_EVEN_ODD)
 80119be:	f899 306c 	ldrb.w	r3, [r9, #108]	; 0x6c
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d005      	beq.n	80119d2 <_ZN8touchgfx6Canvas6renderEv+0xe2>
        if (cover > AA_MASK)
 80119c6:	2cff      	cmp	r4, #255	; 0xff
 80119c8:	dc0b      	bgt.n	80119e2 <_ZN8touchgfx6Canvas6renderEv+0xf2>
                if (alpha)
 80119ca:	b1a4      	cbz	r4, 80119f6 <_ZN8touchgfx6Canvas6renderEv+0x106>
 80119cc:	e00a      	b.n	80119e4 <_ZN8touchgfx6Canvas6renderEv+0xf4>
            cover = -cover;
 80119ce:	4264      	negs	r4, r4
 80119d0:	e7f5      	b.n	80119be <_ZN8touchgfx6Canvas6renderEv+0xce>
            cover &= AA_2MASK;
 80119d2:	f3c4 0408 	ubfx	r4, r4, #0, #9
            if (cover > AA_NUM)
 80119d6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80119da:	ddf4      	ble.n	80119c6 <_ZN8touchgfx6Canvas6renderEv+0xd6>
                cover = AA_2NUM - cover;
 80119dc:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
 80119e0:	e7f1      	b.n	80119c6 <_ZN8touchgfx6Canvas6renderEv+0xd6>
            cover = AA_MASK;
 80119e2:	24ff      	movs	r4, #255	; 0xff
    lastY = y;
}

FORCE_INLINE_FUNCTION int Scanline::isReady(int y) const
{
    return numSpans && (y ^ lastY);
 80119e4:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80119e8:	b11b      	cbz	r3, 80119f2 <_ZN8touchgfx6Canvas6renderEv+0x102>
 80119ea:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 80119ee:	459b      	cmp	fp, r3
 80119f0:	d11e      	bne.n	8011a30 <_ZN8touchgfx6Canvas6renderEv+0x140>
    if (x < 0)
 80119f2:	2e00      	cmp	r6, #0
 80119f4:	da7a      	bge.n	8011aec <_ZN8touchgfx6Canvas6renderEv+0x1fc>
                        r.render(scanline);
                        scanline.resetSpans();
                    }
                    scanline.addCell(x, y, alpha);
                }
                x++;
 80119f6:	1c73      	adds	r3, r6, #1
 80119f8:	9304      	str	r3, [sp, #16]
            }

            if (numCells == unsigned(-1))
 80119fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80119fe:	f000 813a 	beq.w	8011c76 <_ZN8touchgfx6Canvas6renderEv+0x386>
            {
                break;
            }

            if (curCell->x > x)
 8011a02:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011a06:	9a04      	ldr	r2, [sp, #16]
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	f340 80b4 	ble.w	8011b76 <_ZN8touchgfx6Canvas6renderEv+0x286>
            {
                alpha = calculateAlpha(cover << (Rasterizer::POLY_BASE_SHIFT + 1));
 8011a0e:	ea4f 148a 	mov.w	r4, sl, lsl #6
        if (cover < 0)
 8011a12:	10e4      	asrs	r4, r4, #3
 8011a14:	f100 8093 	bmi.w	8011b3e <_ZN8touchgfx6Canvas6renderEv+0x24e>
        if (fillingRule == FILL_EVEN_ODD)
 8011a18:	f899 306c 	ldrb.w	r3, [r9, #108]	; 0x6c
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	f000 8090 	beq.w	8011b42 <_ZN8touchgfx6Canvas6renderEv+0x252>
        if (cover > AA_MASK)
 8011a22:	2cff      	cmp	r4, #255	; 0xff
 8011a24:	f300 8096 	bgt.w	8011b54 <_ZN8touchgfx6Canvas6renderEv+0x264>
                if (alpha)
 8011a28:	2c00      	cmp	r4, #0
 8011a2a:	f000 80a4 	beq.w	8011b76 <_ZN8touchgfx6Canvas6renderEv+0x286>
 8011a2e:	e092      	b.n	8011b56 <_ZN8touchgfx6Canvas6renderEv+0x266>
        return lastY;
 8011a30:	9905      	ldr	r1, [sp, #20]
 8011a32:	6888      	ldr	r0, [r1, #8]
     *
     * @param scanline The Scanline.
     */
    void render(const Scanline& scanline)
    {
        if (scanline.getY() < 0 || scanline.getY() >= int(renderingBuffer->getHeight()))
 8011a34:	2800      	cmp	r0, #0
 8011a36:	db47      	blt.n	8011ac8 <_ZN8touchgfx6Canvas6renderEv+0x1d8>
 8011a38:	9b10      	ldr	r3, [sp, #64]	; 0x40
     *
     * @return The height.
     */
    unsigned getHeight() const
    {
        return height;
 8011a3a:	68da      	ldr	r2, [r3, #12]
 8011a3c:	4684      	mov	ip, r0
 8011a3e:	4290      	cmp	r0, r2
 8011a40:	da42      	bge.n	8011ac8 <_ZN8touchgfx6Canvas6renderEv+0x1d8>
        return numSpans;
 8011a42:	9107      	str	r1, [sp, #28]
 8011a44:	68c9      	ldr	r1, [r1, #12]
 8011a46:	468e      	mov	lr, r1
     *
     * @return The pointer to the start of the given line in the RenderingBuffer.
     */
    unsigned char* row(unsigned y)
    {
        return buf + stride * y;
 8011a48:	6819      	ldr	r1, [r3, #0]
 8011a4a:	691a      	ldr	r2, [r3, #16]
 8011a4c:	4610      	mov	r0, r2
 8011a4e:	fb00 120c 	mla	r2, r0, ip, r1
 8011a52:	9204      	str	r2, [sp, #16]
            covers(scanline.covers),
 8011a54:	9807      	ldr	r0, [sp, #28]
 8011a56:	6982      	ldr	r2, [r0, #24]
 8011a58:	4611      	mov	r1, r2
            curCount(scanline.counts),
 8011a5a:	6a02      	ldr	r2, [r0, #32]
            curStartIndex(scanline.startIndices)
 8011a5c:	920e      	str	r2, [sp, #56]	; 0x38
 8011a5e:	69c2      	ldr	r2, [r0, #28]
 8011a60:	920f      	str	r2, [sp, #60]	; 0x3c
        return xAdjust;
 8011a62:	791b      	ldrb	r3, [r3, #4]
 8011a64:	9307      	str	r3, [sp, #28]
 8011a66:	f8cd 9020 	str.w	r9, [sp, #32]
 8011a6a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011a6e:	960a      	str	r6, [sp, #40]	; 0x28
 8011a70:	950b      	str	r5, [sp, #44]	; 0x2c
 8011a72:	46a3      	mov	fp, r4
 8011a74:	4665      	mov	r5, ip
 8011a76:	4689      	mov	r9, r1
 8011a78:	4676      	mov	r6, lr
 8011a7a:	e00b      	b.n	8011a94 <_ZN8touchgfx6Canvas6renderEv+0x1a4>
                if (numPix <= 0)
                {
                    continue;
                }
            }
            painter->render(row, x, xAdjust, y, numPix, covers);
 8011a7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011a7e:	6801      	ldr	r1, [r0, #0]
 8011a80:	688c      	ldr	r4, [r1, #8]
 8011a82:	f8cd c008 	str.w	ip, [sp, #8]
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	9500      	str	r5, [sp, #0]
 8011a8a:	9b07      	ldr	r3, [sp, #28]
 8011a8c:	9904      	ldr	r1, [sp, #16]
 8011a8e:	47a0      	blx	r4
        }
        while (--numSpans);
 8011a90:	3e01      	subs	r6, #1
 8011a92:	d012      	beq.n	8011aba <_ZN8touchgfx6Canvas6renderEv+0x1ca>
            ++curCount;
 8011a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a96:	1c9a      	adds	r2, r3, #2
 8011a98:	920e      	str	r2, [sp, #56]	; 0x38
            ++curStartIndex;
 8011a9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a9c:	1c91      	adds	r1, r2, #2
 8011a9e:	910f      	str	r1, [sp, #60]	; 0x3c
            return int(*curStartIndex);
 8011aa0:	8852      	ldrh	r2, [r2, #2]
            return covers + *curStartIndex;
 8011aa2:	eb09 0c02 	add.w	ip, r9, r2
            return int(*curCount);
 8011aa6:	885b      	ldrh	r3, [r3, #2]
            if (x + numPix >= int(renderingBuffer->getWidth()))
 8011aa8:	18d0      	adds	r0, r2, r3
 8011aaa:	9910      	ldr	r1, [sp, #64]	; 0x40
        return width;
 8011aac:	6889      	ldr	r1, [r1, #8]
 8011aae:	4288      	cmp	r0, r1
 8011ab0:	dbe4      	blt.n	8011a7c <_ZN8touchgfx6Canvas6renderEv+0x18c>
                numPix = renderingBuffer->getWidth() - x;
 8011ab2:	1a8b      	subs	r3, r1, r2
                if (numPix <= 0)
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	dce1      	bgt.n	8011a7c <_ZN8touchgfx6Canvas6renderEv+0x18c>
 8011ab8:	e7ea      	b.n	8011a90 <_ZN8touchgfx6Canvas6renderEv+0x1a0>
 8011aba:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011abe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011ac0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011ac2:	465c      	mov	r4, fp
 8011ac4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    lastX = 0x7FFF;
 8011ac8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011acc:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
    lastY = 0x7FFF;
 8011ad0:	f8c9 3050 	str.w	r3, [r9, #80]	; 0x50
    curCount = counts;
 8011ad4:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 8011ad8:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
    curStartIndex = startIndices;
 8011adc:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8011ae0:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
    numSpans = 0;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
 8011aea:	e782      	b.n	80119f2 <_ZN8touchgfx6Canvas6renderEv+0x102>
    if (unsigned(x) >= CanvasWidgetRenderer::getScanlineWidth())
 8011aec:	f00e f8fc 	bl	801fce8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8011af0:	42b0      	cmp	r0, r6
 8011af2:	d980      	bls.n	80119f6 <_ZN8touchgfx6Canvas6renderEv+0x106>
    covers[x] = (unsigned char)cover;
 8011af4:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
 8011af8:	559c      	strb	r4, [r3, r6]
    if (x == lastX + 1)
 8011afa:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 8011afe:	3301      	adds	r3, #1
 8011b00:	429e      	cmp	r6, r3
 8011b02:	d016      	beq.n	8011b32 <_ZN8touchgfx6Canvas6renderEv+0x242>
        *++curCount = 1;
 8011b04:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8011b08:	1c9a      	adds	r2, r3, #2
 8011b0a:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
 8011b0e:	2201      	movs	r2, #1
 8011b10:	805a      	strh	r2, [r3, #2]
        *++curStartIndex = x;
 8011b12:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 8011b16:	1c9a      	adds	r2, r3, #2
 8011b18:	f8c9 2058 	str.w	r2, [r9, #88]	; 0x58
 8011b1c:	805e      	strh	r6, [r3, #2]
        numSpans++;
 8011b1e:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8011b22:	3301      	adds	r3, #1
 8011b24:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
    lastX = x;
 8011b28:	f8c9 604c 	str.w	r6, [r9, #76]	; 0x4c
    lastY = y;
 8011b2c:	f8c9 b050 	str.w	fp, [r9, #80]	; 0x50
 8011b30:	e761      	b.n	80119f6 <_ZN8touchgfx6Canvas6renderEv+0x106>
        (*curCount)++;
 8011b32:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
 8011b36:	8813      	ldrh	r3, [r2, #0]
 8011b38:	3301      	adds	r3, #1
 8011b3a:	8013      	strh	r3, [r2, #0]
 8011b3c:	e7f4      	b.n	8011b28 <_ZN8touchgfx6Canvas6renderEv+0x238>
            cover = -cover;
 8011b3e:	4264      	negs	r4, r4
 8011b40:	e76a      	b.n	8011a18 <_ZN8touchgfx6Canvas6renderEv+0x128>
            cover &= AA_2MASK;
 8011b42:	f3c4 0408 	ubfx	r4, r4, #0, #9
            if (cover > AA_NUM)
 8011b46:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8011b4a:	f77f af6a 	ble.w	8011a22 <_ZN8touchgfx6Canvas6renderEv+0x132>
                cover = AA_2NUM - cover;
 8011b4e:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
 8011b52:	e766      	b.n	8011a22 <_ZN8touchgfx6Canvas6renderEv+0x132>
            cover = AA_MASK;
 8011b54:	24ff      	movs	r4, #255	; 0xff
    return numSpans && (y ^ lastY);
 8011b56:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8011b5a:	b11b      	cbz	r3, 8011b64 <_ZN8touchgfx6Canvas6renderEv+0x274>
 8011b5c:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8011b60:	459b      	cmp	fp, r3
 8011b62:	d12e      	bne.n	8011bc2 <_ZN8touchgfx6Canvas6renderEv+0x2d2>
                    if (scanline.isReady(y))
                    {
                        r.render(scanline);
                        scanline.resetSpans();
                    }
                    scanline.addSpan(x, y, curCell->x - x, alpha);
 8011b64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011b68:	9400      	str	r4, [sp, #0]
 8011b6a:	9904      	ldr	r1, [sp, #16]
 8011b6c:	1a5b      	subs	r3, r3, r1
 8011b6e:	465a      	mov	r2, fp
 8011b70:	9805      	ldr	r0, [sp, #20]
 8011b72:	f00e f90d 	bl	801fd90 <_ZN8touchgfx8Scanline7addSpanEiijj>
        cover = 0;
 8011b76:	462b      	mov	r3, r5
     *
     * @return The packed coordinates with y in the high part and x in the low part.
     */
    int packedCoord() const
    {
        return (y << 16) + x;
 8011b78:	f9b7 b002 	ldrsh.w	fp, [r7, #2]
 8011b7c:	f9b7 6000 	ldrsh.w	r6, [r7]
 8011b80:	9604      	str	r6, [sp, #16]
 8011b82:	eb06 400b 	add.w	r0, r6, fp, lsl #16
            area = startCell->area;
 8011b86:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
            cover += startCell->cover;
 8011b8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011b8e:	4492      	add	sl, r2
            while (numCells-- > 0)
 8011b90:	1e5d      	subs	r5, r3, #1
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f43f af0e 	beq.w	80119b4 <_ZN8touchgfx6Canvas6renderEv+0xc4>
                curCell = cells++;
 8011b98:	f108 0108 	add.w	r1, r8, #8
 8011b9c:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8011ba0:	f9b8 3000 	ldrsh.w	r3, [r8]
 8011ba4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
                if (curCell->packedCoord() != coord)
 8011ba8:	4298      	cmp	r0, r3
 8011baa:	f47f af01 	bne.w	80119b0 <_ZN8touchgfx6Canvas6renderEv+0xc0>
                area += curCell->area;
 8011bae:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8011bb2:	441c      	add	r4, r3
                cover += curCell->cover;
 8011bb4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8011bb8:	449a      	add	sl, r3
            while (numCells-- > 0)
 8011bba:	462b      	mov	r3, r5
                curCell = cells++;
 8011bbc:	4647      	mov	r7, r8
 8011bbe:	4688      	mov	r8, r1
 8011bc0:	e7e6      	b.n	8011b90 <_ZN8touchgfx6Canvas6renderEv+0x2a0>
        return lastY;
 8011bc2:	9e05      	ldr	r6, [sp, #20]
 8011bc4:	68b0      	ldr	r0, [r6, #8]
        if (scanline.getY() < 0 || scanline.getY() >= int(renderingBuffer->getHeight()))
 8011bc6:	2800      	cmp	r0, #0
 8011bc8:	db43      	blt.n	8011c52 <_ZN8touchgfx6Canvas6renderEv+0x362>
 8011bca:	9b10      	ldr	r3, [sp, #64]	; 0x40
        return height;
 8011bcc:	68da      	ldr	r2, [r3, #12]
 8011bce:	4290      	cmp	r0, r2
 8011bd0:	da3f      	bge.n	8011c52 <_ZN8touchgfx6Canvas6renderEv+0x362>
        return numSpans;
 8011bd2:	68f6      	ldr	r6, [r6, #12]
        return buf + stride * y;
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	9207      	str	r2, [sp, #28]
 8011bd8:	6919      	ldr	r1, [r3, #16]
 8011bda:	9a07      	ldr	r2, [sp, #28]
 8011bdc:	fb01 2100 	mla	r1, r1, r0, r2
 8011be0:	9107      	str	r1, [sp, #28]
            covers(scanline.covers),
 8011be2:	9a05      	ldr	r2, [sp, #20]
 8011be4:	6991      	ldr	r1, [r2, #24]
 8011be6:	468c      	mov	ip, r1
            curCount(scanline.counts),
 8011be8:	4611      	mov	r1, r2
 8011bea:	6a12      	ldr	r2, [r2, #32]
            curStartIndex(scanline.startIndices)
 8011bec:	920e      	str	r2, [sp, #56]	; 0x38
 8011bee:	69ca      	ldr	r2, [r1, #28]
 8011bf0:	920f      	str	r2, [sp, #60]	; 0x3c
        return xAdjust;
 8011bf2:	791b      	ldrb	r3, [r3, #4]
 8011bf4:	9308      	str	r3, [sp, #32]
 8011bf6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011bfa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011bfe:	950b      	str	r5, [sp, #44]	; 0x2c
 8011c00:	46a3      	mov	fp, r4
 8011c02:	4604      	mov	r4, r0
 8011c04:	46e1      	mov	r9, ip
 8011c06:	e00b      	b.n	8011c20 <_ZN8touchgfx6Canvas6renderEv+0x330>
            painter->render(row, x, xAdjust, y, numPix, covers);
 8011c08:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011c0a:	6801      	ldr	r1, [r0, #0]
 8011c0c:	688d      	ldr	r5, [r1, #8]
 8011c0e:	f8cd c008 	str.w	ip, [sp, #8]
 8011c12:	9301      	str	r3, [sp, #4]
 8011c14:	9400      	str	r4, [sp, #0]
 8011c16:	9b08      	ldr	r3, [sp, #32]
 8011c18:	9907      	ldr	r1, [sp, #28]
 8011c1a:	47a8      	blx	r5
        while (--numSpans);
 8011c1c:	3e01      	subs	r6, #1
 8011c1e:	d012      	beq.n	8011c46 <_ZN8touchgfx6Canvas6renderEv+0x356>
            ++curCount;
 8011c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c22:	1c9a      	adds	r2, r3, #2
 8011c24:	920e      	str	r2, [sp, #56]	; 0x38
            ++curStartIndex;
 8011c26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c28:	1c91      	adds	r1, r2, #2
 8011c2a:	910f      	str	r1, [sp, #60]	; 0x3c
            return int(*curStartIndex);
 8011c2c:	8852      	ldrh	r2, [r2, #2]
            return covers + *curStartIndex;
 8011c2e:	eb09 0c02 	add.w	ip, r9, r2
            return int(*curCount);
 8011c32:	885b      	ldrh	r3, [r3, #2]
            if (x + numPix >= int(renderingBuffer->getWidth()))
 8011c34:	18d0      	adds	r0, r2, r3
 8011c36:	9910      	ldr	r1, [sp, #64]	; 0x40
        return width;
 8011c38:	6889      	ldr	r1, [r1, #8]
 8011c3a:	4288      	cmp	r0, r1
 8011c3c:	dbe4      	blt.n	8011c08 <_ZN8touchgfx6Canvas6renderEv+0x318>
                numPix = renderingBuffer->getWidth() - x;
 8011c3e:	1a8b      	subs	r3, r1, r2
                if (numPix <= 0)
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	dce1      	bgt.n	8011c08 <_ZN8touchgfx6Canvas6renderEv+0x318>
 8011c44:	e7ea      	b.n	8011c1c <_ZN8touchgfx6Canvas6renderEv+0x32c>
 8011c46:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011c4a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011c4c:	465c      	mov	r4, fp
 8011c4e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    lastX = 0x7FFF;
 8011c52:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011c56:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
    lastY = 0x7FFF;
 8011c5a:	f8c9 3050 	str.w	r3, [r9, #80]	; 0x50
    curCount = counts;
 8011c5e:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 8011c62:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
    curStartIndex = startIndices;
 8011c66:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8011c6a:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
    numSpans = 0;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
 8011c74:	e776      	b.n	8011b64 <_ZN8touchgfx6Canvas6renderEv+0x274>
 8011c76:	f8dd b018 	ldr.w	fp, [sp, #24]
        return numSpans;
 8011c7a:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
                }
            }
        }

        if (scanline.getNumSpans())
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f43f ae86 	beq.w	8011990 <_ZN8touchgfx6Canvas6renderEv+0xa0>
        return lastY;
 8011c84:	9905      	ldr	r1, [sp, #20]
 8011c86:	688d      	ldr	r5, [r1, #8]
        if (scanline.getY() < 0 || scanline.getY() >= int(renderingBuffer->getHeight()))
 8011c88:	2d00      	cmp	r5, #0
 8011c8a:	f6ff ae81 	blt.w	8011990 <_ZN8touchgfx6Canvas6renderEv+0xa0>
 8011c8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
        return height;
 8011c90:	68da      	ldr	r2, [r3, #12]
 8011c92:	4295      	cmp	r5, r2
 8011c94:	f6bf ae7c 	bge.w	8011990 <_ZN8touchgfx6Canvas6renderEv+0xa0>
        return numSpans;
 8011c98:	68cc      	ldr	r4, [r1, #12]
        return buf + stride * y;
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	691f      	ldr	r7, [r3, #16]
 8011c9e:	fb07 2705 	mla	r7, r7, r5, r2
            covers(scanline.covers),
 8011ca2:	f8d1 8018 	ldr.w	r8, [r1, #24]
            curCount(scanline.counts),
 8011ca6:	6a0a      	ldr	r2, [r1, #32]
            curStartIndex(scanline.startIndices)
 8011ca8:	920e      	str	r2, [sp, #56]	; 0x38
 8011caa:	69ca      	ldr	r2, [r1, #28]
 8011cac:	920f      	str	r2, [sp, #60]	; 0x3c
        return xAdjust;
 8011cae:	f893 9004 	ldrb.w	r9, [r3, #4]
 8011cb2:	e00c      	b.n	8011cce <_ZN8touchgfx6Canvas6renderEv+0x3de>
            painter->render(row, x, xAdjust, y, numPix, covers);
 8011cb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011cb6:	6801      	ldr	r1, [r0, #0]
 8011cb8:	688e      	ldr	r6, [r1, #8]
 8011cba:	f8cd c008 	str.w	ip, [sp, #8]
 8011cbe:	9301      	str	r3, [sp, #4]
 8011cc0:	9500      	str	r5, [sp, #0]
 8011cc2:	464b      	mov	r3, r9
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	47b0      	blx	r6
        while (--numSpans);
 8011cc8:	3c01      	subs	r4, #1
 8011cca:	f43f ae61 	beq.w	8011990 <_ZN8touchgfx6Canvas6renderEv+0xa0>
            ++curCount;
 8011cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cd0:	1c9a      	adds	r2, r3, #2
 8011cd2:	920e      	str	r2, [sp, #56]	; 0x38
            ++curStartIndex;
 8011cd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011cd6:	1c91      	adds	r1, r2, #2
 8011cd8:	910f      	str	r1, [sp, #60]	; 0x3c
            return int(*curStartIndex);
 8011cda:	8852      	ldrh	r2, [r2, #2]
            return covers + *curStartIndex;
 8011cdc:	eb08 0c02 	add.w	ip, r8, r2
            return int(*curCount);
 8011ce0:	885b      	ldrh	r3, [r3, #2]
            if (x + numPix >= int(renderingBuffer->getWidth()))
 8011ce2:	18d0      	adds	r0, r2, r3
 8011ce4:	9910      	ldr	r1, [sp, #64]	; 0x40
        return width;
 8011ce6:	6889      	ldr	r1, [r1, #8]
 8011ce8:	4288      	cmp	r0, r1
 8011cea:	dbe3      	blt.n	8011cb4 <_ZN8touchgfx6Canvas6renderEv+0x3c4>
                numPix = renderingBuffer->getWidth() - x;
 8011cec:	1a8b      	subs	r3, r1, r2
                if (numPix <= 0)
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	dce0      	bgt.n	8011cb4 <_ZN8touchgfx6Canvas6renderEv+0x3c4>
 8011cf2:	e7e9      	b.n	8011cc8 <_ZN8touchgfx6Canvas6renderEv+0x3d8>
        return true; // Redrawing a rect with fewer scanlines will not help, fake "ok" to move on
 8011cf4:	2301      	movs	r3, #1
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	4770      	bx	lr
        return false; // Try again with fewer scanlines
 8011cfa:	2300      	movs	r3, #0
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	b013      	add	sp, #76	; 0x4c
 8011d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d04 <_ZN8touchgfx6CanvasD1Ev>:
Canvas::~Canvas()
 8011d04:	b538      	push	{r3, r4, r5, lr}
 8011d06:	4604      	mov	r4, r0
 8011d08:	4605      	mov	r5, r0
 8011d0a:	4b08      	ldr	r3, [pc, #32]	; (8011d2c <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8011d0c:	f845 3b2c 	str.w	r3, [r5], #44
        return instance;
 8011d10:	4b07      	ldr	r3, [pc, #28]	; (8011d30 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8011d12:	6818      	ldr	r0, [r3, #0]
    HAL::getInstance()->unlockFrameBuffer(); //lint !e1551
 8011d14:	6803      	ldr	r3, [r0, #0]
 8011d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d18:	4798      	blx	r3
class Rasterizer
 8011d1a:	4628      	mov	r0, r5
 8011d1c:	f00c ff46 	bl	801ebac <_ZN8touchgfx7OutlineD1Ev>
Canvas::~Canvas()
 8011d20:	f104 0018 	add.w	r0, r4, #24
 8011d24:	f00e f873 	bl	801fe0e <_ZN8touchgfx15RenderingBufferD1Ev>
}
 8011d28:	4620      	mov	r0, r4
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}
 8011d2c:	080273bc 	.word	0x080273bc
 8011d30:	2000bb14 	.word	0x2000bb14

08011d34 <_ZN8touchgfx6CanvasD0Ev>:
Canvas::~Canvas()
 8011d34:	b510      	push	{r4, lr}
 8011d36:	4604      	mov	r4, r0
}
 8011d38:	f7ff ffe4 	bl	8011d04 <_ZN8touchgfx6CanvasD1Ev>
 8011d3c:	21b8      	movs	r1, #184	; 0xb8
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f013 fa48 	bl	80251d4 <_ZdlPvj>
 8011d44:	4620      	mov	r0, r4
 8011d46:	bd10      	pop	{r4, pc}

08011d48 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
{
}

void CanvasWidget::setPainter(AbstractPainter& painter)
{
    canvasPainter = &painter;
 8011d48:	6281      	str	r1, [r0, #40]	; 0x28
}
 8011d4a:	4770      	bx	lr

08011d4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
    assert(canvasPainter != 0 && "No painter set");
    return *canvasPainter; //lint !e613
} //lint !e1763

void CanvasWidget::draw(const Rect& invalidatedArea) const
{
 8011d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d50:	b089      	sub	sp, #36	; 0x24
 8011d52:	4604      	mov	r4, r0
    Rect area = invalidatedArea;
 8011d54:	ab06      	add	r3, sp, #24
 8011d56:	6808      	ldr	r0, [r1, #0]
 8011d58:	6849      	ldr	r1, [r1, #4]
 8011d5a:	c303      	stmia	r3!, {r0, r1}
    int16_t* width;
    int16_t* height;

    int16_t wantedRenderLines;

    switch (HAL::DISPLAY_ROTATION)
 8011d5c:	4b48      	ldr	r3, [pc, #288]	; (8011e80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x134>)
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d00d      	beq.n	8011d80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x34>
    default:
    case rotate0:
        offset = &area.y;
        lines = &area.height;
        width = &area.width;
        height = &wantedRenderLines;
 8011d64:	f10d 0616 	add.w	r6, sp, #22
        width = &area.width;
 8011d68:	ad07      	add	r5, sp, #28
        lines = &area.height;
 8011d6a:	f10d 081e 	add.w	r8, sp, #30
        offset = &area.y;
 8011d6e:	f10d 091a 	add.w	r9, sp, #26
        width = &wantedRenderLines;
        height = &area.height;
        break;
    }

    Rect minimalRect = getMinimalRect();
 8011d72:	6823      	ldr	r3, [r4, #0]
 8011d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d76:	4621      	mov	r1, r4
 8011d78:	a803      	add	r0, sp, #12
 8011d7a:	4798      	blx	r3

    bool failedAtLeastOnce = false;
 8011d7c:	2700      	movs	r7, #0
 8011d7e:	e01d      	b.n	8011dbc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x70>
        height = &area.height;
 8011d80:	f10d 061e 	add.w	r6, sp, #30
        width = &wantedRenderLines;
 8011d84:	f10d 0516 	add.w	r5, sp, #22
        lines = &area.width;
 8011d88:	f10d 081c 	add.w	r8, sp, #28
        offset = &area.x;
 8011d8c:	f10d 0918 	add.w	r9, sp, #24
 8011d90:	e7ef      	b.n	8011d72 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x26>
            }
#endif
            wantedRenderLines >>= 1;
            failedAtLeastOnce = true;
        }
        if (wantedRenderLines == 0)
 8011d92:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d15c      	bne.n	8011e54 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x108>
        {
            // We did not manage to draw anything. Set wantedHeight to
            // one to skip a single raster line and try to render the
            // rest of the CanvasWidget.
            wantedRenderLines = 1;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	f8ad 3016 	strh.w	r3, [sp, #22]
            {
                // Only adjust maxRenderLines if it is the first draw for the CanvasWidget
                maxRenderLines = wantedRenderLines;
            }
        }
        *offset += wantedRenderLines;
 8011da0:	f8b9 3000 	ldrh.w	r3, [r9]
 8011da4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011da8:	4413      	add	r3, r2
 8011daa:	f8a9 3000 	strh.w	r3, [r9]
        *lines -= wantedRenderLines;
 8011dae:	f8b8 3000 	ldrh.w	r3, [r8]
 8011db2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011db6:	1a9b      	subs	r3, r3, r2
 8011db8:	f8a8 3000 	strh.w	r3, [r8]
    while (*lines)
 8011dbc:	f9b8 3000 	ldrsh.w	r3, [r8]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d051      	beq.n	8011e68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x11c>
        wantedRenderLines = MIN(maxRenderLines, *lines);
 8011dc4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8011dc8:	4293      	cmp	r3, r2
 8011dca:	dd00      	ble.n	8011dce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x82>
 8011dcc:	4613      	mov	r3, r2
 8011dce:	f8ad 3016 	strh.w	r3, [sp, #22]
        while (wantedRenderLines > 0)
 8011dd2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	dddb      	ble.n	8011d92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
            Rect smallArea(area.x, area.y, *width, *height);
 8011dda:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011dde:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8011de2:	f9b5 e000 	ldrsh.w	lr, [r5]
 8011de6:	f9b6 0000 	ldrsh.w	r0, [r6]
        this->x = x;
 8011dea:	f8ad 3004 	strh.w	r3, [sp, #4]
        this->y = y;
 8011dee:	f8ad 2006 	strh.w	r2, [sp, #6]
        this->width = width;
 8011df2:	f8ad e008 	strh.w	lr, [sp, #8]
        this->height = height;
 8011df6:	f8ad 000a 	strh.w	r0, [sp, #10]
        return x + width;
 8011dfa:	f9bd c00c 	ldrsh.w	ip, [sp, #12]
 8011dfe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8011e02:	fa11 f18c 	uxtah	r1, r1, ip
 8011e06:	b209      	sxth	r1, r1
        return !(x >= other.right() || right() <= other.x ||
 8011e08:	428b      	cmp	r3, r1
 8011e0a:	dac2      	bge.n	8011d92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
        return x + width;
 8011e0c:	fa1f fe8e 	uxth.w	lr, lr
 8011e10:	fa1e f383 	uxtah	r3, lr, r3
 8011e14:	b21b      	sxth	r3, r3
        return !(x >= other.right() || right() <= other.x ||
 8011e16:	459c      	cmp	ip, r3
 8011e18:	dabb      	bge.n	8011d92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
        return y + height;
 8011e1a:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8011e1e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011e22:	fa13 f381 	uxtah	r3, r3, r1
 8011e26:	b21b      	sxth	r3, r3
        return !(x >= other.right() || right() <= other.x ||
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	dab2      	bge.n	8011d92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
        return y + height;
 8011e2c:	b280      	uxth	r0, r0
 8011e2e:	fa10 f282 	uxtah	r2, r0, r2
 8011e32:	b212      	sxth	r2, r2
        return !(x >= other.right() || right() <= other.x ||
 8011e34:	4291      	cmp	r1, r2
 8011e36:	daac      	bge.n	8011d92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
            if (drawCanvasWidget(smallArea))
 8011e38:	6823      	ldr	r3, [r4, #0]
 8011e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e3c:	a901      	add	r1, sp, #4
 8011e3e:	4620      	mov	r0, r4
 8011e40:	4798      	blx	r3
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d1a5      	bne.n	8011d92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x46>
            wantedRenderLines >>= 1;
 8011e46:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011e4a:	105b      	asrs	r3, r3, #1
 8011e4c:	f8ad 3016 	strh.w	r3, [sp, #22]
            failedAtLeastOnce = true;
 8011e50:	2701      	movs	r7, #1
        while (wantedRenderLines > 0)
 8011e52:	e7be      	b.n	8011dd2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x86>
            if (failedAtLeastOnce && maxRenderLines == 0x7FFF)
 8011e54:	2f00      	cmp	r7, #0
 8011e56:	d0a3      	beq.n	8011da0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8011e58:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
 8011e5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e60:	4291      	cmp	r1, r2
 8011e62:	d19d      	bne.n	8011da0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
                maxRenderLines = wantedRenderLines;
 8011e64:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8011e66:	e79b      	b.n	8011da0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
    }
    if (maxRenderLines == 0x7FFF)
 8011e68:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8011e6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d002      	beq.n	8011e7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x12e>
    {
        maxRenderLines--;    // 0x7FFF means first draw
    }
}
 8011e74:	b009      	add	sp, #36	; 0x24
 8011e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxRenderLines--;    // 0x7FFF means first draw
 8011e7a:	3b01      	subs	r3, #1
 8011e7c:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
 8011e7e:	e7f9      	b.n	8011e74 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x128>
 8011e80:	2000bb0a 	.word	0x2000bb0a

08011e84 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
    minimalRect.intersect(CanvasWidget::getMinimalRect());
    invalidateRect(minimalRect);
}

Rect CanvasWidget::getMinimalRect() const
{
 8011e84:	b410      	push	{r4}
 8011e86:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8011e8a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
        this->x = x;
 8011e8e:	2200      	movs	r2, #0
 8011e90:	8002      	strh	r2, [r0, #0]
        this->y = y;
 8011e92:	8042      	strh	r2, [r0, #2]
        this->width = width;
 8011e94:	8084      	strh	r4, [r0, #4]
        this->height = height;
 8011e96:	80c1      	strh	r1, [r0, #6]
    return Rect(0, 0, getWidth(), getHeight());
}
 8011e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e9c:	4770      	bx	lr

08011e9e <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
{
 8011e9e:	b510      	push	{r4, lr}
 8011ea0:	b084      	sub	sp, #16
 8011ea2:	4604      	mov	r4, r0
    Rect minimalRect = getMinimalRect();
 8011ea4:	6803      	ldr	r3, [r0, #0]
 8011ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ea8:	4601      	mov	r1, r0
 8011eaa:	4668      	mov	r0, sp
 8011eac:	4798      	blx	r3
    minimalRect.intersect(CanvasWidget::getMinimalRect());
 8011eae:	4621      	mov	r1, r4
 8011eb0:	a802      	add	r0, sp, #8
 8011eb2:	f7ff ffe7 	bl	8011e84 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>
    invalidateRect(minimalRect);
 8011eb6:	6823      	ldr	r3, [r4, #0]
 8011eb8:	691b      	ldr	r3, [r3, #16]
 8011eba:	4669      	mov	r1, sp
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	4798      	blx	r3
}
 8011ec0:	b004      	add	sp, #16
 8011ec2:	bd10      	pop	{r4, pc}

08011ec4 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        this->x = x;
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	8002      	strh	r2, [r0, #0]
        this->y = y;
 8011ec8:	8042      	strh	r2, [r0, #2]
        this->width = width;
 8011eca:	8082      	strh	r2, [r0, #4]
        this->height = height;
 8011ecc:	80c2      	strh	r2, [r0, #6]

Rect CanvasWidget::getSolidRect() const
{
    return Rect(0, 0, 0, 0);
}
 8011ece:	4770      	bx	lr

08011ed0 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
    assert(canvasPainter != 0 && "No painter set");
 8011ed0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011ed2:	b100      	cbz	r0, 8011ed6 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x6>
} //lint !e1763
 8011ed4:	4770      	bx	lr
{
 8011ed6:	b508      	push	{r3, lr}
    assert(canvasPainter != 0 && "No painter set");
 8011ed8:	4b02      	ldr	r3, [pc, #8]	; (8011ee4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8011eda:	4a03      	ldr	r2, [pc, #12]	; (8011ee8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8011edc:	2128      	movs	r1, #40	; 0x28
 8011ede:	4803      	ldr	r0, [pc, #12]	; (8011eec <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8011ee0:	f013 f994 	bl	802520c <__assert_func>
 8011ee4:	08027414 	.word	0x08027414
 8011ee8:	08027520 	.word	0x08027520
 8011eec:	0802743c 	.word	0x0802743c

08011ef0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
        this->x = x;
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	8082      	strh	r2, [r0, #4]
        this->y = y;
 8011ef4:	80c2      	strh	r2, [r0, #6]
        this->width = width;
 8011ef6:	8102      	strh	r2, [r0, #8]
        this->height = height;
 8011ef8:	8142      	strh	r2, [r0, #10]
        this->x = 0;
 8011efa:	8182      	strh	r2, [r0, #12]
        this->y = 0;
 8011efc:	81c2      	strh	r2, [r0, #14]
        this->width = 0;
 8011efe:	8202      	strh	r2, [r0, #16]
        this->height = 0;
 8011f00:	8242      	strh	r2, [r0, #18]
        visible(true)
 8011f02:	6142      	str	r2, [r0, #20]
 8011f04:	6182      	str	r2, [r0, #24]
 8011f06:	61c2      	str	r2, [r0, #28]
 8011f08:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8011f0c:	2101      	movs	r1, #1
 8011f0e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    alpha(255)
 8011f12:	4905      	ldr	r1, [pc, #20]	; (8011f28 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8011f14:	6001      	str	r1, [r0, #0]
 8011f16:	6282      	str	r2, [r0, #40]	; 0x28
 8011f18:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011f1c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8011f1e:	22ff      	movs	r2, #255	; 0xff
 8011f20:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
}
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	080274a4 	.word	0x080274a4

08011f2c <_ZN8touchgfx12CanvasWidgetD1Ev>:
}
 8011f2c:	4770      	bx	lr
	...

08011f30 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 8011f30:	b510      	push	{r4, lr}
 8011f32:	4604      	mov	r4, r0
 8011f34:	4b02      	ldr	r3, [pc, #8]	; (8011f40 <_ZN8touchgfx6CircleD1Ev+0x10>)
 8011f36:	6003      	str	r3, [r0, #0]
 8011f38:	f7ff fff8 	bl	8011f2c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	bd10      	pop	{r4, pc}
 8011f40:	08027578 	.word	0x08027578

08011f44 <_ZN8touchgfx6CircleD0Ev>:
 8011f44:	b510      	push	{r4, lr}
 8011f46:	4604      	mov	r4, r0
 8011f48:	4b04      	ldr	r3, [pc, #16]	; (8011f5c <_ZN8touchgfx6CircleD0Ev+0x18>)
 8011f4a:	6003      	str	r3, [r0, #0]
 8011f4c:	f7ff ffee 	bl	8011f2c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011f50:	214c      	movs	r1, #76	; 0x4c
 8011f52:	4620      	mov	r0, r4
 8011f54:	f013 f93e 	bl	80251d4 <_ZdlPvj>
 8011f58:	4620      	mov	r0, r4
 8011f5a:	bd10      	pop	{r4, pc}
 8011f5c:	08027578 	.word	0x08027578

08011f60 <_ZN8touchgfx6CircleC1Ev>:

#include <touchgfx/widgets/canvas/Circle.hpp>

namespace touchgfx
{
Circle::Circle() : CanvasWidget(),
 8011f60:	b510      	push	{r4, lr}
 8011f62:	4604      	mov	r4, r0
    circleCenterX(0), circleCenterY(0), circleRadius(0),
    circleArcAngleStart(CWRUtil::toQ5<int>(0)), circleArcAngleEnd(CWRUtil::toQ5<int>(360)),
    circleLineWidth(0), circleArcIncrement(5),
    circleCapArcIncrement(180)
 8011f64:	f7ff ffc4 	bl	8011ef0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8011f68:	4b0a      	ldr	r3, [pc, #40]	; (8011f94 <_ZN8touchgfx6CircleC1Ev+0x34>)
 8011f6a:	6023      	str	r3, [r4, #0]
        explicit Q5(int i) : v(i) { }
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8011f70:	6363      	str	r3, [r4, #52]	; 0x34
 8011f72:	63a3      	str	r3, [r4, #56]	; 0x38
 8011f74:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011f76:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8011f7a:	6422      	str	r2, [r4, #64]	; 0x40
 8011f7c:	6463      	str	r3, [r4, #68]	; 0x44
 8011f7e:	2205      	movs	r2, #5
 8011f80:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 8011f84:	22b4      	movs	r2, #180	; 0xb4
 8011f86:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
        rect.width = width;
 8011f8a:	8123      	strh	r3, [r4, #8]
        rect.height = height;
 8011f8c:	8163      	strh	r3, [r4, #10]
{
    Drawable::setWidth(0);
    Drawable::setHeight(0);
}
 8011f8e:	4620      	mov	r0, r4
 8011f90:	bd10      	pop	{r4, pc}
 8011f92:	bf00      	nop
 8011f94:	08027578 	.word	0x08027578

08011f98 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
    return circleArcIncrement;
}

void Circle::setCapPrecision(int precision)
{
    if (precision < 1)
 8011f98:	2900      	cmp	r1, #0
 8011f9a:	dd05      	ble.n	8011fa8 <_ZN8touchgfx6Circle15setCapPrecisionEi+0x10>
    {
        precision = 1;
    }
    if (precision > 180)
 8011f9c:	29b4      	cmp	r1, #180	; 0xb4
 8011f9e:	dd00      	ble.n	8011fa2 <_ZN8touchgfx6Circle15setCapPrecisionEi+0xa>
    {
        precision = 180;
 8011fa0:	21b4      	movs	r1, #180	; 0xb4
    }
    circleCapArcIncrement = precision;
 8011fa2:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
}
 8011fa6:	4770      	bx	lr
        precision = 1;
 8011fa8:	2101      	movs	r1, #1
 8011faa:	e7fa      	b.n	8011fa2 <_ZN8touchgfx6Circle15setCapPrecisionEi+0xa>

08011fac <_ZNK8touchgfx6Circle15getCapPrecisionEv>:

int Circle::getCapPrecision() const
{
    return circleCapArcIncrement;
}
 8011fac:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8011fb0:	4770      	bx	lr
	...

08011fb4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
    return Rect(xMin.to<int>() - 1, yMin.to<int>() - 1,
                xMax.to<int>() - xMin.to<int>() + 2, yMax.to<int>() - yMin.to<int>() + 2);
}

void Circle::moveToAR2(Canvas& canvas, const CWRUtil::Q5& angle, const CWRUtil::Q5& r2) const
{
 8011fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fb8:	b083      	sub	sp, #12
 8011fba:	4604      	mov	r4, r0
 8011fbc:	460e      	mov	r6, r1
 8011fbe:	4690      	mov	r8, r2
 8011fc0:	461d      	mov	r5, r3
 8011fc2:	6812      	ldr	r2, [r2, #0]
     * @return the value of sin(i) with 15 bits precision on the fractional part.
     */
    static Q15 sine(Q5 i)
    {
        Q5 _360 = toQ5<int>(360);
        i = Q5(((i % _360) + _360) % _360);
 8011fc4:	48a7      	ldr	r0, [pc, #668]	; (8012264 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 8011fc6:	fb80 1302 	smull	r1, r3, r0, r2
 8011fca:	1899      	adds	r1, r3, r2
 8011fcc:	17d3      	asrs	r3, r2, #31
 8011fce:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8011fd2:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8011fd6:	fb01 2313 	mls	r3, r1, r3, r2
 8011fda:	440b      	add	r3, r1
 8011fdc:	fb80 2003 	smull	r2, r0, r0, r3
 8011fe0:	18c2      	adds	r2, r0, r3
 8011fe2:	17d8      	asrs	r0, r3, #31
 8011fe4:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8011fe8:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8011fec:	4243      	negs	r3, r0
 8011fee:	f000 011f 	and.w	r1, r0, #31
 8011ff2:	f003 031f 	and.w	r3, r3, #31
 8011ff6:	bf58      	it	pl
 8011ff8:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	db23      	blt.n	8012048 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x94>
 8012000:	1157      	asrs	r7, r2, #5
        i = ((i % 360) + 360) % 360;
 8012002:	4898      	ldr	r0, [pc, #608]	; (8012264 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 8012004:	fb80 c307 	smull	ip, r3, r0, r7
 8012008:	eb03 0c07 	add.w	ip, r3, r7
 801200c:	17d3      	asrs	r3, r2, #31
 801200e:	ebc3 232c 	rsb	r3, r3, ip, asr #8
 8012012:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8012016:	fb0c 7313 	mls	r3, ip, r3, r7
 801201a:	4463      	add	r3, ip
 801201c:	fb80 2003 	smull	r2, r0, r0, r3
 8012020:	4418      	add	r0, r3
 8012022:	17da      	asrs	r2, r3, #31
 8012024:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012028:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 801202c:	2a5a      	cmp	r2, #90	; 0x5a
 801202e:	dd0e      	ble.n	801204e <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x9a>
        if (i <= 180)
 8012030:	2ab4      	cmp	r2, #180	; 0xb4
 8012032:	dd66      	ble.n	8012102 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x14e>
        if (i <= 270)
 8012034:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012038:	dd69      	ble.n	801210e <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x15a>
        return Q15(-int32_t(sineTable[360 - i]));
 801203a:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801203e:	4b8a      	ldr	r3, [pc, #552]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012040:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012044:	4240      	negs	r0, r0
 8012046:	e005      	b.n	8012054 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xa0>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012048:	f100 021f 	add.w	r2, r0, #31
 801204c:	e7d8      	b.n	8012000 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x4c>
            return Q15(sineTable[i]);
 801204e:	4b86      	ldr	r3, [pc, #536]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012050:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012054:	4681      	mov	r9, r0
        Q15 sineLow = sine(i.to<int>());
        if (fraction == 0)
 8012056:	2900      	cmp	r1, #0
 8012058:	d15f      	bne.n	801211a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x166>
        {
            return sineLow;
 801205a:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 801205c:	ab01      	add	r3, sp, #4
 801205e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012062:	6828      	ldr	r0, [r5, #0]
 8012064:	f00f fc7b 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 8012068:	2800      	cmp	r0, #0
 801206a:	f2c0 8091 	blt.w	8012190 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1dc>
            return Q5(v + q5.v);
 801206e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8012070:	eb07 0760 	add.w	r7, r7, r0, asr #1
 8012074:	f8d8 2000 	ldr.w	r2, [r8]
            return Q5(v - q5.v);
 8012078:	f5c2 6234 	rsb	r2, r2, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 801207c:	4879      	ldr	r0, [pc, #484]	; (8012264 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 801207e:	fb80 1302 	smull	r1, r3, r0, r2
 8012082:	1899      	adds	r1, r3, r2
 8012084:	17d3      	asrs	r3, r2, #31
 8012086:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 801208a:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 801208e:	fb01 2313 	mls	r3, r1, r3, r2
 8012092:	440b      	add	r3, r1
 8012094:	fb80 2003 	smull	r2, r0, r0, r3
 8012098:	18c2      	adds	r2, r0, r3
 801209a:	17d8      	asrs	r0, r3, #31
 801209c:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 80120a0:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80120a4:	4243      	negs	r3, r0
 80120a6:	f000 011f 	and.w	r1, r0, #31
 80120aa:	f003 031f 	and.w	r3, r3, #31
 80120ae:	bf58      	it	pl
 80120b0:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80120b2:	4602      	mov	r2, r0
 80120b4:	2800      	cmp	r0, #0
 80120b6:	db6d      	blt.n	8012194 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1e0>
 80120b8:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 80120bc:	4869      	ldr	r0, [pc, #420]	; (8012264 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 80120be:	fb80 e30c 	smull	lr, r3, r0, ip
 80120c2:	eb03 0e0c 	add.w	lr, r3, ip
 80120c6:	17d3      	asrs	r3, r2, #31
 80120c8:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 80120cc:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 80120d0:	fb0e c313 	mls	r3, lr, r3, ip
 80120d4:	4473      	add	r3, lr
 80120d6:	fb80 2003 	smull	r2, r0, r0, r3
 80120da:	4418      	add	r0, r3
 80120dc:	17da      	asrs	r2, r3, #31
 80120de:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80120e2:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 80120e6:	2a5a      	cmp	r2, #90	; 0x5a
 80120e8:	dd57      	ble.n	801219a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1e6>
        if (i <= 180)
 80120ea:	2ab4      	cmp	r2, #180	; 0xb4
 80120ec:	dd6d      	ble.n	80121ca <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x216>
        if (i <= 270)
 80120ee:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80120f2:	dd70      	ble.n	80121d6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x222>
        return Q15(-int32_t(sineTable[360 - i]));
 80120f4:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80120f8:	4b5b      	ldr	r3, [pc, #364]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80120fa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80120fe:	4240      	negs	r0, r0
 8012100:	e04e      	b.n	80121a0 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1ec>
            return Q15(sineTable[180 - i]);
 8012102:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012106:	4b58      	ldr	r3, [pc, #352]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012108:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801210c:	e7a2      	b.n	8012054 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xa0>
            return Q15(-int32_t(sineTable[i - 180]));
 801210e:	3ab4      	subs	r2, #180	; 0xb4
 8012110:	4b55      	ldr	r3, [pc, #340]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012112:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012116:	4240      	negs	r0, r0
 8012118:	e79c      	b.n	8012054 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xa0>
        }
        Q15 sineHigh = sine(i.to<int>() + 1);
 801211a:	3701      	adds	r7, #1
        i = ((i % 360) + 360) % 360;
 801211c:	4a51      	ldr	r2, [pc, #324]	; (8012264 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 801211e:	fb82 0307 	smull	r0, r3, r2, r7
 8012122:	19d8      	adds	r0, r3, r7
 8012124:	17fb      	asrs	r3, r7, #31
 8012126:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 801212a:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 801212e:	fb0c 7313 	mls	r3, ip, r3, r7
 8012132:	4463      	add	r3, ip
 8012134:	fb82 0203 	smull	r0, r2, r2, r3
 8012138:	18d0      	adds	r0, r2, r3
 801213a:	17da      	asrs	r2, r3, #31
 801213c:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012140:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 8012144:	2a5a      	cmp	r2, #90	; 0x5a
 8012146:	dd0b      	ble.n	8012160 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1ac>
        if (i <= 180)
 8012148:	2ab4      	cmp	r2, #180	; 0xb4
 801214a:	dd15      	ble.n	8012178 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1c4>
        if (i <= 270)
 801214c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012150:	dd18      	ble.n	8012184 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1d0>
        return Q15(-int32_t(sineTable[360 - i]));
 8012152:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012156:	4b44      	ldr	r3, [pc, #272]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012158:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801215c:	4240      	negs	r0, r0
 801215e:	e002      	b.n	8012166 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1b2>
            return Q15(sineTable[i]);
 8012160:	4b41      	ldr	r3, [pc, #260]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012162:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        int32_t remainder;
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012166:	ab01      	add	r3, sp, #4
 8012168:	2220      	movs	r2, #32
 801216a:	eba0 0009 	sub.w	r0, r0, r9
 801216e:	f00f fbf6 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012172:	eb09 0100 	add.w	r1, r9, r0
 8012176:	e771      	b.n	801205c <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xa8>
            return Q15(sineTable[180 - i]);
 8012178:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801217c:	4b3a      	ldr	r3, [pc, #232]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 801217e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012182:	e7f0      	b.n	8012166 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1b2>
            return Q15(-int32_t(sineTable[i - 180]));
 8012184:	3ab4      	subs	r2, #180	; 0xb4
 8012186:	4b38      	ldr	r3, [pc, #224]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012188:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801218c:	4240      	negs	r0, r0
 801218e:	e7ea      	b.n	8012166 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1b2>
            return Q5(v / i);
 8012190:	3001      	adds	r0, #1
 8012192:	e76c      	b.n	801206e <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0xba>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012194:	f100 021f 	add.w	r2, r0, #31
 8012198:	e78e      	b.n	80120b8 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x104>
            return Q15(sineTable[i]);
 801219a:	4b33      	ldr	r3, [pc, #204]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 801219c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80121a0:	4680      	mov	r8, r0
        if (fraction == 0)
 80121a2:	b9f1      	cbnz	r1, 80121e2 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x22e>
            return sineLow;
 80121a4:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80121a6:	ab01      	add	r3, sp, #4
 80121a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80121ac:	6828      	ldr	r0, [r5, #0]
 80121ae:	f00f fbd6 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 80121b2:	2800      	cmp	r0, #0
 80121b4:	db53      	blt.n	801225e <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2aa>
            return Q5(v - q5.v);
 80121b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    canvas.moveTo(circleCenterX + ((r2 * CWRUtil::sine(angle)) / 2), circleCenterY - ((r2 * CWRUtil::cosine(angle)) / 2));
 80121b8:	eba2 0260 	sub.w	r2, r2, r0, asr #1
 80121bc:	4639      	mov	r1, r7
 80121be:	4630      	mov	r0, r6
 80121c0:	f7ff fb4b 	bl	801185a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
}
 80121c4:	b003      	add	sp, #12
 80121c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return Q15(sineTable[180 - i]);
 80121ca:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80121ce:	4b26      	ldr	r3, [pc, #152]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80121d0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80121d4:	e7e4      	b.n	80121a0 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1ec>
            return Q15(-int32_t(sineTable[i - 180]));
 80121d6:	3ab4      	subs	r2, #180	; 0xb4
 80121d8:	4b23      	ldr	r3, [pc, #140]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 80121da:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80121de:	4240      	negs	r0, r0
 80121e0:	e7de      	b.n	80121a0 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1ec>
        Q15 sineHigh = sine(i.to<int>() + 1);
 80121e2:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 80121e6:	4a1f      	ldr	r2, [pc, #124]	; (8012264 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b0>)
 80121e8:	fb82 030c 	smull	r0, r3, r2, ip
 80121ec:	eb03 000c 	add.w	r0, r3, ip
 80121f0:	ea4f 73ec 	mov.w	r3, ip, asr #31
 80121f4:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80121f8:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 80121fc:	fb0e c313 	mls	r3, lr, r3, ip
 8012200:	4473      	add	r3, lr
 8012202:	fb82 0203 	smull	r0, r2, r2, r3
 8012206:	18d0      	adds	r0, r2, r3
 8012208:	17da      	asrs	r2, r3, #31
 801220a:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 801220e:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8012212:	2a5a      	cmp	r2, #90	; 0x5a
 8012214:	dd0b      	ble.n	801222e <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x27a>
        if (i <= 180)
 8012216:	2ab4      	cmp	r2, #180	; 0xb4
 8012218:	dd15      	ble.n	8012246 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x292>
        if (i <= 270)
 801221a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 801221e:	dd18      	ble.n	8012252 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x29e>
        return Q15(-int32_t(sineTable[360 - i]));
 8012220:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012224:	4b10      	ldr	r3, [pc, #64]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012226:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801222a:	4240      	negs	r0, r0
 801222c:	e002      	b.n	8012234 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x280>
            return Q15(sineTable[i]);
 801222e:	4b0e      	ldr	r3, [pc, #56]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012230:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012234:	ab01      	add	r3, sp, #4
 8012236:	2220      	movs	r2, #32
 8012238:	eba0 0008 	sub.w	r0, r0, r8
 801223c:	f00f fb8f 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012240:	eb08 0100 	add.w	r1, r8, r0
 8012244:	e7af      	b.n	80121a6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x1f2>
            return Q15(sineTable[180 - i]);
 8012246:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801224a:	4b07      	ldr	r3, [pc, #28]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 801224c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012250:	e7f0      	b.n	8012234 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x280>
            return Q15(-int32_t(sineTable[i - 180]));
 8012252:	3ab4      	subs	r2, #180	; 0xb4
 8012254:	4b04      	ldr	r3, [pc, #16]	; (8012268 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x2b4>)
 8012256:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801225a:	4240      	negs	r0, r0
 801225c:	e7ea      	b.n	8012234 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x280>
            return Q5(v / i);
 801225e:	3001      	adds	r0, #1
 8012260:	e7a9      	b.n	80121b6 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_+0x202>
 8012262:	bf00      	nop
 8012264:	b60b60b7 	.word	0xb60b60b7
 8012268:	08027228 	.word	0x08027228

0801226c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
{
    lineToXYAR2(canvas, circleCenterX, circleCenterY, angle, r2);
}

void Circle::lineToXYAR2(Canvas& canvas, const CWRUtil::Q5& x, const CWRUtil::Q5& y, const CWRUtil::Q5& angle, const CWRUtil::Q5& r2) const
{
 801226c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012270:	b082      	sub	sp, #8
 8012272:	460d      	mov	r5, r1
 8012274:	4691      	mov	r9, r2
 8012276:	461e      	mov	r6, r3
 8012278:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801227c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801227e:	f8d8 2000 	ldr.w	r2, [r8]
        i = Q5(((i % _360) + _360) % _360);
 8012282:	48a8      	ldr	r0, [pc, #672]	; (8012524 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 8012284:	fb80 1302 	smull	r1, r3, r0, r2
 8012288:	1899      	adds	r1, r3, r2
 801228a:	17d3      	asrs	r3, r2, #31
 801228c:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8012290:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8012294:	fb01 2313 	mls	r3, r1, r3, r2
 8012298:	440b      	add	r3, r1
 801229a:	fb80 2003 	smull	r2, r0, r0, r3
 801229e:	18c2      	adds	r2, r0, r3
 80122a0:	17d8      	asrs	r0, r3, #31
 80122a2:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 80122a6:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80122aa:	4243      	negs	r3, r0
 80122ac:	f000 011f 	and.w	r1, r0, #31
 80122b0:	f003 031f 	and.w	r3, r3, #31
 80122b4:	bf58      	it	pl
 80122b6:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80122b8:	4602      	mov	r2, r0
 80122ba:	2800      	cmp	r0, #0
 80122bc:	db23      	blt.n	8012306 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x9a>
 80122be:	1157      	asrs	r7, r2, #5
        i = ((i % 360) + 360) % 360;
 80122c0:	4898      	ldr	r0, [pc, #608]	; (8012524 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 80122c2:	fb80 c307 	smull	ip, r3, r0, r7
 80122c6:	eb03 0c07 	add.w	ip, r3, r7
 80122ca:	17d3      	asrs	r3, r2, #31
 80122cc:	ebc3 232c 	rsb	r3, r3, ip, asr #8
 80122d0:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 80122d4:	fb0c 7313 	mls	r3, ip, r3, r7
 80122d8:	4463      	add	r3, ip
 80122da:	fb80 2003 	smull	r2, r0, r0, r3
 80122de:	4418      	add	r0, r3
 80122e0:	17da      	asrs	r2, r3, #31
 80122e2:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80122e6:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 80122ea:	2a5a      	cmp	r2, #90	; 0x5a
 80122ec:	dd0e      	ble.n	801230c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xa0>
        if (i <= 180)
 80122ee:	2ab4      	cmp	r2, #180	; 0xb4
 80122f0:	dd67      	ble.n	80123c2 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x156>
        if (i <= 270)
 80122f2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80122f6:	dd6a      	ble.n	80123ce <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x162>
        return Q15(-int32_t(sineTable[360 - i]));
 80122f8:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80122fc:	4b8a      	ldr	r3, [pc, #552]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80122fe:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012302:	4240      	negs	r0, r0
 8012304:	e005      	b.n	8012312 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xa6>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012306:	f100 021f 	add.w	r2, r0, #31
 801230a:	e7d8      	b.n	80122be <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x52>
            return Q15(sineTable[i]);
 801230c:	4b86      	ldr	r3, [pc, #536]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 801230e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012312:	4682      	mov	sl, r0
        if (fraction == 0)
 8012314:	2900      	cmp	r1, #0
 8012316:	d160      	bne.n	80123da <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x16e>
            return sineLow;
 8012318:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 801231a:	ab01      	add	r3, sp, #4
 801231c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012320:	6820      	ldr	r0, [r4, #0]
 8012322:	f00f fb1c 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 8012326:	2800      	cmp	r0, #0
 8012328:	f2c0 8092 	blt.w	8012450 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1e4>
            return Q5(v + q5.v);
 801232c:	f8d9 7000 	ldr.w	r7, [r9]
 8012330:	eb07 0760 	add.w	r7, r7, r0, asr #1
 8012334:	f8d8 2000 	ldr.w	r2, [r8]
            return Q5(v - q5.v);
 8012338:	f5c2 6234 	rsb	r2, r2, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 801233c:	4879      	ldr	r0, [pc, #484]	; (8012524 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 801233e:	fb80 1302 	smull	r1, r3, r0, r2
 8012342:	1899      	adds	r1, r3, r2
 8012344:	17d3      	asrs	r3, r2, #31
 8012346:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 801234a:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 801234e:	fb01 2313 	mls	r3, r1, r3, r2
 8012352:	440b      	add	r3, r1
 8012354:	fb80 2003 	smull	r2, r0, r0, r3
 8012358:	18c2      	adds	r2, r0, r3
 801235a:	17d8      	asrs	r0, r3, #31
 801235c:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8012360:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8012364:	4243      	negs	r3, r0
 8012366:	f000 011f 	and.w	r1, r0, #31
 801236a:	f003 031f 	and.w	r3, r3, #31
 801236e:	bf58      	it	pl
 8012370:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012372:	4602      	mov	r2, r0
 8012374:	2800      	cmp	r0, #0
 8012376:	db6d      	blt.n	8012454 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1e8>
 8012378:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 801237c:	4869      	ldr	r0, [pc, #420]	; (8012524 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 801237e:	fb80 e30c 	smull	lr, r3, r0, ip
 8012382:	eb03 0e0c 	add.w	lr, r3, ip
 8012386:	17d3      	asrs	r3, r2, #31
 8012388:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 801238c:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8012390:	fb0e c313 	mls	r3, lr, r3, ip
 8012394:	4473      	add	r3, lr
 8012396:	fb80 2003 	smull	r2, r0, r0, r3
 801239a:	4418      	add	r0, r3
 801239c:	17da      	asrs	r2, r3, #31
 801239e:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80123a2:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 80123a6:	2a5a      	cmp	r2, #90	; 0x5a
 80123a8:	dd57      	ble.n	801245a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1ee>
        if (i <= 180)
 80123aa:	2ab4      	cmp	r2, #180	; 0xb4
 80123ac:	dd6d      	ble.n	801248a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x21e>
        if (i <= 270)
 80123ae:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80123b2:	dd70      	ble.n	8012496 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x22a>
        return Q15(-int32_t(sineTable[360 - i]));
 80123b4:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80123b8:	4b5b      	ldr	r3, [pc, #364]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80123ba:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80123be:	4240      	negs	r0, r0
 80123c0:	e04e      	b.n	8012460 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1f4>
            return Q15(sineTable[180 - i]);
 80123c2:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80123c6:	4b58      	ldr	r3, [pc, #352]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80123c8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80123cc:	e7a1      	b.n	8012312 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xa6>
            return Q15(-int32_t(sineTable[i - 180]));
 80123ce:	3ab4      	subs	r2, #180	; 0xb4
 80123d0:	4b55      	ldr	r3, [pc, #340]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80123d2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80123d6:	4240      	negs	r0, r0
 80123d8:	e79b      	b.n	8012312 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xa6>
        Q15 sineHigh = sine(i.to<int>() + 1);
 80123da:	3701      	adds	r7, #1
        i = ((i % 360) + 360) % 360;
 80123dc:	4a51      	ldr	r2, [pc, #324]	; (8012524 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 80123de:	fb82 0307 	smull	r0, r3, r2, r7
 80123e2:	19d8      	adds	r0, r3, r7
 80123e4:	17fb      	asrs	r3, r7, #31
 80123e6:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80123ea:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80123ee:	fb00 7313 	mls	r3, r0, r3, r7
 80123f2:	4403      	add	r3, r0
 80123f4:	fb82 7203 	smull	r7, r2, r2, r3
 80123f8:	18d7      	adds	r7, r2, r3
 80123fa:	17da      	asrs	r2, r3, #31
 80123fc:	ebc2 2227 	rsb	r2, r2, r7, asr #8
 8012400:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012404:	2a5a      	cmp	r2, #90	; 0x5a
 8012406:	dd0b      	ble.n	8012420 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1b4>
        if (i <= 180)
 8012408:	2ab4      	cmp	r2, #180	; 0xb4
 801240a:	dd15      	ble.n	8012438 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1cc>
        if (i <= 270)
 801240c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012410:	dd18      	ble.n	8012444 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1d8>
        return Q15(-int32_t(sineTable[360 - i]));
 8012412:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012416:	4b44      	ldr	r3, [pc, #272]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8012418:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801241c:	4240      	negs	r0, r0
 801241e:	e002      	b.n	8012426 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1ba>
            return Q15(sineTable[i]);
 8012420:	4b41      	ldr	r3, [pc, #260]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8012422:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012426:	ab01      	add	r3, sp, #4
 8012428:	2220      	movs	r2, #32
 801242a:	eba0 000a 	sub.w	r0, r0, sl
 801242e:	f00f fa96 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012432:	eb0a 0100 	add.w	r1, sl, r0
 8012436:	e770      	b.n	801231a <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xae>
            return Q15(sineTable[180 - i]);
 8012438:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801243c:	4b3a      	ldr	r3, [pc, #232]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 801243e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012442:	e7f0      	b.n	8012426 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1ba>
            return Q15(-int32_t(sineTable[i - 180]));
 8012444:	3ab4      	subs	r2, #180	; 0xb4
 8012446:	4b38      	ldr	r3, [pc, #224]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8012448:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801244c:	4240      	negs	r0, r0
 801244e:	e7ea      	b.n	8012426 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1ba>
            return Q5(v / i);
 8012450:	3001      	adds	r0, #1
 8012452:	e76b      	b.n	801232c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0xc0>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012454:	f100 021f 	add.w	r2, r0, #31
 8012458:	e78e      	b.n	8012378 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x10c>
            return Q15(sineTable[i]);
 801245a:	4b33      	ldr	r3, [pc, #204]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 801245c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012460:	4680      	mov	r8, r0
        if (fraction == 0)
 8012462:	b9f1      	cbnz	r1, 80124a2 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x236>
            return sineLow;
 8012464:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012466:	ab01      	add	r3, sp, #4
 8012468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801246c:	6820      	ldr	r0, [r4, #0]
 801246e:	f00f fa76 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 8012472:	2800      	cmp	r0, #0
 8012474:	db53      	blt.n	801251e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b2>
            return Q5(v - q5.v);
 8012476:	6832      	ldr	r2, [r6, #0]
    canvas.lineTo(x + ((r2 * CWRUtil::sine(angle)) / 2), y - ((r2 * CWRUtil::cosine(angle)) / 2));
 8012478:	eba2 0260 	sub.w	r2, r2, r0, asr #1
 801247c:	4639      	mov	r1, r7
 801247e:	4628      	mov	r0, r5
 8012480:	f7ff f958 	bl	8011734 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
}
 8012484:	b002      	add	sp, #8
 8012486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return Q15(sineTable[180 - i]);
 801248a:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801248e:	4b26      	ldr	r3, [pc, #152]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8012490:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012494:	e7e4      	b.n	8012460 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1f4>
            return Q15(-int32_t(sineTable[i - 180]));
 8012496:	3ab4      	subs	r2, #180	; 0xb4
 8012498:	4b23      	ldr	r3, [pc, #140]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 801249a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801249e:	4240      	negs	r0, r0
 80124a0:	e7de      	b.n	8012460 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1f4>
        Q15 sineHigh = sine(i.to<int>() + 1);
 80124a2:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 80124a6:	4a1f      	ldr	r2, [pc, #124]	; (8012524 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2b8>)
 80124a8:	fb82 030c 	smull	r0, r3, r2, ip
 80124ac:	eb03 000c 	add.w	r0, r3, ip
 80124b0:	ea4f 73ec 	mov.w	r3, ip, asr #31
 80124b4:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80124b8:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 80124bc:	fb0e c313 	mls	r3, lr, r3, ip
 80124c0:	4473      	add	r3, lr
 80124c2:	fb82 0203 	smull	r0, r2, r2, r3
 80124c6:	18d0      	adds	r0, r2, r3
 80124c8:	17da      	asrs	r2, r3, #31
 80124ca:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80124ce:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 80124d2:	2a5a      	cmp	r2, #90	; 0x5a
 80124d4:	dd0b      	ble.n	80124ee <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x282>
        if (i <= 180)
 80124d6:	2ab4      	cmp	r2, #180	; 0xb4
 80124d8:	dd15      	ble.n	8012506 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x29a>
        if (i <= 270)
 80124da:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80124de:	dd18      	ble.n	8012512 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2a6>
        return Q15(-int32_t(sineTable[360 - i]));
 80124e0:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80124e4:	4b10      	ldr	r3, [pc, #64]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80124e6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80124ea:	4240      	negs	r0, r0
 80124ec:	e002      	b.n	80124f4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x288>
            return Q15(sineTable[i]);
 80124ee:	4b0e      	ldr	r3, [pc, #56]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 80124f0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80124f4:	ab01      	add	r3, sp, #4
 80124f6:	2220      	movs	r2, #32
 80124f8:	eba0 0008 	sub.w	r0, r0, r8
 80124fc:	f00f fa2f 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012500:	eb08 0100 	add.w	r1, r8, r0
 8012504:	e7af      	b.n	8012466 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x1fa>
            return Q15(sineTable[180 - i]);
 8012506:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801250a:	4b07      	ldr	r3, [pc, #28]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 801250c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012510:	e7f0      	b.n	80124f4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x288>
            return Q15(-int32_t(sineTable[i - 180]));
 8012512:	3ab4      	subs	r2, #180	; 0xb4
 8012514:	4b04      	ldr	r3, [pc, #16]	; (8012528 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x2bc>)
 8012516:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801251a:	4240      	negs	r0, r0
 801251c:	e7ea      	b.n	80124f4 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x288>
            return Q5(v / i);
 801251e:	3001      	adds	r0, #1
 8012520:	e7a9      	b.n	8012476 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_+0x20a>
 8012522:	bf00      	nop
 8012524:	b60b60b7 	.word	0xb60b60b7
 8012528:	08027228 	.word	0x08027228

0801252c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
{
 801252c:	b510      	push	{r4, lr}
 801252e:	b082      	sub	sp, #8
    lineToXYAR2(canvas, circleCenterX, circleCenterY, angle, r2);
 8012530:	9301      	str	r3, [sp, #4]
 8012532:	9200      	str	r2, [sp, #0]
 8012534:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8012538:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801253c:	f7ff fe96 	bl	801226c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
}
 8012540:	b002      	add	sp, #8
 8012542:	bd10      	pop	{r4, pc}

08012544 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
    CWRUtil::Q5 yNew = circleCenterY - ((r2 * CWRUtil::cosine(a)) / 2);
    updateMinMaxXY(xNew, yNew, xMin, xMax, yMin, yMax);
}

void Circle::updateMinMaxXY(const CWRUtil::Q5& xNew, const CWRUtil::Q5& yNew, CWRUtil::Q5& xMin, CWRUtil::Q5& xMax, CWRUtil::Q5& yMin, CWRUtil::Q5& yMax) const
{
 8012544:	b4f0      	push	{r4, r5, r6, r7}
 8012546:	9d04      	ldr	r5, [sp, #16]
 8012548:	9c05      	ldr	r4, [sp, #20]
 801254a:	9806      	ldr	r0, [sp, #24]
            return v;
 801254c:	680f      	ldr	r7, [r1, #0]
 801254e:	681e      	ldr	r6, [r3, #0]
    if (xNew < xMin)
 8012550:	42b7      	cmp	r7, r6
 8012552:	da00      	bge.n	8012556 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x12>
    {
        xMin = xNew;
 8012554:	601f      	str	r7, [r3, #0]
 8012556:	680e      	ldr	r6, [r1, #0]
 8012558:	682b      	ldr	r3, [r5, #0]
    }
    if (xNew > xMax)
 801255a:	429e      	cmp	r6, r3
 801255c:	dd00      	ble.n	8012560 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1c>
    {
        xMax = xNew;
 801255e:	602e      	str	r6, [r5, #0]
 8012560:	6811      	ldr	r1, [r2, #0]
 8012562:	6823      	ldr	r3, [r4, #0]
    }
    if (yNew < yMin)
 8012564:	4299      	cmp	r1, r3
 8012566:	da00      	bge.n	801256a <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x26>
    {
        yMin = yNew;
 8012568:	6021      	str	r1, [r4, #0]
 801256a:	6811      	ldr	r1, [r2, #0]
 801256c:	6803      	ldr	r3, [r0, #0]
    }
    if (yNew > yMax)
 801256e:	4299      	cmp	r1, r3
 8012570:	dd00      	ble.n	8012574 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x30>
    {
        yMax = yNew;
 8012572:	6001      	str	r1, [r0, #0]
    }
}
 8012574:	bcf0      	pop	{r4, r5, r6, r7}
 8012576:	4770      	bx	lr

08012578 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
{
 8012578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801257c:	b088      	sub	sp, #32
 801257e:	4604      	mov	r4, r0
 8012580:	460f      	mov	r7, r1
 8012582:	4615      	mov	r5, r2
 8012584:	461e      	mov	r6, r3
 8012586:	680a      	ldr	r2, [r1, #0]
        i = Q5(((i % _360) + _360) % _360);
 8012588:	48ac      	ldr	r0, [pc, #688]	; (801283c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 801258a:	fb80 1302 	smull	r1, r3, r0, r2
 801258e:	1899      	adds	r1, r3, r2
 8012590:	17d3      	asrs	r3, r2, #31
 8012592:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8012596:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 801259a:	fb01 2313 	mls	r3, r1, r3, r2
 801259e:	440b      	add	r3, r1
 80125a0:	fb80 2003 	smull	r2, r0, r0, r3
 80125a4:	18c2      	adds	r2, r0, r3
 80125a6:	17d8      	asrs	r0, r3, #31
 80125a8:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 80125ac:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80125b0:	4243      	negs	r3, r0
 80125b2:	f000 011f 	and.w	r1, r0, #31
 80125b6:	f003 031f 	and.w	r3, r3, #31
 80125ba:	bf58      	it	pl
 80125bc:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80125be:	4602      	mov	r2, r0
 80125c0:	2800      	cmp	r0, #0
 80125c2:	db24      	blt.n	801260e <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x96>
 80125c4:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 80125c8:	489c      	ldr	r0, [pc, #624]	; (801283c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 80125ca:	fb80 e30c 	smull	lr, r3, r0, ip
 80125ce:	eb03 0e0c 	add.w	lr, r3, ip
 80125d2:	17d3      	asrs	r3, r2, #31
 80125d4:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 80125d8:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 80125dc:	fb0e c313 	mls	r3, lr, r3, ip
 80125e0:	4473      	add	r3, lr
 80125e2:	fb80 2003 	smull	r2, r0, r0, r3
 80125e6:	4418      	add	r0, r3
 80125e8:	17da      	asrs	r2, r3, #31
 80125ea:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80125ee:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 80125f2:	2a5a      	cmp	r2, #90	; 0x5a
 80125f4:	dd0e      	ble.n	8012614 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x9c>
        if (i <= 180)
 80125f6:	2ab4      	cmp	r2, #180	; 0xb4
 80125f8:	dd65      	ble.n	80126c6 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x14e>
        if (i <= 270)
 80125fa:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80125fe:	dd68      	ble.n	80126d2 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x15a>
        return Q15(-int32_t(sineTable[360 - i]));
 8012600:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012604:	4b8e      	ldr	r3, [pc, #568]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8012606:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801260a:	4240      	negs	r0, r0
 801260c:	e005      	b.n	801261a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xa2>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801260e:	f100 021f 	add.w	r2, r0, #31
 8012612:	e7d7      	b.n	80125c4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x4c>
            return Q15(sineTable[i]);
 8012614:	4b8a      	ldr	r3, [pc, #552]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8012616:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801261a:	4680      	mov	r8, r0
        if (fraction == 0)
 801261c:	2900      	cmp	r1, #0
 801261e:	d15e      	bne.n	80126de <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x166>
            return sineLow;
 8012620:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012622:	ab05      	add	r3, sp, #20
 8012624:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012628:	6828      	ldr	r0, [r5, #0]
 801262a:	f00f f998 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 801262e:	2800      	cmp	r0, #0
 8012630:	f2c0 8093 	blt.w	801275a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1e2>
            return Q5(v + q5.v);
 8012634:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012636:	eb03 0360 	add.w	r3, r3, r0, asr #1
    CWRUtil::Q5 xNew = circleCenterX + ((r2 * CWRUtil::sine(a)) / 2);
 801263a:	9307      	str	r3, [sp, #28]
 801263c:	683a      	ldr	r2, [r7, #0]
            return Q5(v - q5.v);
 801263e:	f5c2 6234 	rsb	r2, r2, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 8012642:	487e      	ldr	r0, [pc, #504]	; (801283c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 8012644:	fb80 1302 	smull	r1, r3, r0, r2
 8012648:	1899      	adds	r1, r3, r2
 801264a:	17d3      	asrs	r3, r2, #31
 801264c:	ebc3 3361 	rsb	r3, r3, r1, asr #13
 8012650:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8012654:	fb01 2313 	mls	r3, r1, r3, r2
 8012658:	440b      	add	r3, r1
 801265a:	fb80 2003 	smull	r2, r0, r0, r3
 801265e:	18c2      	adds	r2, r0, r3
 8012660:	17d8      	asrs	r0, r3, #31
 8012662:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8012666:	fb01 3010 	mls	r0, r1, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 801266a:	4243      	negs	r3, r0
 801266c:	f000 011f 	and.w	r1, r0, #31
 8012670:	f003 031f 	and.w	r3, r3, #31
 8012674:	bf58      	it	pl
 8012676:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012678:	4602      	mov	r2, r0
 801267a:	2800      	cmp	r0, #0
 801267c:	db6f      	blt.n	801275e <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1e6>
 801267e:	1157      	asrs	r7, r2, #5
        i = ((i % 360) + 360) % 360;
 8012680:	486e      	ldr	r0, [pc, #440]	; (801283c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 8012682:	fb80 c307 	smull	ip, r3, r0, r7
 8012686:	eb03 0c07 	add.w	ip, r3, r7
 801268a:	17d3      	asrs	r3, r2, #31
 801268c:	ebc3 232c 	rsb	r3, r3, ip, asr #8
 8012690:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8012694:	fb0c 7313 	mls	r3, ip, r3, r7
 8012698:	4463      	add	r3, ip
 801269a:	fb80 2003 	smull	r2, r0, r0, r3
 801269e:	4418      	add	r0, r3
 80126a0:	17da      	asrs	r2, r3, #31
 80126a2:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80126a6:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 80126aa:	2a5a      	cmp	r2, #90	; 0x5a
 80126ac:	dd5a      	ble.n	8012764 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1ec>
        if (i <= 180)
 80126ae:	2ab4      	cmp	r2, #180	; 0xb4
 80126b0:	dd7a      	ble.n	80127a8 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x230>
        if (i <= 270)
 80126b2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80126b6:	dd7d      	ble.n	80127b4 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x23c>
        return Q15(-int32_t(sineTable[360 - i]));
 80126b8:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80126bc:	4b60      	ldr	r3, [pc, #384]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 80126be:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80126c2:	4240      	negs	r0, r0
 80126c4:	e051      	b.n	801276a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1f2>
            return Q15(sineTable[180 - i]);
 80126c6:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80126ca:	4b5d      	ldr	r3, [pc, #372]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 80126cc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80126d0:	e7a3      	b.n	801261a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xa2>
            return Q15(-int32_t(sineTable[i - 180]));
 80126d2:	3ab4      	subs	r2, #180	; 0xb4
 80126d4:	4b5a      	ldr	r3, [pc, #360]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 80126d6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80126da:	4240      	negs	r0, r0
 80126dc:	e79d      	b.n	801261a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xa2>
        Q15 sineHigh = sine(i.to<int>() + 1);
 80126de:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 80126e2:	4a56      	ldr	r2, [pc, #344]	; (801283c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 80126e4:	fb82 030c 	smull	r0, r3, r2, ip
 80126e8:	eb03 000c 	add.w	r0, r3, ip
 80126ec:	ea4f 73ec 	mov.w	r3, ip, asr #31
 80126f0:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80126f4:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 80126f8:	fb0e c313 	mls	r3, lr, r3, ip
 80126fc:	4473      	add	r3, lr
 80126fe:	fb82 0203 	smull	r0, r2, r2, r3
 8012702:	18d0      	adds	r0, r2, r3
 8012704:	17da      	asrs	r2, r3, #31
 8012706:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 801270a:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 801270e:	2a5a      	cmp	r2, #90	; 0x5a
 8012710:	dd0b      	ble.n	801272a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1b2>
        if (i <= 180)
 8012712:	2ab4      	cmp	r2, #180	; 0xb4
 8012714:	dd15      	ble.n	8012742 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1ca>
        if (i <= 270)
 8012716:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 801271a:	dd18      	ble.n	801274e <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1d6>
        return Q15(-int32_t(sineTable[360 - i]));
 801271c:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012720:	4b47      	ldr	r3, [pc, #284]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8012722:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012726:	4240      	negs	r0, r0
 8012728:	e002      	b.n	8012730 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1b8>
            return Q15(sineTable[i]);
 801272a:	4b45      	ldr	r3, [pc, #276]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 801272c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012730:	ab05      	add	r3, sp, #20
 8012732:	2220      	movs	r2, #32
 8012734:	eba0 0008 	sub.w	r0, r0, r8
 8012738:	f00f f911 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 801273c:	eb08 0100 	add.w	r1, r8, r0
 8012740:	e76f      	b.n	8012622 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xaa>
            return Q15(sineTable[180 - i]);
 8012742:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012746:	4b3e      	ldr	r3, [pc, #248]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8012748:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801274c:	e7f0      	b.n	8012730 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1b8>
            return Q15(-int32_t(sineTable[i - 180]));
 801274e:	3ab4      	subs	r2, #180	; 0xb4
 8012750:	4b3b      	ldr	r3, [pc, #236]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8012752:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012756:	4240      	negs	r0, r0
 8012758:	e7ea      	b.n	8012730 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1b8>
            return Q5(v / i);
 801275a:	3001      	adds	r0, #1
 801275c:	e76a      	b.n	8012634 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0xbc>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801275e:	f100 021f 	add.w	r2, r0, #31
 8012762:	e78c      	b.n	801267e <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x106>
            return Q15(sineTable[i]);
 8012764:	4b36      	ldr	r3, [pc, #216]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8012766:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801276a:	4680      	mov	r8, r0
        if (fraction == 0)
 801276c:	bb41      	cbnz	r1, 80127c0 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x248>
            return sineLow;
 801276e:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012770:	ab05      	add	r3, sp, #20
 8012772:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012776:	6828      	ldr	r0, [r5, #0]
 8012778:	f00f f8f1 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v / i);
 801277c:	2800      	cmp	r0, #0
 801277e:	db5a      	blt.n	8012836 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2be>
            return Q5(v - q5.v);
 8012780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012782:	eba3 0360 	sub.w	r3, r3, r0, asr #1
    CWRUtil::Q5 yNew = circleCenterY - ((r2 * CWRUtil::cosine(a)) / 2);
 8012786:	aa08      	add	r2, sp, #32
 8012788:	f842 3d08 	str.w	r3, [r2, #-8]!
    updateMinMaxXY(xNew, yNew, xMin, xMax, yMin, yMax);
 801278c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801278e:	9302      	str	r3, [sp, #8]
 8012790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012792:	9301      	str	r3, [sp, #4]
 8012794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	4633      	mov	r3, r6
 801279a:	a907      	add	r1, sp, #28
 801279c:	4620      	mov	r0, r4
 801279e:	f7ff fed1 	bl	8012544 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
}
 80127a2:	b008      	add	sp, #32
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return Q15(sineTable[180 - i]);
 80127a8:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80127ac:	4b24      	ldr	r3, [pc, #144]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 80127ae:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80127b2:	e7da      	b.n	801276a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1f2>
            return Q15(-int32_t(sineTable[i - 180]));
 80127b4:	3ab4      	subs	r2, #180	; 0xb4
 80127b6:	4b22      	ldr	r3, [pc, #136]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 80127b8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80127bc:	4240      	negs	r0, r0
 80127be:	e7d4      	b.n	801276a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1f2>
        Q15 sineHigh = sine(i.to<int>() + 1);
 80127c0:	3701      	adds	r7, #1
        i = ((i % 360) + 360) % 360;
 80127c2:	4a1e      	ldr	r2, [pc, #120]	; (801283c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c4>)
 80127c4:	fb82 0307 	smull	r0, r3, r2, r7
 80127c8:	19d8      	adds	r0, r3, r7
 80127ca:	17fb      	asrs	r3, r7, #31
 80127cc:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 80127d0:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 80127d4:	fb0c 7313 	mls	r3, ip, r3, r7
 80127d8:	4463      	add	r3, ip
 80127da:	fb82 0203 	smull	r0, r2, r2, r3
 80127de:	18d0      	adds	r0, r2, r3
 80127e0:	17da      	asrs	r2, r3, #31
 80127e2:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 80127e6:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 80127ea:	2a5a      	cmp	r2, #90	; 0x5a
 80127ec:	dd0b      	ble.n	8012806 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x28e>
        if (i <= 180)
 80127ee:	2ab4      	cmp	r2, #180	; 0xb4
 80127f0:	dd15      	ble.n	801281e <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2a6>
        if (i <= 270)
 80127f2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80127f6:	dd18      	ble.n	801282a <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2b2>
        return Q15(-int32_t(sineTable[360 - i]));
 80127f8:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80127fc:	4b10      	ldr	r3, [pc, #64]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 80127fe:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012802:	4240      	negs	r0, r0
 8012804:	e002      	b.n	801280c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x294>
            return Q15(sineTable[i]);
 8012806:	4b0e      	ldr	r3, [pc, #56]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8012808:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 801280c:	ab05      	add	r3, sp, #20
 801280e:	2220      	movs	r2, #32
 8012810:	eba0 0008 	sub.w	r0, r0, r8
 8012814:	f00f f8a3 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012818:	eb08 0100 	add.w	r1, r8, r0
 801281c:	e7a8      	b.n	8012770 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x1f8>
            return Q15(sineTable[180 - i]);
 801281e:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012822:	4b07      	ldr	r3, [pc, #28]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 8012824:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012828:	e7f0      	b.n	801280c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x294>
            return Q15(-int32_t(sineTable[i - 180]));
 801282a:	3ab4      	subs	r2, #180	; 0xb4
 801282c:	4b04      	ldr	r3, [pc, #16]	; (8012840 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x2c8>)
 801282e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012832:	4240      	negs	r0, r0
 8012834:	e7ea      	b.n	801280c <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x294>
            return Q5(v / i);
 8012836:	3001      	adds	r0, #1
 8012838:	e7a2      	b.n	8012780 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_+0x208>
 801283a:	bf00      	nop
 801283c:	b60b60b7 	.word	0xb60b60b7
 8012840:	08027228 	.word	0x08027228

08012844 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>:
    if (d < 0)
 8012844:	2800      	cmp	r0, #0
 8012846:	db00      	blt.n	801284a <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_+0x6>
}
 8012848:	4770      	bx	lr
 801284a:	4240      	negs	r0, r0
 801284c:	e7fc      	b.n	8012848 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_+0x4>
	...

08012850 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:

void Circle::calculateMinimalRect(CWRUtil::Q5 arcStart, CWRUtil::Q5 arcEnd, CWRUtil::Q5& xMin, CWRUtil::Q5& xMax, CWRUtil::Q5& yMin, CWRUtil::Q5& yMax) const
{
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	b09b      	sub	sp, #108	; 0x6c
 8012856:	4604      	mov	r4, r0
 8012858:	9107      	str	r1, [sp, #28]
 801285a:	9206      	str	r2, [sp, #24]
 801285c:	9305      	str	r3, [sp, #20]
 801285e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012860:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012862:	9d26      	ldr	r5, [sp, #152]	; 0x98
    // Put start before end by swapping
    if (arcStart > arcEnd)
 8012864:	4291      	cmp	r1, r2
 8012866:	dd01      	ble.n	801286c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1c>
    {
        CWRUtil::Q5 tmp = arcStart;
        arcStart = arcEnd;
 8012868:	9207      	str	r2, [sp, #28]
        arcEnd = tmp;
 801286a:	9106      	str	r1, [sp, #24]
        explicit Q5(int i) : v(i) { }
 801286c:	f44f 6b34 	mov.w	fp, #2880	; 0xb40
 8012870:	f44f 5834 	mov.w	r8, #11520	; 0x2d00
            return Q5(v - q5.v);
 8012874:	9a07      	ldr	r2, [sp, #28]
 8012876:	9b06      	ldr	r3, [sp, #24]
 8012878:	1a9b      	subs	r3, r3, r2
    }

    CWRUtil::Q5 _90 = CWRUtil::toQ5<int>(90);
    CWRUtil::Q5 _360 = CWRUtil::toQ5<int>(360);

    if ((arcEnd - arcStart) >= _360)
 801287a:	4543      	cmp	r3, r8
 801287c:	db03      	blt.n	8012886 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x36>
        explicit Q5(int i) : v(i) { }
 801287e:	2300      	movs	r3, #0
    {
        // The entire circle has to be drawn
        arcStart = CWRUtil::toQ5<int>(0);
 8012880:	9307      	str	r3, [sp, #28]
        arcEnd = _360;
 8012882:	f8cd 8018 	str.w	r8, [sp, #24]
            return Q5(v * i);
 8012886:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v + q5.v);
 8012888:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801288a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    }

    // Check start angle
    updateMinMaxAR(arcStart, (circleRadius * 2) + circleLineWidth, xMin, xMax, yMin, yMax);
 801288e:	aa1a      	add	r2, sp, #104	; 0x68
 8012890:	f842 3d3c 	str.w	r3, [r2, #-60]!
 8012894:	9502      	str	r5, [sp, #8]
 8012896:	9701      	str	r7, [sp, #4]
 8012898:	9600      	str	r6, [sp, #0]
 801289a:	9b05      	ldr	r3, [sp, #20]
 801289c:	a907      	add	r1, sp, #28
 801289e:	4620      	mov	r0, r4
 80128a0:	f7ff fe6a 	bl	8012578 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
        Q5() : v(0) { }
 80128a4:	2300      	movs	r3, #0
 80128a6:	930a      	str	r3, [sp, #40]	; 0x28
            return Q5(v + q5.v);
 80128a8:	9b07      	ldr	r3, [sp, #28]
 80128aa:	f103 0a20 	add.w	sl, r3, #32
    // Here we have a up to 4 approximation steps on angles divisible by 90
    CWRUtil::Q5 i;
    for (i = CWRUtil::Q5(ROUNDUP(arcStart + CWRUtil::toQ5<int>(1), _90)); i <= arcEnd; i = i + _90)
 80128ae:	4658      	mov	r0, fp
 80128b0:	f7ff ffc8 	bl	8012844 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 80128b4:	4681      	mov	r9, r0
 80128b6:	4658      	mov	r0, fp
 80128b8:	f7ff ffc4 	bl	8012844 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 80128bc:	fb9a f3f0 	sdiv	r3, sl, r0
 80128c0:	fb00 a013 	mls	r0, r0, r3, sl
 80128c4:	eba9 0900 	sub.w	r9, r9, r0
 80128c8:	4658      	mov	r0, fp
 80128ca:	f7ff ffbb 	bl	8012844 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 80128ce:	fb99 f3f0 	sdiv	r3, r9, r0
 80128d2:	fb00 9013 	mls	r0, r0, r3, r9
 80128d6:	4450      	add	r0, sl
 80128d8:	900a      	str	r0, [sp, #40]	; 0x28
            return v;
 80128da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128dc:	9a06      	ldr	r2, [sp, #24]
 80128de:	429a      	cmp	r2, r3
 80128e0:	db13      	blt.n	801290a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xba>
            return Q5(v * i);
 80128e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v + q5.v);
 80128e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80128e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    {
        updateMinMaxAR(i, (circleRadius * 2) + circleLineWidth, xMin, xMax, yMin, yMax);
 80128ea:	aa1a      	add	r2, sp, #104	; 0x68
 80128ec:	f842 3d38 	str.w	r3, [r2, #-56]!
 80128f0:	9502      	str	r5, [sp, #8]
 80128f2:	9701      	str	r7, [sp, #4]
 80128f4:	9600      	str	r6, [sp, #0]
 80128f6:	9b05      	ldr	r3, [sp, #20]
 80128f8:	a90a      	add	r1, sp, #40	; 0x28
 80128fa:	4620      	mov	r0, r4
 80128fc:	f7ff fe3c 	bl	8012578 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8012900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012902:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
    for (i = CWRUtil::Q5(ROUNDUP(arcStart + CWRUtil::toQ5<int>(1), _90)); i <= arcEnd; i = i + _90)
 8012906:	930a      	str	r3, [sp, #40]	; 0x28
 8012908:	e7e7      	b.n	80128da <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x8a>
            return Q5(v - q5.v);
 801290a:	f5a3 6334 	sub.w	r3, r3, #2880	; 0xb40
    }
    // Check end angle
    if ((i - _90) < arcEnd)
 801290e:	429a      	cmp	r2, r3
 8012910:	dc14      	bgt.n	801293c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>
            return v;
 8012912:	6c63      	ldr	r3, [r4, #68]	; 0x44
    {
        updateMinMaxAR(arcEnd, (circleRadius * 2) + circleLineWidth, xMin, xMax, yMin, yMax);
    }

    if (circleLineWidth == CWRUtil::toQ5<int>(0))
 8012914:	2b00      	cmp	r3, #0
 8012916:	d12f      	bne.n	8012978 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x128>
            return Q5(v - q5.v);
 8012918:	9b06      	ldr	r3, [sp, #24]
 801291a:	9a07      	ldr	r2, [sp, #28]
 801291c:	1a9b      	subs	r3, r3, r2
    {
        // A filled circle / pie / pacman
        if ((arcEnd - arcStart) < _360)
 801291e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8012922:	db1b      	blt.n	801295c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x10c>
        updateMinMaxAR(arcStart, (circleRadius * 2) - circleLineWidth, xMin, xMax, yMin, yMax);
        updateMinMaxAR(arcEnd, (circleRadius * 2) - circleLineWidth, xMin, xMax, yMin, yMax);
    }

    // Check if circle cap extends the min/max further
    if ((circleCapArcIncrement < 180) && (arcEnd - arcStart < _360))
 8012924:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8012928:	2bb3      	cmp	r3, #179	; 0xb3
 801292a:	d804      	bhi.n	8012936 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xe6>
 801292c:	9b06      	ldr	r3, [sp, #24]
 801292e:	9a07      	ldr	r2, [sp, #28]
 8012930:	1a9b      	subs	r3, r3, r2
 8012932:	4598      	cmp	r8, r3
 8012934:	dc40      	bgt.n	80129b8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x168>
        capX = circleCenterX + (circleRadius * CWRUtil::sine(arcEnd));
        capY = circleCenterY - (circleRadius * CWRUtil::cosine(arcEnd));
        updateMinMaxXY(capX - (circleLineWidth / 2), capY - (circleLineWidth / 2), xMin, xMax, yMin, yMax);
        updateMinMaxXY(capX + (circleLineWidth / 2), capY + (circleLineWidth / 2), xMin, xMax, yMin, yMax);
    }
}
 8012936:	b01b      	add	sp, #108	; 0x6c
 8012938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return Q5(v * i);
 801293c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v + q5.v);
 801293e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012940:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        updateMinMaxAR(arcEnd, (circleRadius * 2) + circleLineWidth, xMin, xMax, yMin, yMax);
 8012944:	aa1a      	add	r2, sp, #104	; 0x68
 8012946:	f842 3d34 	str.w	r3, [r2, #-52]!
 801294a:	9502      	str	r5, [sp, #8]
 801294c:	9701      	str	r7, [sp, #4]
 801294e:	9600      	str	r6, [sp, #0]
 8012950:	9b05      	ldr	r3, [sp, #20]
 8012952:	a906      	add	r1, sp, #24
 8012954:	4620      	mov	r0, r4
 8012956:	f7ff fe0f 	bl	8012578 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801295a:	e7da      	b.n	8012912 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc2>
        explicit Q5(int i) : v(i) { }
 801295c:	2300      	movs	r3, #0
            updateMinMaxAR(CWRUtil::toQ5<int>(0), CWRUtil::toQ5<int>(0), xMin, xMax, yMin, yMax);
 801295e:	930e      	str	r3, [sp, #56]	; 0x38
 8012960:	aa1a      	add	r2, sp, #104	; 0x68
 8012962:	f842 3d2c 	str.w	r3, [r2, #-44]!
 8012966:	9502      	str	r5, [sp, #8]
 8012968:	9701      	str	r7, [sp, #4]
 801296a:	9600      	str	r6, [sp, #0]
 801296c:	9b05      	ldr	r3, [sp, #20]
 801296e:	a90e      	add	r1, sp, #56	; 0x38
 8012970:	4620      	mov	r0, r4
 8012972:	f7ff fe01 	bl	8012578 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8012976:	e7d5      	b.n	8012924 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xd4>
            return Q5(v * i);
 8012978:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v - q5.v);
 801297a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
        updateMinMaxAR(arcStart, (circleRadius * 2) - circleLineWidth, xMin, xMax, yMin, yMax);
 801297e:	aa1a      	add	r2, sp, #104	; 0x68
 8012980:	f842 3d28 	str.w	r3, [r2, #-40]!
 8012984:	9502      	str	r5, [sp, #8]
 8012986:	9701      	str	r7, [sp, #4]
 8012988:	9600      	str	r6, [sp, #0]
 801298a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801298e:	464b      	mov	r3, r9
 8012990:	a907      	add	r1, sp, #28
 8012992:	4620      	mov	r0, r4
 8012994:	f7ff fdf0 	bl	8012578 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
            return Q5(v * i);
 8012998:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            return Q5(v - q5.v);
 801299a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801299c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
        updateMinMaxAR(arcEnd, (circleRadius * 2) - circleLineWidth, xMin, xMax, yMin, yMax);
 80129a0:	aa1a      	add	r2, sp, #104	; 0x68
 80129a2:	f842 3d24 	str.w	r3, [r2, #-36]!
 80129a6:	9502      	str	r5, [sp, #8]
 80129a8:	9701      	str	r7, [sp, #4]
 80129aa:	9600      	str	r6, [sp, #0]
 80129ac:	464b      	mov	r3, r9
 80129ae:	a906      	add	r1, sp, #24
 80129b0:	4620      	mov	r0, r4
 80129b2:	f7ff fde1 	bl	8012578 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80129b6:	e7b5      	b.n	8012924 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xd4>
 80129b8:	4611      	mov	r1, r2
        i = Q5(((i % _360) + _360) % _360);
 80129ba:	4acf      	ldr	r2, [pc, #828]	; (8012cf8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 80129bc:	fb82 0301 	smull	r0, r3, r2, r1
 80129c0:	1858      	adds	r0, r3, r1
 80129c2:	17cb      	asrs	r3, r1, #31
 80129c4:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 80129c8:	f44f 5c34 	mov.w	ip, #11520	; 0x2d00
 80129cc:	fb0c 1313 	mls	r3, ip, r3, r1
 80129d0:	4463      	add	r3, ip
 80129d2:	fb82 1203 	smull	r1, r2, r2, r3
 80129d6:	441a      	add	r2, r3
 80129d8:	17d8      	asrs	r0, r3, #31
 80129da:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 80129de:	fb0c 3010 	mls	r0, ip, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80129e2:	4243      	negs	r3, r0
 80129e4:	f000 011f 	and.w	r1, r0, #31
 80129e8:	f003 031f 	and.w	r3, r3, #31
 80129ec:	bf58      	it	pl
 80129ee:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80129f0:	4602      	mov	r2, r0
 80129f2:	2800      	cmp	r0, #0
 80129f4:	db24      	blt.n	8012a40 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f0>
 80129f6:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 80129fa:	48bf      	ldr	r0, [pc, #764]	; (8012cf8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 80129fc:	fb80 e30c 	smull	lr, r3, r0, ip
 8012a00:	eb03 0e0c 	add.w	lr, r3, ip
 8012a04:	17d3      	asrs	r3, r2, #31
 8012a06:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8012a0a:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8012a0e:	fb0e c313 	mls	r3, lr, r3, ip
 8012a12:	4473      	add	r3, lr
 8012a14:	fb80 2003 	smull	r2, r0, r0, r3
 8012a18:	4418      	add	r0, r3
 8012a1a:	17da      	asrs	r2, r3, #31
 8012a1c:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012a20:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8012a24:	2a5a      	cmp	r2, #90	; 0x5a
 8012a26:	dd0e      	ble.n	8012a46 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f6>
        if (i <= 180)
 8012a28:	2ab4      	cmp	r2, #180	; 0xb4
 8012a2a:	dd65      	ble.n	8012af8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2a8>
        if (i <= 270)
 8012a2c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012a30:	dd68      	ble.n	8012b04 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2b4>
        return Q15(-int32_t(sineTable[360 - i]));
 8012a32:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012a36:	4bb1      	ldr	r3, [pc, #708]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012a38:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012a3c:	4240      	negs	r0, r0
 8012a3e:	e005      	b.n	8012a4c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fc>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012a40:	f100 021f 	add.w	r2, r0, #31
 8012a44:	e7d7      	b.n	80129f6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1a6>
            return Q15(sineTable[i]);
 8012a46:	4bad      	ldr	r3, [pc, #692]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012a48:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012a4c:	4681      	mov	r9, r0
        if (fraction == 0)
 8012a4e:	2900      	cmp	r1, #0
 8012a50:	d15e      	bne.n	8012b10 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c0>
            return sineLow;
 8012a52:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012a54:	ab09      	add	r3, sp, #36	; 0x24
 8012a56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012a5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8012a5c:	f00e ff7f 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v + q5.v);
 8012a60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012a62:	eb03 0900 	add.w	r9, r3, r0
 8012a66:	9907      	ldr	r1, [sp, #28]
            return Q5(v - q5.v);
 8012a68:	f5c1 6134 	rsb	r1, r1, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 8012a6c:	4aa2      	ldr	r2, [pc, #648]	; (8012cf8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8012a6e:	fb82 0301 	smull	r0, r3, r2, r1
 8012a72:	1858      	adds	r0, r3, r1
 8012a74:	17cb      	asrs	r3, r1, #31
 8012a76:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8012a7a:	f44f 5034 	mov.w	r0, #11520	; 0x2d00
 8012a7e:	fb00 1313 	mls	r3, r0, r3, r1
 8012a82:	4403      	add	r3, r0
 8012a84:	fb82 1203 	smull	r1, r2, r2, r3
 8012a88:	18d1      	adds	r1, r2, r3
 8012a8a:	17da      	asrs	r2, r3, #31
 8012a8c:	ebc2 3261 	rsb	r2, r2, r1, asr #13
 8012a90:	fb00 3212 	mls	r2, r0, r2, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8012a94:	4253      	negs	r3, r2
 8012a96:	f002 011f 	and.w	r1, r2, #31
 8012a9a:	f003 031f 	and.w	r3, r3, #31
 8012a9e:	bf58      	it	pl
 8012aa0:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012aa2:	4610      	mov	r0, r2
 8012aa4:	2a00      	cmp	r2, #0
 8012aa6:	db72      	blt.n	8012b8e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x33e>
 8012aa8:	ea4f 1c60 	mov.w	ip, r0, asr #5
        i = ((i % 360) + 360) % 360;
 8012aac:	4a92      	ldr	r2, [pc, #584]	; (8012cf8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8012aae:	fb82 e30c 	smull	lr, r3, r2, ip
 8012ab2:	eb03 0e0c 	add.w	lr, r3, ip
 8012ab6:	17c3      	asrs	r3, r0, #31
 8012ab8:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8012abc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8012ac0:	fb00 c313 	mls	r3, r0, r3, ip
 8012ac4:	4403      	add	r3, r0
 8012ac6:	fb82 e203 	smull	lr, r2, r2, r3
 8012aca:	eb02 0e03 	add.w	lr, r2, r3
 8012ace:	17da      	asrs	r2, r3, #31
 8012ad0:	ebc2 222e 	rsb	r2, r2, lr, asr #8
 8012ad4:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012ad8:	2a5a      	cmp	r2, #90	; 0x5a
 8012ada:	dd5b      	ble.n	8012b94 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x344>
        if (i <= 180)
 8012adc:	2ab4      	cmp	r2, #180	; 0xb4
 8012ade:	f340 80d9 	ble.w	8012c94 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x444>
        if (i <= 270)
 8012ae2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012ae6:	f340 80db 	ble.w	8012ca0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x450>
        return Q15(-int32_t(sineTable[360 - i]));
 8012aea:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012aee:	4b83      	ldr	r3, [pc, #524]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012af0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012af4:	4240      	negs	r0, r0
 8012af6:	e050      	b.n	8012b9a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x34a>
            return Q15(sineTable[180 - i]);
 8012af8:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012afc:	4b7f      	ldr	r3, [pc, #508]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012afe:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b02:	e7a3      	b.n	8012a4c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fc>
            return Q15(-int32_t(sineTable[i - 180]));
 8012b04:	3ab4      	subs	r2, #180	; 0xb4
 8012b06:	4b7d      	ldr	r3, [pc, #500]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012b08:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b0c:	4240      	negs	r0, r0
 8012b0e:	e79d      	b.n	8012a4c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fc>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012b10:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8012b14:	4a78      	ldr	r2, [pc, #480]	; (8012cf8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8012b16:	fb82 030c 	smull	r0, r3, r2, ip
 8012b1a:	eb03 000c 	add.w	r0, r3, ip
 8012b1e:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8012b22:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012b26:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8012b2a:	fb00 c313 	mls	r3, r0, r3, ip
 8012b2e:	4403      	add	r3, r0
 8012b30:	fb82 c203 	smull	ip, r2, r2, r3
 8012b34:	eb02 0c03 	add.w	ip, r2, r3
 8012b38:	17da      	asrs	r2, r3, #31
 8012b3a:	ebc2 222c 	rsb	r2, r2, ip, asr #8
 8012b3e:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012b42:	2a5a      	cmp	r2, #90	; 0x5a
 8012b44:	dd0b      	ble.n	8012b5e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x30e>
        if (i <= 180)
 8012b46:	2ab4      	cmp	r2, #180	; 0xb4
 8012b48:	dd15      	ble.n	8012b76 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x326>
        if (i <= 270)
 8012b4a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012b4e:	dd18      	ble.n	8012b82 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x332>
        return Q15(-int32_t(sineTable[360 - i]));
 8012b50:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012b54:	4b69      	ldr	r3, [pc, #420]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012b56:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b5a:	4240      	negs	r0, r0
 8012b5c:	e002      	b.n	8012b64 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x314>
            return Q15(sineTable[i]);
 8012b5e:	4b67      	ldr	r3, [pc, #412]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012b60:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012b64:	ab09      	add	r3, sp, #36	; 0x24
 8012b66:	2220      	movs	r2, #32
 8012b68:	eba0 0009 	sub.w	r0, r0, r9
 8012b6c:	f00e fef7 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012b70:	eb09 0100 	add.w	r1, r9, r0
 8012b74:	e76e      	b.n	8012a54 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x204>
            return Q15(sineTable[180 - i]);
 8012b76:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012b7a:	4b60      	ldr	r3, [pc, #384]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012b7c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b80:	e7f0      	b.n	8012b64 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x314>
            return Q15(-int32_t(sineTable[i - 180]));
 8012b82:	3ab4      	subs	r2, #180	; 0xb4
 8012b84:	4b5d      	ldr	r3, [pc, #372]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012b86:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b8a:	4240      	negs	r0, r0
 8012b8c:	e7ea      	b.n	8012b64 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x314>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012b8e:	f102 001f 	add.w	r0, r2, #31
 8012b92:	e789      	b.n	8012aa8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x258>
            return Q15(sineTable[i]);
 8012b94:	4b59      	ldr	r3, [pc, #356]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012b96:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012b9a:	4682      	mov	sl, r0
        if (fraction == 0)
 8012b9c:	2900      	cmp	r1, #0
 8012b9e:	f040 8085 	bne.w	8012cac <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x45c>
            return sineLow;
 8012ba2:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012ba4:	ab09      	add	r3, sp, #36	; 0x24
 8012ba6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012baa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8012bac:	f00e fed7 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v - q5.v);
 8012bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bb2:	eba3 0a00 	sub.w	sl, r3, r0
            return Q5(v / i);
 8012bb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f2c0 80b9 	blt.w	8012d30 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4e0>
 8012bbe:	105b      	asrs	r3, r3, #1
            return Q5(v - q5.v);
 8012bc0:	eba9 0203 	sub.w	r2, r9, r3
        updateMinMaxXY(capX - (circleLineWidth / 2), capY - (circleLineWidth / 2), xMin, xMax, yMin, yMax);
 8012bc4:	9212      	str	r2, [sp, #72]	; 0x48
 8012bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8012bca:	aa1a      	add	r2, sp, #104	; 0x68
 8012bcc:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8012bd0:	9502      	str	r5, [sp, #8]
 8012bd2:	9701      	str	r7, [sp, #4]
 8012bd4:	9600      	str	r6, [sp, #0]
 8012bd6:	9b05      	ldr	r3, [sp, #20]
 8012bd8:	a912      	add	r1, sp, #72	; 0x48
 8012bda:	4620      	mov	r0, r4
 8012bdc:	f7ff fcb2 	bl	8012544 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
            return Q5(v / i);
 8012be0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f2c0 80a6 	blt.w	8012d34 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4e4>
 8012be8:	105b      	asrs	r3, r3, #1
            return Q5(v + q5.v);
 8012bea:	eb03 0209 	add.w	r2, r3, r9
        updateMinMaxXY(capX + (circleLineWidth / 2), capY + (circleLineWidth / 2), xMin, xMax, yMin, yMax);
 8012bee:	9214      	str	r2, [sp, #80]	; 0x50
 8012bf0:	4453      	add	r3, sl
 8012bf2:	aa1a      	add	r2, sp, #104	; 0x68
 8012bf4:	f842 3d14 	str.w	r3, [r2, #-20]!
 8012bf8:	9502      	str	r5, [sp, #8]
 8012bfa:	9701      	str	r7, [sp, #4]
 8012bfc:	9600      	str	r6, [sp, #0]
 8012bfe:	9b05      	ldr	r3, [sp, #20]
 8012c00:	a914      	add	r1, sp, #80	; 0x50
 8012c02:	4620      	mov	r0, r4
 8012c04:	f7ff fc9e 	bl	8012544 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8012c08:	9906      	ldr	r1, [sp, #24]
        i = Q5(((i % _360) + _360) % _360);
 8012c0a:	4a3b      	ldr	r2, [pc, #236]	; (8012cf8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8012c0c:	fb82 0301 	smull	r0, r3, r2, r1
 8012c10:	1858      	adds	r0, r3, r1
 8012c12:	17cb      	asrs	r3, r1, #31
 8012c14:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8012c18:	f44f 5c34 	mov.w	ip, #11520	; 0x2d00
 8012c1c:	fb0c 1313 	mls	r3, ip, r3, r1
 8012c20:	4463      	add	r3, ip
 8012c22:	fb82 1203 	smull	r1, r2, r2, r3
 8012c26:	441a      	add	r2, r3
 8012c28:	17d8      	asrs	r0, r3, #31
 8012c2a:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8012c2e:	fb0c 3010 	mls	r0, ip, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8012c32:	4243      	negs	r3, r0
 8012c34:	f000 011f 	and.w	r1, r0, #31
 8012c38:	f003 031f 	and.w	r3, r3, #31
 8012c3c:	bf58      	it	pl
 8012c3e:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012c40:	4602      	mov	r2, r0
 8012c42:	2800      	cmp	r0, #0
 8012c44:	db78      	blt.n	8012d38 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4e8>
 8012c46:	ea4f 1c62 	mov.w	ip, r2, asr #5
        i = ((i % 360) + 360) % 360;
 8012c4a:	482b      	ldr	r0, [pc, #172]	; (8012cf8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8012c4c:	fb80 e30c 	smull	lr, r3, r0, ip
 8012c50:	eb03 0e0c 	add.w	lr, r3, ip
 8012c54:	17d3      	asrs	r3, r2, #31
 8012c56:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8012c5a:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8012c5e:	fb0e c313 	mls	r3, lr, r3, ip
 8012c62:	4473      	add	r3, lr
 8012c64:	fb80 2003 	smull	r2, r0, r0, r3
 8012c68:	4418      	add	r0, r3
 8012c6a:	17da      	asrs	r2, r3, #31
 8012c6c:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012c70:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8012c74:	2a5a      	cmp	r2, #90	; 0x5a
 8012c76:	dd62      	ble.n	8012d3e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ee>
        if (i <= 180)
 8012c78:	2ab4      	cmp	r2, #180	; 0xb4
 8012c7a:	f340 80b9 	ble.w	8012df0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x5a0>
        if (i <= 270)
 8012c7e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012c82:	f340 80bb 	ble.w	8012dfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x5ac>
        return Q15(-int32_t(sineTable[360 - i]));
 8012c86:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012c8a:	4b1c      	ldr	r3, [pc, #112]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012c8c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012c90:	4240      	negs	r0, r0
 8012c92:	e057      	b.n	8012d44 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4f4>
            return Q15(sineTable[180 - i]);
 8012c94:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012c98:	4b18      	ldr	r3, [pc, #96]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012c9a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012c9e:	e77c      	b.n	8012b9a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x34a>
            return Q15(-int32_t(sineTable[i - 180]));
 8012ca0:	3ab4      	subs	r2, #180	; 0xb4
 8012ca2:	4b16      	ldr	r3, [pc, #88]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012ca4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012ca8:	4240      	negs	r0, r0
 8012caa:	e776      	b.n	8012b9a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x34a>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012cac:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8012cb0:	4a11      	ldr	r2, [pc, #68]	; (8012cf8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4a8>)
 8012cb2:	fb82 030c 	smull	r0, r3, r2, ip
 8012cb6:	eb03 000c 	add.w	r0, r3, ip
 8012cba:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8012cbe:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012cc2:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8012cc6:	fb0e c313 	mls	r3, lr, r3, ip
 8012cca:	4473      	add	r3, lr
 8012ccc:	fb82 0203 	smull	r0, r2, r2, r3
 8012cd0:	18d0      	adds	r0, r2, r3
 8012cd2:	17da      	asrs	r2, r3, #31
 8012cd4:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012cd8:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8012cdc:	2a5a      	cmp	r2, #90	; 0x5a
 8012cde:	dd0f      	ble.n	8012d00 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4b0>
        if (i <= 180)
 8012ce0:	2ab4      	cmp	r2, #180	; 0xb4
 8012ce2:	dd19      	ble.n	8012d18 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4c8>
        if (i <= 270)
 8012ce4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012ce8:	dd1c      	ble.n	8012d24 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4d4>
        return Q15(-int32_t(sineTable[360 - i]));
 8012cea:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012cee:	4b03      	ldr	r3, [pc, #12]	; (8012cfc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4ac>)
 8012cf0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012cf4:	4240      	negs	r0, r0
 8012cf6:	e006      	b.n	8012d06 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4b6>
 8012cf8:	b60b60b7 	.word	0xb60b60b7
 8012cfc:	08027228 	.word	0x08027228
            return Q15(sineTable[i]);
 8012d00:	4ba5      	ldr	r3, [pc, #660]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012d02:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012d06:	ab09      	add	r3, sp, #36	; 0x24
 8012d08:	2220      	movs	r2, #32
 8012d0a:	eba0 000a 	sub.w	r0, r0, sl
 8012d0e:	f00e fe26 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012d12:	eb0a 0100 	add.w	r1, sl, r0
 8012d16:	e745      	b.n	8012ba4 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x354>
            return Q15(sineTable[180 - i]);
 8012d18:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012d1c:	4b9e      	ldr	r3, [pc, #632]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012d1e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012d22:	e7f0      	b.n	8012d06 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4b6>
            return Q15(-int32_t(sineTable[i - 180]));
 8012d24:	3ab4      	subs	r2, #180	; 0xb4
 8012d26:	4b9c      	ldr	r3, [pc, #624]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012d28:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012d2c:	4240      	negs	r0, r0
 8012d2e:	e7ea      	b.n	8012d06 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4b6>
            return Q5(v / i);
 8012d30:	3301      	adds	r3, #1
 8012d32:	e744      	b.n	8012bbe <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x36e>
 8012d34:	3301      	adds	r3, #1
 8012d36:	e757      	b.n	8012be8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x398>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012d38:	f100 021f 	add.w	r2, r0, #31
 8012d3c:	e783      	b.n	8012c46 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x3f6>
            return Q15(sineTable[i]);
 8012d3e:	4b96      	ldr	r3, [pc, #600]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012d40:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012d44:	4681      	mov	r9, r0
        if (fraction == 0)
 8012d46:	2900      	cmp	r1, #0
 8012d48:	d15e      	bne.n	8012e08 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x5b8>
            return sineLow;
 8012d4a:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012d4c:	ab09      	add	r3, sp, #36	; 0x24
 8012d4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012d52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8012d54:	f00e fe03 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v + q5.v);
 8012d58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012d5a:	eb03 0900 	add.w	r9, r3, r0
 8012d5e:	9906      	ldr	r1, [sp, #24]
            return Q5(v - q5.v);
 8012d60:	f5c1 6134 	rsb	r1, r1, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 8012d64:	4a8d      	ldr	r2, [pc, #564]	; (8012f9c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x74c>)
 8012d66:	fb82 0301 	smull	r0, r3, r2, r1
 8012d6a:	1858      	adds	r0, r3, r1
 8012d6c:	17cb      	asrs	r3, r1, #31
 8012d6e:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8012d72:	f44f 5034 	mov.w	r0, #11520	; 0x2d00
 8012d76:	fb00 1313 	mls	r3, r0, r3, r1
 8012d7a:	4403      	add	r3, r0
 8012d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8012d80:	18d1      	adds	r1, r2, r3
 8012d82:	17da      	asrs	r2, r3, #31
 8012d84:	ebc2 3261 	rsb	r2, r2, r1, asr #13
 8012d88:	fb00 3212 	mls	r2, r0, r2, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8012d8c:	4253      	negs	r3, r2
 8012d8e:	f002 011f 	and.w	r1, r2, #31
 8012d92:	f003 031f 	and.w	r3, r3, #31
 8012d96:	bf58      	it	pl
 8012d98:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012d9a:	4610      	mov	r0, r2
 8012d9c:	2a00      	cmp	r2, #0
 8012d9e:	db72      	blt.n	8012e86 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x636>
 8012da0:	ea4f 1c60 	mov.w	ip, r0, asr #5
        i = ((i % 360) + 360) % 360;
 8012da4:	4a7d      	ldr	r2, [pc, #500]	; (8012f9c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x74c>)
 8012da6:	fb82 e30c 	smull	lr, r3, r2, ip
 8012daa:	eb03 0e0c 	add.w	lr, r3, ip
 8012dae:	17c3      	asrs	r3, r0, #31
 8012db0:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8012db4:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8012db8:	fb00 c313 	mls	r3, r0, r3, ip
 8012dbc:	4403      	add	r3, r0
 8012dbe:	fb82 e203 	smull	lr, r2, r2, r3
 8012dc2:	eb02 0e03 	add.w	lr, r2, r3
 8012dc6:	17da      	asrs	r2, r3, #31
 8012dc8:	ebc2 222e 	rsb	r2, r2, lr, asr #8
 8012dcc:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012dd0:	2a5a      	cmp	r2, #90	; 0x5a
 8012dd2:	dd5b      	ble.n	8012e8c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x63c>
        if (i <= 180)
 8012dd4:	2ab4      	cmp	r2, #180	; 0xb4
 8012dd6:	f340 8091 	ble.w	8012efc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x6ac>
        if (i <= 270)
 8012dda:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012dde:	f340 8093 	ble.w	8012f08 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x6b8>
        return Q15(-int32_t(sineTable[360 - i]));
 8012de2:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012de6:	4b6c      	ldr	r3, [pc, #432]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012de8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012dec:	4240      	negs	r0, r0
 8012dee:	e050      	b.n	8012e92 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x642>
            return Q15(sineTable[180 - i]);
 8012df0:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012df4:	4b68      	ldr	r3, [pc, #416]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012df6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012dfa:	e7a3      	b.n	8012d44 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4f4>
            return Q15(-int32_t(sineTable[i - 180]));
 8012dfc:	3ab4      	subs	r2, #180	; 0xb4
 8012dfe:	4b66      	ldr	r3, [pc, #408]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012e00:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e04:	4240      	negs	r0, r0
 8012e06:	e79d      	b.n	8012d44 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4f4>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012e08:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8012e0c:	4a63      	ldr	r2, [pc, #396]	; (8012f9c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x74c>)
 8012e0e:	fb82 030c 	smull	r0, r3, r2, ip
 8012e12:	eb03 000c 	add.w	r0, r3, ip
 8012e16:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8012e1a:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012e1e:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8012e22:	fb00 c313 	mls	r3, r0, r3, ip
 8012e26:	4403      	add	r3, r0
 8012e28:	fb82 c203 	smull	ip, r2, r2, r3
 8012e2c:	eb02 0c03 	add.w	ip, r2, r3
 8012e30:	17da      	asrs	r2, r3, #31
 8012e32:	ebc2 222c 	rsb	r2, r2, ip, asr #8
 8012e36:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8012e3a:	2a5a      	cmp	r2, #90	; 0x5a
 8012e3c:	dd0b      	ble.n	8012e56 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x606>
        if (i <= 180)
 8012e3e:	2ab4      	cmp	r2, #180	; 0xb4
 8012e40:	dd15      	ble.n	8012e6e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x61e>
        if (i <= 270)
 8012e42:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012e46:	dd18      	ble.n	8012e7a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x62a>
        return Q15(-int32_t(sineTable[360 - i]));
 8012e48:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012e4c:	4b52      	ldr	r3, [pc, #328]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012e4e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e52:	4240      	negs	r0, r0
 8012e54:	e002      	b.n	8012e5c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x60c>
            return Q15(sineTable[i]);
 8012e56:	4b50      	ldr	r3, [pc, #320]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012e58:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012e5c:	ab09      	add	r3, sp, #36	; 0x24
 8012e5e:	2220      	movs	r2, #32
 8012e60:	eba0 0009 	sub.w	r0, r0, r9
 8012e64:	f00e fd7b 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012e68:	eb09 0100 	add.w	r1, r9, r0
 8012e6c:	e76e      	b.n	8012d4c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x4fc>
            return Q15(sineTable[180 - i]);
 8012e6e:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012e72:	4b49      	ldr	r3, [pc, #292]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012e74:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e78:	e7f0      	b.n	8012e5c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x60c>
            return Q15(-int32_t(sineTable[i - 180]));
 8012e7a:	3ab4      	subs	r2, #180	; 0xb4
 8012e7c:	4b46      	ldr	r3, [pc, #280]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012e7e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e82:	4240      	negs	r0, r0
 8012e84:	e7ea      	b.n	8012e5c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x60c>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012e86:	f102 001f 	add.w	r0, r2, #31
 8012e8a:	e789      	b.n	8012da0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x550>
            return Q15(sineTable[i]);
 8012e8c:	4b42      	ldr	r3, [pc, #264]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012e8e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012e92:	4682      	mov	sl, r0
        if (fraction == 0)
 8012e94:	2900      	cmp	r1, #0
 8012e96:	d13d      	bne.n	8012f14 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x6c4>
            return sineLow;
 8012e98:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8012e9a:	ab09      	add	r3, sp, #36	; 0x24
 8012e9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012ea0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8012ea2:	f00e fd5c 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v - q5.v);
 8012ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ea8:	eba3 0a00 	sub.w	sl, r3, r0
            return Q5(v / i);
 8012eac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	db6e      	blt.n	8012f90 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x740>
 8012eb2:	105b      	asrs	r3, r3, #1
            return Q5(v - q5.v);
 8012eb4:	eba9 0203 	sub.w	r2, r9, r3
        updateMinMaxXY(capX - (circleLineWidth / 2), capY - (circleLineWidth / 2), xMin, xMax, yMin, yMax);
 8012eb8:	9216      	str	r2, [sp, #88]	; 0x58
 8012eba:	ebaa 0303 	sub.w	r3, sl, r3
 8012ebe:	aa1a      	add	r2, sp, #104	; 0x68
 8012ec0:	f842 3d0c 	str.w	r3, [r2, #-12]!
 8012ec4:	9502      	str	r5, [sp, #8]
 8012ec6:	9701      	str	r7, [sp, #4]
 8012ec8:	9600      	str	r6, [sp, #0]
 8012eca:	9b05      	ldr	r3, [sp, #20]
 8012ecc:	a916      	add	r1, sp, #88	; 0x58
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f7ff fb38 	bl	8012544 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
            return Q5(v / i);
 8012ed4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	db5c      	blt.n	8012f94 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x744>
 8012eda:	105b      	asrs	r3, r3, #1
            return Q5(v + q5.v);
 8012edc:	eb03 0209 	add.w	r2, r3, r9
        updateMinMaxXY(capX + (circleLineWidth / 2), capY + (circleLineWidth / 2), xMin, xMax, yMin, yMax);
 8012ee0:	9218      	str	r2, [sp, #96]	; 0x60
 8012ee2:	4453      	add	r3, sl
 8012ee4:	aa1a      	add	r2, sp, #104	; 0x68
 8012ee6:	f842 3d04 	str.w	r3, [r2, #-4]!
 8012eea:	9502      	str	r5, [sp, #8]
 8012eec:	9701      	str	r7, [sp, #4]
 8012eee:	9600      	str	r6, [sp, #0]
 8012ef0:	9b05      	ldr	r3, [sp, #20]
 8012ef2:	a918      	add	r1, sp, #96	; 0x60
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	f7ff fb25 	bl	8012544 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
}
 8012efa:	e51c      	b.n	8012936 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xe6>
            return Q15(sineTable[180 - i]);
 8012efc:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012f00:	4b25      	ldr	r3, [pc, #148]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012f02:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012f06:	e7c4      	b.n	8012e92 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x642>
            return Q15(-int32_t(sineTable[i - 180]));
 8012f08:	3ab4      	subs	r2, #180	; 0xb4
 8012f0a:	4b23      	ldr	r3, [pc, #140]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012f0c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012f10:	4240      	negs	r0, r0
 8012f12:	e7be      	b.n	8012e92 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x642>
        Q15 sineHigh = sine(i.to<int>() + 1);
 8012f14:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8012f18:	4a20      	ldr	r2, [pc, #128]	; (8012f9c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x74c>)
 8012f1a:	fb82 030c 	smull	r0, r3, r2, ip
 8012f1e:	eb03 000c 	add.w	r0, r3, ip
 8012f22:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8012f26:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8012f2a:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8012f2e:	fb0e c313 	mls	r3, lr, r3, ip
 8012f32:	4473      	add	r3, lr
 8012f34:	fb82 0203 	smull	r0, r2, r2, r3
 8012f38:	18d0      	adds	r0, r2, r3
 8012f3a:	17da      	asrs	r2, r3, #31
 8012f3c:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8012f40:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 8012f44:	2a5a      	cmp	r2, #90	; 0x5a
 8012f46:	dd0b      	ble.n	8012f60 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x710>
        if (i <= 180)
 8012f48:	2ab4      	cmp	r2, #180	; 0xb4
 8012f4a:	dd15      	ble.n	8012f78 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x728>
        if (i <= 270)
 8012f4c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8012f50:	dd18      	ble.n	8012f84 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x734>
        return Q15(-int32_t(sineTable[360 - i]));
 8012f52:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8012f56:	4b10      	ldr	r3, [pc, #64]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012f58:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012f5c:	4240      	negs	r0, r0
 8012f5e:	e002      	b.n	8012f66 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x716>
            return Q15(sineTable[i]);
 8012f60:	4b0d      	ldr	r3, [pc, #52]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012f62:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 8012f66:	ab09      	add	r3, sp, #36	; 0x24
 8012f68:	2220      	movs	r2, #32
 8012f6a:	eba0 000a 	sub.w	r0, r0, sl
 8012f6e:	f00e fcf6 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8012f72:	eb0a 0100 	add.w	r1, sl, r0
 8012f76:	e790      	b.n	8012e9a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x64a>
            return Q15(sineTable[180 - i]);
 8012f78:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8012f7c:	4b06      	ldr	r3, [pc, #24]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012f7e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012f82:	e7f0      	b.n	8012f66 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x716>
            return Q15(-int32_t(sineTable[i - 180]));
 8012f84:	3ab4      	subs	r2, #180	; 0xb4
 8012f86:	4b04      	ldr	r3, [pc, #16]	; (8012f98 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x748>)
 8012f88:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8012f8c:	4240      	negs	r0, r0
 8012f8e:	e7ea      	b.n	8012f66 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x716>
            return Q5(v / i);
 8012f90:	3301      	adds	r3, #1
 8012f92:	e78e      	b.n	8012eb2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x662>
 8012f94:	3301      	adds	r3, #1
 8012f96:	e7a0      	b.n	8012eda <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x68a>
 8012f98:	08027228 	.word	0x08027228
 8012f9c:	b60b60b7 	.word	0xb60b60b7

08012fa0 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
{
 8012fa0:	b530      	push	{r4, r5, lr}
 8012fa2:	b089      	sub	sp, #36	; 0x24
 8012fa4:	4604      	mov	r4, r0
 8012fa6:	4608      	mov	r0, r1
 8012fa8:	4611      	mov	r1, r2
 8012faa:	461a      	mov	r2, r3
        return rect.width;
 8012fac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012fb0:	015b      	lsls	r3, r3, #5
    CWRUtil::Q5 xMin = CWRUtil::toQ5<int>(getWidth());
 8012fb2:	9307      	str	r3, [sp, #28]
        explicit Q5(int i) : v(i) { }
 8012fb4:	2500      	movs	r5, #0
    CWRUtil::Q5 xMax = CWRUtil::toQ5<int>(0);
 8012fb6:	9506      	str	r5, [sp, #24]
        return rect.height;
 8012fb8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8012fbc:	015b      	lsls	r3, r3, #5
    CWRUtil::Q5 yMin = CWRUtil::toQ5<int>(getHeight());
 8012fbe:	9305      	str	r3, [sp, #20]
    CWRUtil::Q5 yMax = CWRUtil::toQ5<int>(0);
 8012fc0:	9504      	str	r5, [sp, #16]
    calculateMinimalRect(arcStart, arcEnd, xMin, xMax, yMin, yMax);
 8012fc2:	ab04      	add	r3, sp, #16
 8012fc4:	9302      	str	r3, [sp, #8]
 8012fc6:	ab05      	add	r3, sp, #20
 8012fc8:	9301      	str	r3, [sp, #4]
 8012fca:	ab06      	add	r3, sp, #24
 8012fcc:	9300      	str	r3, [sp, #0]
 8012fce:	ab07      	add	r3, sp, #28
 8012fd0:	f7ff fc3e 	bl	8012850 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8012fd4:	9b07      	ldr	r3, [sp, #28]
 8012fd6:	42ab      	cmp	r3, r5
 8012fd8:	db20      	blt.n	801301c <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x7c>
    return Rect(xMin.to<int>() - 1, yMin.to<int>() - 1,
 8012fda:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8012fde:	1e58      	subs	r0, r3, #1
                xMax.to<int>() - xMin.to<int>() + 2, yMax.to<int>() - yMin.to<int>() + 2);
 8012fe0:	b200      	sxth	r0, r0
 8012fe2:	9a05      	ldr	r2, [sp, #20]
 8012fe4:	2a00      	cmp	r2, #0
 8012fe6:	db1b      	blt.n	8013020 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x80>
    return Rect(xMin.to<int>() - 1, yMin.to<int>() - 1,
 8012fe8:	f3c2 124f 	ubfx	r2, r2, #5, #16
 8012fec:	1e51      	subs	r1, r2, #1
                xMax.to<int>() - xMin.to<int>() + 2, yMax.to<int>() - yMin.to<int>() + 2);
 8012fee:	b209      	sxth	r1, r1
 8012ff0:	9d06      	ldr	r5, [sp, #24]
 8012ff2:	2d00      	cmp	r5, #0
 8012ff4:	db16      	blt.n	8013024 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x84>
 8012ff6:	ebc3 1365 	rsb	r3, r3, r5, asr #5
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	3302      	adds	r3, #2
 8012ffe:	b21b      	sxth	r3, r3
 8013000:	9d04      	ldr	r5, [sp, #16]
 8013002:	2d00      	cmp	r5, #0
 8013004:	db10      	blt.n	8013028 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x88>
 8013006:	ebc2 1265 	rsb	r2, r2, r5, asr #5
 801300a:	b292      	uxth	r2, r2
 801300c:	3202      	adds	r2, #2
        this->x = x;
 801300e:	8020      	strh	r0, [r4, #0]
        this->y = y;
 8013010:	8061      	strh	r1, [r4, #2]
        this->width = width;
 8013012:	80a3      	strh	r3, [r4, #4]
        this->height = height;
 8013014:	80e2      	strh	r2, [r4, #6]
}
 8013016:	4620      	mov	r0, r4
 8013018:	b009      	add	sp, #36	; 0x24
 801301a:	bd30      	pop	{r4, r5, pc}
 801301c:	331f      	adds	r3, #31
 801301e:	e7dc      	b.n	8012fda <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x3a>
 8013020:	321f      	adds	r2, #31
 8013022:	e7e1      	b.n	8012fe8 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x48>
 8013024:	351f      	adds	r5, #31
 8013026:	e7e6      	b.n	8012ff6 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x56>
 8013028:	351f      	adds	r5, #31
 801302a:	e7ec      	b.n	8013006 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_+0x66>

0801302c <_ZNK8touchgfx6Circle14getMinimalRectEv>:
{
 801302c:	b510      	push	{r4, lr}
 801302e:	4604      	mov	r4, r0
    return getMinimalRect(circleArcAngleStart, circleArcAngleEnd);
 8013030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013032:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8013034:	f7ff ffb4 	bl	8012fa0 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
}
 8013038:	4620      	mov	r0, r4
 801303a:	bd10      	pop	{r4, pc}

0801303c <_ZN8touchgfx3absIiEET_S1_>:
    if (d < 0)
 801303c:	2800      	cmp	r0, #0
 801303e:	db00      	blt.n	8013042 <_ZN8touchgfx3absIiEET_S1_+0x6>
}
 8013040:	4770      	bx	lr
        return -d;
 8013042:	4240      	negs	r0, r0
 8013044:	e7fc      	b.n	8013040 <_ZN8touchgfx3absIiEET_S1_+0x4>

08013046 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E>:
    }
    return getMinimalRect(minAngle, maxAngle);
}

touchgfx::Rect Circle::getMinimalRectForUpdatedEndAngle(CWRUtil::Q5& endAngleQ5)
{
 8013046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013048:	b083      	sub	sp, #12
 801304a:	4607      	mov	r7, r0
 801304c:	460c      	mov	r4, r1
        explicit Q5(int i) : v(i) { }
 801304e:	2300      	movs	r3, #0
 8013050:	9300      	str	r3, [sp, #0]
            return v;
 8013052:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8013054:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    CWRUtil::Q5 minAngle = CWRUtil::Q5(0); // Unused default value
    CWRUtil::Q5 maxAngle = CWRUtil::Q5(0); // Unused default value
    if (circleArcAngleStart < circleArcAngleEnd)
 8013056:	42ae      	cmp	r6, r5
 8013058:	da45      	bge.n	80130e6 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xa0>
 801305a:	6813      	ldr	r3, [r2, #0]
    {
        // start is smaller than end
        if (endAngleQ5 > circleArcAngleEnd)
 801305c:	42ab      	cmp	r3, r5
 801305e:	dd21      	ble.n	80130a4 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x5e>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8013060:	462b      	mov	r3, r5
 8013062:	2d00      	cmp	r5, #0
 8013064:	db19      	blt.n	801309a <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x54>
 8013066:	115b      	asrs	r3, r3, #5
        {
            // end moved even higher
            minAngle = CWRUtil::toQ5<int>(circleArcAngleEnd.to<int>() / circleArcIncrement * circleArcIncrement);
 8013068:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801306c:	fb93 f3f1 	sdiv	r3, r3, r1
 8013070:	fb03 f301 	mul.w	r3, r3, r1
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8013074:	015b      	lsls	r3, r3, #5
 8013076:	9301      	str	r3, [sp, #4]
            minAngle = MAX(minAngle, circleArcAngleStart);
 8013078:	429e      	cmp	r6, r3
 801307a:	db11      	blt.n	80130a0 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x5a>
 801307c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	9301      	str	r3, [sp, #4]
            maxAngle = endAngleQ5;
 8013084:	6813      	ldr	r3, [r2, #0]
 8013086:	9300      	str	r3, [sp, #0]
            // end moved past start
            minAngle = circleArcAngleEnd;
            maxAngle = endAngleQ5;
        }
    }
    return getMinimalRect(minAngle, maxAngle);
 8013088:	9b00      	ldr	r3, [sp, #0]
 801308a:	9a01      	ldr	r2, [sp, #4]
 801308c:	4621      	mov	r1, r4
 801308e:	4638      	mov	r0, r7
 8013090:	f7ff ff86 	bl	8012fa0 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
}
 8013094:	4638      	mov	r0, r7
 8013096:	b003      	add	sp, #12
 8013098:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801309a:	f105 031f 	add.w	r3, r5, #31
 801309e:	e7e2      	b.n	8013066 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x20>
            minAngle = MAX(minAngle, circleArcAngleStart);
 80130a0:	ab01      	add	r3, sp, #4
 80130a2:	e7ed      	b.n	8013080 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x3a>
        else if (endAngleQ5 > circleArcAngleStart)
 80130a4:	42b3      	cmp	r3, r6
 80130a6:	dd19      	ble.n	80130dc <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x96>
 80130a8:	461a      	mov	r2, r3
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	db11      	blt.n	80130d2 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x8c>
 80130ae:	1153      	asrs	r3, r2, #5
            minAngle = CWRUtil::toQ5<int>(endAngleQ5.to<int>() / circleArcIncrement * circleArcIncrement);
 80130b0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80130b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80130b8:	fb03 f302 	mul.w	r3, r3, r2
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80130bc:	015b      	lsls	r3, r3, #5
 80130be:	9301      	str	r3, [sp, #4]
            minAngle = MAX(minAngle, circleArcAngleStart); // No need to go lower than start
 80130c0:	429e      	cmp	r6, r3
 80130c2:	db09      	blt.n	80130d8 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x92>
 80130c4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	9301      	str	r3, [sp, #4]
            maxAngle = circleArcAngleEnd;
 80130cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80130ce:	9300      	str	r3, [sp, #0]
 80130d0:	e7da      	b.n	8013088 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80130d2:	f103 021f 	add.w	r2, r3, #31
 80130d6:	e7ea      	b.n	80130ae <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x68>
            minAngle = MAX(minAngle, circleArcAngleStart); // No need to go lower than start
 80130d8:	ab01      	add	r3, sp, #4
 80130da:	e7f5      	b.n	80130c8 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x82>
            minAngle = endAngleQ5;
 80130dc:	6813      	ldr	r3, [r2, #0]
 80130de:	9301      	str	r3, [sp, #4]
            maxAngle = circleArcAngleEnd;
 80130e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80130e2:	9300      	str	r3, [sp, #0]
 80130e4:	e7d0      	b.n	8013088 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>
        CWRUtil::Q5 circleArcIncrementQ5 = CWRUtil::toQ5<int>(circleArcIncrement);
 80130e6:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80130ea:	0140      	lsls	r0, r0, #5
            return v;
 80130ec:	6813      	ldr	r3, [r2, #0]
        if (endAngleQ5 < circleArcAngleEnd)
 80130ee:	429d      	cmp	r5, r3
 80130f0:	dd17      	ble.n	8013122 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xdc>
            minAngle = endAngleQ5;
 80130f2:	9301      	str	r3, [sp, #4]
            maxAngle = CWRUtil::Q5(ROUNDUP((int)circleArcAngleEnd, (int)circleArcIncrementQ5));
 80130f4:	b158      	cbz	r0, 801310e <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xc8>
 80130f6:	f7ff ffa1 	bl	801303c <_ZN8touchgfx3absIiEET_S1_>
 80130fa:	fb95 f3f0 	sdiv	r3, r5, r0
 80130fe:	fb00 5313 	mls	r3, r0, r3, r5
 8013102:	1ac3      	subs	r3, r0, r3
 8013104:	fb93 f2f0 	sdiv	r2, r3, r0
 8013108:	fb00 3012 	mls	r0, r0, r2, r3
 801310c:	4405      	add	r5, r0
 801310e:	9500      	str	r5, [sp, #0]
            maxAngle = MIN(maxAngle, circleArcAngleStart); // No need to go higher than start
 8013110:	42b5      	cmp	r5, r6
 8013112:	db04      	blt.n	801311e <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xd8>
 8013114:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	9300      	str	r3, [sp, #0]
 801311c:	e7b4      	b.n	8013088 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>
 801311e:	466b      	mov	r3, sp
 8013120:	e7fa      	b.n	8013118 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xd2>
        else if (endAngleQ5 < circleArcAngleStart)
 8013122:	429e      	cmp	r6, r3
 8013124:	dd1b      	ble.n	801315e <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x118>
            minAngle = circleArcAngleEnd;
 8013126:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013128:	9301      	str	r3, [sp, #4]
            maxAngle = CWRUtil::Q5(ROUNDUP((int)endAngleQ5, (int)circleArcIncrementQ5));
 801312a:	b940      	cbnz	r0, 801313e <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xf8>
 801312c:	6813      	ldr	r3, [r2, #0]
 801312e:	9300      	str	r3, [sp, #0]
            maxAngle = MIN(maxAngle, circleArcAngleStart);
 8013130:	42b3      	cmp	r3, r6
 8013132:	db12      	blt.n	801315a <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x114>
 8013134:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	9300      	str	r3, [sp, #0]
 801313c:	e7a4      	b.n	8013088 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>
 801313e:	6815      	ldr	r5, [r2, #0]
            maxAngle = CWRUtil::Q5(ROUNDUP((int)endAngleQ5, (int)circleArcIncrementQ5));
 8013140:	f7ff ff7c 	bl	801303c <_ZN8touchgfx3absIiEET_S1_>
 8013144:	fb95 f2f0 	sdiv	r2, r5, r0
 8013148:	fb00 5312 	mls	r3, r0, r2, r5
 801314c:	1ac2      	subs	r2, r0, r3
 801314e:	fb92 f3f0 	sdiv	r3, r2, r0
 8013152:	fb00 2313 	mls	r3, r0, r3, r2
 8013156:	442b      	add	r3, r5
 8013158:	e7e9      	b.n	801312e <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xe8>
            maxAngle = MIN(maxAngle, circleArcAngleStart);
 801315a:	466b      	mov	r3, sp
 801315c:	e7ec      	b.n	8013138 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0xf2>
            minAngle = circleArcAngleEnd;
 801315e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013160:	9301      	str	r3, [sp, #4]
            maxAngle = endAngleQ5;
 8013162:	6813      	ldr	r3, [r2, #0]
 8013164:	9300      	str	r3, [sp, #0]
 8013166:	e78f      	b.n	8013088 <_ZN8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERNS_7CWRUtil2Q5E+0x42>

08013168 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
{
 8013168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801316c:	b0c1      	sub	sp, #260	; 0x104
 801316e:	4604      	mov	r4, r0
 8013170:	460f      	mov	r7, r1
    CWRUtil::Q5 arcStart = circleArcAngleStart;
 8013172:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013174:	9239      	str	r2, [sp, #228]	; 0xe4
    CWRUtil::Q5 arcEnd = circleArcAngleEnd;
 8013176:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013178:	9338      	str	r3, [sp, #224]	; 0xe0
        explicit Q5(int i) : v(i) { }
 801317a:	f44f 5934 	mov.w	r9, #11520	; 0x2d00
    if (arcStart > arcEnd)
 801317e:	429a      	cmp	r2, r3
 8013180:	dd03      	ble.n	801318a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22>
        CWRUtil::Q5 tmp = arcStart;
 8013182:	4613      	mov	r3, r2
        arcStart = arcEnd;
 8013184:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8013186:	9239      	str	r2, [sp, #228]	; 0xe4
        arcEnd = tmp;
 8013188:	9338      	str	r3, [sp, #224]	; 0xe0
            return Q5(v - q5.v);
 801318a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 801318c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801318e:	1a9b      	subs	r3, r3, r2
    if ((arcEnd - arcStart) >= _360)
 8013190:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8013194:	db03      	blt.n	801319e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x36>
        explicit Q5(int i) : v(i) { }
 8013196:	2300      	movs	r3, #0
        arcStart = CWRUtil::toQ5<int>(0);
 8013198:	9339      	str	r3, [sp, #228]	; 0xe4
        arcEnd = _360;
 801319a:	f8cd 90e0 	str.w	r9, [sp, #224]	; 0xe0
            return v;
 801319e:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
    if (circleLineWidth != 0)
 80131a2:	f1b8 0f00 	cmp.w	r8, #0
 80131a6:	f000 8084 	beq.w	80132b2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x14a>
        int32_t x1 = int(CWRUtil::toQ5(invalidatedArea.x)); // Take the corners of the invalidated area
 80131aa:	f9b7 0000 	ldrsh.w	r0, [r7]
        return x + width;
 80131ae:	88be      	ldrh	r6, [r7, #4]
 80131b0:	fa16 f680 	uxtah	r6, r6, r0
 80131b4:	b236      	sxth	r6, r6
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80131b6:	0176      	lsls	r6, r6, #5
        int32_t y1 = int(CWRUtil::toQ5(invalidatedArea.y));
 80131b8:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 80131bc:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        return y + height;
 80131c0:	88fb      	ldrh	r3, [r7, #6]
 80131c2:	fa13 f585 	uxtah	r5, r3, r5
 80131c6:	b22d      	sxth	r5, r5
 80131c8:	016d      	lsls	r5, r5, #5
            return v;
 80131ca:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
        int32_t dx1 = abs(int(circleCenterX) - x1); // Find distances between each corner and circle center
 80131ce:	ebab 1040 	sub.w	r0, fp, r0, lsl #5
 80131d2:	f7fd f815 	bl	8010200 <_ZN8touchgfx3absIlEET_S1_>
 80131d6:	9003      	str	r0, [sp, #12]
        int32_t dx2 = abs(int(circleCenterX) - x2);
 80131d8:	ebab 0006 	sub.w	r0, fp, r6
 80131dc:	f7fd f810 	bl	8010200 <_ZN8touchgfx3absIlEET_S1_>
 80131e0:	4606      	mov	r6, r0
 80131e2:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
        int32_t dy1 = abs(int(circleCenterY) - y1);
 80131e6:	ebab 000a 	sub.w	r0, fp, sl
 80131ea:	f7fd f809 	bl	8010200 <_ZN8touchgfx3absIlEET_S1_>
 80131ee:	4682      	mov	sl, r0
        int32_t dy2 = abs(int(circleCenterY) - y2);
 80131f0:	ebab 0005 	sub.w	r0, fp, r5
 80131f4:	f7fd f804 	bl	8010200 <_ZN8touchgfx3absIlEET_S1_>
        int32_t dx = CWRUtil::Q5(MAX(dx1, dx2)).to<int>() + 1; // Largest hor/vert distance (round up)
 80131f8:	9b03      	ldr	r3, [sp, #12]
 80131fa:	42b3      	cmp	r3, r6
 80131fc:	dd00      	ble.n	8013200 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x98>
 80131fe:	461e      	mov	r6, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8013200:	4635      	mov	r5, r6
 8013202:	2e00      	cmp	r6, #0
 8013204:	db3c      	blt.n	8013280 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x118>
 8013206:	116d      	asrs	r5, r5, #5
 8013208:	3501      	adds	r5, #1
        int32_t dy = CWRUtil::Q5(MAX(dy1, dy2)).to<int>() + 1;
 801320a:	4582      	cmp	sl, r0
 801320c:	dd00      	ble.n	8013210 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xa8>
 801320e:	4650      	mov	r0, sl
 8013210:	4603      	mov	r3, r0
 8013212:	2800      	cmp	r0, #0
 8013214:	db37      	blt.n	8013286 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x11e>
 8013216:	115b      	asrs	r3, r3, #5
 8013218:	3301      	adds	r3, #1
        int32_t dsqr = (dx * dx) + (dy * dy); // Pythagoras
 801321a:	fb03 f303 	mul.w	r3, r3, r3
 801321e:	fb05 3505 	mla	r5, r5, r5, r3
            return Q5(v / i);
 8013222:	4640      	mov	r0, r8
 8013224:	f1b8 0f00 	cmp.w	r8, #0
 8013228:	db30      	blt.n	801328c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x124>
            return Q5(v - q5.v);
 801322a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801322c:	eba3 0060 	sub.w	r0, r3, r0, asr #1
        int32_t rmin = ((circleRadius - (circleLineWidth / 2)) * CWRUtil::cosine((circleArcIncrement + 1) / 2)).to<int>();
 8013230:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8013234:	3201      	adds	r2, #1
 8013236:	1052      	asrs	r2, r2, #1
     *
     * @see sine()
     */
    static Q15 cosine(int i)
    {
        return sine(90 - i);
 8013238:	f1c2 025a 	rsb	r2, r2, #90	; 0x5a
        i = ((i % 360) + 360) % 360;
 801323c:	49c3      	ldr	r1, [pc, #780]	; (801354c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 801323e:	fb81 6302 	smull	r6, r3, r1, r2
 8013242:	189e      	adds	r6, r3, r2
 8013244:	17d3      	asrs	r3, r2, #31
 8013246:	ebc3 2326 	rsb	r3, r3, r6, asr #8
 801324a:	f44f 76b4 	mov.w	r6, #360	; 0x168
 801324e:	fb06 2313 	mls	r3, r6, r3, r2
 8013252:	4433      	add	r3, r6
 8013254:	fb81 2103 	smull	r2, r1, r1, r3
 8013258:	4419      	add	r1, r3
 801325a:	17da      	asrs	r2, r3, #31
 801325c:	ebc2 2221 	rsb	r2, r2, r1, asr #8
 8013260:	fb06 3212 	mls	r2, r6, r2, r3
        if (i <= 90)
 8013264:	2a5a      	cmp	r2, #90	; 0x5a
 8013266:	dd14      	ble.n	8013292 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x12a>
        if (i <= 180)
 8013268:	2ab4      	cmp	r2, #180	; 0xb4
 801326a:	dd5d      	ble.n	8013328 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1c0>
        if (i <= 270)
 801326c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8013270:	dd60      	ble.n	8013334 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1cc>
        return Q15(-int32_t(sineTable[360 - i]));
 8013272:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8013276:	4bb6      	ldr	r3, [pc, #728]	; (8013550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8013278:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801327c:	4249      	negs	r1, r1
 801327e:	e00b      	b.n	8013298 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8013280:	f106 051f 	add.w	r5, r6, #31
 8013284:	e7bf      	b.n	8013206 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9e>
 8013286:	f100 031f 	add.w	r3, r0, #31
 801328a:	e7c4      	b.n	8013216 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xae>
            return Q5(v / i);
 801328c:	f108 0001 	add.w	r0, r8, #1
 8013290:	e7cb      	b.n	801322a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xc2>
            return Q15(sineTable[i]);
 8013292:	4baf      	ldr	r3, [pc, #700]	; (8013550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8013294:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 8013298:	ab07      	add	r3, sp, #28
 801329a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801329e:	f00e fb5e 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80132a2:	2800      	cmp	r0, #0
 80132a4:	db4c      	blt.n	8013340 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1d8>
 80132a6:	1140      	asrs	r0, r0, #5
        if (dsqr < rmin * rmin)
 80132a8:	fb00 f000 	mul.w	r0, r0, r0
 80132ac:	42a8      	cmp	r0, r5
 80132ae:	f300 837f 	bgt.w	80139b0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x848>
    Canvas canvas(this, invalidatedArea);
 80132b2:	463a      	mov	r2, r7
 80132b4:	4621      	mov	r1, r4
 80132b6:	a80a      	add	r0, sp, #40	; 0x28
 80132b8:	f7fe f8d2 	bl	8011460 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
    CWRUtil::Q5 radius = circleRadius;
 80132bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    CWRUtil::Q5 lineWidth = circleLineWidth;
 80132be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80132c0:	9309      	str	r3, [sp, #36]	; 0x24
            return Q5(v * i);
 80132c2:	4632      	mov	r2, r6
    if (circleLineWidth > circleRadius * 2)
 80132c4:	ebb3 0f46 	cmp.w	r3, r6, lsl #1
 80132c8:	dd09      	ble.n	80132de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
            return Q5(v / i);
 80132ca:	4619      	mov	r1, r3
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	db39      	blt.n	8013344 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1dc>
            return Q5(v + q5.v);
 80132d0:	eb02 0261 	add.w	r2, r2, r1, asr #1
        lineWidth = (circleRadius + circleLineWidth / 2);
 80132d4:	9209      	str	r2, [sp, #36]	; 0x24
            return Q5(v / i);
 80132d6:	4616      	mov	r6, r2
 80132d8:	2a00      	cmp	r2, #0
 80132da:	db35      	blt.n	8013348 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e0>
        radius = lineWidth / 2;
 80132dc:	1076      	asrs	r6, r6, #1
    CWRUtil::Q5 arc = arcStart;
 80132de:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80132e0:	9308      	str	r3, [sp, #32]
    CWRUtil::Q5 circleArcIncrementQ5 = CWRUtil::toQ5<int>(circleArcIncrement);
 80132e2:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80132e6:	016d      	lsls	r5, r5, #5
 80132e8:	462f      	mov	r7, r5
            return Q5(v + q5.v);
 80132ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ec:	eb03 0246 	add.w	r2, r3, r6, lsl #1
    moveToAR2(canvas, arc, (radius * 2) + lineWidth);
 80132f0:	ab40      	add	r3, sp, #256	; 0x100
 80132f2:	f843 2d18 	str.w	r2, [r3, #-24]!
 80132f6:	aa08      	add	r2, sp, #32
 80132f8:	a90a      	add	r1, sp, #40	; 0x28
 80132fa:	4620      	mov	r0, r4
 80132fc:	f7fe fe5a 	bl	8011fb4 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
    CWRUtil::Q5 nextArc = CWRUtil::Q5(ROUNDUP(arc + CWRUtil::toQ5<int>(1), circleArcIncrementQ5));
 8013300:	bb25      	cbnz	r5, 801334c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e4>
 8013302:	9d08      	ldr	r5, [sp, #32]
 8013304:	3520      	adds	r5, #32
            return v;
 8013306:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    while (nextArc <= arcEnd)
 8013308:	42ab      	cmp	r3, r5
 801330a:	db38      	blt.n	801337e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x216>
        arc = nextArc;
 801330c:	9508      	str	r5, [sp, #32]
            return Q5(v + q5.v);
 801330e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013310:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        lineToAR2(canvas, arc, (radius * 2) + lineWidth);
 8013314:	ab40      	add	r3, sp, #256	; 0x100
 8013316:	f843 2d14 	str.w	r2, [r3, #-20]!
 801331a:	aa08      	add	r2, sp, #32
 801331c:	a90a      	add	r1, sp, #40	; 0x28
 801331e:	4620      	mov	r0, r4
 8013320:	f7ff f904 	bl	801252c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
        nextArc = nextArc + circleArcIncrementQ5;
 8013324:	443d      	add	r5, r7
    while (nextArc <= arcEnd)
 8013326:	e7ee      	b.n	8013306 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
            return Q15(sineTable[180 - i]);
 8013328:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801332c:	4b88      	ldr	r3, [pc, #544]	; (8013550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 801332e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8013332:	e7b1      	b.n	8013298 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
            return Q15(-int32_t(sineTable[i - 180]));
 8013334:	3ab4      	subs	r2, #180	; 0xb4
 8013336:	4b86      	ldr	r3, [pc, #536]	; (8013550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8013338:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801333c:	4249      	negs	r1, r1
 801333e:	e7ab      	b.n	8013298 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8013340:	301f      	adds	r0, #31
 8013342:	e7b0      	b.n	80132a6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x13e>
            return Q5(v / i);
 8013344:	1c59      	adds	r1, r3, #1
 8013346:	e7c3      	b.n	80132d0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x168>
 8013348:	1c56      	adds	r6, r2, #1
 801334a:	e7c7      	b.n	80132dc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x174>
            return Q5(v + q5.v);
 801334c:	9b08      	ldr	r3, [sp, #32]
 801334e:	f103 0820 	add.w	r8, r3, #32
    CWRUtil::Q5 nextArc = CWRUtil::Q5(ROUNDUP(arc + CWRUtil::toQ5<int>(1), circleArcIncrementQ5));
 8013352:	4628      	mov	r0, r5
 8013354:	f7ff fa76 	bl	8012844 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 8013358:	4683      	mov	fp, r0
 801335a:	4628      	mov	r0, r5
 801335c:	f7ff fa72 	bl	8012844 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 8013360:	fb98 faf0 	sdiv	sl, r8, r0
 8013364:	fb00 8a1a 	mls	sl, r0, sl, r8
 8013368:	ebab 0a0a 	sub.w	sl, fp, sl
 801336c:	4628      	mov	r0, r5
 801336e:	f7ff fa69 	bl	8012844 <_ZN8touchgfx3absINS_7CWRUtil2Q5EEET_S3_>
 8013372:	fb9a f5f0 	sdiv	r5, sl, r0
 8013376:	fb00 a515 	mls	r5, r0, r5, sl
 801337a:	4445      	add	r5, r8
 801337c:	e7c3      	b.n	8013306 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
            return v;
 801337e:	9a08      	ldr	r2, [sp, #32]
    if (arc < arcEnd)
 8013380:	4293      	cmp	r3, r2
 8013382:	dc11      	bgt.n	80133a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x240>
 8013384:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (lineWidth == CWRUtil::toQ5<int>(0))
 8013386:	bb0b      	cbnz	r3, 80133cc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x264>
            return Q5(v - q5.v);
 8013388:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801338a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 801338c:	1a9b      	subs	r3, r3, r2
        if (arcEnd - arcStart < _360)
 801338e:	4599      	cmp	r9, r3
 8013390:	dc16      	bgt.n	80133c0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x258>
    return canvas.render();
 8013392:	a80a      	add	r0, sp, #40	; 0x28
 8013394:	f7fe faac 	bl	80118f0 <_ZN8touchgfx6Canvas6renderEv>
 8013398:	4604      	mov	r4, r0
    Canvas canvas(this, invalidatedArea);
 801339a:	a80a      	add	r0, sp, #40	; 0x28
 801339c:	f7fe fcb2 	bl	8011d04 <_ZN8touchgfx6CanvasD1Ev>
}
 80133a0:	4620      	mov	r0, r4
 80133a2:	b041      	add	sp, #260	; 0x104
 80133a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return Q5(v + q5.v);
 80133a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133aa:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        lineToAR2(canvas, arcEnd, (radius * 2) + lineWidth);
 80133ae:	ab40      	add	r3, sp, #256	; 0x100
 80133b0:	f843 2d10 	str.w	r2, [r3, #-16]!
 80133b4:	aa38      	add	r2, sp, #224	; 0xe0
 80133b6:	a90a      	add	r1, sp, #40	; 0x28
 80133b8:	4620      	mov	r0, r4
 80133ba:	f7ff f8b7 	bl	801252c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80133be:	e7e1      	b.n	8013384 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x21c>
            canvas.lineTo(circleCenterX, circleCenterY);
 80133c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80133c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80133c4:	a80a      	add	r0, sp, #40	; 0x28
 80133c6:	f7fe f9b5 	bl	8011734 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80133ca:	e7e2      	b.n	8013392 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
        CWRUtil::Q5 circleCapArcIncrementQ5 = CWRUtil::toQ5<int>(circleCapArcIncrement);
 80133cc:	f894 8049 	ldrb.w	r8, [r4, #73]	; 0x49
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80133d0:	ea4f 1848 	mov.w	r8, r8, lsl #5
            return Q5(v - q5.v);
 80133d4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80133d6:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80133d8:	1a9b      	subs	r3, r3, r2
        if (arcEnd - arcStart < _360)
 80133da:	4599      	cmp	r9, r3
 80133dc:	dc17      	bgt.n	801340e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a6>
            return v;
 80133de:	9a38      	ldr	r2, [sp, #224]	; 0xe0
        if (arc < arcEnd)
 80133e0:	9b08      	ldr	r3, [sp, #32]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	f300 8171 	bgt.w	80136ca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x562>
        nextArc = arc;
 80133e8:	9d08      	ldr	r5, [sp, #32]
 80133ea:	9b39      	ldr	r3, [sp, #228]	; 0xe4
        while (nextArc >= arcStart)
 80133ec:	42ab      	cmp	r3, r5
 80133ee:	f300 8178 	bgt.w	80136e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x57a>
            arc = nextArc;
 80133f2:	9508      	str	r5, [sp, #32]
            return Q5(v - q5.v);
 80133f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133f6:	ebc3 0246 	rsb	r2, r3, r6, lsl #1
            lineToAR2(canvas, arc, (radius * 2) - lineWidth);
 80133fa:	ab40      	add	r3, sp, #256	; 0x100
 80133fc:	f843 2d08 	str.w	r2, [r3, #-8]!
 8013400:	aa08      	add	r2, sp, #32
 8013402:	a90a      	add	r1, sp, #40	; 0x28
 8013404:	4620      	mov	r0, r4
 8013406:	f7ff f891 	bl	801252c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
            nextArc = nextArc - circleArcIncrementQ5;
 801340a:	1bed      	subs	r5, r5, r7
        while (nextArc >= arcStart)
 801340c:	e7ed      	b.n	80133ea <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x282>
 801340e:	9938      	ldr	r1, [sp, #224]	; 0xe0
        i = Q5(((i % _360) + _360) % _360);
 8013410:	4a4e      	ldr	r2, [pc, #312]	; (801354c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 8013412:	fb82 0301 	smull	r0, r3, r2, r1
 8013416:	1858      	adds	r0, r3, r1
 8013418:	17cb      	asrs	r3, r1, #31
 801341a:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 801341e:	f44f 5534 	mov.w	r5, #11520	; 0x2d00
 8013422:	fb05 1313 	mls	r3, r5, r3, r1
 8013426:	442b      	add	r3, r5
 8013428:	fb82 1203 	smull	r1, r2, r2, r3
 801342c:	441a      	add	r2, r3
 801342e:	17d8      	asrs	r0, r3, #31
 8013430:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 8013434:	fb05 3010 	mls	r0, r5, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 8013438:	4243      	negs	r3, r0
 801343a:	f000 011f 	and.w	r1, r0, #31
 801343e:	f003 031f 	and.w	r3, r3, #31
 8013442:	bf58      	it	pl
 8013444:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8013446:	4602      	mov	r2, r0
 8013448:	2800      	cmp	r0, #0
 801344a:	db23      	blt.n	8013494 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x32c>
 801344c:	1155      	asrs	r5, r2, #5
        i = ((i % 360) + 360) % 360;
 801344e:	483f      	ldr	r0, [pc, #252]	; (801354c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 8013450:	fb80 c305 	smull	ip, r3, r0, r5
 8013454:	eb03 0c05 	add.w	ip, r3, r5
 8013458:	17d3      	asrs	r3, r2, #31
 801345a:	ebc3 232c 	rsb	r3, r3, ip, asr #8
 801345e:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8013462:	fb0c 5313 	mls	r3, ip, r3, r5
 8013466:	4463      	add	r3, ip
 8013468:	fb80 2003 	smull	r2, r0, r0, r3
 801346c:	4418      	add	r0, r3
 801346e:	17da      	asrs	r2, r3, #31
 8013470:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8013474:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 8013478:	2a5a      	cmp	r2, #90	; 0x5a
 801347a:	dd0e      	ble.n	801349a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x332>
        if (i <= 180)
 801347c:	2ab4      	cmp	r2, #180	; 0xb4
 801347e:	dd69      	ble.n	8013554 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3ec>
        if (i <= 270)
 8013480:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8013484:	dd6c      	ble.n	8013560 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3f8>
        return Q15(-int32_t(sineTable[360 - i]));
 8013486:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801348a:	4b31      	ldr	r3, [pc, #196]	; (8013550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 801348c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013490:	4240      	negs	r0, r0
 8013492:	e005      	b.n	80134a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x338>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8013494:	f100 021f 	add.w	r2, r0, #31
 8013498:	e7d8      	b.n	801344c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2e4>
            return Q15(sineTable[i]);
 801349a:	4b2d      	ldr	r3, [pc, #180]	; (8013550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 801349c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80134a0:	4682      	mov	sl, r0
        if (fraction == 0)
 80134a2:	2900      	cmp	r1, #0
 80134a4:	d162      	bne.n	801356c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x404>
            return sineLow;
 80134a6:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80134a8:	4635      	mov	r5, r6
 80134aa:	ab07      	add	r3, sp, #28
 80134ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80134b0:	4630      	mov	r0, r6
 80134b2:	f00e fa54 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v + q5.v);
 80134b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80134b8:	4418      	add	r0, r3
            CWRUtil::Q5 capX = circleCenterX + (radius * CWRUtil::sine(arcEnd));
 80134ba:	9005      	str	r0, [sp, #20]
 80134bc:	9938      	ldr	r1, [sp, #224]	; 0xe0
            return Q5(v - q5.v);
 80134be:	f5c1 6134 	rsb	r1, r1, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 80134c2:	4a22      	ldr	r2, [pc, #136]	; (801354c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 80134c4:	fb82 0301 	smull	r0, r3, r2, r1
 80134c8:	1858      	adds	r0, r3, r1
 80134ca:	17cb      	asrs	r3, r1, #31
 80134cc:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 80134d0:	f44f 5034 	mov.w	r0, #11520	; 0x2d00
 80134d4:	fb00 1313 	mls	r3, r0, r3, r1
 80134d8:	4403      	add	r3, r0
 80134da:	fb82 1203 	smull	r1, r2, r2, r3
 80134de:	18d1      	adds	r1, r2, r3
 80134e0:	17da      	asrs	r2, r3, #31
 80134e2:	ebc2 3261 	rsb	r2, r2, r1, asr #13
 80134e6:	fb00 3212 	mls	r2, r0, r2, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80134ea:	4253      	negs	r3, r2
 80134ec:	f002 011f 	and.w	r1, r2, #31
 80134f0:	f003 031f 	and.w	r3, r3, #31
 80134f4:	bf58      	it	pl
 80134f6:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80134f8:	4610      	mov	r0, r2
 80134fa:	2a00      	cmp	r2, #0
 80134fc:	db71      	blt.n	80135e2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x47a>
 80134fe:	ea4f 1c60 	mov.w	ip, r0, asr #5
        i = ((i % 360) + 360) % 360;
 8013502:	4a12      	ldr	r2, [pc, #72]	; (801354c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e4>)
 8013504:	fb82 e30c 	smull	lr, r3, r2, ip
 8013508:	eb03 0e0c 	add.w	lr, r3, ip
 801350c:	17c3      	asrs	r3, r0, #31
 801350e:	ebc3 232e 	rsb	r3, r3, lr, asr #8
 8013512:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8013516:	fb00 c313 	mls	r3, r0, r3, ip
 801351a:	4403      	add	r3, r0
 801351c:	fb82 e203 	smull	lr, r2, r2, r3
 8013520:	eb02 0e03 	add.w	lr, r2, r3
 8013524:	17da      	asrs	r2, r3, #31
 8013526:	ebc2 222e 	rsb	r2, r2, lr, asr #8
 801352a:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 801352e:	2a5a      	cmp	r2, #90	; 0x5a
 8013530:	dd5a      	ble.n	80135e8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x480>
        if (i <= 180)
 8013532:	2ab4      	cmp	r2, #180	; 0xb4
 8013534:	dd7f      	ble.n	8013636 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4ce>
        if (i <= 270)
 8013536:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 801353a:	f340 8082 	ble.w	8013642 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4da>
        return Q15(-int32_t(sineTable[360 - i]));
 801353e:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8013542:	4b03      	ldr	r3, [pc, #12]	; (8013550 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3e8>)
 8013544:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013548:	4240      	negs	r0, r0
 801354a:	e050      	b.n	80135ee <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x486>
 801354c:	b60b60b7 	.word	0xb60b60b7
 8013550:	08027228 	.word	0x08027228
            return Q15(sineTable[180 - i]);
 8013554:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8013558:	4bbf      	ldr	r3, [pc, #764]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 801355a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801355e:	e79f      	b.n	80134a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x338>
            return Q15(-int32_t(sineTable[i - 180]));
 8013560:	3ab4      	subs	r2, #180	; 0xb4
 8013562:	4bbd      	ldr	r3, [pc, #756]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8013564:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013568:	4240      	negs	r0, r0
 801356a:	e799      	b.n	80134a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x338>
        Q15 sineHigh = sine(i.to<int>() + 1);
 801356c:	3501      	adds	r5, #1
        i = ((i % 360) + 360) % 360;
 801356e:	4abb      	ldr	r2, [pc, #748]	; (801385c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8013570:	fb82 0305 	smull	r0, r3, r2, r5
 8013574:	1958      	adds	r0, r3, r5
 8013576:	17eb      	asrs	r3, r5, #31
 8013578:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 801357c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8013580:	fb00 5313 	mls	r3, r0, r3, r5
 8013584:	4403      	add	r3, r0
 8013586:	fb82 5203 	smull	r5, r2, r2, r3
 801358a:	18d5      	adds	r5, r2, r3
 801358c:	17da      	asrs	r2, r3, #31
 801358e:	ebc2 2225 	rsb	r2, r2, r5, asr #8
 8013592:	fb00 3212 	mls	r2, r0, r2, r3
        if (i <= 90)
 8013596:	2a5a      	cmp	r2, #90	; 0x5a
 8013598:	dd0b      	ble.n	80135b2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x44a>
        if (i <= 180)
 801359a:	2ab4      	cmp	r2, #180	; 0xb4
 801359c:	dd15      	ble.n	80135ca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x462>
        if (i <= 270)
 801359e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 80135a2:	dd18      	ble.n	80135d6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x46e>
        return Q15(-int32_t(sineTable[360 - i]));
 80135a4:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 80135a8:	4bab      	ldr	r3, [pc, #684]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 80135aa:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80135ae:	4240      	negs	r0, r0
 80135b0:	e002      	b.n	80135b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x450>
            return Q15(sineTable[i]);
 80135b2:	4ba9      	ldr	r3, [pc, #676]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 80135b4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80135b8:	ab07      	add	r3, sp, #28
 80135ba:	2220      	movs	r2, #32
 80135bc:	eba0 000a 	sub.w	r0, r0, sl
 80135c0:	f00e f9cd 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 80135c4:	eb0a 0100 	add.w	r1, sl, r0
 80135c8:	e76e      	b.n	80134a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x340>
            return Q15(sineTable[180 - i]);
 80135ca:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80135ce:	4ba2      	ldr	r3, [pc, #648]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 80135d0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80135d4:	e7f0      	b.n	80135b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x450>
            return Q15(-int32_t(sineTable[i - 180]));
 80135d6:	3ab4      	subs	r2, #180	; 0xb4
 80135d8:	4b9f      	ldr	r3, [pc, #636]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 80135da:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80135de:	4240      	negs	r0, r0
 80135e0:	e7ea      	b.n	80135b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x450>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80135e2:	f102 001f 	add.w	r0, r2, #31
 80135e6:	e78a      	b.n	80134fe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x396>
            return Q15(sineTable[i]);
 80135e8:	4b9b      	ldr	r3, [pc, #620]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 80135ea:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80135ee:	4682      	mov	sl, r0
        if (fraction == 0)
 80135f0:	bb69      	cbnz	r1, 801364e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e6>
            return sineLow;
 80135f2:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80135f4:	ab07      	add	r3, sp, #28
 80135f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80135fa:	4628      	mov	r0, r5
 80135fc:	f00e f9af 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v - q5.v);
 8013600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013602:	1a18      	subs	r0, r3, r0
            CWRUtil::Q5 capY = circleCenterY - (radius * CWRUtil::cosine(arcEnd));
 8013604:	9006      	str	r0, [sp, #24]
            return Q5(v + q5.v);
 8013606:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8013608:	4443      	add	r3, r8
            for (CWRUtil::Q5 capAngle = arcEnd + circleCapArcIncrementQ5; capAngle < arcEnd + _180; capAngle = capAngle + circleCapArcIncrementQ5)
 801360a:	9307      	str	r3, [sp, #28]
 801360c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801360e:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8013612:	9a07      	ldr	r2, [sp, #28]
 8013614:	4293      	cmp	r3, r2
 8013616:	f77f aee2 	ble.w	80133de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x276>
                lineToXYAR2(canvas, capX, capY, capAngle, lineWidth);
 801361a:	ab09      	add	r3, sp, #36	; 0x24
 801361c:	9301      	str	r3, [sp, #4]
 801361e:	ab07      	add	r3, sp, #28
 8013620:	9300      	str	r3, [sp, #0]
 8013622:	ab06      	add	r3, sp, #24
 8013624:	aa05      	add	r2, sp, #20
 8013626:	a90a      	add	r1, sp, #40	; 0x28
 8013628:	4620      	mov	r0, r4
 801362a:	f7fe fe1f 	bl	801226c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 801362e:	9b07      	ldr	r3, [sp, #28]
 8013630:	4443      	add	r3, r8
            for (CWRUtil::Q5 capAngle = arcEnd + circleCapArcIncrementQ5; capAngle < arcEnd + _180; capAngle = capAngle + circleCapArcIncrementQ5)
 8013632:	9307      	str	r3, [sp, #28]
 8013634:	e7ea      	b.n	801360c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4a4>
            return Q15(sineTable[180 - i]);
 8013636:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801363a:	4b87      	ldr	r3, [pc, #540]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 801363c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013640:	e7d5      	b.n	80135ee <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x486>
            return Q15(-int32_t(sineTable[i - 180]));
 8013642:	3ab4      	subs	r2, #180	; 0xb4
 8013644:	4b84      	ldr	r3, [pc, #528]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8013646:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801364a:	4240      	negs	r0, r0
 801364c:	e7cf      	b.n	80135ee <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x486>
        Q15 sineHigh = sine(i.to<int>() + 1);
 801364e:	f10c 0c01 	add.w	ip, ip, #1
        i = ((i % 360) + 360) % 360;
 8013652:	4a82      	ldr	r2, [pc, #520]	; (801385c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8013654:	fb82 030c 	smull	r0, r3, r2, ip
 8013658:	eb03 000c 	add.w	r0, r3, ip
 801365c:	ea4f 73ec 	mov.w	r3, ip, asr #31
 8013660:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8013664:	f44f 7eb4 	mov.w	lr, #360	; 0x168
 8013668:	fb0e c313 	mls	r3, lr, r3, ip
 801366c:	4473      	add	r3, lr
 801366e:	fb82 0203 	smull	r0, r2, r2, r3
 8013672:	18d0      	adds	r0, r2, r3
 8013674:	17da      	asrs	r2, r3, #31
 8013676:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 801367a:	fb0e 3212 	mls	r2, lr, r2, r3
        if (i <= 90)
 801367e:	2a5a      	cmp	r2, #90	; 0x5a
 8013680:	dd0b      	ble.n	801369a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x532>
        if (i <= 180)
 8013682:	2ab4      	cmp	r2, #180	; 0xb4
 8013684:	dd15      	ble.n	80136b2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x54a>
        if (i <= 270)
 8013686:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 801368a:	dd18      	ble.n	80136be <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x556>
        return Q15(-int32_t(sineTable[360 - i]));
 801368c:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8013690:	4b71      	ldr	r3, [pc, #452]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8013692:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013696:	4240      	negs	r0, r0
 8013698:	e002      	b.n	80136a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x538>
            return Q15(sineTable[i]);
 801369a:	4b6f      	ldr	r3, [pc, #444]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 801369c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80136a0:	ab07      	add	r3, sp, #28
 80136a2:	2220      	movs	r2, #32
 80136a4:	eba0 000a 	sub.w	r0, r0, sl
 80136a8:	f00e f959 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 80136ac:	eb0a 0100 	add.w	r1, sl, r0
 80136b0:	e7a0      	b.n	80135f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x48c>
            return Q15(sineTable[180 - i]);
 80136b2:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80136b6:	4b68      	ldr	r3, [pc, #416]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 80136b8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80136bc:	e7f0      	b.n	80136a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x538>
            return Q15(-int32_t(sineTable[i - 180]));
 80136be:	3ab4      	subs	r2, #180	; 0xb4
 80136c0:	4b65      	ldr	r3, [pc, #404]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 80136c2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80136c6:	4240      	negs	r0, r0
 80136c8:	e7ea      	b.n	80136a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x538>
            return Q5(v - q5.v);
 80136ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136cc:	ebc3 0246 	rsb	r2, r3, r6, lsl #1
            lineToAR2(canvas, arcEnd, (radius * 2) - lineWidth);
 80136d0:	ab40      	add	r3, sp, #256	; 0x100
 80136d2:	f843 2d0c 	str.w	r2, [r3, #-12]!
 80136d6:	aa38      	add	r2, sp, #224	; 0xe0
 80136d8:	a90a      	add	r1, sp, #40	; 0x28
 80136da:	4620      	mov	r0, r4
 80136dc:	f7fe ff26 	bl	801252c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80136e0:	e682      	b.n	80133e8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x280>
            return v;
 80136e2:	9a08      	ldr	r2, [sp, #32]
        if (arc > arcStart)
 80136e4:	4293      	cmp	r3, r2
 80136e6:	db47      	blt.n	8013778 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x610>
            return Q5(v - q5.v);
 80136e8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80136ea:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80136ec:	1a9b      	subs	r3, r3, r2
        if (arcEnd - arcStart < _360)
 80136ee:	4599      	cmp	r9, r3
 80136f0:	f77f ae4f 	ble.w	8013392 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 80136f4:	4611      	mov	r1, r2
        i = Q5(((i % _360) + _360) % _360);
 80136f6:	4a59      	ldr	r2, [pc, #356]	; (801385c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 80136f8:	fb82 0301 	smull	r0, r3, r2, r1
 80136fc:	1858      	adds	r0, r3, r1
 80136fe:	17cb      	asrs	r3, r1, #31
 8013700:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 8013704:	f44f 5534 	mov.w	r5, #11520	; 0x2d00
 8013708:	fb05 1313 	mls	r3, r5, r3, r1
 801370c:	442b      	add	r3, r5
 801370e:	fb82 1203 	smull	r1, r2, r2, r3
 8013712:	441a      	add	r2, r3
 8013714:	17d8      	asrs	r0, r3, #31
 8013716:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 801371a:	fb05 3010 	mls	r0, r5, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 801371e:	4243      	negs	r3, r0
 8013720:	f000 011f 	and.w	r1, r0, #31
 8013724:	f003 031f 	and.w	r3, r3, #31
 8013728:	bf58      	it	pl
 801372a:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 801372c:	4602      	mov	r2, r0
 801372e:	2800      	cmp	r0, #0
 8013730:	db2e      	blt.n	8013790 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x628>
 8013732:	1155      	asrs	r5, r2, #5
        i = ((i % 360) + 360) % 360;
 8013734:	4849      	ldr	r0, [pc, #292]	; (801385c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 8013736:	fb80 7305 	smull	r7, r3, r0, r5
 801373a:	195f      	adds	r7, r3, r5
 801373c:	17d3      	asrs	r3, r2, #31
 801373e:	ebc3 2327 	rsb	r3, r3, r7, asr #8
 8013742:	f44f 77b4 	mov.w	r7, #360	; 0x168
 8013746:	fb07 5313 	mls	r3, r7, r3, r5
 801374a:	443b      	add	r3, r7
 801374c:	fb80 2003 	smull	r2, r0, r0, r3
 8013750:	4418      	add	r0, r3
 8013752:	17da      	asrs	r2, r3, #31
 8013754:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8013758:	fb07 3212 	mls	r2, r7, r2, r3
        if (i <= 90)
 801375c:	2a5a      	cmp	r2, #90	; 0x5a
 801375e:	dd1a      	ble.n	8013796 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x62e>
        if (i <= 180)
 8013760:	2ab4      	cmp	r2, #180	; 0xb4
 8013762:	dd6d      	ble.n	8013840 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6d8>
        if (i <= 270)
 8013764:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8013768:	dd70      	ble.n	801384c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6e4>
        return Q15(-int32_t(sineTable[360 - i]));
 801376a:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801376e:	4b3a      	ldr	r3, [pc, #232]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8013770:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013774:	4240      	negs	r0, r0
 8013776:	e011      	b.n	801379c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x634>
            return Q5(v - q5.v);
 8013778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801377a:	ebc3 0246 	rsb	r2, r3, r6, lsl #1
            lineToAR2(canvas, arcStart, (radius * 2) - lineWidth);
 801377e:	ab40      	add	r3, sp, #256	; 0x100
 8013780:	f843 2d04 	str.w	r2, [r3, #-4]!
 8013784:	aa39      	add	r2, sp, #228	; 0xe4
 8013786:	a90a      	add	r1, sp, #40	; 0x28
 8013788:	4620      	mov	r0, r4
 801378a:	f7fe fecf 	bl	801252c <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801378e:	e7ab      	b.n	80136e8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x580>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 8013790:	f100 021f 	add.w	r2, r0, #31
 8013794:	e7cd      	b.n	8013732 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x5ca>
            return Q15(sineTable[i]);
 8013796:	4b30      	ldr	r3, [pc, #192]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8013798:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801379c:	4607      	mov	r7, r0
        if (fraction == 0)
 801379e:	2900      	cmp	r1, #0
 80137a0:	d15e      	bne.n	8013860 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f8>
            return sineLow;
 80137a2:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80137a4:	4635      	mov	r5, r6
 80137a6:	ab07      	add	r3, sp, #28
 80137a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80137ac:	4630      	mov	r0, r6
 80137ae:	f00e f8d6 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v + q5.v);
 80137b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80137b4:	4418      	add	r0, r3
            CWRUtil::Q5 capX = circleCenterX + (radius * CWRUtil::sine(arcStart));
 80137b6:	9005      	str	r0, [sp, #20]
 80137b8:	9939      	ldr	r1, [sp, #228]	; 0xe4
            return Q5(v - q5.v);
 80137ba:	f5c1 6134 	rsb	r1, r1, #2880	; 0xb40
        i = Q5(((i % _360) + _360) % _360);
 80137be:	4a27      	ldr	r2, [pc, #156]	; (801385c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 80137c0:	fb82 0301 	smull	r0, r3, r2, r1
 80137c4:	1858      	adds	r0, r3, r1
 80137c6:	17cb      	asrs	r3, r1, #31
 80137c8:	ebc3 3360 	rsb	r3, r3, r0, asr #13
 80137cc:	f44f 5634 	mov.w	r6, #11520	; 0x2d00
 80137d0:	fb06 1313 	mls	r3, r6, r3, r1
 80137d4:	4433      	add	r3, r6
 80137d6:	fb82 1203 	smull	r1, r2, r2, r3
 80137da:	441a      	add	r2, r3
 80137dc:	17d8      	asrs	r0, r3, #31
 80137de:	ebc0 3062 	rsb	r0, r0, r2, asr #13
 80137e2:	fb06 3010 	mls	r0, r6, r0, r3
        int16_t fraction = i % Rasterizer::POLY_BASE_SIZE;
 80137e6:	4243      	negs	r3, r0
 80137e8:	f000 011f 	and.w	r1, r0, #31
 80137ec:	f003 031f 	and.w	r3, r3, #31
 80137f0:	bf58      	it	pl
 80137f2:	4259      	negpl	r1, r3
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80137f4:	4602      	mov	r2, r0
 80137f6:	2800      	cmp	r0, #0
 80137f8:	db6b      	blt.n	80138d2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x76a>
 80137fa:	1156      	asrs	r6, r2, #5
        i = ((i % 360) + 360) % 360;
 80137fc:	4817      	ldr	r0, [pc, #92]	; (801385c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f4>)
 80137fe:	fb80 7306 	smull	r7, r3, r0, r6
 8013802:	199f      	adds	r7, r3, r6
 8013804:	17d3      	asrs	r3, r2, #31
 8013806:	ebc3 2327 	rsb	r3, r3, r7, asr #8
 801380a:	f44f 77b4 	mov.w	r7, #360	; 0x168
 801380e:	fb07 6313 	mls	r3, r7, r3, r6
 8013812:	443b      	add	r3, r7
 8013814:	fb80 2003 	smull	r2, r0, r0, r3
 8013818:	4418      	add	r0, r3
 801381a:	17da      	asrs	r2, r3, #31
 801381c:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8013820:	fb07 3212 	mls	r2, r7, r2, r3
        if (i <= 90)
 8013824:	2a5a      	cmp	r2, #90	; 0x5a
 8013826:	dd57      	ble.n	80138d8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x770>
        if (i <= 180)
 8013828:	2ab4      	cmp	r2, #180	; 0xb4
 801382a:	dd7c      	ble.n	8013926 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x7be>
        if (i <= 270)
 801382c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8013830:	dd7f      	ble.n	8013932 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x7ca>
        return Q15(-int32_t(sineTable[360 - i]));
 8013832:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 8013836:	4b08      	ldr	r3, [pc, #32]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8013838:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801383c:	4240      	negs	r0, r0
 801383e:	e04e      	b.n	80138de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x776>
            return Q15(sineTable[180 - i]);
 8013840:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 8013844:	4b04      	ldr	r3, [pc, #16]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8013846:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801384a:	e7a7      	b.n	801379c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x634>
            return Q15(-int32_t(sineTable[i - 180]));
 801384c:	3ab4      	subs	r2, #180	; 0xb4
 801384e:	4b02      	ldr	r3, [pc, #8]	; (8013858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x6f0>)
 8013850:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013854:	4240      	negs	r0, r0
 8013856:	e7a1      	b.n	801379c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x634>
 8013858:	08027228 	.word	0x08027228
 801385c:	b60b60b7 	.word	0xb60b60b7
        Q15 sineHigh = sine(i.to<int>() + 1);
 8013860:	3501      	adds	r5, #1
        i = ((i % 360) + 360) % 360;
 8013862:	4a54      	ldr	r2, [pc, #336]	; (80139b4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x84c>)
 8013864:	fb82 0305 	smull	r0, r3, r2, r5
 8013868:	1958      	adds	r0, r3, r5
 801386a:	17eb      	asrs	r3, r5, #31
 801386c:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8013870:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8013874:	fb0c 5313 	mls	r3, ip, r3, r5
 8013878:	4463      	add	r3, ip
 801387a:	fb82 0203 	smull	r0, r2, r2, r3
 801387e:	18d0      	adds	r0, r2, r3
 8013880:	17da      	asrs	r2, r3, #31
 8013882:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8013886:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 801388a:	2a5a      	cmp	r2, #90	; 0x5a
 801388c:	dd0b      	ble.n	80138a6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x73e>
        if (i <= 180)
 801388e:	2ab4      	cmp	r2, #180	; 0xb4
 8013890:	dd13      	ble.n	80138ba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x752>
        if (i <= 270)
 8013892:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8013896:	dd16      	ble.n	80138c6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x75e>
        return Q15(-int32_t(sineTable[360 - i]));
 8013898:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801389c:	4b46      	ldr	r3, [pc, #280]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 801389e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80138a2:	4240      	negs	r0, r0
 80138a4:	e002      	b.n	80138ac <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x744>
            return Q15(sineTable[i]);
 80138a6:	4b44      	ldr	r3, [pc, #272]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 80138a8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 80138ac:	ab07      	add	r3, sp, #28
 80138ae:	2220      	movs	r2, #32
 80138b0:	1bc0      	subs	r0, r0, r7
 80138b2:	f00e f854 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 80138b6:	1839      	adds	r1, r7, r0
 80138b8:	e774      	b.n	80137a4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x63c>
            return Q15(sineTable[180 - i]);
 80138ba:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 80138be:	4b3e      	ldr	r3, [pc, #248]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 80138c0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80138c4:	e7f2      	b.n	80138ac <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x744>
            return Q15(-int32_t(sineTable[i - 180]));
 80138c6:	3ab4      	subs	r2, #180	; 0xb4
 80138c8:	4b3b      	ldr	r3, [pc, #236]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 80138ca:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80138ce:	4240      	negs	r0, r0
 80138d0:	e7ec      	b.n	80138ac <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x744>
            return v / (T)Rasterizer::POLY_BASE_SIZE;
 80138d2:	f100 021f 	add.w	r2, r0, #31
 80138d6:	e790      	b.n	80137fa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x692>
            return Q15(sineTable[i]);
 80138d8:	4b37      	ldr	r3, [pc, #220]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 80138da:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80138de:	4607      	mov	r7, r0
        if (fraction == 0)
 80138e0:	bb69      	cbnz	r1, 801393e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x7d6>
            return sineLow;
 80138e2:	4601      	mov	r1, r0
            return Q5(muldiv(v, int(q15), Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE * Rasterizer::POLY_BASE_SIZE, remainder));
 80138e4:	ab07      	add	r3, sp, #28
 80138e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80138ea:	4628      	mov	r0, r5
 80138ec:	f00e f837 	bl	802195e <_ZN8touchgfx6muldivElllRl>
            return Q5(v - q5.v);
 80138f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80138f2:	1a18      	subs	r0, r3, r0
            CWRUtil::Q5 capY = circleCenterY - (radius * CWRUtil::cosine(arcStart));
 80138f4:	9006      	str	r0, [sp, #24]
 80138f6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80138f8:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
            return Q5(v + q5.v);
 80138fc:	4443      	add	r3, r8
            for (CWRUtil::Q5 capAngle = arcStart - _180 + circleCapArcIncrementQ5; capAngle < arcStart; capAngle = capAngle + circleCapArcIncrementQ5)
 80138fe:	9307      	str	r3, [sp, #28]
            return v;
 8013900:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8013902:	9b07      	ldr	r3, [sp, #28]
 8013904:	429a      	cmp	r2, r3
 8013906:	f77f ad44 	ble.w	8013392 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
                lineToXYAR2(canvas, capX, capY, capAngle, lineWidth);
 801390a:	ab09      	add	r3, sp, #36	; 0x24
 801390c:	9301      	str	r3, [sp, #4]
 801390e:	ab07      	add	r3, sp, #28
 8013910:	9300      	str	r3, [sp, #0]
 8013912:	ab06      	add	r3, sp, #24
 8013914:	aa05      	add	r2, sp, #20
 8013916:	a90a      	add	r1, sp, #40	; 0x28
 8013918:	4620      	mov	r0, r4
 801391a:	f7fe fca7 	bl	801226c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
            return Q5(v + q5.v);
 801391e:	9b07      	ldr	r3, [sp, #28]
 8013920:	4443      	add	r3, r8
            for (CWRUtil::Q5 capAngle = arcStart - _180 + circleCapArcIncrementQ5; capAngle < arcStart; capAngle = capAngle + circleCapArcIncrementQ5)
 8013922:	9307      	str	r3, [sp, #28]
 8013924:	e7ec      	b.n	8013900 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x798>
            return Q15(sineTable[180 - i]);
 8013926:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801392a:	4b23      	ldr	r3, [pc, #140]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 801392c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013930:	e7d5      	b.n	80138de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x776>
            return Q15(-int32_t(sineTable[i - 180]));
 8013932:	3ab4      	subs	r2, #180	; 0xb4
 8013934:	4b20      	ldr	r3, [pc, #128]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8013936:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801393a:	4240      	negs	r0, r0
 801393c:	e7cf      	b.n	80138de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x776>
        Q15 sineHigh = sine(i.to<int>() + 1);
 801393e:	3601      	adds	r6, #1
        i = ((i % 360) + 360) % 360;
 8013940:	4a1c      	ldr	r2, [pc, #112]	; (80139b4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x84c>)
 8013942:	fb82 0306 	smull	r0, r3, r2, r6
 8013946:	1998      	adds	r0, r3, r6
 8013948:	17f3      	asrs	r3, r6, #31
 801394a:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 801394e:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 8013952:	fb0c 6313 	mls	r3, ip, r3, r6
 8013956:	4463      	add	r3, ip
 8013958:	fb82 0203 	smull	r0, r2, r2, r3
 801395c:	18d0      	adds	r0, r2, r3
 801395e:	17da      	asrs	r2, r3, #31
 8013960:	ebc2 2220 	rsb	r2, r2, r0, asr #8
 8013964:	fb0c 3212 	mls	r2, ip, r2, r3
        if (i <= 90)
 8013968:	2a5a      	cmp	r2, #90	; 0x5a
 801396a:	dd0b      	ble.n	8013984 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x81c>
        if (i <= 180)
 801396c:	2ab4      	cmp	r2, #180	; 0xb4
 801396e:	dd13      	ble.n	8013998 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x830>
        if (i <= 270)
 8013970:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
 8013974:	dd16      	ble.n	80139a4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x83c>
        return Q15(-int32_t(sineTable[360 - i]));
 8013976:	f5c2 72b4 	rsb	r2, r2, #360	; 0x168
 801397a:	4b0f      	ldr	r3, [pc, #60]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 801397c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8013980:	4240      	negs	r0, r0
 8013982:	e002      	b.n	801398a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x822>
            return Q15(sineTable[i]);
 8013984:	4b0c      	ldr	r3, [pc, #48]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 8013986:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
        return Q15(muldiv(int(sineHigh - sineLow), fraction, Rasterizer::POLY_BASE_SIZE, remainder)) + sineLow;
 801398a:	ab07      	add	r3, sp, #28
 801398c:	2220      	movs	r2, #32
 801398e:	1bc0      	subs	r0, r0, r7
 8013990:	f00d ffe5 	bl	802195e <_ZN8touchgfx6muldivElllRl>
 8013994:	1839      	adds	r1, r7, r0
 8013996:	e7a5      	b.n	80138e4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x77c>
            return Q15(sineTable[180 - i]);
 8013998:	f1c2 02b4 	rsb	r2, r2, #180	; 0xb4
 801399c:	4b06      	ldr	r3, [pc, #24]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 801399e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80139a2:	e7f2      	b.n	801398a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x822>
            return Q15(-int32_t(sineTable[i - 180]));
 80139a4:	3ab4      	subs	r2, #180	; 0xb4
 80139a6:	4b04      	ldr	r3, [pc, #16]	; (80139b8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x850>)
 80139a8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80139ac:	4240      	negs	r0, r0
 80139ae:	e7ec      	b.n	801398a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x822>
            return true;
 80139b0:	2401      	movs	r4, #1
 80139b2:	e4f5      	b.n	80133a0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x238>
 80139b4:	b60b60b7 	.word	0xb60b60b7
 80139b8:	08027228 	.word	0x08027228

080139bc <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_>:

    return true;
}

bool PainterRGB565Bitmap::renderNext(uint8_t& red, uint8_t& green, uint8_t& blue, uint8_t& alpha)
{
 80139bc:	b470      	push	{r4, r5, r6}
 80139be:	9c03      	ldr	r4, [sp, #12]
    if (currentX >= bitmapRectToFrameBuffer.width)
 80139c0:	68c6      	ldr	r6, [r0, #12]
 80139c2:	f9b0 5026 	ldrsh.w	r5, [r0, #38]	; 0x26
 80139c6:	42ae      	cmp	r6, r5
 80139c8:	da3b      	bge.n	8013a42 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x86>
    {
        return false;
    }

    if (bitmapARGB8888Pointer != 0)
 80139ca:	6945      	ldr	r5, [r0, #20]
 80139cc:	b1c5      	cbz	r5, 8013a00 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x44>
    {
        uint32_t argb8888 = *bitmapARGB8888Pointer++;
 80139ce:	1d2e      	adds	r6, r5, #4
 80139d0:	6146      	str	r6, [r0, #20]
 80139d2:	682d      	ldr	r5, [r5, #0]
        alpha = (argb8888 >> 24) & 0xFF;
 80139d4:	0e2e      	lsrs	r6, r5, #24
 80139d6:	7026      	strb	r6, [r4, #0]
        red = (argb8888 >> 16) & 0xFF;
 80139d8:	0c2e      	lsrs	r6, r5, #16
 80139da:	700e      	strb	r6, [r1, #0]
        green = (argb8888 >> 8) & 0xFF;
 80139dc:	0a29      	lsrs	r1, r5, #8
 80139de:	7011      	strb	r1, [r2, #0]
        blue = (argb8888) & 0xFF;
 80139e0:	701d      	strb	r5, [r3, #0]
        else
        {
            alpha = 255; // No alpha per pixel in the image, it is solid
        }
    }
    if (painterAlpha < 255)
 80139e2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80139e6:	2bff      	cmp	r3, #255	; 0xff
 80139e8:	d02e      	beq.n	8013a48 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x8c>
    {
        // Apply given alpha from setAlpha()
        alpha = (((uint16_t)alpha) * ((uint16_t)painterAlpha)) / 255;
 80139ea:	7822      	ldrb	r2, [r4, #0]
 80139ec:	fb03 f202 	mul.w	r2, r3, r2
 80139f0:	4b16      	ldr	r3, [pc, #88]	; (8013a4c <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x90>)
 80139f2:	fb83 1302 	smull	r1, r3, r3, r2
 80139f6:	4413      	add	r3, r2
 80139f8:	11db      	asrs	r3, r3, #7
 80139fa:	7023      	strb	r3, [r4, #0]
    }
    return true;
 80139fc:	2001      	movs	r0, #1
 80139fe:	e021      	b.n	8013a44 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x88>
    else if (bitmapRGB565Pointer != 0)
 8013a00:	6985      	ldr	r5, [r0, #24]
 8013a02:	2d00      	cmp	r5, #0
 8013a04:	d0ed      	beq.n	80139e2 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x26>
        uint16_t rgb565 = *bitmapRGB565Pointer++;
 8013a06:	1cae      	adds	r6, r5, #2
 8013a08:	6186      	str	r6, [r0, #24]
 8013a0a:	882d      	ldrh	r5, [r5, #0]
        red = (rgb565 & 0xF800) >> 8;
 8013a0c:	122e      	asrs	r6, r5, #8
 8013a0e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
        red |= red >> 5; // To get full range 0-0xFF, not just 0-0xF8
 8013a12:	ea46 1666 	orr.w	r6, r6, r6, asr #5
 8013a16:	700e      	strb	r6, [r1, #0]
        green = (rgb565 & 0x07E0) >> 3;
 8013a18:	10e9      	asrs	r1, r5, #3
 8013a1a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
        green |= green >> 6; // To get full range 0-0xFF, not just 0-0xFC
 8013a1e:	ea41 11a1 	orr.w	r1, r1, r1, asr #6
 8013a22:	7011      	strb	r1, [r2, #0]
        blue = (rgb565 & 0x001F) << 3;
 8013a24:	00ed      	lsls	r5, r5, #3
 8013a26:	b2ed      	uxtb	r5, r5
        blue |= (blue >> 5); // To get full range 0-0xFF, not just 0-0xF8
 8013a28:	ea45 1565 	orr.w	r5, r5, r5, asr #5
 8013a2c:	701d      	strb	r5, [r3, #0]
        if (bitmapAlphaPointer)
 8013a2e:	69c3      	ldr	r3, [r0, #28]
 8013a30:	b123      	cbz	r3, 8013a3c <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x80>
            alpha = *bitmapAlphaPointer++;
 8013a32:	1c5a      	adds	r2, r3, #1
 8013a34:	61c2      	str	r2, [r0, #28]
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	7023      	strb	r3, [r4, #0]
 8013a3a:	e7d2      	b.n	80139e2 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x26>
            alpha = 255; // No alpha per pixel in the image, it is solid
 8013a3c:	23ff      	movs	r3, #255	; 0xff
 8013a3e:	7023      	strb	r3, [r4, #0]
 8013a40:	e7cf      	b.n	80139e2 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x26>
        return false;
 8013a42:	2000      	movs	r0, #0
}
 8013a44:	bc70      	pop	{r4, r5, r6}
 8013a46:	4770      	bx	lr
    return true;
 8013a48:	2001      	movs	r0, #1
 8013a4a:	e7fb      	b.n	8013a44 <_ZN8touchgfx19PainterRGB565Bitmap10renderNextERhS1_S1_S1_+0x88>
 8013a4c:	80808081 	.word	0x80808081

08013a50 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh>:
{
 8013a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a54:	4680      	mov	r8, r0
 8013a56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013a58:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    uint16_t* p = reinterpret_cast<uint16_t*>(ptr) + (x + xAdjust);
 8013a5a:	4413      	add	r3, r2
 8013a5c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    currentX = x + areaOffsetX;
 8013a60:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013a64:	441a      	add	r2, r3
 8013a66:	60c2      	str	r2, [r0, #12]
    currentY = y + areaOffsetY;
 8013a68:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013a6c:	9a08      	ldr	r2, [sp, #32]
 8013a6e:	4413      	add	r3, r2
 8013a70:	6103      	str	r3, [r0, #16]
    if (!renderInit())
 8013a72:	6803      	ldr	r3, [r0, #0]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	4798      	blx	r3
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	f000 8120 	beq.w	8013cbe <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
    if (currentX + (int)count > bitmapRectToFrameBuffer.width)
 8013a7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013a82:	1959      	adds	r1, r3, r5
 8013a84:	f9b8 2026 	ldrsh.w	r2, [r8, #38]	; 0x26
 8013a88:	4291      	cmp	r1, r2
 8013a8a:	dd00      	ble.n	8013a8e <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3e>
        count = bitmapRectToFrameBuffer.width - currentX;
 8013a8c:	1ad5      	subs	r5, r2, r3
    uint8_t totalAlpha = (widgetAlpha * painterAlpha) / 255u;
 8013a8e:	f898 3008 	ldrb.w	r3, [r8, #8]
 8013a92:	f898 702a 	ldrb.w	r7, [r8, #42]	; 0x2a
 8013a96:	fb07 f703 	mul.w	r7, r7, r3
 8013a9a:	4bd4      	ldr	r3, [pc, #848]	; (8013dec <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x39c>)
 8013a9c:	fba3 3707 	umull	r3, r7, r3, r7
 8013aa0:	09ff      	lsrs	r7, r7, #7
 8013aa2:	fa5f f987 	uxtb.w	r9, r7
    if (bitmap.getFormat() == Bitmap::RGB565)
 8013aa6:	f108 0a20 	add.w	sl, r8, #32
 8013aaa:	4650      	mov	r0, sl
 8013aac:	f00f fbb8 	bl	8023220 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	f040 80ff 	bne.w	8013cb4 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x264>
        const uint16_t* src = bitmapRGB565Pointer;
 8013ab6:	f8d8 3018 	ldr.w	r3, [r8, #24]
        const uint8_t* srcAlpha = bitmapAlphaPointer;
 8013aba:	f8d8 001c 	ldr.w	r0, [r8, #28]
        if (srcAlpha)
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	f000 8088 	beq.w	8013bd4 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x184>
            if (totalAlpha == 255)
 8013ac4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013ac8:	d148      	bne.n	8013b5c <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x10c>
 8013aca:	e006      	b.n	8013ada <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x8a>
                        *p = *src;
 8013acc:	881a      	ldrh	r2, [r3, #0]
 8013ace:	8022      	strh	r2, [r4, #0]
                    p++;
 8013ad0:	3402      	adds	r4, #2
                    src++;
 8013ad2:	3302      	adds	r3, #2
                while (--count != 0);
 8013ad4:	3d01      	subs	r5, #1
 8013ad6:	f000 80f2 	beq.w	8013cbe <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                    uint32_t alpha = (*covers) * (*srcAlpha);
 8013ada:	f816 2b01 	ldrb.w	r2, [r6], #1
 8013ade:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013ae2:	fb01 f202 	mul.w	r2, r1, r2
                    if (alpha == 255u * 255u)
 8013ae6:	f64f 6101 	movw	r1, #65025	; 0xfe01
 8013aea:	428a      	cmp	r2, r1
 8013aec:	d0ee      	beq.n	8013acc <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x7c>
                    else if (alpha)
 8013aee:	2a00      	cmp	r2, #0
 8013af0:	d0ee      	beq.n	8013ad0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x80>
                        *p = mixColors(*src, *p, alpha, 16);
 8013af2:	f8b3 8000 	ldrh.w	r8, [r3]
 8013af6:	f8b4 e000 	ldrh.w	lr, [r4]
        return mixColors(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha, shift);
 8013afa:	49bd      	ldr	r1, [pc, #756]	; (8013df0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>)
 8013afc:	ea08 0a01 	and.w	sl, r8, r1
 8013b00:	f408 69fc 	and.w	r9, r8, #2016	; 0x7e0
 8013b04:	f008 081f 	and.w	r8, r8, #31
 8013b08:	ea0e 0701 	and.w	r7, lr, r1
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013b0c:	ebaa 0a07 	sub.w	sl, sl, r7
 8013b10:	fa1f fc82 	uxth.w	ip, r2
 8013b14:	fb0c f20a 	mul.w	r2, ip, sl
 8013b18:	eb07 4722 	add.w	r7, r7, r2, asr #16
 8013b1c:	b23f      	sxth	r7, r7
 8013b1e:	ea07 0201 	and.w	r2, r7, r1
 8013b22:	f40e 61fc 	and.w	r1, lr, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013b26:	eba9 0901 	sub.w	r9, r9, r1
 8013b2a:	fb0c f909 	mul.w	r9, ip, r9
 8013b2e:	eb01 4129 	add.w	r1, r1, r9, asr #16
 8013b32:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013b36:	4311      	orrs	r1, r2
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 8013b38:	f00e 021f 	and.w	r2, lr, #31
 8013b3c:	eba8 0202 	sub.w	r2, r8, r2
 8013b40:	fb0c f202 	mul.w	r2, ip, r2
 8013b44:	eb0e 4222 	add.w	r2, lr, r2, asr #16
 8013b48:	f002 021f 	and.w	r2, r2, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013b4c:	430a      	orrs	r2, r1
 8013b4e:	8022      	strh	r2, [r4, #0]
 8013b50:	e7be      	b.n	8013ad0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x80>
                    p++;
 8013b52:	3402      	adds	r4, #2
                    src++;
 8013b54:	3302      	adds	r3, #2
                while (--count != 0);
 8013b56:	3d01      	subs	r5, #1
 8013b58:	f000 80b1 	beq.w	8013cbe <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                    uint32_t alpha = ((*covers) * (*srcAlpha) * totalAlpha) >> 8;
 8013b5c:	f816 1b01 	ldrb.w	r1, [r6], #1
 8013b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b64:	fb02 f201 	mul.w	r2, r2, r1
 8013b68:	b2f9      	uxtb	r1, r7
 8013b6a:	fb02 f201 	mul.w	r2, r2, r1
                    if (alpha) // This can never get to max=255u*255u as widgetAlpha<255
 8013b6e:	1212      	asrs	r2, r2, #8
 8013b70:	d0ef      	beq.n	8013b52 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x102>
                        *p = mixColors(*src, *p, alpha, 16);
 8013b72:	f8b3 8000 	ldrh.w	r8, [r3]
 8013b76:	f8b4 c000 	ldrh.w	ip, [r4]
        return mixColors(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha, shift);
 8013b7a:	499d      	ldr	r1, [pc, #628]	; (8013df0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>)
 8013b7c:	ea08 0a01 	and.w	sl, r8, r1
 8013b80:	f408 69fc 	and.w	r9, r8, #2016	; 0x7e0
 8013b84:	f008 081f 	and.w	r8, r8, #31
 8013b88:	ea0c 0e01 	and.w	lr, ip, r1
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013b8c:	ebaa 0a0e 	sub.w	sl, sl, lr
 8013b90:	b292      	uxth	r2, r2
 8013b92:	fb02 fa0a 	mul.w	sl, r2, sl
 8013b96:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
 8013b9a:	fa0f fe8e 	sxth.w	lr, lr
 8013b9e:	ea0e 0e01 	and.w	lr, lr, r1
 8013ba2:	f40c 61fc 	and.w	r1, ip, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013ba6:	eba9 0901 	sub.w	r9, r9, r1
 8013baa:	fb02 f909 	mul.w	r9, r2, r9
 8013bae:	eb01 4129 	add.w	r1, r1, r9, asr #16
 8013bb2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013bb6:	ea4e 0101 	orr.w	r1, lr, r1
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 8013bba:	f00c 0e1f 	and.w	lr, ip, #31
 8013bbe:	eba8 080e 	sub.w	r8, r8, lr
 8013bc2:	fb02 f208 	mul.w	r2, r2, r8
 8013bc6:	eb0c 4222 	add.w	r2, ip, r2, asr #16
 8013bca:	f002 021f 	and.w	r2, r2, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013bce:	430a      	orrs	r2, r1
 8013bd0:	8022      	strh	r2, [r4, #0]
 8013bd2:	e7be      	b.n	8013b52 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x102>
            if (totalAlpha == 255)
 8013bd4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013bd8:	d03b      	beq.n	8013c52 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x202>
                    uint32_t alpha = (*covers) * totalAlpha;
 8013bda:	f816 ab01 	ldrb.w	sl, [r6], #1
 8013bde:	fa5f fe87 	uxtb.w	lr, r7
                    *p = mixColors(*src, *p, alpha, 16);
 8013be2:	f833 8b02 	ldrh.w	r8, [r3], #2
 8013be6:	f8b4 c000 	ldrh.w	ip, [r4]
        return mixColors(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha, shift);
 8013bea:	4981      	ldr	r1, [pc, #516]	; (8013df0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>)
 8013bec:	ea08 0901 	and.w	r9, r8, r1
 8013bf0:	f408 62fc 	and.w	r2, r8, #2016	; 0x7e0
 8013bf4:	f008 081f 	and.w	r8, r8, #31
 8013bf8:	ea0c 0001 	and.w	r0, ip, r1
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013bfc:	eba9 0900 	sub.w	r9, r9, r0
 8013c00:	fb0a fe0e 	mul.w	lr, sl, lr
 8013c04:	fb0e f909 	mul.w	r9, lr, r9
 8013c08:	eb00 4029 	add.w	r0, r0, r9, asr #16
 8013c0c:	b200      	sxth	r0, r0
 8013c0e:	4008      	ands	r0, r1
 8013c10:	f40c 61fc 	and.w	r1, ip, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013c14:	1a52      	subs	r2, r2, r1
 8013c16:	fb0e f202 	mul.w	r2, lr, r2
 8013c1a:	eb01 4122 	add.w	r1, r1, r2, asr #16
 8013c1e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013c22:	4301      	orrs	r1, r0
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 8013c24:	f00c 021f 	and.w	r2, ip, #31
 8013c28:	eba8 0202 	sub.w	r2, r8, r2
 8013c2c:	fb0e f202 	mul.w	r2, lr, r2
 8013c30:	eb0c 4222 	add.w	r2, ip, r2, asr #16
 8013c34:	f002 021f 	and.w	r2, r2, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013c38:	430a      	orrs	r2, r1
 8013c3a:	f824 2b02 	strh.w	r2, [r4], #2
                while (--count != 0);
 8013c3e:	3d01      	subs	r5, #1
 8013c40:	d1cb      	bne.n	8013bda <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x18a>
 8013c42:	e03c      	b.n	8013cbe <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                        *p = *src;
 8013c44:	881a      	ldrh	r2, [r3, #0]
 8013c46:	8022      	strh	r2, [r4, #0]
                    p++;
 8013c48:	3402      	adds	r4, #2
                    src++;
 8013c4a:	3302      	adds	r3, #2
                    uint32_t alpha = *covers++;
 8013c4c:	463e      	mov	r6, r7
                while (--count != 0);
 8013c4e:	3d01      	subs	r5, #1
 8013c50:	d035      	beq.n	8013cbe <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                    uint32_t alpha = *covers++;
 8013c52:	1c77      	adds	r7, r6, #1
 8013c54:	f896 c000 	ldrb.w	ip, [r6]
                    if (alpha == 255u)
 8013c58:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8013c5c:	d0f2      	beq.n	8013c44 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x1f4>
                        *p = mixColors(*src, *p, alpha, 8);
 8013c5e:	8818      	ldrh	r0, [r3, #0]
 8013c60:	8821      	ldrh	r1, [r4, #0]
        return mixColors(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha, shift);
 8013c62:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8013df0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>
 8013c66:	ea00 0608 	and.w	r6, r0, r8
 8013c6a:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 8013c6e:	f000 001f 	and.w	r0, r0, #31
 8013c72:	ea01 0208 	and.w	r2, r1, r8
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013c76:	1ab6      	subs	r6, r6, r2
 8013c78:	fb0c f606 	mul.w	r6, ip, r6
 8013c7c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013c80:	b212      	sxth	r2, r2
 8013c82:	ea02 0208 	and.w	r2, r2, r8
 8013c86:	f401 66fc 	and.w	r6, r1, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013c8a:	ebae 0e06 	sub.w	lr, lr, r6
 8013c8e:	fb0e fe0c 	mul.w	lr, lr, ip
 8013c92:	eb06 262e 	add.w	r6, r6, lr, asr #8
 8013c96:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013c9a:	4332      	orrs	r2, r6
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 8013c9c:	f001 061f 	and.w	r6, r1, #31
 8013ca0:	1b80      	subs	r0, r0, r6
 8013ca2:	fb00 fc0c 	mul.w	ip, r0, ip
 8013ca6:	eb01 212c 	add.w	r1, r1, ip, asr #8
 8013caa:	f001 011f 	and.w	r1, r1, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013cae:	430a      	orrs	r2, r1
 8013cb0:	8022      	strh	r2, [r4, #0]
 8013cb2:	e7c9      	b.n	8013c48 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x1f8>
    else if (bitmap.getFormat() == Bitmap::ARGB8888)
 8013cb4:	4650      	mov	r0, sl
 8013cb6:	f00f fab3 	bl	8023220 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013cba:	2802      	cmp	r0, #2
 8013cbc:	d001      	beq.n	8013cc2 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x272>
}
 8013cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        const uint32_t* src = bitmapARGB8888Pointer;
 8013cc2:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (totalAlpha == 255)
 8013cc6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013cca:	d152      	bne.n	8013d72 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x322>
 8013ccc:	e00f      	b.n	8013cee <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x29e>
                    *p = ((newpix >> 8) & RMASK) | ((newpix >> 5) & GMASK) | ((newpix >> 3) & BMASK);
 8013cce:	4b48      	ldr	r3, [pc, #288]	; (8013df0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>)
 8013cd0:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	0948      	lsrs	r0, r1, #5
 8013cd8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8013cdc:	4303      	orrs	r3, r0
 8013cde:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8013ce2:	4319      	orrs	r1, r3
 8013ce4:	8021      	strh	r1, [r4, #0]
                p++;
 8013ce6:	3402      	adds	r4, #2
                src++;
 8013ce8:	3204      	adds	r2, #4
            while (--count != 0);
 8013cea:	3d01      	subs	r5, #1
 8013cec:	d0e7      	beq.n	8013cbe <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                uint8_t srcAlpha = *src >> 24;
 8013cee:	6811      	ldr	r1, [r2, #0]
 8013cf0:	0e0b      	lsrs	r3, r1, #24
                uint32_t alpha = (*covers) * srcAlpha;
 8013cf2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8013cf6:	fb00 f303 	mul.w	r3, r0, r3
                if (alpha == 255u * 255u)
 8013cfa:	f64f 6001 	movw	r0, #65025	; 0xfe01
 8013cfe:	4283      	cmp	r3, r0
 8013d00:	d0e5      	beq.n	8013cce <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x27e>
                else if (alpha)
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d0ef      	beq.n	8013ce6 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x296>
                    *p = mixColors((newpix >> 8) & RMASK, (newpix >> 5) & GMASK, (newpix >> 3) & BMASK, *p, alpha, 16);
 8013d06:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 8013df0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>
 8013d0a:	ea0e 2811 	and.w	r8, lr, r1, lsr #8
 8013d0e:	fa1f f888 	uxth.w	r8, r8
 8013d12:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 8013d16:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8013d1a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8013d1e:	8827      	ldrh	r7, [r4, #0]
 8013d20:	ea07 000e 	and.w	r0, r7, lr
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013d24:	eba8 0800 	sub.w	r8, r8, r0
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	fb08 f803 	mul.w	r8, r8, r3
 8013d2e:	eb00 4028 	add.w	r0, r0, r8, asr #16
 8013d32:	b200      	sxth	r0, r0
 8013d34:	ea00 000e 	and.w	r0, r0, lr
 8013d38:	f407 6efc 	and.w	lr, r7, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013d3c:	ebac 0c0e 	sub.w	ip, ip, lr
 8013d40:	fb0c fc03 	mul.w	ip, ip, r3
 8013d44:	eb0e 4e2c 	add.w	lr, lr, ip, asr #16
 8013d48:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013d4c:	ea40 000e 	orr.w	r0, r0, lr
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 8013d50:	f007 0c1f 	and.w	ip, r7, #31
 8013d54:	eba1 010c 	sub.w	r1, r1, ip
 8013d58:	fb01 f303 	mul.w	r3, r1, r3
 8013d5c:	eb07 4323 	add.w	r3, r7, r3, asr #16
 8013d60:	f003 031f 	and.w	r3, r3, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013d64:	4303      	orrs	r3, r0
 8013d66:	8023      	strh	r3, [r4, #0]
 8013d68:	e7bd      	b.n	8013ce6 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x296>
                p++;
 8013d6a:	3402      	adds	r4, #2
                src++;
 8013d6c:	3204      	adds	r2, #4
            while (--count != 0);
 8013d6e:	3d01      	subs	r5, #1
 8013d70:	d0a5      	beq.n	8013cbe <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x26e>
                uint8_t srcAlpha = *src >> 24;
 8013d72:	6810      	ldr	r0, [r2, #0]
 8013d74:	0e01      	lsrs	r1, r0, #24
                uint32_t alpha = ((*covers) * srcAlpha * totalAlpha) >> 8;
 8013d76:	f816 3b01 	ldrb.w	r3, [r6], #1
 8013d7a:	fb03 f301 	mul.w	r3, r3, r1
 8013d7e:	b2f9      	uxtb	r1, r7
 8013d80:	fb03 f301 	mul.w	r3, r3, r1
                if (alpha)
 8013d84:	121b      	asrs	r3, r3, #8
 8013d86:	d0f0      	beq.n	8013d6a <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x31a>
                    *p = mixColors((newpix >> 8) & RMASK, (newpix >> 5) & GMASK, (newpix >> 3) & BMASK, *p, alpha, 16);
 8013d88:	f8df e064 	ldr.w	lr, [pc, #100]	; 8013df0 <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x3a0>
 8013d8c:	ea0e 2110 	and.w	r1, lr, r0, lsr #8
 8013d90:	b289      	uxth	r1, r1
 8013d92:	ea4f 1850 	mov.w	r8, r0, lsr #5
 8013d96:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8013d9a:	f3c0 09c4 	ubfx	r9, r0, #3, #5
 8013d9e:	f8b4 c000 	ldrh.w	ip, [r4]
 8013da2:	ea0c 000e 	and.w	r0, ip, lr
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013da6:	1a09      	subs	r1, r1, r0
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	fb03 f101 	mul.w	r1, r3, r1
 8013dae:	eb00 4121 	add.w	r1, r0, r1, asr #16
 8013db2:	b209      	sxth	r1, r1
 8013db4:	ea01 010e 	and.w	r1, r1, lr
 8013db8:	f40c 6afc 	and.w	sl, ip, #2016	; 0x7e0
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013dbc:	eba8 080a 	sub.w	r8, r8, sl
 8013dc0:	fb03 f808 	mul.w	r8, r3, r8
 8013dc4:	eb0a 4a28 	add.w	sl, sl, r8, asr #16
 8013dc8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
        return (RMASK & ((((R - (bufpix & RMASK)) * alpha) >> shift) + (bufpix & RMASK))) |
 8013dcc:	ea41 0a0a 	orr.w	sl, r1, sl
               (BMASK & ((((B - (bufpix & BMASK)) * alpha) >> shift) + (bufpix & BMASK)));
 8013dd0:	f00c 001f 	and.w	r0, ip, #31
 8013dd4:	eba9 0000 	sub.w	r0, r9, r0
 8013dd8:	fb03 f300 	mul.w	r3, r3, r0
 8013ddc:	eb0c 4323 	add.w	r3, ip, r3, asr #16
 8013de0:	f003 031f 	and.w	r3, r3, #31
               (GMASK & ((((G - (bufpix & GMASK)) * alpha) >> shift) + (bufpix & GMASK))) |
 8013de4:	ea4a 0303 	orr.w	r3, sl, r3
 8013de8:	8023      	strh	r3, [r4, #0]
 8013dea:	e7be      	b.n	8013d6a <_ZN8touchgfx19PainterRGB565Bitmap6renderEPhiiijPKh+0x31a>
 8013dec:	80808081 	.word	0x80808081
 8013df0:	fffff800 	.word	0xfffff800

08013df4 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv>:
{
 8013df4:	b538      	push	{r3, r4, r5, lr}
    bitmapARGB8888Pointer = 0;
 8013df6:	2300      	movs	r3, #0
 8013df8:	6143      	str	r3, [r0, #20]
    bitmapRGB565Pointer = 0;
 8013dfa:	6183      	str	r3, [r0, #24]
    bitmapAlphaPointer = 0;
 8013dfc:	61c3      	str	r3, [r0, #28]
    if ((currentX >= bitmapRectToFrameBuffer.width) ||
 8013dfe:	68c2      	ldr	r2, [r0, #12]
 8013e00:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8013e04:	429a      	cmp	r2, r3
 8013e06:	da3b      	bge.n	8013e80 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8c>
            (currentY >= bitmapRectToFrameBuffer.height))
 8013e08:	6902      	ldr	r2, [r0, #16]
 8013e0a:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
    if ((currentX >= bitmapRectToFrameBuffer.width) ||
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	db01      	blt.n	8013e16 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x22>
        return false;
 8013e12:	2000      	movs	r0, #0
 8013e14:	e035      	b.n	8013e82 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
 8013e16:	4604      	mov	r4, r0
    if (bitmap.getFormat() == Bitmap::ARGB8888)
 8013e18:	f100 0520 	add.w	r5, r0, #32
 8013e1c:	4628      	mov	r0, r5
 8013e1e:	f00f f9ff 	bl	8023220 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013e22:	2802      	cmp	r0, #2
 8013e24:	d01c      	beq.n	8013e60 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x6c>
        bitmapRGB565Pointer = (const uint16_t*)bitmap.getData();
 8013e26:	4628      	mov	r0, r5
 8013e28:	f00f f9a2 	bl	8023170 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013e2c:	61a0      	str	r0, [r4, #24]
        if (!bitmapRGB565Pointer)
 8013e2e:	b358      	cbz	r0, 8013e88 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x94>
        bitmapRGB565Pointer += currentX + currentY * bitmapRectToFrameBuffer.width;
 8013e30:	68e2      	ldr	r2, [r4, #12]
 8013e32:	6923      	ldr	r3, [r4, #16]
 8013e34:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 8013e38:	fb01 2303 	mla	r3, r1, r3, r2
 8013e3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013e40:	61a0      	str	r0, [r4, #24]
        bitmapAlphaPointer = (const uint8_t*)bitmap.getAlphaData();
 8013e42:	4628      	mov	r0, r5
 8013e44:	f00f f9c4 	bl	80231d0 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 8013e48:	61e0      	str	r0, [r4, #28]
        if (bitmapAlphaPointer)
 8013e4a:	b1f8      	cbz	r0, 8013e8c <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x98>
            bitmapAlphaPointer += currentX + currentY * bitmapRectToFrameBuffer.width;
 8013e4c:	68e2      	ldr	r2, [r4, #12]
 8013e4e:	6923      	ldr	r3, [r4, #16]
 8013e50:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 8013e54:	fb01 2303 	mla	r3, r1, r3, r2
 8013e58:	4418      	add	r0, r3
 8013e5a:	61e0      	str	r0, [r4, #28]
    return true;
 8013e5c:	2001      	movs	r0, #1
 8013e5e:	e010      	b.n	8013e82 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
        bitmapARGB8888Pointer = (const uint32_t*)bitmap.getData();
 8013e60:	4628      	mov	r0, r5
 8013e62:	f00f f985 	bl	8023170 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013e66:	6160      	str	r0, [r4, #20]
        if (!bitmapARGB8888Pointer)
 8013e68:	b160      	cbz	r0, 8013e84 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x90>
        bitmapARGB8888Pointer += currentX + currentY * bitmapRectToFrameBuffer.width;
 8013e6a:	68e2      	ldr	r2, [r4, #12]
 8013e6c:	6923      	ldr	r3, [r4, #16]
 8013e6e:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 8013e72:	fb01 2303 	mla	r3, r1, r3, r2
 8013e76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013e7a:	6160      	str	r0, [r4, #20]
    return true;
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	e000      	b.n	8013e82 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
        return false;
 8013e80:	2000      	movs	r0, #0
}
 8013e82:	bd38      	pop	{r3, r4, r5, pc}
            return false;
 8013e84:	2000      	movs	r0, #0
 8013e86:	e7fc      	b.n	8013e82 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
            return false;
 8013e88:	2000      	movs	r0, #0
 8013e8a:	e7fa      	b.n	8013e82 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>
    return true;
 8013e8c:	2001      	movs	r0, #1
 8013e8e:	e7f8      	b.n	8013e82 <_ZN8touchgfx19PainterRGB565Bitmap10renderInitEv+0x8e>

08013e90 <_ZN8touchgfx19PainterRGB565BitmapD1Ev>:
 *        might specify for a Canvas Widget (e.g. Shape) is not applied to the bitmap as CWR is
 *        not aware of this rotation.
 *
 * @see AbstractPainter
 */
class PainterRGB565Bitmap : public AbstractPainterRGB565
 8013e90:	b510      	push	{r4, lr}
 8013e92:	4604      	mov	r4, r0
    virtual ~AbstractPainterRGB565() {}
 8013e94:	4b02      	ldr	r3, [pc, #8]	; (8013ea0 <_ZN8touchgfx19PainterRGB565BitmapD1Ev+0x10>)
 8013e96:	6003      	str	r3, [r0, #0]
 8013e98:	f7fd fa36 	bl	8011308 <_ZN8touchgfx15AbstractPainterD1Ev>
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	bd10      	pop	{r4, pc}
 8013ea0:	08027210 	.word	0x08027210

08013ea4 <_ZN8touchgfx19PainterRGB565BitmapD0Ev>:
 8013ea4:	b510      	push	{r4, lr}
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	4b04      	ldr	r3, [pc, #16]	; (8013ebc <_ZN8touchgfx19PainterRGB565BitmapD0Ev+0x18>)
 8013eaa:	6003      	str	r3, [r0, #0]
 8013eac:	f7fd fa2c 	bl	8011308 <_ZN8touchgfx15AbstractPainterD1Ev>
 8013eb0:	212c      	movs	r1, #44	; 0x2c
 8013eb2:	4620      	mov	r0, r4
 8013eb4:	f011 f98e 	bl	80251d4 <_ZdlPvj>
 8013eb8:	4620      	mov	r0, r4
 8013eba:	bd10      	pop	{r4, pc}
 8013ebc:	08027210 	.word	0x08027210

08013ec0 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>:
{
 8013ec0:	b570      	push	{r4, r5, r6, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	4605      	mov	r5, r0
    bitmap = bmp;
 8013ec6:	880b      	ldrh	r3, [r1, #0]
 8013ec8:	4604      	mov	r4, r0
 8013eca:	f824 3f20 	strh.w	r3, [r4, #32]!
        return Rect(0, 0, getWidth(), getHeight());
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f00f f850 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013ed4:	b206      	sxth	r6, r0
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	f00f f884 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
        this->x = x;
 8013edc:	2300      	movs	r3, #0
 8013ede:	f8ad 3000 	strh.w	r3, [sp]
        this->y = y;
 8013ee2:	f8ad 3002 	strh.w	r3, [sp, #2]
        this->width = width;
 8013ee6:	f8ad 6004 	strh.w	r6, [sp, #4]
        this->height = height;
 8013eea:	f8ad 0006 	strh.w	r0, [sp, #6]
    bitmapRectToFrameBuffer = bitmap.getRect();
 8013eee:	f105 0222 	add.w	r2, r5, #34	; 0x22
 8013ef2:	466b      	mov	r3, sp
 8013ef4:	cb03      	ldmia	r3!, {r0, r1}
 8013ef6:	f8c5 0022 	str.w	r0, [r5, #34]	; 0x22
 8013efa:	f8c5 1026 	str.w	r1, [r5, #38]	; 0x26
    DisplayTransformation::transformDisplayToFrameBuffer(bitmapRectToFrameBuffer);
 8013efe:	4610      	mov	r0, r2
 8013f00:	f00c fea4 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
}
 8013f04:	b002      	add	sp, #8
 8013f06:	bd70      	pop	{r4, r5, r6, pc}

08013f08 <_ZN8touchgfx19PainterRGB565Bitmap8setAlphaEh>:
    painterAlpha = alpha;
 8013f08:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
}
 8013f0c:	4770      	bx	lr
	...

08013f10 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh>:
PainterRGB565Bitmap::PainterRGB565Bitmap(const Bitmap& bmp, uint8_t alpha) :
 8013f10:	b570      	push	{r4, r5, r6, lr}
 8013f12:	4604      	mov	r4, r0
 8013f14:	460e      	mov	r6, r1
 8013f16:	4615      	mov	r5, r2
    {
 8013f18:	f7fd f9ec 	bl	80112f4 <_ZN8touchgfx15AbstractPainterC1Ev>
 8013f1c:	4b13      	ldr	r3, [pc, #76]	; (8013f6c <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x5c>)
 8013f1e:	6023      	str	r3, [r4, #0]
        return instance->lcdRef;
 8013f20:	4b13      	ldr	r3, [pc, #76]	; (8013f70 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x60>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	6898      	ldr	r0, [r3, #8]
        assert(HAL::lcd().bitDepth() == 16 && "The chosen painter only works with 16bpp displays");
 8013f26:	6803      	ldr	r3, [r0, #0]
 8013f28:	6a1b      	ldr	r3, [r3, #32]
 8013f2a:	4798      	blx	r3
 8013f2c:	2810      	cmp	r0, #16
 8013f2e:	d116      	bne.n	8013f5e <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x4e>
    AbstractPainterRGB565(), bitmapARGB8888Pointer(0), bitmapRGB565Pointer(0), bitmapAlphaPointer(0)
 8013f30:	4b10      	ldr	r3, [pc, #64]	; (8013f74 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x64>)
 8013f32:	6023      	str	r3, [r4, #0]
 8013f34:	2300      	movs	r3, #0
 8013f36:	6163      	str	r3, [r4, #20]
 8013f38:	61a3      	str	r3, [r4, #24]
 8013f3a:	61e3      	str	r3, [r4, #28]
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 8013f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f40:	8422      	strh	r2, [r4, #32]
        this->x = 0;
 8013f42:	8463      	strh	r3, [r4, #34]	; 0x22
        this->y = 0;
 8013f44:	84a3      	strh	r3, [r4, #36]	; 0x24
        this->width = 0;
 8013f46:	84e3      	strh	r3, [r4, #38]	; 0x26
        this->height = 0;
 8013f48:	8523      	strh	r3, [r4, #40]	; 0x28
    setBitmap(bmp);
 8013f4a:	4631      	mov	r1, r6
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	f7ff ffb7 	bl	8013ec0 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    setAlpha(alpha);
 8013f52:	4629      	mov	r1, r5
 8013f54:	4620      	mov	r0, r4
 8013f56:	f7ff ffd7 	bl	8013f08 <_ZN8touchgfx19PainterRGB565Bitmap8setAlphaEh>
}
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	bd70      	pop	{r4, r5, r6, pc}
 8013f5e:	4b06      	ldr	r3, [pc, #24]	; (8013f78 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x68>)
 8013f60:	4a06      	ldr	r2, [pc, #24]	; (8013f7c <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x6c>)
 8013f62:	212d      	movs	r1, #45	; 0x2d
 8013f64:	4806      	ldr	r0, [pc, #24]	; (8013f80 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh+0x70>)
 8013f66:	f011 f951 	bl	802520c <__assert_func>
 8013f6a:	bf00      	nop
 8013f6c:	08027210 	.word	0x08027210
 8013f70:	2000bb14 	.word	0x2000bb14
 8013f74:	080276b8 	.word	0x080276b8
 8013f78:	080275f4 	.word	0x080275f4
 8013f7c:	080276d0 	.word	0x080276d0
 8013f80:	08027648 	.word	0x08027648

08013f84 <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 8013f84:	b508      	push	{r3, lr}
    if ((int)p) //idle task sched out
 8013f86:	b130      	cbz	r0, 8013f96 <_ZL12IdleTaskHookPv+0x12>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8013f88:	2101      	movs	r1, #1
 8013f8a:	4b06      	ldr	r3, [pc, #24]	; (8013fa4 <_ZL12IdleTaskHookPv+0x20>)
 8013f8c:	6818      	ldr	r0, [r3, #0]
 8013f8e:	f00a fcd3 	bl	801e938 <_ZN8touchgfx3HAL12setMCUActiveEb>
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
    }
    return pdTRUE;
}
 8013f92:	2001      	movs	r0, #1
 8013f94:	bd08      	pop	{r3, pc}
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8013f96:	2100      	movs	r1, #0
 8013f98:	4b02      	ldr	r3, [pc, #8]	; (8013fa4 <_ZL12IdleTaskHookPv+0x20>)
 8013f9a:	6818      	ldr	r0, [r3, #0]
 8013f9c:	f00a fccc 	bl	801e938 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8013fa0:	e7f7      	b.n	8013f92 <_ZL12IdleTaskHookPv+0xe>
 8013fa2:	bf00      	nop
 8013fa4:	2000bb14 	.word	0x2000bb14

08013fa8 <_ZN8touchgfx10OSWrappers10initializeEv>:
{
 8013fa8:	b508      	push	{r3, lr}
    vSemaphoreCreateBinary(frame_buffer_sem);
 8013faa:	2203      	movs	r2, #3
 8013fac:	2100      	movs	r1, #0
 8013fae:	2001      	movs	r0, #1
 8013fb0:	f002 fd9e 	bl	8016af0 <xQueueGenericCreate>
 8013fb4:	4b07      	ldr	r3, [pc, #28]	; (8013fd4 <_ZN8touchgfx10OSWrappers10initializeEv+0x2c>)
 8013fb6:	6018      	str	r0, [r3, #0]
 8013fb8:	b120      	cbz	r0, 8013fc4 <_ZN8touchgfx10OSWrappers10initializeEv+0x1c>
 8013fba:	2300      	movs	r3, #0
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	f002 fe26 	bl	8016c10 <xQueueGenericSend>
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	2101      	movs	r1, #1
 8013fc8:	4608      	mov	r0, r1
 8013fca:	f002 fd91 	bl	8016af0 <xQueueGenericCreate>
 8013fce:	4b02      	ldr	r3, [pc, #8]	; (8013fd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>)
 8013fd0:	6018      	str	r0, [r3, #0]
}
 8013fd2:	bd08      	pop	{r3, pc}
 8013fd4:	20000108 	.word	0x20000108
 8013fd8:	2000010c 	.word	0x2000010c

08013fdc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
{
 8013fdc:	b508      	push	{r3, lr}
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8013fde:	f04f 31ff 	mov.w	r1, #4294967295
 8013fe2:	4b02      	ldr	r3, [pc, #8]	; (8013fec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8013fe4:	6818      	ldr	r0, [r3, #0]
 8013fe6:	f003 f925 	bl	8017234 <xQueueSemaphoreTake>
}
 8013fea:	bd08      	pop	{r3, pc}
 8013fec:	20000108 	.word	0x20000108

08013ff0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
{
 8013ff0:	b508      	push	{r3, lr}
    xSemaphoreGive(frame_buffer_sem);
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	4802      	ldr	r0, [pc, #8]	; (8014004 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8013ffa:	6800      	ldr	r0, [r0, #0]
 8013ffc:	f002 fe08 	bl	8016c10 <xQueueGenericSend>
}
 8014000:	bd08      	pop	{r3, pc}
 8014002:	bf00      	nop
 8014004:	20000108 	.word	0x20000108

08014008 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
{
 8014008:	b508      	push	{r3, lr}
    xSemaphoreTake(frame_buffer_sem, 0);
 801400a:	2100      	movs	r1, #0
 801400c:	4b02      	ldr	r3, [pc, #8]	; (8014018 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 801400e:	6818      	ldr	r0, [r3, #0]
 8014010:	f003 f910 	bl	8017234 <xQueueSemaphoreTake>
}
 8014014:	bd08      	pop	{r3, pc}
 8014016:	bf00      	nop
 8014018:	20000108 	.word	0x20000108

0801401c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
{
 801401c:	b500      	push	{lr}
 801401e:	b083      	sub	sp, #12
    portBASE_TYPE px = pdFALSE;
 8014020:	a902      	add	r1, sp, #8
 8014022:	2300      	movs	r3, #0
 8014024:	f841 3d04 	str.w	r3, [r1, #-4]!
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8014028:	4b08      	ldr	r3, [pc, #32]	; (801404c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 801402a:	6818      	ldr	r0, [r3, #0]
 801402c:	f002 ff8e 	bl	8016f4c <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8014030:	9b01      	ldr	r3, [sp, #4]
 8014032:	b13b      	cbz	r3, 8014044 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>
 8014034:	4b06      	ldr	r3, [pc, #24]	; (8014050 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 8014036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801403a:	601a      	str	r2, [r3, #0]
 801403c:	f3bf 8f4f 	dsb	sy
 8014040:	f3bf 8f6f 	isb	sy
}
 8014044:	b003      	add	sp, #12
 8014046:	f85d fb04 	ldr.w	pc, [sp], #4
 801404a:	bf00      	nop
 801404c:	20000108 	.word	0x20000108
 8014050:	e000ed04 	.word	0xe000ed04

08014054 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
    if (vsync_q)
 8014054:	4b0c      	ldr	r3, [pc, #48]	; (8014088 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8014056:	6818      	ldr	r0, [r3, #0]
 8014058:	b1a8      	cbz	r0, 8014086 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x32>
{
 801405a:	b500      	push	{lr}
 801405c:	b083      	sub	sp, #12
        portBASE_TYPE px = pdFALSE;
 801405e:	2300      	movs	r3, #0
 8014060:	aa02      	add	r2, sp, #8
 8014062:	f842 3d04 	str.w	r3, [r2, #-4]!
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8014066:	4909      	ldr	r1, [pc, #36]	; (801408c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
 8014068:	f002 fed4 	bl	8016e14 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 801406c:	9b01      	ldr	r3, [sp, #4]
 801406e:	b13b      	cbz	r3, 8014080 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
 8014070:	4b07      	ldr	r3, [pc, #28]	; (8014090 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x3c>)
 8014072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014076:	601a      	str	r2, [r3, #0]
 8014078:	f3bf 8f4f 	dsb	sy
 801407c:	f3bf 8f6f 	isb	sy
}
 8014080:	b003      	add	sp, #12
 8014082:	f85d fb04 	ldr.w	pc, [sp], #4
 8014086:	4770      	bx	lr
 8014088:	2000010c 	.word	0x2000010c
 801408c:	2000004c 	.word	0x2000004c
 8014090:	e000ed04 	.word	0xe000ed04

08014094 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
{
 8014094:	b538      	push	{r3, r4, r5, lr}
    xQueueReceive(vsync_q, &dummy, 0);
 8014096:	4d07      	ldr	r5, [pc, #28]	; (80140b4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x20>)
 8014098:	4c07      	ldr	r4, [pc, #28]	; (80140b8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 801409a:	2200      	movs	r2, #0
 801409c:	4629      	mov	r1, r5
 801409e:	6820      	ldr	r0, [r4, #0]
 80140a0:	f002 ffe6 	bl	8017070 <xQueueReceive>
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 80140a4:	f04f 32ff 	mov.w	r2, #4294967295
 80140a8:	4629      	mov	r1, r5
 80140aa:	6820      	ldr	r0, [r4, #0]
 80140ac:	f002 ffe0 	bl	8017070 <xQueueReceive>
}
 80140b0:	bd38      	pop	{r3, r4, r5, pc}
 80140b2:	bf00      	nop
 80140b4:	2000004c 	.word	0x2000004c
 80140b8:	2000010c 	.word	0x2000010c

080140bc <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 80140bc:	e7fe      	b.n	80140bc <vApplicationStackOverflowHook>

080140be <vApplicationMallocFailedHook>:
        while (1);
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 80140be:	e7fe      	b.n	80140be <vApplicationMallocFailedHook>

080140c0 <vApplicationIdleHook>:
        while (1);
    }

    void vApplicationIdleHook(void)
    {
 80140c0:	b508      	push	{r3, lr}
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80140c2:	4902      	ldr	r1, [pc, #8]	; (80140cc <vApplicationIdleHook+0xc>)
 80140c4:	2000      	movs	r0, #0
 80140c6:	f003 fefb 	bl	8017ec0 <vTaskSetApplicationTaskTag>
    }
 80140ca:	bd08      	pop	{r3, pc}
 80140cc:	08013f85 	.word	0x08013f85

080140d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	4603      	mov	r3, r0
 80140d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80140da:	79fb      	ldrb	r3, [r7, #7]
 80140dc:	4a08      	ldr	r2, [pc, #32]	; (8014100 <disk_status+0x30>)
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	4413      	add	r3, r2
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	79fa      	ldrb	r2, [r7, #7]
 80140e8:	4905      	ldr	r1, [pc, #20]	; (8014100 <disk_status+0x30>)
 80140ea:	440a      	add	r2, r1
 80140ec:	7a12      	ldrb	r2, [r2, #8]
 80140ee:	4610      	mov	r0, r2
 80140f0:	4798      	blx	r3
 80140f2:	4603      	mov	r3, r0
 80140f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80140f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3710      	adds	r7, #16
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	20000138 	.word	0x20000138

08014104 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	4603      	mov	r3, r0
 801410c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801410e:	2300      	movs	r3, #0
 8014110:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014112:	79fb      	ldrb	r3, [r7, #7]
 8014114:	4a0d      	ldr	r2, [pc, #52]	; (801414c <disk_initialize+0x48>)
 8014116:	5cd3      	ldrb	r3, [r2, r3]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d111      	bne.n	8014140 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801411c:	79fb      	ldrb	r3, [r7, #7]
 801411e:	4a0b      	ldr	r2, [pc, #44]	; (801414c <disk_initialize+0x48>)
 8014120:	2101      	movs	r1, #1
 8014122:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014124:	79fb      	ldrb	r3, [r7, #7]
 8014126:	4a09      	ldr	r2, [pc, #36]	; (801414c <disk_initialize+0x48>)
 8014128:	009b      	lsls	r3, r3, #2
 801412a:	4413      	add	r3, r2
 801412c:	685b      	ldr	r3, [r3, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	79fa      	ldrb	r2, [r7, #7]
 8014132:	4906      	ldr	r1, [pc, #24]	; (801414c <disk_initialize+0x48>)
 8014134:	440a      	add	r2, r1
 8014136:	7a12      	ldrb	r2, [r2, #8]
 8014138:	4610      	mov	r0, r2
 801413a:	4798      	blx	r3
 801413c:	4603      	mov	r3, r0
 801413e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014140:	7bfb      	ldrb	r3, [r7, #15]
}
 8014142:	4618      	mov	r0, r3
 8014144:	3710      	adds	r7, #16
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	20000138 	.word	0x20000138

08014150 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014150:	b590      	push	{r4, r7, lr}
 8014152:	b087      	sub	sp, #28
 8014154:	af00      	add	r7, sp, #0
 8014156:	60b9      	str	r1, [r7, #8]
 8014158:	607a      	str	r2, [r7, #4]
 801415a:	603b      	str	r3, [r7, #0]
 801415c:	4603      	mov	r3, r0
 801415e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014160:	7bfb      	ldrb	r3, [r7, #15]
 8014162:	4a0a      	ldr	r2, [pc, #40]	; (801418c <disk_read+0x3c>)
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	4413      	add	r3, r2
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	689c      	ldr	r4, [r3, #8]
 801416c:	7bfb      	ldrb	r3, [r7, #15]
 801416e:	4a07      	ldr	r2, [pc, #28]	; (801418c <disk_read+0x3c>)
 8014170:	4413      	add	r3, r2
 8014172:	7a18      	ldrb	r0, [r3, #8]
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	68b9      	ldr	r1, [r7, #8]
 801417a:	47a0      	blx	r4
 801417c:	4603      	mov	r3, r0
 801417e:	75fb      	strb	r3, [r7, #23]
  return res;
 8014180:	7dfb      	ldrb	r3, [r7, #23]
}
 8014182:	4618      	mov	r0, r3
 8014184:	371c      	adds	r7, #28
 8014186:	46bd      	mov	sp, r7
 8014188:	bd90      	pop	{r4, r7, pc}
 801418a:	bf00      	nop
 801418c:	20000138 	.word	0x20000138

08014190 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014190:	b590      	push	{r4, r7, lr}
 8014192:	b087      	sub	sp, #28
 8014194:	af00      	add	r7, sp, #0
 8014196:	60b9      	str	r1, [r7, #8]
 8014198:	607a      	str	r2, [r7, #4]
 801419a:	603b      	str	r3, [r7, #0]
 801419c:	4603      	mov	r3, r0
 801419e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80141a0:	7bfb      	ldrb	r3, [r7, #15]
 80141a2:	4a0a      	ldr	r2, [pc, #40]	; (80141cc <disk_write+0x3c>)
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	4413      	add	r3, r2
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	68dc      	ldr	r4, [r3, #12]
 80141ac:	7bfb      	ldrb	r3, [r7, #15]
 80141ae:	4a07      	ldr	r2, [pc, #28]	; (80141cc <disk_write+0x3c>)
 80141b0:	4413      	add	r3, r2
 80141b2:	7a18      	ldrb	r0, [r3, #8]
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	68b9      	ldr	r1, [r7, #8]
 80141ba:	47a0      	blx	r4
 80141bc:	4603      	mov	r3, r0
 80141be:	75fb      	strb	r3, [r7, #23]
  return res;
 80141c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	371c      	adds	r7, #28
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd90      	pop	{r4, r7, pc}
 80141ca:	bf00      	nop
 80141cc:	20000138 	.word	0x20000138

080141d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80141d0:	b480      	push	{r7}
 80141d2:	b085      	sub	sp, #20
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	3301      	adds	r3, #1
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80141e0:	89fb      	ldrh	r3, [r7, #14]
 80141e2:	021b      	lsls	r3, r3, #8
 80141e4:	b21a      	sxth	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	781b      	ldrb	r3, [r3, #0]
 80141ea:	b21b      	sxth	r3, r3
 80141ec:	4313      	orrs	r3, r2
 80141ee:	b21b      	sxth	r3, r3
 80141f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80141f2:	89fb      	ldrh	r3, [r7, #14]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3714      	adds	r7, #20
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr

08014200 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014200:	b480      	push	{r7}
 8014202:	b085      	sub	sp, #20
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	3303      	adds	r3, #3
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	021b      	lsls	r3, r3, #8
 8014214:	687a      	ldr	r2, [r7, #4]
 8014216:	3202      	adds	r2, #2
 8014218:	7812      	ldrb	r2, [r2, #0]
 801421a:	4313      	orrs	r3, r2
 801421c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	021b      	lsls	r3, r3, #8
 8014222:	687a      	ldr	r2, [r7, #4]
 8014224:	3201      	adds	r2, #1
 8014226:	7812      	ldrb	r2, [r2, #0]
 8014228:	4313      	orrs	r3, r2
 801422a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	021b      	lsls	r3, r3, #8
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	7812      	ldrb	r2, [r2, #0]
 8014234:	4313      	orrs	r3, r2
 8014236:	60fb      	str	r3, [r7, #12]
	return rv;
 8014238:	68fb      	ldr	r3, [r7, #12]
}
 801423a:	4618      	mov	r0, r3
 801423c:	3714      	adds	r7, #20
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr

08014246 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014246:	b480      	push	{r7}
 8014248:	b083      	sub	sp, #12
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
 801424e:	460b      	mov	r3, r1
 8014250:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	1c5a      	adds	r2, r3, #1
 8014256:	607a      	str	r2, [r7, #4]
 8014258:	887a      	ldrh	r2, [r7, #2]
 801425a:	b2d2      	uxtb	r2, r2
 801425c:	701a      	strb	r2, [r3, #0]
 801425e:	887b      	ldrh	r3, [r7, #2]
 8014260:	0a1b      	lsrs	r3, r3, #8
 8014262:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	1c5a      	adds	r2, r3, #1
 8014268:	607a      	str	r2, [r7, #4]
 801426a:	887a      	ldrh	r2, [r7, #2]
 801426c:	b2d2      	uxtb	r2, r2
 801426e:	701a      	strb	r2, [r3, #0]
}
 8014270:	bf00      	nop
 8014272:	370c      	adds	r7, #12
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr

0801427c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801427c:	b480      	push	{r7}
 801427e:	b083      	sub	sp, #12
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	1c5a      	adds	r2, r3, #1
 801428a:	607a      	str	r2, [r7, #4]
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	b2d2      	uxtb	r2, r2
 8014290:	701a      	strb	r2, [r3, #0]
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	0a1b      	lsrs	r3, r3, #8
 8014296:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	1c5a      	adds	r2, r3, #1
 801429c:	607a      	str	r2, [r7, #4]
 801429e:	683a      	ldr	r2, [r7, #0]
 80142a0:	b2d2      	uxtb	r2, r2
 80142a2:	701a      	strb	r2, [r3, #0]
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	0a1b      	lsrs	r3, r3, #8
 80142a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	1c5a      	adds	r2, r3, #1
 80142ae:	607a      	str	r2, [r7, #4]
 80142b0:	683a      	ldr	r2, [r7, #0]
 80142b2:	b2d2      	uxtb	r2, r2
 80142b4:	701a      	strb	r2, [r3, #0]
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	0a1b      	lsrs	r3, r3, #8
 80142ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	1c5a      	adds	r2, r3, #1
 80142c0:	607a      	str	r2, [r7, #4]
 80142c2:	683a      	ldr	r2, [r7, #0]
 80142c4:	b2d2      	uxtb	r2, r2
 80142c6:	701a      	strb	r2, [r3, #0]
}
 80142c8:	bf00      	nop
 80142ca:	370c      	adds	r7, #12
 80142cc:	46bd      	mov	sp, r7
 80142ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d2:	4770      	bx	lr

080142d4 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80142d4:	b480      	push	{r7}
 80142d6:	b087      	sub	sp, #28
 80142d8:	af00      	add	r7, sp, #0
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	1c5a      	adds	r2, r3, #1
 80142e8:	617a      	str	r2, [r7, #20]
 80142ea:	68ba      	ldr	r2, [r7, #8]
 80142ec:	b2d2      	uxtb	r2, r2
 80142ee:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	3b01      	subs	r3, #1
 80142f4:	607b      	str	r3, [r7, #4]
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d1f3      	bne.n	80142e4 <mem_set+0x10>
}
 80142fc:	bf00      	nop
 80142fe:	371c      	adds	r7, #28
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014308:	b480      	push	{r7}
 801430a:	b089      	sub	sp, #36	; 0x24
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	61fb      	str	r3, [r7, #28]
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801431c:	2300      	movs	r3, #0
 801431e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014320:	69fb      	ldr	r3, [r7, #28]
 8014322:	1c5a      	adds	r2, r3, #1
 8014324:	61fa      	str	r2, [r7, #28]
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	4619      	mov	r1, r3
 801432a:	69bb      	ldr	r3, [r7, #24]
 801432c:	1c5a      	adds	r2, r3, #1
 801432e:	61ba      	str	r2, [r7, #24]
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	1acb      	subs	r3, r1, r3
 8014334:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	3b01      	subs	r3, #1
 801433a:	607b      	str	r3, [r7, #4]
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d002      	beq.n	8014348 <mem_cmp+0x40>
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d0eb      	beq.n	8014320 <mem_cmp+0x18>

	return r;
 8014348:	697b      	ldr	r3, [r7, #20]
}
 801434a:	4618      	mov	r0, r3
 801434c:	3724      	adds	r7, #36	; 0x24
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr

08014356 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014356:	b480      	push	{r7}
 8014358:	b083      	sub	sp, #12
 801435a:	af00      	add	r7, sp, #0
 801435c:	6078      	str	r0, [r7, #4]
 801435e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014360:	e002      	b.n	8014368 <chk_chr+0x12>
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	3301      	adds	r3, #1
 8014366:	607b      	str	r3, [r7, #4]
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d005      	beq.n	801437c <chk_chr+0x26>
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	461a      	mov	r2, r3
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	4293      	cmp	r3, r2
 801437a:	d1f2      	bne.n	8014362 <chk_chr+0xc>
	return *str;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	781b      	ldrb	r3, [r3, #0]
}
 8014380:	4618      	mov	r0, r3
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr

0801438c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d009      	beq.n	80143ae <lock_fs+0x22>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	691b      	ldr	r3, [r3, #16]
 801439e:	4618      	mov	r0, r3
 80143a0:	f002 f85d 	bl	801645e <ff_req_grant>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d001      	beq.n	80143ae <lock_fs+0x22>
 80143aa:	2301      	movs	r3, #1
 80143ac:	e000      	b.n	80143b0 <lock_fs+0x24>
 80143ae:	2300      	movs	r3, #0
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3708      	adds	r7, #8
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	460b      	mov	r3, r1
 80143c2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d00d      	beq.n	80143e6 <unlock_fs+0x2e>
 80143ca:	78fb      	ldrb	r3, [r7, #3]
 80143cc:	2b0c      	cmp	r3, #12
 80143ce:	d00a      	beq.n	80143e6 <unlock_fs+0x2e>
 80143d0:	78fb      	ldrb	r3, [r7, #3]
 80143d2:	2b0b      	cmp	r3, #11
 80143d4:	d007      	beq.n	80143e6 <unlock_fs+0x2e>
 80143d6:	78fb      	ldrb	r3, [r7, #3]
 80143d8:	2b0f      	cmp	r3, #15
 80143da:	d004      	beq.n	80143e6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	691b      	ldr	r3, [r3, #16]
 80143e0:	4618      	mov	r0, r3
 80143e2:	f002 f851 	bl	8016488 <ff_rel_grant>
	}
}
 80143e6:	bf00      	nop
 80143e8:	3708      	adds	r7, #8
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
	...

080143f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b085      	sub	sp, #20
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80143fa:	2300      	movs	r3, #0
 80143fc:	60fb      	str	r3, [r7, #12]
 80143fe:	e01f      	b.n	8014440 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014400:	4a41      	ldr	r2, [pc, #260]	; (8014508 <inc_lock+0x118>)
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	011b      	lsls	r3, r3, #4
 8014406:	4413      	add	r3, r2
 8014408:	681a      	ldr	r2, [r3, #0]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	429a      	cmp	r2, r3
 8014410:	d113      	bne.n	801443a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8014412:	4a3d      	ldr	r2, [pc, #244]	; (8014508 <inc_lock+0x118>)
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	011b      	lsls	r3, r3, #4
 8014418:	4413      	add	r3, r2
 801441a:	3304      	adds	r3, #4
 801441c:	681a      	ldr	r2, [r3, #0]
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8014422:	429a      	cmp	r2, r3
 8014424:	d109      	bne.n	801443a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8014426:	4a38      	ldr	r2, [pc, #224]	; (8014508 <inc_lock+0x118>)
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	011b      	lsls	r3, r3, #4
 801442c:	4413      	add	r3, r2
 801442e:	3308      	adds	r3, #8
 8014430:	681a      	ldr	r2, [r3, #0]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8014436:	429a      	cmp	r2, r3
 8014438:	d006      	beq.n	8014448 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	3301      	adds	r3, #1
 801443e:	60fb      	str	r3, [r7, #12]
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2b01      	cmp	r3, #1
 8014444:	d9dc      	bls.n	8014400 <inc_lock+0x10>
 8014446:	e000      	b.n	801444a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014448:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	2b02      	cmp	r3, #2
 801444e:	d132      	bne.n	80144b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014450:	2300      	movs	r3, #0
 8014452:	60fb      	str	r3, [r7, #12]
 8014454:	e002      	b.n	801445c <inc_lock+0x6c>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	3301      	adds	r3, #1
 801445a:	60fb      	str	r3, [r7, #12]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	2b01      	cmp	r3, #1
 8014460:	d806      	bhi.n	8014470 <inc_lock+0x80>
 8014462:	4a29      	ldr	r2, [pc, #164]	; (8014508 <inc_lock+0x118>)
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	011b      	lsls	r3, r3, #4
 8014468:	4413      	add	r3, r2
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d1f2      	bne.n	8014456 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	2b02      	cmp	r3, #2
 8014474:	d101      	bne.n	801447a <inc_lock+0x8a>
 8014476:	2300      	movs	r3, #0
 8014478:	e040      	b.n	80144fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	4922      	ldr	r1, [pc, #136]	; (8014508 <inc_lock+0x118>)
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	011b      	lsls	r3, r3, #4
 8014484:	440b      	add	r3, r1
 8014486:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	689a      	ldr	r2, [r3, #8]
 801448c:	491e      	ldr	r1, [pc, #120]	; (8014508 <inc_lock+0x118>)
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	011b      	lsls	r3, r3, #4
 8014492:	440b      	add	r3, r1
 8014494:	3304      	adds	r3, #4
 8014496:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	695a      	ldr	r2, [r3, #20]
 801449c:	491a      	ldr	r1, [pc, #104]	; (8014508 <inc_lock+0x118>)
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	011b      	lsls	r3, r3, #4
 80144a2:	440b      	add	r3, r1
 80144a4:	3308      	adds	r3, #8
 80144a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80144a8:	4a17      	ldr	r2, [pc, #92]	; (8014508 <inc_lock+0x118>)
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	011b      	lsls	r3, r3, #4
 80144ae:	4413      	add	r3, r2
 80144b0:	330c      	adds	r3, #12
 80144b2:	2200      	movs	r2, #0
 80144b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d009      	beq.n	80144d0 <inc_lock+0xe0>
 80144bc:	4a12      	ldr	r2, [pc, #72]	; (8014508 <inc_lock+0x118>)
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	011b      	lsls	r3, r3, #4
 80144c2:	4413      	add	r3, r2
 80144c4:	330c      	adds	r3, #12
 80144c6:	881b      	ldrh	r3, [r3, #0]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d001      	beq.n	80144d0 <inc_lock+0xe0>
 80144cc:	2300      	movs	r3, #0
 80144ce:	e015      	b.n	80144fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d108      	bne.n	80144e8 <inc_lock+0xf8>
 80144d6:	4a0c      	ldr	r2, [pc, #48]	; (8014508 <inc_lock+0x118>)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	011b      	lsls	r3, r3, #4
 80144dc:	4413      	add	r3, r2
 80144de:	330c      	adds	r3, #12
 80144e0:	881b      	ldrh	r3, [r3, #0]
 80144e2:	3301      	adds	r3, #1
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	e001      	b.n	80144ec <inc_lock+0xfc>
 80144e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80144ec:	4906      	ldr	r1, [pc, #24]	; (8014508 <inc_lock+0x118>)
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	011b      	lsls	r3, r3, #4
 80144f2:	440b      	add	r3, r1
 80144f4:	330c      	adds	r3, #12
 80144f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	3301      	adds	r3, #1
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3714      	adds	r7, #20
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr
 8014508:	20000118 	.word	0x20000118

0801450c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801450c:	b480      	push	{r7}
 801450e:	b085      	sub	sp, #20
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8014514:	2300      	movs	r3, #0
 8014516:	60fb      	str	r3, [r7, #12]
 8014518:	e010      	b.n	801453c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801451a:	4a0d      	ldr	r2, [pc, #52]	; (8014550 <clear_lock+0x44>)
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	011b      	lsls	r3, r3, #4
 8014520:	4413      	add	r3, r2
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	429a      	cmp	r2, r3
 8014528:	d105      	bne.n	8014536 <clear_lock+0x2a>
 801452a:	4a09      	ldr	r2, [pc, #36]	; (8014550 <clear_lock+0x44>)
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	011b      	lsls	r3, r3, #4
 8014530:	4413      	add	r3, r2
 8014532:	2200      	movs	r2, #0
 8014534:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	3301      	adds	r3, #1
 801453a:	60fb      	str	r3, [r7, #12]
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2b01      	cmp	r3, #1
 8014540:	d9eb      	bls.n	801451a <clear_lock+0xe>
	}
}
 8014542:	bf00      	nop
 8014544:	3714      	adds	r7, #20
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	20000118 	.word	0x20000118

08014554 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b086      	sub	sp, #24
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801455c:	2300      	movs	r3, #0
 801455e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	78db      	ldrb	r3, [r3, #3]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d034      	beq.n	80145d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801456c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	7858      	ldrb	r0, [r3, #1]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014578:	2301      	movs	r3, #1
 801457a:	697a      	ldr	r2, [r7, #20]
 801457c:	f7ff fe08 	bl	8014190 <disk_write>
 8014580:	4603      	mov	r3, r0
 8014582:	2b00      	cmp	r3, #0
 8014584:	d002      	beq.n	801458c <sync_window+0x38>
			res = FR_DISK_ERR;
 8014586:	2301      	movs	r3, #1
 8014588:	73fb      	strb	r3, [r7, #15]
 801458a:	e022      	b.n	80145d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2200      	movs	r2, #0
 8014590:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014596:	697a      	ldr	r2, [r7, #20]
 8014598:	1ad2      	subs	r2, r2, r3
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6a1b      	ldr	r3, [r3, #32]
 801459e:	429a      	cmp	r2, r3
 80145a0:	d217      	bcs.n	80145d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	789b      	ldrb	r3, [r3, #2]
 80145a6:	613b      	str	r3, [r7, #16]
 80145a8:	e010      	b.n	80145cc <sync_window+0x78>
					wsect += fs->fsize;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6a1b      	ldr	r3, [r3, #32]
 80145ae:	697a      	ldr	r2, [r7, #20]
 80145b0:	4413      	add	r3, r2
 80145b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	7858      	ldrb	r0, [r3, #1]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80145be:	2301      	movs	r3, #1
 80145c0:	697a      	ldr	r2, [r7, #20]
 80145c2:	f7ff fde5 	bl	8014190 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	3b01      	subs	r3, #1
 80145ca:	613b      	str	r3, [r7, #16]
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	d8eb      	bhi.n	80145aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80145d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3718      	adds	r7, #24
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80145e6:	2300      	movs	r3, #0
 80145e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145ee:	683a      	ldr	r2, [r7, #0]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d01b      	beq.n	801462c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7ff ffad 	bl	8014554 <sync_window>
 80145fa:	4603      	mov	r3, r0
 80145fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80145fe:	7bfb      	ldrb	r3, [r7, #15]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d113      	bne.n	801462c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	7858      	ldrb	r0, [r3, #1]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801460e:	2301      	movs	r3, #1
 8014610:	683a      	ldr	r2, [r7, #0]
 8014612:	f7ff fd9d 	bl	8014150 <disk_read>
 8014616:	4603      	mov	r3, r0
 8014618:	2b00      	cmp	r3, #0
 801461a:	d004      	beq.n	8014626 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801461c:	f04f 33ff 	mov.w	r3, #4294967295
 8014620:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014622:	2301      	movs	r3, #1
 8014624:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	683a      	ldr	r2, [r7, #0]
 801462a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801462c:	7bfb      	ldrb	r3, [r7, #15]
}
 801462e:	4618      	mov	r0, r3
 8014630:	3710      	adds	r7, #16
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}

08014636 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014636:	b480      	push	{r7}
 8014638:	b083      	sub	sp, #12
 801463a:	af00      	add	r7, sp, #0
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	3b02      	subs	r3, #2
 8014644:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	69db      	ldr	r3, [r3, #28]
 801464a:	3b02      	subs	r3, #2
 801464c:	683a      	ldr	r2, [r7, #0]
 801464e:	429a      	cmp	r2, r3
 8014650:	d301      	bcc.n	8014656 <clust2sect+0x20>
 8014652:	2300      	movs	r3, #0
 8014654:	e008      	b.n	8014668 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	895b      	ldrh	r3, [r3, #10]
 801465a:	461a      	mov	r2, r3
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	fb03 f202 	mul.w	r2, r3, r2
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014666:	4413      	add	r3, r2
}
 8014668:	4618      	mov	r0, r3
 801466a:	370c      	adds	r7, #12
 801466c:	46bd      	mov	sp, r7
 801466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014672:	4770      	bx	lr

08014674 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b086      	sub	sp, #24
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	2b01      	cmp	r3, #1
 8014688:	d904      	bls.n	8014694 <get_fat+0x20>
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	69db      	ldr	r3, [r3, #28]
 801468e:	683a      	ldr	r2, [r7, #0]
 8014690:	429a      	cmp	r2, r3
 8014692:	d302      	bcc.n	801469a <get_fat+0x26>
		val = 1;	/* Internal error */
 8014694:	2301      	movs	r3, #1
 8014696:	617b      	str	r3, [r7, #20]
 8014698:	e08c      	b.n	80147b4 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801469a:	f04f 33ff 	mov.w	r3, #4294967295
 801469e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	2b02      	cmp	r3, #2
 80146a6:	d045      	beq.n	8014734 <get_fat+0xc0>
 80146a8:	2b03      	cmp	r3, #3
 80146aa:	d05d      	beq.n	8014768 <get_fat+0xf4>
 80146ac:	2b01      	cmp	r3, #1
 80146ae:	d177      	bne.n	80147a0 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	60fb      	str	r3, [r7, #12]
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	085b      	lsrs	r3, r3, #1
 80146b8:	68fa      	ldr	r2, [r7, #12]
 80146ba:	4413      	add	r3, r2
 80146bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	0a5b      	lsrs	r3, r3, #9
 80146c6:	4413      	add	r3, r2
 80146c8:	4619      	mov	r1, r3
 80146ca:	6938      	ldr	r0, [r7, #16]
 80146cc:	f7ff ff86 	bl	80145dc <move_window>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d167      	bne.n	80147a6 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	1c5a      	adds	r2, r3, #1
 80146da:	60fa      	str	r2, [r7, #12]
 80146dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146e0:	693a      	ldr	r2, [r7, #16]
 80146e2:	4413      	add	r3, r2
 80146e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80146e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80146ea:	693b      	ldr	r3, [r7, #16]
 80146ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	0a5b      	lsrs	r3, r3, #9
 80146f2:	4413      	add	r3, r2
 80146f4:	4619      	mov	r1, r3
 80146f6:	6938      	ldr	r0, [r7, #16]
 80146f8:	f7ff ff70 	bl	80145dc <move_window>
 80146fc:	4603      	mov	r3, r0
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d153      	bne.n	80147aa <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014708:	693a      	ldr	r2, [r7, #16]
 801470a:	4413      	add	r3, r2
 801470c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014710:	021b      	lsls	r3, r3, #8
 8014712:	461a      	mov	r2, r3
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	4313      	orrs	r3, r2
 8014718:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	f003 0301 	and.w	r3, r3, #1
 8014720:	2b00      	cmp	r3, #0
 8014722:	d002      	beq.n	801472a <get_fat+0xb6>
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	091b      	lsrs	r3, r3, #4
 8014728:	e002      	b.n	8014730 <get_fat+0xbc>
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014730:	617b      	str	r3, [r7, #20]
			break;
 8014732:	e03f      	b.n	80147b4 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	0a1b      	lsrs	r3, r3, #8
 801473c:	4413      	add	r3, r2
 801473e:	4619      	mov	r1, r3
 8014740:	6938      	ldr	r0, [r7, #16]
 8014742:	f7ff ff4b 	bl	80145dc <move_window>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d130      	bne.n	80147ae <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	005b      	lsls	r3, r3, #1
 8014756:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801475a:	4413      	add	r3, r2
 801475c:	4618      	mov	r0, r3
 801475e:	f7ff fd37 	bl	80141d0 <ld_word>
 8014762:	4603      	mov	r3, r0
 8014764:	617b      	str	r3, [r7, #20]
			break;
 8014766:	e025      	b.n	80147b4 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	09db      	lsrs	r3, r3, #7
 8014770:	4413      	add	r3, r2
 8014772:	4619      	mov	r1, r3
 8014774:	6938      	ldr	r0, [r7, #16]
 8014776:	f7ff ff31 	bl	80145dc <move_window>
 801477a:	4603      	mov	r3, r0
 801477c:	2b00      	cmp	r3, #0
 801477e:	d118      	bne.n	80147b2 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	009b      	lsls	r3, r3, #2
 801478a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801478e:	4413      	add	r3, r2
 8014790:	4618      	mov	r0, r3
 8014792:	f7ff fd35 	bl	8014200 <ld_dword>
 8014796:	4603      	mov	r3, r0
 8014798:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801479c:	617b      	str	r3, [r7, #20]
			break;
 801479e:	e009      	b.n	80147b4 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80147a0:	2301      	movs	r3, #1
 80147a2:	617b      	str	r3, [r7, #20]
 80147a4:	e006      	b.n	80147b4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80147a6:	bf00      	nop
 80147a8:	e004      	b.n	80147b4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80147aa:	bf00      	nop
 80147ac:	e002      	b.n	80147b4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80147ae:	bf00      	nop
 80147b0:	e000      	b.n	80147b4 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80147b2:	bf00      	nop
		}
	}

	return val;
 80147b4:	697b      	ldr	r3, [r7, #20]
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	3718      	adds	r7, #24
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}

080147be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80147be:	b590      	push	{r4, r7, lr}
 80147c0:	b089      	sub	sp, #36	; 0x24
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	60f8      	str	r0, [r7, #12]
 80147c6:	60b9      	str	r1, [r7, #8]
 80147c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80147ca:	2302      	movs	r3, #2
 80147cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	2b01      	cmp	r3, #1
 80147d2:	f240 80d6 	bls.w	8014982 <put_fat+0x1c4>
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	69db      	ldr	r3, [r3, #28]
 80147da:	68ba      	ldr	r2, [r7, #8]
 80147dc:	429a      	cmp	r2, r3
 80147de:	f080 80d0 	bcs.w	8014982 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	2b02      	cmp	r3, #2
 80147e8:	d073      	beq.n	80148d2 <put_fat+0x114>
 80147ea:	2b03      	cmp	r3, #3
 80147ec:	f000 8091 	beq.w	8014912 <put_fat+0x154>
 80147f0:	2b01      	cmp	r3, #1
 80147f2:	f040 80c6 	bne.w	8014982 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	61bb      	str	r3, [r7, #24]
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	085b      	lsrs	r3, r3, #1
 80147fe:	69ba      	ldr	r2, [r7, #24]
 8014800:	4413      	add	r3, r2
 8014802:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014808:	69bb      	ldr	r3, [r7, #24]
 801480a:	0a5b      	lsrs	r3, r3, #9
 801480c:	4413      	add	r3, r2
 801480e:	4619      	mov	r1, r3
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f7ff fee3 	bl	80145dc <move_window>
 8014816:	4603      	mov	r3, r0
 8014818:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801481a:	7ffb      	ldrb	r3, [r7, #31]
 801481c:	2b00      	cmp	r3, #0
 801481e:	f040 80a9 	bne.w	8014974 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	1c59      	adds	r1, r3, #1
 801482c:	61b9      	str	r1, [r7, #24]
 801482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014832:	4413      	add	r3, r2
 8014834:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	f003 0301 	and.w	r3, r3, #1
 801483c:	2b00      	cmp	r3, #0
 801483e:	d00d      	beq.n	801485c <put_fat+0x9e>
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	b25b      	sxtb	r3, r3
 8014846:	f003 030f 	and.w	r3, r3, #15
 801484a:	b25a      	sxtb	r2, r3
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	b2db      	uxtb	r3, r3
 8014850:	011b      	lsls	r3, r3, #4
 8014852:	b25b      	sxtb	r3, r3
 8014854:	4313      	orrs	r3, r2
 8014856:	b25b      	sxtb	r3, r3
 8014858:	b2db      	uxtb	r3, r3
 801485a:	e001      	b.n	8014860 <put_fat+0xa2>
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	b2db      	uxtb	r3, r3
 8014860:	697a      	ldr	r2, [r7, #20]
 8014862:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2201      	movs	r2, #1
 8014868:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801486e:	69bb      	ldr	r3, [r7, #24]
 8014870:	0a5b      	lsrs	r3, r3, #9
 8014872:	4413      	add	r3, r2
 8014874:	4619      	mov	r1, r3
 8014876:	68f8      	ldr	r0, [r7, #12]
 8014878:	f7ff feb0 	bl	80145dc <move_window>
 801487c:	4603      	mov	r3, r0
 801487e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014880:	7ffb      	ldrb	r3, [r7, #31]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d178      	bne.n	8014978 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801488c:	69bb      	ldr	r3, [r7, #24]
 801488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014892:	4413      	add	r3, r2
 8014894:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	f003 0301 	and.w	r3, r3, #1
 801489c:	2b00      	cmp	r3, #0
 801489e:	d003      	beq.n	80148a8 <put_fat+0xea>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	091b      	lsrs	r3, r3, #4
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	e00e      	b.n	80148c6 <put_fat+0x108>
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	b25b      	sxtb	r3, r3
 80148ae:	f023 030f 	bic.w	r3, r3, #15
 80148b2:	b25a      	sxtb	r2, r3
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	0a1b      	lsrs	r3, r3, #8
 80148b8:	b25b      	sxtb	r3, r3
 80148ba:	f003 030f 	and.w	r3, r3, #15
 80148be:	b25b      	sxtb	r3, r3
 80148c0:	4313      	orrs	r3, r2
 80148c2:	b25b      	sxtb	r3, r3
 80148c4:	b2db      	uxtb	r3, r3
 80148c6:	697a      	ldr	r2, [r7, #20]
 80148c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	2201      	movs	r2, #1
 80148ce:	70da      	strb	r2, [r3, #3]
			break;
 80148d0:	e057      	b.n	8014982 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	0a1b      	lsrs	r3, r3, #8
 80148da:	4413      	add	r3, r2
 80148dc:	4619      	mov	r1, r3
 80148de:	68f8      	ldr	r0, [r7, #12]
 80148e0:	f7ff fe7c 	bl	80145dc <move_window>
 80148e4:	4603      	mov	r3, r0
 80148e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80148e8:	7ffb      	ldrb	r3, [r7, #31]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d146      	bne.n	801497c <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80148fc:	4413      	add	r3, r2
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	b292      	uxth	r2, r2
 8014902:	4611      	mov	r1, r2
 8014904:	4618      	mov	r0, r3
 8014906:	f7ff fc9e 	bl	8014246 <st_word>
			fs->wflag = 1;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	2201      	movs	r2, #1
 801490e:	70da      	strb	r2, [r3, #3]
			break;
 8014910:	e037      	b.n	8014982 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	09db      	lsrs	r3, r3, #7
 801491a:	4413      	add	r3, r2
 801491c:	4619      	mov	r1, r3
 801491e:	68f8      	ldr	r0, [r7, #12]
 8014920:	f7ff fe5c 	bl	80145dc <move_window>
 8014924:	4603      	mov	r3, r0
 8014926:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014928:	7ffb      	ldrb	r3, [r7, #31]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d128      	bne.n	8014980 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014942:	4413      	add	r3, r2
 8014944:	4618      	mov	r0, r3
 8014946:	f7ff fc5b 	bl	8014200 <ld_dword>
 801494a:	4603      	mov	r3, r0
 801494c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014950:	4323      	orrs	r3, r4
 8014952:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	009b      	lsls	r3, r3, #2
 801495e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014962:	4413      	add	r3, r2
 8014964:	6879      	ldr	r1, [r7, #4]
 8014966:	4618      	mov	r0, r3
 8014968:	f7ff fc88 	bl	801427c <st_dword>
			fs->wflag = 1;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2201      	movs	r2, #1
 8014970:	70da      	strb	r2, [r3, #3]
			break;
 8014972:	e006      	b.n	8014982 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8014974:	bf00      	nop
 8014976:	e004      	b.n	8014982 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8014978:	bf00      	nop
 801497a:	e002      	b.n	8014982 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801497c:	bf00      	nop
 801497e:	e000      	b.n	8014982 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8014980:	bf00      	nop
		}
	}
	return res;
 8014982:	7ffb      	ldrb	r3, [r7, #31]
}
 8014984:	4618      	mov	r0, r3
 8014986:	3724      	adds	r7, #36	; 0x24
 8014988:	46bd      	mov	sp, r7
 801498a:	bd90      	pop	{r4, r7, pc}

0801498c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b088      	sub	sp, #32
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d10d      	bne.n	80149be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	695b      	ldr	r3, [r3, #20]
 80149a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80149a8:	69bb      	ldr	r3, [r7, #24]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d004      	beq.n	80149b8 <create_chain+0x2c>
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	69db      	ldr	r3, [r3, #28]
 80149b2:	69ba      	ldr	r2, [r7, #24]
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d31b      	bcc.n	80149f0 <create_chain+0x64>
 80149b8:	2301      	movs	r3, #1
 80149ba:	61bb      	str	r3, [r7, #24]
 80149bc:	e018      	b.n	80149f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80149be:	6839      	ldr	r1, [r7, #0]
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f7ff fe57 	bl	8014674 <get_fat>
 80149c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d801      	bhi.n	80149d2 <create_chain+0x46>
 80149ce:	2301      	movs	r3, #1
 80149d0:	e070      	b.n	8014ab4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149d8:	d101      	bne.n	80149de <create_chain+0x52>
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	e06a      	b.n	8014ab4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	69db      	ldr	r3, [r3, #28]
 80149e2:	68fa      	ldr	r2, [r7, #12]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d201      	bcs.n	80149ec <create_chain+0x60>
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	e063      	b.n	8014ab4 <create_chain+0x128>
		scl = clst;
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	3301      	adds	r3, #1
 80149f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	69db      	ldr	r3, [r3, #28]
 80149fe:	69fa      	ldr	r2, [r7, #28]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d307      	bcc.n	8014a14 <create_chain+0x88>
				ncl = 2;
 8014a04:	2302      	movs	r3, #2
 8014a06:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014a08:	69fa      	ldr	r2, [r7, #28]
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d901      	bls.n	8014a14 <create_chain+0x88>
 8014a10:	2300      	movs	r3, #0
 8014a12:	e04f      	b.n	8014ab4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014a14:	69f9      	ldr	r1, [r7, #28]
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f7ff fe2c 	bl	8014674 <get_fat>
 8014a1c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d00e      	beq.n	8014a42 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d003      	beq.n	8014a32 <create_chain+0xa6>
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a30:	d101      	bne.n	8014a36 <create_chain+0xaa>
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	e03e      	b.n	8014ab4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014a36:	69fa      	ldr	r2, [r7, #28]
 8014a38:	69bb      	ldr	r3, [r7, #24]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d1da      	bne.n	80149f4 <create_chain+0x68>
 8014a3e:	2300      	movs	r3, #0
 8014a40:	e038      	b.n	8014ab4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014a42:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014a44:	f04f 32ff 	mov.w	r2, #4294967295
 8014a48:	69f9      	ldr	r1, [r7, #28]
 8014a4a:	6938      	ldr	r0, [r7, #16]
 8014a4c:	f7ff feb7 	bl	80147be <put_fat>
 8014a50:	4603      	mov	r3, r0
 8014a52:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014a54:	7dfb      	ldrb	r3, [r7, #23]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d109      	bne.n	8014a6e <create_chain+0xe2>
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d006      	beq.n	8014a6e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014a60:	69fa      	ldr	r2, [r7, #28]
 8014a62:	6839      	ldr	r1, [r7, #0]
 8014a64:	6938      	ldr	r0, [r7, #16]
 8014a66:	f7ff feaa 	bl	80147be <put_fat>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014a6e:	7dfb      	ldrb	r3, [r7, #23]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d116      	bne.n	8014aa2 <create_chain+0x116>
		fs->last_clst = ncl;
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	69fa      	ldr	r2, [r7, #28]
 8014a78:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	699a      	ldr	r2, [r3, #24]
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	69db      	ldr	r3, [r3, #28]
 8014a82:	3b02      	subs	r3, #2
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d804      	bhi.n	8014a92 <create_chain+0x106>
 8014a88:	693b      	ldr	r3, [r7, #16]
 8014a8a:	699b      	ldr	r3, [r3, #24]
 8014a8c:	1e5a      	subs	r2, r3, #1
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8014a92:	693b      	ldr	r3, [r7, #16]
 8014a94:	791b      	ldrb	r3, [r3, #4]
 8014a96:	f043 0301 	orr.w	r3, r3, #1
 8014a9a:	b2da      	uxtb	r2, r3
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	711a      	strb	r2, [r3, #4]
 8014aa0:	e007      	b.n	8014ab2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014aa2:	7dfb      	ldrb	r3, [r7, #23]
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	d102      	bne.n	8014aae <create_chain+0x122>
 8014aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8014aac:	e000      	b.n	8014ab0 <create_chain+0x124>
 8014aae:	2301      	movs	r3, #1
 8014ab0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8014ab2:	69fb      	ldr	r3, [r7, #28]
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3720      	adds	r7, #32
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b086      	sub	sp, #24
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
 8014ac4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014ad2:	d204      	bcs.n	8014ade <dir_sdi+0x22>
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	f003 031f 	and.w	r3, r3, #31
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d001      	beq.n	8014ae2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8014ade:	2302      	movs	r3, #2
 8014ae0:	e063      	b.n	8014baa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	683a      	ldr	r2, [r7, #0]
 8014ae6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	689b      	ldr	r3, [r3, #8]
 8014aec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d106      	bne.n	8014b02 <dir_sdi+0x46>
 8014af4:	693b      	ldr	r3, [r7, #16]
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	2b02      	cmp	r3, #2
 8014afa:	d902      	bls.n	8014b02 <dir_sdi+0x46>
		clst = fs->dirbase;
 8014afc:	693b      	ldr	r3, [r7, #16]
 8014afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b00:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d10c      	bne.n	8014b22 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	095b      	lsrs	r3, r3, #5
 8014b0c:	693a      	ldr	r2, [r7, #16]
 8014b0e:	8912      	ldrh	r2, [r2, #8]
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d301      	bcc.n	8014b18 <dir_sdi+0x5c>
 8014b14:	2302      	movs	r3, #2
 8014b16:	e048      	b.n	8014baa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	61da      	str	r2, [r3, #28]
 8014b20:	e029      	b.n	8014b76 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014b22:	693b      	ldr	r3, [r7, #16]
 8014b24:	895b      	ldrh	r3, [r3, #10]
 8014b26:	025b      	lsls	r3, r3, #9
 8014b28:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014b2a:	e019      	b.n	8014b60 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6979      	ldr	r1, [r7, #20]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7ff fd9f 	bl	8014674 <get_fat>
 8014b36:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b3e:	d101      	bne.n	8014b44 <dir_sdi+0x88>
 8014b40:	2301      	movs	r3, #1
 8014b42:	e032      	b.n	8014baa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	2b01      	cmp	r3, #1
 8014b48:	d904      	bls.n	8014b54 <dir_sdi+0x98>
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	69db      	ldr	r3, [r3, #28]
 8014b4e:	697a      	ldr	r2, [r7, #20]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d301      	bcc.n	8014b58 <dir_sdi+0x9c>
 8014b54:	2302      	movs	r3, #2
 8014b56:	e028      	b.n	8014baa <dir_sdi+0xee>
			ofs -= csz;
 8014b58:	683a      	ldr	r2, [r7, #0]
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014b60:	683a      	ldr	r2, [r7, #0]
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d2e1      	bcs.n	8014b2c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014b68:	6979      	ldr	r1, [r7, #20]
 8014b6a:	6938      	ldr	r0, [r7, #16]
 8014b6c:	f7ff fd63 	bl	8014636 <clust2sect>
 8014b70:	4602      	mov	r2, r0
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	697a      	ldr	r2, [r7, #20]
 8014b7a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	69db      	ldr	r3, [r3, #28]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d101      	bne.n	8014b88 <dir_sdi+0xcc>
 8014b84:	2302      	movs	r3, #2
 8014b86:	e010      	b.n	8014baa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	69da      	ldr	r2, [r3, #28]
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	0a5b      	lsrs	r3, r3, #9
 8014b90:	441a      	add	r2, r3
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ba2:	441a      	add	r2, r3
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014ba8:	2300      	movs	r3, #0
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3718      	adds	r7, #24
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014bb2:	b580      	push	{r7, lr}
 8014bb4:	b086      	sub	sp, #24
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
 8014bba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	695b      	ldr	r3, [r3, #20]
 8014bc6:	3320      	adds	r3, #32
 8014bc8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	69db      	ldr	r3, [r3, #28]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d003      	beq.n	8014bda <dir_next+0x28>
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014bd8:	d301      	bcc.n	8014bde <dir_next+0x2c>
 8014bda:	2304      	movs	r3, #4
 8014bdc:	e0aa      	b.n	8014d34 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	f040 8098 	bne.w	8014d1a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	69db      	ldr	r3, [r3, #28]
 8014bee:	1c5a      	adds	r2, r3, #1
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	699b      	ldr	r3, [r3, #24]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d10b      	bne.n	8014c14 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	095b      	lsrs	r3, r3, #5
 8014c00:	68fa      	ldr	r2, [r7, #12]
 8014c02:	8912      	ldrh	r2, [r2, #8]
 8014c04:	4293      	cmp	r3, r2
 8014c06:	f0c0 8088 	bcc.w	8014d1a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	61da      	str	r2, [r3, #28]
 8014c10:	2304      	movs	r3, #4
 8014c12:	e08f      	b.n	8014d34 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	0a5b      	lsrs	r3, r3, #9
 8014c18:	68fa      	ldr	r2, [r7, #12]
 8014c1a:	8952      	ldrh	r2, [r2, #10]
 8014c1c:	3a01      	subs	r2, #1
 8014c1e:	4013      	ands	r3, r2
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d17a      	bne.n	8014d1a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	699b      	ldr	r3, [r3, #24]
 8014c2a:	4619      	mov	r1, r3
 8014c2c:	4610      	mov	r0, r2
 8014c2e:	f7ff fd21 	bl	8014674 <get_fat>
 8014c32:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	2b01      	cmp	r3, #1
 8014c38:	d801      	bhi.n	8014c3e <dir_next+0x8c>
 8014c3a:	2302      	movs	r3, #2
 8014c3c:	e07a      	b.n	8014d34 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c44:	d101      	bne.n	8014c4a <dir_next+0x98>
 8014c46:	2301      	movs	r3, #1
 8014c48:	e074      	b.n	8014d34 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	69db      	ldr	r3, [r3, #28]
 8014c4e:	697a      	ldr	r2, [r7, #20]
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d358      	bcc.n	8014d06 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d104      	bne.n	8014c64 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	61da      	str	r2, [r3, #28]
 8014c60:	2304      	movs	r3, #4
 8014c62:	e067      	b.n	8014d34 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	699b      	ldr	r3, [r3, #24]
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	4610      	mov	r0, r2
 8014c6e:	f7ff fe8d 	bl	801498c <create_chain>
 8014c72:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d101      	bne.n	8014c7e <dir_next+0xcc>
 8014c7a:	2307      	movs	r3, #7
 8014c7c:	e05a      	b.n	8014d34 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d101      	bne.n	8014c88 <dir_next+0xd6>
 8014c84:	2302      	movs	r3, #2
 8014c86:	e055      	b.n	8014d34 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c8e:	d101      	bne.n	8014c94 <dir_next+0xe2>
 8014c90:	2301      	movs	r3, #1
 8014c92:	e04f      	b.n	8014d34 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014c94:	68f8      	ldr	r0, [r7, #12]
 8014c96:	f7ff fc5d 	bl	8014554 <sync_window>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d001      	beq.n	8014ca4 <dir_next+0xf2>
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	e047      	b.n	8014d34 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	3338      	adds	r3, #56	; 0x38
 8014ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014cac:	2100      	movs	r1, #0
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7ff fb10 	bl	80142d4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	613b      	str	r3, [r7, #16]
 8014cb8:	6979      	ldr	r1, [r7, #20]
 8014cba:	68f8      	ldr	r0, [r7, #12]
 8014cbc:	f7ff fcbb 	bl	8014636 <clust2sect>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8014cc6:	e012      	b.n	8014cee <dir_next+0x13c>
						fs->wflag = 1;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2201      	movs	r2, #1
 8014ccc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014cce:	68f8      	ldr	r0, [r7, #12]
 8014cd0:	f7ff fc40 	bl	8014554 <sync_window>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d001      	beq.n	8014cde <dir_next+0x12c>
 8014cda:	2301      	movs	r3, #1
 8014cdc:	e02a      	b.n	8014d34 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	3301      	adds	r3, #1
 8014ce2:	613b      	str	r3, [r7, #16]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ce8:	1c5a      	adds	r2, r3, #1
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	635a      	str	r2, [r3, #52]	; 0x34
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	895b      	ldrh	r3, [r3, #10]
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	693b      	ldr	r3, [r7, #16]
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	d3e6      	bcc.n	8014cc8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	1ad2      	subs	r2, r2, r3
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	697a      	ldr	r2, [r7, #20]
 8014d0a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8014d0c:	6979      	ldr	r1, [r7, #20]
 8014d0e:	68f8      	ldr	r0, [r7, #12]
 8014d10:	f7ff fc91 	bl	8014636 <clust2sect>
 8014d14:	4602      	mov	r2, r0
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	68ba      	ldr	r2, [r7, #8]
 8014d1e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d2c:	441a      	add	r2, r3
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014d32:	2300      	movs	r3, #0
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3718      	adds	r7, #24
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}

08014d3c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b084      	sub	sp, #16
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	331a      	adds	r3, #26
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7ff fa40 	bl	80141d0 <ld_word>
 8014d50:	4603      	mov	r3, r0
 8014d52:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	2b03      	cmp	r3, #3
 8014d5a:	d109      	bne.n	8014d70 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014d5c:	683b      	ldr	r3, [r7, #0]
 8014d5e:	3314      	adds	r3, #20
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7ff fa35 	bl	80141d0 <ld_word>
 8014d66:	4603      	mov	r3, r0
 8014d68:	041b      	lsls	r3, r3, #16
 8014d6a:	68fa      	ldr	r2, [r7, #12]
 8014d6c:	4313      	orrs	r3, r2
 8014d6e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014d70:	68fb      	ldr	r3, [r7, #12]
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3710      	adds	r7, #16
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
	...

08014d7c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8014d7c:	b590      	push	{r4, r7, lr}
 8014d7e:	b087      	sub	sp, #28
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	331a      	adds	r3, #26
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7ff fa20 	bl	80141d0 <ld_word>
 8014d90:	4603      	mov	r3, r0
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d001      	beq.n	8014d9a <cmp_lfn+0x1e>
 8014d96:	2300      	movs	r3, #0
 8014d98:	e059      	b.n	8014e4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014da2:	1e5a      	subs	r2, r3, #1
 8014da4:	4613      	mov	r3, r2
 8014da6:	005b      	lsls	r3, r3, #1
 8014da8:	4413      	add	r3, r2
 8014daa:	009b      	lsls	r3, r3, #2
 8014dac:	4413      	add	r3, r2
 8014dae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014db0:	2301      	movs	r3, #1
 8014db2:	81fb      	strh	r3, [r7, #14]
 8014db4:	2300      	movs	r3, #0
 8014db6:	613b      	str	r3, [r7, #16]
 8014db8:	e033      	b.n	8014e22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8014dba:	4a27      	ldr	r2, [pc, #156]	; (8014e58 <cmp_lfn+0xdc>)
 8014dbc:	693b      	ldr	r3, [r7, #16]
 8014dbe:	4413      	add	r3, r2
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	4413      	add	r3, r2
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7ff fa01 	bl	80141d0 <ld_word>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8014dd2:	89fb      	ldrh	r3, [r7, #14]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d01a      	beq.n	8014e0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	2bfe      	cmp	r3, #254	; 0xfe
 8014ddc:	d812      	bhi.n	8014e04 <cmp_lfn+0x88>
 8014dde:	89bb      	ldrh	r3, [r7, #12]
 8014de0:	4618      	mov	r0, r3
 8014de2:	f005 ffcb 	bl	801ad7c <ff_wtoupper>
 8014de6:	4603      	mov	r3, r0
 8014de8:	461c      	mov	r4, r3
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	1c5a      	adds	r2, r3, #1
 8014dee:	617a      	str	r2, [r7, #20]
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	4413      	add	r3, r2
 8014df6:	881b      	ldrh	r3, [r3, #0]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f005 ffbf 	bl	801ad7c <ff_wtoupper>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	429c      	cmp	r4, r3
 8014e02:	d001      	beq.n	8014e08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8014e04:	2300      	movs	r3, #0
 8014e06:	e022      	b.n	8014e4e <cmp_lfn+0xd2>
			}
			wc = uc;
 8014e08:	89bb      	ldrh	r3, [r7, #12]
 8014e0a:	81fb      	strh	r3, [r7, #14]
 8014e0c:	e006      	b.n	8014e1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e0e:	89bb      	ldrh	r3, [r7, #12]
 8014e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e14:	4293      	cmp	r3, r2
 8014e16:	d001      	beq.n	8014e1c <cmp_lfn+0xa0>
 8014e18:	2300      	movs	r3, #0
 8014e1a:	e018      	b.n	8014e4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	3301      	adds	r3, #1
 8014e20:	613b      	str	r3, [r7, #16]
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	2b0c      	cmp	r3, #12
 8014e26:	d9c8      	bls.n	8014dba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d00b      	beq.n	8014e4c <cmp_lfn+0xd0>
 8014e34:	89fb      	ldrh	r3, [r7, #14]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d008      	beq.n	8014e4c <cmp_lfn+0xd0>
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	005b      	lsls	r3, r3, #1
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	4413      	add	r3, r2
 8014e42:	881b      	ldrh	r3, [r3, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d001      	beq.n	8014e4c <cmp_lfn+0xd0>
 8014e48:	2300      	movs	r3, #0
 8014e4a:	e000      	b.n	8014e4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8014e4c:	2301      	movs	r3, #1
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	371c      	adds	r7, #28
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd90      	pop	{r4, r7, pc}
 8014e56:	bf00      	nop
 8014e58:	0802778c 	.word	0x0802778c

08014e5c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b086      	sub	sp, #24
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	331a      	adds	r3, #26
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7ff f9b0 	bl	80141d0 <ld_word>
 8014e70:	4603      	mov	r3, r0
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d001      	beq.n	8014e7a <pick_lfn+0x1e>
 8014e76:	2300      	movs	r3, #0
 8014e78:	e04d      	b.n	8014f16 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014e82:	1e5a      	subs	r2, r3, #1
 8014e84:	4613      	mov	r3, r2
 8014e86:	005b      	lsls	r3, r3, #1
 8014e88:	4413      	add	r3, r2
 8014e8a:	009b      	lsls	r3, r3, #2
 8014e8c:	4413      	add	r3, r2
 8014e8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014e90:	2301      	movs	r3, #1
 8014e92:	81fb      	strh	r3, [r7, #14]
 8014e94:	2300      	movs	r3, #0
 8014e96:	613b      	str	r3, [r7, #16]
 8014e98:	e028      	b.n	8014eec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8014e9a:	4a21      	ldr	r2, [pc, #132]	; (8014f20 <pick_lfn+0xc4>)
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	4413      	add	r3, r2
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	4413      	add	r3, r2
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7ff f991 	bl	80141d0 <ld_word>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8014eb2:	89fb      	ldrh	r3, [r7, #14]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d00f      	beq.n	8014ed8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	2bfe      	cmp	r3, #254	; 0xfe
 8014ebc:	d901      	bls.n	8014ec2 <pick_lfn+0x66>
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	e029      	b.n	8014f16 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014ec2:	89bb      	ldrh	r3, [r7, #12]
 8014ec4:	81fb      	strh	r3, [r7, #14]
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	1c5a      	adds	r2, r3, #1
 8014eca:	617a      	str	r2, [r7, #20]
 8014ecc:	005b      	lsls	r3, r3, #1
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	89fa      	ldrh	r2, [r7, #14]
 8014ed4:	801a      	strh	r2, [r3, #0]
 8014ed6:	e006      	b.n	8014ee6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014ed8:	89bb      	ldrh	r3, [r7, #12]
 8014eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ede:	4293      	cmp	r3, r2
 8014ee0:	d001      	beq.n	8014ee6 <pick_lfn+0x8a>
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	e017      	b.n	8014f16 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	3301      	adds	r3, #1
 8014eea:	613b      	str	r3, [r7, #16]
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	2b0c      	cmp	r3, #12
 8014ef0:	d9d3      	bls.n	8014e9a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00a      	beq.n	8014f14 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	2bfe      	cmp	r3, #254	; 0xfe
 8014f02:	d901      	bls.n	8014f08 <pick_lfn+0xac>
 8014f04:	2300      	movs	r3, #0
 8014f06:	e006      	b.n	8014f16 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8014f08:	697b      	ldr	r3, [r7, #20]
 8014f0a:	005b      	lsls	r3, r3, #1
 8014f0c:	687a      	ldr	r2, [r7, #4]
 8014f0e:	4413      	add	r3, r2
 8014f10:	2200      	movs	r2, #0
 8014f12:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8014f14:	2301      	movs	r3, #1
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3718      	adds	r7, #24
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	0802778c 	.word	0x0802778c

08014f24 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014f24:	b480      	push	{r7}
 8014f26:	b085      	sub	sp, #20
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8014f30:	230b      	movs	r3, #11
 8014f32:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014f34:	7bfb      	ldrb	r3, [r7, #15]
 8014f36:	b2da      	uxtb	r2, r3
 8014f38:	0852      	lsrs	r2, r2, #1
 8014f3a:	01db      	lsls	r3, r3, #7
 8014f3c:	4313      	orrs	r3, r2
 8014f3e:	b2da      	uxtb	r2, r3
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	1c59      	adds	r1, r3, #1
 8014f44:	6079      	str	r1, [r7, #4]
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	4413      	add	r3, r2
 8014f4a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014f4c:	68bb      	ldr	r3, [r7, #8]
 8014f4e:	3b01      	subs	r3, #1
 8014f50:	60bb      	str	r3, [r7, #8]
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d1ed      	bne.n	8014f34 <sum_sfn+0x10>
	return sum;
 8014f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3714      	adds	r7, #20
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr

08014f66 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014f66:	b580      	push	{r7, lr}
 8014f68:	b086      	sub	sp, #24
 8014f6a:	af00      	add	r7, sp, #0
 8014f6c:	6078      	str	r0, [r7, #4]
 8014f6e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8014f70:	2304      	movs	r3, #4
 8014f72:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8014f7a:	23ff      	movs	r3, #255	; 0xff
 8014f7c:	757b      	strb	r3, [r7, #21]
 8014f7e:	23ff      	movs	r3, #255	; 0xff
 8014f80:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8014f82:	e081      	b.n	8015088 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	69db      	ldr	r3, [r3, #28]
 8014f88:	4619      	mov	r1, r3
 8014f8a:	6938      	ldr	r0, [r7, #16]
 8014f8c:	f7ff fb26 	bl	80145dc <move_window>
 8014f90:	4603      	mov	r3, r0
 8014f92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014f94:	7dfb      	ldrb	r3, [r7, #23]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d17c      	bne.n	8015094 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6a1b      	ldr	r3, [r3, #32]
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8014fa2:	7dbb      	ldrb	r3, [r7, #22]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d102      	bne.n	8014fae <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014fa8:	2304      	movs	r3, #4
 8014faa:	75fb      	strb	r3, [r7, #23]
 8014fac:	e077      	b.n	801509e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6a1b      	ldr	r3, [r3, #32]
 8014fb2:	330b      	adds	r3, #11
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014fba:	73fb      	strb	r3, [r7, #15]
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	7bfa      	ldrb	r2, [r7, #15]
 8014fc0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014fc2:	7dbb      	ldrb	r3, [r7, #22]
 8014fc4:	2be5      	cmp	r3, #229	; 0xe5
 8014fc6:	d00e      	beq.n	8014fe6 <dir_read+0x80>
 8014fc8:	7dbb      	ldrb	r3, [r7, #22]
 8014fca:	2b2e      	cmp	r3, #46	; 0x2e
 8014fcc:	d00b      	beq.n	8014fe6 <dir_read+0x80>
 8014fce:	7bfb      	ldrb	r3, [r7, #15]
 8014fd0:	f023 0320 	bic.w	r3, r3, #32
 8014fd4:	2b08      	cmp	r3, #8
 8014fd6:	bf0c      	ite	eq
 8014fd8:	2301      	moveq	r3, #1
 8014fda:	2300      	movne	r3, #0
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	461a      	mov	r2, r3
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	4293      	cmp	r3, r2
 8014fe4:	d002      	beq.n	8014fec <dir_read+0x86>
				ord = 0xFF;
 8014fe6:	23ff      	movs	r3, #255	; 0xff
 8014fe8:	757b      	strb	r3, [r7, #21]
 8014fea:	e044      	b.n	8015076 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8014fec:	7bfb      	ldrb	r3, [r7, #15]
 8014fee:	2b0f      	cmp	r3, #15
 8014ff0:	d12f      	bne.n	8015052 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8014ff2:	7dbb      	ldrb	r3, [r7, #22]
 8014ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d00d      	beq.n	8015018 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6a1b      	ldr	r3, [r3, #32]
 8015000:	7b5b      	ldrb	r3, [r3, #13]
 8015002:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8015004:	7dbb      	ldrb	r3, [r7, #22]
 8015006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801500a:	75bb      	strb	r3, [r7, #22]
 801500c:	7dbb      	ldrb	r3, [r7, #22]
 801500e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	695a      	ldr	r2, [r3, #20]
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015018:	7dba      	ldrb	r2, [r7, #22]
 801501a:	7d7b      	ldrb	r3, [r7, #21]
 801501c:	429a      	cmp	r2, r3
 801501e:	d115      	bne.n	801504c <dir_read+0xe6>
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6a1b      	ldr	r3, [r3, #32]
 8015024:	330d      	adds	r3, #13
 8015026:	781b      	ldrb	r3, [r3, #0]
 8015028:	7d3a      	ldrb	r2, [r7, #20]
 801502a:	429a      	cmp	r2, r3
 801502c:	d10e      	bne.n	801504c <dir_read+0xe6>
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	68da      	ldr	r2, [r3, #12]
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6a1b      	ldr	r3, [r3, #32]
 8015036:	4619      	mov	r1, r3
 8015038:	4610      	mov	r0, r2
 801503a:	f7ff ff0f 	bl	8014e5c <pick_lfn>
 801503e:	4603      	mov	r3, r0
 8015040:	2b00      	cmp	r3, #0
 8015042:	d003      	beq.n	801504c <dir_read+0xe6>
 8015044:	7d7b      	ldrb	r3, [r7, #21]
 8015046:	3b01      	subs	r3, #1
 8015048:	b2db      	uxtb	r3, r3
 801504a:	e000      	b.n	801504e <dir_read+0xe8>
 801504c:	23ff      	movs	r3, #255	; 0xff
 801504e:	757b      	strb	r3, [r7, #21]
 8015050:	e011      	b.n	8015076 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8015052:	7d7b      	ldrb	r3, [r7, #21]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d109      	bne.n	801506c <dir_read+0x106>
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	6a1b      	ldr	r3, [r3, #32]
 801505c:	4618      	mov	r0, r3
 801505e:	f7ff ff61 	bl	8014f24 <sum_sfn>
 8015062:	4603      	mov	r3, r0
 8015064:	461a      	mov	r2, r3
 8015066:	7d3b      	ldrb	r3, [r7, #20]
 8015068:	4293      	cmp	r3, r2
 801506a:	d015      	beq.n	8015098 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f04f 32ff 	mov.w	r2, #4294967295
 8015072:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8015074:	e010      	b.n	8015098 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8015076:	2100      	movs	r1, #0
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f7ff fd9a 	bl	8014bb2 <dir_next>
 801507e:	4603      	mov	r3, r0
 8015080:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015082:	7dfb      	ldrb	r3, [r7, #23]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d109      	bne.n	801509c <dir_read+0x136>
	while (dp->sect) {
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	69db      	ldr	r3, [r3, #28]
 801508c:	2b00      	cmp	r3, #0
 801508e:	f47f af79 	bne.w	8014f84 <dir_read+0x1e>
 8015092:	e004      	b.n	801509e <dir_read+0x138>
		if (res != FR_OK) break;
 8015094:	bf00      	nop
 8015096:	e002      	b.n	801509e <dir_read+0x138>
					break;
 8015098:	bf00      	nop
 801509a:	e000      	b.n	801509e <dir_read+0x138>
		if (res != FR_OK) break;
 801509c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801509e:	7dfb      	ldrb	r3, [r7, #23]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d002      	beq.n	80150aa <dir_read+0x144>
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2200      	movs	r2, #0
 80150a8:	61da      	str	r2, [r3, #28]
	return res;
 80150aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	3718      	adds	r7, #24
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b086      	sub	sp, #24
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80150c2:	2100      	movs	r1, #0
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7ff fcf9 	bl	8014abc <dir_sdi>
 80150ca:	4603      	mov	r3, r0
 80150cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80150ce:	7dfb      	ldrb	r3, [r7, #23]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d001      	beq.n	80150d8 <dir_find+0x24>
 80150d4:	7dfb      	ldrb	r3, [r7, #23]
 80150d6:	e0a9      	b.n	801522c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80150d8:	23ff      	movs	r3, #255	; 0xff
 80150da:	753b      	strb	r3, [r7, #20]
 80150dc:	7d3b      	ldrb	r3, [r7, #20]
 80150de:	757b      	strb	r3, [r7, #21]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f04f 32ff 	mov.w	r2, #4294967295
 80150e6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	69db      	ldr	r3, [r3, #28]
 80150ec:	4619      	mov	r1, r3
 80150ee:	6938      	ldr	r0, [r7, #16]
 80150f0:	f7ff fa74 	bl	80145dc <move_window>
 80150f4:	4603      	mov	r3, r0
 80150f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80150f8:	7dfb      	ldrb	r3, [r7, #23]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	f040 8090 	bne.w	8015220 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6a1b      	ldr	r3, [r3, #32]
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015108:	7dbb      	ldrb	r3, [r7, #22]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d102      	bne.n	8015114 <dir_find+0x60>
 801510e:	2304      	movs	r3, #4
 8015110:	75fb      	strb	r3, [r7, #23]
 8015112:	e08a      	b.n	801522a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6a1b      	ldr	r3, [r3, #32]
 8015118:	330b      	adds	r3, #11
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015120:	73fb      	strb	r3, [r7, #15]
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	7bfa      	ldrb	r2, [r7, #15]
 8015126:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015128:	7dbb      	ldrb	r3, [r7, #22]
 801512a:	2be5      	cmp	r3, #229	; 0xe5
 801512c:	d007      	beq.n	801513e <dir_find+0x8a>
 801512e:	7bfb      	ldrb	r3, [r7, #15]
 8015130:	f003 0308 	and.w	r3, r3, #8
 8015134:	2b00      	cmp	r3, #0
 8015136:	d009      	beq.n	801514c <dir_find+0x98>
 8015138:	7bfb      	ldrb	r3, [r7, #15]
 801513a:	2b0f      	cmp	r3, #15
 801513c:	d006      	beq.n	801514c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801513e:	23ff      	movs	r3, #255	; 0xff
 8015140:	757b      	strb	r3, [r7, #21]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f04f 32ff 	mov.w	r2, #4294967295
 8015148:	631a      	str	r2, [r3, #48]	; 0x30
 801514a:	e05e      	b.n	801520a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801514c:	7bfb      	ldrb	r3, [r7, #15]
 801514e:	2b0f      	cmp	r3, #15
 8015150:	d136      	bne.n	80151c0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801515c:	2b00      	cmp	r3, #0
 801515e:	d154      	bne.n	801520a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015160:	7dbb      	ldrb	r3, [r7, #22]
 8015162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015166:	2b00      	cmp	r3, #0
 8015168:	d00d      	beq.n	8015186 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6a1b      	ldr	r3, [r3, #32]
 801516e:	7b5b      	ldrb	r3, [r3, #13]
 8015170:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015172:	7dbb      	ldrb	r3, [r7, #22]
 8015174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015178:	75bb      	strb	r3, [r7, #22]
 801517a:	7dbb      	ldrb	r3, [r7, #22]
 801517c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	695a      	ldr	r2, [r3, #20]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015186:	7dba      	ldrb	r2, [r7, #22]
 8015188:	7d7b      	ldrb	r3, [r7, #21]
 801518a:	429a      	cmp	r2, r3
 801518c:	d115      	bne.n	80151ba <dir_find+0x106>
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6a1b      	ldr	r3, [r3, #32]
 8015192:	330d      	adds	r3, #13
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	7d3a      	ldrb	r2, [r7, #20]
 8015198:	429a      	cmp	r2, r3
 801519a:	d10e      	bne.n	80151ba <dir_find+0x106>
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	68da      	ldr	r2, [r3, #12]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	6a1b      	ldr	r3, [r3, #32]
 80151a4:	4619      	mov	r1, r3
 80151a6:	4610      	mov	r0, r2
 80151a8:	f7ff fde8 	bl	8014d7c <cmp_lfn>
 80151ac:	4603      	mov	r3, r0
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d003      	beq.n	80151ba <dir_find+0x106>
 80151b2:	7d7b      	ldrb	r3, [r7, #21]
 80151b4:	3b01      	subs	r3, #1
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	e000      	b.n	80151bc <dir_find+0x108>
 80151ba:	23ff      	movs	r3, #255	; 0xff
 80151bc:	757b      	strb	r3, [r7, #21]
 80151be:	e024      	b.n	801520a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80151c0:	7d7b      	ldrb	r3, [r7, #21]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d109      	bne.n	80151da <dir_find+0x126>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6a1b      	ldr	r3, [r3, #32]
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7ff feaa 	bl	8014f24 <sum_sfn>
 80151d0:	4603      	mov	r3, r0
 80151d2:	461a      	mov	r2, r3
 80151d4:	7d3b      	ldrb	r3, [r7, #20]
 80151d6:	4293      	cmp	r3, r2
 80151d8:	d024      	beq.n	8015224 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80151e0:	f003 0301 	and.w	r3, r3, #1
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d10a      	bne.n	80151fe <dir_find+0x14a>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6a18      	ldr	r0, [r3, #32]
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	3324      	adds	r3, #36	; 0x24
 80151f0:	220b      	movs	r2, #11
 80151f2:	4619      	mov	r1, r3
 80151f4:	f7ff f888 	bl	8014308 <mem_cmp>
 80151f8:	4603      	mov	r3, r0
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d014      	beq.n	8015228 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80151fe:	23ff      	movs	r3, #255	; 0xff
 8015200:	757b      	strb	r3, [r7, #21]
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f04f 32ff 	mov.w	r2, #4294967295
 8015208:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801520a:	2100      	movs	r1, #0
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f7ff fcd0 	bl	8014bb2 <dir_next>
 8015212:	4603      	mov	r3, r0
 8015214:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015216:	7dfb      	ldrb	r3, [r7, #23]
 8015218:	2b00      	cmp	r3, #0
 801521a:	f43f af65 	beq.w	80150e8 <dir_find+0x34>
 801521e:	e004      	b.n	801522a <dir_find+0x176>
		if (res != FR_OK) break;
 8015220:	bf00      	nop
 8015222:	e002      	b.n	801522a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015224:	bf00      	nop
 8015226:	e000      	b.n	801522a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015228:	bf00      	nop

	return res;
 801522a:	7dfb      	ldrb	r3, [r7, #23]
}
 801522c:	4618      	mov	r0, r3
 801522e:	3718      	adds	r7, #24
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b088      	sub	sp, #32
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	2200      	movs	r2, #0
 8015248:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	69db      	ldr	r3, [r3, #28]
 801524e:	2b00      	cmp	r3, #0
 8015250:	f000 80c9 	beq.w	80153e6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801525c:	d032      	beq.n	80152c4 <get_fileinfo+0x90>
			i = j = 0;
 801525e:	2300      	movs	r3, #0
 8015260:	61bb      	str	r3, [r7, #24]
 8015262:	69bb      	ldr	r3, [r7, #24]
 8015264:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8015266:	e01b      	b.n	80152a0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8015268:	89fb      	ldrh	r3, [r7, #14]
 801526a:	2100      	movs	r1, #0
 801526c:	4618      	mov	r0, r3
 801526e:	f005 fd73 	bl	801ad58 <ff_convert>
 8015272:	4603      	mov	r3, r0
 8015274:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8015276:	89fb      	ldrh	r3, [r7, #14]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d102      	bne.n	8015282 <get_fileinfo+0x4e>
 801527c:	2300      	movs	r3, #0
 801527e:	61fb      	str	r3, [r7, #28]
 8015280:	e01a      	b.n	80152b8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8015282:	69fb      	ldr	r3, [r7, #28]
 8015284:	2bfe      	cmp	r3, #254	; 0xfe
 8015286:	d902      	bls.n	801528e <get_fileinfo+0x5a>
 8015288:	2300      	movs	r3, #0
 801528a:	61fb      	str	r3, [r7, #28]
 801528c:	e014      	b.n	80152b8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	1c5a      	adds	r2, r3, #1
 8015292:	61fa      	str	r2, [r7, #28]
 8015294:	89fa      	ldrh	r2, [r7, #14]
 8015296:	b2d1      	uxtb	r1, r2
 8015298:	683a      	ldr	r2, [r7, #0]
 801529a:	4413      	add	r3, r2
 801529c:	460a      	mov	r2, r1
 801529e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	68da      	ldr	r2, [r3, #12]
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	1c59      	adds	r1, r3, #1
 80152a8:	61b9      	str	r1, [r7, #24]
 80152aa:	005b      	lsls	r3, r3, #1
 80152ac:	4413      	add	r3, r2
 80152ae:	881b      	ldrh	r3, [r3, #0]
 80152b0:	81fb      	strh	r3, [r7, #14]
 80152b2:	89fb      	ldrh	r3, [r7, #14]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d1d7      	bne.n	8015268 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80152b8:	683a      	ldr	r2, [r7, #0]
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	4413      	add	r3, r2
 80152be:	3316      	adds	r3, #22
 80152c0:	2200      	movs	r2, #0
 80152c2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80152c4:	2300      	movs	r3, #0
 80152c6:	61bb      	str	r3, [r7, #24]
 80152c8:	69bb      	ldr	r3, [r7, #24]
 80152ca:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80152cc:	683a      	ldr	r2, [r7, #0]
 80152ce:	69fb      	ldr	r3, [r7, #28]
 80152d0:	4413      	add	r3, r2
 80152d2:	3316      	adds	r3, #22
 80152d4:	781b      	ldrb	r3, [r3, #0]
 80152d6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80152d8:	e04c      	b.n	8015374 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6a1a      	ldr	r2, [r3, #32]
 80152de:	69fb      	ldr	r3, [r7, #28]
 80152e0:	1c59      	adds	r1, r3, #1
 80152e2:	61f9      	str	r1, [r7, #28]
 80152e4:	4413      	add	r3, r2
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80152ea:	7dfb      	ldrb	r3, [r7, #23]
 80152ec:	2b20      	cmp	r3, #32
 80152ee:	d100      	bne.n	80152f2 <get_fileinfo+0xbe>
 80152f0:	e040      	b.n	8015374 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80152f2:	7dfb      	ldrb	r3, [r7, #23]
 80152f4:	2b05      	cmp	r3, #5
 80152f6:	d101      	bne.n	80152fc <get_fileinfo+0xc8>
 80152f8:	23e5      	movs	r3, #229	; 0xe5
 80152fa:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	2b09      	cmp	r3, #9
 8015300:	d10f      	bne.n	8015322 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8015302:	89bb      	ldrh	r3, [r7, #12]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d105      	bne.n	8015314 <get_fileinfo+0xe0>
 8015308:	683a      	ldr	r2, [r7, #0]
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	4413      	add	r3, r2
 801530e:	3316      	adds	r3, #22
 8015310:	222e      	movs	r2, #46	; 0x2e
 8015312:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8015314:	69bb      	ldr	r3, [r7, #24]
 8015316:	1c5a      	adds	r2, r3, #1
 8015318:	61ba      	str	r2, [r7, #24]
 801531a:	683a      	ldr	r2, [r7, #0]
 801531c:	4413      	add	r3, r2
 801531e:	222e      	movs	r2, #46	; 0x2e
 8015320:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8015322:	683a      	ldr	r2, [r7, #0]
 8015324:	69bb      	ldr	r3, [r7, #24]
 8015326:	4413      	add	r3, r2
 8015328:	3309      	adds	r3, #9
 801532a:	7dfa      	ldrb	r2, [r7, #23]
 801532c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801532e:	89bb      	ldrh	r3, [r7, #12]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d11c      	bne.n	801536e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8015334:	7dfb      	ldrb	r3, [r7, #23]
 8015336:	2b40      	cmp	r3, #64	; 0x40
 8015338:	d913      	bls.n	8015362 <get_fileinfo+0x12e>
 801533a:	7dfb      	ldrb	r3, [r7, #23]
 801533c:	2b5a      	cmp	r3, #90	; 0x5a
 801533e:	d810      	bhi.n	8015362 <get_fileinfo+0x12e>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	6a1b      	ldr	r3, [r3, #32]
 8015344:	330c      	adds	r3, #12
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	461a      	mov	r2, r3
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	2b08      	cmp	r3, #8
 801534e:	d901      	bls.n	8015354 <get_fileinfo+0x120>
 8015350:	2310      	movs	r3, #16
 8015352:	e000      	b.n	8015356 <get_fileinfo+0x122>
 8015354:	2308      	movs	r3, #8
 8015356:	4013      	ands	r3, r2
 8015358:	2b00      	cmp	r3, #0
 801535a:	d002      	beq.n	8015362 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 801535c:	7dfb      	ldrb	r3, [r7, #23]
 801535e:	3320      	adds	r3, #32
 8015360:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8015362:	683a      	ldr	r2, [r7, #0]
 8015364:	69bb      	ldr	r3, [r7, #24]
 8015366:	4413      	add	r3, r2
 8015368:	3316      	adds	r3, #22
 801536a:	7dfa      	ldrb	r2, [r7, #23]
 801536c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	3301      	adds	r3, #1
 8015372:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	2b0a      	cmp	r3, #10
 8015378:	d9af      	bls.n	80152da <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801537a:	89bb      	ldrh	r3, [r7, #12]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d10d      	bne.n	801539c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8015380:	683a      	ldr	r2, [r7, #0]
 8015382:	69bb      	ldr	r3, [r7, #24]
 8015384:	4413      	add	r3, r2
 8015386:	3316      	adds	r3, #22
 8015388:	2200      	movs	r2, #0
 801538a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6a1b      	ldr	r3, [r3, #32]
 8015390:	330c      	adds	r3, #12
 8015392:	781b      	ldrb	r3, [r3, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d101      	bne.n	801539c <get_fileinfo+0x168>
 8015398:	2300      	movs	r3, #0
 801539a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801539c:	683a      	ldr	r2, [r7, #0]
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	4413      	add	r3, r2
 80153a2:	3309      	adds	r3, #9
 80153a4:	2200      	movs	r2, #0
 80153a6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6a1b      	ldr	r3, [r3, #32]
 80153ac:	7ada      	ldrb	r2, [r3, #11]
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6a1b      	ldr	r3, [r3, #32]
 80153b6:	331c      	adds	r3, #28
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7fe ff21 	bl	8014200 <ld_dword>
 80153be:	4602      	mov	r2, r0
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6a1b      	ldr	r3, [r3, #32]
 80153c8:	3316      	adds	r3, #22
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7fe ff18 	bl	8014200 <ld_dword>
 80153d0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	b29a      	uxth	r2, r3
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	80da      	strh	r2, [r3, #6]
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	0c1b      	lsrs	r3, r3, #16
 80153de:	b29a      	uxth	r2, r3
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	809a      	strh	r2, [r3, #4]
 80153e4:	e000      	b.n	80153e8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80153e6:	bf00      	nop
}
 80153e8:	3720      	adds	r7, #32
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
	...

080153f0 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80153f0:	b480      	push	{r7}
 80153f2:	b085      	sub	sp, #20
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	1c59      	adds	r1, r3, #1
 80153fe:	687a      	ldr	r2, [r7, #4]
 8015400:	6011      	str	r1, [r2, #0]
 8015402:	781b      	ldrb	r3, [r3, #0]
 8015404:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8015406:	89fb      	ldrh	r3, [r7, #14]
 8015408:	2b60      	cmp	r3, #96	; 0x60
 801540a:	d905      	bls.n	8015418 <get_achar+0x28>
 801540c:	89fb      	ldrh	r3, [r7, #14]
 801540e:	2b7a      	cmp	r3, #122	; 0x7a
 8015410:	d802      	bhi.n	8015418 <get_achar+0x28>
 8015412:	89fb      	ldrh	r3, [r7, #14]
 8015414:	3b20      	subs	r3, #32
 8015416:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8015418:	89fb      	ldrh	r3, [r7, #14]
 801541a:	2b7f      	cmp	r3, #127	; 0x7f
 801541c:	d904      	bls.n	8015428 <get_achar+0x38>
 801541e:	89fb      	ldrh	r3, [r7, #14]
 8015420:	3b80      	subs	r3, #128	; 0x80
 8015422:	4a05      	ldr	r2, [pc, #20]	; (8015438 <get_achar+0x48>)
 8015424:	5cd3      	ldrb	r3, [r2, r3]
 8015426:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8015428:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 801542a:	4618      	mov	r0, r3
 801542c:	3714      	adds	r7, #20
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr
 8015436:	bf00      	nop
 8015438:	0802770c 	.word	0x0802770c

0801543c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b08a      	sub	sp, #40	; 0x28
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]
 8015448:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801544a:	e009      	b.n	8015460 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 801544c:	f107 0308 	add.w	r3, r7, #8
 8015450:	4618      	mov	r0, r3
 8015452:	f7ff ffcd 	bl	80153f0 <get_achar>
 8015456:	4603      	mov	r3, r0
 8015458:	2b00      	cmp	r3, #0
 801545a:	d101      	bne.n	8015460 <pattern_matching+0x24>
 801545c:	2300      	movs	r3, #0
 801545e:	e064      	b.n	801552a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	1e5a      	subs	r2, r3, #1
 8015464:	607a      	str	r2, [r7, #4]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d1f0      	bne.n	801544c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	781b      	ldrb	r3, [r3, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d104      	bne.n	801547c <pattern_matching+0x40>
 8015472:	683b      	ldr	r3, [r7, #0]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d001      	beq.n	801547c <pattern_matching+0x40>
 8015478:	2301      	movs	r3, #1
 801547a:	e056      	b.n	801552a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	617b      	str	r3, [r7, #20]
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	2b3f      	cmp	r3, #63	; 0x3f
 801548a:	d003      	beq.n	8015494 <pattern_matching+0x58>
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	2b2a      	cmp	r3, #42	; 0x2a
 8015492:	d126      	bne.n	80154e2 <pattern_matching+0xa6>
				nm = nx = 0;
 8015494:	2300      	movs	r3, #0
 8015496:	61fb      	str	r3, [r7, #28]
 8015498:	69fb      	ldr	r3, [r7, #28]
 801549a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	1c5a      	adds	r2, r3, #1
 80154a0:	617a      	str	r2, [r7, #20]
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	2b3f      	cmp	r3, #63	; 0x3f
 80154a6:	d103      	bne.n	80154b0 <pattern_matching+0x74>
 80154a8:	6a3b      	ldr	r3, [r7, #32]
 80154aa:	3301      	adds	r3, #1
 80154ac:	623b      	str	r3, [r7, #32]
 80154ae:	e001      	b.n	80154b4 <pattern_matching+0x78>
 80154b0:	2301      	movs	r3, #1
 80154b2:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	2b3f      	cmp	r3, #63	; 0x3f
 80154ba:	d0ef      	beq.n	801549c <pattern_matching+0x60>
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	2b2a      	cmp	r3, #42	; 0x2a
 80154c2:	d0eb      	beq.n	801549c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80154c4:	6978      	ldr	r0, [r7, #20]
 80154c6:	6939      	ldr	r1, [r7, #16]
 80154c8:	69fb      	ldr	r3, [r7, #28]
 80154ca:	6a3a      	ldr	r2, [r7, #32]
 80154cc:	f7ff ffb6 	bl	801543c <pattern_matching>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d001      	beq.n	80154da <pattern_matching+0x9e>
 80154d6:	2301      	movs	r3, #1
 80154d8:	e027      	b.n	801552a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	781b      	ldrb	r3, [r3, #0]
 80154de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80154e0:	e017      	b.n	8015512 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80154e2:	f107 0314 	add.w	r3, r7, #20
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7ff ff82 	bl	80153f0 <get_achar>
 80154ec:	4603      	mov	r3, r0
 80154ee:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80154f0:	f107 0310 	add.w	r3, r7, #16
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7ff ff7b 	bl	80153f0 <get_achar>
 80154fa:	4603      	mov	r3, r0
 80154fc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80154fe:	8b7a      	ldrh	r2, [r7, #26]
 8015500:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015502:	429a      	cmp	r2, r3
 8015504:	d104      	bne.n	8015510 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8015506:	8b7b      	ldrh	r3, [r7, #26]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d1bb      	bne.n	8015484 <pattern_matching+0x48>
 801550c:	2301      	movs	r3, #1
 801550e:	e00c      	b.n	801552a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8015510:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8015512:	f107 0308 	add.w	r3, r7, #8
 8015516:	4618      	mov	r0, r3
 8015518:	f7ff ff6a 	bl	80153f0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 801551c:	683b      	ldr	r3, [r7, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d002      	beq.n	8015528 <pattern_matching+0xec>
 8015522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015524:	2b00      	cmp	r3, #0
 8015526:	d1a9      	bne.n	801547c <pattern_matching+0x40>

	return 0;
 8015528:	2300      	movs	r3, #0
}
 801552a:	4618      	mov	r0, r3
 801552c:	3728      	adds	r7, #40	; 0x28
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}
	...

08015534 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b08a      	sub	sp, #40	; 0x28
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	613b      	str	r3, [r7, #16]
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	68db      	ldr	r3, [r3, #12]
 801554a:	60fb      	str	r3, [r7, #12]
 801554c:	2300      	movs	r3, #0
 801554e:	617b      	str	r3, [r7, #20]
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015554:	69bb      	ldr	r3, [r7, #24]
 8015556:	1c5a      	adds	r2, r3, #1
 8015558:	61ba      	str	r2, [r7, #24]
 801555a:	693a      	ldr	r2, [r7, #16]
 801555c:	4413      	add	r3, r2
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8015562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015564:	2b1f      	cmp	r3, #31
 8015566:	d940      	bls.n	80155ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801556a:	2b2f      	cmp	r3, #47	; 0x2f
 801556c:	d006      	beq.n	801557c <create_name+0x48>
 801556e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015570:	2b5c      	cmp	r3, #92	; 0x5c
 8015572:	d110      	bne.n	8015596 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015574:	e002      	b.n	801557c <create_name+0x48>
 8015576:	69bb      	ldr	r3, [r7, #24]
 8015578:	3301      	adds	r3, #1
 801557a:	61bb      	str	r3, [r7, #24]
 801557c:	693a      	ldr	r2, [r7, #16]
 801557e:	69bb      	ldr	r3, [r7, #24]
 8015580:	4413      	add	r3, r2
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	2b2f      	cmp	r3, #47	; 0x2f
 8015586:	d0f6      	beq.n	8015576 <create_name+0x42>
 8015588:	693a      	ldr	r2, [r7, #16]
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	4413      	add	r3, r2
 801558e:	781b      	ldrb	r3, [r3, #0]
 8015590:	2b5c      	cmp	r3, #92	; 0x5c
 8015592:	d0f0      	beq.n	8015576 <create_name+0x42>
			break;
 8015594:	e02a      	b.n	80155ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	2bfe      	cmp	r3, #254	; 0xfe
 801559a:	d901      	bls.n	80155a0 <create_name+0x6c>
 801559c:	2306      	movs	r3, #6
 801559e:	e177      	b.n	8015890 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80155a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80155a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155a8:	2101      	movs	r1, #1
 80155aa:	4618      	mov	r0, r3
 80155ac:	f005 fbd4 	bl	801ad58 <ff_convert>
 80155b0:	4603      	mov	r3, r0
 80155b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80155b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d101      	bne.n	80155be <create_name+0x8a>
 80155ba:	2306      	movs	r3, #6
 80155bc:	e168      	b.n	8015890 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80155be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155c0:	2b7f      	cmp	r3, #127	; 0x7f
 80155c2:	d809      	bhi.n	80155d8 <create_name+0xa4>
 80155c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155c6:	4619      	mov	r1, r3
 80155c8:	48b3      	ldr	r0, [pc, #716]	; (8015898 <create_name+0x364>)
 80155ca:	f7fe fec4 	bl	8014356 <chk_chr>
 80155ce:	4603      	mov	r3, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d001      	beq.n	80155d8 <create_name+0xa4>
 80155d4:	2306      	movs	r3, #6
 80155d6:	e15b      	b.n	8015890 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	1c5a      	adds	r2, r3, #1
 80155dc:	617a      	str	r2, [r7, #20]
 80155de:	005b      	lsls	r3, r3, #1
 80155e0:	68fa      	ldr	r2, [r7, #12]
 80155e2:	4413      	add	r3, r2
 80155e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80155e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80155e8:	e7b4      	b.n	8015554 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80155ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80155ec:	693a      	ldr	r2, [r7, #16]
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	441a      	add	r2, r3
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80155f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155f8:	2b1f      	cmp	r3, #31
 80155fa:	d801      	bhi.n	8015600 <create_name+0xcc>
 80155fc:	2304      	movs	r3, #4
 80155fe:	e000      	b.n	8015602 <create_name+0xce>
 8015600:	2300      	movs	r3, #0
 8015602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015606:	e011      	b.n	801562c <create_name+0xf8>
		w = lfn[di - 1];
 8015608:	697a      	ldr	r2, [r7, #20]
 801560a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801560e:	4413      	add	r3, r2
 8015610:	005b      	lsls	r3, r3, #1
 8015612:	68fa      	ldr	r2, [r7, #12]
 8015614:	4413      	add	r3, r2
 8015616:	881b      	ldrh	r3, [r3, #0]
 8015618:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801561a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801561c:	2b20      	cmp	r3, #32
 801561e:	d002      	beq.n	8015626 <create_name+0xf2>
 8015620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015622:	2b2e      	cmp	r3, #46	; 0x2e
 8015624:	d106      	bne.n	8015634 <create_name+0x100>
		di--;
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	3b01      	subs	r3, #1
 801562a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d1ea      	bne.n	8015608 <create_name+0xd4>
 8015632:	e000      	b.n	8015636 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8015634:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	005b      	lsls	r3, r3, #1
 801563a:	68fa      	ldr	r2, [r7, #12]
 801563c:	4413      	add	r3, r2
 801563e:	2200      	movs	r2, #0
 8015640:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d101      	bne.n	801564c <create_name+0x118>
 8015648:	2306      	movs	r3, #6
 801564a:	e121      	b.n	8015890 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	3324      	adds	r3, #36	; 0x24
 8015650:	220b      	movs	r2, #11
 8015652:	2120      	movs	r1, #32
 8015654:	4618      	mov	r0, r3
 8015656:	f7fe fe3d 	bl	80142d4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801565a:	2300      	movs	r3, #0
 801565c:	61bb      	str	r3, [r7, #24]
 801565e:	e002      	b.n	8015666 <create_name+0x132>
 8015660:	69bb      	ldr	r3, [r7, #24]
 8015662:	3301      	adds	r3, #1
 8015664:	61bb      	str	r3, [r7, #24]
 8015666:	69bb      	ldr	r3, [r7, #24]
 8015668:	005b      	lsls	r3, r3, #1
 801566a:	68fa      	ldr	r2, [r7, #12]
 801566c:	4413      	add	r3, r2
 801566e:	881b      	ldrh	r3, [r3, #0]
 8015670:	2b20      	cmp	r3, #32
 8015672:	d0f5      	beq.n	8015660 <create_name+0x12c>
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	005b      	lsls	r3, r3, #1
 8015678:	68fa      	ldr	r2, [r7, #12]
 801567a:	4413      	add	r3, r2
 801567c:	881b      	ldrh	r3, [r3, #0]
 801567e:	2b2e      	cmp	r3, #46	; 0x2e
 8015680:	d0ee      	beq.n	8015660 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015682:	69bb      	ldr	r3, [r7, #24]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d009      	beq.n	801569c <create_name+0x168>
 8015688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801568c:	f043 0303 	orr.w	r3, r3, #3
 8015690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015694:	e002      	b.n	801569c <create_name+0x168>
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	3b01      	subs	r3, #1
 801569a:	617b      	str	r3, [r7, #20]
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d009      	beq.n	80156b6 <create_name+0x182>
 80156a2:	697a      	ldr	r2, [r7, #20]
 80156a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80156a8:	4413      	add	r3, r2
 80156aa:	005b      	lsls	r3, r3, #1
 80156ac:	68fa      	ldr	r2, [r7, #12]
 80156ae:	4413      	add	r3, r2
 80156b0:	881b      	ldrh	r3, [r3, #0]
 80156b2:	2b2e      	cmp	r3, #46	; 0x2e
 80156b4:	d1ef      	bne.n	8015696 <create_name+0x162>

	i = b = 0; ni = 8;
 80156b6:	2300      	movs	r3, #0
 80156b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156bc:	2300      	movs	r3, #0
 80156be:	623b      	str	r3, [r7, #32]
 80156c0:	2308      	movs	r3, #8
 80156c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80156c4:	69bb      	ldr	r3, [r7, #24]
 80156c6:	1c5a      	adds	r2, r3, #1
 80156c8:	61ba      	str	r2, [r7, #24]
 80156ca:	005b      	lsls	r3, r3, #1
 80156cc:	68fa      	ldr	r2, [r7, #12]
 80156ce:	4413      	add	r3, r2
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80156d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	f000 8090 	beq.w	80157fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80156dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156de:	2b20      	cmp	r3, #32
 80156e0:	d006      	beq.n	80156f0 <create_name+0x1bc>
 80156e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156e4:	2b2e      	cmp	r3, #46	; 0x2e
 80156e6:	d10a      	bne.n	80156fe <create_name+0x1ca>
 80156e8:	69ba      	ldr	r2, [r7, #24]
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d006      	beq.n	80156fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80156f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156f4:	f043 0303 	orr.w	r3, r3, #3
 80156f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156fc:	e07d      	b.n	80157fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80156fe:	6a3a      	ldr	r2, [r7, #32]
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	429a      	cmp	r2, r3
 8015704:	d203      	bcs.n	801570e <create_name+0x1da>
 8015706:	69ba      	ldr	r2, [r7, #24]
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	429a      	cmp	r2, r3
 801570c:	d123      	bne.n	8015756 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	2b0b      	cmp	r3, #11
 8015712:	d106      	bne.n	8015722 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8015714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015718:	f043 0303 	orr.w	r3, r3, #3
 801571c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015720:	e06f      	b.n	8015802 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015722:	69ba      	ldr	r2, [r7, #24]
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	429a      	cmp	r2, r3
 8015728:	d005      	beq.n	8015736 <create_name+0x202>
 801572a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801572e:	f043 0303 	orr.w	r3, r3, #3
 8015732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8015736:	69ba      	ldr	r2, [r7, #24]
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	429a      	cmp	r2, r3
 801573c:	d860      	bhi.n	8015800 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	61bb      	str	r3, [r7, #24]
 8015742:	2308      	movs	r3, #8
 8015744:	623b      	str	r3, [r7, #32]
 8015746:	230b      	movs	r3, #11
 8015748:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801574a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015754:	e051      	b.n	80157fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8015756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015758:	2b7f      	cmp	r3, #127	; 0x7f
 801575a:	d914      	bls.n	8015786 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801575c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801575e:	2100      	movs	r1, #0
 8015760:	4618      	mov	r0, r3
 8015762:	f005 faf9 	bl	801ad58 <ff_convert>
 8015766:	4603      	mov	r3, r0
 8015768:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801576a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801576c:	2b00      	cmp	r3, #0
 801576e:	d004      	beq.n	801577a <create_name+0x246>
 8015770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015772:	3b80      	subs	r3, #128	; 0x80
 8015774:	4a49      	ldr	r2, [pc, #292]	; (801589c <create_name+0x368>)
 8015776:	5cd3      	ldrb	r3, [r2, r3]
 8015778:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801577a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801577e:	f043 0302 	orr.w	r3, r3, #2
 8015782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015788:	2b00      	cmp	r3, #0
 801578a:	d007      	beq.n	801579c <create_name+0x268>
 801578c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801578e:	4619      	mov	r1, r3
 8015790:	4843      	ldr	r0, [pc, #268]	; (80158a0 <create_name+0x36c>)
 8015792:	f7fe fde0 	bl	8014356 <chk_chr>
 8015796:	4603      	mov	r3, r0
 8015798:	2b00      	cmp	r3, #0
 801579a:	d008      	beq.n	80157ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801579c:	235f      	movs	r3, #95	; 0x5f
 801579e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80157a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157a4:	f043 0303 	orr.w	r3, r3, #3
 80157a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157ac:	e01b      	b.n	80157e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80157ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157b0:	2b40      	cmp	r3, #64	; 0x40
 80157b2:	d909      	bls.n	80157c8 <create_name+0x294>
 80157b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157b6:	2b5a      	cmp	r3, #90	; 0x5a
 80157b8:	d806      	bhi.n	80157c8 <create_name+0x294>
					b |= 2;
 80157ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80157be:	f043 0302 	orr.w	r3, r3, #2
 80157c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80157c6:	e00e      	b.n	80157e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80157c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157ca:	2b60      	cmp	r3, #96	; 0x60
 80157cc:	d90b      	bls.n	80157e6 <create_name+0x2b2>
 80157ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157d0:	2b7a      	cmp	r3, #122	; 0x7a
 80157d2:	d808      	bhi.n	80157e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80157d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80157d8:	f043 0301 	orr.w	r3, r3, #1
 80157dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80157e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157e2:	3b20      	subs	r3, #32
 80157e4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80157e6:	6a3b      	ldr	r3, [r7, #32]
 80157e8:	1c5a      	adds	r2, r3, #1
 80157ea:	623a      	str	r2, [r7, #32]
 80157ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80157ee:	b2d1      	uxtb	r1, r2
 80157f0:	687a      	ldr	r2, [r7, #4]
 80157f2:	4413      	add	r3, r2
 80157f4:	460a      	mov	r2, r1
 80157f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80157fa:	e763      	b.n	80156c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80157fc:	bf00      	nop
 80157fe:	e000      	b.n	8015802 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8015800:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015808:	2be5      	cmp	r3, #229	; 0xe5
 801580a:	d103      	bne.n	8015814 <create_name+0x2e0>
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2205      	movs	r2, #5
 8015810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	2b08      	cmp	r3, #8
 8015818:	d104      	bne.n	8015824 <create_name+0x2f0>
 801581a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801581e:	009b      	lsls	r3, r3, #2
 8015820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015824:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015828:	f003 030c 	and.w	r3, r3, #12
 801582c:	2b0c      	cmp	r3, #12
 801582e:	d005      	beq.n	801583c <create_name+0x308>
 8015830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015834:	f003 0303 	and.w	r3, r3, #3
 8015838:	2b03      	cmp	r3, #3
 801583a:	d105      	bne.n	8015848 <create_name+0x314>
 801583c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015840:	f043 0302 	orr.w	r3, r3, #2
 8015844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801584c:	f003 0302 	and.w	r3, r3, #2
 8015850:	2b00      	cmp	r3, #0
 8015852:	d117      	bne.n	8015884 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015858:	f003 0303 	and.w	r3, r3, #3
 801585c:	2b01      	cmp	r3, #1
 801585e:	d105      	bne.n	801586c <create_name+0x338>
 8015860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015864:	f043 0310 	orr.w	r3, r3, #16
 8015868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801586c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015870:	f003 030c 	and.w	r3, r3, #12
 8015874:	2b04      	cmp	r3, #4
 8015876:	d105      	bne.n	8015884 <create_name+0x350>
 8015878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801587c:	f043 0308 	orr.w	r3, r3, #8
 8015880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801588a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801588e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8015890:	4618      	mov	r0, r3
 8015892:	3728      	adds	r7, #40	; 0x28
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}
 8015898:	08026250 	.word	0x08026250
 801589c:	0802770c 	.word	0x0802770c
 80158a0:	0802625c 	.word	0x0802625c

080158a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b086      	sub	sp, #24
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80158b8:	e002      	b.n	80158c0 <follow_path+0x1c>
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	3301      	adds	r3, #1
 80158be:	603b      	str	r3, [r7, #0]
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	2b2f      	cmp	r3, #47	; 0x2f
 80158c6:	d0f8      	beq.n	80158ba <follow_path+0x16>
 80158c8:	683b      	ldr	r3, [r7, #0]
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	2b5c      	cmp	r3, #92	; 0x5c
 80158ce:	d0f4      	beq.n	80158ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	2200      	movs	r2, #0
 80158d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	2b1f      	cmp	r3, #31
 80158dc:	d80a      	bhi.n	80158f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2280      	movs	r2, #128	; 0x80
 80158e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80158e6:	2100      	movs	r1, #0
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7ff f8e7 	bl	8014abc <dir_sdi>
 80158ee:	4603      	mov	r3, r0
 80158f0:	75fb      	strb	r3, [r7, #23]
 80158f2:	e043      	b.n	801597c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80158f4:	463b      	mov	r3, r7
 80158f6:	4619      	mov	r1, r3
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f7ff fe1b 	bl	8015534 <create_name>
 80158fe:	4603      	mov	r3, r0
 8015900:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015902:	7dfb      	ldrb	r3, [r7, #23]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d134      	bne.n	8015972 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f7ff fbd3 	bl	80150b4 <dir_find>
 801590e:	4603      	mov	r3, r0
 8015910:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015918:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801591a:	7dfb      	ldrb	r3, [r7, #23]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d00a      	beq.n	8015936 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015920:	7dfb      	ldrb	r3, [r7, #23]
 8015922:	2b04      	cmp	r3, #4
 8015924:	d127      	bne.n	8015976 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015926:	7afb      	ldrb	r3, [r7, #11]
 8015928:	f003 0304 	and.w	r3, r3, #4
 801592c:	2b00      	cmp	r3, #0
 801592e:	d122      	bne.n	8015976 <follow_path+0xd2>
 8015930:	2305      	movs	r3, #5
 8015932:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015934:	e01f      	b.n	8015976 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015936:	7afb      	ldrb	r3, [r7, #11]
 8015938:	f003 0304 	and.w	r3, r3, #4
 801593c:	2b00      	cmp	r3, #0
 801593e:	d11c      	bne.n	801597a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	799b      	ldrb	r3, [r3, #6]
 8015944:	f003 0310 	and.w	r3, r3, #16
 8015948:	2b00      	cmp	r3, #0
 801594a:	d102      	bne.n	8015952 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801594c:	2305      	movs	r3, #5
 801594e:	75fb      	strb	r3, [r7, #23]
 8015950:	e014      	b.n	801597c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	695b      	ldr	r3, [r3, #20]
 801595c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015960:	4413      	add	r3, r2
 8015962:	4619      	mov	r1, r3
 8015964:	68f8      	ldr	r0, [r7, #12]
 8015966:	f7ff f9e9 	bl	8014d3c <ld_clust>
 801596a:	4602      	mov	r2, r0
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015970:	e7c0      	b.n	80158f4 <follow_path+0x50>
			if (res != FR_OK) break;
 8015972:	bf00      	nop
 8015974:	e002      	b.n	801597c <follow_path+0xd8>
				break;
 8015976:	bf00      	nop
 8015978:	e000      	b.n	801597c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801597a:	bf00      	nop
			}
		}
	}

	return res;
 801597c:	7dfb      	ldrb	r3, [r7, #23]
}
 801597e:	4618      	mov	r0, r3
 8015980:	3718      	adds	r7, #24
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015986:	b480      	push	{r7}
 8015988:	b087      	sub	sp, #28
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801598e:	f04f 33ff 	mov.w	r3, #4294967295
 8015992:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d031      	beq.n	8015a00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	617b      	str	r3, [r7, #20]
 80159a2:	e002      	b.n	80159aa <get_ldnumber+0x24>
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	3301      	adds	r3, #1
 80159a8:	617b      	str	r3, [r7, #20]
 80159aa:	697b      	ldr	r3, [r7, #20]
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	2b1f      	cmp	r3, #31
 80159b0:	d903      	bls.n	80159ba <get_ldnumber+0x34>
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	781b      	ldrb	r3, [r3, #0]
 80159b6:	2b3a      	cmp	r3, #58	; 0x3a
 80159b8:	d1f4      	bne.n	80159a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80159ba:	697b      	ldr	r3, [r7, #20]
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	2b3a      	cmp	r3, #58	; 0x3a
 80159c0:	d11c      	bne.n	80159fc <get_ldnumber+0x76>
			tp = *path;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	1c5a      	adds	r2, r3, #1
 80159cc:	60fa      	str	r2, [r7, #12]
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	3b30      	subs	r3, #48	; 0x30
 80159d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	2b09      	cmp	r3, #9
 80159d8:	d80e      	bhi.n	80159f8 <get_ldnumber+0x72>
 80159da:	68fa      	ldr	r2, [r7, #12]
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	429a      	cmp	r2, r3
 80159e0:	d10a      	bne.n	80159f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d107      	bne.n	80159f8 <get_ldnumber+0x72>
					vol = (int)i;
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	3301      	adds	r3, #1
 80159f0:	617b      	str	r3, [r7, #20]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	697a      	ldr	r2, [r7, #20]
 80159f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	e002      	b.n	8015a02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80159fc:	2300      	movs	r3, #0
 80159fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015a00:	693b      	ldr	r3, [r7, #16]
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	371c      	adds	r7, #28
 8015a06:	46bd      	mov	sp, r7
 8015a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0c:	4770      	bx	lr
	...

08015a10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	70da      	strb	r2, [r3, #3]
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f04f 32ff 	mov.w	r2, #4294967295
 8015a26:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015a28:	6839      	ldr	r1, [r7, #0]
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f7fe fdd6 	bl	80145dc <move_window>
 8015a30:	4603      	mov	r3, r0
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d001      	beq.n	8015a3a <check_fs+0x2a>
 8015a36:	2304      	movs	r3, #4
 8015a38:	e038      	b.n	8015aac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	3338      	adds	r3, #56	; 0x38
 8015a3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7fe fbc4 	bl	80141d0 <ld_word>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015a50:	429a      	cmp	r2, r3
 8015a52:	d001      	beq.n	8015a58 <check_fs+0x48>
 8015a54:	2303      	movs	r3, #3
 8015a56:	e029      	b.n	8015aac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015a5e:	2be9      	cmp	r3, #233	; 0xe9
 8015a60:	d009      	beq.n	8015a76 <check_fs+0x66>
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015a68:	2beb      	cmp	r3, #235	; 0xeb
 8015a6a:	d11e      	bne.n	8015aaa <check_fs+0x9a>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8015a72:	2b90      	cmp	r3, #144	; 0x90
 8015a74:	d119      	bne.n	8015aaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	3338      	adds	r3, #56	; 0x38
 8015a7a:	3336      	adds	r3, #54	; 0x36
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7fe fbbf 	bl	8014200 <ld_dword>
 8015a82:	4603      	mov	r3, r0
 8015a84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015a88:	4a0a      	ldr	r2, [pc, #40]	; (8015ab4 <check_fs+0xa4>)
 8015a8a:	4293      	cmp	r3, r2
 8015a8c:	d101      	bne.n	8015a92 <check_fs+0x82>
 8015a8e:	2300      	movs	r3, #0
 8015a90:	e00c      	b.n	8015aac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	3338      	adds	r3, #56	; 0x38
 8015a96:	3352      	adds	r3, #82	; 0x52
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7fe fbb1 	bl	8014200 <ld_dword>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	4b05      	ldr	r3, [pc, #20]	; (8015ab8 <check_fs+0xa8>)
 8015aa2:	429a      	cmp	r2, r3
 8015aa4:	d101      	bne.n	8015aaa <check_fs+0x9a>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	e000      	b.n	8015aac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8015aaa:	2302      	movs	r3, #2
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	00544146 	.word	0x00544146
 8015ab8:	33544146 	.word	0x33544146

08015abc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b096      	sub	sp, #88	; 0x58
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	60b9      	str	r1, [r7, #8]
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	2200      	movs	r2, #0
 8015ace:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8015ad0:	68f8      	ldr	r0, [r7, #12]
 8015ad2:	f7ff ff58 	bl	8015986 <get_ldnumber>
 8015ad6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	da01      	bge.n	8015ae2 <find_volume+0x26>
 8015ade:	230b      	movs	r3, #11
 8015ae0:	e236      	b.n	8015f50 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015ae2:	4aac      	ldr	r2, [pc, #688]	; (8015d94 <find_volume+0x2d8>)
 8015ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015aea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d101      	bne.n	8015af6 <find_volume+0x3a>
 8015af2:	230c      	movs	r3, #12
 8015af4:	e22c      	b.n	8015f50 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8015af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015af8:	f7fe fc48 	bl	801438c <lock_fs>
 8015afc:	4603      	mov	r3, r0
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d101      	bne.n	8015b06 <find_volume+0x4a>
 8015b02:	230f      	movs	r3, #15
 8015b04:	e224      	b.n	8015f50 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015b0c:	79fb      	ldrb	r3, [r7, #7]
 8015b0e:	f023 0301 	bic.w	r3, r3, #1
 8015b12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d01a      	beq.n	8015b52 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8015b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b1e:	785b      	ldrb	r3, [r3, #1]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7fe fad5 	bl	80140d0 <disk_status>
 8015b26:	4603      	mov	r3, r0
 8015b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b30:	f003 0301 	and.w	r3, r3, #1
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d10c      	bne.n	8015b52 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015b38:	79fb      	ldrb	r3, [r7, #7]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d007      	beq.n	8015b4e <find_volume+0x92>
 8015b3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b42:	f003 0304 	and.w	r3, r3, #4
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d001      	beq.n	8015b4e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8015b4a:	230a      	movs	r3, #10
 8015b4c:	e200      	b.n	8015f50 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8015b4e:	2300      	movs	r3, #0
 8015b50:	e1fe      	b.n	8015f50 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b54:	2200      	movs	r2, #0
 8015b56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b62:	785b      	ldrb	r3, [r3, #1]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fe facd 	bl	8014104 <disk_initialize>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015b70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b74:	f003 0301 	and.w	r3, r3, #1
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d001      	beq.n	8015b80 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015b7c:	2303      	movs	r3, #3
 8015b7e:	e1e7      	b.n	8015f50 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015b80:	79fb      	ldrb	r3, [r7, #7]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d007      	beq.n	8015b96 <find_volume+0xda>
 8015b86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b8a:	f003 0304 	and.w	r3, r3, #4
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d001      	beq.n	8015b96 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8015b92:	230a      	movs	r3, #10
 8015b94:	e1dc      	b.n	8015f50 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015b96:	2300      	movs	r3, #0
 8015b98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015b9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015b9e:	f7ff ff37 	bl	8015a10 <check_fs>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8015ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015bac:	2b02      	cmp	r3, #2
 8015bae:	d14b      	bne.n	8015c48 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8015bb4:	e01f      	b.n	8015bf6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8015bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bb8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bbe:	011b      	lsls	r3, r3, #4
 8015bc0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015bc4:	4413      	add	r3, r2
 8015bc6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bca:	3304      	adds	r3, #4
 8015bcc:	781b      	ldrb	r3, [r3, #0]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d006      	beq.n	8015be0 <find_volume+0x124>
 8015bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd4:	3308      	adds	r3, #8
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7fe fb12 	bl	8014200 <ld_dword>
 8015bdc:	4602      	mov	r2, r0
 8015bde:	e000      	b.n	8015be2 <find_volume+0x126>
 8015be0:	2200      	movs	r2, #0
 8015be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015be4:	009b      	lsls	r3, r3, #2
 8015be6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8015bea:	440b      	add	r3, r1
 8015bec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8015bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bf8:	2b03      	cmp	r3, #3
 8015bfa:	d9dc      	bls.n	8015bb6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d002      	beq.n	8015c0c <find_volume+0x150>
 8015c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c08:	3b01      	subs	r3, #1
 8015c0a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c0e:	009b      	lsls	r3, r3, #2
 8015c10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015c14:	4413      	add	r3, r2
 8015c16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015c1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d005      	beq.n	8015c2e <find_volume+0x172>
 8015c22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015c24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015c26:	f7ff fef3 	bl	8015a10 <check_fs>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	e000      	b.n	8015c30 <find_volume+0x174>
 8015c2e:	2303      	movs	r3, #3
 8015c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c38:	2b01      	cmp	r3, #1
 8015c3a:	d905      	bls.n	8015c48 <find_volume+0x18c>
 8015c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c3e:	3301      	adds	r3, #1
 8015c40:	643b      	str	r3, [r7, #64]	; 0x40
 8015c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c44:	2b03      	cmp	r3, #3
 8015c46:	d9e1      	bls.n	8015c0c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c4c:	2b04      	cmp	r3, #4
 8015c4e:	d101      	bne.n	8015c54 <find_volume+0x198>
 8015c50:	2301      	movs	r3, #1
 8015c52:	e17d      	b.n	8015f50 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c58:	2b01      	cmp	r3, #1
 8015c5a:	d901      	bls.n	8015c60 <find_volume+0x1a4>
 8015c5c:	230d      	movs	r3, #13
 8015c5e:	e177      	b.n	8015f50 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c62:	3338      	adds	r3, #56	; 0x38
 8015c64:	330b      	adds	r3, #11
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7fe fab2 	bl	80141d0 <ld_word>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c72:	d001      	beq.n	8015c78 <find_volume+0x1bc>
 8015c74:	230d      	movs	r3, #13
 8015c76:	e16b      	b.n	8015f50 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c7a:	3338      	adds	r3, #56	; 0x38
 8015c7c:	3316      	adds	r3, #22
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7fe faa6 	bl	80141d0 <ld_word>
 8015c84:	4603      	mov	r3, r0
 8015c86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d106      	bne.n	8015c9c <find_volume+0x1e0>
 8015c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c90:	3338      	adds	r3, #56	; 0x38
 8015c92:	3324      	adds	r3, #36	; 0x24
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fe fab3 	bl	8014200 <ld_dword>
 8015c9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8015c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015ca0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8015ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015caa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cae:	789b      	ldrb	r3, [r3, #2]
 8015cb0:	2b01      	cmp	r3, #1
 8015cb2:	d005      	beq.n	8015cc0 <find_volume+0x204>
 8015cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cb6:	789b      	ldrb	r3, [r3, #2]
 8015cb8:	2b02      	cmp	r3, #2
 8015cba:	d001      	beq.n	8015cc0 <find_volume+0x204>
 8015cbc:	230d      	movs	r3, #13
 8015cbe:	e147      	b.n	8015f50 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cc2:	789b      	ldrb	r3, [r3, #2]
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cc8:	fb02 f303 	mul.w	r3, r2, r3
 8015ccc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015cd4:	b29a      	uxth	r2, r3
 8015cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cdc:	895b      	ldrh	r3, [r3, #10]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d008      	beq.n	8015cf4 <find_volume+0x238>
 8015ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ce4:	895b      	ldrh	r3, [r3, #10]
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cea:	895b      	ldrh	r3, [r3, #10]
 8015cec:	3b01      	subs	r3, #1
 8015cee:	4013      	ands	r3, r2
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d001      	beq.n	8015cf8 <find_volume+0x23c>
 8015cf4:	230d      	movs	r3, #13
 8015cf6:	e12b      	b.n	8015f50 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cfa:	3338      	adds	r3, #56	; 0x38
 8015cfc:	3311      	adds	r3, #17
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f7fe fa66 	bl	80141d0 <ld_word>
 8015d04:	4603      	mov	r3, r0
 8015d06:	461a      	mov	r2, r3
 8015d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d0e:	891b      	ldrh	r3, [r3, #8]
 8015d10:	f003 030f 	and.w	r3, r3, #15
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d001      	beq.n	8015d1e <find_volume+0x262>
 8015d1a:	230d      	movs	r3, #13
 8015d1c:	e118      	b.n	8015f50 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d20:	3338      	adds	r3, #56	; 0x38
 8015d22:	3313      	adds	r3, #19
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7fe fa53 	bl	80141d0 <ld_word>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d106      	bne.n	8015d42 <find_volume+0x286>
 8015d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d36:	3338      	adds	r3, #56	; 0x38
 8015d38:	3320      	adds	r3, #32
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f7fe fa60 	bl	8014200 <ld_dword>
 8015d40:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d44:	3338      	adds	r3, #56	; 0x38
 8015d46:	330e      	adds	r3, #14
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f7fe fa41 	bl	80141d0 <ld_word>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015d52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d101      	bne.n	8015d5c <find_volume+0x2a0>
 8015d58:	230d      	movs	r3, #13
 8015d5a:	e0f9      	b.n	8015f50 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015d5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d60:	4413      	add	r3, r2
 8015d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d64:	8912      	ldrh	r2, [r2, #8]
 8015d66:	0912      	lsrs	r2, r2, #4
 8015d68:	b292      	uxth	r2, r2
 8015d6a:	4413      	add	r3, r2
 8015d6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d201      	bcs.n	8015d7a <find_volume+0x2be>
 8015d76:	230d      	movs	r3, #13
 8015d78:	e0ea      	b.n	8015f50 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7e:	1ad3      	subs	r3, r2, r3
 8015d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d82:	8952      	ldrh	r2, [r2, #10]
 8015d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d88:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d103      	bne.n	8015d98 <find_volume+0x2dc>
 8015d90:	230d      	movs	r3, #13
 8015d92:	e0dd      	b.n	8015f50 <find_volume+0x494>
 8015d94:	20000110 	.word	0x20000110
		fmt = FS_FAT32;
 8015d98:	2303      	movs	r3, #3
 8015d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015da4:	4293      	cmp	r3, r2
 8015da6:	d802      	bhi.n	8015dae <find_volume+0x2f2>
 8015da8:	2302      	movs	r3, #2
 8015daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015db4:	4293      	cmp	r3, r2
 8015db6:	d802      	bhi.n	8015dbe <find_volume+0x302>
 8015db8:	2301      	movs	r3, #1
 8015dba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc0:	1c9a      	adds	r2, r3, #2
 8015dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dc4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8015dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015dca:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015dcc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dd0:	441a      	add	r2, r3
 8015dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dd4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8015dd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dda:	441a      	add	r2, r3
 8015ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dde:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8015de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015de4:	2b03      	cmp	r3, #3
 8015de6:	d11e      	bne.n	8015e26 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dea:	3338      	adds	r3, #56	; 0x38
 8015dec:	332a      	adds	r3, #42	; 0x2a
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7fe f9ee 	bl	80141d0 <ld_word>
 8015df4:	4603      	mov	r3, r0
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d001      	beq.n	8015dfe <find_volume+0x342>
 8015dfa:	230d      	movs	r3, #13
 8015dfc:	e0a8      	b.n	8015f50 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e00:	891b      	ldrh	r3, [r3, #8]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d001      	beq.n	8015e0a <find_volume+0x34e>
 8015e06:	230d      	movs	r3, #13
 8015e08:	e0a2      	b.n	8015f50 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e0c:	3338      	adds	r3, #56	; 0x38
 8015e0e:	332c      	adds	r3, #44	; 0x2c
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7fe f9f5 	bl	8014200 <ld_dword>
 8015e16:	4602      	mov	r2, r0
 8015e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e1a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e1e:	69db      	ldr	r3, [r3, #28]
 8015e20:	009b      	lsls	r3, r3, #2
 8015e22:	647b      	str	r3, [r7, #68]	; 0x44
 8015e24:	e01f      	b.n	8015e66 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e28:	891b      	ldrh	r3, [r3, #8]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d101      	bne.n	8015e32 <find_volume+0x376>
 8015e2e:	230d      	movs	r3, #13
 8015e30:	e08e      	b.n	8015f50 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e38:	441a      	add	r2, r3
 8015e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e3c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e42:	2b02      	cmp	r3, #2
 8015e44:	d103      	bne.n	8015e4e <find_volume+0x392>
 8015e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e48:	69db      	ldr	r3, [r3, #28]
 8015e4a:	005b      	lsls	r3, r3, #1
 8015e4c:	e00a      	b.n	8015e64 <find_volume+0x3a8>
 8015e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e50:	69da      	ldr	r2, [r3, #28]
 8015e52:	4613      	mov	r3, r2
 8015e54:	005b      	lsls	r3, r3, #1
 8015e56:	4413      	add	r3, r2
 8015e58:	085a      	lsrs	r2, r3, #1
 8015e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e5c:	69db      	ldr	r3, [r3, #28]
 8015e5e:	f003 0301 	and.w	r3, r3, #1
 8015e62:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015e64:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e68:	6a1a      	ldr	r2, [r3, #32]
 8015e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8015e70:	0a5b      	lsrs	r3, r3, #9
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d201      	bcs.n	8015e7a <find_volume+0x3be>
 8015e76:	230d      	movs	r3, #13
 8015e78:	e06a      	b.n	8015f50 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8015e80:	619a      	str	r2, [r3, #24]
 8015e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e84:	699a      	ldr	r2, [r3, #24]
 8015e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e88:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8015e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e8c:	2280      	movs	r2, #128	; 0x80
 8015e8e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e94:	2b03      	cmp	r3, #3
 8015e96:	d149      	bne.n	8015f2c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e9a:	3338      	adds	r3, #56	; 0x38
 8015e9c:	3330      	adds	r3, #48	; 0x30
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f7fe f996 	bl	80141d0 <ld_word>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	2b01      	cmp	r3, #1
 8015ea8:	d140      	bne.n	8015f2c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015eac:	3301      	adds	r3, #1
 8015eae:	4619      	mov	r1, r3
 8015eb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015eb2:	f7fe fb93 	bl	80145dc <move_window>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d137      	bne.n	8015f2c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8015ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ec4:	3338      	adds	r3, #56	; 0x38
 8015ec6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7fe f980 	bl	80141d0 <ld_word>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	461a      	mov	r2, r3
 8015ed4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d127      	bne.n	8015f2c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ede:	3338      	adds	r3, #56	; 0x38
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7fe f98d 	bl	8014200 <ld_dword>
 8015ee6:	4602      	mov	r2, r0
 8015ee8:	4b1b      	ldr	r3, [pc, #108]	; (8015f58 <find_volume+0x49c>)
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d11e      	bne.n	8015f2c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ef0:	3338      	adds	r3, #56	; 0x38
 8015ef2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7fe f982 	bl	8014200 <ld_dword>
 8015efc:	4602      	mov	r2, r0
 8015efe:	4b17      	ldr	r3, [pc, #92]	; (8015f5c <find_volume+0x4a0>)
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d113      	bne.n	8015f2c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f06:	3338      	adds	r3, #56	; 0x38
 8015f08:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7fe f977 	bl	8014200 <ld_dword>
 8015f12:	4602      	mov	r2, r0
 8015f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f16:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f1a:	3338      	adds	r3, #56	; 0x38
 8015f1c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7fe f96d 	bl	8014200 <ld_dword>
 8015f26:	4602      	mov	r2, r0
 8015f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f2a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f2e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8015f32:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015f34:	4b0a      	ldr	r3, [pc, #40]	; (8015f60 <find_volume+0x4a4>)
 8015f36:	881b      	ldrh	r3, [r3, #0]
 8015f38:	3301      	adds	r3, #1
 8015f3a:	b29a      	uxth	r2, r3
 8015f3c:	4b08      	ldr	r3, [pc, #32]	; (8015f60 <find_volume+0x4a4>)
 8015f3e:	801a      	strh	r2, [r3, #0]
 8015f40:	4b07      	ldr	r3, [pc, #28]	; (8015f60 <find_volume+0x4a4>)
 8015f42:	881a      	ldrh	r2, [r3, #0]
 8015f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f46:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8015f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f4a:	f7fe fadf 	bl	801450c <clear_lock>
#endif
	return FR_OK;
 8015f4e:	2300      	movs	r3, #0
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3758      	adds	r7, #88	; 0x58
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}
 8015f58:	41615252 	.word	0x41615252
 8015f5c:	61417272 	.word	0x61417272
 8015f60:	20000114 	.word	0x20000114

08015f64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015f6e:	2309      	movs	r3, #9
 8015f70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d02e      	beq.n	8015fd6 <validate+0x72>
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d02a      	beq.n	8015fd6 <validate+0x72>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	781b      	ldrb	r3, [r3, #0]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d025      	beq.n	8015fd6 <validate+0x72>
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	889a      	ldrh	r2, [r3, #4]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	88db      	ldrh	r3, [r3, #6]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	d11e      	bne.n	8015fd6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7fe f9f5 	bl	801438c <lock_fs>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d014      	beq.n	8015fd2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	785b      	ldrb	r3, [r3, #1]
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f7fe f88e 	bl	80140d0 <disk_status>
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	f003 0301 	and.w	r3, r3, #1
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d102      	bne.n	8015fc4 <validate+0x60>
				res = FR_OK;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	73fb      	strb	r3, [r7, #15]
 8015fc2:	e008      	b.n	8015fd6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2100      	movs	r1, #0
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7fe f9f4 	bl	80143b8 <unlock_fs>
 8015fd0:	e001      	b.n	8015fd6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8015fd2:	230f      	movs	r3, #15
 8015fd4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015fd6:	7bfb      	ldrb	r3, [r7, #15]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d102      	bne.n	8015fe2 <validate+0x7e>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	e000      	b.n	8015fe4 <validate+0x80>
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	683a      	ldr	r2, [r7, #0]
 8015fe6:	6013      	str	r3, [r2, #0]
	return res;
 8015fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3710      	adds	r7, #16
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
	...

08015ff4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b088      	sub	sp, #32
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	60f8      	str	r0, [r7, #12]
 8015ffc:	60b9      	str	r1, [r7, #8]
 8015ffe:	4613      	mov	r3, r2
 8016000:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016006:	f107 0310 	add.w	r3, r7, #16
 801600a:	4618      	mov	r0, r3
 801600c:	f7ff fcbb 	bl	8015986 <get_ldnumber>
 8016010:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016012:	69fb      	ldr	r3, [r7, #28]
 8016014:	2b00      	cmp	r3, #0
 8016016:	da01      	bge.n	801601c <f_mount+0x28>
 8016018:	230b      	movs	r3, #11
 801601a:	e048      	b.n	80160ae <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801601c:	4a26      	ldr	r2, [pc, #152]	; (80160b8 <f_mount+0xc4>)
 801601e:	69fb      	ldr	r3, [r7, #28]
 8016020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016024:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016026:	69bb      	ldr	r3, [r7, #24]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d00f      	beq.n	801604c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801602c:	69b8      	ldr	r0, [r7, #24]
 801602e:	f7fe fa6d 	bl	801450c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8016032:	69bb      	ldr	r3, [r7, #24]
 8016034:	691b      	ldr	r3, [r3, #16]
 8016036:	4618      	mov	r0, r3
 8016038:	f000 fa05 	bl	8016446 <ff_del_syncobj>
 801603c:	4603      	mov	r3, r0
 801603e:	2b00      	cmp	r3, #0
 8016040:	d101      	bne.n	8016046 <f_mount+0x52>
 8016042:	2302      	movs	r3, #2
 8016044:	e033      	b.n	80160ae <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016046:	69bb      	ldr	r3, [r7, #24]
 8016048:	2200      	movs	r2, #0
 801604a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d00f      	beq.n	8016072 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	2200      	movs	r2, #0
 8016056:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8016058:	69fb      	ldr	r3, [r7, #28]
 801605a:	b2da      	uxtb	r2, r3
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	3310      	adds	r3, #16
 8016060:	4619      	mov	r1, r3
 8016062:	4610      	mov	r0, r2
 8016064:	f000 f9d1 	bl	801640a <ff_cre_syncobj>
 8016068:	4603      	mov	r3, r0
 801606a:	2b00      	cmp	r3, #0
 801606c:	d101      	bne.n	8016072 <f_mount+0x7e>
 801606e:	2302      	movs	r3, #2
 8016070:	e01d      	b.n	80160ae <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016072:	68fa      	ldr	r2, [r7, #12]
 8016074:	4910      	ldr	r1, [pc, #64]	; (80160b8 <f_mount+0xc4>)
 8016076:	69fb      	ldr	r3, [r7, #28]
 8016078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d002      	beq.n	8016088 <f_mount+0x94>
 8016082:	79fb      	ldrb	r3, [r7, #7]
 8016084:	2b01      	cmp	r3, #1
 8016086:	d001      	beq.n	801608c <f_mount+0x98>
 8016088:	2300      	movs	r3, #0
 801608a:	e010      	b.n	80160ae <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801608c:	f107 010c 	add.w	r1, r7, #12
 8016090:	f107 0308 	add.w	r3, r7, #8
 8016094:	2200      	movs	r2, #0
 8016096:	4618      	mov	r0, r3
 8016098:	f7ff fd10 	bl	8015abc <find_volume>
 801609c:	4603      	mov	r3, r0
 801609e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	7dfa      	ldrb	r2, [r7, #23]
 80160a4:	4611      	mov	r1, r2
 80160a6:	4618      	mov	r0, r3
 80160a8:	f7fe f986 	bl	80143b8 <unlock_fs>
 80160ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	3720      	adds	r7, #32
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	20000110 	.word	0x20000110

080160bc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	1d3b      	adds	r3, r7, #4
 80160c6:	6018      	str	r0, [r3, #0]
 80160c8:	463b      	mov	r3, r7
 80160ca:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80160cc:	1d3b      	adds	r3, r7, #4
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d101      	bne.n	80160d8 <f_opendir+0x1c>
 80160d4:	2309      	movs	r3, #9
 80160d6:	e092      	b.n	80161fe <f_opendir+0x142>

	/* Get logical drive */
	obj = &dp->obj;
 80160d8:	1d3b      	adds	r3, r7, #4
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 80160e0:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80160e4:	463b      	mov	r3, r7
 80160e6:	2200      	movs	r2, #0
 80160e8:	4618      	mov	r0, r3
 80160ea:	f7ff fce7 	bl	8015abc <find_volume>
 80160ee:	4603      	mov	r3, r0
 80160f0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 80160f4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d16e      	bne.n	80161da <f_opendir+0x11e>
		obj->fs = fs;
 80160fc:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8016100:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016104:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8016106:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801610a:	f107 020c 	add.w	r2, r7, #12
 801610e:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016110:	463b      	mov	r3, r7
 8016112:	681a      	ldr	r2, [r3, #0]
 8016114:	1d3b      	adds	r3, r7, #4
 8016116:	4611      	mov	r1, r2
 8016118:	6818      	ldr	r0, [r3, #0]
 801611a:	f7ff fbc3 	bl	80158a4 <follow_path>
 801611e:	4603      	mov	r3, r0
 8016120:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8016124:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8016128:	2b00      	cmp	r3, #0
 801612a:	d14f      	bne.n	80161cc <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801612c:	1d3b      	adds	r3, r7, #4
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016134:	b25b      	sxtb	r3, r3
 8016136:	2b00      	cmp	r3, #0
 8016138:	db17      	blt.n	801616a <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801613a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801613e:	799b      	ldrb	r3, [r3, #6]
 8016140:	f003 0310 	and.w	r3, r3, #16
 8016144:	2b00      	cmp	r3, #0
 8016146:	d00d      	beq.n	8016164 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016148:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801614c:	1d3b      	adds	r3, r7, #4
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	6a1b      	ldr	r3, [r3, #32]
 8016152:	4619      	mov	r1, r3
 8016154:	4610      	mov	r0, r2
 8016156:	f7fe fdf1 	bl	8014d3c <ld_clust>
 801615a:	4602      	mov	r2, r0
 801615c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016160:	609a      	str	r2, [r3, #8]
 8016162:	e002      	b.n	801616a <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016164:	2305      	movs	r3, #5
 8016166:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 801616a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 801616e:	2b00      	cmp	r3, #0
 8016170:	d12c      	bne.n	80161cc <f_opendir+0x110>
				obj->id = fs->id;
 8016172:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8016176:	88da      	ldrh	r2, [r3, #6]
 8016178:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801617c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801617e:	1d3b      	adds	r3, r7, #4
 8016180:	2100      	movs	r1, #0
 8016182:	6818      	ldr	r0, [r3, #0]
 8016184:	f7fe fc9a 	bl	8014abc <dir_sdi>
 8016188:	4603      	mov	r3, r0
 801618a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801618e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8016192:	2b00      	cmp	r3, #0
 8016194:	d11a      	bne.n	80161cc <f_opendir+0x110>
					if (obj->sclust) {
 8016196:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801619a:	689b      	ldr	r3, [r3, #8]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d011      	beq.n	80161c4 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80161a0:	1d3b      	adds	r3, r7, #4
 80161a2:	2100      	movs	r1, #0
 80161a4:	6818      	ldr	r0, [r3, #0]
 80161a6:	f7fe f923 	bl	80143f0 <inc_lock>
 80161aa:	4602      	mov	r2, r0
 80161ac:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80161b0:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80161b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80161b6:	691b      	ldr	r3, [r3, #16]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d107      	bne.n	80161cc <f_opendir+0x110>
 80161bc:	2312      	movs	r3, #18
 80161be:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 80161c2:	e003      	b.n	80161cc <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80161c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80161c8:	2200      	movs	r2, #0
 80161ca:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80161cc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80161d0:	2b04      	cmp	r3, #4
 80161d2:	d102      	bne.n	80161da <f_opendir+0x11e>
 80161d4:	2305      	movs	r3, #5
 80161d6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80161da:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d003      	beq.n	80161ea <f_opendir+0x12e>
 80161e2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80161e6:	2200      	movs	r2, #0
 80161e8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80161ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80161ee:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 80161f2:	4611      	mov	r1, r2
 80161f4:	4618      	mov	r0, r3
 80161f6:	f7fe f8df 	bl	80143b8 <unlock_fs>
 80161fa:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 80161fe:	4618      	mov	r0, r3
 8016200:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8016204:	46bd      	mov	sp, r7
 8016206:	bd80      	pop	{r7, pc}

08016208 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 801620e:	af00      	add	r7, sp, #0
 8016210:	1d3b      	adds	r3, r7, #4
 8016212:	6018      	str	r0, [r3, #0]
 8016214:	463b      	mov	r3, r7
 8016216:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8016218:	1d3b      	adds	r3, r7, #4
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8016220:	4611      	mov	r1, r2
 8016222:	4618      	mov	r0, r3
 8016224:	f7ff fe9e 	bl	8015f64 <validate>
 8016228:	4603      	mov	r3, r0
 801622a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 801622e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8016232:	2b00      	cmp	r3, #0
 8016234:	d139      	bne.n	80162aa <f_readdir+0xa2>
		if (!fno) {
 8016236:	463b      	mov	r3, r7
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d108      	bne.n	8016250 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801623e:	1d3b      	adds	r3, r7, #4
 8016240:	2100      	movs	r1, #0
 8016242:	6818      	ldr	r0, [r3, #0]
 8016244:	f7fe fc3a 	bl	8014abc <dir_sdi>
 8016248:	4603      	mov	r3, r0
 801624a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 801624e:	e02c      	b.n	80162aa <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8016250:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8016254:	f107 0208 	add.w	r2, r7, #8
 8016258:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801625a:	1d3b      	adds	r3, r7, #4
 801625c:	2100      	movs	r1, #0
 801625e:	6818      	ldr	r0, [r3, #0]
 8016260:	f7fe fe81 	bl	8014f66 <dir_read>
 8016264:	4603      	mov	r3, r0
 8016266:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801626a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 801626e:	2b04      	cmp	r3, #4
 8016270:	d102      	bne.n	8016278 <f_readdir+0x70>
 8016272:	2300      	movs	r3, #0
 8016274:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8016278:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 801627c:	2b00      	cmp	r3, #0
 801627e:	d114      	bne.n	80162aa <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8016280:	463a      	mov	r2, r7
 8016282:	1d3b      	adds	r3, r7, #4
 8016284:	6811      	ldr	r1, [r2, #0]
 8016286:	6818      	ldr	r0, [r3, #0]
 8016288:	f7fe ffd4 	bl	8015234 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801628c:	1d3b      	adds	r3, r7, #4
 801628e:	2100      	movs	r1, #0
 8016290:	6818      	ldr	r0, [r3, #0]
 8016292:	f7fe fc8e 	bl	8014bb2 <dir_next>
 8016296:	4603      	mov	r3, r0
 8016298:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801629c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80162a0:	2b04      	cmp	r3, #4
 80162a2:	d102      	bne.n	80162aa <f_readdir+0xa2>
 80162a4:	2300      	movs	r3, #0
 80162a6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80162aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80162ae:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80162b2:	4611      	mov	r1, r2
 80162b4:	4618      	mov	r0, r3
 80162b6:	f7fe f87f 	bl	80143b8 <unlock_fs>
 80162ba:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 80162be:	4618      	mov	r0, r3
 80162c0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd80      	pop	{r7, pc}

080162c8 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80162d2:	6839      	ldr	r1, [r7, #0]
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	f7ff ff97 	bl	8016208 <f_readdir>
 80162da:	4603      	mov	r3, r0
 80162dc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80162de:	7bfb      	ldrb	r3, [r7, #15]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d114      	bne.n	801630e <f_findnext+0x46>
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d011      	beq.n	801630e <f_findnext+0x46>
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	7d9b      	ldrb	r3, [r3, #22]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d00d      	beq.n	801630e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	f103 0116 	add.w	r1, r3, #22
 80162fc:	2300      	movs	r3, #0
 80162fe:	2200      	movs	r2, #0
 8016300:	f7ff f89c 	bl	801543c <pattern_matching>
 8016304:	4603      	mov	r3, r0
 8016306:	2b00      	cmp	r3, #0
 8016308:	d100      	bne.n	801630c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801630a:	e7e2      	b.n	80162d2 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801630c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016310:	4618      	mov	r0, r3
 8016312:	3710      	adds	r7, #16
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b086      	sub	sp, #24
 801631c:	af00      	add	r7, sp, #0
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
 8016324:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	683a      	ldr	r2, [r7, #0]
 801632a:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 801632c:	6879      	ldr	r1, [r7, #4]
 801632e:	68f8      	ldr	r0, [r7, #12]
 8016330:	f7ff fec4 	bl	80160bc <f_opendir>
 8016334:	4603      	mov	r3, r0
 8016336:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016338:	7dfb      	ldrb	r3, [r7, #23]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d105      	bne.n	801634a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801633e:	68b9      	ldr	r1, [r7, #8]
 8016340:	68f8      	ldr	r0, [r7, #12]
 8016342:	f7ff ffc1 	bl	80162c8 <f_findnext>
 8016346:	4603      	mov	r3, r0
 8016348:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801634a:	7dfb      	ldrb	r3, [r7, #23]
}
 801634c:	4618      	mov	r0, r3
 801634e:	3718      	adds	r7, #24
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016354:	b480      	push	{r7}
 8016356:	b087      	sub	sp, #28
 8016358:	af00      	add	r7, sp, #0
 801635a:	60f8      	str	r0, [r7, #12]
 801635c:	60b9      	str	r1, [r7, #8]
 801635e:	4613      	mov	r3, r2
 8016360:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016362:	2301      	movs	r3, #1
 8016364:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016366:	2300      	movs	r3, #0
 8016368:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801636a:	4b1f      	ldr	r3, [pc, #124]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 801636c:	7a5b      	ldrb	r3, [r3, #9]
 801636e:	b2db      	uxtb	r3, r3
 8016370:	2b00      	cmp	r3, #0
 8016372:	d131      	bne.n	80163d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016374:	4b1c      	ldr	r3, [pc, #112]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 8016376:	7a5b      	ldrb	r3, [r3, #9]
 8016378:	b2db      	uxtb	r3, r3
 801637a:	461a      	mov	r2, r3
 801637c:	4b1a      	ldr	r3, [pc, #104]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 801637e:	2100      	movs	r1, #0
 8016380:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016382:	4b19      	ldr	r3, [pc, #100]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 8016384:	7a5b      	ldrb	r3, [r3, #9]
 8016386:	b2db      	uxtb	r3, r3
 8016388:	4a17      	ldr	r2, [pc, #92]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 801638a:	009b      	lsls	r3, r3, #2
 801638c:	4413      	add	r3, r2
 801638e:	68fa      	ldr	r2, [r7, #12]
 8016390:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016392:	4b15      	ldr	r3, [pc, #84]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 8016394:	7a5b      	ldrb	r3, [r3, #9]
 8016396:	b2db      	uxtb	r3, r3
 8016398:	461a      	mov	r2, r3
 801639a:	4b13      	ldr	r3, [pc, #76]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 801639c:	4413      	add	r3, r2
 801639e:	79fa      	ldrb	r2, [r7, #7]
 80163a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80163a2:	4b11      	ldr	r3, [pc, #68]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 80163a4:	7a5b      	ldrb	r3, [r3, #9]
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	1c5a      	adds	r2, r3, #1
 80163aa:	b2d1      	uxtb	r1, r2
 80163ac:	4a0e      	ldr	r2, [pc, #56]	; (80163e8 <FATFS_LinkDriverEx+0x94>)
 80163ae:	7251      	strb	r1, [r2, #9]
 80163b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80163b2:	7dbb      	ldrb	r3, [r7, #22]
 80163b4:	3330      	adds	r3, #48	; 0x30
 80163b6:	b2da      	uxtb	r2, r3
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	3301      	adds	r3, #1
 80163c0:	223a      	movs	r2, #58	; 0x3a
 80163c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	3302      	adds	r3, #2
 80163c8:	222f      	movs	r2, #47	; 0x2f
 80163ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	3303      	adds	r3, #3
 80163d0:	2200      	movs	r2, #0
 80163d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80163d4:	2300      	movs	r3, #0
 80163d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80163d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80163da:	4618      	mov	r0, r3
 80163dc:	371c      	adds	r7, #28
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop
 80163e8:	20000138 	.word	0x20000138

080163ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b082      	sub	sp, #8
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
 80163f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80163f6:	2200      	movs	r2, #0
 80163f8:	6839      	ldr	r1, [r7, #0]
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7ff ffaa 	bl	8016354 <FATFS_LinkDriverEx>
 8016400:	4603      	mov	r3, r0
}
 8016402:	4618      	mov	r0, r3
 8016404:	3708      	adds	r7, #8
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}

0801640a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801640a:	b580      	push	{r7, lr}
 801640c:	b084      	sub	sp, #16
 801640e:	af00      	add	r7, sp, #0
 8016410:	4603      	mov	r3, r0
 8016412:	6039      	str	r1, [r7, #0]
 8016414:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 8016416:	2300      	movs	r3, #0
 8016418:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801641a:	f107 0308 	add.w	r3, r7, #8
 801641e:	2101      	movs	r1, #1
 8016420:	4618      	mov	r0, r3
 8016422:	f000 f8c4 	bl	80165ae <osSemaphoreCreate>
 8016426:	4602      	mov	r2, r0
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	2b00      	cmp	r3, #0
 8016432:	bf14      	ite	ne
 8016434:	2301      	movne	r3, #1
 8016436:	2300      	moveq	r3, #0
 8016438:	b2db      	uxtb	r3, r3
 801643a:	60fb      	str	r3, [r7, #12]

    return ret;
 801643c:	68fb      	ldr	r3, [r7, #12]
}
 801643e:	4618      	mov	r0, r3
 8016440:	3710      	adds	r7, #16
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}

08016446 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8016446:	b580      	push	{r7, lr}
 8016448:	b082      	sub	sp, #8
 801644a:	af00      	add	r7, sp, #0
 801644c:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f000 f956 	bl	8016700 <osSemaphoreDelete>
    return 1;
 8016454:	2301      	movs	r3, #1
}
 8016456:	4618      	mov	r0, r3
 8016458:	3708      	adds	r7, #8
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}

0801645e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801645e:	b580      	push	{r7, lr}
 8016460:	b084      	sub	sp, #16
 8016462:	af00      	add	r7, sp, #0
 8016464:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8016466:	2300      	movs	r3, #0
 8016468:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801646a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f000 f8c2 	bl	80165f8 <osSemaphoreWait>
 8016474:	4603      	mov	r3, r0
 8016476:	2b00      	cmp	r3, #0
 8016478:	d101      	bne.n	801647e <ff_req_grant+0x20>
  {
    ret = 1;
 801647a:	2301      	movs	r3, #1
 801647c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801647e:	68fb      	ldr	r3, [r7, #12]
}
 8016480:	4618      	mov	r0, r3
 8016482:	3710      	adds	r7, #16
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}

08016488 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8016490:	6878      	ldr	r0, [r7, #4]
 8016492:	f000 f8ff 	bl	8016694 <osSemaphoreRelease>
}
 8016496:	bf00      	nop
 8016498:	3708      	adds	r7, #8
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}

0801649e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801649e:	b480      	push	{r7}
 80164a0:	b085      	sub	sp, #20
 80164a2:	af00      	add	r7, sp, #0
 80164a4:	4603      	mov	r3, r0
 80164a6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80164a8:	2300      	movs	r3, #0
 80164aa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80164ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80164b0:	2b84      	cmp	r3, #132	; 0x84
 80164b2:	d005      	beq.n	80164c0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80164b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	4413      	add	r3, r2
 80164bc:	3303      	adds	r3, #3
 80164be:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80164c0:	68fb      	ldr	r3, [r7, #12]
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	3714      	adds	r7, #20
 80164c6:	46bd      	mov	sp, r7
 80164c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164cc:	4770      	bx	lr

080164ce <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80164ce:	b480      	push	{r7}
 80164d0:	b083      	sub	sp, #12
 80164d2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80164d4:	f3ef 8305 	mrs	r3, IPSR
 80164d8:	607b      	str	r3, [r7, #4]
  return(result);
 80164da:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80164dc:	2b00      	cmp	r3, #0
 80164de:	bf14      	ite	ne
 80164e0:	2301      	movne	r3, #1
 80164e2:	2300      	moveq	r3, #0
 80164e4:	b2db      	uxtb	r3, r3
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	370c      	adds	r7, #12
 80164ea:	46bd      	mov	sp, r7
 80164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f0:	4770      	bx	lr

080164f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80164f2:	b580      	push	{r7, lr}
 80164f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80164f6:	f001 fb0d 	bl	8017b14 <vTaskStartScheduler>
  
  return osOK;
 80164fa:	2300      	movs	r3, #0
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	bd80      	pop	{r7, pc}

08016500 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8016504:	f001 ff74 	bl	80183f0 <xTaskGetSchedulerState>
 8016508:	4603      	mov	r3, r0
 801650a:	2b01      	cmp	r3, #1
 801650c:	d101      	bne.n	8016512 <osKernelRunning+0x12>
    return 0;
 801650e:	2300      	movs	r3, #0
 8016510:	e000      	b.n	8016514 <osKernelRunning+0x14>
  else
    return 1;
 8016512:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8016514:	4618      	mov	r0, r3
 8016516:	bd80      	pop	{r7, pc}

08016518 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801651c:	f7ff ffd7 	bl	80164ce <inHandlerMode>
 8016520:	4603      	mov	r3, r0
 8016522:	2b00      	cmp	r3, #0
 8016524:	d003      	beq.n	801652e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8016526:	f001 fbfb 	bl	8017d20 <xTaskGetTickCountFromISR>
 801652a:	4603      	mov	r3, r0
 801652c:	e002      	b.n	8016534 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801652e:	f001 fbe7 	bl	8017d00 <xTaskGetTickCount>
 8016532:	4603      	mov	r3, r0
  }
}
 8016534:	4618      	mov	r0, r3
 8016536:	bd80      	pop	{r7, pc}

08016538 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8016538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801653a:	b087      	sub	sp, #28
 801653c:	af02      	add	r7, sp, #8
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	685c      	ldr	r4, [r3, #4]
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801654e:	b29e      	uxth	r6, r3
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016556:	4618      	mov	r0, r3
 8016558:	f7ff ffa1 	bl	801649e <makeFreeRtosPriority>
 801655c:	4602      	mov	r2, r0
 801655e:	f107 030c 	add.w	r3, r7, #12
 8016562:	9301      	str	r3, [sp, #4]
 8016564:	9200      	str	r2, [sp, #0]
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	4632      	mov	r2, r6
 801656a:	4629      	mov	r1, r5
 801656c:	4620      	mov	r0, r4
 801656e:	f001 f965 	bl	801783c <xTaskCreate>
 8016572:	4603      	mov	r3, r0
 8016574:	2b01      	cmp	r3, #1
 8016576:	d001      	beq.n	801657c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8016578:	2300      	movs	r3, #0
 801657a:	e000      	b.n	801657e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 801657c:	68fb      	ldr	r3, [r7, #12]
}
 801657e:	4618      	mov	r0, r3
 8016580:	3714      	adds	r7, #20
 8016582:	46bd      	mov	sp, r7
 8016584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016586 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016586:	b580      	push	{r7, lr}
 8016588:	b084      	sub	sp, #16
 801658a:	af00      	add	r7, sp, #0
 801658c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d001      	beq.n	801659c <osDelay+0x16>
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	e000      	b.n	801659e <osDelay+0x18>
 801659c:	2301      	movs	r3, #1
 801659e:	4618      	mov	r0, r3
 80165a0:	f001 fa82 	bl	8017aa8 <vTaskDelay>
  
  return osOK;
 80165a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3710      	adds	r7, #16
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80165ae:	b580      	push	{r7, lr}
 80165b0:	b084      	sub	sp, #16
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
 80165b6:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d110      	bne.n	80165e0 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80165be:	2203      	movs	r2, #3
 80165c0:	2100      	movs	r1, #0
 80165c2:	2001      	movs	r0, #1
 80165c4:	f000 fa94 	bl	8016af0 <xQueueGenericCreate>
 80165c8:	60f8      	str	r0, [r7, #12]
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d005      	beq.n	80165dc <osSemaphoreCreate+0x2e>
 80165d0:	2300      	movs	r3, #0
 80165d2:	2200      	movs	r2, #0
 80165d4:	2100      	movs	r1, #0
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	f000 fb1a 	bl	8016c10 <xQueueGenericSend>
    return sema;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	e006      	b.n	80165ee <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	683a      	ldr	r2, [r7, #0]
 80165e4:	4611      	mov	r1, r2
 80165e6:	4618      	mov	r0, r3
 80165e8:	f000 fadc 	bl	8016ba4 <xQueueCreateCountingSemaphore>
 80165ec:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3710      	adds	r7, #16
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
	...

080165f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b084      	sub	sp, #16
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8016602:	2300      	movs	r3, #0
 8016604:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d101      	bne.n	8016610 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801660c:	2380      	movs	r3, #128	; 0x80
 801660e:	e03a      	b.n	8016686 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8016610:	2300      	movs	r3, #0
 8016612:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801661a:	d103      	bne.n	8016624 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801661c:	f04f 33ff 	mov.w	r3, #4294967295
 8016620:	60fb      	str	r3, [r7, #12]
 8016622:	e009      	b.n	8016638 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d006      	beq.n	8016638 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801662a:	683b      	ldr	r3, [r7, #0]
 801662c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d101      	bne.n	8016638 <osSemaphoreWait+0x40>
      ticks = 1;
 8016634:	2301      	movs	r3, #1
 8016636:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8016638:	f7ff ff49 	bl	80164ce <inHandlerMode>
 801663c:	4603      	mov	r3, r0
 801663e:	2b00      	cmp	r3, #0
 8016640:	d017      	beq.n	8016672 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8016642:	f107 0308 	add.w	r3, r7, #8
 8016646:	461a      	mov	r2, r3
 8016648:	2100      	movs	r1, #0
 801664a:	6878      	ldr	r0, [r7, #4]
 801664c:	f000 ff02 	bl	8017454 <xQueueReceiveFromISR>
 8016650:	4603      	mov	r3, r0
 8016652:	2b01      	cmp	r3, #1
 8016654:	d001      	beq.n	801665a <osSemaphoreWait+0x62>
      return osErrorOS;
 8016656:	23ff      	movs	r3, #255	; 0xff
 8016658:	e015      	b.n	8016686 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d011      	beq.n	8016684 <osSemaphoreWait+0x8c>
 8016660:	4b0b      	ldr	r3, [pc, #44]	; (8016690 <osSemaphoreWait+0x98>)
 8016662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016666:	601a      	str	r2, [r3, #0]
 8016668:	f3bf 8f4f 	dsb	sy
 801666c:	f3bf 8f6f 	isb	sy
 8016670:	e008      	b.n	8016684 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8016672:	68f9      	ldr	r1, [r7, #12]
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f000 fddd 	bl	8017234 <xQueueSemaphoreTake>
 801667a:	4603      	mov	r3, r0
 801667c:	2b01      	cmp	r3, #1
 801667e:	d001      	beq.n	8016684 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8016680:	23ff      	movs	r3, #255	; 0xff
 8016682:	e000      	b.n	8016686 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8016684:	2300      	movs	r3, #0
}
 8016686:	4618      	mov	r0, r3
 8016688:	3710      	adds	r7, #16
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	e000ed04 	.word	0xe000ed04

08016694 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b084      	sub	sp, #16
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801669c:	2300      	movs	r3, #0
 801669e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80166a0:	2300      	movs	r3, #0
 80166a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80166a4:	f7ff ff13 	bl	80164ce <inHandlerMode>
 80166a8:	4603      	mov	r3, r0
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d016      	beq.n	80166dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80166ae:	f107 0308 	add.w	r3, r7, #8
 80166b2:	4619      	mov	r1, r3
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f000 fc49 	bl	8016f4c <xQueueGiveFromISR>
 80166ba:	4603      	mov	r3, r0
 80166bc:	2b01      	cmp	r3, #1
 80166be:	d001      	beq.n	80166c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80166c0:	23ff      	movs	r3, #255	; 0xff
 80166c2:	e017      	b.n	80166f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d013      	beq.n	80166f2 <osSemaphoreRelease+0x5e>
 80166ca:	4b0c      	ldr	r3, [pc, #48]	; (80166fc <osSemaphoreRelease+0x68>)
 80166cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166d0:	601a      	str	r2, [r3, #0]
 80166d2:	f3bf 8f4f 	dsb	sy
 80166d6:	f3bf 8f6f 	isb	sy
 80166da:	e00a      	b.n	80166f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80166dc:	2300      	movs	r3, #0
 80166de:	2200      	movs	r2, #0
 80166e0:	2100      	movs	r1, #0
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f000 fa94 	bl	8016c10 <xQueueGenericSend>
 80166e8:	4603      	mov	r3, r0
 80166ea:	2b01      	cmp	r3, #1
 80166ec:	d001      	beq.n	80166f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80166ee:	23ff      	movs	r3, #255	; 0xff
 80166f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80166f2:	68fb      	ldr	r3, [r7, #12]
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3710      	adds	r7, #16
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	e000ed04 	.word	0xe000ed04

08016700 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016708:	f7ff fee1 	bl	80164ce <inHandlerMode>
 801670c:	4603      	mov	r3, r0
 801670e:	2b00      	cmp	r3, #0
 8016710:	d001      	beq.n	8016716 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8016712:	2382      	movs	r3, #130	; 0x82
 8016714:	e003      	b.n	801671e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f000 ff1f 	bl	801755a <vQueueDelete>

  return osOK; 
 801671c:	2300      	movs	r3, #0
}
 801671e:	4618      	mov	r0, r3
 8016720:	3708      	adds	r7, #8
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}

08016726 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8016726:	b580      	push	{r7, lr}
 8016728:	b082      	sub	sp, #8
 801672a:	af00      	add	r7, sp, #0
 801672c:	6078      	str	r0, [r7, #4]
 801672e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6818      	ldr	r0, [r3, #0]
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	2200      	movs	r2, #0
 801673a:	4619      	mov	r1, r3
 801673c:	f000 f9d8 	bl	8016af0 <xQueueGenericCreate>
 8016740:	4603      	mov	r3, r0
#endif
}
 8016742:	4618      	mov	r0, r3
 8016744:	3708      	adds	r7, #8
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}
	...

0801674c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b086      	sub	sp, #24
 8016750:	af00      	add	r7, sp, #0
 8016752:	60f8      	str	r0, [r7, #12]
 8016754:	60b9      	str	r1, [r7, #8]
 8016756:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8016758:	2300      	movs	r3, #0
 801675a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8016760:	697b      	ldr	r3, [r7, #20]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d101      	bne.n	801676a <osMessagePut+0x1e>
    ticks = 1;
 8016766:	2301      	movs	r3, #1
 8016768:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801676a:	f7ff feb0 	bl	80164ce <inHandlerMode>
 801676e:	4603      	mov	r3, r0
 8016770:	2b00      	cmp	r3, #0
 8016772:	d018      	beq.n	80167a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8016774:	f107 0210 	add.w	r2, r7, #16
 8016778:	f107 0108 	add.w	r1, r7, #8
 801677c:	2300      	movs	r3, #0
 801677e:	68f8      	ldr	r0, [r7, #12]
 8016780:	f000 fb48 	bl	8016e14 <xQueueGenericSendFromISR>
 8016784:	4603      	mov	r3, r0
 8016786:	2b01      	cmp	r3, #1
 8016788:	d001      	beq.n	801678e <osMessagePut+0x42>
      return osErrorOS;
 801678a:	23ff      	movs	r3, #255	; 0xff
 801678c:	e018      	b.n	80167c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d014      	beq.n	80167be <osMessagePut+0x72>
 8016794:	4b0c      	ldr	r3, [pc, #48]	; (80167c8 <osMessagePut+0x7c>)
 8016796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801679a:	601a      	str	r2, [r3, #0]
 801679c:	f3bf 8f4f 	dsb	sy
 80167a0:	f3bf 8f6f 	isb	sy
 80167a4:	e00b      	b.n	80167be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80167a6:	f107 0108 	add.w	r1, r7, #8
 80167aa:	2300      	movs	r3, #0
 80167ac:	697a      	ldr	r2, [r7, #20]
 80167ae:	68f8      	ldr	r0, [r7, #12]
 80167b0:	f000 fa2e 	bl	8016c10 <xQueueGenericSend>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	d001      	beq.n	80167be <osMessagePut+0x72>
      return osErrorOS;
 80167ba:	23ff      	movs	r3, #255	; 0xff
 80167bc:	e000      	b.n	80167c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80167be:	2300      	movs	r3, #0
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	3718      	adds	r7, #24
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}
 80167c8:	e000ed04 	.word	0xe000ed04

080167cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80167cc:	b590      	push	{r4, r7, lr}
 80167ce:	b08b      	sub	sp, #44	; 0x2c
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80167dc:	2300      	movs	r3, #0
 80167de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80167e0:	68bb      	ldr	r3, [r7, #8]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d10a      	bne.n	80167fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80167e6:	2380      	movs	r3, #128	; 0x80
 80167e8:	617b      	str	r3, [r7, #20]
    return event;
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	461c      	mov	r4, r3
 80167ee:	f107 0314 	add.w	r3, r7, #20
 80167f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80167fa:	e054      	b.n	80168a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80167fc:	2300      	movs	r3, #0
 80167fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016800:	2300      	movs	r3, #0
 8016802:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801680a:	d103      	bne.n	8016814 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801680c:	f04f 33ff 	mov.w	r3, #4294967295
 8016810:	627b      	str	r3, [r7, #36]	; 0x24
 8016812:	e009      	b.n	8016828 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d006      	beq.n	8016828 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016820:	2b00      	cmp	r3, #0
 8016822:	d101      	bne.n	8016828 <osMessageGet+0x5c>
      ticks = 1;
 8016824:	2301      	movs	r3, #1
 8016826:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8016828:	f7ff fe51 	bl	80164ce <inHandlerMode>
 801682c:	4603      	mov	r3, r0
 801682e:	2b00      	cmp	r3, #0
 8016830:	d01c      	beq.n	801686c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016832:	f107 0220 	add.w	r2, r7, #32
 8016836:	f107 0314 	add.w	r3, r7, #20
 801683a:	3304      	adds	r3, #4
 801683c:	4619      	mov	r1, r3
 801683e:	68b8      	ldr	r0, [r7, #8]
 8016840:	f000 fe08 	bl	8017454 <xQueueReceiveFromISR>
 8016844:	4603      	mov	r3, r0
 8016846:	2b01      	cmp	r3, #1
 8016848:	d102      	bne.n	8016850 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801684a:	2310      	movs	r3, #16
 801684c:	617b      	str	r3, [r7, #20]
 801684e:	e001      	b.n	8016854 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016850:	2300      	movs	r3, #0
 8016852:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016854:	6a3b      	ldr	r3, [r7, #32]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d01d      	beq.n	8016896 <osMessageGet+0xca>
 801685a:	4b15      	ldr	r3, [pc, #84]	; (80168b0 <osMessageGet+0xe4>)
 801685c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016860:	601a      	str	r2, [r3, #0]
 8016862:	f3bf 8f4f 	dsb	sy
 8016866:	f3bf 8f6f 	isb	sy
 801686a:	e014      	b.n	8016896 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801686c:	f107 0314 	add.w	r3, r7, #20
 8016870:	3304      	adds	r3, #4
 8016872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016874:	4619      	mov	r1, r3
 8016876:	68b8      	ldr	r0, [r7, #8]
 8016878:	f000 fbfa 	bl	8017070 <xQueueReceive>
 801687c:	4603      	mov	r3, r0
 801687e:	2b01      	cmp	r3, #1
 8016880:	d102      	bne.n	8016888 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016882:	2310      	movs	r3, #16
 8016884:	617b      	str	r3, [r7, #20]
 8016886:	e006      	b.n	8016896 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8016888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688a:	2b00      	cmp	r3, #0
 801688c:	d101      	bne.n	8016892 <osMessageGet+0xc6>
 801688e:	2300      	movs	r3, #0
 8016890:	e000      	b.n	8016894 <osMessageGet+0xc8>
 8016892:	2340      	movs	r3, #64	; 0x40
 8016894:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	461c      	mov	r4, r3
 801689a:	f107 0314 	add.w	r3, r7, #20
 801689e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80168a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80168a6:	68f8      	ldr	r0, [r7, #12]
 80168a8:	372c      	adds	r7, #44	; 0x2c
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd90      	pop	{r4, r7, pc}
 80168ae:	bf00      	nop
 80168b0:	e000ed04 	.word	0xe000ed04

080168b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80168b4:	b480      	push	{r7}
 80168b6:	b083      	sub	sp, #12
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f103 0208 	add.w	r2, r3, #8
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f04f 32ff 	mov.w	r2, #4294967295
 80168cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f103 0208 	add.w	r2, r3, #8
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	f103 0208 	add.w	r2, r3, #8
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2200      	movs	r2, #0
 80168e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80168e8:	bf00      	nop
 80168ea:	370c      	adds	r7, #12
 80168ec:	46bd      	mov	sp, r7
 80168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f2:	4770      	bx	lr

080168f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2200      	movs	r2, #0
 8016900:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016902:	bf00      	nop
 8016904:	370c      	adds	r7, #12
 8016906:	46bd      	mov	sp, r7
 8016908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690c:	4770      	bx	lr

0801690e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801690e:	b480      	push	{r7}
 8016910:	b085      	sub	sp, #20
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
 8016916:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	68fa      	ldr	r2, [r7, #12]
 8016922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	689a      	ldr	r2, [r3, #8]
 8016928:	683b      	ldr	r3, [r7, #0]
 801692a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	689b      	ldr	r3, [r3, #8]
 8016930:	683a      	ldr	r2, [r7, #0]
 8016932:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	683a      	ldr	r2, [r7, #0]
 8016938:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	687a      	ldr	r2, [r7, #4]
 801693e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	1c5a      	adds	r2, r3, #1
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	601a      	str	r2, [r3, #0]
}
 801694a:	bf00      	nop
 801694c:	3714      	adds	r7, #20
 801694e:	46bd      	mov	sp, r7
 8016950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016954:	4770      	bx	lr

08016956 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016956:	b480      	push	{r7}
 8016958:	b085      	sub	sp, #20
 801695a:	af00      	add	r7, sp, #0
 801695c:	6078      	str	r0, [r7, #4]
 801695e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016960:	683b      	ldr	r3, [r7, #0]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016966:	68bb      	ldr	r3, [r7, #8]
 8016968:	f1b3 3fff 	cmp.w	r3, #4294967295
 801696c:	d103      	bne.n	8016976 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	691b      	ldr	r3, [r3, #16]
 8016972:	60fb      	str	r3, [r7, #12]
 8016974:	e00c      	b.n	8016990 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	3308      	adds	r3, #8
 801697a:	60fb      	str	r3, [r7, #12]
 801697c:	e002      	b.n	8016984 <vListInsert+0x2e>
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	685b      	ldr	r3, [r3, #4]
 8016982:	60fb      	str	r3, [r7, #12]
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	685b      	ldr	r3, [r3, #4]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	68ba      	ldr	r2, [r7, #8]
 801698c:	429a      	cmp	r2, r3
 801698e:	d2f6      	bcs.n	801697e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	685a      	ldr	r2, [r3, #4]
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	685b      	ldr	r3, [r3, #4]
 801699c:	683a      	ldr	r2, [r7, #0]
 801699e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	68fa      	ldr	r2, [r7, #12]
 80169a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	683a      	ldr	r2, [r7, #0]
 80169aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	1c5a      	adds	r2, r3, #1
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	601a      	str	r2, [r3, #0]
}
 80169bc:	bf00      	nop
 80169be:	3714      	adds	r7, #20
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr

080169c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80169c8:	b480      	push	{r7}
 80169ca:	b085      	sub	sp, #20
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	691b      	ldr	r3, [r3, #16]
 80169d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	685b      	ldr	r3, [r3, #4]
 80169da:	687a      	ldr	r2, [r7, #4]
 80169dc:	6892      	ldr	r2, [r2, #8]
 80169de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	689b      	ldr	r3, [r3, #8]
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	6852      	ldr	r2, [r2, #4]
 80169e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	687a      	ldr	r2, [r7, #4]
 80169f0:	429a      	cmp	r2, r3
 80169f2:	d103      	bne.n	80169fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	689a      	ldr	r2, [r3, #8]
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2200      	movs	r2, #0
 8016a00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	1e5a      	subs	r2, r3, #1
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	681b      	ldr	r3, [r3, #0]
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	3714      	adds	r7, #20
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr

08016a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b084      	sub	sp, #16
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
 8016a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d10b      	bne.n	8016a48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a34:	b672      	cpsid	i
 8016a36:	f383 8811 	msr	BASEPRI, r3
 8016a3a:	f3bf 8f6f 	isb	sy
 8016a3e:	f3bf 8f4f 	dsb	sy
 8016a42:	b662      	cpsie	i
 8016a44:	60bb      	str	r3, [r7, #8]
 8016a46:	e7fe      	b.n	8016a46 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8016a48:	f002 f826 	bl	8018a98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	681a      	ldr	r2, [r3, #0]
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a54:	68f9      	ldr	r1, [r7, #12]
 8016a56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016a58:	fb01 f303 	mul.w	r3, r1, r3
 8016a5c:	441a      	add	r2, r3
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	2200      	movs	r2, #0
 8016a66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	681a      	ldr	r2, [r3, #0]
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	681a      	ldr	r2, [r3, #0]
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a78:	3b01      	subs	r3, #1
 8016a7a:	68f9      	ldr	r1, [r7, #12]
 8016a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016a7e:	fb01 f303 	mul.w	r3, r1, r3
 8016a82:	441a      	add	r2, r3
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	22ff      	movs	r2, #255	; 0xff
 8016a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	22ff      	movs	r2, #255	; 0xff
 8016a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d114      	bne.n	8016ac8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	691b      	ldr	r3, [r3, #16]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d01a      	beq.n	8016adc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	3310      	adds	r3, #16
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f001 fafa 	bl	80180a4 <xTaskRemoveFromEventList>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d012      	beq.n	8016adc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016ab6:	4b0d      	ldr	r3, [pc, #52]	; (8016aec <xQueueGenericReset+0xd0>)
 8016ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016abc:	601a      	str	r2, [r3, #0]
 8016abe:	f3bf 8f4f 	dsb	sy
 8016ac2:	f3bf 8f6f 	isb	sy
 8016ac6:	e009      	b.n	8016adc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	3310      	adds	r3, #16
 8016acc:	4618      	mov	r0, r3
 8016ace:	f7ff fef1 	bl	80168b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	3324      	adds	r3, #36	; 0x24
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f7ff feec 	bl	80168b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016adc:	f002 f80e 	bl	8018afc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016ae0:	2301      	movs	r3, #1
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3710      	adds	r7, #16
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}
 8016aea:	bf00      	nop
 8016aec:	e000ed04 	.word	0xe000ed04

08016af0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b08a      	sub	sp, #40	; 0x28
 8016af4:	af02      	add	r7, sp, #8
 8016af6:	60f8      	str	r0, [r7, #12]
 8016af8:	60b9      	str	r1, [r7, #8]
 8016afa:	4613      	mov	r3, r2
 8016afc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d10b      	bne.n	8016b1c <xQueueGenericCreate+0x2c>
 8016b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b08:	b672      	cpsid	i
 8016b0a:	f383 8811 	msr	BASEPRI, r3
 8016b0e:	f3bf 8f6f 	isb	sy
 8016b12:	f3bf 8f4f 	dsb	sy
 8016b16:	b662      	cpsie	i
 8016b18:	613b      	str	r3, [r7, #16]
 8016b1a:	e7fe      	b.n	8016b1a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016b1c:	68bb      	ldr	r3, [r7, #8]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d102      	bne.n	8016b28 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016b22:	2300      	movs	r3, #0
 8016b24:	61fb      	str	r3, [r7, #28]
 8016b26:	e004      	b.n	8016b32 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	68ba      	ldr	r2, [r7, #8]
 8016b2c:	fb02 f303 	mul.w	r3, r2, r3
 8016b30:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	3348      	adds	r3, #72	; 0x48
 8016b36:	4618      	mov	r0, r3
 8016b38:	f002 f8d0 	bl	8018cdc <pvPortMalloc>
 8016b3c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016b3e:	69bb      	ldr	r3, [r7, #24]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d00b      	beq.n	8016b5c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8016b44:	69bb      	ldr	r3, [r7, #24]
 8016b46:	3348      	adds	r3, #72	; 0x48
 8016b48:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b4a:	79fa      	ldrb	r2, [r7, #7]
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	9300      	str	r3, [sp, #0]
 8016b50:	4613      	mov	r3, r2
 8016b52:	697a      	ldr	r2, [r7, #20]
 8016b54:	68b9      	ldr	r1, [r7, #8]
 8016b56:	68f8      	ldr	r0, [r7, #12]
 8016b58:	f000 f805 	bl	8016b66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8016b5c:	69bb      	ldr	r3, [r7, #24]
	}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3720      	adds	r7, #32
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}

08016b66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016b66:	b580      	push	{r7, lr}
 8016b68:	b084      	sub	sp, #16
 8016b6a:	af00      	add	r7, sp, #0
 8016b6c:	60f8      	str	r0, [r7, #12]
 8016b6e:	60b9      	str	r1, [r7, #8]
 8016b70:	607a      	str	r2, [r7, #4]
 8016b72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d103      	bne.n	8016b82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016b7a:	69bb      	ldr	r3, [r7, #24]
 8016b7c:	69ba      	ldr	r2, [r7, #24]
 8016b7e:	601a      	str	r2, [r3, #0]
 8016b80:	e002      	b.n	8016b88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016b82:	69bb      	ldr	r3, [r7, #24]
 8016b84:	687a      	ldr	r2, [r7, #4]
 8016b86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016b88:	69bb      	ldr	r3, [r7, #24]
 8016b8a:	68fa      	ldr	r2, [r7, #12]
 8016b8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	68ba      	ldr	r2, [r7, #8]
 8016b92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016b94:	2101      	movs	r1, #1
 8016b96:	69b8      	ldr	r0, [r7, #24]
 8016b98:	f7ff ff40 	bl	8016a1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016b9c:	bf00      	nop
 8016b9e:	3710      	adds	r7, #16
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b086      	sub	sp, #24
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
 8016bac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d10b      	bne.n	8016bcc <xQueueCreateCountingSemaphore+0x28>
 8016bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb8:	b672      	cpsid	i
 8016bba:	f383 8811 	msr	BASEPRI, r3
 8016bbe:	f3bf 8f6f 	isb	sy
 8016bc2:	f3bf 8f4f 	dsb	sy
 8016bc6:	b662      	cpsie	i
 8016bc8:	613b      	str	r3, [r7, #16]
 8016bca:	e7fe      	b.n	8016bca <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016bcc:	683a      	ldr	r2, [r7, #0]
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d90b      	bls.n	8016bec <xQueueCreateCountingSemaphore+0x48>
 8016bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd8:	b672      	cpsid	i
 8016bda:	f383 8811 	msr	BASEPRI, r3
 8016bde:	f3bf 8f6f 	isb	sy
 8016be2:	f3bf 8f4f 	dsb	sy
 8016be6:	b662      	cpsie	i
 8016be8:	60fb      	str	r3, [r7, #12]
 8016bea:	e7fe      	b.n	8016bea <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016bec:	2202      	movs	r2, #2
 8016bee:	2100      	movs	r1, #0
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f7ff ff7d 	bl	8016af0 <xQueueGenericCreate>
 8016bf6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016bf8:	697b      	ldr	r3, [r7, #20]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d002      	beq.n	8016c04 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	683a      	ldr	r2, [r7, #0]
 8016c02:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016c04:	697b      	ldr	r3, [r7, #20]
	}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3718      	adds	r7, #24
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
	...

08016c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b08e      	sub	sp, #56	; 0x38
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	60f8      	str	r0, [r7, #12]
 8016c18:	60b9      	str	r1, [r7, #8]
 8016c1a:	607a      	str	r2, [r7, #4]
 8016c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d10b      	bne.n	8016c44 <xQueueGenericSend+0x34>
 8016c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c30:	b672      	cpsid	i
 8016c32:	f383 8811 	msr	BASEPRI, r3
 8016c36:	f3bf 8f6f 	isb	sy
 8016c3a:	f3bf 8f4f 	dsb	sy
 8016c3e:	b662      	cpsie	i
 8016c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c42:	e7fe      	b.n	8016c42 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016c44:	68bb      	ldr	r3, [r7, #8]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d103      	bne.n	8016c52 <xQueueGenericSend+0x42>
 8016c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d101      	bne.n	8016c56 <xQueueGenericSend+0x46>
 8016c52:	2301      	movs	r3, #1
 8016c54:	e000      	b.n	8016c58 <xQueueGenericSend+0x48>
 8016c56:	2300      	movs	r3, #0
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d10b      	bne.n	8016c74 <xQueueGenericSend+0x64>
 8016c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c60:	b672      	cpsid	i
 8016c62:	f383 8811 	msr	BASEPRI, r3
 8016c66:	f3bf 8f6f 	isb	sy
 8016c6a:	f3bf 8f4f 	dsb	sy
 8016c6e:	b662      	cpsie	i
 8016c70:	627b      	str	r3, [r7, #36]	; 0x24
 8016c72:	e7fe      	b.n	8016c72 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	2b02      	cmp	r3, #2
 8016c78:	d103      	bne.n	8016c82 <xQueueGenericSend+0x72>
 8016c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c7e:	2b01      	cmp	r3, #1
 8016c80:	d101      	bne.n	8016c86 <xQueueGenericSend+0x76>
 8016c82:	2301      	movs	r3, #1
 8016c84:	e000      	b.n	8016c88 <xQueueGenericSend+0x78>
 8016c86:	2300      	movs	r3, #0
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d10b      	bne.n	8016ca4 <xQueueGenericSend+0x94>
 8016c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c90:	b672      	cpsid	i
 8016c92:	f383 8811 	msr	BASEPRI, r3
 8016c96:	f3bf 8f6f 	isb	sy
 8016c9a:	f3bf 8f4f 	dsb	sy
 8016c9e:	b662      	cpsie	i
 8016ca0:	623b      	str	r3, [r7, #32]
 8016ca2:	e7fe      	b.n	8016ca2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ca4:	f001 fba4 	bl	80183f0 <xTaskGetSchedulerState>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d102      	bne.n	8016cb4 <xQueueGenericSend+0xa4>
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d101      	bne.n	8016cb8 <xQueueGenericSend+0xa8>
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	e000      	b.n	8016cba <xQueueGenericSend+0xaa>
 8016cb8:	2300      	movs	r3, #0
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d10b      	bne.n	8016cd6 <xQueueGenericSend+0xc6>
 8016cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cc2:	b672      	cpsid	i
 8016cc4:	f383 8811 	msr	BASEPRI, r3
 8016cc8:	f3bf 8f6f 	isb	sy
 8016ccc:	f3bf 8f4f 	dsb	sy
 8016cd0:	b662      	cpsie	i
 8016cd2:	61fb      	str	r3, [r7, #28]
 8016cd4:	e7fe      	b.n	8016cd4 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016cd6:	f001 fedf 	bl	8018a98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d302      	bcc.n	8016cec <xQueueGenericSend+0xdc>
 8016ce6:	683b      	ldr	r3, [r7, #0]
 8016ce8:	2b02      	cmp	r3, #2
 8016cea:	d129      	bne.n	8016d40 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016cec:	683a      	ldr	r2, [r7, #0]
 8016cee:	68b9      	ldr	r1, [r7, #8]
 8016cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016cf2:	f000 fc69 	bl	80175c8 <prvCopyDataToQueue>
 8016cf6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d010      	beq.n	8016d22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d02:	3324      	adds	r3, #36	; 0x24
 8016d04:	4618      	mov	r0, r3
 8016d06:	f001 f9cd 	bl	80180a4 <xTaskRemoveFromEventList>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d013      	beq.n	8016d38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016d10:	4b3f      	ldr	r3, [pc, #252]	; (8016e10 <xQueueGenericSend+0x200>)
 8016d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d16:	601a      	str	r2, [r3, #0]
 8016d18:	f3bf 8f4f 	dsb	sy
 8016d1c:	f3bf 8f6f 	isb	sy
 8016d20:	e00a      	b.n	8016d38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d007      	beq.n	8016d38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016d28:	4b39      	ldr	r3, [pc, #228]	; (8016e10 <xQueueGenericSend+0x200>)
 8016d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d2e:	601a      	str	r2, [r3, #0]
 8016d30:	f3bf 8f4f 	dsb	sy
 8016d34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016d38:	f001 fee0 	bl	8018afc <vPortExitCritical>
				return pdPASS;
 8016d3c:	2301      	movs	r3, #1
 8016d3e:	e063      	b.n	8016e08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d103      	bne.n	8016d4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016d46:	f001 fed9 	bl	8018afc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	e05c      	b.n	8016e08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d106      	bne.n	8016d62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016d54:	f107 0314 	add.w	r3, r7, #20
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f001 fa07 	bl	801816c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016d5e:	2301      	movs	r3, #1
 8016d60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016d62:	f001 fecb 	bl	8018afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016d66:	f000 ff1f 	bl	8017ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016d6a:	f001 fe95 	bl	8018a98 <vPortEnterCritical>
 8016d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016d74:	b25b      	sxtb	r3, r3
 8016d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d7a:	d103      	bne.n	8016d84 <xQueueGenericSend+0x174>
 8016d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d7e:	2200      	movs	r2, #0
 8016d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016d8a:	b25b      	sxtb	r3, r3
 8016d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d90:	d103      	bne.n	8016d9a <xQueueGenericSend+0x18a>
 8016d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d94:	2200      	movs	r2, #0
 8016d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016d9a:	f001 feaf 	bl	8018afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016d9e:	1d3a      	adds	r2, r7, #4
 8016da0:	f107 0314 	add.w	r3, r7, #20
 8016da4:	4611      	mov	r1, r2
 8016da6:	4618      	mov	r0, r3
 8016da8:	f001 f9f6 	bl	8018198 <xTaskCheckForTimeOut>
 8016dac:	4603      	mov	r3, r0
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d124      	bne.n	8016dfc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016db4:	f000 fd00 	bl	80177b8 <prvIsQueueFull>
 8016db8:	4603      	mov	r3, r0
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d018      	beq.n	8016df0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dc0:	3310      	adds	r3, #16
 8016dc2:	687a      	ldr	r2, [r7, #4]
 8016dc4:	4611      	mov	r1, r2
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f001 f946 	bl	8018058 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016dce:	f000 fc8b 	bl	80176e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016dd2:	f000 fef7 	bl	8017bc4 <xTaskResumeAll>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	f47f af7c 	bne.w	8016cd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8016dde:	4b0c      	ldr	r3, [pc, #48]	; (8016e10 <xQueueGenericSend+0x200>)
 8016de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016de4:	601a      	str	r2, [r3, #0]
 8016de6:	f3bf 8f4f 	dsb	sy
 8016dea:	f3bf 8f6f 	isb	sy
 8016dee:	e772      	b.n	8016cd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016df2:	f000 fc79 	bl	80176e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016df6:	f000 fee5 	bl	8017bc4 <xTaskResumeAll>
 8016dfa:	e76c      	b.n	8016cd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016dfe:	f000 fc73 	bl	80176e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016e02:	f000 fedf 	bl	8017bc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016e06:	2300      	movs	r3, #0
		}
	}
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3738      	adds	r7, #56	; 0x38
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}
 8016e10:	e000ed04 	.word	0xe000ed04

08016e14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b08e      	sub	sp, #56	; 0x38
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	60f8      	str	r0, [r7, #12]
 8016e1c:	60b9      	str	r1, [r7, #8]
 8016e1e:	607a      	str	r2, [r7, #4]
 8016e20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d10b      	bne.n	8016e44 <xQueueGenericSendFromISR+0x30>
 8016e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e30:	b672      	cpsid	i
 8016e32:	f383 8811 	msr	BASEPRI, r3
 8016e36:	f3bf 8f6f 	isb	sy
 8016e3a:	f3bf 8f4f 	dsb	sy
 8016e3e:	b662      	cpsie	i
 8016e40:	627b      	str	r3, [r7, #36]	; 0x24
 8016e42:	e7fe      	b.n	8016e42 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d103      	bne.n	8016e52 <xQueueGenericSendFromISR+0x3e>
 8016e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d101      	bne.n	8016e56 <xQueueGenericSendFromISR+0x42>
 8016e52:	2301      	movs	r3, #1
 8016e54:	e000      	b.n	8016e58 <xQueueGenericSendFromISR+0x44>
 8016e56:	2300      	movs	r3, #0
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d10b      	bne.n	8016e74 <xQueueGenericSendFromISR+0x60>
 8016e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e60:	b672      	cpsid	i
 8016e62:	f383 8811 	msr	BASEPRI, r3
 8016e66:	f3bf 8f6f 	isb	sy
 8016e6a:	f3bf 8f4f 	dsb	sy
 8016e6e:	b662      	cpsie	i
 8016e70:	623b      	str	r3, [r7, #32]
 8016e72:	e7fe      	b.n	8016e72 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	2b02      	cmp	r3, #2
 8016e78:	d103      	bne.n	8016e82 <xQueueGenericSendFromISR+0x6e>
 8016e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e7e:	2b01      	cmp	r3, #1
 8016e80:	d101      	bne.n	8016e86 <xQueueGenericSendFromISR+0x72>
 8016e82:	2301      	movs	r3, #1
 8016e84:	e000      	b.n	8016e88 <xQueueGenericSendFromISR+0x74>
 8016e86:	2300      	movs	r3, #0
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d10b      	bne.n	8016ea4 <xQueueGenericSendFromISR+0x90>
 8016e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e90:	b672      	cpsid	i
 8016e92:	f383 8811 	msr	BASEPRI, r3
 8016e96:	f3bf 8f6f 	isb	sy
 8016e9a:	f3bf 8f4f 	dsb	sy
 8016e9e:	b662      	cpsie	i
 8016ea0:	61fb      	str	r3, [r7, #28]
 8016ea2:	e7fe      	b.n	8016ea2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ea4:	f001 fed8 	bl	8018c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016ea8:	f3ef 8211 	mrs	r2, BASEPRI
 8016eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb0:	b672      	cpsid	i
 8016eb2:	f383 8811 	msr	BASEPRI, r3
 8016eb6:	f3bf 8f6f 	isb	sy
 8016eba:	f3bf 8f4f 	dsb	sy
 8016ebe:	b662      	cpsie	i
 8016ec0:	61ba      	str	r2, [r7, #24]
 8016ec2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016ec4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d302      	bcc.n	8016eda <xQueueGenericSendFromISR+0xc6>
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	2b02      	cmp	r3, #2
 8016ed8:	d12c      	bne.n	8016f34 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016ee4:	683a      	ldr	r2, [r7, #0]
 8016ee6:	68b9      	ldr	r1, [r7, #8]
 8016ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016eea:	f000 fb6d 	bl	80175c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016eee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8016ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ef6:	d112      	bne.n	8016f1e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d016      	beq.n	8016f2e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f02:	3324      	adds	r3, #36	; 0x24
 8016f04:	4618      	mov	r0, r3
 8016f06:	f001 f8cd 	bl	80180a4 <xTaskRemoveFromEventList>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d00e      	beq.n	8016f2e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d00b      	beq.n	8016f2e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2201      	movs	r2, #1
 8016f1a:	601a      	str	r2, [r3, #0]
 8016f1c:	e007      	b.n	8016f2e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016f1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016f22:	3301      	adds	r3, #1
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	b25a      	sxtb	r2, r3
 8016f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016f2e:	2301      	movs	r3, #1
 8016f30:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8016f32:	e001      	b.n	8016f38 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016f34:	2300      	movs	r3, #0
 8016f36:	637b      	str	r3, [r7, #52]	; 0x34
 8016f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3738      	adds	r7, #56	; 0x38
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}

08016f4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b08e      	sub	sp, #56	; 0x38
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
 8016f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d10b      	bne.n	8016f78 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8016f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f64:	b672      	cpsid	i
 8016f66:	f383 8811 	msr	BASEPRI, r3
 8016f6a:	f3bf 8f6f 	isb	sy
 8016f6e:	f3bf 8f4f 	dsb	sy
 8016f72:	b662      	cpsie	i
 8016f74:	623b      	str	r3, [r7, #32]
 8016f76:	e7fe      	b.n	8016f76 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d00b      	beq.n	8016f98 <xQueueGiveFromISR+0x4c>
 8016f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f84:	b672      	cpsid	i
 8016f86:	f383 8811 	msr	BASEPRI, r3
 8016f8a:	f3bf 8f6f 	isb	sy
 8016f8e:	f3bf 8f4f 	dsb	sy
 8016f92:	b662      	cpsie	i
 8016f94:	61fb      	str	r3, [r7, #28]
 8016f96:	e7fe      	b.n	8016f96 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8016f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d103      	bne.n	8016fa8 <xQueueGiveFromISR+0x5c>
 8016fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa2:	685b      	ldr	r3, [r3, #4]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d101      	bne.n	8016fac <xQueueGiveFromISR+0x60>
 8016fa8:	2301      	movs	r3, #1
 8016faa:	e000      	b.n	8016fae <xQueueGiveFromISR+0x62>
 8016fac:	2300      	movs	r3, #0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d10b      	bne.n	8016fca <xQueueGiveFromISR+0x7e>
 8016fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fb6:	b672      	cpsid	i
 8016fb8:	f383 8811 	msr	BASEPRI, r3
 8016fbc:	f3bf 8f6f 	isb	sy
 8016fc0:	f3bf 8f4f 	dsb	sy
 8016fc4:	b662      	cpsie	i
 8016fc6:	61bb      	str	r3, [r7, #24]
 8016fc8:	e7fe      	b.n	8016fc8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016fca:	f001 fe45 	bl	8018c58 <vPortValidateInterruptPriority>
	__asm volatile
 8016fce:	f3ef 8211 	mrs	r2, BASEPRI
 8016fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fd6:	b672      	cpsid	i
 8016fd8:	f383 8811 	msr	BASEPRI, r3
 8016fdc:	f3bf 8f6f 	isb	sy
 8016fe0:	f3bf 8f4f 	dsb	sy
 8016fe4:	b662      	cpsie	i
 8016fe6:	617a      	str	r2, [r7, #20]
 8016fe8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016fea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ff2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	d22b      	bcs.n	8017056 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700a:	1c5a      	adds	r2, r3, #1
 801700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801700e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017018:	d112      	bne.n	8017040 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801701e:	2b00      	cmp	r3, #0
 8017020:	d016      	beq.n	8017050 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017024:	3324      	adds	r3, #36	; 0x24
 8017026:	4618      	mov	r0, r3
 8017028:	f001 f83c 	bl	80180a4 <xTaskRemoveFromEventList>
 801702c:	4603      	mov	r3, r0
 801702e:	2b00      	cmp	r3, #0
 8017030:	d00e      	beq.n	8017050 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d00b      	beq.n	8017050 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	2201      	movs	r2, #1
 801703c:	601a      	str	r2, [r3, #0]
 801703e:	e007      	b.n	8017050 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017044:	3301      	adds	r3, #1
 8017046:	b2db      	uxtb	r3, r3
 8017048:	b25a      	sxtb	r2, r3
 801704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801704c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017050:	2301      	movs	r3, #1
 8017052:	637b      	str	r3, [r7, #52]	; 0x34
 8017054:	e001      	b.n	801705a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017056:	2300      	movs	r3, #0
 8017058:	637b      	str	r3, [r7, #52]	; 0x34
 801705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801705c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017066:	4618      	mov	r0, r3
 8017068:	3738      	adds	r7, #56	; 0x38
 801706a:	46bd      	mov	sp, r7
 801706c:	bd80      	pop	{r7, pc}
	...

08017070 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b08c      	sub	sp, #48	; 0x30
 8017074:	af00      	add	r7, sp, #0
 8017076:	60f8      	str	r0, [r7, #12]
 8017078:	60b9      	str	r1, [r7, #8]
 801707a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801707c:	2300      	movs	r3, #0
 801707e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017086:	2b00      	cmp	r3, #0
 8017088:	d10b      	bne.n	80170a2 <xQueueReceive+0x32>
	__asm volatile
 801708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801708e:	b672      	cpsid	i
 8017090:	f383 8811 	msr	BASEPRI, r3
 8017094:	f3bf 8f6f 	isb	sy
 8017098:	f3bf 8f4f 	dsb	sy
 801709c:	b662      	cpsie	i
 801709e:	623b      	str	r3, [r7, #32]
 80170a0:	e7fe      	b.n	80170a0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d103      	bne.n	80170b0 <xQueueReceive+0x40>
 80170a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d101      	bne.n	80170b4 <xQueueReceive+0x44>
 80170b0:	2301      	movs	r3, #1
 80170b2:	e000      	b.n	80170b6 <xQueueReceive+0x46>
 80170b4:	2300      	movs	r3, #0
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d10b      	bne.n	80170d2 <xQueueReceive+0x62>
 80170ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170be:	b672      	cpsid	i
 80170c0:	f383 8811 	msr	BASEPRI, r3
 80170c4:	f3bf 8f6f 	isb	sy
 80170c8:	f3bf 8f4f 	dsb	sy
 80170cc:	b662      	cpsie	i
 80170ce:	61fb      	str	r3, [r7, #28]
 80170d0:	e7fe      	b.n	80170d0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80170d2:	f001 f98d 	bl	80183f0 <xTaskGetSchedulerState>
 80170d6:	4603      	mov	r3, r0
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d102      	bne.n	80170e2 <xQueueReceive+0x72>
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d101      	bne.n	80170e6 <xQueueReceive+0x76>
 80170e2:	2301      	movs	r3, #1
 80170e4:	e000      	b.n	80170e8 <xQueueReceive+0x78>
 80170e6:	2300      	movs	r3, #0
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d10b      	bne.n	8017104 <xQueueReceive+0x94>
 80170ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f0:	b672      	cpsid	i
 80170f2:	f383 8811 	msr	BASEPRI, r3
 80170f6:	f3bf 8f6f 	isb	sy
 80170fa:	f3bf 8f4f 	dsb	sy
 80170fe:	b662      	cpsie	i
 8017100:	61bb      	str	r3, [r7, #24]
 8017102:	e7fe      	b.n	8017102 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8017104:	f001 fcc8 	bl	8018a98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801710c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017110:	2b00      	cmp	r3, #0
 8017112:	d01f      	beq.n	8017154 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017114:	68b9      	ldr	r1, [r7, #8]
 8017116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017118:	f000 fac0 	bl	801769c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801711e:	1e5a      	subs	r2, r3, #1
 8017120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017122:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017126:	691b      	ldr	r3, [r3, #16]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d00f      	beq.n	801714c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801712e:	3310      	adds	r3, #16
 8017130:	4618      	mov	r0, r3
 8017132:	f000 ffb7 	bl	80180a4 <xTaskRemoveFromEventList>
 8017136:	4603      	mov	r3, r0
 8017138:	2b00      	cmp	r3, #0
 801713a:	d007      	beq.n	801714c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801713c:	4b3c      	ldr	r3, [pc, #240]	; (8017230 <xQueueReceive+0x1c0>)
 801713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017142:	601a      	str	r2, [r3, #0]
 8017144:	f3bf 8f4f 	dsb	sy
 8017148:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801714c:	f001 fcd6 	bl	8018afc <vPortExitCritical>
				return pdPASS;
 8017150:	2301      	movs	r3, #1
 8017152:	e069      	b.n	8017228 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d103      	bne.n	8017162 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801715a:	f001 fccf 	bl	8018afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801715e:	2300      	movs	r3, #0
 8017160:	e062      	b.n	8017228 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017164:	2b00      	cmp	r3, #0
 8017166:	d106      	bne.n	8017176 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017168:	f107 0310 	add.w	r3, r7, #16
 801716c:	4618      	mov	r0, r3
 801716e:	f000 fffd 	bl	801816c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017172:	2301      	movs	r3, #1
 8017174:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017176:	f001 fcc1 	bl	8018afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801717a:	f000 fd15 	bl	8017ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801717e:	f001 fc8b 	bl	8018a98 <vPortEnterCritical>
 8017182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017188:	b25b      	sxtb	r3, r3
 801718a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801718e:	d103      	bne.n	8017198 <xQueueReceive+0x128>
 8017190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017192:	2200      	movs	r2, #0
 8017194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801719a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801719e:	b25b      	sxtb	r3, r3
 80171a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171a4:	d103      	bne.n	80171ae <xQueueReceive+0x13e>
 80171a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a8:	2200      	movs	r2, #0
 80171aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80171ae:	f001 fca5 	bl	8018afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80171b2:	1d3a      	adds	r2, r7, #4
 80171b4:	f107 0310 	add.w	r3, r7, #16
 80171b8:	4611      	mov	r1, r2
 80171ba:	4618      	mov	r0, r3
 80171bc:	f000 ffec 	bl	8018198 <xTaskCheckForTimeOut>
 80171c0:	4603      	mov	r3, r0
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d123      	bne.n	801720e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80171c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80171c8:	f000 fae0 	bl	801778c <prvIsQueueEmpty>
 80171cc:	4603      	mov	r3, r0
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d017      	beq.n	8017202 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80171d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d4:	3324      	adds	r3, #36	; 0x24
 80171d6:	687a      	ldr	r2, [r7, #4]
 80171d8:	4611      	mov	r1, r2
 80171da:	4618      	mov	r0, r3
 80171dc:	f000 ff3c 	bl	8018058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80171e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80171e2:	f000 fa81 	bl	80176e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80171e6:	f000 fced 	bl	8017bc4 <xTaskResumeAll>
 80171ea:	4603      	mov	r3, r0
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d189      	bne.n	8017104 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80171f0:	4b0f      	ldr	r3, [pc, #60]	; (8017230 <xQueueReceive+0x1c0>)
 80171f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171f6:	601a      	str	r2, [r3, #0]
 80171f8:	f3bf 8f4f 	dsb	sy
 80171fc:	f3bf 8f6f 	isb	sy
 8017200:	e780      	b.n	8017104 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017204:	f000 fa70 	bl	80176e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017208:	f000 fcdc 	bl	8017bc4 <xTaskResumeAll>
 801720c:	e77a      	b.n	8017104 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801720e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017210:	f000 fa6a 	bl	80176e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017214:	f000 fcd6 	bl	8017bc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801721a:	f000 fab7 	bl	801778c <prvIsQueueEmpty>
 801721e:	4603      	mov	r3, r0
 8017220:	2b00      	cmp	r3, #0
 8017222:	f43f af6f 	beq.w	8017104 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017226:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8017228:	4618      	mov	r0, r3
 801722a:	3730      	adds	r7, #48	; 0x30
 801722c:	46bd      	mov	sp, r7
 801722e:	bd80      	pop	{r7, pc}
 8017230:	e000ed04 	.word	0xe000ed04

08017234 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b08e      	sub	sp, #56	; 0x38
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
 801723c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801723e:	2300      	movs	r3, #0
 8017240:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017246:	2300      	movs	r3, #0
 8017248:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801724c:	2b00      	cmp	r3, #0
 801724e:	d10b      	bne.n	8017268 <xQueueSemaphoreTake+0x34>
 8017250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017254:	b672      	cpsid	i
 8017256:	f383 8811 	msr	BASEPRI, r3
 801725a:	f3bf 8f6f 	isb	sy
 801725e:	f3bf 8f4f 	dsb	sy
 8017262:	b662      	cpsie	i
 8017264:	623b      	str	r3, [r7, #32]
 8017266:	e7fe      	b.n	8017266 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801726c:	2b00      	cmp	r3, #0
 801726e:	d00b      	beq.n	8017288 <xQueueSemaphoreTake+0x54>
 8017270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017274:	b672      	cpsid	i
 8017276:	f383 8811 	msr	BASEPRI, r3
 801727a:	f3bf 8f6f 	isb	sy
 801727e:	f3bf 8f4f 	dsb	sy
 8017282:	b662      	cpsie	i
 8017284:	61fb      	str	r3, [r7, #28]
 8017286:	e7fe      	b.n	8017286 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017288:	f001 f8b2 	bl	80183f0 <xTaskGetSchedulerState>
 801728c:	4603      	mov	r3, r0
 801728e:	2b00      	cmp	r3, #0
 8017290:	d102      	bne.n	8017298 <xQueueSemaphoreTake+0x64>
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d101      	bne.n	801729c <xQueueSemaphoreTake+0x68>
 8017298:	2301      	movs	r3, #1
 801729a:	e000      	b.n	801729e <xQueueSemaphoreTake+0x6a>
 801729c:	2300      	movs	r3, #0
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d10b      	bne.n	80172ba <xQueueSemaphoreTake+0x86>
 80172a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172a6:	b672      	cpsid	i
 80172a8:	f383 8811 	msr	BASEPRI, r3
 80172ac:	f3bf 8f6f 	isb	sy
 80172b0:	f3bf 8f4f 	dsb	sy
 80172b4:	b662      	cpsie	i
 80172b6:	61bb      	str	r3, [r7, #24]
 80172b8:	e7fe      	b.n	80172b8 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80172ba:	f001 fbed 	bl	8018a98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80172be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172c2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80172c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d024      	beq.n	8017314 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80172ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172cc:	1e5a      	subs	r2, r3, #1
 80172ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80172d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d104      	bne.n	80172e4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80172da:	f001 fa57 	bl	801878c <pvTaskIncrementMutexHeldCount>
 80172de:	4602      	mov	r2, r0
 80172e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80172e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e6:	691b      	ldr	r3, [r3, #16]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d00f      	beq.n	801730c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80172ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ee:	3310      	adds	r3, #16
 80172f0:	4618      	mov	r0, r3
 80172f2:	f000 fed7 	bl	80180a4 <xTaskRemoveFromEventList>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d007      	beq.n	801730c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80172fc:	4b54      	ldr	r3, [pc, #336]	; (8017450 <xQueueSemaphoreTake+0x21c>)
 80172fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017302:	601a      	str	r2, [r3, #0]
 8017304:	f3bf 8f4f 	dsb	sy
 8017308:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801730c:	f001 fbf6 	bl	8018afc <vPortExitCritical>
				return pdPASS;
 8017310:	2301      	movs	r3, #1
 8017312:	e098      	b.n	8017446 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d112      	bne.n	8017340 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801731c:	2b00      	cmp	r3, #0
 801731e:	d00b      	beq.n	8017338 <xQueueSemaphoreTake+0x104>
 8017320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017324:	b672      	cpsid	i
 8017326:	f383 8811 	msr	BASEPRI, r3
 801732a:	f3bf 8f6f 	isb	sy
 801732e:	f3bf 8f4f 	dsb	sy
 8017332:	b662      	cpsie	i
 8017334:	617b      	str	r3, [r7, #20]
 8017336:	e7fe      	b.n	8017336 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017338:	f001 fbe0 	bl	8018afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801733c:	2300      	movs	r3, #0
 801733e:	e082      	b.n	8017446 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017342:	2b00      	cmp	r3, #0
 8017344:	d106      	bne.n	8017354 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017346:	f107 030c 	add.w	r3, r7, #12
 801734a:	4618      	mov	r0, r3
 801734c:	f000 ff0e 	bl	801816c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017350:	2301      	movs	r3, #1
 8017352:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017354:	f001 fbd2 	bl	8018afc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017358:	f000 fc26 	bl	8017ba8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801735c:	f001 fb9c 	bl	8018a98 <vPortEnterCritical>
 8017360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017366:	b25b      	sxtb	r3, r3
 8017368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801736c:	d103      	bne.n	8017376 <xQueueSemaphoreTake+0x142>
 801736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017370:	2200      	movs	r2, #0
 8017372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801737c:	b25b      	sxtb	r3, r3
 801737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017382:	d103      	bne.n	801738c <xQueueSemaphoreTake+0x158>
 8017384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017386:	2200      	movs	r2, #0
 8017388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801738c:	f001 fbb6 	bl	8018afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017390:	463a      	mov	r2, r7
 8017392:	f107 030c 	add.w	r3, r7, #12
 8017396:	4611      	mov	r1, r2
 8017398:	4618      	mov	r0, r3
 801739a:	f000 fefd 	bl	8018198 <xTaskCheckForTimeOut>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d132      	bne.n	801740a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80173a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173a6:	f000 f9f1 	bl	801778c <prvIsQueueEmpty>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d026      	beq.n	80173fe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80173b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d109      	bne.n	80173cc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80173b8:	f001 fb6e 	bl	8018a98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80173bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173be:	685b      	ldr	r3, [r3, #4]
 80173c0:	4618      	mov	r0, r3
 80173c2:	f001 f833 	bl	801842c <xTaskPriorityInherit>
 80173c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80173c8:	f001 fb98 	bl	8018afc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80173cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ce:	3324      	adds	r3, #36	; 0x24
 80173d0:	683a      	ldr	r2, [r7, #0]
 80173d2:	4611      	mov	r1, r2
 80173d4:	4618      	mov	r0, r3
 80173d6:	f000 fe3f 	bl	8018058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80173da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173dc:	f000 f984 	bl	80176e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80173e0:	f000 fbf0 	bl	8017bc4 <xTaskResumeAll>
 80173e4:	4603      	mov	r3, r0
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	f47f af67 	bne.w	80172ba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80173ec:	4b18      	ldr	r3, [pc, #96]	; (8017450 <xQueueSemaphoreTake+0x21c>)
 80173ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173f2:	601a      	str	r2, [r3, #0]
 80173f4:	f3bf 8f4f 	dsb	sy
 80173f8:	f3bf 8f6f 	isb	sy
 80173fc:	e75d      	b.n	80172ba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80173fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017400:	f000 f972 	bl	80176e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017404:	f000 fbde 	bl	8017bc4 <xTaskResumeAll>
 8017408:	e757      	b.n	80172ba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801740a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801740c:	f000 f96c 	bl	80176e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017410:	f000 fbd8 	bl	8017bc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017416:	f000 f9b9 	bl	801778c <prvIsQueueEmpty>
 801741a:	4603      	mov	r3, r0
 801741c:	2b00      	cmp	r3, #0
 801741e:	f43f af4c 	beq.w	80172ba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017424:	2b00      	cmp	r3, #0
 8017426:	d00d      	beq.n	8017444 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8017428:	f001 fb36 	bl	8018a98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801742c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801742e:	f000 f8b3 	bl	8017598 <prvGetDisinheritPriorityAfterTimeout>
 8017432:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8017434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017436:	685b      	ldr	r3, [r3, #4]
 8017438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801743a:	4618      	mov	r0, r3
 801743c:	f001 f904 	bl	8018648 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017440:	f001 fb5c 	bl	8018afc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017444:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8017446:	4618      	mov	r0, r3
 8017448:	3738      	adds	r7, #56	; 0x38
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	e000ed04 	.word	0xe000ed04

08017454 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b08e      	sub	sp, #56	; 0x38
 8017458:	af00      	add	r7, sp, #0
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	60b9      	str	r1, [r7, #8]
 801745e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017466:	2b00      	cmp	r3, #0
 8017468:	d10b      	bne.n	8017482 <xQueueReceiveFromISR+0x2e>
 801746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801746e:	b672      	cpsid	i
 8017470:	f383 8811 	msr	BASEPRI, r3
 8017474:	f3bf 8f6f 	isb	sy
 8017478:	f3bf 8f4f 	dsb	sy
 801747c:	b662      	cpsie	i
 801747e:	623b      	str	r3, [r7, #32]
 8017480:	e7fe      	b.n	8017480 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d103      	bne.n	8017490 <xQueueReceiveFromISR+0x3c>
 8017488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801748c:	2b00      	cmp	r3, #0
 801748e:	d101      	bne.n	8017494 <xQueueReceiveFromISR+0x40>
 8017490:	2301      	movs	r3, #1
 8017492:	e000      	b.n	8017496 <xQueueReceiveFromISR+0x42>
 8017494:	2300      	movs	r3, #0
 8017496:	2b00      	cmp	r3, #0
 8017498:	d10b      	bne.n	80174b2 <xQueueReceiveFromISR+0x5e>
 801749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801749e:	b672      	cpsid	i
 80174a0:	f383 8811 	msr	BASEPRI, r3
 80174a4:	f3bf 8f6f 	isb	sy
 80174a8:	f3bf 8f4f 	dsb	sy
 80174ac:	b662      	cpsie	i
 80174ae:	61fb      	str	r3, [r7, #28]
 80174b0:	e7fe      	b.n	80174b0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80174b2:	f001 fbd1 	bl	8018c58 <vPortValidateInterruptPriority>
	__asm volatile
 80174b6:	f3ef 8211 	mrs	r2, BASEPRI
 80174ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174be:	b672      	cpsid	i
 80174c0:	f383 8811 	msr	BASEPRI, r3
 80174c4:	f3bf 8f6f 	isb	sy
 80174c8:	f3bf 8f4f 	dsb	sy
 80174cc:	b662      	cpsie	i
 80174ce:	61ba      	str	r2, [r7, #24]
 80174d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80174d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80174d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80174d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80174dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d02f      	beq.n	8017542 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80174e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80174e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80174ec:	68b9      	ldr	r1, [r7, #8]
 80174ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80174f0:	f000 f8d4 	bl	801769c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80174f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f6:	1e5a      	subs	r2, r3, #1
 80174f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80174fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017504:	d112      	bne.n	801752c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017508:	691b      	ldr	r3, [r3, #16]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d016      	beq.n	801753c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017510:	3310      	adds	r3, #16
 8017512:	4618      	mov	r0, r3
 8017514:	f000 fdc6 	bl	80180a4 <xTaskRemoveFromEventList>
 8017518:	4603      	mov	r3, r0
 801751a:	2b00      	cmp	r3, #0
 801751c:	d00e      	beq.n	801753c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d00b      	beq.n	801753c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2201      	movs	r2, #1
 8017528:	601a      	str	r2, [r3, #0]
 801752a:	e007      	b.n	801753c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801752c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017530:	3301      	adds	r3, #1
 8017532:	b2db      	uxtb	r3, r3
 8017534:	b25a      	sxtb	r2, r3
 8017536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801753c:	2301      	movs	r3, #1
 801753e:	637b      	str	r3, [r7, #52]	; 0x34
 8017540:	e001      	b.n	8017546 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8017542:	2300      	movs	r3, #0
 8017544:	637b      	str	r3, [r7, #52]	; 0x34
 8017546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017548:	613b      	str	r3, [r7, #16]
	__asm volatile
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017552:	4618      	mov	r0, r3
 8017554:	3738      	adds	r7, #56	; 0x38
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}

0801755a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801755a:	b580      	push	{r7, lr}
 801755c:	b084      	sub	sp, #16
 801755e:	af00      	add	r7, sp, #0
 8017560:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d10b      	bne.n	8017584 <vQueueDelete+0x2a>
	__asm volatile
 801756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017570:	b672      	cpsid	i
 8017572:	f383 8811 	msr	BASEPRI, r3
 8017576:	f3bf 8f6f 	isb	sy
 801757a:	f3bf 8f4f 	dsb	sy
 801757e:	b662      	cpsie	i
 8017580:	60bb      	str	r3, [r7, #8]
 8017582:	e7fe      	b.n	8017582 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017584:	68f8      	ldr	r0, [r7, #12]
 8017586:	f000 f92f 	bl	80177e8 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 801758a:	68f8      	ldr	r0, [r7, #12]
 801758c:	f001 fc72 	bl	8018e74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017590:	bf00      	nop
 8017592:	3710      	adds	r7, #16
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017598:	b480      	push	{r7}
 801759a:	b085      	sub	sp, #20
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d006      	beq.n	80175b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	f1c3 0307 	rsb	r3, r3, #7
 80175b2:	60fb      	str	r3, [r7, #12]
 80175b4:	e001      	b.n	80175ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80175b6:	2300      	movs	r3, #0
 80175b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80175ba:	68fb      	ldr	r3, [r7, #12]
	}
 80175bc:	4618      	mov	r0, r3
 80175be:	3714      	adds	r7, #20
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr

080175c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b086      	sub	sp, #24
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	60f8      	str	r0, [r7, #12]
 80175d0:	60b9      	str	r1, [r7, #8]
 80175d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80175d4:	2300      	movs	r3, #0
 80175d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d10d      	bne.n	8017602 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d14d      	bne.n	801768a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	685b      	ldr	r3, [r3, #4]
 80175f2:	4618      	mov	r0, r3
 80175f4:	f000 ffa0 	bl	8018538 <xTaskPriorityDisinherit>
 80175f8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	2200      	movs	r2, #0
 80175fe:	605a      	str	r2, [r3, #4]
 8017600:	e043      	b.n	801768a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d119      	bne.n	801763c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	6898      	ldr	r0, [r3, #8]
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017610:	461a      	mov	r2, r3
 8017612:	68b9      	ldr	r1, [r7, #8]
 8017614:	f00d fe6a 	bl	80252ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	689a      	ldr	r2, [r3, #8]
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017620:	441a      	add	r2, r3
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	689a      	ldr	r2, [r3, #8]
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	685b      	ldr	r3, [r3, #4]
 801762e:	429a      	cmp	r2, r3
 8017630:	d32b      	bcc.n	801768a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	681a      	ldr	r2, [r3, #0]
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	609a      	str	r2, [r3, #8]
 801763a:	e026      	b.n	801768a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	68d8      	ldr	r0, [r3, #12]
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017644:	461a      	mov	r2, r3
 8017646:	68b9      	ldr	r1, [r7, #8]
 8017648:	f00d fe50 	bl	80252ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	68da      	ldr	r2, [r3, #12]
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017654:	425b      	negs	r3, r3
 8017656:	441a      	add	r2, r3
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	68da      	ldr	r2, [r3, #12]
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	429a      	cmp	r2, r3
 8017666:	d207      	bcs.n	8017678 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	685a      	ldr	r2, [r3, #4]
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017670:	425b      	negs	r3, r3
 8017672:	441a      	add	r2, r3
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2b02      	cmp	r3, #2
 801767c:	d105      	bne.n	801768a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d002      	beq.n	801768a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	3b01      	subs	r3, #1
 8017688:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	1c5a      	adds	r2, r3, #1
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017692:	697b      	ldr	r3, [r7, #20]
}
 8017694:	4618      	mov	r0, r3
 8017696:	3718      	adds	r7, #24
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}

0801769c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b082      	sub	sp, #8
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d018      	beq.n	80176e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	68da      	ldr	r2, [r3, #12]
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176b6:	441a      	add	r2, r3
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	68da      	ldr	r2, [r3, #12]
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	685b      	ldr	r3, [r3, #4]
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d303      	bcc.n	80176d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681a      	ldr	r2, [r3, #0]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	68d9      	ldr	r1, [r3, #12]
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176d8:	461a      	mov	r2, r3
 80176da:	6838      	ldr	r0, [r7, #0]
 80176dc:	f00d fe06 	bl	80252ec <memcpy>
	}
}
 80176e0:	bf00      	nop
 80176e2:	3708      	adds	r7, #8
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}

080176e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80176f0:	f001 f9d2 	bl	8018a98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80176fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80176fc:	e011      	b.n	8017722 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017702:	2b00      	cmp	r3, #0
 8017704:	d012      	beq.n	801772c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	3324      	adds	r3, #36	; 0x24
 801770a:	4618      	mov	r0, r3
 801770c:	f000 fcca 	bl	80180a4 <xTaskRemoveFromEventList>
 8017710:	4603      	mov	r3, r0
 8017712:	2b00      	cmp	r3, #0
 8017714:	d001      	beq.n	801771a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017716:	f000 fda3 	bl	8018260 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801771a:	7bfb      	ldrb	r3, [r7, #15]
 801771c:	3b01      	subs	r3, #1
 801771e:	b2db      	uxtb	r3, r3
 8017720:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017726:	2b00      	cmp	r3, #0
 8017728:	dce9      	bgt.n	80176fe <prvUnlockQueue+0x16>
 801772a:	e000      	b.n	801772e <prvUnlockQueue+0x46>
					break;
 801772c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	22ff      	movs	r2, #255	; 0xff
 8017732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017736:	f001 f9e1 	bl	8018afc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801773a:	f001 f9ad 	bl	8018a98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017744:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017746:	e011      	b.n	801776c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	691b      	ldr	r3, [r3, #16]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d012      	beq.n	8017776 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	3310      	adds	r3, #16
 8017754:	4618      	mov	r0, r3
 8017756:	f000 fca5 	bl	80180a4 <xTaskRemoveFromEventList>
 801775a:	4603      	mov	r3, r0
 801775c:	2b00      	cmp	r3, #0
 801775e:	d001      	beq.n	8017764 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017760:	f000 fd7e 	bl	8018260 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017764:	7bbb      	ldrb	r3, [r7, #14]
 8017766:	3b01      	subs	r3, #1
 8017768:	b2db      	uxtb	r3, r3
 801776a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801776c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017770:	2b00      	cmp	r3, #0
 8017772:	dce9      	bgt.n	8017748 <prvUnlockQueue+0x60>
 8017774:	e000      	b.n	8017778 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017776:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	22ff      	movs	r2, #255	; 0xff
 801777c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017780:	f001 f9bc 	bl	8018afc <vPortExitCritical>
}
 8017784:	bf00      	nop
 8017786:	3710      	adds	r7, #16
 8017788:	46bd      	mov	sp, r7
 801778a:	bd80      	pop	{r7, pc}

0801778c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017794:	f001 f980 	bl	8018a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801779c:	2b00      	cmp	r3, #0
 801779e:	d102      	bne.n	80177a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80177a0:	2301      	movs	r3, #1
 80177a2:	60fb      	str	r3, [r7, #12]
 80177a4:	e001      	b.n	80177aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80177a6:	2300      	movs	r3, #0
 80177a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80177aa:	f001 f9a7 	bl	8018afc <vPortExitCritical>

	return xReturn;
 80177ae:	68fb      	ldr	r3, [r7, #12]
}
 80177b0:	4618      	mov	r0, r3
 80177b2:	3710      	adds	r7, #16
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}

080177b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b084      	sub	sp, #16
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80177c0:	f001 f96a 	bl	8018a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d102      	bne.n	80177d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80177d0:	2301      	movs	r3, #1
 80177d2:	60fb      	str	r3, [r7, #12]
 80177d4:	e001      	b.n	80177da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80177d6:	2300      	movs	r3, #0
 80177d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80177da:	f001 f98f 	bl	8018afc <vPortExitCritical>

	return xReturn;
 80177de:	68fb      	ldr	r3, [r7, #12]
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3710      	adds	r7, #16
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}

080177e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80177e8:	b480      	push	{r7}
 80177ea:	b085      	sub	sp, #20
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80177f0:	2300      	movs	r3, #0
 80177f2:	60fb      	str	r3, [r7, #12]
 80177f4:	e016      	b.n	8017824 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80177f6:	4a10      	ldr	r2, [pc, #64]	; (8017838 <vQueueUnregisterQueue+0x50>)
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	00db      	lsls	r3, r3, #3
 80177fc:	4413      	add	r3, r2
 80177fe:	685b      	ldr	r3, [r3, #4]
 8017800:	687a      	ldr	r2, [r7, #4]
 8017802:	429a      	cmp	r2, r3
 8017804:	d10b      	bne.n	801781e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017806:	4a0c      	ldr	r2, [pc, #48]	; (8017838 <vQueueUnregisterQueue+0x50>)
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2100      	movs	r1, #0
 801780c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017810:	4a09      	ldr	r2, [pc, #36]	; (8017838 <vQueueUnregisterQueue+0x50>)
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	00db      	lsls	r3, r3, #3
 8017816:	4413      	add	r3, r2
 8017818:	2200      	movs	r2, #0
 801781a:	605a      	str	r2, [r3, #4]
				break;
 801781c:	e005      	b.n	801782a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	3301      	adds	r3, #1
 8017822:	60fb      	str	r3, [r7, #12]
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	2b07      	cmp	r3, #7
 8017828:	d9e5      	bls.n	80177f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801782a:	bf00      	nop
 801782c:	3714      	adds	r7, #20
 801782e:	46bd      	mov	sp, r7
 8017830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017834:	4770      	bx	lr
 8017836:	bf00      	nop
 8017838:	2000bc6c 	.word	0x2000bc6c

0801783c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801783c:	b580      	push	{r7, lr}
 801783e:	b08c      	sub	sp, #48	; 0x30
 8017840:	af04      	add	r7, sp, #16
 8017842:	60f8      	str	r0, [r7, #12]
 8017844:	60b9      	str	r1, [r7, #8]
 8017846:	603b      	str	r3, [r7, #0]
 8017848:	4613      	mov	r3, r2
 801784a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801784c:	88fb      	ldrh	r3, [r7, #6]
 801784e:	009b      	lsls	r3, r3, #2
 8017850:	4618      	mov	r0, r3
 8017852:	f001 fa43 	bl	8018cdc <pvPortMalloc>
 8017856:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017858:	697b      	ldr	r3, [r7, #20]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d00e      	beq.n	801787c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801785e:	2058      	movs	r0, #88	; 0x58
 8017860:	f001 fa3c 	bl	8018cdc <pvPortMalloc>
 8017864:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017866:	69fb      	ldr	r3, [r7, #28]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d003      	beq.n	8017874 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801786c:	69fb      	ldr	r3, [r7, #28]
 801786e:	697a      	ldr	r2, [r7, #20]
 8017870:	631a      	str	r2, [r3, #48]	; 0x30
 8017872:	e005      	b.n	8017880 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017874:	6978      	ldr	r0, [r7, #20]
 8017876:	f001 fafd 	bl	8018e74 <vPortFree>
 801787a:	e001      	b.n	8017880 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801787c:	2300      	movs	r3, #0
 801787e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017880:	69fb      	ldr	r3, [r7, #28]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d013      	beq.n	80178ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017886:	88fa      	ldrh	r2, [r7, #6]
 8017888:	2300      	movs	r3, #0
 801788a:	9303      	str	r3, [sp, #12]
 801788c:	69fb      	ldr	r3, [r7, #28]
 801788e:	9302      	str	r3, [sp, #8]
 8017890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017892:	9301      	str	r3, [sp, #4]
 8017894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017896:	9300      	str	r3, [sp, #0]
 8017898:	683b      	ldr	r3, [r7, #0]
 801789a:	68b9      	ldr	r1, [r7, #8]
 801789c:	68f8      	ldr	r0, [r7, #12]
 801789e:	f000 f80e 	bl	80178be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80178a2:	69f8      	ldr	r0, [r7, #28]
 80178a4:	f000 f896 	bl	80179d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80178a8:	2301      	movs	r3, #1
 80178aa:	61bb      	str	r3, [r7, #24]
 80178ac:	e002      	b.n	80178b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80178ae:	f04f 33ff 	mov.w	r3, #4294967295
 80178b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80178b4:	69bb      	ldr	r3, [r7, #24]
	}
 80178b6:	4618      	mov	r0, r3
 80178b8:	3720      	adds	r7, #32
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bd80      	pop	{r7, pc}

080178be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80178be:	b580      	push	{r7, lr}
 80178c0:	b088      	sub	sp, #32
 80178c2:	af00      	add	r7, sp, #0
 80178c4:	60f8      	str	r0, [r7, #12]
 80178c6:	60b9      	str	r1, [r7, #8]
 80178c8:	607a      	str	r2, [r7, #4]
 80178ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80178cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	009b      	lsls	r3, r3, #2
 80178d4:	461a      	mov	r2, r3
 80178d6:	21a5      	movs	r1, #165	; 0xa5
 80178d8:	f00d fd13 	bl	8025302 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80178dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80178e0:	6879      	ldr	r1, [r7, #4]
 80178e2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80178e6:	440b      	add	r3, r1
 80178e8:	009b      	lsls	r3, r3, #2
 80178ea:	4413      	add	r3, r2
 80178ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80178ee:	69bb      	ldr	r3, [r7, #24]
 80178f0:	f023 0307 	bic.w	r3, r3, #7
 80178f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80178f6:	69bb      	ldr	r3, [r7, #24]
 80178f8:	f003 0307 	and.w	r3, r3, #7
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d00b      	beq.n	8017918 <prvInitialiseNewTask+0x5a>
 8017900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017904:	b672      	cpsid	i
 8017906:	f383 8811 	msr	BASEPRI, r3
 801790a:	f3bf 8f6f 	isb	sy
 801790e:	f3bf 8f4f 	dsb	sy
 8017912:	b662      	cpsie	i
 8017914:	617b      	str	r3, [r7, #20]
 8017916:	e7fe      	b.n	8017916 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017918:	2300      	movs	r3, #0
 801791a:	61fb      	str	r3, [r7, #28]
 801791c:	e012      	b.n	8017944 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801791e:	68ba      	ldr	r2, [r7, #8]
 8017920:	69fb      	ldr	r3, [r7, #28]
 8017922:	4413      	add	r3, r2
 8017924:	7819      	ldrb	r1, [r3, #0]
 8017926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017928:	69fb      	ldr	r3, [r7, #28]
 801792a:	4413      	add	r3, r2
 801792c:	3334      	adds	r3, #52	; 0x34
 801792e:	460a      	mov	r2, r1
 8017930:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8017932:	68ba      	ldr	r2, [r7, #8]
 8017934:	69fb      	ldr	r3, [r7, #28]
 8017936:	4413      	add	r3, r2
 8017938:	781b      	ldrb	r3, [r3, #0]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d006      	beq.n	801794c <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801793e:	69fb      	ldr	r3, [r7, #28]
 8017940:	3301      	adds	r3, #1
 8017942:	61fb      	str	r3, [r7, #28]
 8017944:	69fb      	ldr	r3, [r7, #28]
 8017946:	2b0f      	cmp	r3, #15
 8017948:	d9e9      	bls.n	801791e <prvInitialiseNewTask+0x60>
 801794a:	e000      	b.n	801794e <prvInitialiseNewTask+0x90>
		{
			break;
 801794c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017950:	2200      	movs	r2, #0
 8017952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017958:	2b06      	cmp	r3, #6
 801795a:	d901      	bls.n	8017960 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801795c:	2306      	movs	r3, #6
 801795e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801796a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801796e:	2200      	movs	r2, #0
 8017970:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017974:	3304      	adds	r3, #4
 8017976:	4618      	mov	r0, r3
 8017978:	f7fe ffbc 	bl	80168f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801797e:	3318      	adds	r3, #24
 8017980:	4618      	mov	r0, r3
 8017982:	f7fe ffb7 	bl	80168f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801798a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801798e:	f1c3 0207 	rsb	r2, r3, #7
 8017992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801799a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801799e:	2200      	movs	r2, #0
 80179a0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80179a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179a4:	2200      	movs	r2, #0
 80179a6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80179a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179aa:	2200      	movs	r2, #0
 80179ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80179b0:	683a      	ldr	r2, [r7, #0]
 80179b2:	68f9      	ldr	r1, [r7, #12]
 80179b4:	69b8      	ldr	r0, [r7, #24]
 80179b6:	f000 ff63 	bl	8018880 <pxPortInitialiseStack>
 80179ba:	4602      	mov	r2, r0
 80179bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80179c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d002      	beq.n	80179cc <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80179c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80179cc:	bf00      	nop
 80179ce:	3720      	adds	r7, #32
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}

080179d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b082      	sub	sp, #8
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80179dc:	f001 f85c 	bl	8018a98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80179e0:	4b2a      	ldr	r3, [pc, #168]	; (8017a8c <prvAddNewTaskToReadyList+0xb8>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	3301      	adds	r3, #1
 80179e6:	4a29      	ldr	r2, [pc, #164]	; (8017a8c <prvAddNewTaskToReadyList+0xb8>)
 80179e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80179ea:	4b29      	ldr	r3, [pc, #164]	; (8017a90 <prvAddNewTaskToReadyList+0xbc>)
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d109      	bne.n	8017a06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80179f2:	4a27      	ldr	r2, [pc, #156]	; (8017a90 <prvAddNewTaskToReadyList+0xbc>)
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80179f8:	4b24      	ldr	r3, [pc, #144]	; (8017a8c <prvAddNewTaskToReadyList+0xb8>)
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	2b01      	cmp	r3, #1
 80179fe:	d110      	bne.n	8017a22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017a00:	f000 fc54 	bl	80182ac <prvInitialiseTaskLists>
 8017a04:	e00d      	b.n	8017a22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017a06:	4b23      	ldr	r3, [pc, #140]	; (8017a94 <prvAddNewTaskToReadyList+0xc0>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d109      	bne.n	8017a22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017a0e:	4b20      	ldr	r3, [pc, #128]	; (8017a90 <prvAddNewTaskToReadyList+0xbc>)
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	d802      	bhi.n	8017a22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017a1c:	4a1c      	ldr	r2, [pc, #112]	; (8017a90 <prvAddNewTaskToReadyList+0xbc>)
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017a22:	4b1d      	ldr	r3, [pc, #116]	; (8017a98 <prvAddNewTaskToReadyList+0xc4>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	3301      	adds	r3, #1
 8017a28:	4a1b      	ldr	r2, [pc, #108]	; (8017a98 <prvAddNewTaskToReadyList+0xc4>)
 8017a2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a30:	2201      	movs	r2, #1
 8017a32:	409a      	lsls	r2, r3
 8017a34:	4b19      	ldr	r3, [pc, #100]	; (8017a9c <prvAddNewTaskToReadyList+0xc8>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	4313      	orrs	r3, r2
 8017a3a:	4a18      	ldr	r2, [pc, #96]	; (8017a9c <prvAddNewTaskToReadyList+0xc8>)
 8017a3c:	6013      	str	r3, [r2, #0]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a42:	4613      	mov	r3, r2
 8017a44:	009b      	lsls	r3, r3, #2
 8017a46:	4413      	add	r3, r2
 8017a48:	009b      	lsls	r3, r3, #2
 8017a4a:	4a15      	ldr	r2, [pc, #84]	; (8017aa0 <prvAddNewTaskToReadyList+0xcc>)
 8017a4c:	441a      	add	r2, r3
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	3304      	adds	r3, #4
 8017a52:	4619      	mov	r1, r3
 8017a54:	4610      	mov	r0, r2
 8017a56:	f7fe ff5a 	bl	801690e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017a5a:	f001 f84f 	bl	8018afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017a5e:	4b0d      	ldr	r3, [pc, #52]	; (8017a94 <prvAddNewTaskToReadyList+0xc0>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d00e      	beq.n	8017a84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017a66:	4b0a      	ldr	r3, [pc, #40]	; (8017a90 <prvAddNewTaskToReadyList+0xbc>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a70:	429a      	cmp	r2, r3
 8017a72:	d207      	bcs.n	8017a84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017a74:	4b0b      	ldr	r3, [pc, #44]	; (8017aa4 <prvAddNewTaskToReadyList+0xd0>)
 8017a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a7a:	601a      	str	r2, [r3, #0]
 8017a7c:	f3bf 8f4f 	dsb	sy
 8017a80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017a84:	bf00      	nop
 8017a86:	3708      	adds	r7, #8
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}
 8017a8c:	20000244 	.word	0x20000244
 8017a90:	20000144 	.word	0x20000144
 8017a94:	20000250 	.word	0x20000250
 8017a98:	20000260 	.word	0x20000260
 8017a9c:	2000024c 	.word	0x2000024c
 8017aa0:	20000148 	.word	0x20000148
 8017aa4:	e000ed04 	.word	0xe000ed04

08017aa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b084      	sub	sp, #16
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d018      	beq.n	8017aec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017aba:	4b14      	ldr	r3, [pc, #80]	; (8017b0c <vTaskDelay+0x64>)
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d00b      	beq.n	8017ada <vTaskDelay+0x32>
 8017ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ac6:	b672      	cpsid	i
 8017ac8:	f383 8811 	msr	BASEPRI, r3
 8017acc:	f3bf 8f6f 	isb	sy
 8017ad0:	f3bf 8f4f 	dsb	sy
 8017ad4:	b662      	cpsie	i
 8017ad6:	60bb      	str	r3, [r7, #8]
 8017ad8:	e7fe      	b.n	8017ad8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8017ada:	f000 f865 	bl	8017ba8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017ade:	2100      	movs	r1, #0
 8017ae0:	6878      	ldr	r0, [r7, #4]
 8017ae2:	f000 fe67 	bl	80187b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017ae6:	f000 f86d 	bl	8017bc4 <xTaskResumeAll>
 8017aea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d107      	bne.n	8017b02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8017af2:	4b07      	ldr	r3, [pc, #28]	; (8017b10 <vTaskDelay+0x68>)
 8017af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017af8:	601a      	str	r2, [r3, #0]
 8017afa:	f3bf 8f4f 	dsb	sy
 8017afe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017b02:	bf00      	nop
 8017b04:	3710      	adds	r7, #16
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	2000026c 	.word	0x2000026c
 8017b10:	e000ed04 	.word	0xe000ed04

08017b14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b086      	sub	sp, #24
 8017b18:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8017b1a:	4b1d      	ldr	r3, [pc, #116]	; (8017b90 <vTaskStartScheduler+0x7c>)
 8017b1c:	9301      	str	r3, [sp, #4]
 8017b1e:	2300      	movs	r3, #0
 8017b20:	9300      	str	r3, [sp, #0]
 8017b22:	2300      	movs	r3, #0
 8017b24:	2280      	movs	r2, #128	; 0x80
 8017b26:	491b      	ldr	r1, [pc, #108]	; (8017b94 <vTaskStartScheduler+0x80>)
 8017b28:	481b      	ldr	r0, [pc, #108]	; (8017b98 <vTaskStartScheduler+0x84>)
 8017b2a:	f7ff fe87 	bl	801783c <xTaskCreate>
 8017b2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	2b01      	cmp	r3, #1
 8017b34:	d117      	bne.n	8017b66 <vTaskStartScheduler+0x52>
 8017b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b3a:	b672      	cpsid	i
 8017b3c:	f383 8811 	msr	BASEPRI, r3
 8017b40:	f3bf 8f6f 	isb	sy
 8017b44:	f3bf 8f4f 	dsb	sy
 8017b48:	b662      	cpsie	i
 8017b4a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017b4c:	4b13      	ldr	r3, [pc, #76]	; (8017b9c <vTaskStartScheduler+0x88>)
 8017b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8017b52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017b54:	4b12      	ldr	r3, [pc, #72]	; (8017ba0 <vTaskStartScheduler+0x8c>)
 8017b56:	2201      	movs	r2, #1
 8017b58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8017b5a:	4b12      	ldr	r3, [pc, #72]	; (8017ba4 <vTaskStartScheduler+0x90>)
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017b60:	f000 ff1e 	bl	80189a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017b64:	e00f      	b.n	8017b86 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b6c:	d10b      	bne.n	8017b86 <vTaskStartScheduler+0x72>
 8017b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b72:	b672      	cpsid	i
 8017b74:	f383 8811 	msr	BASEPRI, r3
 8017b78:	f3bf 8f6f 	isb	sy
 8017b7c:	f3bf 8f4f 	dsb	sy
 8017b80:	b662      	cpsie	i
 8017b82:	607b      	str	r3, [r7, #4]
 8017b84:	e7fe      	b.n	8017b84 <vTaskStartScheduler+0x70>
}
 8017b86:	bf00      	nop
 8017b88:	3710      	adds	r7, #16
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bd80      	pop	{r7, pc}
 8017b8e:	bf00      	nop
 8017b90:	20000268 	.word	0x20000268
 8017b94:	08026298 	.word	0x08026298
 8017b98:	08018279 	.word	0x08018279
 8017b9c:	20000264 	.word	0x20000264
 8017ba0:	20000250 	.word	0x20000250
 8017ba4:	20000248 	.word	0x20000248

08017ba8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017ba8:	b480      	push	{r7}
 8017baa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017bac:	4b04      	ldr	r3, [pc, #16]	; (8017bc0 <vTaskSuspendAll+0x18>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	3301      	adds	r3, #1
 8017bb2:	4a03      	ldr	r2, [pc, #12]	; (8017bc0 <vTaskSuspendAll+0x18>)
 8017bb4:	6013      	str	r3, [r2, #0]
}
 8017bb6:	bf00      	nop
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbe:	4770      	bx	lr
 8017bc0:	2000026c 	.word	0x2000026c

08017bc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017bca:	2300      	movs	r3, #0
 8017bcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017bce:	2300      	movs	r3, #0
 8017bd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017bd2:	4b42      	ldr	r3, [pc, #264]	; (8017cdc <xTaskResumeAll+0x118>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d10b      	bne.n	8017bf2 <xTaskResumeAll+0x2e>
 8017bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bde:	b672      	cpsid	i
 8017be0:	f383 8811 	msr	BASEPRI, r3
 8017be4:	f3bf 8f6f 	isb	sy
 8017be8:	f3bf 8f4f 	dsb	sy
 8017bec:	b662      	cpsie	i
 8017bee:	603b      	str	r3, [r7, #0]
 8017bf0:	e7fe      	b.n	8017bf0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017bf2:	f000 ff51 	bl	8018a98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017bf6:	4b39      	ldr	r3, [pc, #228]	; (8017cdc <xTaskResumeAll+0x118>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	3b01      	subs	r3, #1
 8017bfc:	4a37      	ldr	r2, [pc, #220]	; (8017cdc <xTaskResumeAll+0x118>)
 8017bfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017c00:	4b36      	ldr	r3, [pc, #216]	; (8017cdc <xTaskResumeAll+0x118>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d161      	bne.n	8017ccc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017c08:	4b35      	ldr	r3, [pc, #212]	; (8017ce0 <xTaskResumeAll+0x11c>)
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d05d      	beq.n	8017ccc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017c10:	e02e      	b.n	8017c70 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8017c12:	4b34      	ldr	r3, [pc, #208]	; (8017ce4 <xTaskResumeAll+0x120>)
 8017c14:	68db      	ldr	r3, [r3, #12]
 8017c16:	68db      	ldr	r3, [r3, #12]
 8017c18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	3318      	adds	r3, #24
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7fe fed2 	bl	80169c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	3304      	adds	r3, #4
 8017c28:	4618      	mov	r0, r3
 8017c2a:	f7fe fecd 	bl	80169c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c32:	2201      	movs	r2, #1
 8017c34:	409a      	lsls	r2, r3
 8017c36:	4b2c      	ldr	r3, [pc, #176]	; (8017ce8 <xTaskResumeAll+0x124>)
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	4313      	orrs	r3, r2
 8017c3c:	4a2a      	ldr	r2, [pc, #168]	; (8017ce8 <xTaskResumeAll+0x124>)
 8017c3e:	6013      	str	r3, [r2, #0]
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c44:	4613      	mov	r3, r2
 8017c46:	009b      	lsls	r3, r3, #2
 8017c48:	4413      	add	r3, r2
 8017c4a:	009b      	lsls	r3, r3, #2
 8017c4c:	4a27      	ldr	r2, [pc, #156]	; (8017cec <xTaskResumeAll+0x128>)
 8017c4e:	441a      	add	r2, r3
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	3304      	adds	r3, #4
 8017c54:	4619      	mov	r1, r3
 8017c56:	4610      	mov	r0, r2
 8017c58:	f7fe fe59 	bl	801690e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c60:	4b23      	ldr	r3, [pc, #140]	; (8017cf0 <xTaskResumeAll+0x12c>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c66:	429a      	cmp	r2, r3
 8017c68:	d302      	bcc.n	8017c70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017c6a:	4b22      	ldr	r3, [pc, #136]	; (8017cf4 <xTaskResumeAll+0x130>)
 8017c6c:	2201      	movs	r2, #1
 8017c6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017c70:	4b1c      	ldr	r3, [pc, #112]	; (8017ce4 <xTaskResumeAll+0x120>)
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d1cc      	bne.n	8017c12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d001      	beq.n	8017c82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017c7e:	f000 fb91 	bl	80183a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8017c82:	4b1d      	ldr	r3, [pc, #116]	; (8017cf8 <xTaskResumeAll+0x134>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d010      	beq.n	8017cb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017c8e:	f000 f859 	bl	8017d44 <xTaskIncrementTick>
 8017c92:	4603      	mov	r3, r0
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d002      	beq.n	8017c9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017c98:	4b16      	ldr	r3, [pc, #88]	; (8017cf4 <xTaskResumeAll+0x130>)
 8017c9a:	2201      	movs	r2, #1
 8017c9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	3b01      	subs	r3, #1
 8017ca2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d1f1      	bne.n	8017c8e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8017caa:	4b13      	ldr	r3, [pc, #76]	; (8017cf8 <xTaskResumeAll+0x134>)
 8017cac:	2200      	movs	r2, #0
 8017cae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017cb0:	4b10      	ldr	r3, [pc, #64]	; (8017cf4 <xTaskResumeAll+0x130>)
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d009      	beq.n	8017ccc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017cb8:	2301      	movs	r3, #1
 8017cba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017cbc:	4b0f      	ldr	r3, [pc, #60]	; (8017cfc <xTaskResumeAll+0x138>)
 8017cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cc2:	601a      	str	r2, [r3, #0]
 8017cc4:	f3bf 8f4f 	dsb	sy
 8017cc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017ccc:	f000 ff16 	bl	8018afc <vPortExitCritical>

	return xAlreadyYielded;
 8017cd0:	68bb      	ldr	r3, [r7, #8]
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	3710      	adds	r7, #16
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop
 8017cdc:	2000026c 	.word	0x2000026c
 8017ce0:	20000244 	.word	0x20000244
 8017ce4:	20000204 	.word	0x20000204
 8017ce8:	2000024c 	.word	0x2000024c
 8017cec:	20000148 	.word	0x20000148
 8017cf0:	20000144 	.word	0x20000144
 8017cf4:	20000258 	.word	0x20000258
 8017cf8:	20000254 	.word	0x20000254
 8017cfc:	e000ed04 	.word	0xe000ed04

08017d00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017d00:	b480      	push	{r7}
 8017d02:	b083      	sub	sp, #12
 8017d04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017d06:	4b05      	ldr	r3, [pc, #20]	; (8017d1c <xTaskGetTickCount+0x1c>)
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017d0c:	687b      	ldr	r3, [r7, #4]
}
 8017d0e:	4618      	mov	r0, r3
 8017d10:	370c      	adds	r7, #12
 8017d12:	46bd      	mov	sp, r7
 8017d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d18:	4770      	bx	lr
 8017d1a:	bf00      	nop
 8017d1c:	20000248 	.word	0x20000248

08017d20 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b082      	sub	sp, #8
 8017d24:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017d26:	f000 ff97 	bl	8018c58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8017d2e:	4b04      	ldr	r3, [pc, #16]	; (8017d40 <xTaskGetTickCountFromISR+0x20>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017d34:	683b      	ldr	r3, [r7, #0]
}
 8017d36:	4618      	mov	r0, r3
 8017d38:	3708      	adds	r7, #8
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}
 8017d3e:	bf00      	nop
 8017d40:	20000248 	.word	0x20000248

08017d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b086      	sub	sp, #24
 8017d48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d4e:	4b51      	ldr	r3, [pc, #324]	; (8017e94 <xTaskIncrementTick+0x150>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	f040 808e 	bne.w	8017e74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017d58:	4b4f      	ldr	r3, [pc, #316]	; (8017e98 <xTaskIncrementTick+0x154>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	3301      	adds	r3, #1
 8017d5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017d60:	4a4d      	ldr	r2, [pc, #308]	; (8017e98 <xTaskIncrementTick+0x154>)
 8017d62:	693b      	ldr	r3, [r7, #16]
 8017d64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017d66:	693b      	ldr	r3, [r7, #16]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d121      	bne.n	8017db0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8017d6c:	4b4b      	ldr	r3, [pc, #300]	; (8017e9c <xTaskIncrementTick+0x158>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d00b      	beq.n	8017d8e <xTaskIncrementTick+0x4a>
 8017d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d7a:	b672      	cpsid	i
 8017d7c:	f383 8811 	msr	BASEPRI, r3
 8017d80:	f3bf 8f6f 	isb	sy
 8017d84:	f3bf 8f4f 	dsb	sy
 8017d88:	b662      	cpsie	i
 8017d8a:	603b      	str	r3, [r7, #0]
 8017d8c:	e7fe      	b.n	8017d8c <xTaskIncrementTick+0x48>
 8017d8e:	4b43      	ldr	r3, [pc, #268]	; (8017e9c <xTaskIncrementTick+0x158>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	60fb      	str	r3, [r7, #12]
 8017d94:	4b42      	ldr	r3, [pc, #264]	; (8017ea0 <xTaskIncrementTick+0x15c>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	4a40      	ldr	r2, [pc, #256]	; (8017e9c <xTaskIncrementTick+0x158>)
 8017d9a:	6013      	str	r3, [r2, #0]
 8017d9c:	4a40      	ldr	r2, [pc, #256]	; (8017ea0 <xTaskIncrementTick+0x15c>)
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	6013      	str	r3, [r2, #0]
 8017da2:	4b40      	ldr	r3, [pc, #256]	; (8017ea4 <xTaskIncrementTick+0x160>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	3301      	adds	r3, #1
 8017da8:	4a3e      	ldr	r2, [pc, #248]	; (8017ea4 <xTaskIncrementTick+0x160>)
 8017daa:	6013      	str	r3, [r2, #0]
 8017dac:	f000 fafa 	bl	80183a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017db0:	4b3d      	ldr	r3, [pc, #244]	; (8017ea8 <xTaskIncrementTick+0x164>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	693a      	ldr	r2, [r7, #16]
 8017db6:	429a      	cmp	r2, r3
 8017db8:	d34d      	bcc.n	8017e56 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017dba:	4b38      	ldr	r3, [pc, #224]	; (8017e9c <xTaskIncrementTick+0x158>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d101      	bne.n	8017dc8 <xTaskIncrementTick+0x84>
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	e000      	b.n	8017dca <xTaskIncrementTick+0x86>
 8017dc8:	2300      	movs	r3, #0
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d004      	beq.n	8017dd8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017dce:	4b36      	ldr	r3, [pc, #216]	; (8017ea8 <xTaskIncrementTick+0x164>)
 8017dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8017dd4:	601a      	str	r2, [r3, #0]
					break;
 8017dd6:	e03e      	b.n	8017e56 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8017dd8:	4b30      	ldr	r3, [pc, #192]	; (8017e9c <xTaskIncrementTick+0x158>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	68db      	ldr	r3, [r3, #12]
 8017dde:	68db      	ldr	r3, [r3, #12]
 8017de0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	685b      	ldr	r3, [r3, #4]
 8017de6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017de8:	693a      	ldr	r2, [r7, #16]
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d203      	bcs.n	8017df8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017df0:	4a2d      	ldr	r2, [pc, #180]	; (8017ea8 <xTaskIncrementTick+0x164>)
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	6013      	str	r3, [r2, #0]
						break;
 8017df6:	e02e      	b.n	8017e56 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	3304      	adds	r3, #4
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f7fe fde3 	bl	80169c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d004      	beq.n	8017e14 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	3318      	adds	r3, #24
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f7fe fdda 	bl	80169c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e18:	2201      	movs	r2, #1
 8017e1a:	409a      	lsls	r2, r3
 8017e1c:	4b23      	ldr	r3, [pc, #140]	; (8017eac <xTaskIncrementTick+0x168>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	4313      	orrs	r3, r2
 8017e22:	4a22      	ldr	r2, [pc, #136]	; (8017eac <xTaskIncrementTick+0x168>)
 8017e24:	6013      	str	r3, [r2, #0]
 8017e26:	68bb      	ldr	r3, [r7, #8]
 8017e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	009b      	lsls	r3, r3, #2
 8017e2e:	4413      	add	r3, r2
 8017e30:	009b      	lsls	r3, r3, #2
 8017e32:	4a1f      	ldr	r2, [pc, #124]	; (8017eb0 <xTaskIncrementTick+0x16c>)
 8017e34:	441a      	add	r2, r3
 8017e36:	68bb      	ldr	r3, [r7, #8]
 8017e38:	3304      	adds	r3, #4
 8017e3a:	4619      	mov	r1, r3
 8017e3c:	4610      	mov	r0, r2
 8017e3e:	f7fe fd66 	bl	801690e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017e42:	68bb      	ldr	r3, [r7, #8]
 8017e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e46:	4b1b      	ldr	r3, [pc, #108]	; (8017eb4 <xTaskIncrementTick+0x170>)
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	d3b4      	bcc.n	8017dba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8017e50:	2301      	movs	r3, #1
 8017e52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017e54:	e7b1      	b.n	8017dba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017e56:	4b17      	ldr	r3, [pc, #92]	; (8017eb4 <xTaskIncrementTick+0x170>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e5c:	4914      	ldr	r1, [pc, #80]	; (8017eb0 <xTaskIncrementTick+0x16c>)
 8017e5e:	4613      	mov	r3, r2
 8017e60:	009b      	lsls	r3, r3, #2
 8017e62:	4413      	add	r3, r2
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	440b      	add	r3, r1
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	2b01      	cmp	r3, #1
 8017e6c:	d907      	bls.n	8017e7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8017e6e:	2301      	movs	r3, #1
 8017e70:	617b      	str	r3, [r7, #20]
 8017e72:	e004      	b.n	8017e7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8017e74:	4b10      	ldr	r3, [pc, #64]	; (8017eb8 <xTaskIncrementTick+0x174>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	3301      	adds	r3, #1
 8017e7a:	4a0f      	ldr	r2, [pc, #60]	; (8017eb8 <xTaskIncrementTick+0x174>)
 8017e7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8017e7e:	4b0f      	ldr	r3, [pc, #60]	; (8017ebc <xTaskIncrementTick+0x178>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d001      	beq.n	8017e8a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8017e86:	2301      	movs	r3, #1
 8017e88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8017e8a:	697b      	ldr	r3, [r7, #20]
}
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	3718      	adds	r7, #24
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}
 8017e94:	2000026c 	.word	0x2000026c
 8017e98:	20000248 	.word	0x20000248
 8017e9c:	200001fc 	.word	0x200001fc
 8017ea0:	20000200 	.word	0x20000200
 8017ea4:	2000025c 	.word	0x2000025c
 8017ea8:	20000264 	.word	0x20000264
 8017eac:	2000024c 	.word	0x2000024c
 8017eb0:	20000148 	.word	0x20000148
 8017eb4:	20000144 	.word	0x20000144
 8017eb8:	20000254 	.word	0x20000254
 8017ebc:	20000258 	.word	0x20000258

08017ec0 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b084      	sub	sp, #16
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d103      	bne.n	8017ed8 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8017ed0:	4b08      	ldr	r3, [pc, #32]	; (8017ef4 <vTaskSetApplicationTaskTag+0x34>)
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	60fb      	str	r3, [r7, #12]
 8017ed6:	e001      	b.n	8017edc <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8017edc:	f000 fddc 	bl	8018a98 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	683a      	ldr	r2, [r7, #0]
 8017ee4:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8017ee6:	f000 fe09 	bl	8018afc <vPortExitCritical>
	}
 8017eea:	bf00      	nop
 8017eec:	3710      	adds	r7, #16
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}
 8017ef2:	bf00      	nop
 8017ef4:	20000144 	.word	0x20000144

08017ef8 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b084      	sub	sp, #16
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d103      	bne.n	8017f10 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8017f08:	4b0b      	ldr	r3, [pc, #44]	; (8017f38 <xTaskCallApplicationTaskHook+0x40>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	60fb      	str	r3, [r7, #12]
 8017f0e:	e001      	b.n	8017f14 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d005      	beq.n	8017f28 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f20:	6838      	ldr	r0, [r7, #0]
 8017f22:	4798      	blx	r3
 8017f24:	60b8      	str	r0, [r7, #8]
 8017f26:	e001      	b.n	8017f2c <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8017f28:	2300      	movs	r3, #0
 8017f2a:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8017f2c:	68bb      	ldr	r3, [r7, #8]
	}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	3710      	adds	r7, #16
 8017f32:	46bd      	mov	sp, r7
 8017f34:	bd80      	pop	{r7, pc}
 8017f36:	bf00      	nop
 8017f38:	20000144 	.word	0x20000144

08017f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b088      	sub	sp, #32
 8017f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017f42:	4b40      	ldr	r3, [pc, #256]	; (8018044 <vTaskSwitchContext+0x108>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d003      	beq.n	8017f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017f4a:	4b3f      	ldr	r3, [pc, #252]	; (8018048 <vTaskSwitchContext+0x10c>)
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017f50:	e073      	b.n	801803a <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 8017f52:	4b3d      	ldr	r3, [pc, #244]	; (8018048 <vTaskSwitchContext+0x10c>)
 8017f54:	2200      	movs	r2, #0
 8017f56:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8017f58:	4b3c      	ldr	r3, [pc, #240]	; (801804c <vTaskSwitchContext+0x110>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	2101      	movs	r1, #1
 8017f5e:	4618      	mov	r0, r3
 8017f60:	f7ff ffca 	bl	8017ef8 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 8017f64:	4b39      	ldr	r3, [pc, #228]	; (801804c <vTaskSwitchContext+0x110>)
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f6a:	61fb      	str	r3, [r7, #28]
 8017f6c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8017f70:	61bb      	str	r3, [r7, #24]
 8017f72:	69fb      	ldr	r3, [r7, #28]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	69ba      	ldr	r2, [r7, #24]
 8017f78:	429a      	cmp	r2, r3
 8017f7a:	d111      	bne.n	8017fa0 <vTaskSwitchContext+0x64>
 8017f7c:	69fb      	ldr	r3, [r7, #28]
 8017f7e:	3304      	adds	r3, #4
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	69ba      	ldr	r2, [r7, #24]
 8017f84:	429a      	cmp	r2, r3
 8017f86:	d10b      	bne.n	8017fa0 <vTaskSwitchContext+0x64>
 8017f88:	69fb      	ldr	r3, [r7, #28]
 8017f8a:	3308      	adds	r3, #8
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	69ba      	ldr	r2, [r7, #24]
 8017f90:	429a      	cmp	r2, r3
 8017f92:	d105      	bne.n	8017fa0 <vTaskSwitchContext+0x64>
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	330c      	adds	r3, #12
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	69ba      	ldr	r2, [r7, #24]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d008      	beq.n	8017fb2 <vTaskSwitchContext+0x76>
 8017fa0:	4b2a      	ldr	r3, [pc, #168]	; (801804c <vTaskSwitchContext+0x110>)
 8017fa2:	681a      	ldr	r2, [r3, #0]
 8017fa4:	4b29      	ldr	r3, [pc, #164]	; (801804c <vTaskSwitchContext+0x110>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	3334      	adds	r3, #52	; 0x34
 8017faa:	4619      	mov	r1, r3
 8017fac:	4610      	mov	r0, r2
 8017fae:	f7fc f885 	bl	80140bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8017fb2:	4b27      	ldr	r3, [pc, #156]	; (8018050 <vTaskSwitchContext+0x114>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	fab3 f383 	clz	r3, r3
 8017fbe:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8017fc0:	7afb      	ldrb	r3, [r7, #11]
 8017fc2:	f1c3 031f 	rsb	r3, r3, #31
 8017fc6:	617b      	str	r3, [r7, #20]
 8017fc8:	4922      	ldr	r1, [pc, #136]	; (8018054 <vTaskSwitchContext+0x118>)
 8017fca:	697a      	ldr	r2, [r7, #20]
 8017fcc:	4613      	mov	r3, r2
 8017fce:	009b      	lsls	r3, r3, #2
 8017fd0:	4413      	add	r3, r2
 8017fd2:	009b      	lsls	r3, r3, #2
 8017fd4:	440b      	add	r3, r1
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d10b      	bne.n	8017ff4 <vTaskSwitchContext+0xb8>
	__asm volatile
 8017fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fe0:	b672      	cpsid	i
 8017fe2:	f383 8811 	msr	BASEPRI, r3
 8017fe6:	f3bf 8f6f 	isb	sy
 8017fea:	f3bf 8f4f 	dsb	sy
 8017fee:	b662      	cpsie	i
 8017ff0:	607b      	str	r3, [r7, #4]
 8017ff2:	e7fe      	b.n	8017ff2 <vTaskSwitchContext+0xb6>
 8017ff4:	697a      	ldr	r2, [r7, #20]
 8017ff6:	4613      	mov	r3, r2
 8017ff8:	009b      	lsls	r3, r3, #2
 8017ffa:	4413      	add	r3, r2
 8017ffc:	009b      	lsls	r3, r3, #2
 8017ffe:	4a15      	ldr	r2, [pc, #84]	; (8018054 <vTaskSwitchContext+0x118>)
 8018000:	4413      	add	r3, r2
 8018002:	613b      	str	r3, [r7, #16]
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	685b      	ldr	r3, [r3, #4]
 8018008:	685a      	ldr	r2, [r3, #4]
 801800a:	693b      	ldr	r3, [r7, #16]
 801800c:	605a      	str	r2, [r3, #4]
 801800e:	693b      	ldr	r3, [r7, #16]
 8018010:	685a      	ldr	r2, [r3, #4]
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	3308      	adds	r3, #8
 8018016:	429a      	cmp	r2, r3
 8018018:	d104      	bne.n	8018024 <vTaskSwitchContext+0xe8>
 801801a:	693b      	ldr	r3, [r7, #16]
 801801c:	685b      	ldr	r3, [r3, #4]
 801801e:	685a      	ldr	r2, [r3, #4]
 8018020:	693b      	ldr	r3, [r7, #16]
 8018022:	605a      	str	r2, [r3, #4]
 8018024:	693b      	ldr	r3, [r7, #16]
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	68db      	ldr	r3, [r3, #12]
 801802a:	4a08      	ldr	r2, [pc, #32]	; (801804c <vTaskSwitchContext+0x110>)
 801802c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801802e:	4b07      	ldr	r3, [pc, #28]	; (801804c <vTaskSwitchContext+0x110>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	2100      	movs	r1, #0
 8018034:	4618      	mov	r0, r3
 8018036:	f7ff ff5f 	bl	8017ef8 <xTaskCallApplicationTaskHook>
}
 801803a:	bf00      	nop
 801803c:	3720      	adds	r7, #32
 801803e:	46bd      	mov	sp, r7
 8018040:	bd80      	pop	{r7, pc}
 8018042:	bf00      	nop
 8018044:	2000026c 	.word	0x2000026c
 8018048:	20000258 	.word	0x20000258
 801804c:	20000144 	.word	0x20000144
 8018050:	2000024c 	.word	0x2000024c
 8018054:	20000148 	.word	0x20000148

08018058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b084      	sub	sp, #16
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
 8018060:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d10b      	bne.n	8018080 <vTaskPlaceOnEventList+0x28>
 8018068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801806c:	b672      	cpsid	i
 801806e:	f383 8811 	msr	BASEPRI, r3
 8018072:	f3bf 8f6f 	isb	sy
 8018076:	f3bf 8f4f 	dsb	sy
 801807a:	b662      	cpsie	i
 801807c:	60fb      	str	r3, [r7, #12]
 801807e:	e7fe      	b.n	801807e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018080:	4b07      	ldr	r3, [pc, #28]	; (80180a0 <vTaskPlaceOnEventList+0x48>)
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	3318      	adds	r3, #24
 8018086:	4619      	mov	r1, r3
 8018088:	6878      	ldr	r0, [r7, #4]
 801808a:	f7fe fc64 	bl	8016956 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801808e:	2101      	movs	r1, #1
 8018090:	6838      	ldr	r0, [r7, #0]
 8018092:	f000 fb8f 	bl	80187b4 <prvAddCurrentTaskToDelayedList>
}
 8018096:	bf00      	nop
 8018098:	3710      	adds	r7, #16
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}
 801809e:	bf00      	nop
 80180a0:	20000144 	.word	0x20000144

080180a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b086      	sub	sp, #24
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	68db      	ldr	r3, [r3, #12]
 80180b0:	68db      	ldr	r3, [r3, #12]
 80180b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80180b4:	693b      	ldr	r3, [r7, #16]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d10b      	bne.n	80180d2 <xTaskRemoveFromEventList+0x2e>
 80180ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180be:	b672      	cpsid	i
 80180c0:	f383 8811 	msr	BASEPRI, r3
 80180c4:	f3bf 8f6f 	isb	sy
 80180c8:	f3bf 8f4f 	dsb	sy
 80180cc:	b662      	cpsie	i
 80180ce:	60fb      	str	r3, [r7, #12]
 80180d0:	e7fe      	b.n	80180d0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80180d2:	693b      	ldr	r3, [r7, #16]
 80180d4:	3318      	adds	r3, #24
 80180d6:	4618      	mov	r0, r3
 80180d8:	f7fe fc76 	bl	80169c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80180dc:	4b1d      	ldr	r3, [pc, #116]	; (8018154 <xTaskRemoveFromEventList+0xb0>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d11c      	bne.n	801811e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80180e4:	693b      	ldr	r3, [r7, #16]
 80180e6:	3304      	adds	r3, #4
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7fe fc6d 	bl	80169c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80180ee:	693b      	ldr	r3, [r7, #16]
 80180f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f2:	2201      	movs	r2, #1
 80180f4:	409a      	lsls	r2, r3
 80180f6:	4b18      	ldr	r3, [pc, #96]	; (8018158 <xTaskRemoveFromEventList+0xb4>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	4313      	orrs	r3, r2
 80180fc:	4a16      	ldr	r2, [pc, #88]	; (8018158 <xTaskRemoveFromEventList+0xb4>)
 80180fe:	6013      	str	r3, [r2, #0]
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018104:	4613      	mov	r3, r2
 8018106:	009b      	lsls	r3, r3, #2
 8018108:	4413      	add	r3, r2
 801810a:	009b      	lsls	r3, r3, #2
 801810c:	4a13      	ldr	r2, [pc, #76]	; (801815c <xTaskRemoveFromEventList+0xb8>)
 801810e:	441a      	add	r2, r3
 8018110:	693b      	ldr	r3, [r7, #16]
 8018112:	3304      	adds	r3, #4
 8018114:	4619      	mov	r1, r3
 8018116:	4610      	mov	r0, r2
 8018118:	f7fe fbf9 	bl	801690e <vListInsertEnd>
 801811c:	e005      	b.n	801812a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801811e:	693b      	ldr	r3, [r7, #16]
 8018120:	3318      	adds	r3, #24
 8018122:	4619      	mov	r1, r3
 8018124:	480e      	ldr	r0, [pc, #56]	; (8018160 <xTaskRemoveFromEventList+0xbc>)
 8018126:	f7fe fbf2 	bl	801690e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801812a:	693b      	ldr	r3, [r7, #16]
 801812c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801812e:	4b0d      	ldr	r3, [pc, #52]	; (8018164 <xTaskRemoveFromEventList+0xc0>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018134:	429a      	cmp	r2, r3
 8018136:	d905      	bls.n	8018144 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018138:	2301      	movs	r3, #1
 801813a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801813c:	4b0a      	ldr	r3, [pc, #40]	; (8018168 <xTaskRemoveFromEventList+0xc4>)
 801813e:	2201      	movs	r2, #1
 8018140:	601a      	str	r2, [r3, #0]
 8018142:	e001      	b.n	8018148 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018144:	2300      	movs	r3, #0
 8018146:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8018148:	697b      	ldr	r3, [r7, #20]
}
 801814a:	4618      	mov	r0, r3
 801814c:	3718      	adds	r7, #24
 801814e:	46bd      	mov	sp, r7
 8018150:	bd80      	pop	{r7, pc}
 8018152:	bf00      	nop
 8018154:	2000026c 	.word	0x2000026c
 8018158:	2000024c 	.word	0x2000024c
 801815c:	20000148 	.word	0x20000148
 8018160:	20000204 	.word	0x20000204
 8018164:	20000144 	.word	0x20000144
 8018168:	20000258 	.word	0x20000258

0801816c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801816c:	b480      	push	{r7}
 801816e:	b083      	sub	sp, #12
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018174:	4b06      	ldr	r3, [pc, #24]	; (8018190 <vTaskInternalSetTimeOutState+0x24>)
 8018176:	681a      	ldr	r2, [r3, #0]
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801817c:	4b05      	ldr	r3, [pc, #20]	; (8018194 <vTaskInternalSetTimeOutState+0x28>)
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	605a      	str	r2, [r3, #4]
}
 8018184:	bf00      	nop
 8018186:	370c      	adds	r7, #12
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr
 8018190:	2000025c 	.word	0x2000025c
 8018194:	20000248 	.word	0x20000248

08018198 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b088      	sub	sp, #32
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
 80181a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d10b      	bne.n	80181c0 <xTaskCheckForTimeOut+0x28>
 80181a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ac:	b672      	cpsid	i
 80181ae:	f383 8811 	msr	BASEPRI, r3
 80181b2:	f3bf 8f6f 	isb	sy
 80181b6:	f3bf 8f4f 	dsb	sy
 80181ba:	b662      	cpsie	i
 80181bc:	613b      	str	r3, [r7, #16]
 80181be:	e7fe      	b.n	80181be <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80181c0:	683b      	ldr	r3, [r7, #0]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d10b      	bne.n	80181de <xTaskCheckForTimeOut+0x46>
 80181c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ca:	b672      	cpsid	i
 80181cc:	f383 8811 	msr	BASEPRI, r3
 80181d0:	f3bf 8f6f 	isb	sy
 80181d4:	f3bf 8f4f 	dsb	sy
 80181d8:	b662      	cpsie	i
 80181da:	60fb      	str	r3, [r7, #12]
 80181dc:	e7fe      	b.n	80181dc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80181de:	f000 fc5b 	bl	8018a98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80181e2:	4b1d      	ldr	r3, [pc, #116]	; (8018258 <xTaskCheckForTimeOut+0xc0>)
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	685b      	ldr	r3, [r3, #4]
 80181ec:	69ba      	ldr	r2, [r7, #24]
 80181ee:	1ad3      	subs	r3, r2, r3
 80181f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80181f2:	683b      	ldr	r3, [r7, #0]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181fa:	d102      	bne.n	8018202 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80181fc:	2300      	movs	r3, #0
 80181fe:	61fb      	str	r3, [r7, #28]
 8018200:	e023      	b.n	801824a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681a      	ldr	r2, [r3, #0]
 8018206:	4b15      	ldr	r3, [pc, #84]	; (801825c <xTaskCheckForTimeOut+0xc4>)
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	429a      	cmp	r2, r3
 801820c:	d007      	beq.n	801821e <xTaskCheckForTimeOut+0x86>
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	685b      	ldr	r3, [r3, #4]
 8018212:	69ba      	ldr	r2, [r7, #24]
 8018214:	429a      	cmp	r2, r3
 8018216:	d302      	bcc.n	801821e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018218:	2301      	movs	r3, #1
 801821a:	61fb      	str	r3, [r7, #28]
 801821c:	e015      	b.n	801824a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801821e:	683b      	ldr	r3, [r7, #0]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	697a      	ldr	r2, [r7, #20]
 8018224:	429a      	cmp	r2, r3
 8018226:	d20b      	bcs.n	8018240 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018228:	683b      	ldr	r3, [r7, #0]
 801822a:	681a      	ldr	r2, [r3, #0]
 801822c:	697b      	ldr	r3, [r7, #20]
 801822e:	1ad2      	subs	r2, r2, r3
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018234:	6878      	ldr	r0, [r7, #4]
 8018236:	f7ff ff99 	bl	801816c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801823a:	2300      	movs	r3, #0
 801823c:	61fb      	str	r3, [r7, #28]
 801823e:	e004      	b.n	801824a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8018240:	683b      	ldr	r3, [r7, #0]
 8018242:	2200      	movs	r2, #0
 8018244:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018246:	2301      	movs	r3, #1
 8018248:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801824a:	f000 fc57 	bl	8018afc <vPortExitCritical>

	return xReturn;
 801824e:	69fb      	ldr	r3, [r7, #28]
}
 8018250:	4618      	mov	r0, r3
 8018252:	3720      	adds	r7, #32
 8018254:	46bd      	mov	sp, r7
 8018256:	bd80      	pop	{r7, pc}
 8018258:	20000248 	.word	0x20000248
 801825c:	2000025c 	.word	0x2000025c

08018260 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018260:	b480      	push	{r7}
 8018262:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018264:	4b03      	ldr	r3, [pc, #12]	; (8018274 <vTaskMissedYield+0x14>)
 8018266:	2201      	movs	r2, #1
 8018268:	601a      	str	r2, [r3, #0]
}
 801826a:	bf00      	nop
 801826c:	46bd      	mov	sp, r7
 801826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018272:	4770      	bx	lr
 8018274:	20000258 	.word	0x20000258

08018278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b082      	sub	sp, #8
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018280:	f000 f854 	bl	801832c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018284:	4b07      	ldr	r3, [pc, #28]	; (80182a4 <prvIdleTask+0x2c>)
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	2b01      	cmp	r3, #1
 801828a:	d907      	bls.n	801829c <prvIdleTask+0x24>
			{
				taskYIELD();
 801828c:	4b06      	ldr	r3, [pc, #24]	; (80182a8 <prvIdleTask+0x30>)
 801828e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018292:	601a      	str	r2, [r3, #0]
 8018294:	f3bf 8f4f 	dsb	sy
 8018298:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801829c:	f7fb ff10 	bl	80140c0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80182a0:	e7ee      	b.n	8018280 <prvIdleTask+0x8>
 80182a2:	bf00      	nop
 80182a4:	20000148 	.word	0x20000148
 80182a8:	e000ed04 	.word	0xe000ed04

080182ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b082      	sub	sp, #8
 80182b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80182b2:	2300      	movs	r3, #0
 80182b4:	607b      	str	r3, [r7, #4]
 80182b6:	e00c      	b.n	80182d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80182b8:	687a      	ldr	r2, [r7, #4]
 80182ba:	4613      	mov	r3, r2
 80182bc:	009b      	lsls	r3, r3, #2
 80182be:	4413      	add	r3, r2
 80182c0:	009b      	lsls	r3, r3, #2
 80182c2:	4a12      	ldr	r2, [pc, #72]	; (801830c <prvInitialiseTaskLists+0x60>)
 80182c4:	4413      	add	r3, r2
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7fe faf4 	bl	80168b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	3301      	adds	r3, #1
 80182d0:	607b      	str	r3, [r7, #4]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	2b06      	cmp	r3, #6
 80182d6:	d9ef      	bls.n	80182b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80182d8:	480d      	ldr	r0, [pc, #52]	; (8018310 <prvInitialiseTaskLists+0x64>)
 80182da:	f7fe faeb 	bl	80168b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80182de:	480d      	ldr	r0, [pc, #52]	; (8018314 <prvInitialiseTaskLists+0x68>)
 80182e0:	f7fe fae8 	bl	80168b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80182e4:	480c      	ldr	r0, [pc, #48]	; (8018318 <prvInitialiseTaskLists+0x6c>)
 80182e6:	f7fe fae5 	bl	80168b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80182ea:	480c      	ldr	r0, [pc, #48]	; (801831c <prvInitialiseTaskLists+0x70>)
 80182ec:	f7fe fae2 	bl	80168b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80182f0:	480b      	ldr	r0, [pc, #44]	; (8018320 <prvInitialiseTaskLists+0x74>)
 80182f2:	f7fe fadf 	bl	80168b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80182f6:	4b0b      	ldr	r3, [pc, #44]	; (8018324 <prvInitialiseTaskLists+0x78>)
 80182f8:	4a05      	ldr	r2, [pc, #20]	; (8018310 <prvInitialiseTaskLists+0x64>)
 80182fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80182fc:	4b0a      	ldr	r3, [pc, #40]	; (8018328 <prvInitialiseTaskLists+0x7c>)
 80182fe:	4a05      	ldr	r2, [pc, #20]	; (8018314 <prvInitialiseTaskLists+0x68>)
 8018300:	601a      	str	r2, [r3, #0]
}
 8018302:	bf00      	nop
 8018304:	3708      	adds	r7, #8
 8018306:	46bd      	mov	sp, r7
 8018308:	bd80      	pop	{r7, pc}
 801830a:	bf00      	nop
 801830c:	20000148 	.word	0x20000148
 8018310:	200001d4 	.word	0x200001d4
 8018314:	200001e8 	.word	0x200001e8
 8018318:	20000204 	.word	0x20000204
 801831c:	20000218 	.word	0x20000218
 8018320:	20000230 	.word	0x20000230
 8018324:	200001fc 	.word	0x200001fc
 8018328:	20000200 	.word	0x20000200

0801832c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b082      	sub	sp, #8
 8018330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018332:	e019      	b.n	8018368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018334:	f000 fbb0 	bl	8018a98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8018338:	4b0f      	ldr	r3, [pc, #60]	; (8018378 <prvCheckTasksWaitingTermination+0x4c>)
 801833a:	68db      	ldr	r3, [r3, #12]
 801833c:	68db      	ldr	r3, [r3, #12]
 801833e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	3304      	adds	r3, #4
 8018344:	4618      	mov	r0, r3
 8018346:	f7fe fb3f 	bl	80169c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801834a:	4b0c      	ldr	r3, [pc, #48]	; (801837c <prvCheckTasksWaitingTermination+0x50>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	3b01      	subs	r3, #1
 8018350:	4a0a      	ldr	r2, [pc, #40]	; (801837c <prvCheckTasksWaitingTermination+0x50>)
 8018352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018354:	4b0a      	ldr	r3, [pc, #40]	; (8018380 <prvCheckTasksWaitingTermination+0x54>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	3b01      	subs	r3, #1
 801835a:	4a09      	ldr	r2, [pc, #36]	; (8018380 <prvCheckTasksWaitingTermination+0x54>)
 801835c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801835e:	f000 fbcd 	bl	8018afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f000 f80e 	bl	8018384 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018368:	4b05      	ldr	r3, [pc, #20]	; (8018380 <prvCheckTasksWaitingTermination+0x54>)
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d1e1      	bne.n	8018334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018370:	bf00      	nop
 8018372:	3708      	adds	r7, #8
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}
 8018378:	20000218 	.word	0x20000218
 801837c:	20000244 	.word	0x20000244
 8018380:	2000022c 	.word	0x2000022c

08018384 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018384:	b580      	push	{r7, lr}
 8018386:	b082      	sub	sp, #8
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018390:	4618      	mov	r0, r3
 8018392:	f000 fd6f 	bl	8018e74 <vPortFree>
			vPortFree( pxTCB );
 8018396:	6878      	ldr	r0, [r7, #4]
 8018398:	f000 fd6c 	bl	8018e74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801839c:	bf00      	nop
 801839e:	3708      	adds	r7, #8
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bd80      	pop	{r7, pc}

080183a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80183a4:	b480      	push	{r7}
 80183a6:	b083      	sub	sp, #12
 80183a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80183aa:	4b0f      	ldr	r3, [pc, #60]	; (80183e8 <prvResetNextTaskUnblockTime+0x44>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d101      	bne.n	80183b8 <prvResetNextTaskUnblockTime+0x14>
 80183b4:	2301      	movs	r3, #1
 80183b6:	e000      	b.n	80183ba <prvResetNextTaskUnblockTime+0x16>
 80183b8:	2300      	movs	r3, #0
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d004      	beq.n	80183c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80183be:	4b0b      	ldr	r3, [pc, #44]	; (80183ec <prvResetNextTaskUnblockTime+0x48>)
 80183c0:	f04f 32ff 	mov.w	r2, #4294967295
 80183c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80183c6:	e008      	b.n	80183da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80183c8:	4b07      	ldr	r3, [pc, #28]	; (80183e8 <prvResetNextTaskUnblockTime+0x44>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	68db      	ldr	r3, [r3, #12]
 80183ce:	68db      	ldr	r3, [r3, #12]
 80183d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	685b      	ldr	r3, [r3, #4]
 80183d6:	4a05      	ldr	r2, [pc, #20]	; (80183ec <prvResetNextTaskUnblockTime+0x48>)
 80183d8:	6013      	str	r3, [r2, #0]
}
 80183da:	bf00      	nop
 80183dc:	370c      	adds	r7, #12
 80183de:	46bd      	mov	sp, r7
 80183e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e4:	4770      	bx	lr
 80183e6:	bf00      	nop
 80183e8:	200001fc 	.word	0x200001fc
 80183ec:	20000264 	.word	0x20000264

080183f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80183f0:	b480      	push	{r7}
 80183f2:	b083      	sub	sp, #12
 80183f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80183f6:	4b0b      	ldr	r3, [pc, #44]	; (8018424 <xTaskGetSchedulerState+0x34>)
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d102      	bne.n	8018404 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80183fe:	2301      	movs	r3, #1
 8018400:	607b      	str	r3, [r7, #4]
 8018402:	e008      	b.n	8018416 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018404:	4b08      	ldr	r3, [pc, #32]	; (8018428 <xTaskGetSchedulerState+0x38>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d102      	bne.n	8018412 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801840c:	2302      	movs	r3, #2
 801840e:	607b      	str	r3, [r7, #4]
 8018410:	e001      	b.n	8018416 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018412:	2300      	movs	r3, #0
 8018414:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018416:	687b      	ldr	r3, [r7, #4]
	}
 8018418:	4618      	mov	r0, r3
 801841a:	370c      	adds	r7, #12
 801841c:	46bd      	mov	sp, r7
 801841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018422:	4770      	bx	lr
 8018424:	20000250 	.word	0x20000250
 8018428:	2000026c 	.word	0x2000026c

0801842c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801842c:	b580      	push	{r7, lr}
 801842e:	b084      	sub	sp, #16
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018438:	2300      	movs	r3, #0
 801843a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d06e      	beq.n	8018520 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018442:	68bb      	ldr	r3, [r7, #8]
 8018444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018446:	4b39      	ldr	r3, [pc, #228]	; (801852c <xTaskPriorityInherit+0x100>)
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801844c:	429a      	cmp	r2, r3
 801844e:	d25e      	bcs.n	801850e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	699b      	ldr	r3, [r3, #24]
 8018454:	2b00      	cmp	r3, #0
 8018456:	db06      	blt.n	8018466 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018458:	4b34      	ldr	r3, [pc, #208]	; (801852c <xTaskPriorityInherit+0x100>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801845e:	f1c3 0207 	rsb	r2, r3, #7
 8018462:	68bb      	ldr	r3, [r7, #8]
 8018464:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	6959      	ldr	r1, [r3, #20]
 801846a:	68bb      	ldr	r3, [r7, #8]
 801846c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801846e:	4613      	mov	r3, r2
 8018470:	009b      	lsls	r3, r3, #2
 8018472:	4413      	add	r3, r2
 8018474:	009b      	lsls	r3, r3, #2
 8018476:	4a2e      	ldr	r2, [pc, #184]	; (8018530 <xTaskPriorityInherit+0x104>)
 8018478:	4413      	add	r3, r2
 801847a:	4299      	cmp	r1, r3
 801847c:	d101      	bne.n	8018482 <xTaskPriorityInherit+0x56>
 801847e:	2301      	movs	r3, #1
 8018480:	e000      	b.n	8018484 <xTaskPriorityInherit+0x58>
 8018482:	2300      	movs	r3, #0
 8018484:	2b00      	cmp	r3, #0
 8018486:	d03a      	beq.n	80184fe <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018488:	68bb      	ldr	r3, [r7, #8]
 801848a:	3304      	adds	r3, #4
 801848c:	4618      	mov	r0, r3
 801848e:	f7fe fa9b 	bl	80169c8 <uxListRemove>
 8018492:	4603      	mov	r3, r0
 8018494:	2b00      	cmp	r3, #0
 8018496:	d115      	bne.n	80184c4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801849c:	4924      	ldr	r1, [pc, #144]	; (8018530 <xTaskPriorityInherit+0x104>)
 801849e:	4613      	mov	r3, r2
 80184a0:	009b      	lsls	r3, r3, #2
 80184a2:	4413      	add	r3, r2
 80184a4:	009b      	lsls	r3, r3, #2
 80184a6:	440b      	add	r3, r1
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d10a      	bne.n	80184c4 <xTaskPriorityInherit+0x98>
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184b2:	2201      	movs	r2, #1
 80184b4:	fa02 f303 	lsl.w	r3, r2, r3
 80184b8:	43da      	mvns	r2, r3
 80184ba:	4b1e      	ldr	r3, [pc, #120]	; (8018534 <xTaskPriorityInherit+0x108>)
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	4013      	ands	r3, r2
 80184c0:	4a1c      	ldr	r2, [pc, #112]	; (8018534 <xTaskPriorityInherit+0x108>)
 80184c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80184c4:	4b19      	ldr	r3, [pc, #100]	; (801852c <xTaskPriorityInherit+0x100>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184d2:	2201      	movs	r2, #1
 80184d4:	409a      	lsls	r2, r3
 80184d6:	4b17      	ldr	r3, [pc, #92]	; (8018534 <xTaskPriorityInherit+0x108>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	4313      	orrs	r3, r2
 80184dc:	4a15      	ldr	r2, [pc, #84]	; (8018534 <xTaskPriorityInherit+0x108>)
 80184de:	6013      	str	r3, [r2, #0]
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184e4:	4613      	mov	r3, r2
 80184e6:	009b      	lsls	r3, r3, #2
 80184e8:	4413      	add	r3, r2
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	4a10      	ldr	r2, [pc, #64]	; (8018530 <xTaskPriorityInherit+0x104>)
 80184ee:	441a      	add	r2, r3
 80184f0:	68bb      	ldr	r3, [r7, #8]
 80184f2:	3304      	adds	r3, #4
 80184f4:	4619      	mov	r1, r3
 80184f6:	4610      	mov	r0, r2
 80184f8:	f7fe fa09 	bl	801690e <vListInsertEnd>
 80184fc:	e004      	b.n	8018508 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80184fe:	4b0b      	ldr	r3, [pc, #44]	; (801852c <xTaskPriorityInherit+0x100>)
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018504:	68bb      	ldr	r3, [r7, #8]
 8018506:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018508:	2301      	movs	r3, #1
 801850a:	60fb      	str	r3, [r7, #12]
 801850c:	e008      	b.n	8018520 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801850e:	68bb      	ldr	r3, [r7, #8]
 8018510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018512:	4b06      	ldr	r3, [pc, #24]	; (801852c <xTaskPriorityInherit+0x100>)
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018518:	429a      	cmp	r2, r3
 801851a:	d201      	bcs.n	8018520 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801851c:	2301      	movs	r3, #1
 801851e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018520:	68fb      	ldr	r3, [r7, #12]
	}
 8018522:	4618      	mov	r0, r3
 8018524:	3710      	adds	r7, #16
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}
 801852a:	bf00      	nop
 801852c:	20000144 	.word	0x20000144
 8018530:	20000148 	.word	0x20000148
 8018534:	2000024c 	.word	0x2000024c

08018538 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018538:	b580      	push	{r7, lr}
 801853a:	b086      	sub	sp, #24
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018544:	2300      	movs	r3, #0
 8018546:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d070      	beq.n	8018630 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801854e:	4b3b      	ldr	r3, [pc, #236]	; (801863c <xTaskPriorityDisinherit+0x104>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	693a      	ldr	r2, [r7, #16]
 8018554:	429a      	cmp	r2, r3
 8018556:	d00b      	beq.n	8018570 <xTaskPriorityDisinherit+0x38>
 8018558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801855c:	b672      	cpsid	i
 801855e:	f383 8811 	msr	BASEPRI, r3
 8018562:	f3bf 8f6f 	isb	sy
 8018566:	f3bf 8f4f 	dsb	sy
 801856a:	b662      	cpsie	i
 801856c:	60fb      	str	r3, [r7, #12]
 801856e:	e7fe      	b.n	801856e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8018570:	693b      	ldr	r3, [r7, #16]
 8018572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018574:	2b00      	cmp	r3, #0
 8018576:	d10b      	bne.n	8018590 <xTaskPriorityDisinherit+0x58>
 8018578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801857c:	b672      	cpsid	i
 801857e:	f383 8811 	msr	BASEPRI, r3
 8018582:	f3bf 8f6f 	isb	sy
 8018586:	f3bf 8f4f 	dsb	sy
 801858a:	b662      	cpsie	i
 801858c:	60bb      	str	r3, [r7, #8]
 801858e:	e7fe      	b.n	801858e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8018590:	693b      	ldr	r3, [r7, #16]
 8018592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018594:	1e5a      	subs	r2, r3, #1
 8018596:	693b      	ldr	r3, [r7, #16]
 8018598:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801859a:	693b      	ldr	r3, [r7, #16]
 801859c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801859e:	693b      	ldr	r3, [r7, #16]
 80185a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d044      	beq.n	8018630 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80185a6:	693b      	ldr	r3, [r7, #16]
 80185a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d140      	bne.n	8018630 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80185ae:	693b      	ldr	r3, [r7, #16]
 80185b0:	3304      	adds	r3, #4
 80185b2:	4618      	mov	r0, r3
 80185b4:	f7fe fa08 	bl	80169c8 <uxListRemove>
 80185b8:	4603      	mov	r3, r0
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d115      	bne.n	80185ea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80185be:	693b      	ldr	r3, [r7, #16]
 80185c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185c2:	491f      	ldr	r1, [pc, #124]	; (8018640 <xTaskPriorityDisinherit+0x108>)
 80185c4:	4613      	mov	r3, r2
 80185c6:	009b      	lsls	r3, r3, #2
 80185c8:	4413      	add	r3, r2
 80185ca:	009b      	lsls	r3, r3, #2
 80185cc:	440b      	add	r3, r1
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d10a      	bne.n	80185ea <xTaskPriorityDisinherit+0xb2>
 80185d4:	693b      	ldr	r3, [r7, #16]
 80185d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185d8:	2201      	movs	r2, #1
 80185da:	fa02 f303 	lsl.w	r3, r2, r3
 80185de:	43da      	mvns	r2, r3
 80185e0:	4b18      	ldr	r3, [pc, #96]	; (8018644 <xTaskPriorityDisinherit+0x10c>)
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	4013      	ands	r3, r2
 80185e6:	4a17      	ldr	r2, [pc, #92]	; (8018644 <xTaskPriorityDisinherit+0x10c>)
 80185e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80185ea:	693b      	ldr	r3, [r7, #16]
 80185ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80185ee:	693b      	ldr	r3, [r7, #16]
 80185f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185f2:	693b      	ldr	r3, [r7, #16]
 80185f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185f6:	f1c3 0207 	rsb	r2, r3, #7
 80185fa:	693b      	ldr	r3, [r7, #16]
 80185fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018602:	2201      	movs	r2, #1
 8018604:	409a      	lsls	r2, r3
 8018606:	4b0f      	ldr	r3, [pc, #60]	; (8018644 <xTaskPriorityDisinherit+0x10c>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	4313      	orrs	r3, r2
 801860c:	4a0d      	ldr	r2, [pc, #52]	; (8018644 <xTaskPriorityDisinherit+0x10c>)
 801860e:	6013      	str	r3, [r2, #0]
 8018610:	693b      	ldr	r3, [r7, #16]
 8018612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018614:	4613      	mov	r3, r2
 8018616:	009b      	lsls	r3, r3, #2
 8018618:	4413      	add	r3, r2
 801861a:	009b      	lsls	r3, r3, #2
 801861c:	4a08      	ldr	r2, [pc, #32]	; (8018640 <xTaskPriorityDisinherit+0x108>)
 801861e:	441a      	add	r2, r3
 8018620:	693b      	ldr	r3, [r7, #16]
 8018622:	3304      	adds	r3, #4
 8018624:	4619      	mov	r1, r3
 8018626:	4610      	mov	r0, r2
 8018628:	f7fe f971 	bl	801690e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801862c:	2301      	movs	r3, #1
 801862e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018630:	697b      	ldr	r3, [r7, #20]
	}
 8018632:	4618      	mov	r0, r3
 8018634:	3718      	adds	r7, #24
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop
 801863c:	20000144 	.word	0x20000144
 8018640:	20000148 	.word	0x20000148
 8018644:	2000024c 	.word	0x2000024c

08018648 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018648:	b580      	push	{r7, lr}
 801864a:	b088      	sub	sp, #32
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
 8018650:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018656:	2301      	movs	r3, #1
 8018658:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	2b00      	cmp	r3, #0
 801865e:	f000 808a 	beq.w	8018776 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018662:	69bb      	ldr	r3, [r7, #24]
 8018664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018666:	2b00      	cmp	r3, #0
 8018668:	d10b      	bne.n	8018682 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 801866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801866e:	b672      	cpsid	i
 8018670:	f383 8811 	msr	BASEPRI, r3
 8018674:	f3bf 8f6f 	isb	sy
 8018678:	f3bf 8f4f 	dsb	sy
 801867c:	b662      	cpsie	i
 801867e:	60fb      	str	r3, [r7, #12]
 8018680:	e7fe      	b.n	8018680 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018682:	69bb      	ldr	r3, [r7, #24]
 8018684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018686:	683a      	ldr	r2, [r7, #0]
 8018688:	429a      	cmp	r2, r3
 801868a:	d902      	bls.n	8018692 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801868c:	683b      	ldr	r3, [r7, #0]
 801868e:	61fb      	str	r3, [r7, #28]
 8018690:	e002      	b.n	8018698 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018692:	69bb      	ldr	r3, [r7, #24]
 8018694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018696:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018698:	69bb      	ldr	r3, [r7, #24]
 801869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801869c:	69fa      	ldr	r2, [r7, #28]
 801869e:	429a      	cmp	r2, r3
 80186a0:	d069      	beq.n	8018776 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80186a2:	69bb      	ldr	r3, [r7, #24]
 80186a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80186a6:	697a      	ldr	r2, [r7, #20]
 80186a8:	429a      	cmp	r2, r3
 80186aa:	d164      	bne.n	8018776 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80186ac:	4b34      	ldr	r3, [pc, #208]	; (8018780 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	69ba      	ldr	r2, [r7, #24]
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d10b      	bne.n	80186ce <vTaskPriorityDisinheritAfterTimeout+0x86>
 80186b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186ba:	b672      	cpsid	i
 80186bc:	f383 8811 	msr	BASEPRI, r3
 80186c0:	f3bf 8f6f 	isb	sy
 80186c4:	f3bf 8f4f 	dsb	sy
 80186c8:	b662      	cpsie	i
 80186ca:	60bb      	str	r3, [r7, #8]
 80186cc:	e7fe      	b.n	80186cc <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80186ce:	69bb      	ldr	r3, [r7, #24]
 80186d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186d2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80186d4:	69bb      	ldr	r3, [r7, #24]
 80186d6:	69fa      	ldr	r2, [r7, #28]
 80186d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80186da:	69bb      	ldr	r3, [r7, #24]
 80186dc:	699b      	ldr	r3, [r3, #24]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	db04      	blt.n	80186ec <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186e2:	69fb      	ldr	r3, [r7, #28]
 80186e4:	f1c3 0207 	rsb	r2, r3, #7
 80186e8:	69bb      	ldr	r3, [r7, #24]
 80186ea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80186ec:	69bb      	ldr	r3, [r7, #24]
 80186ee:	6959      	ldr	r1, [r3, #20]
 80186f0:	693a      	ldr	r2, [r7, #16]
 80186f2:	4613      	mov	r3, r2
 80186f4:	009b      	lsls	r3, r3, #2
 80186f6:	4413      	add	r3, r2
 80186f8:	009b      	lsls	r3, r3, #2
 80186fa:	4a22      	ldr	r2, [pc, #136]	; (8018784 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80186fc:	4413      	add	r3, r2
 80186fe:	4299      	cmp	r1, r3
 8018700:	d101      	bne.n	8018706 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8018702:	2301      	movs	r3, #1
 8018704:	e000      	b.n	8018708 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8018706:	2300      	movs	r3, #0
 8018708:	2b00      	cmp	r3, #0
 801870a:	d034      	beq.n	8018776 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801870c:	69bb      	ldr	r3, [r7, #24]
 801870e:	3304      	adds	r3, #4
 8018710:	4618      	mov	r0, r3
 8018712:	f7fe f959 	bl	80169c8 <uxListRemove>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d115      	bne.n	8018748 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801871c:	69bb      	ldr	r3, [r7, #24]
 801871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018720:	4918      	ldr	r1, [pc, #96]	; (8018784 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018722:	4613      	mov	r3, r2
 8018724:	009b      	lsls	r3, r3, #2
 8018726:	4413      	add	r3, r2
 8018728:	009b      	lsls	r3, r3, #2
 801872a:	440b      	add	r3, r1
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d10a      	bne.n	8018748 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8018732:	69bb      	ldr	r3, [r7, #24]
 8018734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018736:	2201      	movs	r2, #1
 8018738:	fa02 f303 	lsl.w	r3, r2, r3
 801873c:	43da      	mvns	r2, r3
 801873e:	4b12      	ldr	r3, [pc, #72]	; (8018788 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	4013      	ands	r3, r2
 8018744:	4a10      	ldr	r2, [pc, #64]	; (8018788 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8018746:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018748:	69bb      	ldr	r3, [r7, #24]
 801874a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801874c:	2201      	movs	r2, #1
 801874e:	409a      	lsls	r2, r3
 8018750:	4b0d      	ldr	r3, [pc, #52]	; (8018788 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	4313      	orrs	r3, r2
 8018756:	4a0c      	ldr	r2, [pc, #48]	; (8018788 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8018758:	6013      	str	r3, [r2, #0]
 801875a:	69bb      	ldr	r3, [r7, #24]
 801875c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801875e:	4613      	mov	r3, r2
 8018760:	009b      	lsls	r3, r3, #2
 8018762:	4413      	add	r3, r2
 8018764:	009b      	lsls	r3, r3, #2
 8018766:	4a07      	ldr	r2, [pc, #28]	; (8018784 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018768:	441a      	add	r2, r3
 801876a:	69bb      	ldr	r3, [r7, #24]
 801876c:	3304      	adds	r3, #4
 801876e:	4619      	mov	r1, r3
 8018770:	4610      	mov	r0, r2
 8018772:	f7fe f8cc 	bl	801690e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018776:	bf00      	nop
 8018778:	3720      	adds	r7, #32
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	20000144 	.word	0x20000144
 8018784:	20000148 	.word	0x20000148
 8018788:	2000024c 	.word	0x2000024c

0801878c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 801878c:	b480      	push	{r7}
 801878e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018790:	4b07      	ldr	r3, [pc, #28]	; (80187b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d004      	beq.n	80187a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018798:	4b05      	ldr	r3, [pc, #20]	; (80187b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801879e:	3201      	adds	r2, #1
 80187a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80187a2:	4b03      	ldr	r3, [pc, #12]	; (80187b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80187a4:	681b      	ldr	r3, [r3, #0]
	}
 80187a6:	4618      	mov	r0, r3
 80187a8:	46bd      	mov	sp, r7
 80187aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ae:	4770      	bx	lr
 80187b0:	20000144 	.word	0x20000144

080187b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b084      	sub	sp, #16
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
 80187bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80187be:	4b29      	ldr	r3, [pc, #164]	; (8018864 <prvAddCurrentTaskToDelayedList+0xb0>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80187c4:	4b28      	ldr	r3, [pc, #160]	; (8018868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	3304      	adds	r3, #4
 80187ca:	4618      	mov	r0, r3
 80187cc:	f7fe f8fc 	bl	80169c8 <uxListRemove>
 80187d0:	4603      	mov	r3, r0
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d10b      	bne.n	80187ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80187d6:	4b24      	ldr	r3, [pc, #144]	; (8018868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187dc:	2201      	movs	r2, #1
 80187de:	fa02 f303 	lsl.w	r3, r2, r3
 80187e2:	43da      	mvns	r2, r3
 80187e4:	4b21      	ldr	r3, [pc, #132]	; (801886c <prvAddCurrentTaskToDelayedList+0xb8>)
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	4013      	ands	r3, r2
 80187ea:	4a20      	ldr	r2, [pc, #128]	; (801886c <prvAddCurrentTaskToDelayedList+0xb8>)
 80187ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187f4:	d10a      	bne.n	801880c <prvAddCurrentTaskToDelayedList+0x58>
 80187f6:	683b      	ldr	r3, [r7, #0]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d007      	beq.n	801880c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80187fc:	4b1a      	ldr	r3, [pc, #104]	; (8018868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	3304      	adds	r3, #4
 8018802:	4619      	mov	r1, r3
 8018804:	481a      	ldr	r0, [pc, #104]	; (8018870 <prvAddCurrentTaskToDelayedList+0xbc>)
 8018806:	f7fe f882 	bl	801690e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801880a:	e026      	b.n	801885a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801880c:	68fa      	ldr	r2, [r7, #12]
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	4413      	add	r3, r2
 8018812:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018814:	4b14      	ldr	r3, [pc, #80]	; (8018868 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	68ba      	ldr	r2, [r7, #8]
 801881a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801881c:	68ba      	ldr	r2, [r7, #8]
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	429a      	cmp	r2, r3
 8018822:	d209      	bcs.n	8018838 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018824:	4b13      	ldr	r3, [pc, #76]	; (8018874 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018826:	681a      	ldr	r2, [r3, #0]
 8018828:	4b0f      	ldr	r3, [pc, #60]	; (8018868 <prvAddCurrentTaskToDelayedList+0xb4>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	3304      	adds	r3, #4
 801882e:	4619      	mov	r1, r3
 8018830:	4610      	mov	r0, r2
 8018832:	f7fe f890 	bl	8016956 <vListInsert>
}
 8018836:	e010      	b.n	801885a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018838:	4b0f      	ldr	r3, [pc, #60]	; (8018878 <prvAddCurrentTaskToDelayedList+0xc4>)
 801883a:	681a      	ldr	r2, [r3, #0]
 801883c:	4b0a      	ldr	r3, [pc, #40]	; (8018868 <prvAddCurrentTaskToDelayedList+0xb4>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	3304      	adds	r3, #4
 8018842:	4619      	mov	r1, r3
 8018844:	4610      	mov	r0, r2
 8018846:	f7fe f886 	bl	8016956 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801884a:	4b0c      	ldr	r3, [pc, #48]	; (801887c <prvAddCurrentTaskToDelayedList+0xc8>)
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	68ba      	ldr	r2, [r7, #8]
 8018850:	429a      	cmp	r2, r3
 8018852:	d202      	bcs.n	801885a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018854:	4a09      	ldr	r2, [pc, #36]	; (801887c <prvAddCurrentTaskToDelayedList+0xc8>)
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	6013      	str	r3, [r2, #0]
}
 801885a:	bf00      	nop
 801885c:	3710      	adds	r7, #16
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}
 8018862:	bf00      	nop
 8018864:	20000248 	.word	0x20000248
 8018868:	20000144 	.word	0x20000144
 801886c:	2000024c 	.word	0x2000024c
 8018870:	20000230 	.word	0x20000230
 8018874:	20000200 	.word	0x20000200
 8018878:	200001fc 	.word	0x200001fc
 801887c:	20000264 	.word	0x20000264

08018880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018880:	b480      	push	{r7}
 8018882:	b085      	sub	sp, #20
 8018884:	af00      	add	r7, sp, #0
 8018886:	60f8      	str	r0, [r7, #12]
 8018888:	60b9      	str	r1, [r7, #8]
 801888a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	3b04      	subs	r3, #4
 8018890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	3b04      	subs	r3, #4
 801889e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80188a0:	68bb      	ldr	r3, [r7, #8]
 80188a2:	f023 0201 	bic.w	r2, r3, #1
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	3b04      	subs	r3, #4
 80188ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80188b0:	4a0c      	ldr	r2, [pc, #48]	; (80188e4 <pxPortInitialiseStack+0x64>)
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	3b14      	subs	r3, #20
 80188ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80188bc:	687a      	ldr	r2, [r7, #4]
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	3b04      	subs	r3, #4
 80188c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	f06f 0202 	mvn.w	r2, #2
 80188ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	3b20      	subs	r3, #32
 80188d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80188d6:	68fb      	ldr	r3, [r7, #12]
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3714      	adds	r7, #20
 80188dc:	46bd      	mov	sp, r7
 80188de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e2:	4770      	bx	lr
 80188e4:	080188e9 	.word	0x080188e9

080188e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80188e8:	b480      	push	{r7}
 80188ea:	b085      	sub	sp, #20
 80188ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80188ee:	2300      	movs	r3, #0
 80188f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80188f2:	4b13      	ldr	r3, [pc, #76]	; (8018940 <prvTaskExitError+0x58>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188fa:	d00b      	beq.n	8018914 <prvTaskExitError+0x2c>
 80188fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018900:	b672      	cpsid	i
 8018902:	f383 8811 	msr	BASEPRI, r3
 8018906:	f3bf 8f6f 	isb	sy
 801890a:	f3bf 8f4f 	dsb	sy
 801890e:	b662      	cpsie	i
 8018910:	60fb      	str	r3, [r7, #12]
 8018912:	e7fe      	b.n	8018912 <prvTaskExitError+0x2a>
 8018914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018918:	b672      	cpsid	i
 801891a:	f383 8811 	msr	BASEPRI, r3
 801891e:	f3bf 8f6f 	isb	sy
 8018922:	f3bf 8f4f 	dsb	sy
 8018926:	b662      	cpsie	i
 8018928:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801892a:	bf00      	nop
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d0fc      	beq.n	801892c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018932:	bf00      	nop
 8018934:	3714      	adds	r7, #20
 8018936:	46bd      	mov	sp, r7
 8018938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893c:	4770      	bx	lr
 801893e:	bf00      	nop
 8018940:	20000050 	.word	0x20000050
	...

08018950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018950:	4b07      	ldr	r3, [pc, #28]	; (8018970 <pxCurrentTCBConst2>)
 8018952:	6819      	ldr	r1, [r3, #0]
 8018954:	6808      	ldr	r0, [r1, #0]
 8018956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801895a:	f380 8809 	msr	PSP, r0
 801895e:	f3bf 8f6f 	isb	sy
 8018962:	f04f 0000 	mov.w	r0, #0
 8018966:	f380 8811 	msr	BASEPRI, r0
 801896a:	4770      	bx	lr
 801896c:	f3af 8000 	nop.w

08018970 <pxCurrentTCBConst2>:
 8018970:	20000144 	.word	0x20000144
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018974:	bf00      	nop
 8018976:	bf00      	nop

08018978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018978:	4808      	ldr	r0, [pc, #32]	; (801899c <prvPortStartFirstTask+0x24>)
 801897a:	6800      	ldr	r0, [r0, #0]
 801897c:	6800      	ldr	r0, [r0, #0]
 801897e:	f380 8808 	msr	MSP, r0
 8018982:	f04f 0000 	mov.w	r0, #0
 8018986:	f380 8814 	msr	CONTROL, r0
 801898a:	b662      	cpsie	i
 801898c:	b661      	cpsie	f
 801898e:	f3bf 8f4f 	dsb	sy
 8018992:	f3bf 8f6f 	isb	sy
 8018996:	df00      	svc	0
 8018998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801899a:	bf00      	nop
 801899c:	e000ed08 	.word	0xe000ed08

080189a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b084      	sub	sp, #16
 80189a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80189a6:	4b36      	ldr	r3, [pc, #216]	; (8018a80 <xPortStartScheduler+0xe0>)
 80189a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	781b      	ldrb	r3, [r3, #0]
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	22ff      	movs	r2, #255	; 0xff
 80189b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	781b      	ldrb	r3, [r3, #0]
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80189c0:	78fb      	ldrb	r3, [r7, #3]
 80189c2:	b2db      	uxtb	r3, r3
 80189c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80189c8:	b2da      	uxtb	r2, r3
 80189ca:	4b2e      	ldr	r3, [pc, #184]	; (8018a84 <xPortStartScheduler+0xe4>)
 80189cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80189ce:	4b2e      	ldr	r3, [pc, #184]	; (8018a88 <xPortStartScheduler+0xe8>)
 80189d0:	2207      	movs	r2, #7
 80189d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80189d4:	e009      	b.n	80189ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80189d6:	4b2c      	ldr	r3, [pc, #176]	; (8018a88 <xPortStartScheduler+0xe8>)
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	3b01      	subs	r3, #1
 80189dc:	4a2a      	ldr	r2, [pc, #168]	; (8018a88 <xPortStartScheduler+0xe8>)
 80189de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80189e0:	78fb      	ldrb	r3, [r7, #3]
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	005b      	lsls	r3, r3, #1
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80189ea:	78fb      	ldrb	r3, [r7, #3]
 80189ec:	b2db      	uxtb	r3, r3
 80189ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80189f2:	2b80      	cmp	r3, #128	; 0x80
 80189f4:	d0ef      	beq.n	80189d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80189f6:	4b24      	ldr	r3, [pc, #144]	; (8018a88 <xPortStartScheduler+0xe8>)
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	f1c3 0307 	rsb	r3, r3, #7
 80189fe:	2b04      	cmp	r3, #4
 8018a00:	d00b      	beq.n	8018a1a <xPortStartScheduler+0x7a>
 8018a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a06:	b672      	cpsid	i
 8018a08:	f383 8811 	msr	BASEPRI, r3
 8018a0c:	f3bf 8f6f 	isb	sy
 8018a10:	f3bf 8f4f 	dsb	sy
 8018a14:	b662      	cpsie	i
 8018a16:	60bb      	str	r3, [r7, #8]
 8018a18:	e7fe      	b.n	8018a18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018a1a:	4b1b      	ldr	r3, [pc, #108]	; (8018a88 <xPortStartScheduler+0xe8>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	021b      	lsls	r3, r3, #8
 8018a20:	4a19      	ldr	r2, [pc, #100]	; (8018a88 <xPortStartScheduler+0xe8>)
 8018a22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018a24:	4b18      	ldr	r3, [pc, #96]	; (8018a88 <xPortStartScheduler+0xe8>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018a2c:	4a16      	ldr	r2, [pc, #88]	; (8018a88 <xPortStartScheduler+0xe8>)
 8018a2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	b2da      	uxtb	r2, r3
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018a38:	4b14      	ldr	r3, [pc, #80]	; (8018a8c <xPortStartScheduler+0xec>)
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	4a13      	ldr	r2, [pc, #76]	; (8018a8c <xPortStartScheduler+0xec>)
 8018a3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018a42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018a44:	4b11      	ldr	r3, [pc, #68]	; (8018a8c <xPortStartScheduler+0xec>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	4a10      	ldr	r2, [pc, #64]	; (8018a8c <xPortStartScheduler+0xec>)
 8018a4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018a4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018a50:	f000 f8d4 	bl	8018bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018a54:	4b0e      	ldr	r3, [pc, #56]	; (8018a90 <xPortStartScheduler+0xf0>)
 8018a56:	2200      	movs	r2, #0
 8018a58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018a5a:	f000 f8f3 	bl	8018c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018a5e:	4b0d      	ldr	r3, [pc, #52]	; (8018a94 <xPortStartScheduler+0xf4>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	4a0c      	ldr	r2, [pc, #48]	; (8018a94 <xPortStartScheduler+0xf4>)
 8018a64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018a68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018a6a:	f7ff ff85 	bl	8018978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018a6e:	f7ff fa65 	bl	8017f3c <vTaskSwitchContext>
	prvTaskExitError();
 8018a72:	f7ff ff39 	bl	80188e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018a76:	2300      	movs	r3, #0
}
 8018a78:	4618      	mov	r0, r3
 8018a7a:	3710      	adds	r7, #16
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	e000e400 	.word	0xe000e400
 8018a84:	20000270 	.word	0x20000270
 8018a88:	20000274 	.word	0x20000274
 8018a8c:	e000ed20 	.word	0xe000ed20
 8018a90:	20000050 	.word	0x20000050
 8018a94:	e000ef34 	.word	0xe000ef34

08018a98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018a98:	b480      	push	{r7}
 8018a9a:	b083      	sub	sp, #12
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa2:	b672      	cpsid	i
 8018aa4:	f383 8811 	msr	BASEPRI, r3
 8018aa8:	f3bf 8f6f 	isb	sy
 8018aac:	f3bf 8f4f 	dsb	sy
 8018ab0:	b662      	cpsie	i
 8018ab2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018ab4:	4b0f      	ldr	r3, [pc, #60]	; (8018af4 <vPortEnterCritical+0x5c>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	3301      	adds	r3, #1
 8018aba:	4a0e      	ldr	r2, [pc, #56]	; (8018af4 <vPortEnterCritical+0x5c>)
 8018abc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018abe:	4b0d      	ldr	r3, [pc, #52]	; (8018af4 <vPortEnterCritical+0x5c>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	2b01      	cmp	r3, #1
 8018ac4:	d110      	bne.n	8018ae8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018ac6:	4b0c      	ldr	r3, [pc, #48]	; (8018af8 <vPortEnterCritical+0x60>)
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	b2db      	uxtb	r3, r3
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d00b      	beq.n	8018ae8 <vPortEnterCritical+0x50>
 8018ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad4:	b672      	cpsid	i
 8018ad6:	f383 8811 	msr	BASEPRI, r3
 8018ada:	f3bf 8f6f 	isb	sy
 8018ade:	f3bf 8f4f 	dsb	sy
 8018ae2:	b662      	cpsie	i
 8018ae4:	603b      	str	r3, [r7, #0]
 8018ae6:	e7fe      	b.n	8018ae6 <vPortEnterCritical+0x4e>
	}
}
 8018ae8:	bf00      	nop
 8018aea:	370c      	adds	r7, #12
 8018aec:	46bd      	mov	sp, r7
 8018aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af2:	4770      	bx	lr
 8018af4:	20000050 	.word	0x20000050
 8018af8:	e000ed04 	.word	0xe000ed04

08018afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018afc:	b480      	push	{r7}
 8018afe:	b083      	sub	sp, #12
 8018b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018b02:	4b12      	ldr	r3, [pc, #72]	; (8018b4c <vPortExitCritical+0x50>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d10b      	bne.n	8018b22 <vPortExitCritical+0x26>
 8018b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b0e:	b672      	cpsid	i
 8018b10:	f383 8811 	msr	BASEPRI, r3
 8018b14:	f3bf 8f6f 	isb	sy
 8018b18:	f3bf 8f4f 	dsb	sy
 8018b1c:	b662      	cpsie	i
 8018b1e:	607b      	str	r3, [r7, #4]
 8018b20:	e7fe      	b.n	8018b20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8018b22:	4b0a      	ldr	r3, [pc, #40]	; (8018b4c <vPortExitCritical+0x50>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	3b01      	subs	r3, #1
 8018b28:	4a08      	ldr	r2, [pc, #32]	; (8018b4c <vPortExitCritical+0x50>)
 8018b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018b2c:	4b07      	ldr	r3, [pc, #28]	; (8018b4c <vPortExitCritical+0x50>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d104      	bne.n	8018b3e <vPortExitCritical+0x42>
 8018b34:	2300      	movs	r3, #0
 8018b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8018b3e:	bf00      	nop
 8018b40:	370c      	adds	r7, #12
 8018b42:	46bd      	mov	sp, r7
 8018b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b48:	4770      	bx	lr
 8018b4a:	bf00      	nop
 8018b4c:	20000050 	.word	0x20000050

08018b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018b50:	f3ef 8009 	mrs	r0, PSP
 8018b54:	f3bf 8f6f 	isb	sy
 8018b58:	4b15      	ldr	r3, [pc, #84]	; (8018bb0 <pxCurrentTCBConst>)
 8018b5a:	681a      	ldr	r2, [r3, #0]
 8018b5c:	f01e 0f10 	tst.w	lr, #16
 8018b60:	bf08      	it	eq
 8018b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b6a:	6010      	str	r0, [r2, #0]
 8018b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018b74:	b672      	cpsid	i
 8018b76:	f380 8811 	msr	BASEPRI, r0
 8018b7a:	f3bf 8f4f 	dsb	sy
 8018b7e:	f3bf 8f6f 	isb	sy
 8018b82:	b662      	cpsie	i
 8018b84:	f7ff f9da 	bl	8017f3c <vTaskSwitchContext>
 8018b88:	f04f 0000 	mov.w	r0, #0
 8018b8c:	f380 8811 	msr	BASEPRI, r0
 8018b90:	bc09      	pop	{r0, r3}
 8018b92:	6819      	ldr	r1, [r3, #0]
 8018b94:	6808      	ldr	r0, [r1, #0]
 8018b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b9a:	f01e 0f10 	tst.w	lr, #16
 8018b9e:	bf08      	it	eq
 8018ba0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018ba4:	f380 8809 	msr	PSP, r0
 8018ba8:	f3bf 8f6f 	isb	sy
 8018bac:	4770      	bx	lr
 8018bae:	bf00      	nop

08018bb0 <pxCurrentTCBConst>:
 8018bb0:	20000144 	.word	0x20000144
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018bb4:	bf00      	nop
 8018bb6:	bf00      	nop

08018bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8018bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bc2:	b672      	cpsid	i
 8018bc4:	f383 8811 	msr	BASEPRI, r3
 8018bc8:	f3bf 8f6f 	isb	sy
 8018bcc:	f3bf 8f4f 	dsb	sy
 8018bd0:	b662      	cpsie	i
 8018bd2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018bd4:	f7ff f8b6 	bl	8017d44 <xTaskIncrementTick>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d003      	beq.n	8018be6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018bde:	4b06      	ldr	r3, [pc, #24]	; (8018bf8 <SysTick_Handler+0x40>)
 8018be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018be4:	601a      	str	r2, [r3, #0]
 8018be6:	2300      	movs	r3, #0
 8018be8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8018bf0:	bf00      	nop
 8018bf2:	3708      	adds	r7, #8
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd80      	pop	{r7, pc}
 8018bf8:	e000ed04 	.word	0xe000ed04

08018bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018bfc:	b480      	push	{r7}
 8018bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018c00:	4b0b      	ldr	r3, [pc, #44]	; (8018c30 <vPortSetupTimerInterrupt+0x34>)
 8018c02:	2200      	movs	r2, #0
 8018c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018c06:	4b0b      	ldr	r3, [pc, #44]	; (8018c34 <vPortSetupTimerInterrupt+0x38>)
 8018c08:	2200      	movs	r2, #0
 8018c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018c0c:	4b0a      	ldr	r3, [pc, #40]	; (8018c38 <vPortSetupTimerInterrupt+0x3c>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4a0a      	ldr	r2, [pc, #40]	; (8018c3c <vPortSetupTimerInterrupt+0x40>)
 8018c12:	fba2 2303 	umull	r2, r3, r2, r3
 8018c16:	099b      	lsrs	r3, r3, #6
 8018c18:	4a09      	ldr	r2, [pc, #36]	; (8018c40 <vPortSetupTimerInterrupt+0x44>)
 8018c1a:	3b01      	subs	r3, #1
 8018c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018c1e:	4b04      	ldr	r3, [pc, #16]	; (8018c30 <vPortSetupTimerInterrupt+0x34>)
 8018c20:	2207      	movs	r2, #7
 8018c22:	601a      	str	r2, [r3, #0]
}
 8018c24:	bf00      	nop
 8018c26:	46bd      	mov	sp, r7
 8018c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2c:	4770      	bx	lr
 8018c2e:	bf00      	nop
 8018c30:	e000e010 	.word	0xe000e010
 8018c34:	e000e018 	.word	0xe000e018
 8018c38:	20000060 	.word	0x20000060
 8018c3c:	10624dd3 	.word	0x10624dd3
 8018c40:	e000e014 	.word	0xe000e014

08018c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018c54 <vPortEnableVFP+0x10>
 8018c48:	6801      	ldr	r1, [r0, #0]
 8018c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018c4e:	6001      	str	r1, [r0, #0]
 8018c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018c52:	bf00      	nop
 8018c54:	e000ed88 	.word	0xe000ed88

08018c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018c58:	b480      	push	{r7}
 8018c5a:	b085      	sub	sp, #20
 8018c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018c5e:	f3ef 8305 	mrs	r3, IPSR
 8018c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	2b0f      	cmp	r3, #15
 8018c68:	d915      	bls.n	8018c96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018c6a:	4a18      	ldr	r2, [pc, #96]	; (8018ccc <vPortValidateInterruptPriority+0x74>)
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	4413      	add	r3, r2
 8018c70:	781b      	ldrb	r3, [r3, #0]
 8018c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018c74:	4b16      	ldr	r3, [pc, #88]	; (8018cd0 <vPortValidateInterruptPriority+0x78>)
 8018c76:	781b      	ldrb	r3, [r3, #0]
 8018c78:	7afa      	ldrb	r2, [r7, #11]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d20b      	bcs.n	8018c96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8018c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c82:	b672      	cpsid	i
 8018c84:	f383 8811 	msr	BASEPRI, r3
 8018c88:	f3bf 8f6f 	isb	sy
 8018c8c:	f3bf 8f4f 	dsb	sy
 8018c90:	b662      	cpsie	i
 8018c92:	607b      	str	r3, [r7, #4]
 8018c94:	e7fe      	b.n	8018c94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018c96:	4b0f      	ldr	r3, [pc, #60]	; (8018cd4 <vPortValidateInterruptPriority+0x7c>)
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018c9e:	4b0e      	ldr	r3, [pc, #56]	; (8018cd8 <vPortValidateInterruptPriority+0x80>)
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	429a      	cmp	r2, r3
 8018ca4:	d90b      	bls.n	8018cbe <vPortValidateInterruptPriority+0x66>
 8018ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018caa:	b672      	cpsid	i
 8018cac:	f383 8811 	msr	BASEPRI, r3
 8018cb0:	f3bf 8f6f 	isb	sy
 8018cb4:	f3bf 8f4f 	dsb	sy
 8018cb8:	b662      	cpsie	i
 8018cba:	603b      	str	r3, [r7, #0]
 8018cbc:	e7fe      	b.n	8018cbc <vPortValidateInterruptPriority+0x64>
	}
 8018cbe:	bf00      	nop
 8018cc0:	3714      	adds	r7, #20
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc8:	4770      	bx	lr
 8018cca:	bf00      	nop
 8018ccc:	e000e3f0 	.word	0xe000e3f0
 8018cd0:	20000270 	.word	0x20000270
 8018cd4:	e000ed0c 	.word	0xe000ed0c
 8018cd8:	20000274 	.word	0x20000274

08018cdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b08a      	sub	sp, #40	; 0x28
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018ce8:	f7fe ff5e 	bl	8017ba8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018cec:	4b5c      	ldr	r3, [pc, #368]	; (8018e60 <pvPortMalloc+0x184>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d101      	bne.n	8018cf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018cf4:	f000 f91a 	bl	8018f2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018cf8:	4b5a      	ldr	r3, [pc, #360]	; (8018e64 <pvPortMalloc+0x188>)
 8018cfa:	681a      	ldr	r2, [r3, #0]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	4013      	ands	r3, r2
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	f040 8090 	bne.w	8018e26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d01e      	beq.n	8018d4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8018d0c:	2208      	movs	r2, #8
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	4413      	add	r3, r2
 8018d12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	f003 0307 	and.w	r3, r3, #7
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d015      	beq.n	8018d4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	f023 0307 	bic.w	r3, r3, #7
 8018d24:	3308      	adds	r3, #8
 8018d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f003 0307 	and.w	r3, r3, #7
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d00b      	beq.n	8018d4a <pvPortMalloc+0x6e>
 8018d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d36:	b672      	cpsid	i
 8018d38:	f383 8811 	msr	BASEPRI, r3
 8018d3c:	f3bf 8f6f 	isb	sy
 8018d40:	f3bf 8f4f 	dsb	sy
 8018d44:	b662      	cpsie	i
 8018d46:	617b      	str	r3, [r7, #20]
 8018d48:	e7fe      	b.n	8018d48 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d06a      	beq.n	8018e26 <pvPortMalloc+0x14a>
 8018d50:	4b45      	ldr	r3, [pc, #276]	; (8018e68 <pvPortMalloc+0x18c>)
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	687a      	ldr	r2, [r7, #4]
 8018d56:	429a      	cmp	r2, r3
 8018d58:	d865      	bhi.n	8018e26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018d5a:	4b44      	ldr	r3, [pc, #272]	; (8018e6c <pvPortMalloc+0x190>)
 8018d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018d5e:	4b43      	ldr	r3, [pc, #268]	; (8018e6c <pvPortMalloc+0x190>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018d64:	e004      	b.n	8018d70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8018d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d72:	685b      	ldr	r3, [r3, #4]
 8018d74:	687a      	ldr	r2, [r7, #4]
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d903      	bls.n	8018d82 <pvPortMalloc+0xa6>
 8018d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d1f1      	bne.n	8018d66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018d82:	4b37      	ldr	r3, [pc, #220]	; (8018e60 <pvPortMalloc+0x184>)
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d88:	429a      	cmp	r2, r3
 8018d8a:	d04c      	beq.n	8018e26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018d8c:	6a3b      	ldr	r3, [r7, #32]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	2208      	movs	r2, #8
 8018d92:	4413      	add	r3, r2
 8018d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d98:	681a      	ldr	r2, [r3, #0]
 8018d9a:	6a3b      	ldr	r3, [r7, #32]
 8018d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018da0:	685a      	ldr	r2, [r3, #4]
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	1ad2      	subs	r2, r2, r3
 8018da6:	2308      	movs	r3, #8
 8018da8:	005b      	lsls	r3, r3, #1
 8018daa:	429a      	cmp	r2, r3
 8018dac:	d920      	bls.n	8018df0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	4413      	add	r3, r2
 8018db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018db6:	69bb      	ldr	r3, [r7, #24]
 8018db8:	f003 0307 	and.w	r3, r3, #7
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d00b      	beq.n	8018dd8 <pvPortMalloc+0xfc>
 8018dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dc4:	b672      	cpsid	i
 8018dc6:	f383 8811 	msr	BASEPRI, r3
 8018dca:	f3bf 8f6f 	isb	sy
 8018dce:	f3bf 8f4f 	dsb	sy
 8018dd2:	b662      	cpsie	i
 8018dd4:	613b      	str	r3, [r7, #16]
 8018dd6:	e7fe      	b.n	8018dd6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dda:	685a      	ldr	r2, [r3, #4]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	1ad2      	subs	r2, r2, r3
 8018de0:	69bb      	ldr	r3, [r7, #24]
 8018de2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018dea:	69b8      	ldr	r0, [r7, #24]
 8018dec:	f000 f900 	bl	8018ff0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018df0:	4b1d      	ldr	r3, [pc, #116]	; (8018e68 <pvPortMalloc+0x18c>)
 8018df2:	681a      	ldr	r2, [r3, #0]
 8018df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018df6:	685b      	ldr	r3, [r3, #4]
 8018df8:	1ad3      	subs	r3, r2, r3
 8018dfa:	4a1b      	ldr	r2, [pc, #108]	; (8018e68 <pvPortMalloc+0x18c>)
 8018dfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018dfe:	4b1a      	ldr	r3, [pc, #104]	; (8018e68 <pvPortMalloc+0x18c>)
 8018e00:	681a      	ldr	r2, [r3, #0]
 8018e02:	4b1b      	ldr	r3, [pc, #108]	; (8018e70 <pvPortMalloc+0x194>)
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	429a      	cmp	r2, r3
 8018e08:	d203      	bcs.n	8018e12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018e0a:	4b17      	ldr	r3, [pc, #92]	; (8018e68 <pvPortMalloc+0x18c>)
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	4a18      	ldr	r2, [pc, #96]	; (8018e70 <pvPortMalloc+0x194>)
 8018e10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8018e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e14:	685a      	ldr	r2, [r3, #4]
 8018e16:	4b13      	ldr	r3, [pc, #76]	; (8018e64 <pvPortMalloc+0x188>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	431a      	orrs	r2, r3
 8018e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e22:	2200      	movs	r2, #0
 8018e24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018e26:	f7fe fecd 	bl	8017bc4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8018e2a:	69fb      	ldr	r3, [r7, #28]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d101      	bne.n	8018e34 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8018e30:	f7fb f945 	bl	80140be <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018e34:	69fb      	ldr	r3, [r7, #28]
 8018e36:	f003 0307 	and.w	r3, r3, #7
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d00b      	beq.n	8018e56 <pvPortMalloc+0x17a>
 8018e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e42:	b672      	cpsid	i
 8018e44:	f383 8811 	msr	BASEPRI, r3
 8018e48:	f3bf 8f6f 	isb	sy
 8018e4c:	f3bf 8f4f 	dsb	sy
 8018e50:	b662      	cpsie	i
 8018e52:	60fb      	str	r3, [r7, #12]
 8018e54:	e7fe      	b.n	8018e54 <pvPortMalloc+0x178>
	return pvReturn;
 8018e56:	69fb      	ldr	r3, [r7, #28]
}
 8018e58:	4618      	mov	r0, r3
 8018e5a:	3728      	adds	r7, #40	; 0x28
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}
 8018e60:	20008280 	.word	0x20008280
 8018e64:	2000828c 	.word	0x2000828c
 8018e68:	20008284 	.word	0x20008284
 8018e6c:	20008278 	.word	0x20008278
 8018e70:	20008288 	.word	0x20008288

08018e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b086      	sub	sp, #24
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d04a      	beq.n	8018f1c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8018e86:	2308      	movs	r3, #8
 8018e88:	425b      	negs	r3, r3
 8018e8a:	697a      	ldr	r2, [r7, #20]
 8018e8c:	4413      	add	r3, r2
 8018e8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	685a      	ldr	r2, [r3, #4]
 8018e98:	4b22      	ldr	r3, [pc, #136]	; (8018f24 <vPortFree+0xb0>)
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	4013      	ands	r3, r2
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d10b      	bne.n	8018eba <vPortFree+0x46>
 8018ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ea6:	b672      	cpsid	i
 8018ea8:	f383 8811 	msr	BASEPRI, r3
 8018eac:	f3bf 8f6f 	isb	sy
 8018eb0:	f3bf 8f4f 	dsb	sy
 8018eb4:	b662      	cpsie	i
 8018eb6:	60fb      	str	r3, [r7, #12]
 8018eb8:	e7fe      	b.n	8018eb8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018eba:	693b      	ldr	r3, [r7, #16]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d00b      	beq.n	8018eda <vPortFree+0x66>
 8018ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ec6:	b672      	cpsid	i
 8018ec8:	f383 8811 	msr	BASEPRI, r3
 8018ecc:	f3bf 8f6f 	isb	sy
 8018ed0:	f3bf 8f4f 	dsb	sy
 8018ed4:	b662      	cpsie	i
 8018ed6:	60bb      	str	r3, [r7, #8]
 8018ed8:	e7fe      	b.n	8018ed8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018eda:	693b      	ldr	r3, [r7, #16]
 8018edc:	685a      	ldr	r2, [r3, #4]
 8018ede:	4b11      	ldr	r3, [pc, #68]	; (8018f24 <vPortFree+0xb0>)
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	4013      	ands	r3, r2
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d019      	beq.n	8018f1c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018ee8:	693b      	ldr	r3, [r7, #16]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d115      	bne.n	8018f1c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018ef0:	693b      	ldr	r3, [r7, #16]
 8018ef2:	685a      	ldr	r2, [r3, #4]
 8018ef4:	4b0b      	ldr	r3, [pc, #44]	; (8018f24 <vPortFree+0xb0>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	43db      	mvns	r3, r3
 8018efa:	401a      	ands	r2, r3
 8018efc:	693b      	ldr	r3, [r7, #16]
 8018efe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018f00:	f7fe fe52 	bl	8017ba8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018f04:	693b      	ldr	r3, [r7, #16]
 8018f06:	685a      	ldr	r2, [r3, #4]
 8018f08:	4b07      	ldr	r3, [pc, #28]	; (8018f28 <vPortFree+0xb4>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	4413      	add	r3, r2
 8018f0e:	4a06      	ldr	r2, [pc, #24]	; (8018f28 <vPortFree+0xb4>)
 8018f10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018f12:	6938      	ldr	r0, [r7, #16]
 8018f14:	f000 f86c 	bl	8018ff0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018f18:	f7fe fe54 	bl	8017bc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018f1c:	bf00      	nop
 8018f1e:	3718      	adds	r7, #24
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd80      	pop	{r7, pc}
 8018f24:	2000828c 	.word	0x2000828c
 8018f28:	20008284 	.word	0x20008284

08018f2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018f2c:	b480      	push	{r7}
 8018f2e:	b085      	sub	sp, #20
 8018f30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018f36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018f38:	4b27      	ldr	r3, [pc, #156]	; (8018fd8 <prvHeapInit+0xac>)
 8018f3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	f003 0307 	and.w	r3, r3, #7
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d00c      	beq.n	8018f60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	3307      	adds	r3, #7
 8018f4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	f023 0307 	bic.w	r3, r3, #7
 8018f52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018f54:	68ba      	ldr	r2, [r7, #8]
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	1ad3      	subs	r3, r2, r3
 8018f5a:	4a1f      	ldr	r2, [pc, #124]	; (8018fd8 <prvHeapInit+0xac>)
 8018f5c:	4413      	add	r3, r2
 8018f5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018f64:	4a1d      	ldr	r2, [pc, #116]	; (8018fdc <prvHeapInit+0xb0>)
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018f6a:	4b1c      	ldr	r3, [pc, #112]	; (8018fdc <prvHeapInit+0xb0>)
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	68ba      	ldr	r2, [r7, #8]
 8018f74:	4413      	add	r3, r2
 8018f76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018f78:	2208      	movs	r2, #8
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	1a9b      	subs	r3, r3, r2
 8018f7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	f023 0307 	bic.w	r3, r3, #7
 8018f86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	4a15      	ldr	r2, [pc, #84]	; (8018fe0 <prvHeapInit+0xb4>)
 8018f8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018f8e:	4b14      	ldr	r3, [pc, #80]	; (8018fe0 <prvHeapInit+0xb4>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	2200      	movs	r2, #0
 8018f94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018f96:	4b12      	ldr	r3, [pc, #72]	; (8018fe0 <prvHeapInit+0xb4>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018fa2:	683b      	ldr	r3, [r7, #0]
 8018fa4:	68fa      	ldr	r2, [r7, #12]
 8018fa6:	1ad2      	subs	r2, r2, r3
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018fac:	4b0c      	ldr	r3, [pc, #48]	; (8018fe0 <prvHeapInit+0xb4>)
 8018fae:	681a      	ldr	r2, [r3, #0]
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	685b      	ldr	r3, [r3, #4]
 8018fb8:	4a0a      	ldr	r2, [pc, #40]	; (8018fe4 <prvHeapInit+0xb8>)
 8018fba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	685b      	ldr	r3, [r3, #4]
 8018fc0:	4a09      	ldr	r2, [pc, #36]	; (8018fe8 <prvHeapInit+0xbc>)
 8018fc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018fc4:	4b09      	ldr	r3, [pc, #36]	; (8018fec <prvHeapInit+0xc0>)
 8018fc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018fca:	601a      	str	r2, [r3, #0]
}
 8018fcc:	bf00      	nop
 8018fce:	3714      	adds	r7, #20
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd6:	4770      	bx	lr
 8018fd8:	20000278 	.word	0x20000278
 8018fdc:	20008278 	.word	0x20008278
 8018fe0:	20008280 	.word	0x20008280
 8018fe4:	20008288 	.word	0x20008288
 8018fe8:	20008284 	.word	0x20008284
 8018fec:	2000828c 	.word	0x2000828c

08018ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018ff0:	b480      	push	{r7}
 8018ff2:	b085      	sub	sp, #20
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018ff8:	4b28      	ldr	r3, [pc, #160]	; (801909c <prvInsertBlockIntoFreeList+0xac>)
 8018ffa:	60fb      	str	r3, [r7, #12]
 8018ffc:	e002      	b.n	8019004 <prvInsertBlockIntoFreeList+0x14>
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	60fb      	str	r3, [r7, #12]
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	687a      	ldr	r2, [r7, #4]
 801900a:	429a      	cmp	r2, r3
 801900c:	d8f7      	bhi.n	8018ffe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	685b      	ldr	r3, [r3, #4]
 8019016:	68ba      	ldr	r2, [r7, #8]
 8019018:	4413      	add	r3, r2
 801901a:	687a      	ldr	r2, [r7, #4]
 801901c:	429a      	cmp	r2, r3
 801901e:	d108      	bne.n	8019032 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	685a      	ldr	r2, [r3, #4]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	685b      	ldr	r3, [r3, #4]
 8019028:	441a      	add	r2, r3
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	685b      	ldr	r3, [r3, #4]
 801903a:	68ba      	ldr	r2, [r7, #8]
 801903c:	441a      	add	r2, r3
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	429a      	cmp	r2, r3
 8019044:	d118      	bne.n	8019078 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	681a      	ldr	r2, [r3, #0]
 801904a:	4b15      	ldr	r3, [pc, #84]	; (80190a0 <prvInsertBlockIntoFreeList+0xb0>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	429a      	cmp	r2, r3
 8019050:	d00d      	beq.n	801906e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	685a      	ldr	r2, [r3, #4]
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	685b      	ldr	r3, [r3, #4]
 801905c:	441a      	add	r2, r3
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	681a      	ldr	r2, [r3, #0]
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	601a      	str	r2, [r3, #0]
 801906c:	e008      	b.n	8019080 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801906e:	4b0c      	ldr	r3, [pc, #48]	; (80190a0 <prvInsertBlockIntoFreeList+0xb0>)
 8019070:	681a      	ldr	r2, [r3, #0]
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	601a      	str	r2, [r3, #0]
 8019076:	e003      	b.n	8019080 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	681a      	ldr	r2, [r3, #0]
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019080:	68fa      	ldr	r2, [r7, #12]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	429a      	cmp	r2, r3
 8019086:	d002      	beq.n	801908e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	687a      	ldr	r2, [r7, #4]
 801908c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801908e:	bf00      	nop
 8019090:	3714      	adds	r7, #20
 8019092:	46bd      	mov	sp, r7
 8019094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019098:	4770      	bx	lr
 801909a:	bf00      	nop
 801909c:	20008278 	.word	0x20008278
 80190a0:	20008280 	.word	0x20008280

080190a4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b08c      	sub	sp, #48	; 0x30
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	4a51      	ldr	r2, [pc, #324]	; (80191f4 <I2Cx_MspInit+0x150>)
 80190b0:	4293      	cmp	r3, r2
 80190b2:	d14d      	bne.n	8019150 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80190b4:	4b50      	ldr	r3, [pc, #320]	; (80191f8 <I2Cx_MspInit+0x154>)
 80190b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190b8:	4a4f      	ldr	r2, [pc, #316]	; (80191f8 <I2Cx_MspInit+0x154>)
 80190ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190be:	6313      	str	r3, [r2, #48]	; 0x30
 80190c0:	4b4d      	ldr	r3, [pc, #308]	; (80191f8 <I2Cx_MspInit+0x154>)
 80190c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80190c8:	61bb      	str	r3, [r7, #24]
 80190ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80190cc:	2380      	movs	r3, #128	; 0x80
 80190ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80190d0:	2312      	movs	r3, #18
 80190d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80190d4:	2300      	movs	r3, #0
 80190d6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80190d8:	2302      	movs	r3, #2
 80190da:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80190dc:	2304      	movs	r3, #4
 80190de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80190e0:	f107 031c 	add.w	r3, r7, #28
 80190e4:	4619      	mov	r1, r3
 80190e6:	4845      	ldr	r0, [pc, #276]	; (80191fc <I2Cx_MspInit+0x158>)
 80190e8:	f7e9 fe3c 	bl	8002d64 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80190ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80190f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80190f2:	f107 031c 	add.w	r3, r7, #28
 80190f6:	4619      	mov	r1, r3
 80190f8:	4840      	ldr	r0, [pc, #256]	; (80191fc <I2Cx_MspInit+0x158>)
 80190fa:	f7e9 fe33 	bl	8002d64 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80190fe:	4b3e      	ldr	r3, [pc, #248]	; (80191f8 <I2Cx_MspInit+0x154>)
 8019100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019102:	4a3d      	ldr	r2, [pc, #244]	; (80191f8 <I2Cx_MspInit+0x154>)
 8019104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019108:	6413      	str	r3, [r2, #64]	; 0x40
 801910a:	4b3b      	ldr	r3, [pc, #236]	; (80191f8 <I2Cx_MspInit+0x154>)
 801910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801910e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019112:	617b      	str	r3, [r7, #20]
 8019114:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8019116:	4b38      	ldr	r3, [pc, #224]	; (80191f8 <I2Cx_MspInit+0x154>)
 8019118:	6a1b      	ldr	r3, [r3, #32]
 801911a:	4a37      	ldr	r2, [pc, #220]	; (80191f8 <I2Cx_MspInit+0x154>)
 801911c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019120:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8019122:	4b35      	ldr	r3, [pc, #212]	; (80191f8 <I2Cx_MspInit+0x154>)
 8019124:	6a1b      	ldr	r3, [r3, #32]
 8019126:	4a34      	ldr	r2, [pc, #208]	; (80191f8 <I2Cx_MspInit+0x154>)
 8019128:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801912c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 801912e:	2200      	movs	r2, #0
 8019130:	210f      	movs	r1, #15
 8019132:	2048      	movs	r0, #72	; 0x48
 8019134:	f7e8 f87a 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8019138:	2048      	movs	r0, #72	; 0x48
 801913a:	f7e8 f893 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 801913e:	2200      	movs	r2, #0
 8019140:	210f      	movs	r1, #15
 8019142:	2049      	movs	r0, #73	; 0x49
 8019144:	f7e8 f872 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8019148:	2049      	movs	r0, #73	; 0x49
 801914a:	f7e8 f88b 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 801914e:	e04d      	b.n	80191ec <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8019150:	4b29      	ldr	r3, [pc, #164]	; (80191f8 <I2Cx_MspInit+0x154>)
 8019152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019154:	4a28      	ldr	r2, [pc, #160]	; (80191f8 <I2Cx_MspInit+0x154>)
 8019156:	f043 0302 	orr.w	r3, r3, #2
 801915a:	6313      	str	r3, [r2, #48]	; 0x30
 801915c:	4b26      	ldr	r3, [pc, #152]	; (80191f8 <I2Cx_MspInit+0x154>)
 801915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019160:	f003 0302 	and.w	r3, r3, #2
 8019164:	613b      	str	r3, [r7, #16]
 8019166:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8019168:	f44f 7380 	mov.w	r3, #256	; 0x100
 801916c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 801916e:	2312      	movs	r3, #18
 8019170:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8019172:	2300      	movs	r3, #0
 8019174:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8019176:	2302      	movs	r3, #2
 8019178:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 801917a:	2304      	movs	r3, #4
 801917c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 801917e:	f107 031c 	add.w	r3, r7, #28
 8019182:	4619      	mov	r1, r3
 8019184:	481e      	ldr	r0, [pc, #120]	; (8019200 <I2Cx_MspInit+0x15c>)
 8019186:	f7e9 fded 	bl	8002d64 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 801918a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801918e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8019190:	f107 031c 	add.w	r3, r7, #28
 8019194:	4619      	mov	r1, r3
 8019196:	481a      	ldr	r0, [pc, #104]	; (8019200 <I2Cx_MspInit+0x15c>)
 8019198:	f7e9 fde4 	bl	8002d64 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 801919c:	4b16      	ldr	r3, [pc, #88]	; (80191f8 <I2Cx_MspInit+0x154>)
 801919e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191a0:	4a15      	ldr	r2, [pc, #84]	; (80191f8 <I2Cx_MspInit+0x154>)
 80191a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80191a6:	6413      	str	r3, [r2, #64]	; 0x40
 80191a8:	4b13      	ldr	r3, [pc, #76]	; (80191f8 <I2Cx_MspInit+0x154>)
 80191aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80191b0:	60fb      	str	r3, [r7, #12]
 80191b2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80191b4:	4b10      	ldr	r3, [pc, #64]	; (80191f8 <I2Cx_MspInit+0x154>)
 80191b6:	6a1b      	ldr	r3, [r3, #32]
 80191b8:	4a0f      	ldr	r2, [pc, #60]	; (80191f8 <I2Cx_MspInit+0x154>)
 80191ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80191be:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80191c0:	4b0d      	ldr	r3, [pc, #52]	; (80191f8 <I2Cx_MspInit+0x154>)
 80191c2:	6a1b      	ldr	r3, [r3, #32]
 80191c4:	4a0c      	ldr	r2, [pc, #48]	; (80191f8 <I2Cx_MspInit+0x154>)
 80191c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80191ca:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80191cc:	2200      	movs	r2, #0
 80191ce:	210f      	movs	r1, #15
 80191d0:	201f      	movs	r0, #31
 80191d2:	f7e8 f82b 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80191d6:	201f      	movs	r0, #31
 80191d8:	f7e8 f844 	bl	8001264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80191dc:	2200      	movs	r2, #0
 80191de:	210f      	movs	r1, #15
 80191e0:	2020      	movs	r0, #32
 80191e2:	f7e8 f823 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80191e6:	2020      	movs	r0, #32
 80191e8:	f7e8 f83c 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 80191ec:	bf00      	nop
 80191ee:	3730      	adds	r7, #48	; 0x30
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	20008290 	.word	0x20008290
 80191f8:	40023800 	.word	0x40023800
 80191fc:	40021c00 	.word	0x40021c00
 8019200:	40020400 	.word	0x40020400

08019204 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b082      	sub	sp, #8
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f7eb ffd7 	bl	80051c0 <HAL_I2C_GetState>
 8019212:	4603      	mov	r3, r0
 8019214:	2b00      	cmp	r3, #0
 8019216:	d125      	bne.n	8019264 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	4a14      	ldr	r2, [pc, #80]	; (801926c <I2Cx_Init+0x68>)
 801921c:	4293      	cmp	r3, r2
 801921e:	d103      	bne.n	8019228 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	4a13      	ldr	r2, [pc, #76]	; (8019270 <I2Cx_Init+0x6c>)
 8019224:	601a      	str	r2, [r3, #0]
 8019226:	e002      	b.n	801922e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	4a12      	ldr	r2, [pc, #72]	; (8019274 <I2Cx_Init+0x70>)
 801922c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	4a11      	ldr	r2, [pc, #68]	; (8019278 <I2Cx_Init+0x74>)
 8019232:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	2200      	movs	r2, #0
 8019238:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	2201      	movs	r2, #1
 801923e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	2200      	movs	r2, #0
 8019244:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	2200      	movs	r2, #0
 801924a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	2200      	movs	r2, #0
 8019250:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	2200      	movs	r2, #0
 8019256:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8019258:	6878      	ldr	r0, [r7, #4]
 801925a:	f7ff ff23 	bl	80190a4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 801925e:	6878      	ldr	r0, [r7, #4]
 8019260:	f7eb fcc0 	bl	8004be4 <HAL_I2C_Init>
  }
}
 8019264:	bf00      	nop
 8019266:	3708      	adds	r7, #8
 8019268:	46bd      	mov	sp, r7
 801926a:	bd80      	pop	{r7, pc}
 801926c:	20008290 	.word	0x20008290
 8019270:	40005c00 	.word	0x40005c00
 8019274:	40005400 	.word	0x40005400
 8019278:	40912732 	.word	0x40912732

0801927c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b08a      	sub	sp, #40	; 0x28
 8019280:	af04      	add	r7, sp, #16
 8019282:	60f8      	str	r0, [r7, #12]
 8019284:	4608      	mov	r0, r1
 8019286:	4611      	mov	r1, r2
 8019288:	461a      	mov	r2, r3
 801928a:	4603      	mov	r3, r0
 801928c:	72fb      	strb	r3, [r7, #11]
 801928e:	460b      	mov	r3, r1
 8019290:	813b      	strh	r3, [r7, #8]
 8019292:	4613      	mov	r3, r2
 8019294:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8019296:	2300      	movs	r3, #0
 8019298:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 801929a:	7afb      	ldrb	r3, [r7, #11]
 801929c:	b299      	uxth	r1, r3
 801929e:	88f8      	ldrh	r0, [r7, #6]
 80192a0:	893a      	ldrh	r2, [r7, #8]
 80192a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80192a6:	9302      	str	r3, [sp, #8]
 80192a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80192aa:	9301      	str	r3, [sp, #4]
 80192ac:	6a3b      	ldr	r3, [r7, #32]
 80192ae:	9300      	str	r3, [sp, #0]
 80192b0:	4603      	mov	r3, r0
 80192b2:	68f8      	ldr	r0, [r7, #12]
 80192b4:	f7eb fe6a 	bl	8004f8c <HAL_I2C_Mem_Read>
 80192b8:	4603      	mov	r3, r0
 80192ba:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80192bc:	7dfb      	ldrb	r3, [r7, #23]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d004      	beq.n	80192cc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80192c2:	7afb      	ldrb	r3, [r7, #11]
 80192c4:	4619      	mov	r1, r3
 80192c6:	68f8      	ldr	r0, [r7, #12]
 80192c8:	f000 f832 	bl	8019330 <I2Cx_Error>
  }
  return status;    
 80192cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	3718      	adds	r7, #24
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}

080192d6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80192d6:	b580      	push	{r7, lr}
 80192d8:	b08a      	sub	sp, #40	; 0x28
 80192da:	af04      	add	r7, sp, #16
 80192dc:	60f8      	str	r0, [r7, #12]
 80192de:	4608      	mov	r0, r1
 80192e0:	4611      	mov	r1, r2
 80192e2:	461a      	mov	r2, r3
 80192e4:	4603      	mov	r3, r0
 80192e6:	72fb      	strb	r3, [r7, #11]
 80192e8:	460b      	mov	r3, r1
 80192ea:	813b      	strh	r3, [r7, #8]
 80192ec:	4613      	mov	r3, r2
 80192ee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80192f0:	2300      	movs	r3, #0
 80192f2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80192f4:	7afb      	ldrb	r3, [r7, #11]
 80192f6:	b299      	uxth	r1, r3
 80192f8:	88f8      	ldrh	r0, [r7, #6]
 80192fa:	893a      	ldrh	r2, [r7, #8]
 80192fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019300:	9302      	str	r3, [sp, #8]
 8019302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019304:	9301      	str	r3, [sp, #4]
 8019306:	6a3b      	ldr	r3, [r7, #32]
 8019308:	9300      	str	r3, [sp, #0]
 801930a:	4603      	mov	r3, r0
 801930c:	68f8      	ldr	r0, [r7, #12]
 801930e:	f7eb fd29 	bl	8004d64 <HAL_I2C_Mem_Write>
 8019312:	4603      	mov	r3, r0
 8019314:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8019316:	7dfb      	ldrb	r3, [r7, #23]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d004      	beq.n	8019326 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 801931c:	7afb      	ldrb	r3, [r7, #11]
 801931e:	4619      	mov	r1, r3
 8019320:	68f8      	ldr	r0, [r7, #12]
 8019322:	f000 f805 	bl	8019330 <I2Cx_Error>
  }
  return status;
 8019326:	7dfb      	ldrb	r3, [r7, #23]
}
 8019328:	4618      	mov	r0, r3
 801932a:	3718      	adds	r7, #24
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}

08019330 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b082      	sub	sp, #8
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
 8019338:	460b      	mov	r3, r1
 801933a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 801933c:	6878      	ldr	r0, [r7, #4]
 801933e:	f7eb fce1 	bl	8004d04 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8019342:	6878      	ldr	r0, [r7, #4]
 8019344:	f7ff ff5e 	bl	8019204 <I2Cx_Init>
}
 8019348:	bf00      	nop
 801934a:	3708      	adds	r7, #8
 801934c:	46bd      	mov	sp, r7
 801934e:	bd80      	pop	{r7, pc}

08019350 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8019350:	b580      	push	{r7, lr}
 8019352:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8019354:	4802      	ldr	r0, [pc, #8]	; (8019360 <TS_IO_Init+0x10>)
 8019356:	f7ff ff55 	bl	8019204 <I2Cx_Init>
}
 801935a:	bf00      	nop
 801935c:	bd80      	pop	{r7, pc}
 801935e:	bf00      	nop
 8019360:	20008290 	.word	0x20008290

08019364 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b084      	sub	sp, #16
 8019368:	af02      	add	r7, sp, #8
 801936a:	4603      	mov	r3, r0
 801936c:	71fb      	strb	r3, [r7, #7]
 801936e:	460b      	mov	r3, r1
 8019370:	71bb      	strb	r3, [r7, #6]
 8019372:	4613      	mov	r3, r2
 8019374:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8019376:	79bb      	ldrb	r3, [r7, #6]
 8019378:	b29a      	uxth	r2, r3
 801937a:	79f9      	ldrb	r1, [r7, #7]
 801937c:	2301      	movs	r3, #1
 801937e:	9301      	str	r3, [sp, #4]
 8019380:	1d7b      	adds	r3, r7, #5
 8019382:	9300      	str	r3, [sp, #0]
 8019384:	2301      	movs	r3, #1
 8019386:	4803      	ldr	r0, [pc, #12]	; (8019394 <TS_IO_Write+0x30>)
 8019388:	f7ff ffa5 	bl	80192d6 <I2Cx_WriteMultiple>
}
 801938c:	bf00      	nop
 801938e:	3708      	adds	r7, #8
 8019390:	46bd      	mov	sp, r7
 8019392:	bd80      	pop	{r7, pc}
 8019394:	20008290 	.word	0x20008290

08019398 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b086      	sub	sp, #24
 801939c:	af02      	add	r7, sp, #8
 801939e:	4603      	mov	r3, r0
 80193a0:	460a      	mov	r2, r1
 80193a2:	71fb      	strb	r3, [r7, #7]
 80193a4:	4613      	mov	r3, r2
 80193a6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80193a8:	2300      	movs	r3, #0
 80193aa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80193ac:	79bb      	ldrb	r3, [r7, #6]
 80193ae:	b29a      	uxth	r2, r3
 80193b0:	79f9      	ldrb	r1, [r7, #7]
 80193b2:	2301      	movs	r3, #1
 80193b4:	9301      	str	r3, [sp, #4]
 80193b6:	f107 030f 	add.w	r3, r7, #15
 80193ba:	9300      	str	r3, [sp, #0]
 80193bc:	2301      	movs	r3, #1
 80193be:	4804      	ldr	r0, [pc, #16]	; (80193d0 <TS_IO_Read+0x38>)
 80193c0:	f7ff ff5c 	bl	801927c <I2Cx_ReadMultiple>

  return read_value;
 80193c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80193c6:	4618      	mov	r0, r3
 80193c8:	3710      	adds	r7, #16
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}
 80193ce:	bf00      	nop
 80193d0:	20008290 	.word	0x20008290

080193d4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b082      	sub	sp, #8
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80193dc:	6878      	ldr	r0, [r7, #4]
 80193de:	f7e7 fbb7 	bl	8000b50 <HAL_Delay>
}
 80193e2:	bf00      	nop
 80193e4:	3708      	adds	r7, #8
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd80      	pop	{r7, pc}
	...

080193ec <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b084      	sub	sp, #16
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	4603      	mov	r3, r0
 80193f4:	460a      	mov	r2, r1
 80193f6:	80fb      	strh	r3, [r7, #6]
 80193f8:	4613      	mov	r3, r2
 80193fa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80193fc:	2300      	movs	r3, #0
 80193fe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8019400:	4a14      	ldr	r2, [pc, #80]	; (8019454 <BSP_TS_Init+0x68>)
 8019402:	88fb      	ldrh	r3, [r7, #6]
 8019404:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8019406:	4a14      	ldr	r2, [pc, #80]	; (8019458 <BSP_TS_Init+0x6c>)
 8019408:	88bb      	ldrh	r3, [r7, #4]
 801940a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 801940c:	4b13      	ldr	r3, [pc, #76]	; (801945c <BSP_TS_Init+0x70>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	2070      	movs	r0, #112	; 0x70
 8019412:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8019414:	4b11      	ldr	r3, [pc, #68]	; (801945c <BSP_TS_Init+0x70>)
 8019416:	685b      	ldr	r3, [r3, #4]
 8019418:	2070      	movs	r0, #112	; 0x70
 801941a:	4798      	blx	r3
 801941c:	4603      	mov	r3, r0
 801941e:	2b51      	cmp	r3, #81	; 0x51
 8019420:	d111      	bne.n	8019446 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8019422:	4b0f      	ldr	r3, [pc, #60]	; (8019460 <BSP_TS_Init+0x74>)
 8019424:	4a0d      	ldr	r2, [pc, #52]	; (801945c <BSP_TS_Init+0x70>)
 8019426:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8019428:	4b0e      	ldr	r3, [pc, #56]	; (8019464 <BSP_TS_Init+0x78>)
 801942a:	2270      	movs	r2, #112	; 0x70
 801942c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 801942e:	4b0e      	ldr	r3, [pc, #56]	; (8019468 <BSP_TS_Init+0x7c>)
 8019430:	2208      	movs	r2, #8
 8019432:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8019434:	4b0a      	ldr	r3, [pc, #40]	; (8019460 <BSP_TS_Init+0x74>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	68db      	ldr	r3, [r3, #12]
 801943a:	4a0a      	ldr	r2, [pc, #40]	; (8019464 <BSP_TS_Init+0x78>)
 801943c:	7812      	ldrb	r2, [r2, #0]
 801943e:	b292      	uxth	r2, r2
 8019440:	4610      	mov	r0, r2
 8019442:	4798      	blx	r3
 8019444:	e001      	b.n	801944a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8019446:	2303      	movs	r3, #3
 8019448:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801944a:	7bfb      	ldrb	r3, [r7, #15]
}
 801944c:	4618      	mov	r0, r3
 801944e:	3710      	adds	r7, #16
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}
 8019454:	200082e0 	.word	0x200082e0
 8019458:	200082e2 	.word	0x200082e2
 801945c:	20000000 	.word	0x20000000
 8019460:	200082dc 	.word	0x200082dc
 8019464:	200082e5 	.word	0x200082e5
 8019468:	200082e4 	.word	0x200082e4

0801946c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 801946c:	b590      	push	{r4, r7, lr}
 801946e:	b097      	sub	sp, #92	; 0x5c
 8019470:	af02      	add	r7, sp, #8
 8019472:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8019474:	2300      	movs	r3, #0
 8019476:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 801947a:	2300      	movs	r3, #0
 801947c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 801947e:	2300      	movs	r3, #0
 8019480:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8019482:	2300      	movs	r3, #0
 8019484:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8019486:	4b97      	ldr	r3, [pc, #604]	; (80196e4 <BSP_TS_GetState+0x278>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	691b      	ldr	r3, [r3, #16]
 801948c:	4a96      	ldr	r2, [pc, #600]	; (80196e8 <BSP_TS_GetState+0x27c>)
 801948e:	7812      	ldrb	r2, [r2, #0]
 8019490:	b292      	uxth	r2, r2
 8019492:	4610      	mov	r0, r2
 8019494:	4798      	blx	r3
 8019496:	4603      	mov	r3, r0
 8019498:	461a      	mov	r2, r3
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	781b      	ldrb	r3, [r3, #0]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	f000 81a8 	beq.w	80197f8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80194a8:	2300      	movs	r3, #0
 80194aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80194ac:	e197      	b.n	80197de <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80194ae:	4b8d      	ldr	r3, [pc, #564]	; (80196e4 <BSP_TS_GetState+0x278>)
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	695b      	ldr	r3, [r3, #20]
 80194b4:	4a8c      	ldr	r2, [pc, #560]	; (80196e8 <BSP_TS_GetState+0x27c>)
 80194b6:	7812      	ldrb	r2, [r2, #0]
 80194b8:	b290      	uxth	r0, r2
 80194ba:	f107 0120 	add.w	r1, r7, #32
 80194be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194c0:	0052      	lsls	r2, r2, #1
 80194c2:	188c      	adds	r4, r1, r2
 80194c4:	f107 0114 	add.w	r1, r7, #20
 80194c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194ca:	0052      	lsls	r2, r2, #1
 80194cc:	440a      	add	r2, r1
 80194ce:	4621      	mov	r1, r4
 80194d0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80194d2:	4b86      	ldr	r3, [pc, #536]	; (80196ec <BSP_TS_GetState+0x280>)
 80194d4:	781b      	ldrb	r3, [r3, #0]
 80194d6:	2b01      	cmp	r3, #1
 80194d8:	d11b      	bne.n	8019512 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80194da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194dc:	005b      	lsls	r3, r3, #1
 80194de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80194e2:	4413      	add	r3, r2
 80194e4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80194e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194ea:	005b      	lsls	r3, r3, #1
 80194ec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80194f0:	440b      	add	r3, r1
 80194f2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80194f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194f8:	005b      	lsls	r3, r3, #1
 80194fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80194fe:	4413      	add	r3, r2
 8019500:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8019504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019506:	005b      	lsls	r3, r3, #1
 8019508:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801950c:	440b      	add	r3, r1
 801950e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8019512:	4b76      	ldr	r3, [pc, #472]	; (80196ec <BSP_TS_GetState+0x280>)
 8019514:	781b      	ldrb	r3, [r3, #0]
 8019516:	f003 0302 	and.w	r3, r3, #2
 801951a:	2b00      	cmp	r3, #0
 801951c:	d010      	beq.n	8019540 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 801951e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019520:	005b      	lsls	r3, r3, #1
 8019522:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019526:	4413      	add	r3, r2
 8019528:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 801952c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8019530:	b29a      	uxth	r2, r3
 8019532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019534:	005b      	lsls	r3, r3, #1
 8019536:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801953a:	440b      	add	r3, r1
 801953c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8019540:	4b6a      	ldr	r3, [pc, #424]	; (80196ec <BSP_TS_GetState+0x280>)
 8019542:	781b      	ldrb	r3, [r3, #0]
 8019544:	f003 0304 	and.w	r3, r3, #4
 8019548:	2b00      	cmp	r3, #0
 801954a:	d010      	beq.n	801956e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 801954c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801954e:	005b      	lsls	r3, r3, #1
 8019550:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019554:	4413      	add	r3, r2
 8019556:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 801955a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801955e:	b29a      	uxth	r2, r3
 8019560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019562:	005b      	lsls	r3, r3, #1
 8019564:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8019568:	440b      	add	r3, r1
 801956a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 801956e:	4b5f      	ldr	r3, [pc, #380]	; (80196ec <BSP_TS_GetState+0x280>)
 8019570:	781b      	ldrb	r3, [r3, #0]
 8019572:	f003 0308 	and.w	r3, r3, #8
 8019576:	2b00      	cmp	r3, #0
 8019578:	d01b      	beq.n	80195b2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 801957a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801957c:	005b      	lsls	r3, r3, #1
 801957e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019582:	4413      	add	r3, r2
 8019584:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8019588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801958a:	005b      	lsls	r3, r3, #1
 801958c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8019590:	440b      	add	r3, r1
 8019592:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8019596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019598:	005b      	lsls	r3, r3, #1
 801959a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801959e:	4413      	add	r3, r2
 80195a0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80195a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195a6:	005b      	lsls	r3, r3, #1
 80195a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80195ac:	440b      	add	r3, r1
 80195ae:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80195b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195b4:	005b      	lsls	r3, r3, #1
 80195b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80195ba:	4413      	add	r3, r2
 80195bc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80195c0:	4619      	mov	r1, r3
 80195c2:	4a4b      	ldr	r2, [pc, #300]	; (80196f0 <BSP_TS_GetState+0x284>)
 80195c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80195ca:	4299      	cmp	r1, r3
 80195cc:	d90e      	bls.n	80195ec <BSP_TS_GetState+0x180>
 80195ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195d0:	005b      	lsls	r3, r3, #1
 80195d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80195d6:	4413      	add	r3, r2
 80195d8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80195dc:	4944      	ldr	r1, [pc, #272]	; (80196f0 <BSP_TS_GetState+0x284>)
 80195de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80195e4:	b29b      	uxth	r3, r3
 80195e6:	1ad3      	subs	r3, r2, r3
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	e00d      	b.n	8019608 <BSP_TS_GetState+0x19c>
 80195ec:	4a40      	ldr	r2, [pc, #256]	; (80196f0 <BSP_TS_GetState+0x284>)
 80195ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80195f4:	b29a      	uxth	r2, r3
 80195f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80195f8:	005b      	lsls	r3, r3, #1
 80195fa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80195fe:	440b      	add	r3, r1
 8019600:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8019604:	1ad3      	subs	r3, r2, r3
 8019606:	b29b      	uxth	r3, r3
 8019608:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801960c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801960e:	005b      	lsls	r3, r3, #1
 8019610:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019614:	4413      	add	r3, r2
 8019616:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801961a:	4619      	mov	r1, r3
 801961c:	4a35      	ldr	r2, [pc, #212]	; (80196f4 <BSP_TS_GetState+0x288>)
 801961e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019624:	4299      	cmp	r1, r3
 8019626:	d90e      	bls.n	8019646 <BSP_TS_GetState+0x1da>
 8019628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801962a:	005b      	lsls	r3, r3, #1
 801962c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019630:	4413      	add	r3, r2
 8019632:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8019636:	492f      	ldr	r1, [pc, #188]	; (80196f4 <BSP_TS_GetState+0x288>)
 8019638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801963a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801963e:	b29b      	uxth	r3, r3
 8019640:	1ad3      	subs	r3, r2, r3
 8019642:	b29b      	uxth	r3, r3
 8019644:	e00d      	b.n	8019662 <BSP_TS_GetState+0x1f6>
 8019646:	4a2b      	ldr	r2, [pc, #172]	; (80196f4 <BSP_TS_GetState+0x288>)
 8019648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801964a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801964e:	b29a      	uxth	r2, r3
 8019650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019652:	005b      	lsls	r3, r3, #1
 8019654:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8019658:	440b      	add	r3, r1
 801965a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801965e:	1ad3      	subs	r3, r2, r3
 8019660:	b29b      	uxth	r3, r3
 8019662:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8019666:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801966a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801966e:	4413      	add	r3, r2
 8019670:	2b05      	cmp	r3, #5
 8019672:	dd17      	ble.n	80196a4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8019674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019676:	005b      	lsls	r3, r3, #1
 8019678:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801967c:	4413      	add	r3, r2
 801967e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8019682:	4619      	mov	r1, r3
 8019684:	4a1a      	ldr	r2, [pc, #104]	; (80196f0 <BSP_TS_GetState+0x284>)
 8019686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019688:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 801968c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801968e:	005b      	lsls	r3, r3, #1
 8019690:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019694:	4413      	add	r3, r2
 8019696:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801969a:	4619      	mov	r1, r3
 801969c:	4a15      	ldr	r2, [pc, #84]	; (80196f4 <BSP_TS_GetState+0x288>)
 801969e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80196a4:	4b10      	ldr	r3, [pc, #64]	; (80196e8 <BSP_TS_GetState+0x27c>)
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	2b70      	cmp	r3, #112	; 0x70
 80196aa:	d125      	bne.n	80196f8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80196ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196ae:	005b      	lsls	r3, r3, #1
 80196b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80196b4:	4413      	add	r3, r2
 80196b6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80196ba:	687a      	ldr	r2, [r7, #4]
 80196bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196be:	005b      	lsls	r3, r3, #1
 80196c0:	4413      	add	r3, r2
 80196c2:	460a      	mov	r2, r1
 80196c4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80196c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196c8:	005b      	lsls	r3, r3, #1
 80196ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80196ce:	4413      	add	r3, r2
 80196d0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80196d4:	687a      	ldr	r2, [r7, #4]
 80196d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80196d8:	3304      	adds	r3, #4
 80196da:	005b      	lsls	r3, r3, #1
 80196dc:	4413      	add	r3, r2
 80196de:	460a      	mov	r2, r1
 80196e0:	809a      	strh	r2, [r3, #4]
 80196e2:	e02c      	b.n	801973e <BSP_TS_GetState+0x2d2>
 80196e4:	200082dc 	.word	0x200082dc
 80196e8:	200082e5 	.word	0x200082e5
 80196ec:	200082e4 	.word	0x200082e4
 80196f0:	200082e8 	.word	0x200082e8
 80196f4:	200082fc 	.word	0x200082fc
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80196f8:	4b42      	ldr	r3, [pc, #264]	; (8019804 <BSP_TS_GetState+0x398>)
 80196fa:	881b      	ldrh	r3, [r3, #0]
 80196fc:	4619      	mov	r1, r3
 80196fe:	4a42      	ldr	r2, [pc, #264]	; (8019808 <BSP_TS_GetState+0x39c>)
 8019700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019706:	fb03 f301 	mul.w	r3, r3, r1
 801970a:	0b1b      	lsrs	r3, r3, #12
 801970c:	b299      	uxth	r1, r3
 801970e:	687a      	ldr	r2, [r7, #4]
 8019710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019712:	005b      	lsls	r3, r3, #1
 8019714:	4413      	add	r3, r2
 8019716:	460a      	mov	r2, r1
 8019718:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801971a:	4b3c      	ldr	r3, [pc, #240]	; (801980c <BSP_TS_GetState+0x3a0>)
 801971c:	881b      	ldrh	r3, [r3, #0]
 801971e:	4619      	mov	r1, r3
 8019720:	4a3b      	ldr	r2, [pc, #236]	; (8019810 <BSP_TS_GetState+0x3a4>)
 8019722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019728:	fb03 f301 	mul.w	r3, r3, r1
 801972c:	0b1b      	lsrs	r3, r3, #12
 801972e:	b299      	uxth	r1, r3
 8019730:	687a      	ldr	r2, [r7, #4]
 8019732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019734:	3304      	adds	r3, #4
 8019736:	005b      	lsls	r3, r3, #1
 8019738:	4413      	add	r3, r2
 801973a:	460a      	mov	r2, r1
 801973c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 801973e:	4b35      	ldr	r3, [pc, #212]	; (8019814 <BSP_TS_GetState+0x3a8>)
 8019740:	781b      	ldrb	r3, [r3, #0]
 8019742:	b298      	uxth	r0, r3
 8019744:	f107 010c 	add.w	r1, r7, #12
 8019748:	f107 0210 	add.w	r2, r7, #16
 801974c:	f107 0308 	add.w	r3, r7, #8
 8019750:	9300      	str	r3, [sp, #0]
 8019752:	460b      	mov	r3, r1
 8019754:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8019756:	f7e7 f8f5 	bl	8000944 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 801975a:	693b      	ldr	r3, [r7, #16]
 801975c:	b2d9      	uxtb	r1, r3
 801975e:	687a      	ldr	r2, [r7, #4]
 8019760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019762:	4413      	add	r3, r2
 8019764:	3316      	adds	r3, #22
 8019766:	460a      	mov	r2, r1
 8019768:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	b2d9      	uxtb	r1, r3
 801976e:	687a      	ldr	r2, [r7, #4]
 8019770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019772:	4413      	add	r3, r2
 8019774:	3320      	adds	r3, #32
 8019776:	460a      	mov	r2, r1
 8019778:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	2b03      	cmp	r3, #3
 801977e:	d827      	bhi.n	80197d0 <BSP_TS_GetState+0x364>
 8019780:	a201      	add	r2, pc, #4	; (adr r2, 8019788 <BSP_TS_GetState+0x31c>)
 8019782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019786:	bf00      	nop
 8019788:	08019799 	.word	0x08019799
 801978c:	080197a7 	.word	0x080197a7
 8019790:	080197b5 	.word	0x080197b5
 8019794:	080197c3 	.word	0x080197c3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8019798:	687a      	ldr	r2, [r7, #4]
 801979a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801979c:	4413      	add	r3, r2
 801979e:	331b      	adds	r3, #27
 80197a0:	2201      	movs	r2, #1
 80197a2:	701a      	strb	r2, [r3, #0]
          break;
 80197a4:	e018      	b.n	80197d8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80197a6:	687a      	ldr	r2, [r7, #4]
 80197a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197aa:	4413      	add	r3, r2
 80197ac:	331b      	adds	r3, #27
 80197ae:	2202      	movs	r2, #2
 80197b0:	701a      	strb	r2, [r3, #0]
          break;
 80197b2:	e011      	b.n	80197d8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80197b4:	687a      	ldr	r2, [r7, #4]
 80197b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197b8:	4413      	add	r3, r2
 80197ba:	331b      	adds	r3, #27
 80197bc:	2203      	movs	r2, #3
 80197be:	701a      	strb	r2, [r3, #0]
          break;
 80197c0:	e00a      	b.n	80197d8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80197c2:	687a      	ldr	r2, [r7, #4]
 80197c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197c6:	4413      	add	r3, r2
 80197c8:	331b      	adds	r3, #27
 80197ca:	2200      	movs	r2, #0
 80197cc:	701a      	strb	r2, [r3, #0]
          break;
 80197ce:	e003      	b.n	80197d8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80197d0:	2301      	movs	r3, #1
 80197d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80197d6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80197d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197da:	3301      	adds	r3, #1
 80197dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	781b      	ldrb	r3, [r3, #0]
 80197e2:	461a      	mov	r2, r3
 80197e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80197e6:	4293      	cmp	r3, r2
 80197e8:	f4ff ae61 	bcc.w	80194ae <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80197ec:	6878      	ldr	r0, [r7, #4]
 80197ee:	f000 f813 	bl	8019818 <BSP_TS_Get_GestureId>
 80197f2:	4603      	mov	r3, r0
 80197f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80197f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80197fc:	4618      	mov	r0, r3
 80197fe:	3754      	adds	r7, #84	; 0x54
 8019800:	46bd      	mov	sp, r7
 8019802:	bd90      	pop	{r4, r7, pc}
 8019804:	200082e0 	.word	0x200082e0
 8019808:	200082e8 	.word	0x200082e8
 801980c:	200082e2 	.word	0x200082e2
 8019810:	200082fc 	.word	0x200082fc
 8019814:	200082e5 	.word	0x200082e5

08019818 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b084      	sub	sp, #16
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8019820:	2300      	movs	r3, #0
 8019822:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8019824:	2300      	movs	r3, #0
 8019826:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8019828:	4b1f      	ldr	r3, [pc, #124]	; (80198a8 <BSP_TS_Get_GestureId+0x90>)
 801982a:	781b      	ldrb	r3, [r3, #0]
 801982c:	b29b      	uxth	r3, r3
 801982e:	f107 0208 	add.w	r2, r7, #8
 8019832:	4611      	mov	r1, r2
 8019834:	4618      	mov	r0, r3
 8019836:	f7e7 f86c 	bl	8000912 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 801983a:	68bb      	ldr	r3, [r7, #8]
 801983c:	2b18      	cmp	r3, #24
 801983e:	d01b      	beq.n	8019878 <BSP_TS_Get_GestureId+0x60>
 8019840:	2b18      	cmp	r3, #24
 8019842:	d806      	bhi.n	8019852 <BSP_TS_Get_GestureId+0x3a>
 8019844:	2b10      	cmp	r3, #16
 8019846:	d00f      	beq.n	8019868 <BSP_TS_Get_GestureId+0x50>
 8019848:	2b14      	cmp	r3, #20
 801984a:	d011      	beq.n	8019870 <BSP_TS_Get_GestureId+0x58>
 801984c:	2b00      	cmp	r3, #0
 801984e:	d007      	beq.n	8019860 <BSP_TS_Get_GestureId+0x48>
 8019850:	e022      	b.n	8019898 <BSP_TS_Get_GestureId+0x80>
 8019852:	2b40      	cmp	r3, #64	; 0x40
 8019854:	d018      	beq.n	8019888 <BSP_TS_Get_GestureId+0x70>
 8019856:	2b49      	cmp	r3, #73	; 0x49
 8019858:	d01a      	beq.n	8019890 <BSP_TS_Get_GestureId+0x78>
 801985a:	2b1c      	cmp	r3, #28
 801985c:	d010      	beq.n	8019880 <BSP_TS_Get_GestureId+0x68>
 801985e:	e01b      	b.n	8019898 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2200      	movs	r2, #0
 8019864:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8019866:	e01a      	b.n	801989e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	2201      	movs	r2, #1
 801986c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801986e:	e016      	b.n	801989e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	2202      	movs	r2, #2
 8019874:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8019876:	e012      	b.n	801989e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	2203      	movs	r2, #3
 801987c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801987e:	e00e      	b.n	801989e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	2204      	movs	r2, #4
 8019884:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8019886:	e00a      	b.n	801989e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	2205      	movs	r2, #5
 801988c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801988e:	e006      	b.n	801989e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	2206      	movs	r2, #6
 8019894:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8019896:	e002      	b.n	801989e <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8019898:	2301      	movs	r3, #1
 801989a:	73fb      	strb	r3, [r7, #15]
      break;
 801989c:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 801989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	3710      	adds	r7, #16
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	200082e5 	.word	0x200082e5

080198ac <__tcf_1>:
static Texts texts; ///< The texts

template <class T>
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
{
    static T hal(dma, display, tc, width, height);
 80198ac:	4770      	bx	lr

080198ae <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80198ae:	2001      	movs	r0, #1
 80198b0:	4770      	bx	lr

080198b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80198b2:	200c      	movs	r0, #12
 80198b4:	4770      	bx	lr

080198b6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80198b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80198ba:	008b      	lsls	r3, r1, #2
 80198bc:	3308      	adds	r3, #8
    }
 80198be:	4418      	add	r0, r3
 80198c0:	4770      	bx	lr

080198c2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80198c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80198c6:	008b      	lsls	r3, r1, #2
 80198c8:	3308      	adds	r3, #8
    }
 80198ca:	4418      	add	r0, r3
 80198cc:	4770      	bx	lr

080198ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80198ce:	2001      	movs	r0, #1
 80198d0:	4770      	bx	lr

080198d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80198d2:	f242 000c 	movw	r0, #8204	; 0x200c
 80198d6:	4770      	bx	lr

080198d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80198d8:	f242 030c 	movw	r3, #8204	; 0x200c
 80198dc:	fb03 f101 	mul.w	r1, r3, r1
 80198e0:	3108      	adds	r1, #8
    }
 80198e2:	4408      	add	r0, r1
 80198e4:	4770      	bx	lr

080198e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80198e6:	f242 030c 	movw	r3, #8204	; 0x200c
 80198ea:	fb03 f101 	mul.w	r1, r3, r1
 80198ee:	3108      	adds	r1, #8
    }
 80198f0:	4408      	add	r0, r1
 80198f2:	4770      	bx	lr

080198f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80198f4:	2001      	movs	r0, #1
 80198f6:	4770      	bx	lr

080198f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80198f8:	2010      	movs	r0, #16
 80198fa:	4770      	bx	lr

080198fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80198fc:	0109      	lsls	r1, r1, #4
 80198fe:	3108      	adds	r1, #8
    }
 8019900:	4408      	add	r0, r1
 8019902:	4770      	bx	lr

08019904 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8019904:	0109      	lsls	r1, r1, #4
 8019906:	3108      	adds	r1, #8
    }
 8019908:	4408      	add	r0, r1
 801990a:	4770      	bx	lr

0801990c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801990c:	b508      	push	{r3, lr}
    {
        app.gotoScreen3ScreenNoTransition();
 801990e:	4608      	mov	r0, r1
 8019910:	f003 fe92 	bl	801d638 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
    }
 8019914:	bd08      	pop	{r3, pc}
	...

08019918 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8019918:	b510      	push	{r4, lr}
 801991a:	4604      	mov	r4, r0
    }
 801991c:	4b02      	ldr	r3, [pc, #8]	; (8019928 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 801991e:	6003      	str	r3, [r0, #0]
 8019920:	f004 fc32 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019924:	4620      	mov	r0, r4
 8019926:	bd10      	pop	{r4, pc}
 8019928:	0802780c 	.word	0x0802780c

0801992c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801992c:	b510      	push	{r4, lr}
 801992e:	4604      	mov	r4, r0
    }
 8019930:	4b04      	ldr	r3, [pc, #16]	; (8019944 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8019932:	6003      	str	r3, [r0, #0]
 8019934:	f004 fc28 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019938:	2114      	movs	r1, #20
 801993a:	4620      	mov	r0, r4
 801993c:	f00b fc4a 	bl	80251d4 <_ZdlPvj>
 8019940:	4620      	mov	r0, r4
 8019942:	bd10      	pop	{r4, pc}
 8019944:	0802780c 	.word	0x0802780c

08019948 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8019948:	b510      	push	{r4, lr}
 801994a:	4604      	mov	r4, r0
    }
 801994c:	4b02      	ldr	r3, [pc, #8]	; (8019958 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 801994e:	6003      	str	r3, [r0, #0]
 8019950:	f004 fc1a 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019954:	4620      	mov	r0, r4
 8019956:	bd10      	pop	{r4, pc}
 8019958:	080277d8 	.word	0x080277d8

0801995c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801995c:	b510      	push	{r4, lr}
 801995e:	4604      	mov	r4, r0
    }
 8019960:	4b05      	ldr	r3, [pc, #20]	; (8019978 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 8019962:	6003      	str	r3, [r0, #0]
 8019964:	f004 fc10 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019968:	f242 0114 	movw	r1, #8212	; 0x2014
 801996c:	4620      	mov	r0, r4
 801996e:	f00b fc31 	bl	80251d4 <_ZdlPvj>
 8019972:	4620      	mov	r0, r4
 8019974:	bd10      	pop	{r4, pc}
 8019976:	bf00      	nop
 8019978:	080277d8 	.word	0x080277d8

0801997c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801997c:	b510      	push	{r4, lr}
 801997e:	4604      	mov	r4, r0
    }
 8019980:	4b02      	ldr	r3, [pc, #8]	; (801998c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8019982:	6003      	str	r3, [r0, #0]
 8019984:	f004 fc00 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019988:	4620      	mov	r0, r4
 801998a:	bd10      	pop	{r4, pc}
 801998c:	080277a4 	.word	0x080277a4

08019990 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019990:	b510      	push	{r4, lr}
 8019992:	4604      	mov	r4, r0
    }
 8019994:	4b04      	ldr	r3, [pc, #16]	; (80199a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8019996:	6003      	str	r3, [r0, #0]
 8019998:	f004 fbf6 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801999c:	2118      	movs	r1, #24
 801999e:	4620      	mov	r0, r4
 80199a0:	f00b fc18 	bl	80251d4 <_ZdlPvj>
 80199a4:	4620      	mov	r0, r4
 80199a6:	bd10      	pop	{r4, pc}
 80199a8:	080277a4 	.word	0x080277a4

080199ac <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80199ac:	b510      	push	{r4, lr}
 80199ae:	4604      	mov	r4, r0
 80199b0:	4b0a      	ldr	r3, [pc, #40]	; (80199dc <_ZN12FrontendHeapD1Ev+0x30>)
 80199b2:	6003      	str	r3, [r0, #0]
 80199b4:	f500 5001 	add.w	r0, r0, #8256	; 0x2040
 80199b8:	4b09      	ldr	r3, [pc, #36]	; (80199e0 <_ZN12FrontendHeapD1Ev+0x34>)
 80199ba:	6003      	str	r3, [r0, #0]
 80199bc:	f004 fbe4 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80199c0:	4620      	mov	r0, r4
 80199c2:	4b08      	ldr	r3, [pc, #32]	; (80199e4 <_ZN12FrontendHeapD1Ev+0x38>)
 80199c4:	f840 3f2c 	str.w	r3, [r0, #44]!
 80199c8:	f004 fbde 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80199cc:	4620      	mov	r0, r4
 80199ce:	4b06      	ldr	r3, [pc, #24]	; (80199e8 <_ZN12FrontendHeapD1Ev+0x3c>)
 80199d0:	f840 3f14 	str.w	r3, [r0, #20]!
 80199d4:	f004 fbd8 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80199d8:	4620      	mov	r0, r4
 80199da:	bd10      	pop	{r4, pc}
 80199dc:	08027840 	.word	0x08027840
 80199e0:	0802780c 	.word	0x0802780c
 80199e4:	080277d8 	.word	0x080277d8
 80199e8:	080277a4 	.word	0x080277a4

080199ec <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80199ec:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 80199ee:	4c0b      	ldr	r4, [pc, #44]	; (8019a1c <__tcf_0+0x30>)
 80199f0:	4b0b      	ldr	r3, [pc, #44]	; (8019a20 <__tcf_0+0x34>)
 80199f2:	6023      	str	r3, [r4, #0]
 80199f4:	f504 5001 	add.w	r0, r4, #8256	; 0x2040
 80199f8:	4b0a      	ldr	r3, [pc, #40]	; (8019a24 <__tcf_0+0x38>)
 80199fa:	6003      	str	r3, [r0, #0]
 80199fc:	f004 fbc4 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019a00:	4620      	mov	r0, r4
 8019a02:	4b09      	ldr	r3, [pc, #36]	; (8019a28 <__tcf_0+0x3c>)
 8019a04:	f840 3f2c 	str.w	r3, [r0, #44]!
 8019a08:	f004 fbbe 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	4b07      	ldr	r3, [pc, #28]	; (8019a2c <__tcf_0+0x40>)
 8019a10:	f840 3f14 	str.w	r3, [r0, #20]!
 8019a14:	f004 fbb8 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
        static FrontendHeap instance;
 8019a18:	bd10      	pop	{r4, pc}
 8019a1a:	bf00      	nop
 8019a1c:	20008380 	.word	0x20008380
 8019a20:	08027840 	.word	0x08027840
 8019a24:	0802780c 	.word	0x0802780c
 8019a28:	080277d8 	.word	0x080277d8
 8019a2c:	080277a4 	.word	0x080277a4

08019a30 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8019a30:	b510      	push	{r4, lr}
 8019a32:	4604      	mov	r4, r0
 8019a34:	4b0d      	ldr	r3, [pc, #52]	; (8019a6c <_ZN12FrontendHeapD0Ev+0x3c>)
 8019a36:	6003      	str	r3, [r0, #0]
 8019a38:	f500 5001 	add.w	r0, r0, #8256	; 0x2040
 8019a3c:	4b0c      	ldr	r3, [pc, #48]	; (8019a70 <_ZN12FrontendHeapD0Ev+0x40>)
 8019a3e:	6003      	str	r3, [r0, #0]
 8019a40:	f004 fba2 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019a44:	4620      	mov	r0, r4
 8019a46:	4b0b      	ldr	r3, [pc, #44]	; (8019a74 <_ZN12FrontendHeapD0Ev+0x44>)
 8019a48:	f840 3f2c 	str.w	r3, [r0, #44]!
 8019a4c:	f004 fb9c 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019a50:	4620      	mov	r0, r4
 8019a52:	4b09      	ldr	r3, [pc, #36]	; (8019a78 <_ZN12FrontendHeapD0Ev+0x48>)
 8019a54:	f840 3f14 	str.w	r3, [r0, #20]!
 8019a58:	f004 fb96 	bl	801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019a5c:	f242 11a8 	movw	r1, #8616	; 0x21a8
 8019a60:	4620      	mov	r0, r4
 8019a62:	f00b fbb7 	bl	80251d4 <_ZdlPvj>
 8019a66:	4620      	mov	r0, r4
 8019a68:	bd10      	pop	{r4, pc}
 8019a6a:	bf00      	nop
 8019a6c:	08027840 	.word	0x08027840
 8019a70:	0802780c 	.word	0x0802780c
 8019a74:	080277d8 	.word	0x080277d8
 8019a78:	080277a4 	.word	0x080277a4

08019a7c <LCD_GetXSize>:
extern "C" {

uint32_t LCD_GetXSize(void)
{
  return 480;
}
 8019a7c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8019a80:	4770      	bx	lr

08019a82 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
  return 272;
}
 8019a82:	f44f 7088 	mov.w	r0, #272	; 0x110
 8019a86:	4770      	bx	lr

08019a88 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 8019a88:	b508      	push	{r3, lr}
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 8019a8a:	f000 fa3f 	bl	8019f0c <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 8019a8e:	f000 fa6f 	bl	8019f70 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 8019a92:	f000 f9db 	bl	8019e4c <_Z11MX_LCD_Initv>
    GPIO::init();
 8019a96:	f000 f967 	bl	8019d68 <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8019a9a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8019a9e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8019aa2:	601a      	str	r2, [r3, #0]
}
 8019aa4:	bd08      	pop	{r3, pc}
	...

08019aa8 <_Z17GRAPHICS_MainTaskv>:
{
   touchgfx::touchgfx_init();
}

void GRAPHICS_MainTask(void)
{
 8019aa8:	b508      	push	{r3, lr}
        return instance;
 8019aaa:	4b03      	ldr	r3, [pc, #12]	; (8019ab8 <_Z17GRAPHICS_MainTaskv+0x10>)
 8019aac:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->taskEntry();
 8019aae:	6803      	ldr	r3, [r0, #0]
 8019ab0:	68db      	ldr	r3, [r3, #12]
 8019ab2:	4798      	blx	r3
}
 8019ab4:	bd08      	pop	{r3, pc}
 8019ab6:	bf00      	nop
 8019ab8:	2000bb14 	.word	0x2000bb14

08019abc <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 8019abc:	b538      	push	{r3, r4, r5, lr}
    static T hal(dma, display, tc, width, height);
 8019abe:	4c2c      	ldr	r4, [pc, #176]	; (8019b70 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb4>)
 8019ac0:	6824      	ldr	r4, [r4, #0]
 8019ac2:	f014 0f01 	tst.w	r4, #1
 8019ac6:	d001      	beq.n	8019acc <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x10>
    return hal;
}
 8019ac8:	482a      	ldr	r0, [pc, #168]	; (8019b74 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb8>)
 8019aca:	bd38      	pop	{r3, r4, r5, pc}
    static T hal(dma, display, tc, width, height);
 8019acc:	b29b      	uxth	r3, r3
 8019ace:	f8bd 5010 	ldrh.w	r5, [sp, #16]
        displayOrientationChangeRequested(false)
 8019ad2:	4c28      	ldr	r4, [pc, #160]	; (8019b74 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb8>)
 8019ad4:	6060      	str	r0, [r4, #4]
 8019ad6:	60a1      	str	r1, [r4, #8]
 8019ad8:	60e2      	str	r2, [r4, #12]
 8019ada:	2200      	movs	r2, #0
 8019adc:	6122      	str	r2, [r4, #16]
 8019ade:	6162      	str	r2, [r4, #20]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8019ae0:	8322      	strh	r2, [r4, #24]
 8019ae2:	8362      	strh	r2, [r4, #26]
 8019ae4:	83a2      	strh	r2, [r4, #28]
 8019ae6:	83e2      	strh	r2, [r4, #30]
 8019ae8:	8422      	strh	r2, [r4, #32]
 8019aea:	8462      	strh	r2, [r4, #34]	; 0x22
 8019aec:	84a2      	strh	r2, [r4, #36]	; 0x24
 8019aee:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8019af2:	62a2      	str	r2, [r4, #40]	; 0x28
 8019af4:	85a2      	strh	r2, [r4, #44]	; 0x2c
 8019af6:	6362      	str	r2, [r4, #52]	; 0x34
 8019af8:	63a2      	str	r2, [r4, #56]	; 0x38
 8019afa:	63e2      	str	r2, [r4, #60]	; 0x3c
 8019afc:	6422      	str	r2, [r4, #64]	; 0x40
 8019afe:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8019b02:	2101      	movs	r1, #1
 8019b04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019b08:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 8019b0c:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8019b10:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 8019b14:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
 8019b18:	f884 1057 	strb.w	r1, [r4, #87]	; 0x57
 8019b1c:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8019b20:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8019b24:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 8019b28:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
 8019b2c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
 8019b30:	6622      	str	r2, [r4, #96]	; 0x60
 8019b32:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
        instance = this;
 8019b36:	4910      	ldr	r1, [pc, #64]	; (8019b78 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xbc>)
 8019b38:	600c      	str	r4, [r1, #0]
        DISPLAY_WIDTH = width;
 8019b3a:	4910      	ldr	r1, [pc, #64]	; (8019b7c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xc0>)
 8019b3c:	800b      	strh	r3, [r1, #0]
        DISPLAY_HEIGHT = height;
 8019b3e:	4910      	ldr	r1, [pc, #64]	; (8019b80 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xc4>)
 8019b40:	800d      	strh	r5, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 8019b42:	4910      	ldr	r1, [pc, #64]	; (8019b84 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xc8>)
 8019b44:	700a      	strb	r2, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8019b46:	4a10      	ldr	r2, [pc, #64]	; (8019b88 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xcc>)
 8019b48:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8019b4a:	4a10      	ldr	r2, [pc, #64]	; (8019b8c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xd0>)
 8019b4c:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8019b4e:	42ab      	cmp	r3, r5
 8019b50:	d20c      	bcs.n	8019b6c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb0>
 8019b52:	2201      	movs	r2, #1
 8019b54:	4b07      	ldr	r3, [pc, #28]	; (8019b74 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb8>)
 8019b56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8019b5a:	4a0d      	ldr	r2, [pc, #52]	; (8019b90 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xd4>)
 8019b5c:	601a      	str	r2, [r3, #0]
 8019b5e:	4b04      	ldr	r3, [pc, #16]	; (8019b70 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xb4>)
 8019b60:	2201      	movs	r2, #1
 8019b62:	601a      	str	r2, [r3, #0]
 8019b64:	480b      	ldr	r0, [pc, #44]	; (8019b94 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xd8>)
 8019b66:	f00b fb6f 	bl	8025248 <atexit>
 8019b6a:	e7ad      	b.n	8019ac8 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0xc>
 8019b6c:	2200      	movs	r2, #0
 8019b6e:	e7f1      	b.n	8019b54 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x98>
 8019b70:	20008310 	.word	0x20008310
 8019b74:	20008314 	.word	0x20008314
 8019b78:	2000bb14 	.word	0x2000bb14
 8019b7c:	2000bb06 	.word	0x2000bb06
 8019b80:	2000bb08 	.word	0x2000bb08
 8019b84:	2000bb0a 	.word	0x2000bb0a
 8019b88:	2000bb0c 	.word	0x2000bb0c
 8019b8c:	2000bb0e 	.word	0x2000bb0e
 8019b90:	08027924 	.word	0x08027924
 8019b94:	080198ad 	.word	0x080198ad

08019b98 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8019b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b9c:	b082      	sub	sp, #8
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 8019b9e:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8019ba2:	9400      	str	r4, [sp, #0]
 8019ba4:	f7ff ff8a 	bl	8019abc <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 8019ba8:	4605      	mov	r5, r0
    hal.initialize();
 8019baa:	f004 fcbf 	bl	801e52c <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 8019bae:	f004 f94f 	bl	801de50 <_ZN14BitmapDatabase11getInstanceEv>
 8019bb2:	4604      	mov	r4, r0
 8019bb4:	f004 f950 	bl	801de58 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8019bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019bba:	9300      	str	r3, [sp, #0]
 8019bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bc0:	4601      	mov	r1, r0
 8019bc2:	4620      	mov	r0, r4
 8019bc4:	f009 f9c2 	bl	8022f4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
        texts = t;
 8019bc8:	4b25      	ldr	r3, [pc, #148]	; (8019c60 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xc8>)
 8019bca:	4a26      	ldr	r2, [pc, #152]	; (8019c64 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xcc>)
 8019bcc:	601a      	str	r2, [r3, #0]
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8019bce:	2000      	movs	r0, #0
 8019bd0:	f004 f954 	bl	801de7c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8019bd4:	4824      	ldr	r0, [pc, #144]	; (8019c68 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xd0>)
 8019bd6:	f009 f923 	bl	8022e20 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8019bda:	4b24      	ldr	r3, [pc, #144]	; (8019c6c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xd4>)
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	f013 0f01 	tst.w	r3, #1
 8019be2:	d00a      	beq.n	8019bfa <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x62>

    FrontendHeap& heap = FrontendHeap::getInstance();
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8019be4:	682b      	ldr	r3, [r5, #0]
 8019be6:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8019be8:	f007 fa12 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 8019bec:	4601      	mov	r1, r0
 8019bee:	4628      	mov	r0, r5
 8019bf0:	47a0      	blx	r4

    return hal;
}
 8019bf2:	4628      	mov	r0, r5
 8019bf4:	b002      	add	sp, #8
 8019bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8019bfa:	4c1d      	ldr	r4, [pc, #116]	; (8019c70 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xd8>)
 8019bfc:	f104 0014 	add.w	r0, r4, #20
 8019c00:	6060      	str	r0, [r4, #4]
 8019c02:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8019c06:	f8c4 8008 	str.w	r8, [r4, #8]
 8019c0a:	f504 5701 	add.w	r7, r4, #8256	; 0x2040
 8019c0e:	60e7      	str	r7, [r4, #12]
 8019c10:	f500 5601 	add.w	r6, r0, #8256	; 0x2040
 8019c14:	6126      	str	r6, [r4, #16]
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8019c16:	4b17      	ldr	r3, [pc, #92]	; (8019c74 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xdc>)
 8019c18:	6023      	str	r3, [r4, #0]
    Partition() : AbstractPartition()
 8019c1a:	f004 fab7 	bl	801e18c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019c1e:	4b16      	ldr	r3, [pc, #88]	; (8019c78 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xe0>)
 8019c20:	6163      	str	r3, [r4, #20]
 8019c22:	4640      	mov	r0, r8
 8019c24:	f004 fab2 	bl	801e18c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019c28:	4b14      	ldr	r3, [pc, #80]	; (8019c7c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xe4>)
 8019c2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019c2c:	4638      	mov	r0, r7
 8019c2e:	f004 faad 	bl	801e18c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019c32:	4b13      	ldr	r3, [pc, #76]	; (8019c80 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xe8>)
 8019c34:	603b      	str	r3, [r7, #0]
 8019c36:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8019c3a:	4622      	mov	r2, r4
 8019c3c:	4639      	mov	r1, r7
 8019c3e:	4630      	mov	r0, r6
 8019c40:	f004 f980 	bl	801df44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8019c44:	4638      	mov	r0, r7
 8019c46:	f004 f987 	bl	801df58 <_ZN5ModelC1Ev>
        app.gotoScreen3ScreenNoTransition();
 8019c4a:	4630      	mov	r0, r6
 8019c4c:	f003 fcf4 	bl	801d638 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
        static FrontendHeap instance;
 8019c50:	4b06      	ldr	r3, [pc, #24]	; (8019c6c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xd4>)
 8019c52:	2201      	movs	r2, #1
 8019c54:	601a      	str	r2, [r3, #0]
 8019c56:	480b      	ldr	r0, [pc, #44]	; (8019c84 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0xec>)
 8019c58:	f00b faf6 	bl	8025248 <atexit>
 8019c5c:	e7c2      	b.n	8019be4 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x4c>
 8019c5e:	bf00      	nop
 8019c60:	2000bba0 	.word	0x2000bba0
 8019c64:	2000a528 	.word	0x2000a528
 8019c68:	20000054 	.word	0x20000054
 8019c6c:	2000837c 	.word	0x2000837c
 8019c70:	20008380 	.word	0x20008380
 8019c74:	08027840 	.word	0x08027840
 8019c78:	080277a4 	.word	0x080277a4
 8019c7c:	080277d8 	.word	0x080277d8
 8019c80:	0802780c 	.word	0x0802780c
 8019c84:	080199ed 	.word	0x080199ed

08019c88 <_ZN8touchgfx13touchgfx_initEv>:
{
 8019c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c8a:	b085      	sub	sp, #20
                                               0, 0);
 8019c8c:	2500      	movs	r5, #0
 8019c8e:	9503      	str	r5, [sp, #12]
 8019c90:	9502      	str	r5, [sp, #8]
 8019c92:	9501      	str	r5, [sp, #4]
 8019c94:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019c98:	9300      	str	r3, [sp, #0]
 8019c9a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8019c9e:	4a10      	ldr	r2, [pc, #64]	; (8019ce0 <_ZN8touchgfx13touchgfx_initEv+0x58>)
 8019ca0:	4910      	ldr	r1, [pc, #64]	; (8019ce4 <_ZN8touchgfx13touchgfx_initEv+0x5c>)
 8019ca2:	4811      	ldr	r0, [pc, #68]	; (8019ce8 <_ZN8touchgfx13touchgfx_initEv+0x60>)
 8019ca4:	f7ff ff78 	bl	8019b98 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 8019ca8:	4604      	mov	r4, r0
    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 8019caa:	6803      	ldr	r3, [r0, #0]
 8019cac:	6f5f      	ldr	r7, [r3, #116]	; 0x74
 8019cae:	2601      	movs	r6, #1
 8019cb0:	9600      	str	r6, [sp, #0]
 8019cb2:	4633      	mov	r3, r6
 8019cb4:	2210      	movs	r2, #16
 8019cb6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8019cba:	47b8      	blx	r7
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
    {
        if (sampleRateInTicks > 0)
        {
            touchSampleRate = sampleRateInTicks;
 8019cbc:	2302      	movs	r3, #2
 8019cbe:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
    {
        fingerSize = size;
 8019cc2:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
        vSyncCompensationEnabled = enabled;
 8019cc6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        lockDMAToPorch = enableLock;
 8019cca:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
    mcuInstr.init();
 8019cce:	4d07      	ldr	r5, [pc, #28]	; (8019cec <_ZN8touchgfx13touchgfx_initEv+0x64>)
 8019cd0:	4628      	mov	r0, r5
 8019cd2:	f000 fe41 	bl	801a958 <_ZN8touchgfx22STM32F7Instrumentation4initEv>
        mcuInstrumentation = mcuInstr;
 8019cd6:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8019cd8:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
}
 8019cdc:	b005      	add	sp, #20
 8019cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ce0:	2000afdc 	.word	0x2000afdc
 8019ce4:	20000058 	.word	0x20000058
 8019ce8:	2000a52c 	.word	0x2000a52c
 8019cec:	2000afcc 	.word	0x2000afcc

08019cf0 <_Z13GRAPHICS_Initv>:
{
 8019cf0:	b508      	push	{r3, lr}
   touchgfx::touchgfx_init();
 8019cf2:	f7ff ffc9 	bl	8019c88 <_ZN8touchgfx13touchgfx_initEv>
}
 8019cf6:	bd08      	pop	{r3, pc}

08019cf8 <_Z41__static_initialization_and_destruction_0ii>:
}
 8019cf8:	b538      	push	{r3, r4, r5, lr}
 8019cfa:	4604      	mov	r4, r0
 8019cfc:	460d      	mov	r5, r1
 8019cfe:	2801      	cmp	r0, #1
 8019d00:	d005      	beq.n	8019d0e <_Z41__static_initialization_and_destruction_0ii+0x16>
static LCD16bpp display;
 8019d02:	b91c      	cbnz	r4, 8019d0c <_Z41__static_initialization_and_destruction_0ii+0x14>
 8019d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d08:	429d      	cmp	r5, r3
 8019d0a:	d011      	beq.n	8019d30 <_Z41__static_initialization_and_destruction_0ii+0x38>
}
 8019d0c:	bd38      	pop	{r3, r4, r5, pc}
 8019d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d12:	4299      	cmp	r1, r3
 8019d14:	d1f5      	bne.n	8019d02 <_Z41__static_initialization_and_destruction_0ii+0xa>
STM32F7DMA dma;
 8019d16:	4808      	ldr	r0, [pc, #32]	; (8019d38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8019d18:	f000 fc5c 	bl	801a5d4 <_ZN10STM32F7DMAC1Ev>
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 8019d1c:	4b07      	ldr	r3, [pc, #28]	; (8019d3c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8019d1e:	4a08      	ldr	r2, [pc, #32]	; (8019d40 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8019d20:	601a      	str	r2, [r3, #0]
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
        cc_consumed(0),
        cc_in(0)
 8019d22:	4b08      	ldr	r3, [pc, #32]	; (8019d44 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8019d24:	2200      	movs	r2, #0
 8019d26:	605a      	str	r2, [r3, #4]
 8019d28:	609a      	str	r2, [r3, #8]
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 8019d2a:	4a07      	ldr	r2, [pc, #28]	; (8019d48 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8019d2c:	601a      	str	r2, [r3, #0]
 8019d2e:	e7e8      	b.n	8019d02 <_Z41__static_initialization_and_destruction_0ii+0xa>
 8019d30:	4801      	ldr	r0, [pc, #4]	; (8019d38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8019d32:	f000 faa5 	bl	801a280 <_ZN10STM32F7DMAD1Ev>
}
 8019d36:	e7e9      	b.n	8019d0c <_Z41__static_initialization_and_destruction_0ii+0x14>
 8019d38:	2000a52c 	.word	0x2000a52c
 8019d3c:	2000afdc 	.word	0x2000afdc
 8019d40:	08027a98 	.word	0x08027a98
 8019d44:	2000afcc 	.word	0x2000afcc
 8019d48:	08027a70 	.word	0x08027a70

08019d4c <_GLOBAL__sub_I_LCD_GetXSize>:
 8019d4c:	b508      	push	{r3, lr}
 8019d4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019d52:	2001      	movs	r0, #1
 8019d54:	f7ff ffd0 	bl	8019cf8 <_Z41__static_initialization_and_destruction_0ii>
 8019d58:	bd08      	pop	{r3, pc}

08019d5a <_GLOBAL__sub_D_LCD_GetXSize>:
 8019d5a:	b508      	push	{r3, lr}
 8019d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019d60:	2000      	movs	r0, #0
 8019d62:	f7ff ffc9 	bl	8019cf8 <_Z41__static_initialization_and_destruction_0ii>
 8019d66:	bd08      	pop	{r3, pc}

08019d68 <_ZN8touchgfx4GPIO4initEv>:

using namespace touchgfx;

void GPIO::init()
{
}
 8019d68:	4770      	bx	lr

08019d6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO_ID id)
{
}
 8019d6a:	4770      	bx	lr

08019d6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO_ID id)
{
}
 8019d6c:	4770      	bx	lr

08019d6e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO_ID id)
{
}
 8019d6e:	4770      	bx	lr

08019d70 <_ZL15HAL_FMC_MspInitv>:
  }
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8019d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d72:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8019d74:	2300      	movs	r3, #0
 8019d76:	9301      	str	r3, [sp, #4]
 8019d78:	9302      	str	r3, [sp, #8]
 8019d7a:	9303      	str	r3, [sp, #12]
 8019d7c:	9304      	str	r3, [sp, #16]
 8019d7e:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8019d80:	4b2a      	ldr	r3, [pc, #168]	; (8019e2c <_ZL15HAL_FMC_MspInitv+0xbc>)
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	b10b      	cbz	r3, 8019d8a <_ZL15HAL_FMC_MspInitv+0x1a>
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8019d86:	b007      	add	sp, #28
 8019d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8019d8a:	4b28      	ldr	r3, [pc, #160]	; (8019e2c <_ZL15HAL_FMC_MspInitv+0xbc>)
 8019d8c:	2201      	movs	r2, #1
 8019d8e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8019d90:	4b27      	ldr	r3, [pc, #156]	; (8019e30 <_ZL15HAL_FMC_MspInitv+0xc0>)
 8019d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019d94:	f042 0201 	orr.w	r2, r2, #1
 8019d98:	639a      	str	r2, [r3, #56]	; 0x38
 8019d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d9c:	f003 0301 	and.w	r3, r3, #1
 8019da0:	9300      	str	r3, [sp, #0]
 8019da2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8019da4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8019da8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019daa:	2602      	movs	r6, #2
 8019dac:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019dae:	2503      	movs	r5, #3
 8019db0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8019db2:	240c      	movs	r4, #12
 8019db4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8019db6:	a901      	add	r1, sp, #4
 8019db8:	481e      	ldr	r0, [pc, #120]	; (8019e34 <_ZL15HAL_FMC_MspInitv+0xc4>)
 8019dba:	f7e8 ffd3 	bl	8002d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8019dbe:	f248 1333 	movw	r3, #33075	; 0x8133
 8019dc2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019dc4:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019dc6:	2700      	movs	r7, #0
 8019dc8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019dca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8019dcc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8019dce:	a901      	add	r1, sp, #4
 8019dd0:	4819      	ldr	r0, [pc, #100]	; (8019e38 <_ZL15HAL_FMC_MspInitv+0xc8>)
 8019dd2:	f7e8 ffc7 	bl	8002d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8019dd6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8019dda:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019ddc:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019dde:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019de0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8019de2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8019de4:	a901      	add	r1, sp, #4
 8019de6:	4815      	ldr	r0, [pc, #84]	; (8019e3c <_ZL15HAL_FMC_MspInitv+0xcc>)
 8019de8:	f7e8 ffbc 	bl	8002d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8019dec:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8019df0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019df2:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019df4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019df6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8019df8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019dfa:	a901      	add	r1, sp, #4
 8019dfc:	4810      	ldr	r0, [pc, #64]	; (8019e40 <_ZL15HAL_FMC_MspInitv+0xd0>)
 8019dfe:	f7e8 ffb1 	bl	8002d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8019e02:	2328      	movs	r3, #40	; 0x28
 8019e04:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019e06:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019e08:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019e0a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8019e0c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8019e0e:	a901      	add	r1, sp, #4
 8019e10:	480c      	ldr	r0, [pc, #48]	; (8019e44 <_ZL15HAL_FMC_MspInitv+0xd4>)
 8019e12:	f7e8 ffa7 	bl	8002d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8019e16:	2308      	movs	r3, #8
 8019e18:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019e1a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019e1c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019e1e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8019e20:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8019e22:	a901      	add	r1, sp, #4
 8019e24:	4808      	ldr	r0, [pc, #32]	; (8019e48 <_ZL15HAL_FMC_MspInitv+0xd8>)
 8019e26:	f7e8 ff9d 	bl	8002d64 <HAL_GPIO_Init>
 8019e2a:	e7ac      	b.n	8019d86 <_ZL15HAL_FMC_MspInitv+0x16>
 8019e2c:	2000afe0 	.word	0x2000afe0
 8019e30:	40023800 	.word	0x40023800
 8019e34:	40021000 	.word	0x40021000
 8019e38:	40021800 	.word	0x40021800
 8019e3c:	40020c00 	.word	0x40020c00
 8019e40:	40021400 	.word	0x40021400
 8019e44:	40021c00 	.word	0x40021c00
 8019e48:	40020800 	.word	0x40020800

08019e4c <_Z11MX_LCD_Initv>:
{ 
 8019e4c:	b510      	push	{r4, lr}
 8019e4e:	b08e      	sub	sp, #56	; 0x38
  HAL_LTDC_DeInit(&hltdc);
 8019e50:	4c2c      	ldr	r4, [pc, #176]	; (8019f04 <_Z11MX_LCD_Initv+0xb8>)
 8019e52:	4620      	mov	r0, r4
 8019e54:	f7eb fd46 	bl	80058e4 <HAL_LTDC_DeInit>
  hltdc.Instance = LTDC;
 8019e58:	4b2b      	ldr	r3, [pc, #172]	; (8019f08 <_Z11MX_LCD_Initv+0xbc>)
 8019e5a:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	6063      	str	r3, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8019e60:	60a3      	str	r3, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8019e62:	60e3      	str	r3, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8019e64:	6123      	str	r3, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8019e66:	2228      	movs	r2, #40	; 0x28
 8019e68:	6162      	str	r2, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8019e6a:	2209      	movs	r2, #9
 8019e6c:	61a2      	str	r2, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8019e6e:	2235      	movs	r2, #53	; 0x35
 8019e70:	61e2      	str	r2, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8019e72:	220b      	movs	r2, #11
 8019e74:	6222      	str	r2, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8019e76:	f240 2215 	movw	r2, #533	; 0x215
 8019e7a:	6262      	str	r2, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8019e7c:	f240 121b 	movw	r2, #283	; 0x11b
 8019e80:	62a2      	str	r2, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8019e82:	f240 2235 	movw	r2, #565	; 0x235
 8019e86:	62e2      	str	r2, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8019e88:	f240 121d 	movw	r2, #285	; 0x11d
 8019e8c:	6322      	str	r2, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8019e8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8019e92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8019e96:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8019e9a:	4620      	mov	r0, r4
 8019e9c:	f7eb fc52 	bl	8005744 <HAL_LTDC_Init>
 8019ea0:	bb50      	cbnz	r0, 8019ef8 <_Z11MX_LCD_Initv+0xac>
  pLayerCfg.WindowX0 = 0;
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8019ea6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8019eaa:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8019eac:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 8019eae:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019eb2:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8019eb4:	2002      	movs	r0, #2
 8019eb6:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8019eb8:	20ff      	movs	r0, #255	; 0xff
 8019eba:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8019ebc:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8019ebe:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8019ec2:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8019ec4:	2007      	movs	r0, #7
 8019ec6:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8019ec8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 8019ecc:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8019ece:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8019ed0:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8019ed2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8019ed6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8019eda:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8019ede:	a901      	add	r1, sp, #4
 8019ee0:	4808      	ldr	r0, [pc, #32]	; (8019f04 <_Z11MX_LCD_Initv+0xb8>)
 8019ee2:	f7eb fdcf 	bl	8005a84 <HAL_LTDC_ConfigLayer>
 8019ee6:	b950      	cbnz	r0, 8019efe <_Z11MX_LCD_Initv+0xb2>
 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 8019ee8:	2200      	movs	r2, #0
 8019eea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8019eee:	4805      	ldr	r0, [pc, #20]	; (8019f04 <_Z11MX_LCD_Initv+0xb8>)
 8019ef0:	f7eb fe06 	bl	8005b00 <HAL_LTDC_SetPitch>
}
 8019ef4:	b00e      	add	sp, #56	; 0x38
 8019ef6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8019ef8:	f001 fc88 	bl	801b80c <Error_Handler>
 8019efc:	e7d1      	b.n	8019ea2 <_Z11MX_LCD_Initv+0x56>
    Error_Handler( );
 8019efe:	f001 fc85 	bl	801b80c <Error_Handler>
 8019f02:	e7f1      	b.n	8019ee8 <_Z11MX_LCD_Initv+0x9c>
 8019f04:	2000b034 	.word	0x2000b034
 8019f08:	40016800 	.word	0x40016800

08019f0c <_Z11MX_FMC_Initv>:
{  
 8019f0c:	b500      	push	{lr}
 8019f0e:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8019f10:	4815      	ldr	r0, [pc, #84]	; (8019f68 <_Z11MX_FMC_Initv+0x5c>)
 8019f12:	4b16      	ldr	r3, [pc, #88]	; (8019f6c <_Z11MX_FMC_Initv+0x60>)
 8019f14:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8019f16:	2300      	movs	r3, #0
 8019f18:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8019f1a:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8019f1c:	2104      	movs	r1, #4
 8019f1e:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8019f20:	2210      	movs	r2, #16
 8019f22:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8019f24:	2240      	movs	r2, #64	; 0x40
 8019f26:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8019f28:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8019f2c:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8019f2e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8019f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019f34:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8019f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019f3a:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8019f3c:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8019f3e:	2302      	movs	r3, #2
 8019f40:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8019f42:	2207      	movs	r2, #7
 8019f44:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8019f46:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8019f48:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8019f4a:	2203      	movs	r2, #3
 8019f4c:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8019f4e:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8019f50:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8019f52:	4469      	add	r1, sp
 8019f54:	f7ef fb36 	bl	80095c4 <HAL_SDRAM_Init>
 8019f58:	b910      	cbnz	r0, 8019f60 <_Z11MX_FMC_Initv+0x54>
}
 8019f5a:	b009      	add	sp, #36	; 0x24
 8019f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8019f60:	f001 fc54 	bl	801b80c <Error_Handler>
}
 8019f64:	e7f9      	b.n	8019f5a <_Z11MX_FMC_Initv+0x4e>
 8019f66:	bf00      	nop
 8019f68:	2000b0dc 	.word	0x2000b0dc
 8019f6c:	a0000140 	.word	0xa0000140

08019f70 <_Z15MX_SDRAM_InitExv>:
{
 8019f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f74:	b082      	sub	sp, #8
  __IO uint32_t tmpmrd = 0;
 8019f76:	f04f 0800 	mov.w	r8, #0
 8019f7a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8019f7e:	4c21      	ldr	r4, [pc, #132]	; (801a004 <_Z15MX_SDRAM_InitExv+0x94>)
 8019f80:	2601      	movs	r6, #1
 8019f82:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8019f84:	2710      	movs	r7, #16
 8019f86:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8019f88:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8019f8a:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8019f8e:	4d1e      	ldr	r5, [pc, #120]	; (801a008 <_Z15MX_SDRAM_InitExv+0x98>)
 8019f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f94:	4621      	mov	r1, r4
 8019f96:	4628      	mov	r0, r5
 8019f98:	f7ef fb48 	bl	800962c <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8019f9c:	4630      	mov	r0, r6
 8019f9e:	f7e6 fdd7 	bl	8000b50 <HAL_Delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8019fa2:	2302      	movs	r3, #2
 8019fa4:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8019fa6:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8019fa8:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8019faa:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8019fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fb2:	4621      	mov	r1, r4
 8019fb4:	4628      	mov	r0, r5
 8019fb6:	f7ef fb39 	bl	800962c <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8019fba:	2303      	movs	r3, #3
 8019fbc:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8019fbe:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 8019fc0:	2308      	movs	r3, #8
 8019fc2:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8019fc4:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8019fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fcc:	4621      	mov	r1, r4
 8019fce:	4628      	mov	r0, r5
 8019fd0:	f7ef fb2c 	bl	800962c <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8019fd4:	f44f 730c 	mov.w	r3, #560	; 0x230
 8019fd8:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8019fda:	2304      	movs	r3, #4
 8019fdc:	6023      	str	r3, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8019fde:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8019fe0:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8019fe2:	9b01      	ldr	r3, [sp, #4]
 8019fe4:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8019fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fea:	4621      	mov	r1, r4
 8019fec:	4628      	mov	r0, r5
 8019fee:	f7ef fb1d 	bl	800962c <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8019ff2:	f240 6173 	movw	r1, #1651	; 0x673
 8019ff6:	4628      	mov	r0, r5
 8019ff8:	f7ef fb43 	bl	8009682 <HAL_SDRAM_ProgramRefreshRate>
}
 8019ffc:	b002      	add	sp, #8
 8019ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a002:	bf00      	nop
 801a004:	2000afe4 	.word	0x2000afe4
 801a008:	2000b0dc 	.word	0x2000b0dc

0801a00c <HAL_LTDC_MspInit>:
{
 801a00c:	b570      	push	{r4, r5, r6, lr}
 801a00e:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a010:	2300      	movs	r3, #0
 801a012:	9307      	str	r3, [sp, #28]
 801a014:	9308      	str	r3, [sp, #32]
 801a016:	9309      	str	r3, [sp, #36]	; 0x24
 801a018:	930a      	str	r3, [sp, #40]	; 0x28
 801a01a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ltdcHandle->Instance==LTDC)
 801a01c:	6802      	ldr	r2, [r0, #0]
 801a01e:	4b3e      	ldr	r3, [pc, #248]	; (801a118 <HAL_LTDC_MspInit+0x10c>)
 801a020:	429a      	cmp	r2, r3
 801a022:	d001      	beq.n	801a028 <HAL_LTDC_MspInit+0x1c>
}
 801a024:	b00c      	add	sp, #48	; 0x30
 801a026:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 801a028:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801a02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a02e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801a032:	645a      	str	r2, [r3, #68]	; 0x44
 801a034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a036:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801a03a:	9201      	str	r2, [sp, #4]
 801a03c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801a03e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a040:	f042 0210 	orr.w	r2, r2, #16
 801a044:	631a      	str	r2, [r3, #48]	; 0x30
 801a046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a048:	f002 0210 	and.w	r2, r2, #16
 801a04c:	9202      	str	r2, [sp, #8]
 801a04e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 801a050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a056:	631a      	str	r2, [r3, #48]	; 0x30
 801a058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a05a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 801a05e:	9203      	str	r2, [sp, #12]
 801a060:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 801a062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a068:	631a      	str	r2, [r3, #48]	; 0x30
 801a06a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a06c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 801a070:	9204      	str	r2, [sp, #16]
 801a072:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801a074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a07a:	631a      	str	r2, [r3, #48]	; 0x30
 801a07c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a07e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 801a082:	9205      	str	r2, [sp, #20]
 801a084:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801a086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a08c:	631a      	str	r2, [r3, #48]	; 0x30
 801a08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a094:	9306      	str	r3, [sp, #24]
 801a096:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 801a098:	2310      	movs	r3, #16
 801a09a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a09c:	2502      	movs	r5, #2
 801a09e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801a0a0:	260e      	movs	r6, #14
 801a0a2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 801a0a4:	a907      	add	r1, sp, #28
 801a0a6:	481d      	ldr	r0, [pc, #116]	; (801a11c <HAL_LTDC_MspInit+0x110>)
 801a0a8:	f7e8 fe5c 	bl	8002d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 801a0ac:	f64e 73ff 	movw	r3, #61439	; 0xefff
 801a0b0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a0b2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a0b4:	2400      	movs	r4, #0
 801a0b6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a0b8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801a0ba:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801a0bc:	a907      	add	r1, sp, #28
 801a0be:	4818      	ldr	r0, [pc, #96]	; (801a120 <HAL_LTDC_MspInit+0x114>)
 801a0c0:	f7e8 fe50 	bl	8002d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 801a0c4:	23f7      	movs	r3, #247	; 0xf7
 801a0c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a0c8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a0ca:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a0cc:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801a0ce:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801a0d0:	a907      	add	r1, sp, #28
 801a0d2:	4814      	ldr	r0, [pc, #80]	; (801a124 <HAL_LTDC_MspInit+0x118>)
 801a0d4:	f7e8 fe46 	bl	8002d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 801a0d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a0dc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a0de:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a0e0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a0e2:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801a0e4:	2309      	movs	r3, #9
 801a0e6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 801a0e8:	a907      	add	r1, sp, #28
 801a0ea:	480f      	ldr	r0, [pc, #60]	; (801a128 <HAL_LTDC_MspInit+0x11c>)
 801a0ec:	f7e8 fe3a 	bl	8002d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 801a0f0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 801a0f4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a0f6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a0f8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a0fa:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801a0fc:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801a0fe:	a907      	add	r1, sp, #28
 801a100:	480a      	ldr	r0, [pc, #40]	; (801a12c <HAL_LTDC_MspInit+0x120>)
 801a102:	f7e8 fe2f 	bl	8002d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801a106:	4622      	mov	r2, r4
 801a108:	2105      	movs	r1, #5
 801a10a:	2058      	movs	r0, #88	; 0x58
 801a10c:	f7e7 f88e 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 801a110:	2058      	movs	r0, #88	; 0x58
 801a112:	f7e7 f8a7 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 801a116:	e785      	b.n	801a024 <HAL_LTDC_MspInit+0x18>
 801a118:	40016800 	.word	0x40016800
 801a11c:	40021000 	.word	0x40021000
 801a120:	40022400 	.word	0x40022400
 801a124:	40022800 	.word	0x40022800
 801a128:	40021800 	.word	0x40021800
 801a12c:	40022000 	.word	0x40022000

0801a130 <HAL_LTDC_MspDeInit>:
{
 801a130:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 801a132:	6802      	ldr	r2, [r0, #0]
 801a134:	4b11      	ldr	r3, [pc, #68]	; (801a17c <HAL_LTDC_MspDeInit+0x4c>)
 801a136:	429a      	cmp	r2, r3
 801a138:	d000      	beq.n	801a13c <HAL_LTDC_MspDeInit+0xc>
}
 801a13a:	bd08      	pop	{r3, pc}
    __HAL_RCC_LTDC_CLK_DISABLE();
 801a13c:	4a10      	ldr	r2, [pc, #64]	; (801a180 <HAL_LTDC_MspDeInit+0x50>)
 801a13e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801a140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801a144:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 801a146:	2110      	movs	r1, #16
 801a148:	480e      	ldr	r0, [pc, #56]	; (801a184 <HAL_LTDC_MspDeInit+0x54>)
 801a14a:	f7e8 ffb5 	bl	80030b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 801a14e:	f64e 71ff 	movw	r1, #61439	; 0xefff
 801a152:	480d      	ldr	r0, [pc, #52]	; (801a188 <HAL_LTDC_MspDeInit+0x58>)
 801a154:	f7e8 ffb0 	bl	80030b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 801a158:	21f7      	movs	r1, #247	; 0xf7
 801a15a:	480c      	ldr	r0, [pc, #48]	; (801a18c <HAL_LTDC_MspDeInit+0x5c>)
 801a15c:	f7e8 ffac 	bl	80030b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 801a160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801a164:	480a      	ldr	r0, [pc, #40]	; (801a190 <HAL_LTDC_MspDeInit+0x60>)
 801a166:	f7e8 ffa7 	bl	80030b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 801a16a:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 801a16e:	4809      	ldr	r0, [pc, #36]	; (801a194 <HAL_LTDC_MspDeInit+0x64>)
 801a170:	f7e8 ffa2 	bl	80030b8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 801a174:	2058      	movs	r0, #88	; 0x58
 801a176:	f7e7 f883 	bl	8001280 <HAL_NVIC_DisableIRQ>
}
 801a17a:	e7de      	b.n	801a13a <HAL_LTDC_MspDeInit+0xa>
 801a17c:	40016800 	.word	0x40016800
 801a180:	40023800 	.word	0x40023800
 801a184:	40021000 	.word	0x40021000
 801a188:	40022400 	.word	0x40022400
 801a18c:	40022800 	.word	0x40022800
 801a190:	40021800 	.word	0x40021800
 801a194:	40022000 	.word	0x40022000

0801a198 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 801a198:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 801a19a:	f7ff fde9 	bl	8019d70 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801a19e:	bd08      	pop	{r3, pc}

0801a1a0 <HAL_DMA2D_MspInit>:
  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
  if(dma2dHandle->Instance==DMA2D)
 801a1a0:	6802      	ldr	r2, [r0, #0]
 801a1a2:	4b0e      	ldr	r3, [pc, #56]	; (801a1dc <HAL_DMA2D_MspInit+0x3c>)
 801a1a4:	429a      	cmp	r2, r3
 801a1a6:	d000      	beq.n	801a1aa <HAL_DMA2D_MspInit+0xa>
 801a1a8:	4770      	bx	lr
{
 801a1aa:	b500      	push	{lr}
 801a1ac:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801a1ae:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 801a1b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a1b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 801a1b8:	631a      	str	r2, [r3, #48]	; 0x30
 801a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a1c0:	9301      	str	r3, [sp, #4]
 801a1c2:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	2105      	movs	r1, #5
 801a1c8:	205a      	movs	r0, #90	; 0x5a
 801a1ca:	f7e7 f82f 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801a1ce:	205a      	movs	r0, #90	; 0x5a
 801a1d0:	f7e7 f848 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 801a1d4:	b003      	add	sp, #12
 801a1d6:	f85d fb04 	ldr.w	pc, [sp], #4
 801a1da:	bf00      	nop
 801a1dc:	4002b000 	.word	0x4002b000

0801a1e0 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 801a1e0:	b508      	push	{r3, lr}
  if(dma2dHandle->Instance==DMA2D)
 801a1e2:	6802      	ldr	r2, [r0, #0]
 801a1e4:	4b06      	ldr	r3, [pc, #24]	; (801a200 <HAL_DMA2D_MspDeInit+0x20>)
 801a1e6:	429a      	cmp	r2, r3
 801a1e8:	d000      	beq.n	801a1ec <HAL_DMA2D_MspDeInit+0xc>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 801a1ea:	bd08      	pop	{r3, pc}
    __HAL_RCC_DMA2D_CLK_DISABLE();
 801a1ec:	4a05      	ldr	r2, [pc, #20]	; (801a204 <HAL_DMA2D_MspDeInit+0x24>)
 801a1ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801a1f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801a1f4:	6313      	str	r3, [r2, #48]	; 0x30
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 801a1f6:	205a      	movs	r0, #90	; 0x5a
 801a1f8:	f7e7 f842 	bl	8001280 <HAL_NVIC_DisableIRQ>
}
 801a1fc:	e7f5      	b.n	801a1ea <HAL_DMA2D_MspDeInit+0xa>
 801a1fe:	bf00      	nop
 801a200:	4002b000 	.word	0x4002b000
 801a204:	40023800 	.word	0x40023800

0801a208 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 801a208:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 801a20a:	6803      	ldr	r3, [r0, #0]
 801a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a20e:	4798      	blx	r3
    }
 801a210:	bd08      	pop	{r3, pc}

0801a212 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 801a212:	b508      	push	{r3, lr}
    {
        executeCompleted();
 801a214:	6803      	ldr	r3, [r0, #0]
 801a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a218:	4798      	blx	r3
    }
 801a21a:	bd08      	pop	{r3, pc}

0801a21c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 801a21c:	b430      	push	{r4, r5}
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801a21e:	6805      	ldr	r5, [r0, #0]
 801a220:	682c      	ldr	r4, [r5, #0]
 801a222:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
 801a226:	4321      	orrs	r1, r4
 801a228:	6029      	str	r1, [r5, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 801a22a:	6804      	ldr	r4, [r0, #0]
 801a22c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a22e:	f021 0107 	bic.w	r1, r1, #7
 801a232:	430a      	orrs	r2, r1
 801a234:	6362      	str	r2, [r4, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801a236:	6801      	ldr	r1, [r0, #0]
 801a238:	6c08      	ldr	r0, [r1, #64]	; 0x40
 801a23a:	4a03      	ldr	r2, [pc, #12]	; (801a248 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x2c>)
 801a23c:	4002      	ands	r2, r0
 801a23e:	4313      	orrs	r3, r2
 801a240:	640b      	str	r3, [r1, #64]	; 0x40

    return HAL_OK;
}
 801a242:	2000      	movs	r0, #0
 801a244:	bc30      	pop	{r4, r5}
 801a246:	4770      	bx	lr
 801a248:	ffffc000 	.word	0xffffc000

0801a24c <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 801a24c:	b508      	push	{r3, lr}
        return instance;
 801a24e:	4b03      	ldr	r3, [pc, #12]	; (801a25c <DMA2D_XferCpltCallback+0x10>)
 801a250:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 801a252:	6858      	ldr	r0, [r3, #4]
 801a254:	6803      	ldr	r3, [r0, #0]
 801a256:	695b      	ldr	r3, [r3, #20]
 801a258:	4798      	blx	r3
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
}
 801a25a:	bd08      	pop	{r3, pc}
 801a25c:	2000bb14 	.word	0x2000bb14

0801a260 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
    //assert(0);
}
 801a260:	4770      	bx	lr
	...

0801a264 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
    if (disableChromArt)
 801a264:	4b03      	ldr	r3, [pc, #12]	; (801a274 <_ZN10STM32F7DMA11getBlitCapsEv+0x10>)
 801a266:	781b      	ldrb	r3, [r3, #0]
 801a268:	b10b      	cbz	r3, 801a26e <_ZN10STM32F7DMA11getBlitCapsEv+0xa>
    {
        return static_cast<BlitOperations>(0);
 801a26a:	2000      	movs	r0, #0
 801a26c:	4770      	bx	lr
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 801a26e:	f240 10ef 	movw	r0, #495	; 0x1ef
    }
}
 801a272:	4770      	bx	lr
 801a274:	2000b110 	.word	0x2000b110

0801a278 <_ZN10STM32F7DMA5startEv>:
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}

void STM32F7DMA::start()
{
 801a278:	b508      	push	{r3, lr}
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 801a27a:	f004 fc75 	bl	801eb68 <_ZN8touchgfx13DMA_Interface5startEv>
}
 801a27e:	bd08      	pop	{r3, pc}

0801a280 <_ZN10STM32F7DMAD1Ev>:
STM32F7DMA::~STM32F7DMA()
 801a280:	b510      	push	{r4, lr}
 801a282:	4604      	mov	r4, r0
 801a284:	4b07      	ldr	r3, [pc, #28]	; (801a2a4 <_ZN10STM32F7DMAD1Ev+0x24>)
 801a286:	6003      	str	r3, [r0, #0]
    HAL_DMA2D_DeInit(&hdma2d);
 801a288:	4807      	ldr	r0, [pc, #28]	; (801a2a8 <_ZN10STM32F7DMAD1Ev+0x28>)
 801a28a:	f7e7 fd51 	bl	8001d30 <HAL_DMA2D_DeInit>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a28e:	4b07      	ldr	r3, [pc, #28]	; (801a2ac <_ZN10STM32F7DMAD1Ev+0x2c>)
 801a290:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801a294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 801a298:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801a29c:	f3bf 8f6f 	isb	sy
}
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	bd10      	pop	{r4, pc}
 801a2a4:	08027854 	.word	0x08027854
 801a2a8:	2000aff4 	.word	0x2000aff4
 801a2ac:	e000e100 	.word	0xe000e100

0801a2b0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 801a2b0:	b510      	push	{r4, lr}
 801a2b2:	4604      	mov	r4, r0
}
 801a2b4:	f7ff ffe4 	bl	801a280 <_ZN10STM32F7DMAD1Ev>
 801a2b8:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 801a2bc:	4620      	mov	r0, r4
 801a2be:	f00a ff89 	bl	80251d4 <_ZdlPvj>
 801a2c2:	4620      	mov	r0, r4
 801a2c4:	bd10      	pop	{r4, pc}
	...

0801a2c8 <_ZN10STM32F7DMA10initializeEv>:
{
 801a2c8:	b510      	push	{r4, lr}
    hdma2d.Instance = DMA2D;
 801a2ca:	4c07      	ldr	r4, [pc, #28]	; (801a2e8 <_ZN10STM32F7DMA10initializeEv+0x20>)
 801a2cc:	4b07      	ldr	r3, [pc, #28]	; (801a2ec <_ZN10STM32F7DMA10initializeEv+0x24>)
 801a2ce:	6023      	str	r3, [r4, #0]
    HAL_DMA2D_Init(&hdma2d);
 801a2d0:	4620      	mov	r0, r4
 801a2d2:	f7e7 fce3 	bl	8001c9c <HAL_DMA2D_Init>
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801a2d6:	4b06      	ldr	r3, [pc, #24]	; (801a2f0 <_ZN10STM32F7DMA10initializeEv+0x28>)
 801a2d8:	6123      	str	r3, [r4, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801a2da:	4b06      	ldr	r3, [pc, #24]	; (801a2f4 <_ZN10STM32F7DMA10initializeEv+0x2c>)
 801a2dc:	6163      	str	r3, [r4, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a2de:	4b06      	ldr	r3, [pc, #24]	; (801a2f8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801a2e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801a2e4:	609a      	str	r2, [r3, #8]
}
 801a2e6:	bd10      	pop	{r4, pc}
 801a2e8:	2000aff4 	.word	0x2000aff4
 801a2ec:	4002b000 	.word	0x4002b000
 801a2f0:	0801a24d 	.word	0x0801a24d
 801a2f4:	0801a261 	.word	0x0801a261
 801a2f8:	e000e100 	.word	0xe000e100

0801a2fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 801a2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a300:	b082      	sub	sp, #8
 801a302:	460c      	mov	r4, r1
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 801a304:	680d      	ldr	r5, [r1, #0]
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801a306:	2d40      	cmp	r5, #64	; 0x40
 801a308:	bf18      	it	ne
 801a30a:	2d20      	cmpne	r5, #32
 801a30c:	bf0c      	ite	eq
 801a30e:	2701      	moveq	r7, #1
 801a310:	2700      	movne	r7, #0
 801a312:	d001      	beq.n	801a318 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>
 801a314:	2d04      	cmp	r5, #4
 801a316:	d01b      	beq.n	801a350 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x54>
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801a318:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801a31c:	bf18      	it	ne
 801a31e:	2d80      	cmpne	r5, #128	; 0x80
 801a320:	bf0c      	ite	eq
 801a322:	2501      	moveq	r5, #1
 801a324:	2500      	movne	r5, #0
        return instance->lcdRef;
 801a326:	4b60      	ldr	r3, [pc, #384]	; (801a4a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	6898      	ldr	r0, [r3, #8]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801a32c:	6803      	ldr	r3, [r0, #0]
 801a32e:	6a1b      	ldr	r3, [r3, #32]
 801a330:	4798      	blx	r3
 801a332:	4680      	mov	r8, r0
    switch (blitOp.operation)
 801a334:	6823      	ldr	r3, [r4, #0]
 801a336:	2b40      	cmp	r3, #64	; 0x40
 801a338:	d06f      	beq.n	801a41a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11e>
 801a33a:	d90b      	bls.n	801a354 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x58>
 801a33c:	2b80      	cmp	r3, #128	; 0x80
 801a33e:	d014      	beq.n	801a36a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6e>
 801a340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a344:	d10a      	bne.n	801a35c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x60>
        dma2dColorMode = CM_A8;
 801a346:	f04f 0a09 	mov.w	sl, #9
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801a34a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a34e:	e010      	b.n	801a372 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801a350:	2701      	movs	r7, #1
 801a352:	e7e1      	b.n	801a318 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>
    switch (blitOp.operation)
 801a354:	2b04      	cmp	r3, #4
 801a356:	d054      	beq.n	801a402 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 801a358:	2b20      	cmp	r3, #32
 801a35a:	d05e      	beq.n	801a41a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11e>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801a35c:	f1b8 0f10 	cmp.w	r8, #16
 801a360:	d060      	beq.n	801a424 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x128>
 801a362:	f04f 0a01 	mov.w	sl, #1
        dma2dTransferMode = DMA2D_M2M;
 801a366:	2100      	movs	r1, #0
 801a368:	e003      	b.n	801a372 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
        dma2dColorMode = CM_A4;
 801a36a:	f04f 0a0a 	mov.w	sl, #10
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801a36e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma2d.Init.Mode = dma2dTransferMode;
 801a372:	4b4e      	ldr	r3, [pc, #312]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a374:	6059      	str	r1, [r3, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801a376:	f1b8 0f10 	cmp.w	r8, #16
 801a37a:	d057      	beq.n	801a42c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
 801a37c:	f04f 0901 	mov.w	r9, #1
 801a380:	4e4a      	ldr	r6, [pc, #296]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a382:	f8c6 9008 	str.w	r9, [r6, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801a386:	8a63      	ldrh	r3, [r4, #18]
 801a388:	89a2      	ldrh	r2, [r4, #12]
 801a38a:	1a9a      	subs	r2, r3, r2
 801a38c:	60f2      	str	r2, [r6, #12]
                      blitOp.dstLoopStride - blitOp.nSteps);
 801a38e:	89a2      	ldrh	r2, [r4, #12]
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801a390:	1a9b      	subs	r3, r3, r2
 801a392:	464a      	mov	r2, r9
 801a394:	4630      	mov	r0, r6
 801a396:	f7ff ff41 	bl	801a21c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>
    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801a39a:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801a39e:	8a23      	ldrh	r3, [r4, #16]
 801a3a0:	89a2      	ldrh	r2, [r4, #12]
 801a3a2:	1a9b      	subs	r3, r3, r2
 801a3a4:	62b3      	str	r3, [r6, #40]	; 0x28
    if (blendingImage || blendingText)
 801a3a6:	432f      	orrs	r7, r5
 801a3a8:	d01a      	beq.n	801a3e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe4>
        if (blitOp.alpha < 255)
 801a3aa:	7e23      	ldrb	r3, [r4, #24]
 801a3ac:	2bff      	cmp	r3, #255	; 0xff
 801a3ae:	d040      	beq.n	801a432 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801a3b0:	2202      	movs	r2, #2
 801a3b2:	6332      	str	r2, [r6, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 801a3b4:	7e22      	ldrb	r2, [r4, #24]
 801a3b6:	6372      	str	r2, [r6, #52]	; 0x34
        if (blendingText)
 801a3b8:	b145      	cbz	r5, 801a3cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
            if (bitDepth == 16)
 801a3ba:	f1b8 0f10 	cmp.w	r8, #16
 801a3be:	d03c      	beq.n	801a43a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
        return color;
 801a3c0:	6963      	ldr	r3, [r4, #20]
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801a3c2:	7e22      	ldrb	r2, [r4, #24]
 801a3c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801a3c8:	4a38      	ldr	r2, [pc, #224]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a3ca:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801a3cc:	8a63      	ldrh	r3, [r4, #18]
 801a3ce:	89a2      	ldrh	r2, [r4, #12]
 801a3d0:	1a9b      	subs	r3, r3, r2
 801a3d2:	4836      	ldr	r0, [pc, #216]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a3d4:	6183      	str	r3, [r0, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801a3d6:	f8c0 901c 	str.w	r9, [r0, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801a3da:	2100      	movs	r1, #0
 801a3dc:	f7e7 ff28 	bl	8002230 <HAL_DMA2D_ConfigLayer>
    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801a3e0:	2101      	movs	r1, #1
 801a3e2:	4832      	ldr	r0, [pc, #200]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a3e4:	f7e7 ff24 	bl	8002230 <HAL_DMA2D_ConfigLayer>
    if (blendingImage || blendingText)
 801a3e8:	2f00      	cmp	r7, #0
 801a3ea:	d151      	bne.n	801a490 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>
                           (unsigned int)blitOp.pSrc,
 801a3ec:	6861      	ldr	r1, [r4, #4]
                           (unsigned int)blitOp.pDst,
 801a3ee:	68a2      	ldr	r2, [r4, #8]
                           blitOp.nSteps, blitOp.nLoops);
 801a3f0:	89a3      	ldrh	r3, [r4, #12]
 801a3f2:	89e0      	ldrh	r0, [r4, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 801a3f4:	9000      	str	r0, [sp, #0]
 801a3f6:	482d      	ldr	r0, [pc, #180]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a3f8:	f7e7 fd0a 	bl	8001e10 <HAL_DMA2D_Start_IT>
}
 801a3fc:	b002      	add	sp, #8
 801a3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801a402:	2810      	cmp	r0, #16
 801a404:	d004      	beq.n	801a410 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x114>
 801a406:	f04f 0a01 	mov.w	sl, #1
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801a40a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a40e:	e7b0      	b.n	801a372 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801a410:	f04f 0a02 	mov.w	sl, #2
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801a414:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a418:	e7ab      	b.n	801a372 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
        dma2dColorMode = CM_ARGB8888;
 801a41a:	f04f 0a00 	mov.w	sl, #0
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801a41e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        break;
 801a422:	e7a6      	b.n	801a372 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801a424:	f04f 0a02 	mov.w	sl, #2
        dma2dTransferMode = DMA2D_M2M;
 801a428:	2100      	movs	r1, #0
 801a42a:	e7a2      	b.n	801a372 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x76>
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801a42c:	f04f 0902 	mov.w	r9, #2
 801a430:	e7a6      	b.n	801a380 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801a432:	4b1e      	ldr	r3, [pc, #120]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a434:	2200      	movs	r2, #0
 801a436:	631a      	str	r2, [r3, #48]	; 0x30
 801a438:	e7be      	b.n	801a3b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
        return (uint16_t)color;
 801a43a:	6963      	ldr	r3, [r4, #20]
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801a43c:	f3c3 21c4 	ubfx	r1, r3, #11, #5
 801a440:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 801a444:	481a      	ldr	r0, [pc, #104]	; (801a4b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>)
 801a446:	fb80 5201 	smull	r5, r2, r0, r1
 801a44a:	1855      	adds	r5, r2, r1
 801a44c:	17ca      	asrs	r2, r1, #31
 801a44e:	ebc2 1225 	rsb	r2, r2, r5, asr #4
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801a452:	f3c3 1145 	ubfx	r1, r3, #5, #6
 801a456:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 801a45a:	4d16      	ldr	r5, [pc, #88]	; (801a4b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
 801a45c:	fb85 6501 	smull	r6, r5, r5, r1
 801a460:	440d      	add	r5, r1
 801a462:	17c9      	asrs	r1, r1, #31
 801a464:	ebc1 1165 	rsb	r1, r1, r5, asr #5
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801a468:	f003 031f 	and.w	r3, r3, #31
 801a46c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 801a470:	fb80 5003 	smull	r5, r0, r0, r3
 801a474:	4418      	add	r0, r3
 801a476:	17db      	asrs	r3, r3, #31
 801a478:	ebc3 1320 	rsb	r3, r3, r0, asr #4
                uint32_t alpha = blitOp.alpha;
 801a47c:	7e20      	ldrb	r0, [r4, #24]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801a47e:	0412      	lsls	r2, r2, #16
 801a480:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 801a484:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801a488:	4313      	orrs	r3, r2
 801a48a:	4a08      	ldr	r2, [pc, #32]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a48c:	6353      	str	r3, [r2, #52]	; 0x34
 801a48e:	e79d      	b.n	801a3cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
                                   (unsigned int)blitOp.pSrc,
 801a490:	6861      	ldr	r1, [r4, #4]
                                   (unsigned int)blitOp.pDst,
 801a492:	68a2      	ldr	r2, [r4, #8]
                                   blitOp.nSteps, blitOp.nLoops);
 801a494:	89a3      	ldrh	r3, [r4, #12]
 801a496:	89e0      	ldrh	r0, [r4, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801a498:	9001      	str	r0, [sp, #4]
 801a49a:	9300      	str	r3, [sp, #0]
 801a49c:	4613      	mov	r3, r2
 801a49e:	4803      	ldr	r0, [pc, #12]	; (801a4ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>)
 801a4a0:	f7e7 fce9 	bl	8001e76 <HAL_DMA2D_BlendingStart_IT>
 801a4a4:	e7aa      	b.n	801a3fc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 801a4a6:	bf00      	nop
 801a4a8:	2000bb14 	.word	0x2000bb14
 801a4ac:	2000aff4 	.word	0x2000aff4
 801a4b0:	84210843 	.word	0x84210843
 801a4b4:	82082083 	.word	0x82082083

0801a4b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
{
 801a4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a4ba:	b083      	sub	sp, #12
 801a4bc:	460c      	mov	r4, r1
 801a4be:	4b41      	ldr	r3, [pc, #260]	; (801a5c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	6898      	ldr	r0, [r3, #8]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801a4c4:	6803      	ldr	r3, [r0, #0]
 801a4c6:	6a1b      	ldr	r3, [r3, #32]
 801a4c8:	4798      	blx	r3
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801a4ca:	2810      	cmp	r0, #16
 801a4cc:	d030      	beq.n	801a530 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x78>
 801a4ce:	2601      	movs	r6, #1
    if (bitDepth == 16)
 801a4d0:	2810      	cmp	r0, #16
 801a4d2:	d02f      	beq.n	801a534 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x7c>
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 801a4d4:	7e23      	ldrb	r3, [r4, #24]
        return color;
 801a4d6:	6965      	ldr	r5, [r4, #20]
 801a4d8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    switch (blitOp.operation)
 801a4dc:	6823      	ldr	r3, [r4, #0]
 801a4de:	2b08      	cmp	r3, #8
 801a4e0:	d152      	bne.n	801a588 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801a4e2:	f44f 3700 	mov.w	r7, #131072	; 0x20000
    hdma2d.Init.Mode = dma2dTransferMode;
 801a4e6:	4838      	ldr	r0, [pc, #224]	; (801a5c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801a4e8:	6047      	str	r7, [r0, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801a4ea:	6086      	str	r6, [r0, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801a4ec:	8a63      	ldrh	r3, [r4, #18]
 801a4ee:	89a2      	ldrh	r2, [r4, #12]
 801a4f0:	1a9a      	subs	r2, r3, r2
 801a4f2:	60c2      	str	r2, [r0, #12]
                      blitOp.dstLoopStride - blitOp.nSteps);
 801a4f4:	89a2      	ldrh	r2, [r4, #12]
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801a4f6:	1a9b      	subs	r3, r3, r2
 801a4f8:	4632      	mov	r2, r6
 801a4fa:	4639      	mov	r1, r7
 801a4fc:	f7ff fe8e 	bl	801a21c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>
    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801a500:	f5b7 3f00 	cmp.w	r7, #131072	; 0x20000
 801a504:	d043      	beq.n	801a58e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd6>
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801a506:	4b30      	ldr	r3, [pc, #192]	; (801a5c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801a508:	62de      	str	r6, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801a50a:	2200      	movs	r2, #0
 801a50c:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801a50e:	2101      	movs	r1, #1
 801a510:	482d      	ldr	r0, [pc, #180]	; (801a5c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801a512:	f7e7 fe8d 	bl	8002230 <HAL_DMA2D_ConfigLayer>
    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 801a516:	f5b7 3f00 	cmp.w	r7, #131072	; 0x20000
 801a51a:	d047      	beq.n	801a5ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801a51c:	68a2      	ldr	r2, [r4, #8]
                           blitOp.nSteps, blitOp.nLoops);
 801a51e:	89a3      	ldrh	r3, [r4, #12]
 801a520:	89e1      	ldrh	r1, [r4, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801a522:	9100      	str	r1, [sp, #0]
 801a524:	4629      	mov	r1, r5
 801a526:	4828      	ldr	r0, [pc, #160]	; (801a5c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801a528:	f7e7 fc72 	bl	8001e10 <HAL_DMA2D_Start_IT>
}
 801a52c:	b003      	add	sp, #12
 801a52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801a530:	2602      	movs	r6, #2
 801a532:	e7cd      	b.n	801a4d0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>
        return (uint16_t)color;
 801a534:	6963      	ldr	r3, [r4, #20]
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801a536:	f3c3 22c4 	ubfx	r2, r3, #11, #5
 801a53a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801a53e:	4923      	ldr	r1, [pc, #140]	; (801a5cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 801a540:	fb81 0502 	smull	r0, r5, r1, r2
 801a544:	4415      	add	r5, r2
 801a546:	17d2      	asrs	r2, r2, #31
 801a548:	ebc2 1525 	rsb	r5, r2, r5, asr #4
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801a54c:	f3c3 1245 	ubfx	r2, r3, #5, #6
 801a550:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 801a554:	481e      	ldr	r0, [pc, #120]	; (801a5d0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>)
 801a556:	fb80 7002 	smull	r7, r0, r0, r2
 801a55a:	4410      	add	r0, r2
 801a55c:	17d2      	asrs	r2, r2, #31
 801a55e:	ebc2 1260 	rsb	r2, r2, r0, asr #5
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801a562:	f003 031f 	and.w	r3, r3, #31
 801a566:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 801a56a:	fb81 0103 	smull	r0, r1, r1, r3
 801a56e:	4419      	add	r1, r3
 801a570:	17db      	asrs	r3, r3, #31
 801a572:	ebc3 1321 	rsb	r3, r3, r1, asr #4
        uint32_t alpha = blitOp.alpha;
 801a576:	7e21      	ldrb	r1, [r4, #24]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801a578:	042d      	lsls	r5, r5, #16
 801a57a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
 801a57e:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 801a582:	ea42 0503 	orr.w	r5, r2, r3
 801a586:	e7a9      	b.n	801a4dc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x24>
        dma2dTransferMode = DMA2D_R2M;
 801a588:	f44f 3740 	mov.w	r7, #196608	; 0x30000
 801a58c:	e7ab      	b.n	801a4e6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801a58e:	480e      	ldr	r0, [pc, #56]	; (801a5c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801a590:	2301      	movs	r3, #1
 801a592:	6303      	str	r3, [r0, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 801a594:	6345      	str	r5, [r0, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801a596:	2309      	movs	r3, #9
 801a598:	62c3      	str	r3, [r0, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801a59a:	8a63      	ldrh	r3, [r4, #18]
 801a59c:	89a2      	ldrh	r2, [r4, #12]
 801a59e:	1a9b      	subs	r3, r3, r2
 801a5a0:	6183      	str	r3, [r0, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801a5a2:	61c6      	str	r6, [r0, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801a5a4:	2100      	movs	r1, #0
 801a5a6:	f7e7 fe43 	bl	8002230 <HAL_DMA2D_ConfigLayer>
 801a5aa:	e7b0      	b.n	801a50e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x56>
                                   (unsigned int)blitOp.pDst,
 801a5ac:	68a1      	ldr	r1, [r4, #8]
                                   blitOp.nSteps, blitOp.nLoops);
 801a5ae:	89a3      	ldrh	r3, [r4, #12]
 801a5b0:	89e2      	ldrh	r2, [r4, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801a5b2:	9201      	str	r2, [sp, #4]
 801a5b4:	9300      	str	r3, [sp, #0]
 801a5b6:	460b      	mov	r3, r1
 801a5b8:	460a      	mov	r2, r1
 801a5ba:	4803      	ldr	r0, [pc, #12]	; (801a5c8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801a5bc:	f7e7 fc5b 	bl	8001e76 <HAL_DMA2D_BlendingStart_IT>
 801a5c0:	e7b4      	b.n	801a52c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>
 801a5c2:	bf00      	nop
 801a5c4:	2000bb14 	.word	0x2000bb14
 801a5c8:	2000aff4 	.word	0x2000aff4
 801a5cc:	84210843 	.word	0x84210843
 801a5d0:	82082083 	.word	0x82082083

0801a5d4 <_ZN10STM32F7DMAC1Ev>:
STM32F7DMA::STM32F7DMA()
 801a5d4:	b538      	push	{r3, r4, r5, lr}
 801a5d6:	4605      	mov	r5, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801a5d8:	300c      	adds	r0, #12
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 801a5da:	6068      	str	r0, [r5, #4]
 801a5dc:	2300      	movs	r3, #0
 801a5de:	722b      	strb	r3, [r5, #8]
 801a5e0:	726b      	strb	r3, [r5, #9]
 801a5e2:	462c      	mov	r4, r5
 801a5e4:	4b08      	ldr	r3, [pc, #32]	; (801a608 <_ZN10STM32F7DMAC1Ev+0x34>)
 801a5e6:	f844 3b20 	str.w	r3, [r4], #32
 801a5ea:	2260      	movs	r2, #96	; 0x60
 801a5ec:	4621      	mov	r1, r4
 801a5ee:	f004 facd 	bl	801eb8c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801a5f2:	235f      	movs	r3, #95	; 0x5f
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	db04      	blt.n	801a602 <_ZN10STM32F7DMAC1Ev+0x2e>
    colortype() : color(0) {}
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	6162      	str	r2, [r4, #20]
 801a5fc:	341c      	adds	r4, #28
 801a5fe:	3b01      	subs	r3, #1
 801a600:	e7f8      	b.n	801a5f4 <_ZN10STM32F7DMAC1Ev+0x20>
{}
 801a602:	4628      	mov	r0, r5
 801a604:	bd38      	pop	{r3, r4, r5, pc}
 801a606:	bf00      	nop
 801a608:	08027854 	.word	0x08027854

0801a60c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
        requestedOrientation = orientation;
 801a60c:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
        displayOrientationChangeRequested = true;
 801a610:	2301      	movs	r3, #1
 801a612:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    }
 801a616:	4770      	bx	lr

0801a618 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 801a618:	b508      	push	{r3, lr}
        return dma.getBlitCaps();
 801a61a:	6840      	ldr	r0, [r0, #4]
 801a61c:	6803      	ldr	r3, [r0, #0]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	4798      	blx	r3
    };
 801a622:	bd08      	pop	{r3, pc}

0801a624 <_ZN8touchgfx3HAL9sampleKeyERh>:
    }
 801a624:	2000      	movs	r0, #0
 801a626:	4770      	bx	lr

0801a628 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 801a628:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 801a62a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801a62c:	b10b      	cbz	r3, 801a632 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
 801a62e:	4608      	mov	r0, r1
        {
            taskDelayFunc(ms);
 801a630:	4798      	blx	r3
        }
    }
 801a632:	bd08      	pop	{r3, pc}

0801a634 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 801a634:	b410      	push	{r4}
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801a636:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
 801a63a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801a63e:	429a      	cmp	r2, r3
 801a640:	d012      	beq.n	801a668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x34>
        {
            if (DISPLAY_ROTATION == rotate0)
 801a642:	4b12      	ldr	r3, [pc, #72]	; (801a68c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 801a644:	781b      	ldrb	r3, [r3, #0]
 801a646:	b963      	cbnz	r3, 801a662 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801a648:	4b11      	ldr	r3, [pc, #68]	; (801a690 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 801a64a:	8818      	ldrh	r0, [r3, #0]
 801a64c:	4a11      	ldr	r2, [pc, #68]	; (801a694 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 801a64e:	8010      	strh	r0, [r2, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801a650:	4911      	ldr	r1, [pc, #68]	; (801a698 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 801a652:	880a      	ldrh	r2, [r1, #0]
 801a654:	4c11      	ldr	r4, [pc, #68]	; (801a69c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 801a656:	8022      	strh	r2, [r4, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801a658:	8008      	strh	r0, [r1, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801a65a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801a65c:	4b0b      	ldr	r3, [pc, #44]	; (801a68c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 801a65e:	2201      	movs	r2, #1
 801a660:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801a662:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a666:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
 801a668:	4b08      	ldr	r3, [pc, #32]	; (801a68c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 801a66a:	781b      	ldrb	r3, [r3, #0]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d0f8      	beq.n	801a662 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801a670:	4909      	ldr	r1, [pc, #36]	; (801a698 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 801a672:	880a      	ldrh	r2, [r1, #0]
 801a674:	4b07      	ldr	r3, [pc, #28]	; (801a694 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 801a676:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 801a678:	4b05      	ldr	r3, [pc, #20]	; (801a690 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 801a67a:	8818      	ldrh	r0, [r3, #0]
 801a67c:	4c07      	ldr	r4, [pc, #28]	; (801a69c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 801a67e:	8020      	strh	r0, [r4, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801a680:	8008      	strh	r0, [r1, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 801a682:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801a684:	4b01      	ldr	r3, [pc, #4]	; (801a68c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 801a686:	2200      	movs	r2, #0
 801a688:	701a      	strb	r2, [r3, #0]
    }
 801a68a:	e7ea      	b.n	801a662 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
 801a68c:	2000bb0a 	.word	0x2000bb0a
 801a690:	2000bb06 	.word	0x2000bb06
 801a694:	2000bb0c 	.word	0x2000bb0c
 801a698:	2000bb08 	.word	0x2000bb08
 801a69c:	2000bb0e 	.word	0x2000bb0e

0801a6a0 <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801a6a0:	4b01      	ldr	r3, [pc, #4]	; (801a6a8 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x8>)
 801a6a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 801a6a4:	4770      	bx	lr
 801a6a6:	bf00      	nop
 801a6a8:	40016884 	.word	0x40016884

0801a6ac <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801a6ac:	4b02      	ldr	r3, [pc, #8]	; (801a6b8 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0xc>)
 801a6ae:	6299      	str	r1, [r3, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801a6b0:	3b84      	subs	r3, #132	; 0x84
 801a6b2:	2201      	movs	r2, #1
 801a6b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 801a6b6:	4770      	bx	lr
 801a6b8:	40016884 	.word	0x40016884

0801a6bc <_ZN10STM32F7HAL17getTFTCurrentLineEv>:
{
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801a6bc:	4b06      	ldr	r3, [pc, #24]	; (801a6d8 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x1c>)
 801a6be:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a6c0:	b280      	uxth	r0, r0
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801a6c2:	68db      	ldr	r3, [r3, #12]
 801a6c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a6c8:	3301      	adds	r3, #1

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801a6ca:	4298      	cmp	r0, r3
 801a6cc:	d302      	bcc.n	801a6d4 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x18>
    {
        return 0;
    }
    else
    {
        return curr - backPorchY;
 801a6ce:	1ac0      	subs	r0, r0, r3
 801a6d0:	b280      	uxth	r0, r0
 801a6d2:	4770      	bx	lr
        return 0;
 801a6d4:	2000      	movs	r0, #0
    }
}
 801a6d6:	4770      	bx	lr
 801a6d8:	40016800 	.word	0x40016800

0801a6dc <_ZN10STM32F7HAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a6dc:	4b03      	ldr	r3, [pc, #12]	; (801a6ec <_ZN10STM32F7HAL19configureInterruptsEv+0x10>)
 801a6de:	2290      	movs	r2, #144	; 0x90
 801a6e0:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 801a6e4:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
void STM32F7HAL::configureInterrupts()
{
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 801a6e8:	4770      	bx	lr
 801a6ea:	bf00      	nop
 801a6ec:	e000e100 	.word	0xe000e100

0801a6f0 <_ZN10STM32F7HAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a6f0:	4b0c      	ldr	r3, [pc, #48]	; (801a724 <_ZN10STM32F7HAL17disableInterruptsEv+0x34>)
 801a6f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a6f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 801a6fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801a6fe:	f3bf 8f6f 	isb	sy
 801a702:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801a706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 801a70a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801a70e:	f3bf 8f6f 	isb	sy
 801a712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801a716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 801a71a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801a71e:	f3bf 8f6f 	isb	sy
void STM32F7HAL::disableInterrupts()
{
    NVIC_DisableIRQ(LTDC_IRQn);
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_ER_IRQn);
}
 801a722:	4770      	bx	lr
 801a724:	e000e100 	.word	0xe000e100

0801a728 <_ZN10STM32F7HAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a728:	4b05      	ldr	r3, [pc, #20]	; (801a740 <_ZN10STM32F7HAL16enableInterruptsEv+0x18>)
 801a72a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a72e:	609a      	str	r2, [r3, #8]
 801a730:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801a734:	609a      	str	r2, [r3, #8]
 801a736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801a73a:	609a      	str	r2, [r3, #8]
void STM32F7HAL::enableInterrupts()
{
    NVIC_EnableIRQ(LTDC_IRQn);
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_ER_IRQn);
}
 801a73c:	4770      	bx	lr
 801a73e:	bf00      	nop
 801a740:	e000e100 	.word	0xe000e100

0801a744 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 801a744:	4770      	bx	lr
	...

0801a748 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
{
 801a748:	b510      	push	{r4, lr}
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801a74a:	4b0c      	ldr	r3, [pc, #48]	; (801a77c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x34>)
 801a74c:	68d9      	ldr	r1, [r3, #12]
 801a74e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801a752:	3901      	subs	r1, #1
 801a754:	b289      	uxth	r1, r1
 801a756:	4a0a      	ldr	r2, [pc, #40]	; (801a780 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x38>)
 801a758:	8011      	strh	r1, [r2, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801a75a:	691b      	ldr	r3, [r3, #16]
 801a75c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a760:	3b01      	subs	r3, #1
 801a762:	4a08      	ldr	r2, [pc, #32]	; (801a784 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x3c>)
 801a764:	8013      	strh	r3, [r2, #0]
    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 801a766:	4c08      	ldr	r4, [pc, #32]	; (801a788 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x40>)
 801a768:	4620      	mov	r0, r4
 801a76a:	f7eb fa4f 	bl	8005c0c <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 801a76e:	6822      	ldr	r2, [r4, #0]
 801a770:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a772:	f043 0303 	orr.w	r3, r3, #3
 801a776:	6353      	str	r3, [r2, #52]	; 0x34
}
 801a778:	bd10      	pop	{r4, pc}
 801a77a:	bf00      	nop
 801a77c:	40016800 	.word	0x40016800
 801a780:	2000b114 	.word	0x2000b114
 801a784:	2000b112 	.word	0x2000b112
 801a788:	2000b034 	.word	0x2000b034

0801a78c <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801a78c:	b508      	push	{r3, lr}
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 801a78e:	f003 fd0b 	bl	801e1a8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801a792:	bd08      	pop	{r3, pc}

0801a794 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 801a794:	b510      	push	{r4, lr}
 801a796:	4604      	mov	r4, r0
        swapFrameBuffers();
 801a798:	f004 f8b4 	bl	801e904 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801a79c:	6823      	ldr	r3, [r4, #0]
 801a79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a7a2:	4620      	mov	r0, r4
 801a7a4:	4798      	blx	r3
    }
 801a7a6:	bd10      	pop	{r4, pc}

0801a7a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801a7a8:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801a7aa:	b169      	cbz	r1, 801a7c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x20>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801a7ac:	6381      	str	r1, [r0, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801a7ae:	63c2      	str	r2, [r0, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801a7b0:	6403      	str	r3, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801a7b2:	3200      	adds	r2, #0
 801a7b4:	bf18      	it	ne
 801a7b6:	2201      	movne	r2, #1
 801a7b8:	4907      	ldr	r1, [pc, #28]	; (801a7d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 801a7ba:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801a7bc:	3300      	adds	r3, #0
 801a7be:	bf18      	it	ne
 801a7c0:	2301      	movne	r3, #1
 801a7c2:	4a06      	ldr	r2, [pc, #24]	; (801a7dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 801a7c4:	7013      	strb	r3, [r2, #0]
    }
 801a7c6:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801a7c8:	4b05      	ldr	r3, [pc, #20]	; (801a7e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 801a7ca:	4a06      	ldr	r2, [pc, #24]	; (801a7e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 801a7cc:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801a7d0:	4805      	ldr	r0, [pc, #20]	; (801a7e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 801a7d2:	f00a fd1b 	bl	802520c <__assert_func>
 801a7d6:	bf00      	nop
 801a7d8:	2000bb10 	.word	0x2000bb10
 801a7dc:	2000bb11 	.word	0x2000bb11
 801a7e0:	08027898 	.word	0x08027898
 801a7e4:	08027a18 	.word	0x08027a18
 801a7e8:	080278d0 	.word	0x080278d0

0801a7ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 801a7ec:	b570      	push	{r4, r5, r6, lr}
 801a7ee:	f89d 4010 	ldrb.w	r4, [sp, #16]
        switch (depth)
 801a7f2:	1e55      	subs	r5, r2, #1
 801a7f4:	2d1f      	cmp	r5, #31
 801a7f6:	d834      	bhi.n	801a862 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x76>
 801a7f8:	e8df f005 	tbb	[pc, r5]
 801a7fc:	25332525 	.word	0x25332525
 801a800:	10333333 	.word	0x10333333
 801a804:	33333333 	.word	0x33333333
 801a808:	10333333 	.word	0x10333333
 801a80c:	33333333 	.word	0x33333333
 801a810:	10333333 	.word	0x10333333
 801a814:	33333333 	.word	0x33333333
 801a818:	10333333 	.word	0x10333333
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 801a81c:	4d17      	ldr	r5, [pc, #92]	; (801a87c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>)
 801a81e:	882e      	ldrh	r6, [r5, #0]
 801a820:	4d17      	ldr	r5, [pc, #92]	; (801a880 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x94>)
 801a822:	882d      	ldrh	r5, [r5, #0]
 801a824:	fb05 f506 	mul.w	r5, r5, r6
 801a828:	08d2      	lsrs	r2, r2, #3
 801a82a:	fb02 f205 	mul.w	r2, r2, r5
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 801a82e:	6381      	str	r1, [r0, #56]	; 0x38
        if (useDoubleBuffering)
 801a830:	b1f3      	cbz	r3, 801a870 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x84>
            buffer += bufferSizeInBytes;
 801a832:	4411      	add	r1, r2
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 801a834:	63c1      	str	r1, [r0, #60]	; 0x3c
        if (useAnimationStorage)
 801a836:	b9f4      	cbnz	r4, 801a876 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x8a>
            frameBuffer2 = 0;
 801a838:	2200      	movs	r2, #0
 801a83a:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 801a83c:	4a11      	ldr	r2, [pc, #68]	; (801a884 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x98>)
 801a83e:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 801a840:	4b11      	ldr	r3, [pc, #68]	; (801a888 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x9c>)
 801a842:	701c      	strb	r4, [r3, #0]
    }
 801a844:	bd70      	pop	{r4, r5, r6, pc}
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 801a846:	4d0d      	ldr	r5, [pc, #52]	; (801a87c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x90>)
 801a848:	882d      	ldrh	r5, [r5, #0]
 801a84a:	fb02 f205 	mul.w	r2, r2, r5
 801a84e:	3207      	adds	r2, #7
 801a850:	d405      	bmi.n	801a85e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x72>
 801a852:	10d2      	asrs	r2, r2, #3
 801a854:	4d0a      	ldr	r5, [pc, #40]	; (801a880 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x94>)
 801a856:	882d      	ldrh	r5, [r5, #0]
 801a858:	fb02 f205 	mul.w	r2, r2, r5
            break;
 801a85c:	e7e7      	b.n	801a82e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x42>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 801a85e:	3207      	adds	r2, #7
 801a860:	e7f7      	b.n	801a852 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x66>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 801a862:	4b0a      	ldr	r3, [pc, #40]	; (801a88c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xa0>)
 801a864:	4a0a      	ldr	r2, [pc, #40]	; (801a890 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xa4>)
 801a866:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 801a86a:	480a      	ldr	r0, [pc, #40]	; (801a894 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xa8>)
 801a86c:	f00a fcce 	bl	802520c <__assert_func>
            frameBuffer1 = 0;
 801a870:	2500      	movs	r5, #0
 801a872:	63c5      	str	r5, [r0, #60]	; 0x3c
 801a874:	e7df      	b.n	801a836 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x4a>
            buffer += bufferSizeInBytes;
 801a876:	440a      	add	r2, r1
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 801a878:	6402      	str	r2, [r0, #64]	; 0x40
 801a87a:	e7df      	b.n	801a83c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x50>
 801a87c:	2000bb06 	.word	0x2000bb06
 801a880:	2000bb08 	.word	0x2000bb08
 801a884:	2000bb10 	.word	0x2000bb10
 801a888:	2000bb11 	.word	0x2000bb11
 801a88c:	08027394 	.word	0x08027394
 801a890:	080279c4 	.word	0x080279c4
 801a894:	080278d0 	.word	0x080278d0

0801a898 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801a898:	b508      	push	{r3, lr}
    {
        HAL::flushFrameBuffer();
 801a89a:	f003 fc7f 	bl	801e19c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801a89e:	bd08      	pop	{r3, pc}

0801a8a0 <_ZN10STM32F7HALD0Ev>:
class STM32F7HAL : public touchgfx::HAL
 801a8a0:	b510      	push	{r4, lr}
 801a8a2:	4604      	mov	r4, r0
 801a8a4:	2168      	movs	r1, #104	; 0x68
 801a8a6:	f00a fc95 	bl	80251d4 <_ZdlPvj>
 801a8aa:	4620      	mov	r0, r4
 801a8ac:	bd10      	pop	{r4, pc}
	...

0801a8b0 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 801a8b0:	b510      	push	{r4, lr}
    if (LTDC->LIPCR == lcd_int_active_line)
 801a8b2:	4b12      	ldr	r3, [pc, #72]	; (801a8fc <HAL_LTDC_LineEventCallback+0x4c>)
 801a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8b6:	4a12      	ldr	r2, [pc, #72]	; (801a900 <HAL_LTDC_LineEventCallback+0x50>)
 801a8b8:	8811      	ldrh	r1, [r2, #0]
 801a8ba:	428b      	cmp	r3, r1
 801a8bc:	d00a      	beq.n	801a8d4 <HAL_LTDC_LineEventCallback+0x24>
        GPIO::set(GPIO::VSYNC_FREQ);
    }
    else
    {
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801a8be:	f7eb f9a5 	bl	8005c0c <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 801a8c2:	2000      	movs	r0, #0
 801a8c4:	f7ff fa52 	bl	8019d6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 801a8c8:	4b0e      	ldr	r3, [pc, #56]	; (801a904 <HAL_LTDC_LineEventCallback+0x54>)
 801a8ca:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 801a8cc:	6803      	ldr	r3, [r0, #0]
 801a8ce:	699b      	ldr	r3, [r3, #24]
 801a8d0:	4798      	blx	r3
        HAL::getInstance()->frontPorchEntered();
    }
}
 801a8d2:	bd10      	pop	{r4, pc}
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801a8d4:	4b0c      	ldr	r3, [pc, #48]	; (801a908 <HAL_LTDC_LineEventCallback+0x58>)
 801a8d6:	8819      	ldrh	r1, [r3, #0]
 801a8d8:	f7eb f998 	bl	8005c0c <HAL_LTDC_ProgramLineEvent>
        return instance;
 801a8dc:	4c09      	ldr	r4, [pc, #36]	; (801a904 <HAL_LTDC_LineEventCallback+0x54>)
 801a8de:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 801a8e0:	f892 3056 	ldrb.w	r3, [r2, #86]	; 0x56
 801a8e4:	3301      	adds	r3, #1
 801a8e6:	f882 3056 	strb.w	r3, [r2, #86]	; 0x56
        OSWrappers::signalVSync();
 801a8ea:	f7f9 fbb3 	bl	8014054 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        HAL::getInstance()->swapFrameBuffers();
 801a8ee:	6820      	ldr	r0, [r4, #0]
 801a8f0:	f004 f808 	bl	801e904 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 801a8f4:	2000      	movs	r0, #0
 801a8f6:	f7ff fa38 	bl	8019d6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a8fa:	e7ea      	b.n	801a8d2 <HAL_LTDC_LineEventCallback+0x22>
 801a8fc:	40016800 	.word	0x40016800
 801a900:	2000b114 	.word	0x2000b114
 801a904:	2000bb14 	.word	0x2000bb14
 801a908:	2000b112 	.word	0x2000b112

0801a90c <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 801a90c:	6840      	ldr	r0, [r0, #4]
    }
 801a90e:	4770      	bx	lr

0801a910 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 801a910:	6041      	str	r1, [r0, #4]
    }
 801a912:	4770      	bx	lr

0801a914 <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:
}

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 801a914:	1a52      	subs	r2, r2, r1
 801a916:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 801a91a:	fbb2 f0f3 	udiv	r0, r2, r3
 801a91e:	4770      	bx	lr

0801a920 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 801a920:	4b03      	ldr	r3, [pc, #12]	; (801a930 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x10>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a926:	68c0      	ldr	r0, [r0, #12]
}
 801a928:	fb00 f003 	mul.w	r0, r0, r3
 801a92c:	4770      	bx	lr
 801a92e:	bf00      	nop
 801a930:	2000b118 	.word	0x2000b118

0801a934 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 801a934:	b510      	push	{r4, lr}
 801a936:	4604      	mov	r4, r0
    if (active) //idle task sched out
 801a938:	b921      	cbnz	r1, 801a944 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x10>
    {
        cc_consumed += getCPUCycles() - cc_in;
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
 801a93a:	6803      	ldr	r3, [r0, #0]
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	4798      	blx	r3
 801a940:	60a0      	str	r0, [r4, #8]
    }
}
 801a942:	bd10      	pop	{r4, pc}
        cc_consumed += getCPUCycles() - cc_in;
 801a944:	6803      	ldr	r3, [r0, #0]
 801a946:	691b      	ldr	r3, [r3, #16]
 801a948:	4798      	blx	r3
 801a94a:	68a3      	ldr	r3, [r4, #8]
 801a94c:	1ac0      	subs	r0, r0, r3
 801a94e:	6863      	ldr	r3, [r4, #4]
 801a950:	4418      	add	r0, r3
 801a952:	6060      	str	r0, [r4, #4]
 801a954:	e7f5      	b.n	801a942 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0xe>

0801a956 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 801a956:	4770      	bx	lr

0801a958 <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
{
 801a958:	b530      	push	{r4, r5, lr}
 801a95a:	b0a1      	sub	sp, #132	; 0x84
 801a95c:	4605      	mov	r5, r0
    __TIM2_CLK_ENABLE();
 801a95e:	4b4d      	ldr	r3, [pc, #308]	; (801aa94 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>)
 801a960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a962:	f042 0201 	orr.w	r2, r2, #1
 801a966:	641a      	str	r2, [r3, #64]	; 0x40
 801a968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a96a:	f003 0301 	and.w	r3, r3, #1
 801a96e:	9300      	str	r3, [sp, #0]
 801a970:	9b00      	ldr	r3, [sp, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801a972:	2400      	movs	r4, #0
 801a974:	9416      	str	r4, [sp, #88]	; 0x58
 801a976:	9417      	str	r4, [sp, #92]	; 0x5c
 801a978:	9418      	str	r4, [sp, #96]	; 0x60
 801a97a:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801a97c:	9413      	str	r4, [sp, #76]	; 0x4c
 801a97e:	9414      	str	r4, [sp, #80]	; 0x50
 801a980:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 801a982:	940c      	str	r4, [sp, #48]	; 0x30
 801a984:	940d      	str	r4, [sp, #52]	; 0x34
 801a986:	940e      	str	r4, [sp, #56]	; 0x38
 801a988:	940f      	str	r4, [sp, #60]	; 0x3c
 801a98a:	9410      	str	r4, [sp, #64]	; 0x40
 801a98c:	9411      	str	r4, [sp, #68]	; 0x44
 801a98e:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801a990:	222c      	movs	r2, #44	; 0x2c
 801a992:	4621      	mov	r1, r4
 801a994:	a801      	add	r0, sp, #4
 801a996:	f00a fcb4 	bl	8025302 <memset>
  htim1.Instance = TIM1;
 801a99a:	483f      	ldr	r0, [pc, #252]	; (801aa98 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801a99c:	4b3f      	ldr	r3, [pc, #252]	; (801aa9c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x144>)
 801a99e:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 801a9a0:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801a9a2:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 801a9a4:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801a9a6:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 801a9a8:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801a9aa:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801a9ac:	f7ee ff78 	bl	80098a0 <HAL_TIM_Base_Init>
 801a9b0:	2800      	cmp	r0, #0
 801a9b2:	d158      	bne.n	801aa66 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x10e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801a9b4:	a920      	add	r1, sp, #128	; 0x80
 801a9b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a9ba:	f841 3d28 	str.w	r3, [r1, #-40]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 801a9be:	4836      	ldr	r0, [pc, #216]	; (801aa98 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801a9c0:	f7ef fa50 	bl	8009e64 <HAL_TIM_ConfigClockSource>
 801a9c4:	2800      	cmp	r0, #0
 801a9c6:	d151      	bne.n	801aa6c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x114>
  htim1.Instance = TIM1;
 801a9c8:	4833      	ldr	r0, [pc, #204]	; (801aa98 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801a9ca:	4b34      	ldr	r3, [pc, #208]	; (801aa9c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x144>)
 801a9cc:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801a9d2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 801a9d4:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801a9d6:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 801a9d8:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801a9da:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 801a9dc:	f7ee ffe0 	bl	80099a0 <HAL_TIM_PWM_Init>
 801a9e0:	2800      	cmp	r0, #0
 801a9e2:	d146      	bne.n	801aa72 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x11a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801a9e8:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801a9ea:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801a9ec:	a913      	add	r1, sp, #76	; 0x4c
 801a9ee:	482a      	ldr	r0, [pc, #168]	; (801aa98 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801a9f0:	f7ef feb2 	bl	800a758 <HAL_TIMEx_MasterConfigSynchronization>
 801a9f4:	2800      	cmp	r0, #0
 801a9f6:	d13f      	bne.n	801aa78 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x120>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801a9f8:	2360      	movs	r3, #96	; 0x60
 801a9fa:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801aa00:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801aa02:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801aa04:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801aa06:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801aa08:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801aa0a:	a90c      	add	r1, sp, #48	; 0x30
 801aa0c:	4822      	ldr	r0, [pc, #136]	; (801aa98 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801aa0e:	f7ef f911 	bl	8009c34 <HAL_TIM_PWM_ConfigChannel>
 801aa12:	2800      	cmp	r0, #0
 801aa14:	d133      	bne.n	801aa7e <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x126>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801aa16:	2300      	movs	r3, #0
 801aa18:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801aa1a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801aa1c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801aa1e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801aa20:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801aa22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801aa26:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801aa28:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801aa2a:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801aa2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801aa30:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 801aa32:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801aa34:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 801aa36:	a901      	add	r1, sp, #4
 801aa38:	4817      	ldr	r0, [pc, #92]	; (801aa98 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801aa3a:	f7ef fee9 	bl	800a810 <HAL_TIMEx_ConfigBreakDeadTime>
 801aa3e:	bb08      	cbnz	r0, 801aa84 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x12c>
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801aa40:	a91a      	add	r1, sp, #104	; 0x68
 801aa42:	a81b      	add	r0, sp, #108	; 0x6c
 801aa44:	f7ec f822 	bl	8006a8c <HAL_RCC_GetClockConfig>
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 801aa48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801aa4a:	b1f3      	cbz	r3, 801aa8a <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x132>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 801aa4c:	f7eb fff6 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 801aa50:	0044      	lsls	r4, r0, #1
    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 801aa52:	f7eb ffe7 	bl	8006a24 <HAL_RCC_GetHCLKFreq>
 801aa56:	fbb0 f0f4 	udiv	r0, r0, r4
 801aa5a:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Start(&htim1);
 801aa5c:	480e      	ldr	r0, [pc, #56]	; (801aa98 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x140>)
 801aa5e:	f7ee ff4b 	bl	80098f8 <HAL_TIM_Base_Start>
}
 801aa62:	b021      	add	sp, #132	; 0x84
 801aa64:	bd30      	pop	{r4, r5, pc}
    Error_Handler( );
 801aa66:	f000 fed1 	bl	801b80c <Error_Handler>
 801aa6a:	e7a3      	b.n	801a9b4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x5c>
    Error_Handler( );
 801aa6c:	f000 fece 	bl	801b80c <Error_Handler>
 801aa70:	e7aa      	b.n	801a9c8 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x70>
    Error_Handler( );
 801aa72:	f000 fecb 	bl	801b80c <Error_Handler>
 801aa76:	e7b5      	b.n	801a9e4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x8c>
    Error_Handler( );
 801aa78:	f000 fec8 	bl	801b80c <Error_Handler>
 801aa7c:	e7bc      	b.n	801a9f8 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa0>
    Error_Handler( );
 801aa7e:	f000 fec5 	bl	801b80c <Error_Handler>
 801aa82:	e7c8      	b.n	801aa16 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xbe>
    Error_Handler( );
 801aa84:	f000 fec2 	bl	801b80c <Error_Handler>
 801aa88:	e7da      	b.n	801aa40 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xe8>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 801aa8a:	f7eb ffd7 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 801aa8e:	4604      	mov	r4, r0
 801aa90:	e7df      	b.n	801aa52 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xfa>
 801aa92:	bf00      	nop
 801aa94:	40023800 	.word	0x40023800
 801aa98:	2000b118 	.word	0x2000b118
 801aa9c:	40010000 	.word	0x40010000

0801aaa0 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 801aaa0:	b510      	push	{r4, lr}
 801aaa2:	4604      	mov	r4, r0
 801aaa4:	2110      	movs	r1, #16
 801aaa6:	f00a fb95 	bl	80251d4 <_ZdlPvj>
 801aaaa:	4620      	mov	r0, r4
 801aaac:	bd10      	pop	{r4, pc}

0801aaae <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
#include <platform/driver/touch/TouchController.hpp>
#include <main.h>
                 
namespace touchgfx
{
class STM32F7TouchController: public TouchController
 801aaae:	4770      	bx	lr

0801aab0 <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 801aab0:	b510      	push	{r4, lr}
 /* USER CODE BEGIN F4TouchController_init */

  /* Add code for touch controller Initialization */
  BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 801aab2:	f7fe ffe3 	bl	8019a7c <LCD_GetXSize>
 801aab6:	4604      	mov	r4, r0
 801aab8:	f7fe ffe3 	bl	8019a82 <LCD_GetYSize>
 801aabc:	b281      	uxth	r1, r0
 801aabe:	b2a0      	uxth	r0, r4
 801aac0:	f7fe fc94 	bl	80193ec <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 801aac4:	bd10      	pop	{r4, pc}

0801aac6 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801aac6:	b530      	push	{r4, r5, lr}
 801aac8:	b08d      	sub	sp, #52	; 0x34
 801aaca:	460d      	mov	r5, r1
 801aacc:	4614      	mov	r4, r2
/* USER CODE BEGIN  F4TouchController_sampleTouch  */

 TS_StateTypeDef state = { 0 };
 801aace:	222c      	movs	r2, #44	; 0x2c
 801aad0:	2100      	movs	r1, #0
 801aad2:	a801      	add	r0, sp, #4
 801aad4:	f00a fc15 	bl	8025302 <memset>
    BSP_TS_GetState(&state);
 801aad8:	a801      	add	r0, sp, #4
 801aada:	f7fe fcc7 	bl	801946c <BSP_TS_GetState>
    if (state.touchDetected)
 801aade:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801aae2:	b143      	cbz	r3, 801aaf6 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x30>
    {
        x = state.touchX[0];
 801aae4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801aae8:	602b      	str	r3, [r5, #0]
        y = state.touchY[0];
 801aaea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801aaee:	6023      	str	r3, [r4, #0]

        return true;
 801aaf0:	2001      	movs	r0, #1
    }
    return false; 

/* USER CODE END F4TouchController_sampleTouch  */
}
 801aaf2:	b00d      	add	sp, #52	; 0x34
 801aaf4:	bd30      	pop	{r4, r5, pc}
    return false; 
 801aaf6:	2000      	movs	r0, #0
 801aaf8:	e7fb      	b.n	801aaf2 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x2c>

0801aafa <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 801aafa:	b510      	push	{r4, lr}
 801aafc:	4604      	mov	r4, r0
 801aafe:	2104      	movs	r1, #4
 801ab00:	f00a fb68 	bl	80251d4 <_ZdlPvj>
 801ab04:	4620      	mov	r0, r4
 801ab06:	bd10      	pop	{r4, pc}

0801ab08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b082      	sub	sp, #8
 801ab0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801ab0e:	2300      	movs	r3, #0
 801ab10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801ab12:	f000 f896 	bl	801ac42 <BSP_SD_IsDetected>
 801ab16:	4603      	mov	r3, r0
 801ab18:	2b01      	cmp	r3, #1
 801ab1a:	d001      	beq.n	801ab20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801ab1c:	2302      	movs	r3, #2
 801ab1e:	e012      	b.n	801ab46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801ab20:	480b      	ldr	r0, [pc, #44]	; (801ab50 <BSP_SD_Init+0x48>)
 801ab22:	f7ed fa71 	bl	8008008 <HAL_SD_Init>
 801ab26:	4603      	mov	r3, r0
 801ab28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801ab2a:	79fb      	ldrb	r3, [r7, #7]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d109      	bne.n	801ab44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801ab30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801ab34:	4806      	ldr	r0, [pc, #24]	; (801ab50 <BSP_SD_Init+0x48>)
 801ab36:	f7ee f845 	bl	8008bc4 <HAL_SD_ConfigWideBusOperation>
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d001      	beq.n	801ab44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801ab40:	2301      	movs	r3, #1
 801ab42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801ab44:	79fb      	ldrb	r3, [r7, #7]
}
 801ab46:	4618      	mov	r0, r3
 801ab48:	3708      	adds	r7, #8
 801ab4a:	46bd      	mov	sp, r7
 801ab4c:	bd80      	pop	{r7, pc}
 801ab4e:	bf00      	nop
 801ab50:	2000b530 	.word	0x2000b530

0801ab54 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b086      	sub	sp, #24
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	60f8      	str	r0, [r7, #12]
 801ab5c:	60b9      	str	r1, [r7, #8]
 801ab5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801ab60:	2300      	movs	r3, #0
 801ab62:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	68ba      	ldr	r2, [r7, #8]
 801ab68:	68f9      	ldr	r1, [r7, #12]
 801ab6a:	4806      	ldr	r0, [pc, #24]	; (801ab84 <BSP_SD_ReadBlocks_DMA+0x30>)
 801ab6c:	f7ed fadc 	bl	8008128 <HAL_SD_ReadBlocks_DMA>
 801ab70:	4603      	mov	r3, r0
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d001      	beq.n	801ab7a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801ab76:	2301      	movs	r3, #1
 801ab78:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801ab7a:	7dfb      	ldrb	r3, [r7, #23]
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	3718      	adds	r7, #24
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd80      	pop	{r7, pc}
 801ab84:	2000b530 	.word	0x2000b530

0801ab88 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b086      	sub	sp, #24
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	60f8      	str	r0, [r7, #12]
 801ab90:	60b9      	str	r1, [r7, #8]
 801ab92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801ab94:	2300      	movs	r3, #0
 801ab96:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	68ba      	ldr	r2, [r7, #8]
 801ab9c:	68f9      	ldr	r1, [r7, #12]
 801ab9e:	4806      	ldr	r0, [pc, #24]	; (801abb8 <BSP_SD_WriteBlocks_DMA+0x30>)
 801aba0:	f7ed fb90 	bl	80082c4 <HAL_SD_WriteBlocks_DMA>
 801aba4:	4603      	mov	r3, r0
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d001      	beq.n	801abae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801abaa:	2301      	movs	r3, #1
 801abac:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801abae:	7dfb      	ldrb	r3, [r7, #23]
}
 801abb0:	4618      	mov	r0, r3
 801abb2:	3718      	adds	r7, #24
 801abb4:	46bd      	mov	sp, r7
 801abb6:	bd80      	pop	{r7, pc}
 801abb8:	2000b530 	.word	0x2000b530

0801abbc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801abc0:	4805      	ldr	r0, [pc, #20]	; (801abd8 <BSP_SD_GetCardState+0x1c>)
 801abc2:	f7ee f87b 	bl	8008cbc <HAL_SD_GetCardState>
 801abc6:	4603      	mov	r3, r0
 801abc8:	2b04      	cmp	r3, #4
 801abca:	bf14      	ite	ne
 801abcc:	2301      	movne	r3, #1
 801abce:	2300      	moveq	r3, #0
 801abd0:	b2db      	uxtb	r3, r3
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	bd80      	pop	{r7, pc}
 801abd6:	bf00      	nop
 801abd8:	2000b530 	.word	0x2000b530

0801abdc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b082      	sub	sp, #8
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801abe4:	6879      	ldr	r1, [r7, #4]
 801abe6:	4803      	ldr	r0, [pc, #12]	; (801abf4 <BSP_SD_GetCardInfo+0x18>)
 801abe8:	f7ed ffc0 	bl	8008b6c <HAL_SD_GetCardInfo>
}
 801abec:	bf00      	nop
 801abee:	3708      	adds	r7, #8
 801abf0:	46bd      	mov	sp, r7
 801abf2:	bd80      	pop	{r7, pc}
 801abf4:	2000b530 	.word	0x2000b530

0801abf8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801abf8:	b580      	push	{r7, lr}
 801abfa:	b082      	sub	sp, #8
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801ac00:	f000 f818 	bl	801ac34 <BSP_SD_AbortCallback>
}
 801ac04:	bf00      	nop
 801ac06:	3708      	adds	r7, #8
 801ac08:	46bd      	mov	sp, r7
 801ac0a:	bd80      	pop	{r7, pc}

0801ac0c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b082      	sub	sp, #8
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801ac14:	f001 f800 	bl	801bc18 <BSP_SD_WriteCpltCallback>
}
 801ac18:	bf00      	nop
 801ac1a:	3708      	adds	r7, #8
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}

0801ac20 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b082      	sub	sp, #8
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801ac28:	f001 f804 	bl	801bc34 <BSP_SD_ReadCpltCallback>
}
 801ac2c:	bf00      	nop
 801ac2e:	3708      	adds	r7, #8
 801ac30:	46bd      	mov	sp, r7
 801ac32:	bd80      	pop	{r7, pc}

0801ac34 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 801ac34:	b480      	push	{r7}
 801ac36:	af00      	add	r7, sp, #0

}
 801ac38:	bf00      	nop
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac40:	4770      	bx	lr

0801ac42 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 801ac42:	b580      	push	{r7, lr}
 801ac44:	b082      	sub	sp, #8
 801ac46:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801ac48:	2301      	movs	r3, #1
 801ac4a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 801ac4c:	f000 f86e 	bl	801ad2c <BSP_PlatformIsDetected>
 801ac50:	4603      	mov	r3, r0
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d101      	bne.n	801ac5a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801ac56:	2300      	movs	r3, #0
 801ac58:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801ac5a:	79fb      	ldrb	r3, [r7, #7]
 801ac5c:	b2db      	uxtb	r3, r3
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3708      	adds	r7, #8
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}
	...

0801ac68 <MX_FATFS_Init>:
DIR dj;
FILINFO fno;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801ac6c:	4909      	ldr	r1, [pc, #36]	; (801ac94 <MX_FATFS_Init+0x2c>)
 801ac6e:	480a      	ldr	r0, [pc, #40]	; (801ac98 <MX_FATFS_Init+0x30>)
 801ac70:	f7fb fbbc 	bl	80163ec <FATFS_LinkDriver>
 801ac74:	4603      	mov	r3, r0
 801ac76:	461a      	mov	r2, r3
 801ac78:	4b08      	ldr	r3, [pc, #32]	; (801ac9c <MX_FATFS_Init+0x34>)
 801ac7a:	701a      	strb	r2, [r3, #0]
  fr = f_mount(&SDFatFS, "\0", 1); //mounting file system
 801ac7c:	2201      	movs	r2, #1
 801ac7e:	4908      	ldr	r1, [pc, #32]	; (801aca0 <MX_FATFS_Init+0x38>)
 801ac80:	4808      	ldr	r0, [pc, #32]	; (801aca4 <MX_FATFS_Init+0x3c>)
 801ac82:	f7fb f9b7 	bl	8015ff4 <f_mount>
 801ac86:	4603      	mov	r3, r0
 801ac88:	461a      	mov	r2, r3
 801ac8a:	4b07      	ldr	r3, [pc, #28]	; (801aca8 <MX_FATFS_Init+0x40>)
 801ac8c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN Init */
  /* additional user code for init */

  /* USER CODE END Init */
}
 801ac8e:	bf00      	nop
 801ac90:	bd80      	pop	{r7, pc}
 801ac92:	bf00      	nop
 801ac94:	2000c114 	.word	0x2000c114
 801ac98:	08027ab4 	.word	0x08027ab4
 801ac9c:	2000c268 	.word	0x2000c268
 801aca0:	080262a0 	.word	0x080262a0
 801aca4:	2000bcac 	.word	0x2000bcac
 801aca8:	2000bb04 	.word	0x2000bb04

0801acac <getFileName>:
	return &SDFatFS;
}

int i = 0;

FRESULT getFileName(TCHAR* fileNameBuffer){
 801acac:	b580      	push	{r7, lr}
 801acae:	b082      	sub	sp, #8
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	6078      	str	r0, [r7, #4]
	if(i==0)
 801acb4:	4b16      	ldr	r3, [pc, #88]	; (801ad10 <getFileName+0x64>)
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d10f      	bne.n	801acdc <getFileName+0x30>
    {
		fr = f_findfirst(&dj, &fno, "", "*.mp3");
 801acbc:	4b15      	ldr	r3, [pc, #84]	; (801ad14 <getFileName+0x68>)
 801acbe:	4a16      	ldr	r2, [pc, #88]	; (801ad18 <getFileName+0x6c>)
 801acc0:	4916      	ldr	r1, [pc, #88]	; (801ad1c <getFileName+0x70>)
 801acc2:	4817      	ldr	r0, [pc, #92]	; (801ad20 <getFileName+0x74>)
 801acc4:	f7fb fb28 	bl	8016318 <f_findfirst>
 801acc8:	4603      	mov	r3, r0
 801acca:	461a      	mov	r2, r3
 801accc:	4b15      	ldr	r3, [pc, #84]	; (801ad24 <getFileName+0x78>)
 801acce:	701a      	strb	r2, [r3, #0]
		i++;
 801acd0:	4b0f      	ldr	r3, [pc, #60]	; (801ad10 <getFileName+0x64>)
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	3301      	adds	r3, #1
 801acd6:	4a0e      	ldr	r2, [pc, #56]	; (801ad10 <getFileName+0x64>)
 801acd8:	6013      	str	r3, [r2, #0]
 801acda:	e007      	b.n	801acec <getFileName+0x40>
    }
	else
	{
		fr = f_findnext(&dj, &fno);
 801acdc:	490f      	ldr	r1, [pc, #60]	; (801ad1c <getFileName+0x70>)
 801acde:	4810      	ldr	r0, [pc, #64]	; (801ad20 <getFileName+0x74>)
 801ace0:	f7fb faf2 	bl	80162c8 <f_findnext>
 801ace4:	4603      	mov	r3, r0
 801ace6:	461a      	mov	r2, r3
 801ace8:	4b0e      	ldr	r3, [pc, #56]	; (801ad24 <getFileName+0x78>)
 801acea:	701a      	strb	r2, [r3, #0]
	}
	if(strcmp(fno.fname, "")==0)
 801acec:	4b0b      	ldr	r3, [pc, #44]	; (801ad1c <getFileName+0x70>)
 801acee:	7d9b      	ldrb	r3, [r3, #22]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d102      	bne.n	801acfa <getFileName+0x4e>
	{
		i=0;
 801acf4:	4b06      	ldr	r3, [pc, #24]	; (801ad10 <getFileName+0x64>)
 801acf6:	2200      	movs	r2, #0
 801acf8:	601a      	str	r2, [r3, #0]
	}
	strcpy(fileNameBuffer, fno.fname);
 801acfa:	490b      	ldr	r1, [pc, #44]	; (801ad28 <getFileName+0x7c>)
 801acfc:	6878      	ldr	r0, [r7, #4]
 801acfe:	f00a fecd 	bl	8025a9c <strcpy>
	return fr;
 801ad02:	4b08      	ldr	r3, [pc, #32]	; (801ad24 <getFileName+0x78>)
 801ad04:	781b      	ldrb	r3, [r3, #0]
}
 801ad06:	4618      	mov	r0, r3
 801ad08:	3708      	adds	r7, #8
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	bd80      	pop	{r7, pc}
 801ad0e:	bf00      	nop
 801ad10:	2000b158 	.word	0x2000b158
 801ad14:	080262a4 	.word	0x080262a4
 801ad18:	080262ac 	.word	0x080262ac
 801ad1c:	2000c150 	.word	0x2000c150
 801ad20:	2000c118 	.word	0x2000c118
 801ad24:	2000bb04 	.word	0x2000bb04
 801ad28:	2000c166 	.word	0x2000c166

0801ad2c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b082      	sub	sp, #8
 801ad30:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801ad32:	2301      	movs	r3, #1
 801ad34:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801ad36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801ad3a:	4806      	ldr	r0, [pc, #24]	; (801ad54 <BSP_PlatformIsDetected+0x28>)
 801ad3c:	f7e8 fac6 	bl	80032cc <HAL_GPIO_ReadPin>
 801ad40:	4603      	mov	r3, r0
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d001      	beq.n	801ad4a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801ad46:	2300      	movs	r3, #0
 801ad48:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 801ad4a:	79fb      	ldrb	r3, [r7, #7]
}  
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	3708      	adds	r7, #8
 801ad50:	46bd      	mov	sp, r7
 801ad52:	bd80      	pop	{r7, pc}
 801ad54:	40020800 	.word	0x40020800

0801ad58 <ff_convert>:
/*------------------------------------------------------------------------*/
/* Unicode up-case conversion                                             */
/*------------------------------------------------------------------------*/

	WCHAR ff_convert(WCHAR wch, UINT dir)
	{
 801ad58:	b480      	push	{r7}
 801ad5a:	b083      	sub	sp, #12
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	4603      	mov	r3, r0
 801ad60:	6039      	str	r1, [r7, #0]
 801ad62:	80fb      	strh	r3, [r7, #6]
	          if (wch < 0x80) {
 801ad64:	88fb      	ldrh	r3, [r7, #6]
 801ad66:	2b7f      	cmp	r3, #127	; 0x7f
 801ad68:	d801      	bhi.n	801ad6e <ff_convert+0x16>
	                    /* ASCII Char */
	                    return wch;
 801ad6a:	88fb      	ldrh	r3, [r7, #6]
 801ad6c:	e000      	b.n	801ad70 <ff_convert+0x18>
	          }

	          /* I don't support unicode it is too big! */
	          return 0;
 801ad6e:	2300      	movs	r3, #0
	}
 801ad70:	4618      	mov	r0, r3
 801ad72:	370c      	adds	r7, #12
 801ad74:	46bd      	mov	sp, r7
 801ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7a:	4770      	bx	lr

0801ad7c <ff_wtoupper>:

	WCHAR ff_wtoupper (WCHAR wch)
	{
 801ad7c:	b480      	push	{r7}
 801ad7e:	b083      	sub	sp, #12
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	4603      	mov	r3, r0
 801ad84:	80fb      	strh	r3, [r7, #6]
	          if (wch < 0x80) {
 801ad86:	88fb      	ldrh	r3, [r7, #6]
 801ad88:	2b7f      	cmp	r3, #127	; 0x7f
 801ad8a:	d80b      	bhi.n	801ada4 <ff_wtoupper+0x28>
	                   //  ASCII Char
	                    if (wch >= 'a' && wch <= 'z') {
 801ad8c:	88fb      	ldrh	r3, [r7, #6]
 801ad8e:	2b60      	cmp	r3, #96	; 0x60
 801ad90:	d906      	bls.n	801ada0 <ff_wtoupper+0x24>
 801ad92:	88fb      	ldrh	r3, [r7, #6]
 801ad94:	2b7a      	cmp	r3, #122	; 0x7a
 801ad96:	d803      	bhi.n	801ada0 <ff_wtoupper+0x24>
	                              wch &= ~0x20;
 801ad98:	88fb      	ldrh	r3, [r7, #6]
 801ad9a:	f023 0320 	bic.w	r3, r3, #32
 801ad9e:	80fb      	strh	r3, [r7, #6]
	                     }
	                      return wch;
 801ada0:	88fb      	ldrh	r3, [r7, #6]
 801ada2:	e000      	b.n	801ada6 <ff_wtoupper+0x2a>
	          }

	          //I don't support unicode it is too big!
	          return 0;
 801ada4:	2300      	movs	r3, #0
	}
 801ada6:	4618      	mov	r0, r3
 801ada8:	370c      	adds	r7, #12
 801adaa:	46bd      	mov	sp, r7
 801adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb0:	4770      	bx	lr
	...

0801adb4 <_ZL17MX_SDMMC1_SD_Initv>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 801adb4:	4b05      	ldr	r3, [pc, #20]	; (801adcc <_ZL17MX_SDMMC1_SD_Initv+0x18>)
 801adb6:	4a06      	ldr	r2, [pc, #24]	; (801add0 <_ZL17MX_SDMMC1_SD_Initv+0x1c>)
 801adb8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801adba:	2200      	movs	r2, #0
 801adbc:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 801adbe:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801adc0:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 801adc2:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801adc4:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 801adc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 801adc8:	4770      	bx	lr
 801adca:	bf00      	nop
 801adcc:	2000b530 	.word	0x2000b530
 801add0:	40012c00 	.word	0x40012c00

0801add4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801add4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801add8:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801adda:	2400      	movs	r4, #0
 801addc:	940b      	str	r4, [sp, #44]	; 0x2c
 801adde:	940c      	str	r4, [sp, #48]	; 0x30
 801ade0:	940d      	str	r4, [sp, #52]	; 0x34
 801ade2:	940e      	str	r4, [sp, #56]	; 0x38
 801ade4:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801ade6:	4b9f      	ldr	r3, [pc, #636]	; (801b064 <_ZL12MX_GPIO_Initv+0x290>)
 801ade8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801adea:	f042 0210 	orr.w	r2, r2, #16
 801adee:	631a      	str	r2, [r3, #48]	; 0x30
 801adf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801adf2:	f002 0210 	and.w	r2, r2, #16
 801adf6:	9200      	str	r2, [sp, #0]
 801adf8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801adfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801adfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ae00:	631a      	str	r2, [r3, #48]	; 0x30
 801ae02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae04:	f002 0240 	and.w	r2, r2, #64	; 0x40
 801ae08:	9201      	str	r2, [sp, #4]
 801ae0a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801ae0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae0e:	f042 0202 	orr.w	r2, r2, #2
 801ae12:	631a      	str	r2, [r3, #48]	; 0x30
 801ae14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae16:	f002 0202 	and.w	r2, r2, #2
 801ae1a:	9202      	str	r2, [sp, #8]
 801ae1c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801ae1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae20:	f042 0208 	orr.w	r2, r2, #8
 801ae24:	631a      	str	r2, [r3, #48]	; 0x30
 801ae26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae28:	f002 0208 	and.w	r2, r2, #8
 801ae2c:	9203      	str	r2, [sp, #12]
 801ae2e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801ae30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae32:	f042 0204 	orr.w	r2, r2, #4
 801ae36:	631a      	str	r2, [r3, #48]	; 0x30
 801ae38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae3a:	f002 0204 	and.w	r2, r2, #4
 801ae3e:	9204      	str	r2, [sp, #16]
 801ae40:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801ae42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae44:	f042 0201 	orr.w	r2, r2, #1
 801ae48:	631a      	str	r2, [r3, #48]	; 0x30
 801ae4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae4c:	f002 0201 	and.w	r2, r2, #1
 801ae50:	9205      	str	r2, [sp, #20]
 801ae52:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801ae54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ae5a:	631a      	str	r2, [r3, #48]	; 0x30
 801ae5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae5e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 801ae62:	9206      	str	r2, [sp, #24]
 801ae64:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801ae66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ae6c:	631a      	str	r2, [r3, #48]	; 0x30
 801ae6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae70:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ae74:	9207      	str	r2, [sp, #28]
 801ae76:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801ae78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ae7e:	631a      	str	r2, [r3, #48]	; 0x30
 801ae80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae82:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 801ae86:	9208      	str	r2, [sp, #32]
 801ae88:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801ae8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae8c:	f042 0220 	orr.w	r2, r2, #32
 801ae90:	631a      	str	r2, [r3, #48]	; 0x30
 801ae92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae94:	f002 0220 	and.w	r2, r2, #32
 801ae98:	9209      	str	r2, [sp, #36]	; 0x24
 801ae9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801ae9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ae9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801aea2:	631a      	str	r2, [r3, #48]	; 0x30
 801aea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aeaa:	930a      	str	r3, [sp, #40]	; 0x28
 801aeac:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 801aeae:	2201      	movs	r2, #1
 801aeb0:	2120      	movs	r1, #32
 801aeb2:	486d      	ldr	r0, [pc, #436]	; (801b068 <_ZL12MX_GPIO_Initv+0x294>)
 801aeb4:	f7e8 fa22 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 801aeb8:	4622      	mov	r2, r4
 801aeba:	210c      	movs	r1, #12
 801aebc:	486b      	ldr	r0, [pc, #428]	; (801b06c <_ZL12MX_GPIO_Initv+0x298>)
 801aebe:	f7e8 fa1d 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 801aec2:	2201      	movs	r2, #1
 801aec4:	2108      	movs	r1, #8
 801aec6:	486a      	ldr	r0, [pc, #424]	; (801b070 <_ZL12MX_GPIO_Initv+0x29c>)
 801aec8:	f7e8 fa18 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 801aecc:	2201      	movs	r2, #1
 801aece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801aed2:	4866      	ldr	r0, [pc, #408]	; (801b06c <_ZL12MX_GPIO_Initv+0x298>)
 801aed4:	f7e8 fa12 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 801aed8:	4622      	mov	r2, r4
 801aeda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801aede:	4865      	ldr	r0, [pc, #404]	; (801b074 <_ZL12MX_GPIO_Initv+0x2a0>)
 801aee0:	f7e8 fa0c 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 801aee4:	4622      	mov	r2, r4
 801aee6:	21c8      	movs	r1, #200	; 0xc8
 801aee8:	4863      	ldr	r0, [pc, #396]	; (801b078 <_ZL12MX_GPIO_Initv+0x2a4>)
 801aeea:	f7e8 fa07 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 801aeee:	f04f 0a08 	mov.w	sl, #8
 801aef2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801aef6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aef8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 801aefa:	a90b      	add	r1, sp, #44	; 0x2c
 801aefc:	485f      	ldr	r0, [pc, #380]	; (801b07c <_ZL12MX_GPIO_Initv+0x2a8>)
 801aefe:	f7e7 ff31 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 801af02:	f643 4323 	movw	r3, #15395	; 0x3c23
 801af06:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801af08:	2602      	movs	r6, #2
 801af0a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af0c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801af0e:	f04f 0803 	mov.w	r8, #3
 801af12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801af16:	270a      	movs	r7, #10
 801af18:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801af1a:	a90b      	add	r1, sp, #44	; 0x2c
 801af1c:	4858      	ldr	r0, [pc, #352]	; (801b080 <_ZL12MX_GPIO_Initv+0x2ac>)
 801af1e:	f7e7 ff21 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 801af22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801af26:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801af28:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af2a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801af2c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801af2e:	2501      	movs	r5, #1
 801af30:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 801af32:	a90b      	add	r1, sp, #44	; 0x2c
 801af34:	4853      	ldr	r0, [pc, #332]	; (801b084 <_ZL12MX_GPIO_Initv+0x2b0>)
 801af36:	f7e7 ff15 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 801af3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801af3e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801af40:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af42:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 801af44:	a90b      	add	r1, sp, #44	; 0x2c
 801af46:	4850      	ldr	r0, [pc, #320]	; (801b088 <_ZL12MX_GPIO_Initv+0x2b4>)
 801af48:	f7e7 ff0c 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 801af4c:	2340      	movs	r3, #64	; 0x40
 801af4e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 801af50:	f8df b13c 	ldr.w	fp, [pc, #316]	; 801b090 <_ZL12MX_GPIO_Initv+0x2bc>
 801af54:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af58:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 801af5a:	a90b      	add	r1, sp, #44	; 0x2c
 801af5c:	4842      	ldr	r0, [pc, #264]	; (801b068 <_ZL12MX_GPIO_Initv+0x294>)
 801af5e:	f7e7 ff01 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 801af62:	2320      	movs	r3, #32
 801af64:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801af66:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af68:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801af6a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 801af6c:	a90b      	add	r1, sp, #44	; 0x2c
 801af6e:	483e      	ldr	r0, [pc, #248]	; (801b068 <_ZL12MX_GPIO_Initv+0x294>)
 801af70:	f7e7 fef8 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 801af74:	f241 030c 	movw	r3, #4108	; 0x100c
 801af78:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801af7a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af7c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801af7e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801af80:	a90b      	add	r1, sp, #44	; 0x2c
 801af82:	483a      	ldr	r0, [pc, #232]	; (801b06c <_ZL12MX_GPIO_Initv+0x298>)
 801af84:	f7e7 feee 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 801af88:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 801af8c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801af90:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801af92:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 801af94:	a90b      	add	r1, sp, #44	; 0x2c
 801af96:	483d      	ldr	r0, [pc, #244]	; (801b08c <_ZL12MX_GPIO_Initv+0x2b8>)
 801af98:	f7e7 fee4 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 801af9c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801afa0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801afa2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801afa4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 801afa6:	a90b      	add	r1, sp, #44	; 0x2c
 801afa8:	4831      	ldr	r0, [pc, #196]	; (801b070 <_ZL12MX_GPIO_Initv+0x29c>)
 801afaa:	f7e7 fedb 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 801afae:	f04f 0a10 	mov.w	sl, #16
 801afb2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801afb6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801afb8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 801afba:	a90b      	add	r1, sp, #44	; 0x2c
 801afbc:	482a      	ldr	r0, [pc, #168]	; (801b068 <_ZL12MX_GPIO_Initv+0x294>)
 801afbe:	f7e7 fed1 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 801afc2:	f248 0304 	movw	r3, #32772	; 0x8004
 801afc6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801afc8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801afca:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801afcc:	a90b      	add	r1, sp, #44	; 0x2c
 801afce:	4829      	ldr	r0, [pc, #164]	; (801b074 <_ZL12MX_GPIO_Initv+0x2a0>)
 801afd0:	f7e7 fec8 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 801afd4:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801afd8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801afda:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801afdc:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 801afde:	a90b      	add	r1, sp, #44	; 0x2c
 801afe0:	4824      	ldr	r0, [pc, #144]	; (801b074 <_ZL12MX_GPIO_Initv+0x2a0>)
 801afe2:	f7e7 febf 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 801afe6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 801afea:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801afee:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 801aff0:	a90b      	add	r1, sp, #44	; 0x2c
 801aff2:	481e      	ldr	r0, [pc, #120]	; (801b06c <_ZL12MX_GPIO_Initv+0x298>)
 801aff4:	f7e7 feb6 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 801aff8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801affc:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801affe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b000:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801b004:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 801b006:	a90b      	add	r1, sp, #44	; 0x2c
 801b008:	481a      	ldr	r0, [pc, #104]	; (801b074 <_ZL12MX_GPIO_Initv+0x2a0>)
 801b00a:	f7e7 feab 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 801b00e:	23c8      	movs	r3, #200	; 0xc8
 801b010:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b012:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b014:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801b016:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801b018:	a90b      	add	r1, sp, #44	; 0x2c
 801b01a:	4817      	ldr	r0, [pc, #92]	; (801b078 <_ZL12MX_GPIO_Initv+0x2a4>)
 801b01c:	f7e7 fea2 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 801b020:	2305      	movs	r3, #5
 801b022:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b024:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b026:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b028:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801b02c:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801b02e:	a90b      	add	r1, sp, #44	; 0x2c
 801b030:	4816      	ldr	r0, [pc, #88]	; (801b08c <_ZL12MX_GPIO_Initv+0x2b8>)
 801b032:	f7e7 fe97 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 801b036:	2304      	movs	r3, #4
 801b038:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801b03a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b03c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 801b03e:	a90b      	add	r1, sp, #44	; 0x2c
 801b040:	480d      	ldr	r0, [pc, #52]	; (801b078 <_ZL12MX_GPIO_Initv+0x2a4>)
 801b042:	f7e7 fe8f 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 801b046:	2328      	movs	r3, #40	; 0x28
 801b048:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b04a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b04c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b04e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801b052:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b054:	a90b      	add	r1, sp, #44	; 0x2c
 801b056:	480b      	ldr	r0, [pc, #44]	; (801b084 <_ZL12MX_GPIO_Initv+0x2b0>)
 801b058:	f7e7 fe84 	bl	8002d64 <HAL_GPIO_Init>

}
 801b05c:	b011      	add	sp, #68	; 0x44
 801b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b062:	bf00      	nop
 801b064:	40023800 	.word	0x40023800
 801b068:	40020c00 	.word	0x40020c00
 801b06c:	40022000 	.word	0x40022000
 801b070:	40022800 	.word	0x40022800
 801b074:	40021c00 	.word	0x40021c00
 801b078:	40021800 	.word	0x40021800
 801b07c:	40021000 	.word	0x40021000
 801b080:	40020400 	.word	0x40020400
 801b084:	40020000 	.word	0x40020000
 801b088:	40022400 	.word	0x40022400
 801b08c:	40020800 	.word	0x40020800
 801b090:	10120000 	.word	0x10120000

0801b094 <_ZL12MX_ADC3_Initv>:
{
 801b094:	b570      	push	{r4, r5, r6, lr}
 801b096:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 801b098:	2500      	movs	r5, #0
 801b09a:	9500      	str	r5, [sp, #0]
 801b09c:	9501      	str	r5, [sp, #4]
 801b09e:	9502      	str	r5, [sp, #8]
 801b0a0:	9503      	str	r5, [sp, #12]
  hadc3.Instance = ADC3;
 801b0a2:	4c10      	ldr	r4, [pc, #64]	; (801b0e4 <_ZL12MX_ADC3_Initv+0x50>)
 801b0a4:	4b10      	ldr	r3, [pc, #64]	; (801b0e8 <_ZL12MX_ADC3_Initv+0x54>)
 801b0a6:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801b0a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801b0ac:	6063      	str	r3, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 801b0ae:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 801b0b0:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 801b0b2:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 801b0b4:	f884 5020 	strb.w	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801b0b8:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801b0ba:	4b0c      	ldr	r3, [pc, #48]	; (801b0ec <_ZL12MX_ADC3_Initv+0x58>)
 801b0bc:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801b0be:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 801b0c0:	2601      	movs	r6, #1
 801b0c2:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 801b0c4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801b0c8:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 801b0ca:	4620      	mov	r0, r4
 801b0cc:	f7e5 fd62 	bl	8000b94 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_4;
 801b0d0:	2304      	movs	r3, #4
 801b0d2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801b0d4:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801b0d6:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 801b0d8:	4669      	mov	r1, sp
 801b0da:	4620      	mov	r0, r4
 801b0dc:	f7e5 fd9e 	bl	8000c1c <HAL_ADC_ConfigChannel>
}
 801b0e0:	b004      	add	sp, #16
 801b0e2:	bd70      	pop	{r4, r5, r6, pc}
 801b0e4:	2000b160 	.word	0x2000b160
 801b0e8:	40012200 	.word	0x40012200
 801b0ec:	0f000001 	.word	0x0f000001

0801b0f0 <_ZL11MX_CRC_Initv>:
{
 801b0f0:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 801b0f2:	4806      	ldr	r0, [pc, #24]	; (801b10c <_ZL11MX_CRC_Initv+0x1c>)
 801b0f4:	4b06      	ldr	r3, [pc, #24]	; (801b110 <_ZL11MX_CRC_Initv+0x20>)
 801b0f6:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 801b0fc:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 801b0fe:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 801b100:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 801b102:	2301      	movs	r3, #1
 801b104:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801b106:	f7e6 f8c9 	bl	800129c <HAL_CRC_Init>
}
 801b10a:	bd08      	pop	{r3, pc}
 801b10c:	2000b1a8 	.word	0x2000b1a8
 801b110:	40023000 	.word	0x40023000

0801b114 <_ZL12MX_DCMI_Initv>:
{
 801b114:	b508      	push	{r3, lr}
  hdcmi.Instance = DCMI;
 801b116:	4809      	ldr	r0, [pc, #36]	; (801b13c <_ZL12MX_DCMI_Initv+0x28>)
 801b118:	4b09      	ldr	r3, [pc, #36]	; (801b140 <_ZL12MX_DCMI_Initv+0x2c>)
 801b11a:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 801b11c:	2300      	movs	r3, #0
 801b11e:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 801b120:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 801b122:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 801b124:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 801b126:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 801b128:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 801b12a:	6203      	str	r3, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 801b12c:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 801b12e:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 801b130:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 801b132:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 801b134:	f7e6 f99c 	bl	8001470 <HAL_DCMI_Init>
}
 801b138:	bd08      	pop	{r3, pc}
 801b13a:	bf00      	nop
 801b13c:	2000b1cc 	.word	0x2000b1cc
 801b140:	50050000 	.word	0x50050000

0801b144 <_ZL11MX_ETH_Initv>:
{
 801b144:	b500      	push	{lr}
 801b146:	b083      	sub	sp, #12
  heth.Instance = ETH;
 801b148:	4810      	ldr	r0, [pc, #64]	; (801b18c <_ZL11MX_ETH_Initv+0x48>)
 801b14a:	4b11      	ldr	r3, [pc, #68]	; (801b190 <_ZL11MX_ETH_Initv+0x4c>)
 801b14c:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801b14e:	2301      	movs	r3, #1
 801b150:	6043      	str	r3, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801b152:	2300      	movs	r3, #0
 801b154:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 801b156:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 801b15a:	2280      	movs	r2, #128	; 0x80
 801b15c:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 801b160:	22e1      	movs	r2, #225	; 0xe1
 801b162:	f88d 2002 	strb.w	r2, [sp, #2]
  MACAddr[3] = 0x00;
 801b166:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 801b16a:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 801b16e:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 801b172:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 801b176:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 801b178:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801b17a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801b17e:	6203      	str	r3, [r0, #32]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 801b180:	f7e7 f984 	bl	800248c <HAL_ETH_Init>
}
 801b184:	b003      	add	sp, #12
 801b186:	f85d fb04 	ldr.w	pc, [sp], #4
 801b18a:	bf00      	nop
 801b18c:	2000b2dc 	.word	0x2000b2dc
 801b190:	40028000 	.word	0x40028000

0801b194 <_ZL12MX_I2C1_Initv>:
{
 801b194:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 801b196:	4c0d      	ldr	r4, [pc, #52]	; (801b1cc <_ZL12MX_I2C1_Initv+0x38>)
 801b198:	4b0d      	ldr	r3, [pc, #52]	; (801b1d0 <_ZL12MX_I2C1_Initv+0x3c>)
 801b19a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 801b19c:	4b0d      	ldr	r3, [pc, #52]	; (801b1d4 <_ZL12MX_I2C1_Initv+0x40>)
 801b19e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 801b1a0:	2500      	movs	r5, #0
 801b1a2:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801b1a4:	2301      	movs	r3, #1
 801b1a6:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801b1a8:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801b1aa:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801b1ac:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801b1ae:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801b1b0:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801b1b2:	4620      	mov	r0, r4
 801b1b4:	f7e9 fd16 	bl	8004be4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	f7ea fa2a 	bl	8005614 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801b1c0:	4629      	mov	r1, r5
 801b1c2:	4620      	mov	r0, r4
 801b1c4:	f7ea fa71 	bl	80056aa <HAL_I2CEx_ConfigDigitalFilter>
}
 801b1c8:	bd38      	pop	{r3, r4, r5, pc}
 801b1ca:	bf00      	nop
 801b1cc:	2000b324 	.word	0x2000b324
 801b1d0:	40005400 	.word	0x40005400
 801b1d4:	00c0eaff 	.word	0x00c0eaff

0801b1d8 <_ZL12MX_I2C3_Initv>:
{
 801b1d8:	b538      	push	{r3, r4, r5, lr}
  hi2c3.Instance = I2C3;
 801b1da:	4c0d      	ldr	r4, [pc, #52]	; (801b210 <_ZL12MX_I2C3_Initv+0x38>)
 801b1dc:	4b0d      	ldr	r3, [pc, #52]	; (801b214 <_ZL12MX_I2C3_Initv+0x3c>)
 801b1de:	6023      	str	r3, [r4, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 801b1e0:	4b0d      	ldr	r3, [pc, #52]	; (801b218 <_ZL12MX_I2C3_Initv+0x40>)
 801b1e2:	6063      	str	r3, [r4, #4]
  hi2c3.Init.OwnAddress1 = 0;
 801b1e4:	2500      	movs	r5, #0
 801b1e6:	60a5      	str	r5, [r4, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801b1e8:	2301      	movs	r3, #1
 801b1ea:	60e3      	str	r3, [r4, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801b1ec:	6125      	str	r5, [r4, #16]
  hi2c3.Init.OwnAddress2 = 0;
 801b1ee:	6165      	str	r5, [r4, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801b1f0:	61a5      	str	r5, [r4, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801b1f2:	61e5      	str	r5, [r4, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801b1f4:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	f7e9 fcf4 	bl	8004be4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801b1fc:	4629      	mov	r1, r5
 801b1fe:	4620      	mov	r0, r4
 801b200:	f7ea fa08 	bl	8005614 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 801b204:	4629      	mov	r1, r5
 801b206:	4620      	mov	r0, r4
 801b208:	f7ea fa4f 	bl	80056aa <HAL_I2CEx_ConfigDigitalFilter>
}
 801b20c:	bd38      	pop	{r3, r4, r5, pc}
 801b20e:	bf00      	nop
 801b210:	2000b370 	.word	0x2000b370
 801b214:	40005c00 	.word	0x40005c00
 801b218:	00c0eaff 	.word	0x00c0eaff

0801b21c <_ZL15MX_QUADSPI_Initv>:
{
 801b21c:	b508      	push	{r3, lr}
  hqspi.Instance = QUADSPI;
 801b21e:	4808      	ldr	r0, [pc, #32]	; (801b240 <_ZL15MX_QUADSPI_Initv+0x24>)
 801b220:	4b08      	ldr	r3, [pc, #32]	; (801b244 <_ZL15MX_QUADSPI_Initv+0x28>)
 801b222:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 255;
 801b224:	23ff      	movs	r3, #255	; 0xff
 801b226:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 801b228:	2201      	movs	r2, #1
 801b22a:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 801b22c:	2300      	movs	r3, #0
 801b22e:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 801b230:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 801b232:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 801b234:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 801b236:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 801b238:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 801b23a:	f7ea ff19 	bl	8006070 <HAL_QSPI_Init>
}
 801b23e:	bd08      	pop	{r3, pc}
 801b240:	2000b3bc 	.word	0x2000b3bc
 801b244:	a0001000 	.word	0xa0001000

0801b248 <_ZL11MX_RTC_Initv>:
{
 801b248:	b570      	push	{r4, r5, r6, lr}
 801b24a:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
 801b24c:	2400      	movs	r4, #0
 801b24e:	940c      	str	r4, [sp, #48]	; 0x30
 801b250:	940d      	str	r4, [sp, #52]	; 0x34
 801b252:	940e      	str	r4, [sp, #56]	; 0x38
 801b254:	940f      	str	r4, [sp, #60]	; 0x3c
 801b256:	9410      	str	r4, [sp, #64]	; 0x40
 801b258:	9411      	str	r4, [sp, #68]	; 0x44
  RTC_DateTypeDef sDate = {0};
 801b25a:	940b      	str	r4, [sp, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 801b25c:	222c      	movs	r2, #44	; 0x2c
 801b25e:	4621      	mov	r1, r4
 801b260:	4668      	mov	r0, sp
 801b262:	f00a f84e 	bl	8025302 <memset>
  hrtc.Instance = RTC;
 801b266:	4d28      	ldr	r5, [pc, #160]	; (801b308 <_ZL11MX_RTC_Initv+0xc0>)
 801b268:	4b28      	ldr	r3, [pc, #160]	; (801b30c <_ZL11MX_RTC_Initv+0xc4>)
 801b26a:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801b26c:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 801b26e:	237f      	movs	r3, #127	; 0x7f
 801b270:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 801b272:	23ff      	movs	r3, #255	; 0xff
 801b274:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801b276:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801b278:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801b27a:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801b27c:	4628      	mov	r0, r5
 801b27e:	f7ec f959 	bl	8007534 <HAL_RTC_Init>
  sTime.Hours = 0x0;
 801b282:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  sTime.Minutes = 0x0;
 801b286:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  sTime.Seconds = 0x0;
 801b28a:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801b28e:	9410      	str	r4, [sp, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801b290:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 801b292:	2201      	movs	r2, #1
 801b294:	a90c      	add	r1, sp, #48	; 0x30
 801b296:	4628      	mov	r0, r5
 801b298:	f7ec f9c8 	bl	800762c <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801b29c:	2601      	movs	r6, #1
 801b29e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 801b2a2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
  sDate.Date = 0x1;
 801b2a6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
  sDate.Year = 0x0;
 801b2aa:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 801b2ae:	4632      	mov	r2, r6
 801b2b0:	a90b      	add	r1, sp, #44	; 0x2c
 801b2b2:	4628      	mov	r0, r5
 801b2b4:	f7ec fa78 	bl	80077a8 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Hours = 0x0;
 801b2b8:	f88d 4000 	strb.w	r4, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 801b2bc:	f88d 4001 	strb.w	r4, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 801b2c0:	f88d 4002 	strb.w	r4, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 801b2c4:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801b2c6:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801b2c8:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801b2ca:	9406      	str	r4, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801b2cc:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801b2ce:	9408      	str	r4, [sp, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 801b2d0:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 801b2d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b2d8:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 801b2da:	4632      	mov	r2, r6
 801b2dc:	4669      	mov	r1, sp
 801b2de:	4628      	mov	r0, r5
 801b2e0:	f7ec fb0a 	bl	80078f8 <HAL_RTC_SetAlarm>
  sAlarm.AlarmDateWeekDay = 0x1;
 801b2e4:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 801b2e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b2ec:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 801b2ee:	4632      	mov	r2, r6
 801b2f0:	4669      	mov	r1, sp
 801b2f2:	4628      	mov	r0, r5
 801b2f4:	f7ec fb00 	bl	80078f8 <HAL_RTC_SetAlarm>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 801b2f8:	2202      	movs	r2, #2
 801b2fa:	4621      	mov	r1, r4
 801b2fc:	4628      	mov	r0, r5
 801b2fe:	f7ec fc85 	bl	8007c0c <HAL_RTCEx_SetTimeStamp>
}
 801b302:	b012      	add	sp, #72	; 0x48
 801b304:	bd70      	pop	{r4, r5, r6, pc}
 801b306:	bf00      	nop
 801b308:	2000b408 	.word	0x2000b408
 801b30c:	40002800 	.word	0x40002800

0801b310 <_ZL12MX_SAI2_Initv>:
{
 801b310:	b570      	push	{r4, r5, r6, lr}
  hsai_BlockA2.Instance = SAI2_Block_A;
 801b312:	481f      	ldr	r0, [pc, #124]	; (801b390 <_ZL12MX_SAI2_Initv+0x80>)
 801b314:	4b1f      	ldr	r3, [pc, #124]	; (801b394 <_ZL12MX_SAI2_Initv+0x84>)
 801b316:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 801b318:	2400      	movs	r4, #0
 801b31a:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 801b31c:	6044      	str	r4, [r0, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 801b31e:	2640      	movs	r6, #64	; 0x40
 801b320:	6346      	str	r6, [r0, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 801b322:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 801b324:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 801b326:	6084      	str	r4, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 801b328:	6104      	str	r4, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 801b32a:	6144      	str	r4, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 801b32c:	6184      	str	r4, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 801b32e:	4b1a      	ldr	r3, [pc, #104]	; (801b398 <_ZL12MX_SAI2_Initv+0x88>)
 801b330:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801b332:	60c4      	str	r4, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 801b334:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 801b336:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 801b338:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 801b33a:	2308      	movs	r3, #8
 801b33c:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 801b33e:	2501      	movs	r5, #1
 801b340:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 801b342:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801b344:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 801b346:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 801b348:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801b34a:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 801b34c:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 801b34e:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 801b350:	f7ec fcb2 	bl	8007cb8 <HAL_SAI_Init>
  hsai_BlockB2.Instance = SAI2_Block_B;
 801b354:	4811      	ldr	r0, [pc, #68]	; (801b39c <_ZL12MX_SAI2_Initv+0x8c>)
 801b356:	4b12      	ldr	r3, [pc, #72]	; (801b3a0 <_ZL12MX_SAI2_Initv+0x90>)
 801b358:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 801b35a:	6304      	str	r4, [r0, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 801b35c:	2303      	movs	r3, #3
 801b35e:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 801b360:	6346      	str	r6, [r0, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 801b362:	6384      	str	r4, [r0, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 801b364:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 801b366:	6085      	str	r5, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 801b368:	6104      	str	r4, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 801b36a:	6184      	str	r4, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801b36c:	60c4      	str	r4, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 801b36e:	6244      	str	r4, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 801b370:	6284      	str	r4, [r0, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 801b372:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 801b374:	2318      	movs	r3, #24
 801b376:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 801b378:	6445      	str	r5, [r0, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 801b37a:	6484      	str	r4, [r0, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801b37c:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 801b37e:	6504      	str	r4, [r0, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 801b380:	6544      	str	r4, [r0, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801b382:	6584      	str	r4, [r0, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 801b384:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 801b386:	6604      	str	r4, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 801b388:	f7ec fc96 	bl	8007cb8 <HAL_SAI_Init>
}
 801b38c:	bd70      	pop	{r4, r5, r6, pc}
 801b38e:	bf00      	nop
 801b390:	2000b428 	.word	0x2000b428
 801b394:	40015c04 	.word	0x40015c04
 801b398:	0002ee00 	.word	0x0002ee00
 801b39c:	2000b4ac 	.word	0x2000b4ac
 801b3a0:	40015c24 	.word	0x40015c24

0801b3a4 <_ZL15MX_SPDIFRX_Initv>:
{
 801b3a4:	b508      	push	{r3, lr}
  hspdif.Instance = SPDIFRX;
 801b3a6:	4809      	ldr	r0, [pc, #36]	; (801b3cc <_ZL15MX_SPDIFRX_Initv+0x28>)
 801b3a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801b3ac:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 801b3b2:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 801b3b4:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 801b3b6:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 801b3b8:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 801b3ba:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 801b3bc:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 801b3be:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 801b3c0:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 801b3c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 801b3c4:	f7ee f97e 	bl	80096c4 <HAL_SPDIFRX_Init>
}
 801b3c8:	bd08      	pop	{r3, pc}
 801b3ca:	bf00      	nop
 801b3cc:	2000b5b4 	.word	0x2000b5b4

0801b3d0 <_ZL12MX_SPI2_Initv>:
{
 801b3d0:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 801b3d2:	480e      	ldr	r0, [pc, #56]	; (801b40c <_ZL12MX_SPI2_Initv+0x3c>)
 801b3d4:	4b0e      	ldr	r3, [pc, #56]	; (801b410 <_ZL12MX_SPI2_Initv+0x40>)
 801b3d6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801b3d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 801b3dc:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801b3de:	2300      	movs	r3, #0
 801b3e0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 801b3e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 801b3e6:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801b3e8:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801b3ea:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801b3ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b3f0:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801b3f2:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801b3f4:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801b3f6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801b3f8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 801b3fa:	2207      	movs	r2, #7
 801b3fc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801b3fe:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 801b400:	2308      	movs	r3, #8
 801b402:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801b404:	f7ee f9ba 	bl	800977c <HAL_SPI_Init>
}
 801b408:	bd08      	pop	{r3, pc}
 801b40a:	bf00      	nop
 801b40c:	2000b600 	.word	0x2000b600
 801b410:	40003800 	.word	0x40003800

0801b414 <_ZL12MX_TIM8_Initv>:
{
 801b414:	b530      	push	{r4, r5, lr}
 801b416:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801b418:	2400      	movs	r4, #0
 801b41a:	9404      	str	r4, [sp, #16]
 801b41c:	9405      	str	r4, [sp, #20]
 801b41e:	9406      	str	r4, [sp, #24]
 801b420:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801b422:	9401      	str	r4, [sp, #4]
 801b424:	9402      	str	r4, [sp, #8]
 801b426:	9403      	str	r4, [sp, #12]
  htim8.Instance = TIM8;
 801b428:	4d0d      	ldr	r5, [pc, #52]	; (801b460 <_ZL12MX_TIM8_Initv+0x4c>)
 801b42a:	4b0e      	ldr	r3, [pc, #56]	; (801b464 <_ZL12MX_TIM8_Initv+0x50>)
 801b42c:	602b      	str	r3, [r5, #0]
  htim8.Init.Prescaler = 0;
 801b42e:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b430:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 0;
 801b432:	60ec      	str	r4, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b434:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 801b436:	616c      	str	r4, [r5, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b438:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801b43a:	4628      	mov	r0, r5
 801b43c:	f7ee fa30 	bl	80098a0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b444:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801b446:	a904      	add	r1, sp, #16
 801b448:	4628      	mov	r0, r5
 801b44a:	f7ee fd0b 	bl	8009e64 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b44e:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801b450:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801b452:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801b454:	a901      	add	r1, sp, #4
 801b456:	4628      	mov	r0, r5
 801b458:	f7ef f97e 	bl	800a758 <HAL_TIMEx_MasterConfigSynchronization>
}
 801b45c:	b009      	add	sp, #36	; 0x24
 801b45e:	bd30      	pop	{r4, r5, pc}
 801b460:	2000b724 	.word	0x2000b724
 801b464:	40010400 	.word	0x40010400

0801b468 <_ZL12MX_TIM3_Initv>:
{
 801b468:	b530      	push	{r4, r5, lr}
 801b46a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801b46c:	2400      	movs	r4, #0
 801b46e:	940a      	str	r4, [sp, #40]	; 0x28
 801b470:	940b      	str	r4, [sp, #44]	; 0x2c
 801b472:	940c      	str	r4, [sp, #48]	; 0x30
 801b474:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801b476:	9407      	str	r4, [sp, #28]
 801b478:	9408      	str	r4, [sp, #32]
 801b47a:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 801b47c:	9400      	str	r4, [sp, #0]
 801b47e:	9401      	str	r4, [sp, #4]
 801b480:	9402      	str	r4, [sp, #8]
 801b482:	9403      	str	r4, [sp, #12]
 801b484:	9404      	str	r4, [sp, #16]
 801b486:	9405      	str	r4, [sp, #20]
 801b488:	9406      	str	r4, [sp, #24]
  htim3.Instance = TIM3;
 801b48a:	4d15      	ldr	r5, [pc, #84]	; (801b4e0 <_ZL12MX_TIM3_Initv+0x78>)
 801b48c:	4b15      	ldr	r3, [pc, #84]	; (801b4e4 <_ZL12MX_TIM3_Initv+0x7c>)
 801b48e:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 801b490:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b492:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
 801b494:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b496:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b498:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801b49a:	4628      	mov	r0, r5
 801b49c:	f7ee fa00 	bl	80098a0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b4a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b4a4:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801b4a6:	a90a      	add	r1, sp, #40	; 0x28
 801b4a8:	4628      	mov	r0, r5
 801b4aa:	f7ee fcdb 	bl	8009e64 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801b4ae:	4628      	mov	r0, r5
 801b4b0:	f7ee fa76 	bl	80099a0 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b4b4:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801b4b6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801b4b8:	a907      	add	r1, sp, #28
 801b4ba:	4628      	mov	r0, r5
 801b4bc:	f7ef f94c 	bl	800a758 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801b4c0:	2360      	movs	r3, #96	; 0x60
 801b4c2:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 801b4c4:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801b4c6:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801b4c8:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801b4ca:	4622      	mov	r2, r4
 801b4cc:	4669      	mov	r1, sp
 801b4ce:	4628      	mov	r0, r5
 801b4d0:	f7ee fbb0 	bl	8009c34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 801b4d4:	4628      	mov	r0, r5
 801b4d6:	f001 f913 	bl	801c700 <HAL_TIM_MspPostInit>
}
 801b4da:	b00f      	add	sp, #60	; 0x3c
 801b4dc:	bd30      	pop	{r4, r5, pc}
 801b4de:	bf00      	nop
 801b4e0:	2000b6a4 	.word	0x2000b6a4
 801b4e4:	40000400 	.word	0x40000400

0801b4e8 <_ZL12MX_TIM5_Initv>:
{
 801b4e8:	b530      	push	{r4, r5, lr}
 801b4ea:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801b4ec:	2400      	movs	r4, #0
 801b4ee:	940a      	str	r4, [sp, #40]	; 0x28
 801b4f0:	940b      	str	r4, [sp, #44]	; 0x2c
 801b4f2:	940c      	str	r4, [sp, #48]	; 0x30
 801b4f4:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801b4f6:	9407      	str	r4, [sp, #28]
 801b4f8:	9408      	str	r4, [sp, #32]
 801b4fa:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 801b4fc:	9400      	str	r4, [sp, #0]
 801b4fe:	9401      	str	r4, [sp, #4]
 801b500:	9402      	str	r4, [sp, #8]
 801b502:	9403      	str	r4, [sp, #12]
 801b504:	9404      	str	r4, [sp, #16]
 801b506:	9405      	str	r4, [sp, #20]
 801b508:	9406      	str	r4, [sp, #24]
  htim5.Instance = TIM5;
 801b50a:	4d15      	ldr	r5, [pc, #84]	; (801b560 <_ZL12MX_TIM5_Initv+0x78>)
 801b50c:	4b15      	ldr	r3, [pc, #84]	; (801b564 <_ZL12MX_TIM5_Initv+0x7c>)
 801b50e:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 801b510:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b512:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 801b514:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b516:	612c      	str	r4, [r5, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b518:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801b51a:	4628      	mov	r0, r5
 801b51c:	f7ee f9c0 	bl	80098a0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801b520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b524:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 801b526:	a90a      	add	r1, sp, #40	; 0x28
 801b528:	4628      	mov	r0, r5
 801b52a:	f7ee fc9b 	bl	8009e64 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801b52e:	4628      	mov	r0, r5
 801b530:	f7ee fa36 	bl	80099a0 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801b534:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801b536:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801b538:	a907      	add	r1, sp, #28
 801b53a:	4628      	mov	r0, r5
 801b53c:	f7ef f90c 	bl	800a758 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801b540:	2360      	movs	r3, #96	; 0x60
 801b542:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 801b544:	9401      	str	r4, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801b546:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801b548:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801b54a:	220c      	movs	r2, #12
 801b54c:	4669      	mov	r1, sp
 801b54e:	4628      	mov	r0, r5
 801b550:	f7ee fb70 	bl	8009c34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim5);
 801b554:	4628      	mov	r0, r5
 801b556:	f001 f8d3 	bl	801c700 <HAL_TIM_MspPostInit>
}
 801b55a:	b00f      	add	sp, #60	; 0x3c
 801b55c:	bd30      	pop	{r4, r5, pc}
 801b55e:	bf00      	nop
 801b560:	2000b6e4 	.word	0x2000b6e4
 801b564:	40000c00 	.word	0x40000c00

0801b568 <_ZL13MX_TIM12_Initv>:
{
 801b568:	b530      	push	{r4, r5, lr}
 801b56a:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 801b56c:	2400      	movs	r4, #0
 801b56e:	9401      	str	r4, [sp, #4]
 801b570:	9402      	str	r4, [sp, #8]
 801b572:	9403      	str	r4, [sp, #12]
 801b574:	9404      	str	r4, [sp, #16]
 801b576:	9405      	str	r4, [sp, #20]
 801b578:	9406      	str	r4, [sp, #24]
 801b57a:	9407      	str	r4, [sp, #28]
  htim12.Instance = TIM12;
 801b57c:	4d0c      	ldr	r5, [pc, #48]	; (801b5b0 <_ZL13MX_TIM12_Initv+0x48>)
 801b57e:	4b0d      	ldr	r3, [pc, #52]	; (801b5b4 <_ZL13MX_TIM12_Initv+0x4c>)
 801b580:	602b      	str	r3, [r5, #0]
  htim12.Init.Prescaler = 0;
 801b582:	606c      	str	r4, [r5, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b584:	60ac      	str	r4, [r5, #8]
  htim12.Init.Period = 0;
 801b586:	60ec      	str	r4, [r5, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801b588:	612c      	str	r4, [r5, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801b58a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 801b58c:	4628      	mov	r0, r5
 801b58e:	f7ee fa07 	bl	80099a0 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801b592:	2360      	movs	r3, #96	; 0x60
 801b594:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 801b596:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801b598:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801b59a:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801b59c:	4622      	mov	r2, r4
 801b59e:	a901      	add	r1, sp, #4
 801b5a0:	4628      	mov	r0, r5
 801b5a2:	f7ee fb47 	bl	8009c34 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim12);
 801b5a6:	4628      	mov	r0, r5
 801b5a8:	f001 f8aa 	bl	801c700 <HAL_TIM_MspPostInit>
}
 801b5ac:	b009      	add	sp, #36	; 0x24
 801b5ae:	bd30      	pop	{r4, r5, pc}
 801b5b0:	2000b664 	.word	0x2000b664
 801b5b4:	40001800 	.word	0x40001800

0801b5b8 <_ZL19MX_USART1_UART_Initv>:
{
 801b5b8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 801b5ba:	4809      	ldr	r0, [pc, #36]	; (801b5e0 <_ZL19MX_USART1_UART_Initv+0x28>)
 801b5bc:	4b09      	ldr	r3, [pc, #36]	; (801b5e4 <_ZL19MX_USART1_UART_Initv+0x2c>)
 801b5be:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 801b5c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801b5c4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801b5ca:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801b5cc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801b5ce:	220c      	movs	r2, #12
 801b5d0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801b5d2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801b5d4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801b5d6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801b5d8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801b5da:	f7ef f9b5 	bl	800a948 <HAL_UART_Init>
}
 801b5de:	bd08      	pop	{r3, pc}
 801b5e0:	2000b764 	.word	0x2000b764
 801b5e4:	40011000 	.word	0x40011000

0801b5e8 <_ZL19MX_USART6_UART_Initv>:
{
 801b5e8:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 801b5ea:	4809      	ldr	r0, [pc, #36]	; (801b610 <_ZL19MX_USART6_UART_Initv+0x28>)
 801b5ec:	4b09      	ldr	r3, [pc, #36]	; (801b614 <_ZL19MX_USART6_UART_Initv+0x2c>)
 801b5ee:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 801b5f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801b5f4:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 801b5fa:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 801b5fc:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801b5fe:	220c      	movs	r2, #12
 801b600:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801b602:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801b604:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801b606:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801b608:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801b60a:	f7ef f99d 	bl	800a948 <HAL_UART_Init>
}
 801b60e:	bd08      	pop	{r3, pc}
 801b610:	2000b7e4 	.word	0x2000b7e4
 801b614:	40011400 	.word	0x40011400

0801b618 <_ZL11MX_DMA_Initv>:
{
 801b618:	b500      	push	{lr}
 801b61a:	b083      	sub	sp, #12
  __HAL_RCC_DMA2_CLK_ENABLE();
 801b61c:	4b0e      	ldr	r3, [pc, #56]	; (801b658 <_ZL11MX_DMA_Initv+0x40>)
 801b61e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b620:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801b624:	631a      	str	r2, [r3, #48]	; 0x30
 801b626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b62c:	9301      	str	r3, [sp, #4]
 801b62e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 801b630:	2200      	movs	r2, #0
 801b632:	2105      	movs	r1, #5
 801b634:	203b      	movs	r0, #59	; 0x3b
 801b636:	f7e5 fdf9 	bl	800122c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801b63a:	203b      	movs	r0, #59	; 0x3b
 801b63c:	f7e5 fe12 	bl	8001264 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 801b640:	2200      	movs	r2, #0
 801b642:	2105      	movs	r1, #5
 801b644:	2045      	movs	r0, #69	; 0x45
 801b646:	f7e5 fdf1 	bl	800122c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 801b64a:	2045      	movs	r0, #69	; 0x45
 801b64c:	f7e5 fe0a 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 801b650:	b003      	add	sp, #12
 801b652:	f85d fb04 	ldr.w	pc, [sp], #4
 801b656:	bf00      	nop
 801b658:	40023800 	.word	0x40023800

0801b65c <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 801b65c:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 801b65e:	f7ff fb03 	bl	801ac68 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 801b662:	f001 fb9f 	bl	801cda4 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 801b666:	f7fe fa1f 	bl	8019aa8 <_Z17GRAPHICS_MainTaskv>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801b66a:	2001      	movs	r0, #1
 801b66c:	f7fa ff8b 	bl	8016586 <osDelay>
 801b670:	e7fb      	b.n	801b66a <_Z16StartDefaultTaskPKv+0xe>
	...

0801b674 <SystemClock_Config>:
{
 801b674:	b570      	push	{r4, r5, r6, lr}
 801b676:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801b678:	2230      	movs	r2, #48	; 0x30
 801b67a:	2100      	movs	r1, #0
 801b67c:	a828      	add	r0, sp, #160	; 0xa0
 801b67e:	f009 fe40 	bl	8025302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801b682:	2400      	movs	r4, #0
 801b684:	9423      	str	r4, [sp, #140]	; 0x8c
 801b686:	9424      	str	r4, [sp, #144]	; 0x90
 801b688:	9425      	str	r4, [sp, #148]	; 0x94
 801b68a:	9426      	str	r4, [sp, #152]	; 0x98
 801b68c:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801b68e:	2284      	movs	r2, #132	; 0x84
 801b690:	4621      	mov	r1, r4
 801b692:	a802      	add	r0, sp, #8
 801b694:	f009 fe35 	bl	8025302 <memset>
  HAL_PWR_EnableBkUpAccess();
 801b698:	f7ea fc8a 	bl	8005fb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 801b69c:	4b2f      	ldr	r3, [pc, #188]	; (801b75c <SystemClock_Config+0xe8>)
 801b69e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b6a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801b6a4:	641a      	str	r2, [r3, #64]	; 0x40
 801b6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b6ac:	9300      	str	r3, [sp, #0]
 801b6ae:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801b6b0:	4b2b      	ldr	r3, [pc, #172]	; (801b760 <SystemClock_Config+0xec>)
 801b6b2:	681a      	ldr	r2, [r3, #0]
 801b6b4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 801b6b8:	601a      	str	r2, [r3, #0]
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801b6c0:	9301      	str	r3, [sp, #4]
 801b6c2:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801b6c4:	2309      	movs	r3, #9
 801b6c6:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801b6c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801b6cc:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801b6ce:	2601      	movs	r6, #1
 801b6d0:	962d      	str	r6, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801b6d2:	2502      	movs	r5, #2
 801b6d4:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801b6d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801b6da:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 801b6dc:	2219      	movs	r2, #25
 801b6de:	9230      	str	r2, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 801b6e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b6e4:	9231      	str	r2, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801b6e6:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 801b6e8:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801b6ea:	a828      	add	r0, sp, #160	; 0xa0
 801b6ec:	f7ea fd90 	bl	8006210 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801b6f0:	f7ea fc6e 	bl	8005fd0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801b6f4:	230f      	movs	r3, #15
 801b6f6:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801b6f8:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801b6fa:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801b6fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801b700:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801b702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801b706:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 801b708:	2106      	movs	r1, #6
 801b70a:	a823      	add	r0, sp, #140	; 0x8c
 801b70c:	f7ea fff0 	bl	80066f0 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 801b710:	4b14      	ldr	r3, [pc, #80]	; (801b764 <SystemClock_Config+0xf0>)
 801b712:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 801b714:	2364      	movs	r3, #100	; 0x64
 801b716:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 801b718:	9506      	str	r5, [sp, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 801b71a:	9504      	str	r5, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 801b71c:	9505      	str	r5, [sp, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 801b71e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801b722:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 801b724:	2305      	movs	r3, #5
 801b726:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 801b728:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 801b72a:	2303      	movs	r3, #3
 801b72c:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 801b72e:	960b      	str	r6, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 801b730:	960c      	str	r6, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 801b732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801b736:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 801b738:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b73c:	930e      	str	r3, [sp, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 801b73e:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801b740:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 801b742:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801b744:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 801b746:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 801b748:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b74c:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 801b74e:	9422      	str	r4, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b750:	a802      	add	r0, sp, #8
 801b752:	f7eb f9cd 	bl	8006af0 <HAL_RCCEx_PeriphCLKConfig>
}
 801b756:	b034      	add	sp, #208	; 0xd0
 801b758:	bd70      	pop	{r4, r5, r6, pc}
 801b75a:	bf00      	nop
 801b75c:	40023800 	.word	0x40023800
 801b760:	40007000 	.word	0x40007000
 801b764:	01b14868 	.word	0x01b14868

0801b768 <main>:
{
 801b768:	b500      	push	{lr}
 801b76a:	b087      	sub	sp, #28
  HAL_Init();
 801b76c:	f7e5 f9c2 	bl	8000af4 <HAL_Init>
  SystemClock_Config();
 801b770:	f7ff ff80 	bl	801b674 <SystemClock_Config>
  MX_GPIO_Init();
 801b774:	f7ff fb2e 	bl	801add4 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 801b778:	f7ff fc8c 	bl	801b094 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 801b77c:	f7ff fcb8 	bl	801b0f0 <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 801b780:	f7ff fcc8 	bl	801b114 <_ZL12MX_DCMI_Initv>
  MX_ETH_Init();
 801b784:	f7ff fcde 	bl	801b144 <_ZL11MX_ETH_Initv>
  MX_I2C1_Init();
 801b788:	f7ff fd04 	bl	801b194 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 801b78c:	f7ff fd24 	bl	801b1d8 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 801b790:	f7ff fd44 	bl	801b21c <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 801b794:	f7ff fd58 	bl	801b248 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 801b798:	f7ff fdba 	bl	801b310 <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 801b79c:	f7ff fb0a 	bl	801adb4 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 801b7a0:	f7ff fe00 	bl	801b3a4 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 801b7a4:	f7ff fe14 	bl	801b3d0 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 801b7a8:	f7ff fe5e 	bl	801b468 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 801b7ac:	f7ff fe9c 	bl	801b4e8 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 801b7b0:	f7ff fe30 	bl	801b414 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 801b7b4:	f7ff fed8 	bl	801b568 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 801b7b8:	f7ff fefe 	bl	801b5b8 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 801b7bc:	f7ff ff14 	bl	801b5e8 <_ZL19MX_USART6_UART_Initv>
  MX_DMA_Init();
 801b7c0:	f7ff ff2a 	bl	801b618 <_ZL11MX_DMA_Initv>
  GRAPHICS_HW_Init();
 801b7c4:	f7fe f960 	bl	8019a88 <_Z16GRAPHICS_HW_Initv>
  GRAPHICS_Init();
 801b7c8:	f7fe fa92 	bl	8019cf0 <_Z13GRAPHICS_Initv>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 801b7cc:	ac01      	add	r4, sp, #4
 801b7ce:	4d07      	ldr	r5, [pc, #28]	; (801b7ec <main+0x84>)
 801b7d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b7d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b7d4:	682b      	ldr	r3, [r5, #0]
 801b7d6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801b7d8:	2100      	movs	r1, #0
 801b7da:	a801      	add	r0, sp, #4
 801b7dc:	f7fa feac 	bl	8016538 <osThreadCreate>
 801b7e0:	4b03      	ldr	r3, [pc, #12]	; (801b7f0 <main+0x88>)
 801b7e2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 801b7e4:	f7fa fe85 	bl	80164f2 <osKernelStart>
 801b7e8:	e7fe      	b.n	801b7e8 <main+0x80>
 801b7ea:	bf00      	nop
 801b7ec:	080262b0 	.word	0x080262b0
 801b7f0:	2000b15c 	.word	0x2000b15c

0801b7f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b7f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 801b7f6:	6802      	ldr	r2, [r0, #0]
 801b7f8:	4b03      	ldr	r3, [pc, #12]	; (801b808 <HAL_TIM_PeriodElapsedCallback+0x14>)
 801b7fa:	429a      	cmp	r2, r3
 801b7fc:	d000      	beq.n	801b800 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801b7fe:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 801b800:	f7e5 f986 	bl	8000b10 <HAL_IncTick>
}
 801b804:	e7fb      	b.n	801b7fe <HAL_TIM_PeriodElapsedCallback+0xa>
 801b806:	bf00      	nop
 801b808:	40001000 	.word	0x40001000

0801b80c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801b80c:	4770      	bx	lr

0801b80e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801b80e:	b580      	push	{r7, lr}
 801b810:	b084      	sub	sp, #16
 801b812:	af00      	add	r7, sp, #0
 801b814:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 801b816:	f7fa fe7f 	bl	8016518 <osKernelSysTick>
 801b81a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 801b81c:	e006      	b.n	801b82c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801b81e:	f7ff f9cd 	bl	801abbc <BSP_SD_GetCardState>
 801b822:	4603      	mov	r3, r0
 801b824:	2b00      	cmp	r3, #0
 801b826:	d101      	bne.n	801b82c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801b828:	2300      	movs	r3, #0
 801b82a:	e009      	b.n	801b840 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801b82c:	f7fa fe74 	bl	8016518 <osKernelSysTick>
 801b830:	4602      	mov	r2, r0
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	1ad3      	subs	r3, r2, r3
 801b836:	687a      	ldr	r2, [r7, #4]
 801b838:	429a      	cmp	r2, r3
 801b83a:	d8f0      	bhi.n	801b81e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801b83c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b840:	4618      	mov	r0, r3
 801b842:	3710      	adds	r7, #16
 801b844:	46bd      	mov	sp, r7
 801b846:	bd80      	pop	{r7, pc}

0801b848 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801b848:	b580      	push	{r7, lr}
 801b84a:	b082      	sub	sp, #8
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	4603      	mov	r3, r0
 801b850:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801b852:	4b0b      	ldr	r3, [pc, #44]	; (801b880 <SD_CheckStatus+0x38>)
 801b854:	2201      	movs	r2, #1
 801b856:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801b858:	f7ff f9b0 	bl	801abbc <BSP_SD_GetCardState>
 801b85c:	4603      	mov	r3, r0
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d107      	bne.n	801b872 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801b862:	4b07      	ldr	r3, [pc, #28]	; (801b880 <SD_CheckStatus+0x38>)
 801b864:	781b      	ldrb	r3, [r3, #0]
 801b866:	b2db      	uxtb	r3, r3
 801b868:	f023 0301 	bic.w	r3, r3, #1
 801b86c:	b2da      	uxtb	r2, r3
 801b86e:	4b04      	ldr	r3, [pc, #16]	; (801b880 <SD_CheckStatus+0x38>)
 801b870:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801b872:	4b03      	ldr	r3, [pc, #12]	; (801b880 <SD_CheckStatus+0x38>)
 801b874:	781b      	ldrb	r3, [r3, #0]
 801b876:	b2db      	uxtb	r3, r3
}
 801b878:	4618      	mov	r0, r3
 801b87a:	3708      	adds	r7, #8
 801b87c:	46bd      	mov	sp, r7
 801b87e:	bd80      	pop	{r7, pc}
 801b880:	2000005c 	.word	0x2000005c

0801b884 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801b884:	b580      	push	{r7, lr}
 801b886:	b084      	sub	sp, #16
 801b888:	af00      	add	r7, sp, #0
 801b88a:	4603      	mov	r3, r0
 801b88c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 801b88e:	4b1a      	ldr	r3, [pc, #104]	; (801b8f8 <SD_initialize+0x74>)
 801b890:	2201      	movs	r2, #1
 801b892:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 801b894:	f7fa fe34 	bl	8016500 <osKernelRunning>
 801b898:	4603      	mov	r3, r0
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d025      	beq.n	801b8ea <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801b89e:	f7ff f933 	bl	801ab08 <BSP_SD_Init>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d107      	bne.n	801b8b8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801b8a8:	79fb      	ldrb	r3, [r7, #7]
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	f7ff ffcc 	bl	801b848 <SD_CheckStatus>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	461a      	mov	r2, r3
 801b8b4:	4b10      	ldr	r3, [pc, #64]	; (801b8f8 <SD_initialize+0x74>)
 801b8b6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 801b8b8:	4b0f      	ldr	r3, [pc, #60]	; (801b8f8 <SD_initialize+0x74>)
 801b8ba:	781b      	ldrb	r3, [r3, #0]
 801b8bc:	b2db      	uxtb	r3, r3
 801b8be:	2b01      	cmp	r3, #1
 801b8c0:	d013      	beq.n	801b8ea <SD_initialize+0x66>
 801b8c2:	4b0e      	ldr	r3, [pc, #56]	; (801b8fc <SD_initialize+0x78>)
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d10f      	bne.n	801b8ea <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 801b8ca:	4a0d      	ldr	r2, [pc, #52]	; (801b900 <SD_initialize+0x7c>)
 801b8cc:	f107 0308 	add.w	r3, r7, #8
 801b8d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b8d4:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 801b8d8:	f107 0308 	add.w	r3, r7, #8
 801b8dc:	2100      	movs	r1, #0
 801b8de:	4618      	mov	r0, r3
 801b8e0:	f7fa ff21 	bl	8016726 <osMessageCreate>
 801b8e4:	4602      	mov	r2, r0
 801b8e6:	4b05      	ldr	r3, [pc, #20]	; (801b8fc <SD_initialize+0x78>)
 801b8e8:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 801b8ea:	4b03      	ldr	r3, [pc, #12]	; (801b8f8 <SD_initialize+0x74>)
 801b8ec:	781b      	ldrb	r3, [r3, #0]
 801b8ee:	b2db      	uxtb	r3, r3
}
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	3710      	adds	r7, #16
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	bd80      	pop	{r7, pc}
 801b8f8:	2000005c 	.word	0x2000005c
 801b8fc:	2000ba64 	.word	0x2000ba64
 801b900:	080262c4 	.word	0x080262c4

0801b904 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b082      	sub	sp, #8
 801b908:	af00      	add	r7, sp, #0
 801b90a:	4603      	mov	r3, r0
 801b90c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801b90e:	79fb      	ldrb	r3, [r7, #7]
 801b910:	4618      	mov	r0, r3
 801b912:	f7ff ff99 	bl	801b848 <SD_CheckStatus>
 801b916:	4603      	mov	r3, r0
}
 801b918:	4618      	mov	r0, r3
 801b91a:	3708      	adds	r7, #8
 801b91c:	46bd      	mov	sp, r7
 801b91e:	bd80      	pop	{r7, pc}

0801b920 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b08e      	sub	sp, #56	; 0x38
 801b924:	af00      	add	r7, sp, #0
 801b926:	61b9      	str	r1, [r7, #24]
 801b928:	617a      	str	r2, [r7, #20]
 801b92a:	613b      	str	r3, [r7, #16]
 801b92c:	4603      	mov	r3, r0
 801b92e:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 801b930:	2301      	movs	r3, #1
 801b932:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801b936:	f247 5030 	movw	r0, #30000	; 0x7530
 801b93a:	f7ff ff68 	bl	801b80e <SD_CheckStatusWithTimeout>
 801b93e:	4603      	mov	r3, r0
 801b940:	2b00      	cmp	r3, #0
 801b942:	da02      	bge.n	801b94a <SD_read+0x2a>
  {
    return res;
 801b944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b948:	e06c      	b.n	801ba24 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801b94a:	69bb      	ldr	r3, [r7, #24]
 801b94c:	f003 0303 	and.w	r3, r3, #3
 801b950:	2b00      	cmp	r3, #0
 801b952:	d11e      	bne.n	801b992 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801b954:	693a      	ldr	r2, [r7, #16]
 801b956:	6979      	ldr	r1, [r7, #20]
 801b958:	69b8      	ldr	r0, [r7, #24]
 801b95a:	f7ff f8fb 	bl	801ab54 <BSP_SD_ReadBlocks_DMA>
 801b95e:	4603      	mov	r3, r0
 801b960:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 801b964:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d159      	bne.n	801ba20 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801b96c:	4b2f      	ldr	r3, [pc, #188]	; (801ba2c <SD_read+0x10c>)
 801b96e:	6819      	ldr	r1, [r3, #0]
 801b970:	f107 0320 	add.w	r3, r7, #32
 801b974:	f247 5230 	movw	r2, #30000	; 0x7530
 801b978:	4618      	mov	r0, r3
 801b97a:	f7fa ff27 	bl	80167cc <osMessageGet>
      if (event.status == osEventMessage) {
 801b97e:	6a3b      	ldr	r3, [r7, #32]
 801b980:	2b10      	cmp	r3, #16
 801b982:	d14d      	bne.n	801ba20 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 801b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b986:	2b01      	cmp	r3, #1
 801b988:	d14a      	bne.n	801ba20 <SD_read+0x100>
          res = RES_OK;
 801b98a:	2300      	movs	r3, #0
 801b98c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801b990:	e046      	b.n	801ba20 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 801b992:	2300      	movs	r3, #0
 801b994:	633b      	str	r3, [r7, #48]	; 0x30
 801b996:	e032      	b.n	801b9fe <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801b998:	697b      	ldr	r3, [r7, #20]
 801b99a:	1c5a      	adds	r2, r3, #1
 801b99c:	617a      	str	r2, [r7, #20]
 801b99e:	2201      	movs	r2, #1
 801b9a0:	4619      	mov	r1, r3
 801b9a2:	4823      	ldr	r0, [pc, #140]	; (801ba30 <SD_read+0x110>)
 801b9a4:	f7ff f8d6 	bl	801ab54 <BSP_SD_ReadBlocks_DMA>
 801b9a8:	4603      	mov	r3, r0
 801b9aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 801b9ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d128      	bne.n	801ba08 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801b9b6:	4b1d      	ldr	r3, [pc, #116]	; (801ba2c <SD_read+0x10c>)
 801b9b8:	6819      	ldr	r1, [r3, #0]
 801b9ba:	463b      	mov	r3, r7
 801b9bc:	f247 5230 	movw	r2, #30000	; 0x7530
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	f7fa ff03 	bl	80167cc <osMessageGet>
 801b9c6:	f107 0320 	add.w	r3, r7, #32
 801b9ca:	463a      	mov	r2, r7
 801b9cc:	ca07      	ldmia	r2, {r0, r1, r2}
 801b9ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801b9d2:	6a3b      	ldr	r3, [r7, #32]
 801b9d4:	2b10      	cmp	r3, #16
 801b9d6:	d10f      	bne.n	801b9f8 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 801b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9da:	2b01      	cmp	r3, #1
 801b9dc:	d10c      	bne.n	801b9f8 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 801b9de:	69bb      	ldr	r3, [r7, #24]
 801b9e0:	4a13      	ldr	r2, [pc, #76]	; (801ba30 <SD_read+0x110>)
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	4611      	mov	r1, r2
 801b9e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 801b9ea:	461a      	mov	r2, r3
 801b9ec:	f009 fc7e 	bl	80252ec <memcpy>
            buff += BLOCKSIZE;
 801b9f0:	69bb      	ldr	r3, [r7, #24]
 801b9f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801b9f6:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 801b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b9fa:	3301      	adds	r3, #1
 801b9fc:	633b      	str	r3, [r7, #48]	; 0x30
 801b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba00:	693a      	ldr	r2, [r7, #16]
 801ba02:	429a      	cmp	r2, r3
 801ba04:	d8c8      	bhi.n	801b998 <SD_read+0x78>
 801ba06:	e000      	b.n	801ba0a <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 801ba08:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 801ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba0c:	693a      	ldr	r2, [r7, #16]
 801ba0e:	429a      	cmp	r2, r3
 801ba10:	d106      	bne.n	801ba20 <SD_read+0x100>
 801ba12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d102      	bne.n	801ba20 <SD_read+0x100>
      res = RES_OK;
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 801ba20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 801ba24:	4618      	mov	r0, r3
 801ba26:	3738      	adds	r7, #56	; 0x38
 801ba28:	46bd      	mov	sp, r7
 801ba2a:	bd80      	pop	{r7, pc}
 801ba2c:	2000ba64 	.word	0x2000ba64
 801ba30:	2000b864 	.word	0x2000b864

0801ba34 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801ba34:	b580      	push	{r7, lr}
 801ba36:	b090      	sub	sp, #64	; 0x40
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	61b9      	str	r1, [r7, #24]
 801ba3c:	617a      	str	r2, [r7, #20]
 801ba3e:	613b      	str	r3, [r7, #16]
 801ba40:	4603      	mov	r3, r0
 801ba42:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 801ba44:	2301      	movs	r3, #1
 801ba46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801ba4a:	f247 5030 	movw	r0, #30000	; 0x7530
 801ba4e:	f7ff fede 	bl	801b80e <SD_CheckStatusWithTimeout>
 801ba52:	4603      	mov	r3, r0
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	da02      	bge.n	801ba5e <SD_write+0x2a>
  {
    return res;
 801ba58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801ba5c:	e07c      	b.n	801bb58 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801ba5e:	69bb      	ldr	r3, [r7, #24]
 801ba60:	f003 0303 	and.w	r3, r3, #3
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d12e      	bne.n	801bac6 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801ba68:	693a      	ldr	r2, [r7, #16]
 801ba6a:	6979      	ldr	r1, [r7, #20]
 801ba6c:	69b8      	ldr	r0, [r7, #24]
 801ba6e:	f7ff f88b 	bl	801ab88 <BSP_SD_WriteBlocks_DMA>
 801ba72:	4603      	mov	r3, r0
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d16d      	bne.n	801bb54 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801ba78:	4b39      	ldr	r3, [pc, #228]	; (801bb60 <SD_write+0x12c>)
 801ba7a:	6819      	ldr	r1, [r3, #0]
 801ba7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ba80:	f247 5230 	movw	r2, #30000	; 0x7530
 801ba84:	4618      	mov	r0, r3
 801ba86:	f7fa fea1 	bl	80167cc <osMessageGet>

      if (event.status == osEventMessage)
 801ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba8c:	2b10      	cmp	r3, #16
 801ba8e:	d161      	bne.n	801bb54 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 801ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba92:	2b02      	cmp	r3, #2
 801ba94:	d15e      	bne.n	801bb54 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 801ba96:	f7fa fd3f 	bl	8016518 <osKernelSysTick>
 801ba9a:	4602      	mov	r2, r0
 801ba9c:	f247 5330 	movw	r3, #30000	; 0x7530
 801baa0:	4413      	add	r3, r2
 801baa2:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 801baa4:	e008      	b.n	801bab8 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801baa6:	f7ff f889 	bl	801abbc <BSP_SD_GetCardState>
 801baaa:	4603      	mov	r3, r0
 801baac:	2b00      	cmp	r3, #0
 801baae:	d103      	bne.n	801bab8 <SD_write+0x84>
            {
              res = RES_OK;
 801bab0:	2300      	movs	r3, #0
 801bab2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 801bab6:	e04d      	b.n	801bb54 <SD_write+0x120>
          while(timer > osKernelSysTick())
 801bab8:	f7fa fd2e 	bl	8016518 <osKernelSysTick>
 801babc:	4602      	mov	r2, r0
 801babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bac0:	4293      	cmp	r3, r2
 801bac2:	d8f0      	bhi.n	801baa6 <SD_write+0x72>
 801bac4:	e046      	b.n	801bb54 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 801bac6:	2300      	movs	r3, #0
 801bac8:	63bb      	str	r3, [r7, #56]	; 0x38
 801baca:	e032      	b.n	801bb32 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801bacc:	697b      	ldr	r3, [r7, #20]
 801bace:	1c5a      	adds	r2, r3, #1
 801bad0:	617a      	str	r2, [r7, #20]
 801bad2:	2201      	movs	r2, #1
 801bad4:	4619      	mov	r1, r3
 801bad6:	4823      	ldr	r0, [pc, #140]	; (801bb64 <SD_write+0x130>)
 801bad8:	f7ff f856 	bl	801ab88 <BSP_SD_WriteBlocks_DMA>
 801badc:	4603      	mov	r3, r0
 801bade:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 801bae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d128      	bne.n	801bb3c <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801baea:	4b1d      	ldr	r3, [pc, #116]	; (801bb60 <SD_write+0x12c>)
 801baec:	6819      	ldr	r1, [r3, #0]
 801baee:	463b      	mov	r3, r7
 801baf0:	f247 5230 	movw	r2, #30000	; 0x7530
 801baf4:	4618      	mov	r0, r3
 801baf6:	f7fa fe69 	bl	80167cc <osMessageGet>
 801bafa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bafe:	463a      	mov	r2, r7
 801bb00:	ca07      	ldmia	r2, {r0, r1, r2}
 801bb02:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb08:	2b10      	cmp	r3, #16
 801bb0a:	d10f      	bne.n	801bb2c <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 801bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb0e:	2b02      	cmp	r3, #2
 801bb10:	d10c      	bne.n	801bb2c <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 801bb12:	69bb      	ldr	r3, [r7, #24]
 801bb14:	4a13      	ldr	r2, [pc, #76]	; (801bb64 <SD_write+0x130>)
 801bb16:	4618      	mov	r0, r3
 801bb18:	4611      	mov	r1, r2
 801bb1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bb1e:	461a      	mov	r2, r3
 801bb20:	f009 fbe4 	bl	80252ec <memcpy>
            buff += BLOCKSIZE;
 801bb24:	69bb      	ldr	r3, [r7, #24]
 801bb26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801bb2a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 801bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb2e:	3301      	adds	r3, #1
 801bb30:	63bb      	str	r3, [r7, #56]	; 0x38
 801bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb34:	693a      	ldr	r2, [r7, #16]
 801bb36:	429a      	cmp	r2, r3
 801bb38:	d8c8      	bhi.n	801bacc <SD_write+0x98>
 801bb3a:	e000      	b.n	801bb3e <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 801bb3c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 801bb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb40:	693a      	ldr	r2, [r7, #16]
 801bb42:	429a      	cmp	r2, r3
 801bb44:	d106      	bne.n	801bb54 <SD_write+0x120>
 801bb46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d102      	bne.n	801bb54 <SD_write+0x120>
      res = RES_OK;
 801bb4e:	2300      	movs	r3, #0
 801bb50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 801bb54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 801bb58:	4618      	mov	r0, r3
 801bb5a:	3740      	adds	r7, #64	; 0x40
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bd80      	pop	{r7, pc}
 801bb60:	2000ba64 	.word	0x2000ba64
 801bb64:	2000b864 	.word	0x2000b864

0801bb68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b08c      	sub	sp, #48	; 0x30
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	4603      	mov	r3, r0
 801bb70:	603a      	str	r2, [r7, #0]
 801bb72:	71fb      	strb	r3, [r7, #7]
 801bb74:	460b      	mov	r3, r1
 801bb76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801bb78:	2301      	movs	r3, #1
 801bb7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801bb7e:	4b25      	ldr	r3, [pc, #148]	; (801bc14 <SD_ioctl+0xac>)
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	b2db      	uxtb	r3, r3
 801bb84:	f003 0301 	and.w	r3, r3, #1
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d001      	beq.n	801bb90 <SD_ioctl+0x28>
 801bb8c:	2303      	movs	r3, #3
 801bb8e:	e03c      	b.n	801bc0a <SD_ioctl+0xa2>

  switch (cmd)
 801bb90:	79bb      	ldrb	r3, [r7, #6]
 801bb92:	2b03      	cmp	r3, #3
 801bb94:	d834      	bhi.n	801bc00 <SD_ioctl+0x98>
 801bb96:	a201      	add	r2, pc, #4	; (adr r2, 801bb9c <SD_ioctl+0x34>)
 801bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb9c:	0801bbad 	.word	0x0801bbad
 801bba0:	0801bbb5 	.word	0x0801bbb5
 801bba4:	0801bbcd 	.word	0x0801bbcd
 801bba8:	0801bbe7 	.word	0x0801bbe7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801bbac:	2300      	movs	r3, #0
 801bbae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801bbb2:	e028      	b.n	801bc06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801bbb4:	f107 030c 	add.w	r3, r7, #12
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7ff f80f 	bl	801abdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801bbbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bbc0:	683b      	ldr	r3, [r7, #0]
 801bbc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801bbca:	e01c      	b.n	801bc06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801bbcc:	f107 030c 	add.w	r3, r7, #12
 801bbd0:	4618      	mov	r0, r3
 801bbd2:	f7ff f803 	bl	801abdc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbd8:	b29a      	uxth	r2, r3
 801bbda:	683b      	ldr	r3, [r7, #0]
 801bbdc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801bbde:	2300      	movs	r3, #0
 801bbe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801bbe4:	e00f      	b.n	801bc06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801bbe6:	f107 030c 	add.w	r3, r7, #12
 801bbea:	4618      	mov	r0, r3
 801bbec:	f7fe fff6 	bl	801abdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801bbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbf2:	0a5a      	lsrs	r2, r3, #9
 801bbf4:	683b      	ldr	r3, [r7, #0]
 801bbf6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801bbfe:	e002      	b.n	801bc06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801bc00:	2304      	movs	r3, #4
 801bc02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801bc06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801bc0a:	4618      	mov	r0, r3
 801bc0c:	3730      	adds	r7, #48	; 0x30
 801bc0e:	46bd      	mov	sp, r7
 801bc10:	bd80      	pop	{r7, pc}
 801bc12:	bf00      	nop
 801bc14:	2000005c 	.word	0x2000005c

0801bc18 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 801bc1c:	4b04      	ldr	r3, [pc, #16]	; (801bc30 <BSP_SD_WriteCpltCallback+0x18>)
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	f04f 32ff 	mov.w	r2, #4294967295
 801bc24:	2102      	movs	r1, #2
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7fa fd90 	bl	801674c <osMessagePut>
}
 801bc2c:	bf00      	nop
 801bc2e:	bd80      	pop	{r7, pc}
 801bc30:	2000ba64 	.word	0x2000ba64

0801bc34 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801bc34:	b580      	push	{r7, lr}
 801bc36:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 801bc38:	4b04      	ldr	r3, [pc, #16]	; (801bc4c <BSP_SD_ReadCpltCallback+0x18>)
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	f04f 32ff 	mov.w	r2, #4294967295
 801bc40:	2101      	movs	r1, #1
 801bc42:	4618      	mov	r0, r3
 801bc44:	f7fa fd82 	bl	801674c <osMessagePut>
}
 801bc48:	bf00      	nop
 801bc4a:	bd80      	pop	{r7, pc}
 801bc4c:	2000ba64 	.word	0x2000ba64

0801bc50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b082      	sub	sp, #8
 801bc54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801bc56:	4b11      	ldr	r3, [pc, #68]	; (801bc9c <HAL_MspInit+0x4c>)
 801bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc5a:	4a10      	ldr	r2, [pc, #64]	; (801bc9c <HAL_MspInit+0x4c>)
 801bc5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bc60:	6413      	str	r3, [r2, #64]	; 0x40
 801bc62:	4b0e      	ldr	r3, [pc, #56]	; (801bc9c <HAL_MspInit+0x4c>)
 801bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bc6a:	607b      	str	r3, [r7, #4]
 801bc6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bc6e:	4b0b      	ldr	r3, [pc, #44]	; (801bc9c <HAL_MspInit+0x4c>)
 801bc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc72:	4a0a      	ldr	r2, [pc, #40]	; (801bc9c <HAL_MspInit+0x4c>)
 801bc74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bc78:	6453      	str	r3, [r2, #68]	; 0x44
 801bc7a:	4b08      	ldr	r3, [pc, #32]	; (801bc9c <HAL_MspInit+0x4c>)
 801bc7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bc82:	603b      	str	r3, [r7, #0]
 801bc84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801bc86:	2200      	movs	r2, #0
 801bc88:	210f      	movs	r1, #15
 801bc8a:	f06f 0001 	mvn.w	r0, #1
 801bc8e:	f7e5 facd 	bl	800122c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801bc92:	bf00      	nop
 801bc94:	3708      	adds	r7, #8
 801bc96:	46bd      	mov	sp, r7
 801bc98:	bd80      	pop	{r7, pc}
 801bc9a:	bf00      	nop
 801bc9c:	40023800 	.word	0x40023800

0801bca0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b08a      	sub	sp, #40	; 0x28
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bca8:	f107 0314 	add.w	r3, r7, #20
 801bcac:	2200      	movs	r2, #0
 801bcae:	601a      	str	r2, [r3, #0]
 801bcb0:	605a      	str	r2, [r3, #4]
 801bcb2:	609a      	str	r2, [r3, #8]
 801bcb4:	60da      	str	r2, [r3, #12]
 801bcb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	4a21      	ldr	r2, [pc, #132]	; (801bd44 <HAL_ADC_MspInit+0xa4>)
 801bcbe:	4293      	cmp	r3, r2
 801bcc0:	d13c      	bne.n	801bd3c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 801bcc2:	4b21      	ldr	r3, [pc, #132]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bcc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcc6:	4a20      	ldr	r2, [pc, #128]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bcc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bccc:	6453      	str	r3, [r2, #68]	; 0x44
 801bcce:	4b1e      	ldr	r3, [pc, #120]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bcd6:	613b      	str	r3, [r7, #16]
 801bcd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801bcda:	4b1b      	ldr	r3, [pc, #108]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcde:	4a1a      	ldr	r2, [pc, #104]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bce0:	f043 0320 	orr.w	r3, r3, #32
 801bce4:	6313      	str	r3, [r2, #48]	; 0x30
 801bce6:	4b18      	ldr	r3, [pc, #96]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcea:	f003 0320 	and.w	r3, r3, #32
 801bcee:	60fb      	str	r3, [r7, #12]
 801bcf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bcf2:	4b15      	ldr	r3, [pc, #84]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcf6:	4a14      	ldr	r2, [pc, #80]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bcf8:	f043 0301 	orr.w	r3, r3, #1
 801bcfc:	6313      	str	r3, [r2, #48]	; 0x30
 801bcfe:	4b12      	ldr	r3, [pc, #72]	; (801bd48 <HAL_ADC_MspInit+0xa8>)
 801bd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd02:	f003 0301 	and.w	r3, r3, #1
 801bd06:	60bb      	str	r3, [r7, #8]
 801bd08:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 801bd0a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801bd0e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801bd10:	2303      	movs	r3, #3
 801bd12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bd14:	2300      	movs	r3, #0
 801bd16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801bd18:	f107 0314 	add.w	r3, r7, #20
 801bd1c:	4619      	mov	r1, r3
 801bd1e:	480b      	ldr	r0, [pc, #44]	; (801bd4c <HAL_ADC_MspInit+0xac>)
 801bd20:	f7e7 f820 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 801bd24:	2301      	movs	r3, #1
 801bd26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801bd28:	2303      	movs	r3, #3
 801bd2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bd2c:	2300      	movs	r3, #0
 801bd2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 801bd30:	f107 0314 	add.w	r3, r7, #20
 801bd34:	4619      	mov	r1, r3
 801bd36:	4806      	ldr	r0, [pc, #24]	; (801bd50 <HAL_ADC_MspInit+0xb0>)
 801bd38:	f7e7 f814 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 801bd3c:	bf00      	nop
 801bd3e:	3728      	adds	r7, #40	; 0x28
 801bd40:	46bd      	mov	sp, r7
 801bd42:	bd80      	pop	{r7, pc}
 801bd44:	40012200 	.word	0x40012200
 801bd48:	40023800 	.word	0x40023800
 801bd4c:	40021400 	.word	0x40021400
 801bd50:	40020000 	.word	0x40020000

0801bd54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 801bd54:	b480      	push	{r7}
 801bd56:	b085      	sub	sp, #20
 801bd58:	af00      	add	r7, sp, #0
 801bd5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	4a0a      	ldr	r2, [pc, #40]	; (801bd8c <HAL_CRC_MspInit+0x38>)
 801bd62:	4293      	cmp	r3, r2
 801bd64:	d10b      	bne.n	801bd7e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801bd66:	4b0a      	ldr	r3, [pc, #40]	; (801bd90 <HAL_CRC_MspInit+0x3c>)
 801bd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd6a:	4a09      	ldr	r2, [pc, #36]	; (801bd90 <HAL_CRC_MspInit+0x3c>)
 801bd6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801bd70:	6313      	str	r3, [r2, #48]	; 0x30
 801bd72:	4b07      	ldr	r3, [pc, #28]	; (801bd90 <HAL_CRC_MspInit+0x3c>)
 801bd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bd7a:	60fb      	str	r3, [r7, #12]
 801bd7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 801bd7e:	bf00      	nop
 801bd80:	3714      	adds	r7, #20
 801bd82:	46bd      	mov	sp, r7
 801bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd88:	4770      	bx	lr
 801bd8a:	bf00      	nop
 801bd8c:	40023000 	.word	0x40023000
 801bd90:	40023800 	.word	0x40023800

0801bd94 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b08e      	sub	sp, #56	; 0x38
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bd9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bda0:	2200      	movs	r2, #0
 801bda2:	601a      	str	r2, [r3, #0]
 801bda4:	605a      	str	r2, [r3, #4]
 801bda6:	609a      	str	r2, [r3, #8]
 801bda8:	60da      	str	r2, [r3, #12]
 801bdaa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	4a50      	ldr	r2, [pc, #320]	; (801bef4 <HAL_DCMI_MspInit+0x160>)
 801bdb2:	4293      	cmp	r3, r2
 801bdb4:	f040 809a 	bne.w	801beec <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 801bdb8:	4b4f      	ldr	r3, [pc, #316]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdbc:	4a4e      	ldr	r2, [pc, #312]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdbe:	f043 0301 	orr.w	r3, r3, #1
 801bdc2:	6353      	str	r3, [r2, #52]	; 0x34
 801bdc4:	4b4c      	ldr	r3, [pc, #304]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdc8:	f003 0301 	and.w	r3, r3, #1
 801bdcc:	623b      	str	r3, [r7, #32]
 801bdce:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801bdd0:	4b49      	ldr	r3, [pc, #292]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdd4:	4a48      	ldr	r2, [pc, #288]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdd6:	f043 0310 	orr.w	r3, r3, #16
 801bdda:	6313      	str	r3, [r2, #48]	; 0x30
 801bddc:	4b46      	ldr	r3, [pc, #280]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bde0:	f003 0310 	and.w	r3, r3, #16
 801bde4:	61fb      	str	r3, [r7, #28]
 801bde6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801bde8:	4b43      	ldr	r3, [pc, #268]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdec:	4a42      	ldr	r2, [pc, #264]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdee:	f043 0308 	orr.w	r3, r3, #8
 801bdf2:	6313      	str	r3, [r2, #48]	; 0x30
 801bdf4:	4b40      	ldr	r3, [pc, #256]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdf8:	f003 0308 	and.w	r3, r3, #8
 801bdfc:	61bb      	str	r3, [r7, #24]
 801bdfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801be00:	4b3d      	ldr	r3, [pc, #244]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be04:	4a3c      	ldr	r2, [pc, #240]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be0a:	6313      	str	r3, [r2, #48]	; 0x30
 801be0c:	4b3a      	ldr	r3, [pc, #232]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be14:	617b      	str	r3, [r7, #20]
 801be16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801be18:	4b37      	ldr	r3, [pc, #220]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be1c:	4a36      	ldr	r2, [pc, #216]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801be22:	6313      	str	r3, [r2, #48]	; 0x30
 801be24:	4b34      	ldr	r3, [pc, #208]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be2c:	613b      	str	r3, [r7, #16]
 801be2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801be30:	4b31      	ldr	r3, [pc, #196]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be34:	4a30      	ldr	r2, [pc, #192]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be36:	f043 0301 	orr.w	r3, r3, #1
 801be3a:	6313      	str	r3, [r2, #48]	; 0x30
 801be3c:	4b2e      	ldr	r3, [pc, #184]	; (801bef8 <HAL_DCMI_MspInit+0x164>)
 801be3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be40:	f003 0301 	and.w	r3, r3, #1
 801be44:	60fb      	str	r3, [r7, #12]
 801be46:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 801be48:	2360      	movs	r3, #96	; 0x60
 801be4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801be4c:	2302      	movs	r3, #2
 801be4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801be50:	2300      	movs	r3, #0
 801be52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801be54:	2300      	movs	r3, #0
 801be56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801be58:	230d      	movs	r3, #13
 801be5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801be5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801be60:	4619      	mov	r1, r3
 801be62:	4826      	ldr	r0, [pc, #152]	; (801befc <HAL_DCMI_MspInit+0x168>)
 801be64:	f7e6 ff7e 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 801be68:	2308      	movs	r3, #8
 801be6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801be6c:	2302      	movs	r3, #2
 801be6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801be70:	2300      	movs	r3, #0
 801be72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801be74:	2300      	movs	r3, #0
 801be76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801be78:	230d      	movs	r3, #13
 801be7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 801be7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801be80:	4619      	mov	r1, r3
 801be82:	481f      	ldr	r0, [pc, #124]	; (801bf00 <HAL_DCMI_MspInit+0x16c>)
 801be84:	f7e6 ff6e 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 801be88:	f44f 7300 	mov.w	r3, #512	; 0x200
 801be8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801be8e:	2302      	movs	r3, #2
 801be90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801be92:	2300      	movs	r3, #0
 801be94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801be96:	2300      	movs	r3, #0
 801be98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801be9a:	230d      	movs	r3, #13
 801be9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 801be9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bea2:	4619      	mov	r1, r3
 801bea4:	4817      	ldr	r0, [pc, #92]	; (801bf04 <HAL_DCMI_MspInit+0x170>)
 801bea6:	f7e6 ff5d 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 801beaa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 801beae:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801beb0:	2302      	movs	r3, #2
 801beb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801beb4:	2300      	movs	r3, #0
 801beb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801beb8:	2300      	movs	r3, #0
 801beba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801bebc:	230d      	movs	r3, #13
 801bebe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801bec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bec4:	4619      	mov	r1, r3
 801bec6:	4810      	ldr	r0, [pc, #64]	; (801bf08 <HAL_DCMI_MspInit+0x174>)
 801bec8:	f7e6 ff4c 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 801becc:	2350      	movs	r3, #80	; 0x50
 801bece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bed0:	2302      	movs	r3, #2
 801bed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bed4:	2300      	movs	r3, #0
 801bed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801bed8:	2300      	movs	r3, #0
 801beda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801bedc:	230d      	movs	r3, #13
 801bede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bee4:	4619      	mov	r1, r3
 801bee6:	4809      	ldr	r0, [pc, #36]	; (801bf0c <HAL_DCMI_MspInit+0x178>)
 801bee8:	f7e6 ff3c 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 801beec:	bf00      	nop
 801beee:	3738      	adds	r7, #56	; 0x38
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bd80      	pop	{r7, pc}
 801bef4:	50050000 	.word	0x50050000
 801bef8:	40023800 	.word	0x40023800
 801befc:	40021000 	.word	0x40021000
 801bf00:	40020c00 	.word	0x40020c00
 801bf04:	40021800 	.word	0x40021800
 801bf08:	40021c00 	.word	0x40021c00
 801bf0c:	40020000 	.word	0x40020000

0801bf10 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b08e      	sub	sp, #56	; 0x38
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bf18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bf1c:	2200      	movs	r2, #0
 801bf1e:	601a      	str	r2, [r3, #0]
 801bf20:	605a      	str	r2, [r3, #4]
 801bf22:	609a      	str	r2, [r3, #8]
 801bf24:	60da      	str	r2, [r3, #12]
 801bf26:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	4a3f      	ldr	r2, [pc, #252]	; (801c02c <HAL_ETH_MspInit+0x11c>)
 801bf2e:	4293      	cmp	r3, r2
 801bf30:	d178      	bne.n	801c024 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 801bf32:	4b3f      	ldr	r3, [pc, #252]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf36:	4a3e      	ldr	r2, [pc, #248]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801bf3c:	6313      	str	r3, [r2, #48]	; 0x30
 801bf3e:	4b3c      	ldr	r3, [pc, #240]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801bf46:	623b      	str	r3, [r7, #32]
 801bf48:	6a3b      	ldr	r3, [r7, #32]
 801bf4a:	4b39      	ldr	r3, [pc, #228]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf4e:	4a38      	ldr	r2, [pc, #224]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801bf54:	6313      	str	r3, [r2, #48]	; 0x30
 801bf56:	4b36      	ldr	r3, [pc, #216]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801bf5e:	61fb      	str	r3, [r7, #28]
 801bf60:	69fb      	ldr	r3, [r7, #28]
 801bf62:	4b33      	ldr	r3, [pc, #204]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf66:	4a32      	ldr	r2, [pc, #200]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801bf6c:	6313      	str	r3, [r2, #48]	; 0x30
 801bf6e:	4b30      	ldr	r3, [pc, #192]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801bf76:	61bb      	str	r3, [r7, #24]
 801bf78:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801bf7a:	4b2d      	ldr	r3, [pc, #180]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf7e:	4a2c      	ldr	r2, [pc, #176]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf84:	6313      	str	r3, [r2, #48]	; 0x30
 801bf86:	4b2a      	ldr	r3, [pc, #168]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bf8e:	617b      	str	r3, [r7, #20]
 801bf90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801bf92:	4b27      	ldr	r3, [pc, #156]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf96:	4a26      	ldr	r2, [pc, #152]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bf98:	f043 0304 	orr.w	r3, r3, #4
 801bf9c:	6313      	str	r3, [r2, #48]	; 0x30
 801bf9e:	4b24      	ldr	r3, [pc, #144]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfa2:	f003 0304 	and.w	r3, r3, #4
 801bfa6:	613b      	str	r3, [r7, #16]
 801bfa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bfaa:	4b21      	ldr	r3, [pc, #132]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfae:	4a20      	ldr	r2, [pc, #128]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bfb0:	f043 0301 	orr.w	r3, r3, #1
 801bfb4:	6313      	str	r3, [r2, #48]	; 0x30
 801bfb6:	4b1e      	ldr	r3, [pc, #120]	; (801c030 <HAL_ETH_MspInit+0x120>)
 801bfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfba:	f003 0301 	and.w	r3, r3, #1
 801bfbe:	60fb      	str	r3, [r7, #12]
 801bfc0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 801bfc2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 801bfc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bfc8:	2302      	movs	r3, #2
 801bfca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bfcc:	2300      	movs	r3, #0
 801bfce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bfd0:	2303      	movs	r3, #3
 801bfd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801bfd4:	230b      	movs	r3, #11
 801bfd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801bfd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bfdc:	4619      	mov	r1, r3
 801bfde:	4815      	ldr	r0, [pc, #84]	; (801c034 <HAL_ETH_MspInit+0x124>)
 801bfe0:	f7e6 fec0 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801bfe4:	2332      	movs	r3, #50	; 0x32
 801bfe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bfe8:	2302      	movs	r3, #2
 801bfea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bfec:	2300      	movs	r3, #0
 801bfee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bff0:	2303      	movs	r3, #3
 801bff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801bff4:	230b      	movs	r3, #11
 801bff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801bff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bffc:	4619      	mov	r1, r3
 801bffe:	480e      	ldr	r0, [pc, #56]	; (801c038 <HAL_ETH_MspInit+0x128>)
 801c000:	f7e6 feb0 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801c004:	2386      	movs	r3, #134	; 0x86
 801c006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c008:	2302      	movs	r3, #2
 801c00a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c00c:	2300      	movs	r3, #0
 801c00e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c010:	2303      	movs	r3, #3
 801c012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801c014:	230b      	movs	r3, #11
 801c016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c01c:	4619      	mov	r1, r3
 801c01e:	4807      	ldr	r0, [pc, #28]	; (801c03c <HAL_ETH_MspInit+0x12c>)
 801c020:	f7e6 fea0 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 801c024:	bf00      	nop
 801c026:	3738      	adds	r7, #56	; 0x38
 801c028:	46bd      	mov	sp, r7
 801c02a:	bd80      	pop	{r7, pc}
 801c02c:	40028000 	.word	0x40028000
 801c030:	40023800 	.word	0x40023800
 801c034:	40021800 	.word	0x40021800
 801c038:	40020800 	.word	0x40020800
 801c03c:	40020000 	.word	0x40020000

0801c040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b08c      	sub	sp, #48	; 0x30
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c048:	f107 031c 	add.w	r3, r7, #28
 801c04c:	2200      	movs	r2, #0
 801c04e:	601a      	str	r2, [r3, #0]
 801c050:	605a      	str	r2, [r3, #4]
 801c052:	609a      	str	r2, [r3, #8]
 801c054:	60da      	str	r2, [r3, #12]
 801c056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	4a2f      	ldr	r2, [pc, #188]	; (801c11c <HAL_I2C_MspInit+0xdc>)
 801c05e:	4293      	cmp	r3, r2
 801c060:	d129      	bne.n	801c0b6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c062:	4b2f      	ldr	r3, [pc, #188]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c066:	4a2e      	ldr	r2, [pc, #184]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c068:	f043 0302 	orr.w	r3, r3, #2
 801c06c:	6313      	str	r3, [r2, #48]	; 0x30
 801c06e:	4b2c      	ldr	r3, [pc, #176]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c072:	f003 0302 	and.w	r3, r3, #2
 801c076:	61bb      	str	r3, [r7, #24]
 801c078:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 801c07a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801c07e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c080:	2312      	movs	r3, #18
 801c082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c084:	2301      	movs	r3, #1
 801c086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c088:	2300      	movs	r3, #0
 801c08a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801c08c:	2304      	movs	r3, #4
 801c08e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c090:	f107 031c 	add.w	r3, r7, #28
 801c094:	4619      	mov	r1, r3
 801c096:	4823      	ldr	r0, [pc, #140]	; (801c124 <HAL_I2C_MspInit+0xe4>)
 801c098:	f7e6 fe64 	bl	8002d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801c09c:	4b20      	ldr	r3, [pc, #128]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0a0:	4a1f      	ldr	r2, [pc, #124]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c0a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c0a6:	6413      	str	r3, [r2, #64]	; 0x40
 801c0a8:	4b1d      	ldr	r3, [pc, #116]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c0b0:	617b      	str	r3, [r7, #20]
 801c0b2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 801c0b4:	e02d      	b.n	801c112 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	4a1b      	ldr	r2, [pc, #108]	; (801c128 <HAL_I2C_MspInit+0xe8>)
 801c0bc:	4293      	cmp	r3, r2
 801c0be:	d128      	bne.n	801c112 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801c0c0:	4b17      	ldr	r3, [pc, #92]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0c4:	4a16      	ldr	r2, [pc, #88]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0ca:	6313      	str	r3, [r2, #48]	; 0x30
 801c0cc:	4b14      	ldr	r3, [pc, #80]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c0d4:	613b      	str	r3, [r7, #16]
 801c0d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 801c0d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801c0dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c0de:	2312      	movs	r3, #18
 801c0e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c0e2:	2301      	movs	r3, #1
 801c0e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c0e6:	2303      	movs	r3, #3
 801c0e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801c0ea:	2304      	movs	r3, #4
 801c0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801c0ee:	f107 031c 	add.w	r3, r7, #28
 801c0f2:	4619      	mov	r1, r3
 801c0f4:	480d      	ldr	r0, [pc, #52]	; (801c12c <HAL_I2C_MspInit+0xec>)
 801c0f6:	f7e6 fe35 	bl	8002d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 801c0fa:	4b09      	ldr	r3, [pc, #36]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0fe:	4a08      	ldr	r2, [pc, #32]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801c104:	6413      	str	r3, [r2, #64]	; 0x40
 801c106:	4b06      	ldr	r3, [pc, #24]	; (801c120 <HAL_I2C_MspInit+0xe0>)
 801c108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c10a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c10e:	60fb      	str	r3, [r7, #12]
 801c110:	68fb      	ldr	r3, [r7, #12]
}
 801c112:	bf00      	nop
 801c114:	3730      	adds	r7, #48	; 0x30
 801c116:	46bd      	mov	sp, r7
 801c118:	bd80      	pop	{r7, pc}
 801c11a:	bf00      	nop
 801c11c:	40005400 	.word	0x40005400
 801c120:	40023800 	.word	0x40023800
 801c124:	40020400 	.word	0x40020400
 801c128:	40005c00 	.word	0x40005c00
 801c12c:	40021c00 	.word	0x40021c00

0801c130 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b082      	sub	sp, #8
 801c134:	af00      	add	r7, sp, #0
 801c136:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	4a11      	ldr	r2, [pc, #68]	; (801c184 <HAL_I2C_MspDeInit+0x54>)
 801c13e:	4293      	cmp	r3, r2
 801c140:	d10b      	bne.n	801c15a <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 801c142:	4b11      	ldr	r3, [pc, #68]	; (801c188 <HAL_I2C_MspDeInit+0x58>)
 801c144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c146:	4a10      	ldr	r2, [pc, #64]	; (801c188 <HAL_I2C_MspDeInit+0x58>)
 801c148:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c14c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 801c14e:	f44f 7140 	mov.w	r1, #768	; 0x300
 801c152:	480e      	ldr	r0, [pc, #56]	; (801c18c <HAL_I2C_MspDeInit+0x5c>)
 801c154:	f7e6 ffb0 	bl	80030b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 801c158:	e00f      	b.n	801c17a <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	4a0c      	ldr	r2, [pc, #48]	; (801c190 <HAL_I2C_MspDeInit+0x60>)
 801c160:	4293      	cmp	r3, r2
 801c162:	d10a      	bne.n	801c17a <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 801c164:	4b08      	ldr	r3, [pc, #32]	; (801c188 <HAL_I2C_MspDeInit+0x58>)
 801c166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c168:	4a07      	ldr	r2, [pc, #28]	; (801c188 <HAL_I2C_MspDeInit+0x58>)
 801c16a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801c16e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 801c170:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c174:	4807      	ldr	r0, [pc, #28]	; (801c194 <HAL_I2C_MspDeInit+0x64>)
 801c176:	f7e6 ff9f 	bl	80030b8 <HAL_GPIO_DeInit>
}
 801c17a:	bf00      	nop
 801c17c:	3708      	adds	r7, #8
 801c17e:	46bd      	mov	sp, r7
 801c180:	bd80      	pop	{r7, pc}
 801c182:	bf00      	nop
 801c184:	40005400 	.word	0x40005400
 801c188:	40023800 	.word	0x40023800
 801c18c:	40020400 	.word	0x40020400
 801c190:	40005c00 	.word	0x40005c00
 801c194:	40021c00 	.word	0x40021c00

0801c198 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 801c198:	b580      	push	{r7, lr}
 801c19a:	b08c      	sub	sp, #48	; 0x30
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c1a0:	f107 031c 	add.w	r3, r7, #28
 801c1a4:	2200      	movs	r2, #0
 801c1a6:	601a      	str	r2, [r3, #0]
 801c1a8:	605a      	str	r2, [r3, #4]
 801c1aa:	609a      	str	r2, [r3, #8]
 801c1ac:	60da      	str	r2, [r3, #12]
 801c1ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	681b      	ldr	r3, [r3, #0]
 801c1b4:	4a3b      	ldr	r2, [pc, #236]	; (801c2a4 <HAL_QSPI_MspInit+0x10c>)
 801c1b6:	4293      	cmp	r3, r2
 801c1b8:	d170      	bne.n	801c29c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 801c1ba:	4b3b      	ldr	r3, [pc, #236]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1be:	4a3a      	ldr	r2, [pc, #232]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1c0:	f043 0302 	orr.w	r3, r3, #2
 801c1c4:	6393      	str	r3, [r2, #56]	; 0x38
 801c1c6:	4b38      	ldr	r3, [pc, #224]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1ca:	f003 0302 	and.w	r3, r3, #2
 801c1ce:	61bb      	str	r3, [r7, #24]
 801c1d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801c1d2:	4b35      	ldr	r3, [pc, #212]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1d6:	4a34      	ldr	r2, [pc, #208]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1d8:	f043 0310 	orr.w	r3, r3, #16
 801c1dc:	6313      	str	r3, [r2, #48]	; 0x30
 801c1de:	4b32      	ldr	r3, [pc, #200]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1e2:	f003 0310 	and.w	r3, r3, #16
 801c1e6:	617b      	str	r3, [r7, #20]
 801c1e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c1ea:	4b2f      	ldr	r3, [pc, #188]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1ee:	4a2e      	ldr	r2, [pc, #184]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1f0:	f043 0302 	orr.w	r3, r3, #2
 801c1f4:	6313      	str	r3, [r2, #48]	; 0x30
 801c1f6:	4b2c      	ldr	r3, [pc, #176]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c1fa:	f003 0302 	and.w	r3, r3, #2
 801c1fe:	613b      	str	r3, [r7, #16]
 801c200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801c202:	4b29      	ldr	r3, [pc, #164]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c206:	4a28      	ldr	r2, [pc, #160]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c208:	f043 0308 	orr.w	r3, r3, #8
 801c20c:	6313      	str	r3, [r2, #48]	; 0x30
 801c20e:	4b26      	ldr	r3, [pc, #152]	; (801c2a8 <HAL_QSPI_MspInit+0x110>)
 801c210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c212:	f003 0308 	and.w	r3, r3, #8
 801c216:	60fb      	str	r3, [r7, #12]
 801c218:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 801c21a:	2304      	movs	r3, #4
 801c21c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c21e:	2302      	movs	r3, #2
 801c220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c222:	2300      	movs	r3, #0
 801c224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c226:	2303      	movs	r3, #3
 801c228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801c22a:	2309      	movs	r3, #9
 801c22c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 801c22e:	f107 031c 	add.w	r3, r7, #28
 801c232:	4619      	mov	r1, r3
 801c234:	481d      	ldr	r0, [pc, #116]	; (801c2ac <HAL_QSPI_MspInit+0x114>)
 801c236:	f7e6 fd95 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 801c23a:	2340      	movs	r3, #64	; 0x40
 801c23c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c23e:	2302      	movs	r3, #2
 801c240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c242:	2300      	movs	r3, #0
 801c244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c246:	2303      	movs	r3, #3
 801c248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 801c24a:	230a      	movs	r3, #10
 801c24c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 801c24e:	f107 031c 	add.w	r3, r7, #28
 801c252:	4619      	mov	r1, r3
 801c254:	4816      	ldr	r0, [pc, #88]	; (801c2b0 <HAL_QSPI_MspInit+0x118>)
 801c256:	f7e6 fd85 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801c25a:	2304      	movs	r3, #4
 801c25c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c25e:	2302      	movs	r3, #2
 801c260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c262:	2300      	movs	r3, #0
 801c264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c266:	2303      	movs	r3, #3
 801c268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801c26a:	2309      	movs	r3, #9
 801c26c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c26e:	f107 031c 	add.w	r3, r7, #28
 801c272:	4619      	mov	r1, r3
 801c274:	480e      	ldr	r0, [pc, #56]	; (801c2b0 <HAL_QSPI_MspInit+0x118>)
 801c276:	f7e6 fd75 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 801c27a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801c27e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c280:	2302      	movs	r3, #2
 801c282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c284:	2300      	movs	r3, #0
 801c286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c288:	2303      	movs	r3, #3
 801c28a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801c28c:	2309      	movs	r3, #9
 801c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801c290:	f107 031c 	add.w	r3, r7, #28
 801c294:	4619      	mov	r1, r3
 801c296:	4807      	ldr	r0, [pc, #28]	; (801c2b4 <HAL_QSPI_MspInit+0x11c>)
 801c298:	f7e6 fd64 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 801c29c:	bf00      	nop
 801c29e:	3730      	adds	r7, #48	; 0x30
 801c2a0:	46bd      	mov	sp, r7
 801c2a2:	bd80      	pop	{r7, pc}
 801c2a4:	a0001000 	.word	0xa0001000
 801c2a8:	40023800 	.word	0x40023800
 801c2ac:	40021000 	.word	0x40021000
 801c2b0:	40020400 	.word	0x40020400
 801c2b4:	40020c00 	.word	0x40020c00

0801c2b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 801c2b8:	b480      	push	{r7}
 801c2ba:	b083      	sub	sp, #12
 801c2bc:	af00      	add	r7, sp, #0
 801c2be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	4a07      	ldr	r2, [pc, #28]	; (801c2e4 <HAL_RTC_MspInit+0x2c>)
 801c2c6:	4293      	cmp	r3, r2
 801c2c8:	d105      	bne.n	801c2d6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801c2ca:	4b07      	ldr	r3, [pc, #28]	; (801c2e8 <HAL_RTC_MspInit+0x30>)
 801c2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c2ce:	4a06      	ldr	r2, [pc, #24]	; (801c2e8 <HAL_RTC_MspInit+0x30>)
 801c2d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801c2d4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 801c2d6:	bf00      	nop
 801c2d8:	370c      	adds	r7, #12
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e0:	4770      	bx	lr
 801c2e2:	bf00      	nop
 801c2e4:	40002800 	.word	0x40002800
 801c2e8:	40023800 	.word	0x40023800

0801c2ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801c2ec:	b580      	push	{r7, lr}
 801c2ee:	b08a      	sub	sp, #40	; 0x28
 801c2f0:	af00      	add	r7, sp, #0
 801c2f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c2f4:	f107 0314 	add.w	r3, r7, #20
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	601a      	str	r2, [r3, #0]
 801c2fc:	605a      	str	r2, [r3, #4]
 801c2fe:	609a      	str	r2, [r3, #8]
 801c300:	60da      	str	r2, [r3, #12]
 801c302:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	4a65      	ldr	r2, [pc, #404]	; (801c4a0 <HAL_SD_MspInit+0x1b4>)
 801c30a:	4293      	cmp	r3, r2
 801c30c:	f040 80c3 	bne.w	801c496 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801c310:	4b64      	ldr	r3, [pc, #400]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c314:	4a63      	ldr	r2, [pc, #396]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c316:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c31a:	6453      	str	r3, [r2, #68]	; 0x44
 801c31c:	4b61      	ldr	r3, [pc, #388]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c324:	613b      	str	r3, [r7, #16]
 801c326:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801c328:	4b5e      	ldr	r3, [pc, #376]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c32c:	4a5d      	ldr	r2, [pc, #372]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c32e:	f043 0304 	orr.w	r3, r3, #4
 801c332:	6313      	str	r3, [r2, #48]	; 0x30
 801c334:	4b5b      	ldr	r3, [pc, #364]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c338:	f003 0304 	and.w	r3, r3, #4
 801c33c:	60fb      	str	r3, [r7, #12]
 801c33e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801c340:	4b58      	ldr	r3, [pc, #352]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c344:	4a57      	ldr	r2, [pc, #348]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c346:	f043 0308 	orr.w	r3, r3, #8
 801c34a:	6313      	str	r3, [r2, #48]	; 0x30
 801c34c:	4b55      	ldr	r3, [pc, #340]	; (801c4a4 <HAL_SD_MspInit+0x1b8>)
 801c34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c350:	f003 0308 	and.w	r3, r3, #8
 801c354:	60bb      	str	r3, [r7, #8]
 801c356:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 801c358:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 801c35c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c35e:	2302      	movs	r3, #2
 801c360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c362:	2300      	movs	r3, #0
 801c364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c366:	2303      	movs	r3, #3
 801c368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801c36a:	230c      	movs	r3, #12
 801c36c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c36e:	f107 0314 	add.w	r3, r7, #20
 801c372:	4619      	mov	r1, r3
 801c374:	484c      	ldr	r0, [pc, #304]	; (801c4a8 <HAL_SD_MspInit+0x1bc>)
 801c376:	f7e6 fcf5 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 801c37a:	2304      	movs	r3, #4
 801c37c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c37e:	2302      	movs	r3, #2
 801c380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c382:	2300      	movs	r3, #0
 801c384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c386:	2303      	movs	r3, #3
 801c388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801c38a:	230c      	movs	r3, #12
 801c38c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 801c38e:	f107 0314 	add.w	r3, r7, #20
 801c392:	4619      	mov	r1, r3
 801c394:	4845      	ldr	r0, [pc, #276]	; (801c4ac <HAL_SD_MspInit+0x1c0>)
 801c396:	f7e6 fce5 	bl	8002d64 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 801c39a:	4b45      	ldr	r3, [pc, #276]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c39c:	4a45      	ldr	r2, [pc, #276]	; (801c4b4 <HAL_SD_MspInit+0x1c8>)
 801c39e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 801c3a0:	4b43      	ldr	r3, [pc, #268]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801c3a6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801c3a8:	4b41      	ldr	r3, [pc, #260]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801c3ae:	4b40      	ldr	r3, [pc, #256]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3b0:	2200      	movs	r2, #0
 801c3b2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 801c3b4:	4b3e      	ldr	r3, [pc, #248]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c3ba:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801c3bc:	4b3c      	ldr	r3, [pc, #240]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801c3c2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801c3c4:	4b3a      	ldr	r3, [pc, #232]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801c3ca:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 801c3cc:	4b38      	ldr	r3, [pc, #224]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3ce:	2220      	movs	r2, #32
 801c3d0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 801c3d2:	4b37      	ldr	r3, [pc, #220]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801c3d8:	4b35      	ldr	r3, [pc, #212]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3da:	2204      	movs	r2, #4
 801c3dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801c3de:	4b34      	ldr	r3, [pc, #208]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3e0:	2203      	movs	r2, #3
 801c3e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 801c3e4:	4b32      	ldr	r3, [pc, #200]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801c3ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 801c3ec:	4b30      	ldr	r3, [pc, #192]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801c3f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 801c3f4:	482e      	ldr	r0, [pc, #184]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c3f6:	f7e5 f8ad 	bl	8001554 <HAL_DMA_Init>
 801c3fa:	4603      	mov	r3, r0
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d001      	beq.n	801c404 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 801c400:	f7ff fa04 	bl	801b80c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	4a2a      	ldr	r2, [pc, #168]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c408:	63da      	str	r2, [r3, #60]	; 0x3c
 801c40a:	4a29      	ldr	r2, [pc, #164]	; (801c4b0 <HAL_SD_MspInit+0x1c4>)
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 801c410:	4b29      	ldr	r3, [pc, #164]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c412:	4a2a      	ldr	r2, [pc, #168]	; (801c4bc <HAL_SD_MspInit+0x1d0>)
 801c414:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 801c416:	4b28      	ldr	r3, [pc, #160]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c418:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801c41c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801c41e:	4b26      	ldr	r3, [pc, #152]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c420:	2240      	movs	r2, #64	; 0x40
 801c422:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801c424:	4b24      	ldr	r3, [pc, #144]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c426:	2200      	movs	r2, #0
 801c428:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 801c42a:	4b23      	ldr	r3, [pc, #140]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c42c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c430:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801c432:	4b21      	ldr	r3, [pc, #132]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801c438:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801c43a:	4b1f      	ldr	r3, [pc, #124]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c43c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801c440:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 801c442:	4b1d      	ldr	r3, [pc, #116]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c444:	2220      	movs	r2, #32
 801c446:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 801c448:	4b1b      	ldr	r3, [pc, #108]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c44a:	2200      	movs	r2, #0
 801c44c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801c44e:	4b1a      	ldr	r3, [pc, #104]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c450:	2204      	movs	r2, #4
 801c452:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801c454:	4b18      	ldr	r3, [pc, #96]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c456:	2203      	movs	r2, #3
 801c458:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 801c45a:	4b17      	ldr	r3, [pc, #92]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c45c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801c460:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 801c462:	4b15      	ldr	r3, [pc, #84]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c464:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801c468:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 801c46a:	4813      	ldr	r0, [pc, #76]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c46c:	f7e5 f872 	bl	8001554 <HAL_DMA_Init>
 801c470:	4603      	mov	r3, r0
 801c472:	2b00      	cmp	r3, #0
 801c474:	d001      	beq.n	801c47a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 801c476:	f7ff f9c9 	bl	801b80c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	4a0e      	ldr	r2, [pc, #56]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c47e:	641a      	str	r2, [r3, #64]	; 0x40
 801c480:	4a0d      	ldr	r2, [pc, #52]	; (801c4b8 <HAL_SD_MspInit+0x1cc>)
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 801c486:	2200      	movs	r2, #0
 801c488:	2105      	movs	r1, #5
 801c48a:	2031      	movs	r0, #49	; 0x31
 801c48c:	f7e4 fece 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801c490:	2031      	movs	r0, #49	; 0x31
 801c492:	f7e4 fee7 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 801c496:	bf00      	nop
 801c498:	3728      	adds	r7, #40	; 0x28
 801c49a:	46bd      	mov	sp, r7
 801c49c:	bd80      	pop	{r7, pc}
 801c49e:	bf00      	nop
 801c4a0:	40012c00 	.word	0x40012c00
 801c4a4:	40023800 	.word	0x40023800
 801c4a8:	40020800 	.word	0x40020800
 801c4ac:	40020c00 	.word	0x40020c00
 801c4b0:	2000b21c 	.word	0x2000b21c
 801c4b4:	40026458 	.word	0x40026458
 801c4b8:	2000b27c 	.word	0x2000b27c
 801c4bc:	400264a0 	.word	0x400264a0

0801c4c0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b08a      	sub	sp, #40	; 0x28
 801c4c4:	af00      	add	r7, sp, #0
 801c4c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c4c8:	f107 0314 	add.w	r3, r7, #20
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	601a      	str	r2, [r3, #0]
 801c4d0:	605a      	str	r2, [r3, #4]
 801c4d2:	609a      	str	r2, [r3, #8]
 801c4d4:	60da      	str	r2, [r3, #12]
 801c4d6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 801c4e0:	d127      	bne.n	801c532 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 801c4e2:	4b16      	ldr	r3, [pc, #88]	; (801c53c <HAL_SPDIFRX_MspInit+0x7c>)
 801c4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4e6:	4a15      	ldr	r2, [pc, #84]	; (801c53c <HAL_SPDIFRX_MspInit+0x7c>)
 801c4e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c4ec:	6413      	str	r3, [r2, #64]	; 0x40
 801c4ee:	4b13      	ldr	r3, [pc, #76]	; (801c53c <HAL_SPDIFRX_MspInit+0x7c>)
 801c4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c4f6:	613b      	str	r3, [r7, #16]
 801c4f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801c4fa:	4b10      	ldr	r3, [pc, #64]	; (801c53c <HAL_SPDIFRX_MspInit+0x7c>)
 801c4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c4fe:	4a0f      	ldr	r2, [pc, #60]	; (801c53c <HAL_SPDIFRX_MspInit+0x7c>)
 801c500:	f043 0308 	orr.w	r3, r3, #8
 801c504:	6313      	str	r3, [r2, #48]	; 0x30
 801c506:	4b0d      	ldr	r3, [pc, #52]	; (801c53c <HAL_SPDIFRX_MspInit+0x7c>)
 801c508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c50a:	f003 0308 	and.w	r3, r3, #8
 801c50e:	60fb      	str	r3, [r7, #12]
 801c510:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 801c512:	2380      	movs	r3, #128	; 0x80
 801c514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c516:	2302      	movs	r3, #2
 801c518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c51a:	2300      	movs	r3, #0
 801c51c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c51e:	2300      	movs	r3, #0
 801c520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 801c522:	2308      	movs	r3, #8
 801c524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 801c526:	f107 0314 	add.w	r3, r7, #20
 801c52a:	4619      	mov	r1, r3
 801c52c:	4804      	ldr	r0, [pc, #16]	; (801c540 <HAL_SPDIFRX_MspInit+0x80>)
 801c52e:	f7e6 fc19 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 801c532:	bf00      	nop
 801c534:	3728      	adds	r7, #40	; 0x28
 801c536:	46bd      	mov	sp, r7
 801c538:	bd80      	pop	{r7, pc}
 801c53a:	bf00      	nop
 801c53c:	40023800 	.word	0x40023800
 801c540:	40020c00 	.word	0x40020c00

0801c544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801c544:	b580      	push	{r7, lr}
 801c546:	b08a      	sub	sp, #40	; 0x28
 801c548:	af00      	add	r7, sp, #0
 801c54a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c54c:	f107 0314 	add.w	r3, r7, #20
 801c550:	2200      	movs	r2, #0
 801c552:	601a      	str	r2, [r3, #0]
 801c554:	605a      	str	r2, [r3, #4]
 801c556:	609a      	str	r2, [r3, #8]
 801c558:	60da      	str	r2, [r3, #12]
 801c55a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	4a25      	ldr	r2, [pc, #148]	; (801c5f8 <HAL_SPI_MspInit+0xb4>)
 801c562:	4293      	cmp	r3, r2
 801c564:	d144      	bne.n	801c5f0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801c566:	4b25      	ldr	r3, [pc, #148]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c56a:	4a24      	ldr	r2, [pc, #144]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c56c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c570:	6413      	str	r3, [r2, #64]	; 0x40
 801c572:	4b22      	ldr	r3, [pc, #136]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c57a:	613b      	str	r3, [r7, #16]
 801c57c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801c57e:	4b1f      	ldr	r3, [pc, #124]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c582:	4a1e      	ldr	r2, [pc, #120]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c588:	6313      	str	r3, [r2, #48]	; 0x30
 801c58a:	4b1c      	ldr	r3, [pc, #112]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c58e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c592:	60fb      	str	r3, [r7, #12]
 801c594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c596:	4b19      	ldr	r3, [pc, #100]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c59a:	4a18      	ldr	r2, [pc, #96]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c59c:	f043 0302 	orr.w	r3, r3, #2
 801c5a0:	6313      	str	r3, [r2, #48]	; 0x30
 801c5a2:	4b16      	ldr	r3, [pc, #88]	; (801c5fc <HAL_SPI_MspInit+0xb8>)
 801c5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5a6:	f003 0302 	and.w	r3, r3, #2
 801c5aa:	60bb      	str	r3, [r7, #8]
 801c5ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 801c5ae:	2302      	movs	r3, #2
 801c5b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c5b2:	2302      	movs	r3, #2
 801c5b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801c5be:	2305      	movs	r3, #5
 801c5c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 801c5c2:	f107 0314 	add.w	r3, r7, #20
 801c5c6:	4619      	mov	r1, r3
 801c5c8:	480d      	ldr	r0, [pc, #52]	; (801c600 <HAL_SPI_MspInit+0xbc>)
 801c5ca:	f7e6 fbcb 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 801c5ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801c5d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c5d4:	2302      	movs	r3, #2
 801c5d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c5d8:	2300      	movs	r3, #0
 801c5da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c5dc:	2300      	movs	r3, #0
 801c5de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801c5e0:	2305      	movs	r3, #5
 801c5e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c5e4:	f107 0314 	add.w	r3, r7, #20
 801c5e8:	4619      	mov	r1, r3
 801c5ea:	4806      	ldr	r0, [pc, #24]	; (801c604 <HAL_SPI_MspInit+0xc0>)
 801c5ec:	f7e6 fbba 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 801c5f0:	bf00      	nop
 801c5f2:	3728      	adds	r7, #40	; 0x28
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	bd80      	pop	{r7, pc}
 801c5f8:	40003800 	.word	0x40003800
 801c5fc:	40023800 	.word	0x40023800
 801c600:	40022000 	.word	0x40022000
 801c604:	40020400 	.word	0x40020400

0801c608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801c608:	b480      	push	{r7}
 801c60a:	b087      	sub	sp, #28
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	4a25      	ldr	r2, [pc, #148]	; (801c6ac <HAL_TIM_Base_MspInit+0xa4>)
 801c616:	4293      	cmp	r3, r2
 801c618:	d10c      	bne.n	801c634 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801c61a:	4b25      	ldr	r3, [pc, #148]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c61e:	4a24      	ldr	r2, [pc, #144]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c620:	f043 0301 	orr.w	r3, r3, #1
 801c624:	6453      	str	r3, [r2, #68]	; 0x44
 801c626:	4b22      	ldr	r3, [pc, #136]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c62a:	f003 0301 	and.w	r3, r3, #1
 801c62e:	617b      	str	r3, [r7, #20]
 801c630:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801c632:	e034      	b.n	801c69e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	4a1e      	ldr	r2, [pc, #120]	; (801c6b4 <HAL_TIM_Base_MspInit+0xac>)
 801c63a:	4293      	cmp	r3, r2
 801c63c:	d10c      	bne.n	801c658 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801c63e:	4b1c      	ldr	r3, [pc, #112]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c642:	4a1b      	ldr	r2, [pc, #108]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c644:	f043 0302 	orr.w	r3, r3, #2
 801c648:	6413      	str	r3, [r2, #64]	; 0x40
 801c64a:	4b19      	ldr	r3, [pc, #100]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c64e:	f003 0302 	and.w	r3, r3, #2
 801c652:	613b      	str	r3, [r7, #16]
 801c654:	693b      	ldr	r3, [r7, #16]
}
 801c656:	e022      	b.n	801c69e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	4a16      	ldr	r2, [pc, #88]	; (801c6b8 <HAL_TIM_Base_MspInit+0xb0>)
 801c65e:	4293      	cmp	r3, r2
 801c660:	d10c      	bne.n	801c67c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801c662:	4b13      	ldr	r3, [pc, #76]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c666:	4a12      	ldr	r2, [pc, #72]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c668:	f043 0308 	orr.w	r3, r3, #8
 801c66c:	6413      	str	r3, [r2, #64]	; 0x40
 801c66e:	4b10      	ldr	r3, [pc, #64]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c672:	f003 0308 	and.w	r3, r3, #8
 801c676:	60fb      	str	r3, [r7, #12]
 801c678:	68fb      	ldr	r3, [r7, #12]
}
 801c67a:	e010      	b.n	801c69e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	4a0e      	ldr	r2, [pc, #56]	; (801c6bc <HAL_TIM_Base_MspInit+0xb4>)
 801c682:	4293      	cmp	r3, r2
 801c684:	d10b      	bne.n	801c69e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 801c686:	4b0a      	ldr	r3, [pc, #40]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c68a:	4a09      	ldr	r2, [pc, #36]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c68c:	f043 0302 	orr.w	r3, r3, #2
 801c690:	6453      	str	r3, [r2, #68]	; 0x44
 801c692:	4b07      	ldr	r3, [pc, #28]	; (801c6b0 <HAL_TIM_Base_MspInit+0xa8>)
 801c694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c696:	f003 0302 	and.w	r3, r3, #2
 801c69a:	60bb      	str	r3, [r7, #8]
 801c69c:	68bb      	ldr	r3, [r7, #8]
}
 801c69e:	bf00      	nop
 801c6a0:	371c      	adds	r7, #28
 801c6a2:	46bd      	mov	sp, r7
 801c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6a8:	4770      	bx	lr
 801c6aa:	bf00      	nop
 801c6ac:	40010000 	.word	0x40010000
 801c6b0:	40023800 	.word	0x40023800
 801c6b4:	40000400 	.word	0x40000400
 801c6b8:	40000c00 	.word	0x40000c00
 801c6bc:	40010400 	.word	0x40010400

0801c6c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 801c6c0:	b480      	push	{r7}
 801c6c2:	b085      	sub	sp, #20
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	4a0a      	ldr	r2, [pc, #40]	; (801c6f8 <HAL_TIM_PWM_MspInit+0x38>)
 801c6ce:	4293      	cmp	r3, r2
 801c6d0:	d10b      	bne.n	801c6ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 801c6d2:	4b0a      	ldr	r3, [pc, #40]	; (801c6fc <HAL_TIM_PWM_MspInit+0x3c>)
 801c6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c6d6:	4a09      	ldr	r2, [pc, #36]	; (801c6fc <HAL_TIM_PWM_MspInit+0x3c>)
 801c6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c6dc:	6413      	str	r3, [r2, #64]	; 0x40
 801c6de:	4b07      	ldr	r3, [pc, #28]	; (801c6fc <HAL_TIM_PWM_MspInit+0x3c>)
 801c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c6e6:	60fb      	str	r3, [r7, #12]
 801c6e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 801c6ea:	bf00      	nop
 801c6ec:	3714      	adds	r7, #20
 801c6ee:	46bd      	mov	sp, r7
 801c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6f4:	4770      	bx	lr
 801c6f6:	bf00      	nop
 801c6f8:	40001800 	.word	0x40001800
 801c6fc:	40023800 	.word	0x40023800

0801c700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801c700:	b580      	push	{r7, lr}
 801c702:	b08c      	sub	sp, #48	; 0x30
 801c704:	af00      	add	r7, sp, #0
 801c706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c708:	f107 031c 	add.w	r3, r7, #28
 801c70c:	2200      	movs	r2, #0
 801c70e:	601a      	str	r2, [r3, #0]
 801c710:	605a      	str	r2, [r3, #4]
 801c712:	609a      	str	r2, [r3, #8]
 801c714:	60da      	str	r2, [r3, #12]
 801c716:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	4a44      	ldr	r2, [pc, #272]	; (801c830 <HAL_TIM_MspPostInit+0x130>)
 801c71e:	4293      	cmp	r3, r2
 801c720:	d11d      	bne.n	801c75e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c722:	4b44      	ldr	r3, [pc, #272]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c726:	4a43      	ldr	r2, [pc, #268]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c728:	f043 0301 	orr.w	r3, r3, #1
 801c72c:	6313      	str	r3, [r2, #48]	; 0x30
 801c72e:	4b41      	ldr	r3, [pc, #260]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c732:	f003 0301 	and.w	r3, r3, #1
 801c736:	61bb      	str	r3, [r7, #24]
 801c738:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 801c73a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c73e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c740:	2302      	movs	r3, #2
 801c742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c744:	2300      	movs	r3, #0
 801c746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c748:	2300      	movs	r3, #0
 801c74a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801c74c:	2301      	movs	r3, #1
 801c74e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 801c750:	f107 031c 	add.w	r3, r7, #28
 801c754:	4619      	mov	r1, r3
 801c756:	4838      	ldr	r0, [pc, #224]	; (801c838 <HAL_TIM_MspPostInit+0x138>)
 801c758:	f7e6 fb04 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 801c75c:	e064      	b.n	801c828 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	4a36      	ldr	r2, [pc, #216]	; (801c83c <HAL_TIM_MspPostInit+0x13c>)
 801c764:	4293      	cmp	r3, r2
 801c766:	d11c      	bne.n	801c7a2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c768:	4b32      	ldr	r3, [pc, #200]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c76c:	4a31      	ldr	r2, [pc, #196]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c76e:	f043 0302 	orr.w	r3, r3, #2
 801c772:	6313      	str	r3, [r2, #48]	; 0x30
 801c774:	4b2f      	ldr	r3, [pc, #188]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c778:	f003 0302 	and.w	r3, r3, #2
 801c77c:	617b      	str	r3, [r7, #20]
 801c77e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 801c780:	2310      	movs	r3, #16
 801c782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c784:	2302      	movs	r3, #2
 801c786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c788:	2300      	movs	r3, #0
 801c78a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c78c:	2300      	movs	r3, #0
 801c78e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801c790:	2302      	movs	r3, #2
 801c792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 801c794:	f107 031c 	add.w	r3, r7, #28
 801c798:	4619      	mov	r1, r3
 801c79a:	4829      	ldr	r0, [pc, #164]	; (801c840 <HAL_TIM_MspPostInit+0x140>)
 801c79c:	f7e6 fae2 	bl	8002d64 <HAL_GPIO_Init>
}
 801c7a0:	e042      	b.n	801c828 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	4a27      	ldr	r2, [pc, #156]	; (801c844 <HAL_TIM_MspPostInit+0x144>)
 801c7a8:	4293      	cmp	r3, r2
 801c7aa:	d11c      	bne.n	801c7e6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801c7ac:	4b21      	ldr	r3, [pc, #132]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7b0:	4a20      	ldr	r2, [pc, #128]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c7b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c7b6:	6313      	str	r3, [r2, #48]	; 0x30
 801c7b8:	4b1e      	ldr	r3, [pc, #120]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c7c0:	613b      	str	r3, [r7, #16]
 801c7c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 801c7c4:	2301      	movs	r3, #1
 801c7c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c7c8:	2302      	movs	r3, #2
 801c7ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c7cc:	2300      	movs	r3, #0
 801c7ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c7d0:	2300      	movs	r3, #0
 801c7d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801c7d4:	2302      	movs	r3, #2
 801c7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 801c7d8:	f107 031c 	add.w	r3, r7, #28
 801c7dc:	4619      	mov	r1, r3
 801c7de:	481a      	ldr	r0, [pc, #104]	; (801c848 <HAL_TIM_MspPostInit+0x148>)
 801c7e0:	f7e6 fac0 	bl	8002d64 <HAL_GPIO_Init>
}
 801c7e4:	e020      	b.n	801c828 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	4a18      	ldr	r2, [pc, #96]	; (801c84c <HAL_TIM_MspPostInit+0x14c>)
 801c7ec:	4293      	cmp	r3, r2
 801c7ee:	d11b      	bne.n	801c828 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801c7f0:	4b10      	ldr	r3, [pc, #64]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7f4:	4a0f      	ldr	r2, [pc, #60]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c7fa:	6313      	str	r3, [r2, #48]	; 0x30
 801c7fc:	4b0d      	ldr	r3, [pc, #52]	; (801c834 <HAL_TIM_MspPostInit+0x134>)
 801c7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c804:	60fb      	str	r3, [r7, #12]
 801c806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 801c808:	2340      	movs	r3, #64	; 0x40
 801c80a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c80c:	2302      	movs	r3, #2
 801c80e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c810:	2300      	movs	r3, #0
 801c812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c814:	2300      	movs	r3, #0
 801c816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 801c818:	2309      	movs	r3, #9
 801c81a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 801c81c:	f107 031c 	add.w	r3, r7, #28
 801c820:	4619      	mov	r1, r3
 801c822:	480b      	ldr	r0, [pc, #44]	; (801c850 <HAL_TIM_MspPostInit+0x150>)
 801c824:	f7e6 fa9e 	bl	8002d64 <HAL_GPIO_Init>
}
 801c828:	bf00      	nop
 801c82a:	3730      	adds	r7, #48	; 0x30
 801c82c:	46bd      	mov	sp, r7
 801c82e:	bd80      	pop	{r7, pc}
 801c830:	40010000 	.word	0x40010000
 801c834:	40023800 	.word	0x40023800
 801c838:	40020000 	.word	0x40020000
 801c83c:	40000400 	.word	0x40000400
 801c840:	40020400 	.word	0x40020400
 801c844:	40000c00 	.word	0x40000c00
 801c848:	40022000 	.word	0x40022000
 801c84c:	40001800 	.word	0x40001800
 801c850:	40021c00 	.word	0x40021c00

0801c854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801c854:	b580      	push	{r7, lr}
 801c856:	b08c      	sub	sp, #48	; 0x30
 801c858:	af00      	add	r7, sp, #0
 801c85a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c85c:	f107 031c 	add.w	r3, r7, #28
 801c860:	2200      	movs	r2, #0
 801c862:	601a      	str	r2, [r3, #0]
 801c864:	605a      	str	r2, [r3, #4]
 801c866:	609a      	str	r2, [r3, #8]
 801c868:	60da      	str	r2, [r3, #12]
 801c86a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	4a3c      	ldr	r2, [pc, #240]	; (801c964 <HAL_UART_MspInit+0x110>)
 801c872:	4293      	cmp	r3, r2
 801c874:	d145      	bne.n	801c902 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801c876:	4b3c      	ldr	r3, [pc, #240]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c87a:	4a3b      	ldr	r2, [pc, #236]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c87c:	f043 0310 	orr.w	r3, r3, #16
 801c880:	6453      	str	r3, [r2, #68]	; 0x44
 801c882:	4b39      	ldr	r3, [pc, #228]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c886:	f003 0310 	and.w	r3, r3, #16
 801c88a:	61bb      	str	r3, [r7, #24]
 801c88c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c88e:	4b36      	ldr	r3, [pc, #216]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c892:	4a35      	ldr	r2, [pc, #212]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c894:	f043 0302 	orr.w	r3, r3, #2
 801c898:	6313      	str	r3, [r2, #48]	; 0x30
 801c89a:	4b33      	ldr	r3, [pc, #204]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c89e:	f003 0302 	and.w	r3, r3, #2
 801c8a2:	617b      	str	r3, [r7, #20]
 801c8a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c8a6:	4b30      	ldr	r3, [pc, #192]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8aa:	4a2f      	ldr	r2, [pc, #188]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c8ac:	f043 0301 	orr.w	r3, r3, #1
 801c8b0:	6313      	str	r3, [r2, #48]	; 0x30
 801c8b2:	4b2d      	ldr	r3, [pc, #180]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8b6:	f003 0301 	and.w	r3, r3, #1
 801c8ba:	613b      	str	r3, [r7, #16]
 801c8bc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 801c8be:	2380      	movs	r3, #128	; 0x80
 801c8c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c8c2:	2302      	movs	r3, #2
 801c8c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c8ca:	2300      	movs	r3, #0
 801c8cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801c8ce:	2307      	movs	r3, #7
 801c8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 801c8d2:	f107 031c 	add.w	r3, r7, #28
 801c8d6:	4619      	mov	r1, r3
 801c8d8:	4824      	ldr	r0, [pc, #144]	; (801c96c <HAL_UART_MspInit+0x118>)
 801c8da:	f7e6 fa43 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 801c8de:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c8e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c8e4:	2302      	movs	r3, #2
 801c8e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801c8f0:	2307      	movs	r3, #7
 801c8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 801c8f4:	f107 031c 	add.w	r3, r7, #28
 801c8f8:	4619      	mov	r1, r3
 801c8fa:	481d      	ldr	r0, [pc, #116]	; (801c970 <HAL_UART_MspInit+0x11c>)
 801c8fc:	f7e6 fa32 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 801c900:	e02c      	b.n	801c95c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	4a1b      	ldr	r2, [pc, #108]	; (801c974 <HAL_UART_MspInit+0x120>)
 801c908:	4293      	cmp	r3, r2
 801c90a:	d127      	bne.n	801c95c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 801c90c:	4b16      	ldr	r3, [pc, #88]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c910:	4a15      	ldr	r2, [pc, #84]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c912:	f043 0320 	orr.w	r3, r3, #32
 801c916:	6453      	str	r3, [r2, #68]	; 0x44
 801c918:	4b13      	ldr	r3, [pc, #76]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c91c:	f003 0320 	and.w	r3, r3, #32
 801c920:	60fb      	str	r3, [r7, #12]
 801c922:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801c924:	4b10      	ldr	r3, [pc, #64]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c928:	4a0f      	ldr	r2, [pc, #60]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c92a:	f043 0304 	orr.w	r3, r3, #4
 801c92e:	6313      	str	r3, [r2, #48]	; 0x30
 801c930:	4b0d      	ldr	r3, [pc, #52]	; (801c968 <HAL_UART_MspInit+0x114>)
 801c932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c934:	f003 0304 	and.w	r3, r3, #4
 801c938:	60bb      	str	r3, [r7, #8]
 801c93a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 801c93c:	23c0      	movs	r3, #192	; 0xc0
 801c93e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c940:	2302      	movs	r3, #2
 801c942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c944:	2300      	movs	r3, #0
 801c946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c948:	2303      	movs	r3, #3
 801c94a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801c94c:	2308      	movs	r3, #8
 801c94e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c950:	f107 031c 	add.w	r3, r7, #28
 801c954:	4619      	mov	r1, r3
 801c956:	4808      	ldr	r0, [pc, #32]	; (801c978 <HAL_UART_MspInit+0x124>)
 801c958:	f7e6 fa04 	bl	8002d64 <HAL_GPIO_Init>
}
 801c95c:	bf00      	nop
 801c95e:	3730      	adds	r7, #48	; 0x30
 801c960:	46bd      	mov	sp, r7
 801c962:	bd80      	pop	{r7, pc}
 801c964:	40011000 	.word	0x40011000
 801c968:	40023800 	.word	0x40023800
 801c96c:	40020400 	.word	0x40020400
 801c970:	40020000 	.word	0x40020000
 801c974:	40011400 	.word	0x40011400
 801c978:	40020800 	.word	0x40020800

0801c97c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b08a      	sub	sp, #40	; 0x28
 801c980:	af00      	add	r7, sp, #0
 801c982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	4a2b      	ldr	r2, [pc, #172]	; (801ca38 <HAL_SAI_MspInit+0xbc>)
 801c98a:	4293      	cmp	r3, r2
 801c98c:	d124      	bne.n	801c9d8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 801c98e:	4b2b      	ldr	r3, [pc, #172]	; (801ca3c <HAL_SAI_MspInit+0xc0>)
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d10b      	bne.n	801c9ae <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 801c996:	4b2a      	ldr	r3, [pc, #168]	; (801ca40 <HAL_SAI_MspInit+0xc4>)
 801c998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c99a:	4a29      	ldr	r2, [pc, #164]	; (801ca40 <HAL_SAI_MspInit+0xc4>)
 801c99c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801c9a0:	6453      	str	r3, [r2, #68]	; 0x44
 801c9a2:	4b27      	ldr	r3, [pc, #156]	; (801ca40 <HAL_SAI_MspInit+0xc4>)
 801c9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c9aa:	613b      	str	r3, [r7, #16]
 801c9ac:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 801c9ae:	4b23      	ldr	r3, [pc, #140]	; (801ca3c <HAL_SAI_MspInit+0xc0>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	3301      	adds	r3, #1
 801c9b4:	4a21      	ldr	r2, [pc, #132]	; (801ca3c <HAL_SAI_MspInit+0xc0>)
 801c9b6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 801c9b8:	23f0      	movs	r3, #240	; 0xf0
 801c9ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c9bc:	2302      	movs	r3, #2
 801c9be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 801c9c8:	230a      	movs	r3, #10
 801c9ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801c9cc:	f107 0314 	add.w	r3, r7, #20
 801c9d0:	4619      	mov	r1, r3
 801c9d2:	481c      	ldr	r0, [pc, #112]	; (801ca44 <HAL_SAI_MspInit+0xc8>)
 801c9d4:	f7e6 f9c6 	bl	8002d64 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	4a1a      	ldr	r2, [pc, #104]	; (801ca48 <HAL_SAI_MspInit+0xcc>)
 801c9de:	4293      	cmp	r3, r2
 801c9e0:	d125      	bne.n	801ca2e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 801c9e2:	4b16      	ldr	r3, [pc, #88]	; (801ca3c <HAL_SAI_MspInit+0xc0>)
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d10b      	bne.n	801ca02 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 801c9ea:	4b15      	ldr	r3, [pc, #84]	; (801ca40 <HAL_SAI_MspInit+0xc4>)
 801c9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9ee:	4a14      	ldr	r2, [pc, #80]	; (801ca40 <HAL_SAI_MspInit+0xc4>)
 801c9f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801c9f4:	6453      	str	r3, [r2, #68]	; 0x44
 801c9f6:	4b12      	ldr	r3, [pc, #72]	; (801ca40 <HAL_SAI_MspInit+0xc4>)
 801c9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c9fe:	60fb      	str	r3, [r7, #12]
 801ca00:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 801ca02:	4b0e      	ldr	r3, [pc, #56]	; (801ca3c <HAL_SAI_MspInit+0xc0>)
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	3301      	adds	r3, #1
 801ca08:	4a0c      	ldr	r2, [pc, #48]	; (801ca3c <HAL_SAI_MspInit+0xc0>)
 801ca0a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 801ca0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ca12:	2302      	movs	r3, #2
 801ca14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ca16:	2300      	movs	r3, #0
 801ca18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 801ca1e:	230a      	movs	r3, #10
 801ca20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 801ca22:	f107 0314 	add.w	r3, r7, #20
 801ca26:	4619      	mov	r1, r3
 801ca28:	4808      	ldr	r0, [pc, #32]	; (801ca4c <HAL_SAI_MspInit+0xd0>)
 801ca2a:	f7e6 f99b 	bl	8002d64 <HAL_GPIO_Init>

    }
}
 801ca2e:	bf00      	nop
 801ca30:	3728      	adds	r7, #40	; 0x28
 801ca32:	46bd      	mov	sp, r7
 801ca34:	bd80      	pop	{r7, pc}
 801ca36:	bf00      	nop
 801ca38:	40015c04 	.word	0x40015c04
 801ca3c:	2000ba68 	.word	0x2000ba68
 801ca40:	40023800 	.word	0x40023800
 801ca44:	40022000 	.word	0x40022000
 801ca48:	40015c24 	.word	0x40015c24
 801ca4c:	40021800 	.word	0x40021800

0801ca50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b08c      	sub	sp, #48	; 0x30
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801ca58:	2300      	movs	r3, #0
 801ca5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 801ca60:	2200      	movs	r2, #0
 801ca62:	6879      	ldr	r1, [r7, #4]
 801ca64:	2036      	movs	r0, #54	; 0x36
 801ca66:	f7e4 fbe1 	bl	800122c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 801ca6a:	2036      	movs	r0, #54	; 0x36
 801ca6c:	f7e4 fbfa 	bl	8001264 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801ca70:	4b1f      	ldr	r3, [pc, #124]	; (801caf0 <HAL_InitTick+0xa0>)
 801ca72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca74:	4a1e      	ldr	r2, [pc, #120]	; (801caf0 <HAL_InitTick+0xa0>)
 801ca76:	f043 0310 	orr.w	r3, r3, #16
 801ca7a:	6413      	str	r3, [r2, #64]	; 0x40
 801ca7c:	4b1c      	ldr	r3, [pc, #112]	; (801caf0 <HAL_InitTick+0xa0>)
 801ca7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca80:	f003 0310 	and.w	r3, r3, #16
 801ca84:	60fb      	str	r3, [r7, #12]
 801ca86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801ca88:	f107 0210 	add.w	r2, r7, #16
 801ca8c:	f107 0314 	add.w	r3, r7, #20
 801ca90:	4611      	mov	r1, r2
 801ca92:	4618      	mov	r0, r3
 801ca94:	f7e9 fffa 	bl	8006a8c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 801ca98:	f7e9 ffd0 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 801ca9c:	4603      	mov	r3, r0
 801ca9e:	005b      	lsls	r3, r3, #1
 801caa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caa4:	4a13      	ldr	r2, [pc, #76]	; (801caf4 <HAL_InitTick+0xa4>)
 801caa6:	fba2 2303 	umull	r2, r3, r2, r3
 801caaa:	0c9b      	lsrs	r3, r3, #18
 801caac:	3b01      	subs	r3, #1
 801caae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801cab0:	4b11      	ldr	r3, [pc, #68]	; (801caf8 <HAL_InitTick+0xa8>)
 801cab2:	4a12      	ldr	r2, [pc, #72]	; (801cafc <HAL_InitTick+0xac>)
 801cab4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 801cab6:	4b10      	ldr	r3, [pc, #64]	; (801caf8 <HAL_InitTick+0xa8>)
 801cab8:	f240 32e7 	movw	r2, #999	; 0x3e7
 801cabc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801cabe:	4a0e      	ldr	r2, [pc, #56]	; (801caf8 <HAL_InitTick+0xa8>)
 801cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cac2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801cac4:	4b0c      	ldr	r3, [pc, #48]	; (801caf8 <HAL_InitTick+0xa8>)
 801cac6:	2200      	movs	r2, #0
 801cac8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801caca:	4b0b      	ldr	r3, [pc, #44]	; (801caf8 <HAL_InitTick+0xa8>)
 801cacc:	2200      	movs	r2, #0
 801cace:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801cad0:	4809      	ldr	r0, [pc, #36]	; (801caf8 <HAL_InitTick+0xa8>)
 801cad2:	f7ec fee5 	bl	80098a0 <HAL_TIM_Base_Init>
 801cad6:	4603      	mov	r3, r0
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d104      	bne.n	801cae6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801cadc:	4806      	ldr	r0, [pc, #24]	; (801caf8 <HAL_InitTick+0xa8>)
 801cade:	f7ec ff35 	bl	800994c <HAL_TIM_Base_Start_IT>
 801cae2:	4603      	mov	r3, r0
 801cae4:	e000      	b.n	801cae8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801cae6:	2301      	movs	r3, #1
}
 801cae8:	4618      	mov	r0, r3
 801caea:	3730      	adds	r7, #48	; 0x30
 801caec:	46bd      	mov	sp, r7
 801caee:	bd80      	pop	{r7, pc}
 801caf0:	40023800 	.word	0x40023800
 801caf4:	431bde83 	.word	0x431bde83
 801caf8:	2000c26c 	.word	0x2000c26c
 801cafc:	40001000 	.word	0x40001000

0801cb00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801cb00:	b480      	push	{r7}
 801cb02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801cb04:	bf00      	nop
 801cb06:	46bd      	mov	sp, r7
 801cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb0c:	4770      	bx	lr

0801cb0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801cb0e:	b480      	push	{r7}
 801cb10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801cb12:	e7fe      	b.n	801cb12 <HardFault_Handler+0x4>

0801cb14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801cb14:	b480      	push	{r7}
 801cb16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801cb18:	e7fe      	b.n	801cb18 <MemManage_Handler+0x4>

0801cb1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801cb1a:	b480      	push	{r7}
 801cb1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801cb1e:	e7fe      	b.n	801cb1e <BusFault_Handler+0x4>

0801cb20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801cb20:	b480      	push	{r7}
 801cb22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801cb24:	e7fe      	b.n	801cb24 <UsageFault_Handler+0x4>

0801cb26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801cb26:	b480      	push	{r7}
 801cb28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801cb2a:	bf00      	nop
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb32:	4770      	bx	lr

0801cb34 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 801cb38:	4802      	ldr	r0, [pc, #8]	; (801cb44 <SDMMC1_IRQHandler+0x10>)
 801cb3a:	f7eb fc91 	bl	8008460 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 801cb3e:	bf00      	nop
 801cb40:	bd80      	pop	{r7, pc}
 801cb42:	bf00      	nop
 801cb44:	2000b530 	.word	0x2000b530

0801cb48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801cb48:	b580      	push	{r7, lr}
 801cb4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801cb4c:	4802      	ldr	r0, [pc, #8]	; (801cb58 <TIM6_DAC_IRQHandler+0x10>)
 801cb4e:	f7ec ff52 	bl	80099f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801cb52:	bf00      	nop
 801cb54:	bd80      	pop	{r7, pc}
 801cb56:	bf00      	nop
 801cb58:	2000c26c 	.word	0x2000c26c

0801cb5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 801cb60:	4802      	ldr	r0, [pc, #8]	; (801cb6c <DMA2_Stream3_IRQHandler+0x10>)
 801cb62:	f7e4 fe27 	bl	80017b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801cb66:	bf00      	nop
 801cb68:	bd80      	pop	{r7, pc}
 801cb6a:	bf00      	nop
 801cb6c:	2000b21c 	.word	0x2000b21c

0801cb70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 801cb70:	b580      	push	{r7, lr}
 801cb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801cb74:	4802      	ldr	r0, [pc, #8]	; (801cb80 <OTG_FS_IRQHandler+0x10>)
 801cb76:	f7e6 fe53 	bl	8003820 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801cb7a:	bf00      	nop
 801cb7c:	bd80      	pop	{r7, pc}
 801cb7e:	bf00      	nop
 801cb80:	2000c684 	.word	0x2000c684

0801cb84 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 801cb84:	b580      	push	{r7, lr}
 801cb86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 801cb88:	4802      	ldr	r0, [pc, #8]	; (801cb94 <DMA2_Stream6_IRQHandler+0x10>)
 801cb8a:	f7e4 fe13 	bl	80017b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 801cb8e:	bf00      	nop
 801cb90:	bd80      	pop	{r7, pc}
 801cb92:	bf00      	nop
 801cb94:	2000b27c 	.word	0x2000b27c

0801cb98 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 801cb9c:	4802      	ldr	r0, [pc, #8]	; (801cba8 <LTDC_IRQHandler+0x10>)
 801cb9e:	f7e8 feb9 	bl	8005914 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 801cba2:	bf00      	nop
 801cba4:	bd80      	pop	{r7, pc}
 801cba6:	bf00      	nop
 801cba8:	2000b034 	.word	0x2000b034

0801cbac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 801cbac:	b580      	push	{r7, lr}
 801cbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 801cbb0:	4802      	ldr	r0, [pc, #8]	; (801cbbc <DMA2D_IRQHandler+0x10>)
 801cbb2:	f7e5 fa2c 	bl	800200e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 801cbb6:	bf00      	nop
 801cbb8:	bd80      	pop	{r7, pc}
 801cbba:	bf00      	nop
 801cbbc:	2000aff4 	.word	0x2000aff4

0801cbc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801cbc0:	b480      	push	{r7}
 801cbc2:	af00      	add	r7, sp, #0
	return 1;
 801cbc4:	2301      	movs	r3, #1
}
 801cbc6:	4618      	mov	r0, r3
 801cbc8:	46bd      	mov	sp, r7
 801cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbce:	4770      	bx	lr

0801cbd0 <_kill>:

int _kill(int pid, int sig)
{
 801cbd0:	b580      	push	{r7, lr}
 801cbd2:	b082      	sub	sp, #8
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	6078      	str	r0, [r7, #4]
 801cbd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801cbda:	f008 fb3b 	bl	8025254 <__errno>
 801cbde:	4602      	mov	r2, r0
 801cbe0:	2316      	movs	r3, #22
 801cbe2:	6013      	str	r3, [r2, #0]
	return -1;
 801cbe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cbe8:	4618      	mov	r0, r3
 801cbea:	3708      	adds	r7, #8
 801cbec:	46bd      	mov	sp, r7
 801cbee:	bd80      	pop	{r7, pc}

0801cbf0 <_exit>:

void _exit (int status)
{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b082      	sub	sp, #8
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801cbf8:	f04f 31ff 	mov.w	r1, #4294967295
 801cbfc:	6878      	ldr	r0, [r7, #4]
 801cbfe:	f7ff ffe7 	bl	801cbd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 801cc02:	e7fe      	b.n	801cc02 <_exit+0x12>

0801cc04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	b086      	sub	sp, #24
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	60f8      	str	r0, [r7, #12]
 801cc0c:	60b9      	str	r1, [r7, #8]
 801cc0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801cc10:	2300      	movs	r3, #0
 801cc12:	617b      	str	r3, [r7, #20]
 801cc14:	e00a      	b.n	801cc2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801cc16:	f3af 8000 	nop.w
 801cc1a:	4601      	mov	r1, r0
 801cc1c:	68bb      	ldr	r3, [r7, #8]
 801cc1e:	1c5a      	adds	r2, r3, #1
 801cc20:	60ba      	str	r2, [r7, #8]
 801cc22:	b2ca      	uxtb	r2, r1
 801cc24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801cc26:	697b      	ldr	r3, [r7, #20]
 801cc28:	3301      	adds	r3, #1
 801cc2a:	617b      	str	r3, [r7, #20]
 801cc2c:	697a      	ldr	r2, [r7, #20]
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	429a      	cmp	r2, r3
 801cc32:	dbf0      	blt.n	801cc16 <_read+0x12>
	}

return len;
 801cc34:	687b      	ldr	r3, [r7, #4]
}
 801cc36:	4618      	mov	r0, r3
 801cc38:	3718      	adds	r7, #24
 801cc3a:	46bd      	mov	sp, r7
 801cc3c:	bd80      	pop	{r7, pc}

0801cc3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801cc3e:	b580      	push	{r7, lr}
 801cc40:	b086      	sub	sp, #24
 801cc42:	af00      	add	r7, sp, #0
 801cc44:	60f8      	str	r0, [r7, #12]
 801cc46:	60b9      	str	r1, [r7, #8]
 801cc48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	617b      	str	r3, [r7, #20]
 801cc4e:	e009      	b.n	801cc64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801cc50:	68bb      	ldr	r3, [r7, #8]
 801cc52:	1c5a      	adds	r2, r3, #1
 801cc54:	60ba      	str	r2, [r7, #8]
 801cc56:	781b      	ldrb	r3, [r3, #0]
 801cc58:	4618      	mov	r0, r3
 801cc5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801cc5e:	697b      	ldr	r3, [r7, #20]
 801cc60:	3301      	adds	r3, #1
 801cc62:	617b      	str	r3, [r7, #20]
 801cc64:	697a      	ldr	r2, [r7, #20]
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	429a      	cmp	r2, r3
 801cc6a:	dbf1      	blt.n	801cc50 <_write+0x12>
	}
	return len;
 801cc6c:	687b      	ldr	r3, [r7, #4]
}
 801cc6e:	4618      	mov	r0, r3
 801cc70:	3718      	adds	r7, #24
 801cc72:	46bd      	mov	sp, r7
 801cc74:	bd80      	pop	{r7, pc}

0801cc76 <_close>:

int _close(int file)
{
 801cc76:	b480      	push	{r7}
 801cc78:	b083      	sub	sp, #12
 801cc7a:	af00      	add	r7, sp, #0
 801cc7c:	6078      	str	r0, [r7, #4]
	return -1;
 801cc7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cc82:	4618      	mov	r0, r3
 801cc84:	370c      	adds	r7, #12
 801cc86:	46bd      	mov	sp, r7
 801cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc8c:	4770      	bx	lr

0801cc8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801cc8e:	b480      	push	{r7}
 801cc90:	b083      	sub	sp, #12
 801cc92:	af00      	add	r7, sp, #0
 801cc94:	6078      	str	r0, [r7, #4]
 801cc96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801cc98:	683b      	ldr	r3, [r7, #0]
 801cc9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801cc9e:	605a      	str	r2, [r3, #4]
	return 0;
 801cca0:	2300      	movs	r3, #0
}
 801cca2:	4618      	mov	r0, r3
 801cca4:	370c      	adds	r7, #12
 801cca6:	46bd      	mov	sp, r7
 801cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccac:	4770      	bx	lr

0801ccae <_isatty>:

int _isatty(int file)
{
 801ccae:	b480      	push	{r7}
 801ccb0:	b083      	sub	sp, #12
 801ccb2:	af00      	add	r7, sp, #0
 801ccb4:	6078      	str	r0, [r7, #4]
	return 1;
 801ccb6:	2301      	movs	r3, #1
}
 801ccb8:	4618      	mov	r0, r3
 801ccba:	370c      	adds	r7, #12
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccc2:	4770      	bx	lr

0801ccc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801ccc4:	b480      	push	{r7}
 801ccc6:	b085      	sub	sp, #20
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	60f8      	str	r0, [r7, #12]
 801cccc:	60b9      	str	r1, [r7, #8]
 801ccce:	607a      	str	r2, [r7, #4]
	return 0;
 801ccd0:	2300      	movs	r3, #0
}
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	3714      	adds	r7, #20
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccdc:	4770      	bx	lr
	...

0801cce0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b084      	sub	sp, #16
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801cce8:	4b11      	ldr	r3, [pc, #68]	; (801cd30 <_sbrk+0x50>)
 801ccea:	681b      	ldr	r3, [r3, #0]
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d102      	bne.n	801ccf6 <_sbrk+0x16>
		heap_end = &end;
 801ccf0:	4b0f      	ldr	r3, [pc, #60]	; (801cd30 <_sbrk+0x50>)
 801ccf2:	4a10      	ldr	r2, [pc, #64]	; (801cd34 <_sbrk+0x54>)
 801ccf4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801ccf6:	4b0e      	ldr	r3, [pc, #56]	; (801cd30 <_sbrk+0x50>)
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801ccfc:	4b0c      	ldr	r3, [pc, #48]	; (801cd30 <_sbrk+0x50>)
 801ccfe:	681a      	ldr	r2, [r3, #0]
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	4413      	add	r3, r2
 801cd04:	466a      	mov	r2, sp
 801cd06:	4293      	cmp	r3, r2
 801cd08:	d907      	bls.n	801cd1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801cd0a:	f008 faa3 	bl	8025254 <__errno>
 801cd0e:	4602      	mov	r2, r0
 801cd10:	230c      	movs	r3, #12
 801cd12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 801cd14:	f04f 33ff 	mov.w	r3, #4294967295
 801cd18:	e006      	b.n	801cd28 <_sbrk+0x48>
	}

	heap_end += incr;
 801cd1a:	4b05      	ldr	r3, [pc, #20]	; (801cd30 <_sbrk+0x50>)
 801cd1c:	681a      	ldr	r2, [r3, #0]
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	4413      	add	r3, r2
 801cd22:	4a03      	ldr	r2, [pc, #12]	; (801cd30 <_sbrk+0x50>)
 801cd24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801cd26:	68fb      	ldr	r3, [r7, #12]
}
 801cd28:	4618      	mov	r0, r3
 801cd2a:	3710      	adds	r7, #16
 801cd2c:	46bd      	mov	sp, r7
 801cd2e:	bd80      	pop	{r7, pc}
 801cd30:	2000ba6c 	.word	0x2000ba6c
 801cd34:	2000c950 	.word	0x2000c950

0801cd38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801cd38:	b480      	push	{r7}
 801cd3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801cd3c:	4b15      	ldr	r3, [pc, #84]	; (801cd94 <SystemInit+0x5c>)
 801cd3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd42:	4a14      	ldr	r2, [pc, #80]	; (801cd94 <SystemInit+0x5c>)
 801cd44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801cd48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801cd4c:	4b12      	ldr	r3, [pc, #72]	; (801cd98 <SystemInit+0x60>)
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	4a11      	ldr	r2, [pc, #68]	; (801cd98 <SystemInit+0x60>)
 801cd52:	f043 0301 	orr.w	r3, r3, #1
 801cd56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801cd58:	4b0f      	ldr	r3, [pc, #60]	; (801cd98 <SystemInit+0x60>)
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801cd5e:	4b0e      	ldr	r3, [pc, #56]	; (801cd98 <SystemInit+0x60>)
 801cd60:	681a      	ldr	r2, [r3, #0]
 801cd62:	490d      	ldr	r1, [pc, #52]	; (801cd98 <SystemInit+0x60>)
 801cd64:	4b0d      	ldr	r3, [pc, #52]	; (801cd9c <SystemInit+0x64>)
 801cd66:	4013      	ands	r3, r2
 801cd68:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801cd6a:	4b0b      	ldr	r3, [pc, #44]	; (801cd98 <SystemInit+0x60>)
 801cd6c:	4a0c      	ldr	r2, [pc, #48]	; (801cda0 <SystemInit+0x68>)
 801cd6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801cd70:	4b09      	ldr	r3, [pc, #36]	; (801cd98 <SystemInit+0x60>)
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	4a08      	ldr	r2, [pc, #32]	; (801cd98 <SystemInit+0x60>)
 801cd76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801cd7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801cd7c:	4b06      	ldr	r3, [pc, #24]	; (801cd98 <SystemInit+0x60>)
 801cd7e:	2200      	movs	r2, #0
 801cd80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801cd82:	4b04      	ldr	r3, [pc, #16]	; (801cd94 <SystemInit+0x5c>)
 801cd84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801cd88:	609a      	str	r2, [r3, #8]
#endif
}
 801cd8a:	bf00      	nop
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd92:	4770      	bx	lr
 801cd94:	e000ed00 	.word	0xe000ed00
 801cd98:	40023800 	.word	0x40023800
 801cd9c:	fef6ffff 	.word	0xfef6ffff
 801cda0:	24003010 	.word	0x24003010

0801cda4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801cda8:	2201      	movs	r2, #1
 801cdaa:	490e      	ldr	r1, [pc, #56]	; (801cde4 <MX_USB_HOST_Init+0x40>)
 801cdac:	480e      	ldr	r0, [pc, #56]	; (801cde8 <MX_USB_HOST_Init+0x44>)
 801cdae:	f7f0 fb4b 	bl	800d448 <USBH_Init>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d001      	beq.n	801cdbc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801cdb8:	f7fe fd28 	bl	801b80c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801cdbc:	490b      	ldr	r1, [pc, #44]	; (801cdec <MX_USB_HOST_Init+0x48>)
 801cdbe:	480a      	ldr	r0, [pc, #40]	; (801cde8 <MX_USB_HOST_Init+0x44>)
 801cdc0:	f7f0 fbdd 	bl	800d57e <USBH_RegisterClass>
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d001      	beq.n	801cdce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801cdca:	f7fe fd1f 	bl	801b80c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801cdce:	4806      	ldr	r0, [pc, #24]	; (801cde8 <MX_USB_HOST_Init+0x44>)
 801cdd0:	f7f0 fc62 	bl	800d698 <USBH_Start>
 801cdd4:	4603      	mov	r3, r0
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d001      	beq.n	801cdde <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801cdda:	f7fe fd17 	bl	801b80c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801cdde:	bf00      	nop
 801cde0:	bd80      	pop	{r7, pc}
 801cde2:	bf00      	nop
 801cde4:	0801cdf1 	.word	0x0801cdf1
 801cde8:	2000c2ac 	.word	0x2000c2ac
 801cdec:	2000002c 	.word	0x2000002c

0801cdf0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801cdf0:	b480      	push	{r7}
 801cdf2:	b083      	sub	sp, #12
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	6078      	str	r0, [r7, #4]
 801cdf8:	460b      	mov	r3, r1
 801cdfa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801cdfc:	78fb      	ldrb	r3, [r7, #3]
 801cdfe:	3b01      	subs	r3, #1
 801ce00:	2b04      	cmp	r3, #4
 801ce02:	d819      	bhi.n	801ce38 <USBH_UserProcess+0x48>
 801ce04:	a201      	add	r2, pc, #4	; (adr r2, 801ce0c <USBH_UserProcess+0x1c>)
 801ce06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce0a:	bf00      	nop
 801ce0c:	0801ce39 	.word	0x0801ce39
 801ce10:	0801ce29 	.word	0x0801ce29
 801ce14:	0801ce39 	.word	0x0801ce39
 801ce18:	0801ce31 	.word	0x0801ce31
 801ce1c:	0801ce21 	.word	0x0801ce21
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801ce20:	4b09      	ldr	r3, [pc, #36]	; (801ce48 <USBH_UserProcess+0x58>)
 801ce22:	2203      	movs	r2, #3
 801ce24:	701a      	strb	r2, [r3, #0]
  break;
 801ce26:	e008      	b.n	801ce3a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801ce28:	4b07      	ldr	r3, [pc, #28]	; (801ce48 <USBH_UserProcess+0x58>)
 801ce2a:	2202      	movs	r2, #2
 801ce2c:	701a      	strb	r2, [r3, #0]
  break;
 801ce2e:	e004      	b.n	801ce3a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801ce30:	4b05      	ldr	r3, [pc, #20]	; (801ce48 <USBH_UserProcess+0x58>)
 801ce32:	2201      	movs	r2, #1
 801ce34:	701a      	strb	r2, [r3, #0]
  break;
 801ce36:	e000      	b.n	801ce3a <USBH_UserProcess+0x4a>

  default:
  break;
 801ce38:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801ce3a:	bf00      	nop
 801ce3c:	370c      	adds	r7, #12
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce44:	4770      	bx	lr
 801ce46:	bf00      	nop
 801ce48:	2000ba70 	.word	0x2000ba70

0801ce4c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b08a      	sub	sp, #40	; 0x28
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ce54:	f107 0314 	add.w	r3, r7, #20
 801ce58:	2200      	movs	r2, #0
 801ce5a:	601a      	str	r2, [r3, #0]
 801ce5c:	605a      	str	r2, [r3, #4]
 801ce5e:	609a      	str	r2, [r3, #8]
 801ce60:	60da      	str	r2, [r3, #12]
 801ce62:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ce6c:	d13c      	bne.n	801cee8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ce6e:	4b20      	ldr	r3, [pc, #128]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801ce70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ce72:	4a1f      	ldr	r2, [pc, #124]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801ce74:	f043 0301 	orr.w	r3, r3, #1
 801ce78:	6313      	str	r3, [r2, #48]	; 0x30
 801ce7a:	4b1d      	ldr	r3, [pc, #116]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801ce7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ce7e:	f003 0301 	and.w	r3, r3, #1
 801ce82:	613b      	str	r3, [r7, #16]
 801ce84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801ce86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801ce8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ce8c:	2302      	movs	r3, #2
 801ce8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ce90:	2300      	movs	r3, #0
 801ce92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ce94:	2303      	movs	r3, #3
 801ce96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801ce98:	230a      	movs	r3, #10
 801ce9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ce9c:	f107 0314 	add.w	r3, r7, #20
 801cea0:	4619      	mov	r1, r3
 801cea2:	4814      	ldr	r0, [pc, #80]	; (801cef4 <HAL_HCD_MspInit+0xa8>)
 801cea4:	f7e5 ff5e 	bl	8002d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801cea8:	4b11      	ldr	r3, [pc, #68]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801ceaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ceac:	4a10      	ldr	r2, [pc, #64]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801ceae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ceb2:	6353      	str	r3, [r2, #52]	; 0x34
 801ceb4:	4b0e      	ldr	r3, [pc, #56]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801ceb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ceb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cebc:	60fb      	str	r3, [r7, #12]
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	4b0b      	ldr	r3, [pc, #44]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801cec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cec4:	4a0a      	ldr	r2, [pc, #40]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801cec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ceca:	6453      	str	r3, [r2, #68]	; 0x44
 801cecc:	4b08      	ldr	r3, [pc, #32]	; (801cef0 <HAL_HCD_MspInit+0xa4>)
 801cece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ced0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ced4:	60bb      	str	r3, [r7, #8]
 801ced6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801ced8:	2200      	movs	r2, #0
 801ceda:	2105      	movs	r1, #5
 801cedc:	2043      	movs	r0, #67	; 0x43
 801cede:	f7e4 f9a5 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801cee2:	2043      	movs	r0, #67	; 0x43
 801cee4:	f7e4 f9be 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801cee8:	bf00      	nop
 801ceea:	3728      	adds	r7, #40	; 0x28
 801ceec:	46bd      	mov	sp, r7
 801ceee:	bd80      	pop	{r7, pc}
 801cef0:	40023800 	.word	0x40023800
 801cef4:	40020000 	.word	0x40020000

0801cef8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801cef8:	b580      	push	{r7, lr}
 801cefa:	b082      	sub	sp, #8
 801cefc:	af00      	add	r7, sp, #0
 801cefe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cf06:	4618      	mov	r0, r3
 801cf08:	f7f0 ff19 	bl	800dd3e <USBH_LL_IncTimer>
}
 801cf0c:	bf00      	nop
 801cf0e:	3708      	adds	r7, #8
 801cf10:	46bd      	mov	sp, r7
 801cf12:	bd80      	pop	{r7, pc}

0801cf14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	b082      	sub	sp, #8
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cf22:	4618      	mov	r0, r3
 801cf24:	f7f0 ff5e 	bl	800dde4 <USBH_LL_Connect>
}
 801cf28:	bf00      	nop
 801cf2a:	3708      	adds	r7, #8
 801cf2c:	46bd      	mov	sp, r7
 801cf2e:	bd80      	pop	{r7, pc}

0801cf30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801cf30:	b580      	push	{r7, lr}
 801cf32:	b082      	sub	sp, #8
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f7f0 ff84 	bl	800de4c <USBH_LL_Disconnect>
}
 801cf44:	bf00      	nop
 801cf46:	3708      	adds	r7, #8
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	bd80      	pop	{r7, pc}

0801cf4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b082      	sub	sp, #8
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	6078      	str	r0, [r7, #4]
 801cf54:	460b      	mov	r3, r1
 801cf56:	70fb      	strb	r3, [r7, #3]
 801cf58:	4613      	mov	r3, r2
 801cf5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cf62:	4618      	mov	r0, r3
 801cf64:	f7f0 ffc2 	bl	800deec <USBH_LL_NotifyURBChange>
#endif
}
 801cf68:	bf00      	nop
 801cf6a:	3708      	adds	r7, #8
 801cf6c:	46bd      	mov	sp, r7
 801cf6e:	bd80      	pop	{r7, pc}

0801cf70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b082      	sub	sp, #8
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cf7e:	4618      	mov	r0, r3
 801cf80:	f7f0 ff07 	bl	800dd92 <USBH_LL_PortEnabled>
} 
 801cf84:	bf00      	nop
 801cf86:	3708      	adds	r7, #8
 801cf88:	46bd      	mov	sp, r7
 801cf8a:	bd80      	pop	{r7, pc}

0801cf8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b082      	sub	sp, #8
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	f7f0 ff07 	bl	800ddae <USBH_LL_PortDisabled>
} 
 801cfa0:	bf00      	nop
 801cfa2:	3708      	adds	r7, #8
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bd80      	pop	{r7, pc}

0801cfa8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b082      	sub	sp, #8
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801cfb6:	2b01      	cmp	r3, #1
 801cfb8:	d12a      	bne.n	801d010 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801cfba:	4a18      	ldr	r2, [pc, #96]	; (801d01c <USBH_LL_Init+0x74>)
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	4a15      	ldr	r2, [pc, #84]	; (801d01c <USBH_LL_Init+0x74>)
 801cfc6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801cfca:	4b14      	ldr	r3, [pc, #80]	; (801d01c <USBH_LL_Init+0x74>)
 801cfcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801cfd0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801cfd2:	4b12      	ldr	r3, [pc, #72]	; (801d01c <USBH_LL_Init+0x74>)
 801cfd4:	2208      	movs	r2, #8
 801cfd6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801cfd8:	4b10      	ldr	r3, [pc, #64]	; (801d01c <USBH_LL_Init+0x74>)
 801cfda:	2203      	movs	r2, #3
 801cfdc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801cfde:	4b0f      	ldr	r3, [pc, #60]	; (801d01c <USBH_LL_Init+0x74>)
 801cfe0:	2200      	movs	r2, #0
 801cfe2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801cfe4:	4b0d      	ldr	r3, [pc, #52]	; (801d01c <USBH_LL_Init+0x74>)
 801cfe6:	2202      	movs	r2, #2
 801cfe8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801cfea:	4b0c      	ldr	r3, [pc, #48]	; (801d01c <USBH_LL_Init+0x74>)
 801cfec:	2200      	movs	r2, #0
 801cfee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801cff0:	480a      	ldr	r0, [pc, #40]	; (801d01c <USBH_LL_Init+0x74>)
 801cff2:	f7e6 f99c 	bl	800332e <HAL_HCD_Init>
 801cff6:	4603      	mov	r3, r0
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d001      	beq.n	801d000 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801cffc:	f7fe fc06 	bl	801b80c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801d000:	4806      	ldr	r0, [pc, #24]	; (801d01c <USBH_LL_Init+0x74>)
 801d002:	f7e6 fd8b 	bl	8003b1c <HAL_HCD_GetCurrentFrame>
 801d006:	4603      	mov	r3, r0
 801d008:	4619      	mov	r1, r3
 801d00a:	6878      	ldr	r0, [r7, #4]
 801d00c:	f7f0 fe88 	bl	800dd20 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801d010:	2300      	movs	r3, #0
}
 801d012:	4618      	mov	r0, r3
 801d014:	3708      	adds	r7, #8
 801d016:	46bd      	mov	sp, r7
 801d018:	bd80      	pop	{r7, pc}
 801d01a:	bf00      	nop
 801d01c:	2000c684 	.word	0x2000c684

0801d020 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801d020:	b580      	push	{r7, lr}
 801d022:	b084      	sub	sp, #16
 801d024:	af00      	add	r7, sp, #0
 801d026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d028:	2300      	movs	r3, #0
 801d02a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d02c:	2300      	movs	r3, #0
 801d02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d036:	4618      	mov	r0, r3
 801d038:	f7e6 fcf8 	bl	8003a2c <HAL_HCD_Start>
 801d03c:	4603      	mov	r3, r0
 801d03e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d040:	7bfb      	ldrb	r3, [r7, #15]
 801d042:	4618      	mov	r0, r3
 801d044:	f000 f95c 	bl	801d300 <USBH_Get_USB_Status>
 801d048:	4603      	mov	r3, r0
 801d04a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d04c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d04e:	4618      	mov	r0, r3
 801d050:	3710      	adds	r7, #16
 801d052:	46bd      	mov	sp, r7
 801d054:	bd80      	pop	{r7, pc}

0801d056 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801d056:	b580      	push	{r7, lr}
 801d058:	b084      	sub	sp, #16
 801d05a:	af00      	add	r7, sp, #0
 801d05c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d05e:	2300      	movs	r3, #0
 801d060:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d062:	2300      	movs	r3, #0
 801d064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d06c:	4618      	mov	r0, r3
 801d06e:	f7e6 fd00 	bl	8003a72 <HAL_HCD_Stop>
 801d072:	4603      	mov	r3, r0
 801d074:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d076:	7bfb      	ldrb	r3, [r7, #15]
 801d078:	4618      	mov	r0, r3
 801d07a:	f000 f941 	bl	801d300 <USBH_Get_USB_Status>
 801d07e:	4603      	mov	r3, r0
 801d080:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801d082:	7bbb      	ldrb	r3, [r7, #14]
}
 801d084:	4618      	mov	r0, r3
 801d086:	3710      	adds	r7, #16
 801d088:	46bd      	mov	sp, r7
 801d08a:	bd80      	pop	{r7, pc}

0801d08c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801d08c:	b580      	push	{r7, lr}
 801d08e:	b084      	sub	sp, #16
 801d090:	af00      	add	r7, sp, #0
 801d092:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801d094:	2301      	movs	r3, #1
 801d096:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d09e:	4618      	mov	r0, r3
 801d0a0:	f7e6 fd4a 	bl	8003b38 <HAL_HCD_GetCurrentSpeed>
 801d0a4:	4603      	mov	r3, r0
 801d0a6:	2b01      	cmp	r3, #1
 801d0a8:	d007      	beq.n	801d0ba <USBH_LL_GetSpeed+0x2e>
 801d0aa:	2b01      	cmp	r3, #1
 801d0ac:	d302      	bcc.n	801d0b4 <USBH_LL_GetSpeed+0x28>
 801d0ae:	2b02      	cmp	r3, #2
 801d0b0:	d006      	beq.n	801d0c0 <USBH_LL_GetSpeed+0x34>
 801d0b2:	e008      	b.n	801d0c6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801d0b4:	2300      	movs	r3, #0
 801d0b6:	73fb      	strb	r3, [r7, #15]
    break;
 801d0b8:	e008      	b.n	801d0cc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801d0ba:	2301      	movs	r3, #1
 801d0bc:	73fb      	strb	r3, [r7, #15]
    break;
 801d0be:	e005      	b.n	801d0cc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 801d0c0:	2302      	movs	r3, #2
 801d0c2:	73fb      	strb	r3, [r7, #15]
    break;
 801d0c4:	e002      	b.n	801d0cc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801d0c6:	2301      	movs	r3, #1
 801d0c8:	73fb      	strb	r3, [r7, #15]
    break;
 801d0ca:	bf00      	nop
  }
  return  speed;
 801d0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	3710      	adds	r7, #16
 801d0d2:	46bd      	mov	sp, r7
 801d0d4:	bd80      	pop	{r7, pc}

0801d0d6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801d0d6:	b580      	push	{r7, lr}
 801d0d8:	b084      	sub	sp, #16
 801d0da:	af00      	add	r7, sp, #0
 801d0dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d0de:	2300      	movs	r3, #0
 801d0e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d0e2:	2300      	movs	r3, #0
 801d0e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d0ec:	4618      	mov	r0, r3
 801d0ee:	f7e6 fcdd 	bl	8003aac <HAL_HCD_ResetPort>
 801d0f2:	4603      	mov	r3, r0
 801d0f4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801d0f6:	7bfb      	ldrb	r3, [r7, #15]
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f000 f901 	bl	801d300 <USBH_Get_USB_Status>
 801d0fe:	4603      	mov	r3, r0
 801d100:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d102:	7bbb      	ldrb	r3, [r7, #14]
}
 801d104:	4618      	mov	r0, r3
 801d106:	3710      	adds	r7, #16
 801d108:	46bd      	mov	sp, r7
 801d10a:	bd80      	pop	{r7, pc}

0801d10c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b082      	sub	sp, #8
 801d110:	af00      	add	r7, sp, #0
 801d112:	6078      	str	r0, [r7, #4]
 801d114:	460b      	mov	r3, r1
 801d116:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d11e:	78fa      	ldrb	r2, [r7, #3]
 801d120:	4611      	mov	r1, r2
 801d122:	4618      	mov	r0, r3
 801d124:	f7e6 fce5 	bl	8003af2 <HAL_HCD_HC_GetXferCount>
 801d128:	4603      	mov	r3, r0
}
 801d12a:	4618      	mov	r0, r3
 801d12c:	3708      	adds	r7, #8
 801d12e:	46bd      	mov	sp, r7
 801d130:	bd80      	pop	{r7, pc}

0801d132 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801d132:	b590      	push	{r4, r7, lr}
 801d134:	b089      	sub	sp, #36	; 0x24
 801d136:	af04      	add	r7, sp, #16
 801d138:	6078      	str	r0, [r7, #4]
 801d13a:	4608      	mov	r0, r1
 801d13c:	4611      	mov	r1, r2
 801d13e:	461a      	mov	r2, r3
 801d140:	4603      	mov	r3, r0
 801d142:	70fb      	strb	r3, [r7, #3]
 801d144:	460b      	mov	r3, r1
 801d146:	70bb      	strb	r3, [r7, #2]
 801d148:	4613      	mov	r3, r2
 801d14a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d14c:	2300      	movs	r3, #0
 801d14e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d150:	2300      	movs	r3, #0
 801d152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801d15a:	787c      	ldrb	r4, [r7, #1]
 801d15c:	78ba      	ldrb	r2, [r7, #2]
 801d15e:	78f9      	ldrb	r1, [r7, #3]
 801d160:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d162:	9302      	str	r3, [sp, #8]
 801d164:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d168:	9301      	str	r3, [sp, #4]
 801d16a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d16e:	9300      	str	r3, [sp, #0]
 801d170:	4623      	mov	r3, r4
 801d172:	f7e6 f932 	bl	80033da <HAL_HCD_HC_Init>
 801d176:	4603      	mov	r3, r0
 801d178:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801d17a:	7bfb      	ldrb	r3, [r7, #15]
 801d17c:	4618      	mov	r0, r3
 801d17e:	f000 f8bf 	bl	801d300 <USBH_Get_USB_Status>
 801d182:	4603      	mov	r3, r0
 801d184:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d186:	7bbb      	ldrb	r3, [r7, #14]
}
 801d188:	4618      	mov	r0, r3
 801d18a:	3714      	adds	r7, #20
 801d18c:	46bd      	mov	sp, r7
 801d18e:	bd90      	pop	{r4, r7, pc}

0801d190 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d190:	b580      	push	{r7, lr}
 801d192:	b084      	sub	sp, #16
 801d194:	af00      	add	r7, sp, #0
 801d196:	6078      	str	r0, [r7, #4]
 801d198:	460b      	mov	r3, r1
 801d19a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d19c:	2300      	movs	r3, #0
 801d19e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d1a0:	2300      	movs	r3, #0
 801d1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d1aa:	78fa      	ldrb	r2, [r7, #3]
 801d1ac:	4611      	mov	r1, r2
 801d1ae:	4618      	mov	r0, r3
 801d1b0:	f7e6 f9ab 	bl	800350a <HAL_HCD_HC_Halt>
 801d1b4:	4603      	mov	r3, r0
 801d1b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801d1b8:	7bfb      	ldrb	r3, [r7, #15]
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	f000 f8a0 	bl	801d300 <USBH_Get_USB_Status>
 801d1c0:	4603      	mov	r3, r0
 801d1c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	3710      	adds	r7, #16
 801d1ca:	46bd      	mov	sp, r7
 801d1cc:	bd80      	pop	{r7, pc}

0801d1ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801d1ce:	b590      	push	{r4, r7, lr}
 801d1d0:	b089      	sub	sp, #36	; 0x24
 801d1d2:	af04      	add	r7, sp, #16
 801d1d4:	6078      	str	r0, [r7, #4]
 801d1d6:	4608      	mov	r0, r1
 801d1d8:	4611      	mov	r1, r2
 801d1da:	461a      	mov	r2, r3
 801d1dc:	4603      	mov	r3, r0
 801d1de:	70fb      	strb	r3, [r7, #3]
 801d1e0:	460b      	mov	r3, r1
 801d1e2:	70bb      	strb	r3, [r7, #2]
 801d1e4:	4613      	mov	r3, r2
 801d1e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d1ec:	2300      	movs	r3, #0
 801d1ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801d1f6:	787c      	ldrb	r4, [r7, #1]
 801d1f8:	78ba      	ldrb	r2, [r7, #2]
 801d1fa:	78f9      	ldrb	r1, [r7, #3]
 801d1fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801d200:	9303      	str	r3, [sp, #12]
 801d202:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d204:	9302      	str	r3, [sp, #8]
 801d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d208:	9301      	str	r3, [sp, #4]
 801d20a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d20e:	9300      	str	r3, [sp, #0]
 801d210:	4623      	mov	r3, r4
 801d212:	f7e6 f99d 	bl	8003550 <HAL_HCD_HC_SubmitRequest>
 801d216:	4603      	mov	r3, r0
 801d218:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801d21a:	7bfb      	ldrb	r3, [r7, #15]
 801d21c:	4618      	mov	r0, r3
 801d21e:	f000 f86f 	bl	801d300 <USBH_Get_USB_Status>
 801d222:	4603      	mov	r3, r0
 801d224:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801d226:	7bbb      	ldrb	r3, [r7, #14]
}
 801d228:	4618      	mov	r0, r3
 801d22a:	3714      	adds	r7, #20
 801d22c:	46bd      	mov	sp, r7
 801d22e:	bd90      	pop	{r4, r7, pc}

0801d230 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801d230:	b580      	push	{r7, lr}
 801d232:	b082      	sub	sp, #8
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
 801d238:	460b      	mov	r3, r1
 801d23a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d242:	78fa      	ldrb	r2, [r7, #3]
 801d244:	4611      	mov	r1, r2
 801d246:	4618      	mov	r0, r3
 801d248:	f7e6 fc3e 	bl	8003ac8 <HAL_HCD_HC_GetURBState>
 801d24c:	4603      	mov	r3, r0
}
 801d24e:	4618      	mov	r0, r3
 801d250:	3708      	adds	r7, #8
 801d252:	46bd      	mov	sp, r7
 801d254:	bd80      	pop	{r7, pc}

0801d256 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801d256:	b580      	push	{r7, lr}
 801d258:	b082      	sub	sp, #8
 801d25a:	af00      	add	r7, sp, #0
 801d25c:	6078      	str	r0, [r7, #4]
 801d25e:	460b      	mov	r3, r1
 801d260:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801d268:	2b01      	cmp	r3, #1
 801d26a:	d103      	bne.n	801d274 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801d26c:	78fb      	ldrb	r3, [r7, #3]
 801d26e:	4618      	mov	r0, r3
 801d270:	f000 f872 	bl	801d358 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801d274:	20c8      	movs	r0, #200	; 0xc8
 801d276:	f7e3 fc6b 	bl	8000b50 <HAL_Delay>
  return USBH_OK;
 801d27a:	2300      	movs	r3, #0
}
 801d27c:	4618      	mov	r0, r3
 801d27e:	3708      	adds	r7, #8
 801d280:	46bd      	mov	sp, r7
 801d282:	bd80      	pop	{r7, pc}

0801d284 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801d284:	b480      	push	{r7}
 801d286:	b085      	sub	sp, #20
 801d288:	af00      	add	r7, sp, #0
 801d28a:	6078      	str	r0, [r7, #4]
 801d28c:	460b      	mov	r3, r1
 801d28e:	70fb      	strb	r3, [r7, #3]
 801d290:	4613      	mov	r3, r2
 801d292:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801d29a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801d29c:	78fa      	ldrb	r2, [r7, #3]
 801d29e:	68f9      	ldr	r1, [r7, #12]
 801d2a0:	4613      	mov	r3, r2
 801d2a2:	009b      	lsls	r3, r3, #2
 801d2a4:	4413      	add	r3, r2
 801d2a6:	00db      	lsls	r3, r3, #3
 801d2a8:	440b      	add	r3, r1
 801d2aa:	333b      	adds	r3, #59	; 0x3b
 801d2ac:	781b      	ldrb	r3, [r3, #0]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d00a      	beq.n	801d2c8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801d2b2:	78fa      	ldrb	r2, [r7, #3]
 801d2b4:	68f9      	ldr	r1, [r7, #12]
 801d2b6:	4613      	mov	r3, r2
 801d2b8:	009b      	lsls	r3, r3, #2
 801d2ba:	4413      	add	r3, r2
 801d2bc:	00db      	lsls	r3, r3, #3
 801d2be:	440b      	add	r3, r1
 801d2c0:	3350      	adds	r3, #80	; 0x50
 801d2c2:	78ba      	ldrb	r2, [r7, #2]
 801d2c4:	701a      	strb	r2, [r3, #0]
 801d2c6:	e009      	b.n	801d2dc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801d2c8:	78fa      	ldrb	r2, [r7, #3]
 801d2ca:	68f9      	ldr	r1, [r7, #12]
 801d2cc:	4613      	mov	r3, r2
 801d2ce:	009b      	lsls	r3, r3, #2
 801d2d0:	4413      	add	r3, r2
 801d2d2:	00db      	lsls	r3, r3, #3
 801d2d4:	440b      	add	r3, r1
 801d2d6:	3351      	adds	r3, #81	; 0x51
 801d2d8:	78ba      	ldrb	r2, [r7, #2]
 801d2da:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801d2dc:	2300      	movs	r3, #0
}
 801d2de:	4618      	mov	r0, r3
 801d2e0:	3714      	adds	r7, #20
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2e8:	4770      	bx	lr

0801d2ea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801d2ea:	b580      	push	{r7, lr}
 801d2ec:	b082      	sub	sp, #8
 801d2ee:	af00      	add	r7, sp, #0
 801d2f0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801d2f2:	6878      	ldr	r0, [r7, #4]
 801d2f4:	f7e3 fc2c 	bl	8000b50 <HAL_Delay>
}
 801d2f8:	bf00      	nop
 801d2fa:	3708      	adds	r7, #8
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	bd80      	pop	{r7, pc}

0801d300 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d300:	b480      	push	{r7}
 801d302:	b085      	sub	sp, #20
 801d304:	af00      	add	r7, sp, #0
 801d306:	4603      	mov	r3, r0
 801d308:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801d30a:	2300      	movs	r3, #0
 801d30c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d30e:	79fb      	ldrb	r3, [r7, #7]
 801d310:	2b03      	cmp	r3, #3
 801d312:	d817      	bhi.n	801d344 <USBH_Get_USB_Status+0x44>
 801d314:	a201      	add	r2, pc, #4	; (adr r2, 801d31c <USBH_Get_USB_Status+0x1c>)
 801d316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d31a:	bf00      	nop
 801d31c:	0801d32d 	.word	0x0801d32d
 801d320:	0801d333 	.word	0x0801d333
 801d324:	0801d339 	.word	0x0801d339
 801d328:	0801d33f 	.word	0x0801d33f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801d32c:	2300      	movs	r3, #0
 801d32e:	73fb      	strb	r3, [r7, #15]
    break;
 801d330:	e00b      	b.n	801d34a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801d332:	2302      	movs	r3, #2
 801d334:	73fb      	strb	r3, [r7, #15]
    break;
 801d336:	e008      	b.n	801d34a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801d338:	2301      	movs	r3, #1
 801d33a:	73fb      	strb	r3, [r7, #15]
    break;
 801d33c:	e005      	b.n	801d34a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801d33e:	2302      	movs	r3, #2
 801d340:	73fb      	strb	r3, [r7, #15]
    break;
 801d342:	e002      	b.n	801d34a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801d344:	2302      	movs	r3, #2
 801d346:	73fb      	strb	r3, [r7, #15]
    break;
 801d348:	bf00      	nop
  }
  return usb_status;
 801d34a:	7bfb      	ldrb	r3, [r7, #15]
}
 801d34c:	4618      	mov	r0, r3
 801d34e:	3714      	adds	r7, #20
 801d350:	46bd      	mov	sp, r7
 801d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d356:	4770      	bx	lr

0801d358 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 801d358:	b580      	push	{r7, lr}
 801d35a:	b084      	sub	sp, #16
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	4603      	mov	r3, r0
 801d360:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801d362:	79fb      	ldrb	r3, [r7, #7]
 801d364:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801d366:	79fb      	ldrb	r3, [r7, #7]
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d102      	bne.n	801d372 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801d36c:	2301      	movs	r3, #1
 801d36e:	73fb      	strb	r3, [r7, #15]
 801d370:	e001      	b.n	801d376 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801d372:	2300      	movs	r3, #0
 801d374:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801d376:	7bfb      	ldrb	r3, [r7, #15]
 801d378:	461a      	mov	r2, r3
 801d37a:	2120      	movs	r1, #32
 801d37c:	4803      	ldr	r0, [pc, #12]	; (801d38c <MX_DriverVbusFS+0x34>)
 801d37e:	f7e5 ffbd 	bl	80032fc <HAL_GPIO_WritePin>
}
 801d382:	bf00      	nop
 801d384:	3710      	adds	r7, #16
 801d386:	46bd      	mov	sp, r7
 801d388:	bd80      	pop	{r7, pc}
 801d38a:	bf00      	nop
 801d38c:	40020c00 	.word	0x40020c00

0801d390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801d390:	f8df d034 	ldr.w	sp, [pc, #52]	; 801d3c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801d394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801d396:	e003      	b.n	801d3a0 <LoopCopyDataInit>

0801d398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801d398:	4b0c      	ldr	r3, [pc, #48]	; (801d3cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801d39a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801d39c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801d39e:	3104      	adds	r1, #4

0801d3a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801d3a0:	480b      	ldr	r0, [pc, #44]	; (801d3d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801d3a2:	4b0c      	ldr	r3, [pc, #48]	; (801d3d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801d3a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801d3a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801d3a8:	d3f6      	bcc.n	801d398 <CopyDataInit>
  ldr  r2, =_sbss
 801d3aa:	4a0b      	ldr	r2, [pc, #44]	; (801d3d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801d3ac:	e002      	b.n	801d3b4 <LoopFillZerobss>

0801d3ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801d3ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801d3b0:	f842 3b04 	str.w	r3, [r2], #4

0801d3b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801d3b4:	4b09      	ldr	r3, [pc, #36]	; (801d3dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801d3b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801d3b8:	d3f9      	bcc.n	801d3ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801d3ba:	f7ff fcbd 	bl	801cd38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801d3be:	f007 ff61 	bl	8025284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801d3c2:	f7fe f9d1 	bl	801b768 <main>
  bx  lr    
 801d3c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801d3c8:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 801d3cc:	080c1830 	.word	0x080c1830
  ldr  r0, =_sdata
 801d3d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801d3d4:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 801d3d8:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 801d3dc:	2000c94c 	.word	0x2000c94c

0801d3e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801d3e0:	e7fe      	b.n	801d3e0 <ADC_IRQHandler>

0801d3e2 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801d3e2:	4770      	bx	lr

0801d3e4 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 801d3e4:	b508      	push	{r3, lr}
    switch (fontId)
 801d3e6:	2901      	cmp	r1, #1
 801d3e8:	d007      	beq.n	801d3fa <_ZN23ApplicationFontProvider7getFontEt+0x16>
 801d3ea:	b119      	cbz	r1, 801d3f4 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 801d3ec:	2902      	cmp	r1, #2
 801d3ee:	d007      	beq.n	801d400 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    case Typography::LARGE:
        return &(getFont_verdana_40_4bpp());
    case Typography::SMALL:
        return &(getFont_verdana_10_4bpp());
    default:
        return 0;
 801d3f0:	2000      	movs	r0, #0
 801d3f2:	e001      	b.n	801d3f8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return &(getFont_verdana_20_4bpp());
 801d3f4:	f000 f842 	bl	801d47c <_Z23getFont_verdana_20_4bppv>
    }
}
 801d3f8:	bd08      	pop	{r3, pc}
        return &(getFont_verdana_40_4bpp());
 801d3fa:	f000 f871 	bl	801d4e0 <_Z23getFont_verdana_40_4bppv>
 801d3fe:	e7fb      	b.n	801d3f8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return &(getFont_verdana_10_4bpp());
 801d400:	f000 f80c 	bl	801d41c <_Z23getFont_verdana_10_4bppv>
 801d404:	e7f8      	b.n	801d3f8 <_ZN23ApplicationFontProvider7getFontEt+0x14>

0801d406 <_ZN23ApplicationFontProviderD0Ev>:
 801d406:	b510      	push	{r4, lr}
 801d408:	4604      	mov	r4, r0
 801d40a:	2104      	movs	r1, #4
 801d40c:	f007 fee2 	bl	80251d4 <_ZdlPvj>
 801d410:	4620      	mov	r0, r4
 801d412:	bd10      	pop	{r4, pc}

0801d414 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_10_4bpp()
{
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 801d414:	4770      	bx	lr

0801d416 <__tcf_1>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_20_4bpp()
{
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 190, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 801d416:	4770      	bx	lr

0801d418 <__tcf_2>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_40_4bpp()
{
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 801d418:	4770      	bx	lr
	...

0801d41c <_Z23getFont_verdana_10_4bppv>:
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 801d41c:	4b11      	ldr	r3, [pc, #68]	; (801d464 <_Z23getFont_verdana_10_4bppv+0x48>)
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	f013 0f01 	tst.w	r3, #1
 801d424:	d001      	beq.n	801d42a <_Z23getFont_verdana_10_4bppv+0xe>
}
 801d426:	4810      	ldr	r0, [pc, #64]	; (801d468 <_Z23getFont_verdana_10_4bppv+0x4c>)
 801d428:	4770      	bx	lr
{
 801d42a:	b500      	push	{lr}
 801d42c:	b089      	sub	sp, #36	; 0x24
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 801d42e:	2200      	movs	r2, #0
 801d430:	9207      	str	r2, [sp, #28]
 801d432:	9206      	str	r2, [sp, #24]
 801d434:	4b0d      	ldr	r3, [pc, #52]	; (801d46c <_Z23getFont_verdana_10_4bppv+0x50>)
 801d436:	9305      	str	r3, [sp, #20]
 801d438:	4b0d      	ldr	r3, [pc, #52]	; (801d470 <_Z23getFont_verdana_10_4bppv+0x54>)
 801d43a:	9304      	str	r3, [sp, #16]
 801d43c:	9203      	str	r2, [sp, #12]
 801d43e:	9202      	str	r2, [sp, #8]
 801d440:	2304      	movs	r3, #4
 801d442:	9301      	str	r3, [sp, #4]
 801d444:	9200      	str	r2, [sp, #0]
 801d446:	230a      	movs	r3, #10
 801d448:	490a      	ldr	r1, [pc, #40]	; (801d474 <_Z23getFont_verdana_10_4bppv+0x58>)
 801d44a:	4807      	ldr	r0, [pc, #28]	; (801d468 <_Z23getFont_verdana_10_4bppv+0x4c>)
 801d44c:	f004 fe56 	bl	80220fc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801d450:	4b04      	ldr	r3, [pc, #16]	; (801d464 <_Z23getFont_verdana_10_4bppv+0x48>)
 801d452:	2201      	movs	r2, #1
 801d454:	601a      	str	r2, [r3, #0]
 801d456:	4808      	ldr	r0, [pc, #32]	; (801d478 <_Z23getFont_verdana_10_4bppv+0x5c>)
 801d458:	f007 fef6 	bl	8025248 <atexit>
}
 801d45c:	4802      	ldr	r0, [pc, #8]	; (801d468 <_Z23getFont_verdana_10_4bppv+0x4c>)
 801d45e:	b009      	add	sp, #36	; 0x24
 801d460:	f85d fb04 	ldr.w	pc, [sp], #4
 801d464:	2000ba74 	.word	0x2000ba74
 801d468:	2000ba80 	.word	0x2000ba80
 801d46c:	0802ce84 	.word	0x0802ce84
 801d470:	080292c4 	.word	0x080292c4
 801d474:	0802d0a0 	.word	0x0802d0a0
 801d478:	0801d415 	.word	0x0801d415

0801d47c <_Z23getFont_verdana_20_4bppv>:
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 190, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 801d47c:	4b12      	ldr	r3, [pc, #72]	; (801d4c8 <_Z23getFont_verdana_20_4bppv+0x4c>)
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	f013 0f01 	tst.w	r3, #1
 801d484:	d001      	beq.n	801d48a <_Z23getFont_verdana_20_4bppv+0xe>
}
 801d486:	4811      	ldr	r0, [pc, #68]	; (801d4cc <_Z23getFont_verdana_20_4bppv+0x50>)
 801d488:	4770      	bx	lr
{
 801d48a:	b510      	push	{r4, lr}
 801d48c:	b088      	sub	sp, #32
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 190, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 801d48e:	2300      	movs	r3, #0
 801d490:	9307      	str	r3, [sp, #28]
 801d492:	233f      	movs	r3, #63	; 0x3f
 801d494:	9306      	str	r3, [sp, #24]
 801d496:	4b0e      	ldr	r3, [pc, #56]	; (801d4d0 <_Z23getFont_verdana_20_4bppv+0x54>)
 801d498:	9305      	str	r3, [sp, #20]
 801d49a:	4b0e      	ldr	r3, [pc, #56]	; (801d4d4 <_Z23getFont_verdana_20_4bppv+0x58>)
 801d49c:	9304      	str	r3, [sp, #16]
 801d49e:	2401      	movs	r4, #1
 801d4a0:	9403      	str	r4, [sp, #12]
 801d4a2:	9402      	str	r4, [sp, #8]
 801d4a4:	2304      	movs	r3, #4
 801d4a6:	9301      	str	r3, [sp, #4]
 801d4a8:	9300      	str	r3, [sp, #0]
 801d4aa:	2314      	movs	r3, #20
 801d4ac:	22be      	movs	r2, #190	; 0xbe
 801d4ae:	490a      	ldr	r1, [pc, #40]	; (801d4d8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 801d4b0:	4806      	ldr	r0, [pc, #24]	; (801d4cc <_Z23getFont_verdana_20_4bppv+0x50>)
 801d4b2:	f004 fe23 	bl	80220fc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801d4b6:	4b04      	ldr	r3, [pc, #16]	; (801d4c8 <_Z23getFont_verdana_20_4bppv+0x4c>)
 801d4b8:	601c      	str	r4, [r3, #0]
 801d4ba:	4808      	ldr	r0, [pc, #32]	; (801d4dc <_Z23getFont_verdana_20_4bppv+0x60>)
 801d4bc:	f007 fec4 	bl	8025248 <atexit>
}
 801d4c0:	4802      	ldr	r0, [pc, #8]	; (801d4cc <_Z23getFont_verdana_20_4bppv+0x50>)
 801d4c2:	b008      	add	sp, #32
 801d4c4:	bd10      	pop	{r4, pc}
 801d4c6:	bf00      	nop
 801d4c8:	2000ba78 	.word	0x2000ba78
 801d4cc:	2000baa0 	.word	0x2000baa0
 801d4d0:	0802ce88 	.word	0x0802ce88
 801d4d4:	080292c8 	.word	0x080292c8
 801d4d8:	0802d0b0 	.word	0x0802d0b0
 801d4dc:	0801d417 	.word	0x0801d417

0801d4e0 <_Z23getFont_verdana_40_4bppv>:
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 801d4e0:	4b11      	ldr	r3, [pc, #68]	; (801d528 <_Z23getFont_verdana_40_4bppv+0x48>)
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	f013 0f01 	tst.w	r3, #1
 801d4e8:	d001      	beq.n	801d4ee <_Z23getFont_verdana_40_4bppv+0xe>
    return verdana_40_4bpp;
}
 801d4ea:	4810      	ldr	r0, [pc, #64]	; (801d52c <_Z23getFont_verdana_40_4bppv+0x4c>)
 801d4ec:	4770      	bx	lr
{
 801d4ee:	b500      	push	{lr}
 801d4f0:	b089      	sub	sp, #36	; 0x24
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 801d4f2:	2200      	movs	r2, #0
 801d4f4:	9207      	str	r2, [sp, #28]
 801d4f6:	9206      	str	r2, [sp, #24]
 801d4f8:	4b0d      	ldr	r3, [pc, #52]	; (801d530 <_Z23getFont_verdana_40_4bppv+0x50>)
 801d4fa:	9305      	str	r3, [sp, #20]
 801d4fc:	4b0d      	ldr	r3, [pc, #52]	; (801d534 <_Z23getFont_verdana_40_4bppv+0x54>)
 801d4fe:	9304      	str	r3, [sp, #16]
 801d500:	9203      	str	r2, [sp, #12]
 801d502:	9202      	str	r2, [sp, #8]
 801d504:	2304      	movs	r3, #4
 801d506:	9301      	str	r3, [sp, #4]
 801d508:	9200      	str	r2, [sp, #0]
 801d50a:	2328      	movs	r3, #40	; 0x28
 801d50c:	490a      	ldr	r1, [pc, #40]	; (801d538 <_Z23getFont_verdana_40_4bppv+0x58>)
 801d50e:	4807      	ldr	r0, [pc, #28]	; (801d52c <_Z23getFont_verdana_40_4bppv+0x4c>)
 801d510:	f004 fdf4 	bl	80220fc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801d514:	4b04      	ldr	r3, [pc, #16]	; (801d528 <_Z23getFont_verdana_40_4bppv+0x48>)
 801d516:	2201      	movs	r2, #1
 801d518:	601a      	str	r2, [r3, #0]
 801d51a:	4808      	ldr	r0, [pc, #32]	; (801d53c <_Z23getFont_verdana_40_4bppv+0x5c>)
 801d51c:	f007 fe94 	bl	8025248 <atexit>
}
 801d520:	4802      	ldr	r0, [pc, #8]	; (801d52c <_Z23getFont_verdana_40_4bppv+0x4c>)
 801d522:	b009      	add	sp, #36	; 0x24
 801d524:	f85d fb04 	ldr.w	pc, [sp], #4
 801d528:	2000ba7c 	.word	0x2000ba7c
 801d52c:	2000bac0 	.word	0x2000bac0
 801d530:	0802d09c 	.word	0x0802d09c
 801d534:	0802ce80 	.word	0x0802ce80
 801d538:	0802db14 	.word	0x0802db14
 801d53c:	0801d419 	.word	0x0801d419

0801d540 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801d540:	4770      	bx	lr

0801d542 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 801d542:	4770      	bx	lr

0801d544 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 801d544:	6041      	str	r1, [r0, #4]
    }
 801d546:	4770      	bx	lr

0801d548 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 801d548:	4770      	bx	lr

0801d54a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801d54a:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 801d54e:	b183      	cbz	r3, 801d572 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x28>
    virtual void handlePendingScreenTransition()
 801d550:	b510      	push	{r4, lr}
 801d552:	4604      	mov	r4, r0
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801d554:	681a      	ldr	r2, [r3, #0]
 801d556:	68d2      	ldr	r2, [r2, #12]
 801d558:	4618      	mov	r0, r3
 801d55a:	4790      	blx	r2
 801d55c:	b900      	cbnz	r0, 801d560 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x16>
    }
 801d55e:	bd10      	pop	{r4, pc}
        {
            pendingScreenTransitionCallback->execute();
 801d560:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 801d564:	6803      	ldr	r3, [r0, #0]
 801d566:	689b      	ldr	r3, [r3, #8]
 801d568:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801d56a:	2300      	movs	r3, #0
 801d56c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    }
 801d570:	e7f5      	b.n	801d55e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x14>
 801d572:	4770      	bx	lr

0801d574 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801d574:	4770      	bx	lr

0801d576 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 801d576:	4770      	bx	lr

0801d578 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
    {
        done = true;
 801d578:	2301      	movs	r3, #1
 801d57a:	7203      	strb	r3, [r0, #8]
    }
 801d57c:	4770      	bx	lr

0801d57e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801d57e:	4770      	bx	lr

0801d580 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801d580:	b510      	push	{r4, lr}
 801d582:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun_0)();
 801d584:	6844      	ldr	r4, [r0, #4]
 801d586:	68c2      	ldr	r2, [r0, #12]
 801d588:	1051      	asrs	r1, r2, #1
 801d58a:	1860      	adds	r0, r4, r1
 801d58c:	f012 0f01 	tst.w	r2, #1
 801d590:	d004      	beq.n	801d59c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x1c>
 801d592:	5862      	ldr	r2, [r4, r1]
 801d594:	689b      	ldr	r3, [r3, #8]
 801d596:	58d3      	ldr	r3, [r2, r3]
 801d598:	4798      	blx	r3
    }
 801d59a:	bd10      	pop	{r4, pc}
        (pobject->*pmemfun_0)();
 801d59c:	689b      	ldr	r3, [r3, #8]
 801d59e:	e7fb      	b.n	801d598 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>

0801d5a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 801d5a0:	6843      	ldr	r3, [r0, #4]
 801d5a2:	b14b      	cbz	r3, 801d5b8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 801d5a4:	6883      	ldr	r3, [r0, #8]
 801d5a6:	b10b      	cbz	r3, 801d5ac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 801d5a8:	2001      	movs	r0, #1
 801d5aa:	4770      	bx	lr
 801d5ac:	68c3      	ldr	r3, [r0, #12]
 801d5ae:	f013 0f01 	tst.w	r3, #1
 801d5b2:	d003      	beq.n	801d5bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 801d5b4:	2001      	movs	r0, #1
 801d5b6:	4770      	bx	lr
 801d5b8:	2000      	movs	r0, #0
 801d5ba:	4770      	bx	lr
 801d5bc:	2000      	movs	r0, #0
    }
 801d5be:	4770      	bx	lr

0801d5c0 <_ZN8touchgfx12NoTransitionD0Ev>:
    virtual ~NoTransition() { }
 801d5c0:	b510      	push	{r4, lr}
 801d5c2:	4604      	mov	r4, r0
 801d5c4:	210c      	movs	r1, #12
 801d5c6:	f007 fe05 	bl	80251d4 <_ZdlPvj>
 801d5ca:	4620      	mov	r0, r4
 801d5cc:	bd10      	pop	{r4, pc}

0801d5ce <_ZN23FrontendApplicationBaseD0Ev>:
 801d5ce:	b510      	push	{r4, lr}
 801d5d0:	4604      	mov	r4, r0
 801d5d2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801d5d6:	f007 fdfd 	bl	80251d4 <_ZdlPvj>
 801d5da:	4620      	mov	r0, r4
 801d5dc:	bd10      	pop	{r4, pc}

0801d5de <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801d5de:	b510      	push	{r4, lr}
 801d5e0:	4604      	mov	r4, r0
 801d5e2:	2110      	movs	r1, #16
 801d5e4:	f007 fdf6 	bl	80251d4 <_ZdlPvj>
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	bd10      	pop	{r4, pc}

0801d5ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen3_screen/Screen3Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801d5ec:	b570      	push	{r4, r5, r6, lr}
 801d5ee:	4604      	mov	r4, r0
 801d5f0:	460d      	mov	r5, r1
 801d5f2:	4616      	mov	r6, r2
        pendingScreenTransitionCallback(0)
 801d5f4:	f003 fd2e 	bl	8021054 <_ZN8touchgfx11ApplicationC1Ev>
 801d5f8:	2000      	movs	r0, #0
 801d5fa:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 801d5fe:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
        instance = this;
 801d602:	4b0a      	ldr	r3, [pc, #40]	; (801d62c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 801d604:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801d606:	4b0a      	ldr	r3, [pc, #40]	; (801d630 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x44>)
 801d608:	6023      	str	r3, [r4, #0]
    Callback() : pobject(0), pmemfun_0(0) { }
 801d60a:	4b0a      	ldr	r3, [pc, #40]	; (801d634 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
 801d60c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 801d610:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 801d614:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 801d618:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
 801d61c:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 801d620:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
{
    Texts::setLanguage(GB);
 801d624:	f000 fc2a 	bl	801de7c <_ZN8touchgfx5Texts11setLanguageEt>
}
 801d628:	4620      	mov	r0, r4
 801d62a:	bd70      	pop	{r4, r5, r6, pc}
 801d62c:	2000bb90 	.word	0x2000bb90
 801d630:	08027b14 	.word	0x08027b14
 801d634:	08027afc 	.word	0x08027afc

0801d638 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 801d638:	b410      	push	{r4}
 801d63a:	b089      	sub	sp, #36	; 0x24
 801d63c:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 801d63e:	4a0d      	ldr	r2, [pc, #52]	; (801d674 <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x3c>)
 801d640:	9206      	str	r2, [sp, #24]
 801d642:	2200      	movs	r2, #0
 801d644:	9207      	str	r2, [sp, #28]
 801d646:	466c      	mov	r4, sp
 801d648:	aa08      	add	r2, sp, #32
 801d64a:	e912 0003 	ldmdb	r2, {r0, r1}
 801d64e:	e884 0003 	stmia.w	r4, {r0, r1}
        this->pmemfun_0 = pmemfun_0;
 801d652:	aa04      	add	r2, sp, #16
 801d654:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801d658:	f8c3 313c 	str.w	r3, [r3, #316]	; 0x13c
 801d65c:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801d660:	e884 0003 	stmia.w	r4, {r0, r1}
    pendingScreenTransitionCallback = &transitionCallback;
 801d664:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801d668:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801d66c:	b009      	add	sp, #36	; 0x24
 801d66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d672:	4770      	bx	lr
 801d674:	0801d7c5 	.word	0x0801d7c5

0801d678 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801d678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d67c:	4607      	mov	r7, r0
 801d67e:	4688      	mov	r8, r1
 801d680:	4614      	mov	r4, r2
 801d682:	4699      	mov	r9, r3
 801d684:	f8dd a020 	ldr.w	sl, [sp, #32]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801d688:	6890      	ldr	r0, [r2, #8]
 801d68a:	6803      	ldr	r3, [r0, #0]
 801d68c:	6a1b      	ldr	r3, [r3, #32]
 801d68e:	4798      	blx	r3
 801d690:	f242 030b 	movw	r3, #8203	; 0x200b
 801d694:	4298      	cmp	r0, r3
 801d696:	d975      	bls.n	801d784 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801d698:	6860      	ldr	r0, [r4, #4]
 801d69a:	6803      	ldr	r3, [r0, #0]
 801d69c:	6a1b      	ldr	r3, [r3, #32]
 801d69e:	4798      	blx	r3
 801d6a0:	280f      	cmp	r0, #15
 801d6a2:	d975      	bls.n	801d790 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801d6a4:	68e0      	ldr	r0, [r4, #12]
 801d6a6:	6803      	ldr	r3, [r0, #0]
 801d6a8:	6a1b      	ldr	r3, [r3, #32]
 801d6aa:	4798      	blx	r3
 801d6ac:	280b      	cmp	r0, #11
 801d6ae:	d975      	bls.n	801d79c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
    Application::getInstance()->clearAllTimerWidgets();
 801d6b0:	f003 fcae 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 801d6b4:	f003 fcb2 	bl	802101c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801d6b8:	f8d9 0000 	ldr.w	r0, [r9]
 801d6bc:	b110      	cbz	r0, 801d6c4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x4c>
        (*currentTrans)->tearDown();
 801d6be:	6803      	ldr	r3, [r0, #0]
 801d6c0:	68db      	ldr	r3, [r3, #12]
 801d6c2:	4798      	blx	r3
    if (*currentTrans)
 801d6c4:	f8d9 0000 	ldr.w	r0, [r9]
 801d6c8:	b110      	cbz	r0, 801d6d0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 801d6ca:	6803      	ldr	r3, [r0, #0]
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	4798      	blx	r3
    if (*currentScreen)
 801d6d0:	6838      	ldr	r0, [r7, #0]
 801d6d2:	b110      	cbz	r0, 801d6da <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x62>
        (*currentScreen)->tearDownScreen();
 801d6d4:	6803      	ldr	r3, [r0, #0]
 801d6d6:	695b      	ldr	r3, [r3, #20]
 801d6d8:	4798      	blx	r3
    if (*currentPresenter)
 801d6da:	f8d8 0000 	ldr.w	r0, [r8]
 801d6de:	b110      	cbz	r0, 801d6e6 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6e>
        (*currentPresenter)->deactivate();
 801d6e0:	6803      	ldr	r3, [r0, #0]
 801d6e2:	685b      	ldr	r3, [r3, #4]
 801d6e4:	4798      	blx	r3
    if (*currentScreen)
 801d6e6:	6838      	ldr	r0, [r7, #0]
 801d6e8:	b110      	cbz	r0, 801d6f0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x78>
        (*currentScreen)->~Screen();
 801d6ea:	6803      	ldr	r3, [r0, #0]
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	4798      	blx	r3
    if (*currentPresenter)
 801d6f0:	f8d8 0000 	ldr.w	r0, [r8]
 801d6f4:	b110      	cbz	r0, 801d6fc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x84>
        (*currentPresenter)->~Presenter();
 801d6f6:	6803      	ldr	r3, [r0, #0]
 801d6f8:	689b      	ldr	r3, [r3, #8]
 801d6fa:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801d6fc:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 801d6fe:	6803      	ldr	r3, [r0, #0]
 801d700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d702:	2100      	movs	r1, #0
 801d704:	4798      	blx	r3
 801d706:	4605      	mov	r5, r0
 801d708:	b120      	cbz	r0, 801d714 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9c>
        screenContainer(0), done(false)
 801d70a:	2300      	movs	r3, #0
 801d70c:	6043      	str	r3, [r0, #4]
 801d70e:	7203      	strb	r3, [r0, #8]
    NoTransition() : Transition() { }
 801d710:	4b26      	ldr	r3, [pc, #152]	; (801d7ac <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 801d712:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801d714:	68a0      	ldr	r0, [r4, #8]
 801d716:	6803      	ldr	r3, [r0, #0]
 801d718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d71a:	2100      	movs	r1, #0
 801d71c:	4798      	blx	r3
 801d71e:	4606      	mov	r6, r0
 801d720:	b108      	cbz	r0, 801d726 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
 801d722:	f000 fc61 	bl	801dfe8 <_ZN11Screen3ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801d726:	6860      	ldr	r0, [r4, #4]
 801d728:	6803      	ldr	r3, [r0, #0]
 801d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d72c:	2100      	movs	r1, #0
 801d72e:	4798      	blx	r3
 801d730:	4604      	mov	r4, r0
 801d732:	b110      	cbz	r0, 801d73a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc2>
 801d734:	4631      	mov	r1, r6
 801d736:	f000 fc27 	bl	801df88 <_ZN16Screen3PresenterC1ER11Screen3View>
    *currentTrans = newTransition;
 801d73a:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 801d73e:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 801d742:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 801d744:	2c00      	cmp	r4, #0
 801d746:	d02f      	beq.n	801d7a8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801d748:	1d23      	adds	r3, r4, #4
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 801d74a:	f8ca 3000 	str.w	r3, [sl]
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
    {
        model = m;
 801d74e:	f8c4 a008 	str.w	sl, [r4, #8]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 801d752:	63f4      	str	r4, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 801d754:	6833      	ldr	r3, [r6, #0]
 801d756:	68db      	ldr	r3, [r3, #12]
 801d758:	4630      	mov	r0, r6
 801d75a:	4798      	blx	r3
    newPresenter->activate();
 801d75c:	6823      	ldr	r3, [r4, #0]
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	4620      	mov	r0, r4
 801d762:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801d764:	4629      	mov	r1, r5
 801d766:	4630      	mov	r0, r6
 801d768:	f004 fc9e 	bl	80220a8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801d76c:	682b      	ldr	r3, [r5, #0]
 801d76e:	691b      	ldr	r3, [r3, #16]
 801d770:	4628      	mov	r0, r5
 801d772:	4798      	blx	r3
    Application::getInstance()->draw();
 801d774:	f003 fc4c 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 801d778:	6803      	ldr	r3, [r0, #0]
 801d77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d77c:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 801d77e:	4620      	mov	r0, r4
 801d780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801d784:	4b0a      	ldr	r3, [pc, #40]	; (801d7b0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 801d786:	4a0b      	ldr	r2, [pc, #44]	; (801d7b4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 801d788:	21c2      	movs	r1, #194	; 0xc2
 801d78a:	480b      	ldr	r0, [pc, #44]	; (801d7b8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 801d78c:	f007 fd3e 	bl	802520c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801d790:	4b0a      	ldr	r3, [pc, #40]	; (801d7bc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801d792:	4a08      	ldr	r2, [pc, #32]	; (801d7b4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 801d794:	21c3      	movs	r1, #195	; 0xc3
 801d796:	4808      	ldr	r0, [pc, #32]	; (801d7b8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 801d798:	f007 fd38 	bl	802520c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801d79c:	4b08      	ldr	r3, [pc, #32]	; (801d7c0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801d79e:	4a05      	ldr	r2, [pc, #20]	; (801d7b4 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 801d7a0:	21c4      	movs	r1, #196	; 0xc4
 801d7a2:	4805      	ldr	r0, [pc, #20]	; (801d7b8 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 801d7a4:	f007 fd32 	bl	802520c <__assert_func>
    model->bind(newPresenter);
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	e7ce      	b.n	801d74a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd2>
 801d7ac:	08027b50 	.word	0x08027b50
 801d7b0:	08027b68 	.word	0x08027b68
 801d7b4:	08027d90 	.word	0x08027d90
 801d7b8:	08027bf8 	.word	0x08027bf8
 801d7bc:	08027c48 	.word	0x08027c48
 801d7c0:	08027cec 	.word	0x08027cec

0801d7c4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 801d7c4:	b500      	push	{lr}
 801d7c6:	b083      	sub	sp, #12
    makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801d7c8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801d7cc:	9300      	str	r3, [sp, #0]
 801d7ce:	4b05      	ldr	r3, [pc, #20]	; (801d7e4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x20>)
 801d7d0:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 801d7d4:	f500 7198 	add.w	r1, r0, #304	; 0x130
 801d7d8:	4803      	ldr	r0, [pc, #12]	; (801d7e8 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x24>)
 801d7da:	f7ff ff4d 	bl	801d678 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801d7de:	b003      	add	sp, #12
 801d7e0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d7e4:	2000bb8c 	.word	0x2000bb8c
 801d7e8:	2000bb88 	.word	0x2000bb88

0801d7ec <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 801d7ec:	4770      	bx	lr

0801d7ee <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801d7ee:	4770      	bx	lr

0801d7f0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 801d7f0:	4770      	bx	lr

0801d7f2 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 801d7f2:	4770      	bx	lr

0801d7f4 <_ZN15Screen3ViewBase12playPrevSongEv>:
     * Custom Action Handlers
     */
    virtual void playPrevSong()
    {
        // Override and implement this function in Screen3View
    }
 801d7f4:	4770      	bx	lr

0801d7f6 <_ZN15Screen3ViewBase12playNextSongEv>:

    virtual void playNextSong()
    {
        // Override and implement this function in Screen3View
    }
 801d7f6:	4770      	bx	lr

0801d7f8 <_ZN15Screen3ViewBase9playPauseEv>:

    virtual void playPause()
    {
        // Override and implement this function in Screen3View
    }
 801d7f8:	4770      	bx	lr

0801d7fa <_ZN15Screen3ViewBase16moveSongPositionEi>:

    virtual void moveSongPosition(int value)
    {
        // Override and implement this function in Screen3View
    }
 801d7fa:	4770      	bx	lr

0801d7fc <_ZN15Screen3ViewBase11setupScreenEv>:
}

void Screen3ViewBase::setupScreen()
{

}
 801d7fc:	4770      	bx	lr

0801d7fe <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801d7fe:	b508      	push	{r3, lr}
    if (&src == &buttonPrev)
 801d800:	f500 7337 	add.w	r3, r0, #732	; 0x2dc
 801d804:	428b      	cmp	r3, r1
 801d806:	d008      	beq.n	801d81a <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>
        //songPrevious
        //When buttonPrev clicked call virtual function
        //Call playPrevSong
        playPrevSong();
    }
    else if (&src == &buttonPlay)
 801d808:	f500 7346 	add.w	r3, r0, #792	; 0x318
 801d80c:	428b      	cmp	r3, r1
 801d80e:	d008      	beq.n	801d822 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
        //songPlay
        //When buttonPlay clicked call virtual function
        //Call playPause
        playPause();
    }
    else if (&src == &buttonNext)
 801d810:	f500 7355 	add.w	r3, r0, #852	; 0x354
 801d814:	428b      	cmp	r3, r1
 801d816:	d008      	beq.n	801d82a <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2c>
        //songNext
        //When buttonNext clicked call virtual function
        //Call playNextSong
        playNextSong();
    }
}
 801d818:	bd08      	pop	{r3, pc}
        playPrevSong();
 801d81a:	6803      	ldr	r3, [r0, #0]
 801d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d81e:	4798      	blx	r3
 801d820:	e7fa      	b.n	801d818 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a>
        playPause();
 801d822:	6803      	ldr	r3, [r0, #0]
 801d824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d826:	4798      	blx	r3
 801d828:	e7f6      	b.n	801d818 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a>
        playNextSong();
 801d82a:	6803      	ldr	r3, [r0, #0]
 801d82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d82e:	4798      	blx	r3
}
 801d830:	e7f2      	b.n	801d818 <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a>

0801d832 <_ZN15Screen3ViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi>:

void Screen3ViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
 801d832:	b508      	push	{r3, lr}
    if (&src == &slider)
 801d834:	f100 03d4 	add.w	r3, r0, #212	; 0xd4
 801d838:	428b      	cmp	r3, r1
 801d83a:	d000      	beq.n	801d83e <_ZN15Screen3ViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi+0xc>
        //progressSliderChanged
        //When slider value confirmed call virtual function
        //Call moveSongPosition
        moveSongPosition(value);
    }
}
 801d83c:	bd08      	pop	{r3, pc}
 801d83e:	4611      	mov	r1, r2
        moveSongPosition(value);
 801d840:	6803      	ldr	r3, [r0, #0]
 801d842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d844:	4798      	blx	r3
}
 801d846:	e7f9      	b.n	801d83c <_ZN15Screen3ViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi+0xa>

0801d848 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 801d848:	4770      	bx	lr

0801d84a <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801d84a:	4770      	bx	lr

0801d84c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 801d84c:	b570      	push	{r4, r5, r6, lr}
 801d84e:	4603      	mov	r3, r0
        (pobject->*pmemfun_2)(t1, t2);
 801d850:	6846      	ldr	r6, [r0, #4]
 801d852:	68c4      	ldr	r4, [r0, #12]
 801d854:	1065      	asrs	r5, r4, #1
 801d856:	1970      	adds	r0, r6, r5
 801d858:	f014 0f01 	tst.w	r4, #1
 801d85c:	d004      	beq.n	801d868 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7executeES4_i+0x1c>
 801d85e:	5974      	ldr	r4, [r6, r5]
 801d860:	689b      	ldr	r3, [r3, #8]
 801d862:	58e3      	ldr	r3, [r4, r3]
 801d864:	4798      	blx	r3
    }
 801d866:	bd70      	pop	{r4, r5, r6, pc}
        (pobject->*pmemfun_2)(t1, t2);
 801d868:	689b      	ldr	r3, [r3, #8]
 801d86a:	e7fb      	b.n	801d864 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7executeES4_i+0x18>

0801d86c <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7isValidEv>:
        return (pobject != 0) && (pmemfun_2 != 0);
 801d86c:	6843      	ldr	r3, [r0, #4]
 801d86e:	b14b      	cbz	r3, 801d884 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7isValidEv+0x18>
 801d870:	6883      	ldr	r3, [r0, #8]
 801d872:	b10b      	cbz	r3, 801d878 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7isValidEv+0xc>
 801d874:	2001      	movs	r0, #1
 801d876:	4770      	bx	lr
 801d878:	68c3      	ldr	r3, [r0, #12]
 801d87a:	f013 0f01 	tst.w	r3, #1
 801d87e:	d003      	beq.n	801d888 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivE7isValidEv+0x1c>
 801d880:	2001      	movs	r0, #1
 801d882:	4770      	bx	lr
 801d884:	2000      	movs	r0, #0
 801d886:	4770      	bx	lr
 801d888:	2000      	movs	r0, #0
    }
 801d88a:	4770      	bx	lr

0801d88c <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801d88c:	b538      	push	{r3, r4, r5, lr}
 801d88e:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 801d890:	6845      	ldr	r5, [r0, #4]
 801d892:	68c2      	ldr	r2, [r0, #12]
 801d894:	1054      	asrs	r4, r2, #1
 801d896:	1928      	adds	r0, r5, r4
 801d898:	f012 0f01 	tst.w	r2, #1
 801d89c:	d004      	beq.n	801d8a8 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x1c>
 801d89e:	592a      	ldr	r2, [r5, r4]
 801d8a0:	689b      	ldr	r3, [r3, #8]
 801d8a2:	58d3      	ldr	r3, [r2, r3]
 801d8a4:	4798      	blx	r3
    }
 801d8a6:	bd38      	pop	{r3, r4, r5, pc}
        (pobject->*pmemfun_1)(t1);
 801d8a8:	689b      	ldr	r3, [r3, #8]
 801d8aa:	e7fb      	b.n	801d8a4 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x18>

0801d8ac <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 801d8ac:	6843      	ldr	r3, [r0, #4]
 801d8ae:	b14b      	cbz	r3, 801d8c4 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x18>
 801d8b0:	6883      	ldr	r3, [r0, #8]
 801d8b2:	b10b      	cbz	r3, 801d8b8 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0xc>
 801d8b4:	2001      	movs	r0, #1
 801d8b6:	4770      	bx	lr
 801d8b8:	68c3      	ldr	r3, [r0, #12]
 801d8ba:	f013 0f01 	tst.w	r3, #1
 801d8be:	d003      	beq.n	801d8c8 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x1c>
 801d8c0:	2001      	movs	r0, #1
 801d8c2:	4770      	bx	lr
 801d8c4:	2000      	movs	r0, #0
 801d8c6:	4770      	bx	lr
 801d8c8:	2000      	movs	r0, #0
    }
 801d8ca:	4770      	bx	lr

0801d8cc <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801d8cc:	b510      	push	{r4, lr}
 801d8ce:	4604      	mov	r4, r0
 801d8d0:	2110      	movs	r1, #16
 801d8d2:	f007 fc7f 	bl	80251d4 <_ZdlPvj>
 801d8d6:	4620      	mov	r0, r4
 801d8d8:	bd10      	pop	{r4, pc}

0801d8da <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_6SliderEivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 801d8da:	b510      	push	{r4, lr}
 801d8dc:	4604      	mov	r4, r0
 801d8de:	2110      	movs	r1, #16
 801d8e0:	f007 fc78 	bl	80251d4 <_ZdlPvj>
 801d8e4:	4620      	mov	r0, r4
 801d8e6:	bd10      	pop	{r4, pc}

0801d8e8 <_ZN15Screen3ViewBaseC1Ev>:
Screen3ViewBase::Screen3ViewBase() :
 801d8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8ec:	b0a9      	sub	sp, #164	; 0xa4
 801d8ee:	4604      	mov	r4, r0
    View() : presenter(0)
 801d8f0:	f004 fa5c 	bl	8021dac <_ZN8touchgfx6ScreenC1Ev>
 801d8f4:	2600      	movs	r6, #0
 801d8f6:	63e6      	str	r6, [r4, #60]	; 0x3c
    sliderValueConfirmedCallback(this, &Screen3ViewBase::sliderValueConfirmedCallbackHandler)
 801d8f8:	4625      	mov	r5, r4
 801d8fa:	4bce      	ldr	r3, [pc, #824]	; (801dc34 <_ZN15Screen3ViewBaseC1Ev+0x34c>)
 801d8fc:	f845 3b40 	str.w	r3, [r5], #64
 801d900:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801d904:	a928      	add	r1, sp, #160	; 0xa0
 801d906:	f821 7d64 	strh.w	r7, [r1, #-100]!
        this->x = x;
 801d90a:	80ae      	strh	r6, [r5, #4]
        this->y = y;
 801d90c:	80ee      	strh	r6, [r5, #6]
        this->width = width;
 801d90e:	812e      	strh	r6, [r5, #8]
        this->height = height;
 801d910:	816e      	strh	r6, [r5, #10]
        this->x = 0;
 801d912:	81ae      	strh	r6, [r5, #12]
        this->y = 0;
 801d914:	81ee      	strh	r6, [r5, #14]
        this->width = 0;
 801d916:	822e      	strh	r6, [r5, #16]
        this->height = 0;
 801d918:	826e      	strh	r6, [r5, #18]
        visible(true)
 801d91a:	616e      	str	r6, [r5, #20]
 801d91c:	61ae      	str	r6, [r5, #24]
 801d91e:	61ee      	str	r6, [r5, #28]
 801d920:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 801d924:	f04f 0801 	mov.w	r8, #1
 801d928:	f885 8025 	strb.w	r8, [r5, #37]	; 0x25
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 801d92c:	4bc2      	ldr	r3, [pc, #776]	; (801dc38 <_ZN15Screen3ViewBaseC1Ev+0x350>)
 801d92e:	6423      	str	r3, [r4, #64]	; 0x40
 801d930:	84ef      	strh	r7, [r5, #38]	; 0x26
 801d932:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
        setBitmap(bmp);
 801d936:	4628      	mov	r0, r5
 801d938:	f7f2 ff30 	bl	801079c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    TiledImage(const Bitmap& bmp = Bitmap()) : Image(bmp), xOffset(0), yOffset(0)
 801d93c:	4bbf      	ldr	r3, [pc, #764]	; (801dc3c <_ZN15Screen3ViewBaseC1Ev+0x354>)
 801d93e:	6423      	str	r3, [r4, #64]	; 0x40
 801d940:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
 801d944:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801d948:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801d94c:	9303      	str	r3, [sp, #12]
 801d94e:	4618      	mov	r0, r3
 801d950:	f7f2 ffba 	bl	80108c8 <_ZN8touchgfx13ScalableImageC1Ev>
        this->x = x;
 801d954:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0
        this->y = y;
 801d958:	f8a4 60a2 	strh.w	r6, [r4, #162]	; 0xa2
        this->width = width;
 801d95c:	f8a4 60a4 	strh.w	r6, [r4, #164]	; 0xa4
        this->height = height;
 801d960:	f8a4 60a6 	strh.w	r6, [r4, #166]	; 0xa6
        this->x = 0;
 801d964:	f8a4 60a8 	strh.w	r6, [r4, #168]	; 0xa8
        this->y = 0;
 801d968:	f8a4 60aa 	strh.w	r6, [r4, #170]	; 0xaa
        this->width = 0;
 801d96c:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
        this->height = 0;
 801d970:	f8a4 60ae 	strh.w	r6, [r4, #174]	; 0xae
 801d974:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 801d978:	f8c4 60b4 	str.w	r6, [r4, #180]	; 0xb4
 801d97c:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 801d980:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
 801d984:	f884 80c1 	strb.w	r8, [r4, #193]	; 0xc1
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801d988:	f8a4 70c2 	strh.w	r7, [r4, #194]	; 0xc2
        color = col;
 801d98c:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 801d990:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
 801d994:	f884 70ca 	strb.w	r7, [r4, #202]	; 0xca
 801d998:	f884 60cb 	strb.w	r6, [r4, #203]	; 0xcb
 801d99c:	f884 60cc 	strb.w	r6, [r4, #204]	; 0xcc
 801d9a0:	f884 60cd 	strb.w	r6, [r4, #205]	; 0xcd
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 801d9a4:	4ba6      	ldr	r3, [pc, #664]	; (801dc40 <_ZN15Screen3ViewBaseC1Ev+0x358>)
 801d9a6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 801d9aa:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
 801d9ae:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
 801d9b2:	4658      	mov	r0, fp
 801d9b4:	f7f1 fed0 	bl	800f758 <_ZN8touchgfx6SliderC1Ev>
 801d9b8:	f504 79e8 	add.w	r9, r4, #464	; 0x1d0
 801d9bc:	4648      	mov	r0, r9
 801d9be:	f7f2 fb71 	bl	80100a4 <_ZN8touchgfx14CircleProgressC1Ev>
 801d9c2:	f504 7a2c 	add.w	sl, r4, #688	; 0x2b0
 801d9c6:	a928      	add	r1, sp, #160	; 0xa0
 801d9c8:	f821 7d60 	strh.w	r7, [r1, #-96]!
 801d9cc:	22ff      	movs	r2, #255	; 0xff
 801d9ce:	4650      	mov	r0, sl
 801d9d0:	f7f6 fa9e 	bl	8013f10 <_ZN8touchgfx19PainterRGB565BitmapC1ERKNS_6BitmapEh>
 801d9d4:	f504 7837 	add.w	r8, r4, #732	; 0x2dc
 801d9d8:	4640      	mov	r0, r8
 801d9da:	f7f2 fe1b 	bl	8010614 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801d9de:	f504 7746 	add.w	r7, r4, #792	; 0x318
 801d9e2:	4638      	mov	r0, r7
 801d9e4:	f7f2 fe16 	bl	8010614 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801d9e8:	f504 7255 	add.w	r2, r4, #852	; 0x354
 801d9ec:	9207      	str	r2, [sp, #28]
 801d9ee:	4610      	mov	r0, r2
 801d9f0:	f7f2 fe10 	bl	8010614 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801d9f4:	4b93      	ldr	r3, [pc, #588]	; (801dc44 <_ZN15Screen3ViewBaseC1Ev+0x35c>)
 801d9f6:	9311      	str	r3, [sp, #68]	; 0x44
 801d9f8:	9612      	str	r6, [sp, #72]	; 0x48
 801d9fa:	ab0d      	add	r3, sp, #52	; 0x34
 801d9fc:	aa11      	add	r2, sp, #68	; 0x44
 801d9fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 801da02:	e883 0003 	stmia.w	r3, {r0, r1}
    {
 801da06:	4a90      	ldr	r2, [pc, #576]	; (801dc48 <_ZN15Screen3ViewBaseC1Ev+0x360>)
 801da08:	f8c4 23cc 	str.w	r2, [r4, #972]	; 0x3cc
        this->pobject = pobject;
 801da0c:	f8c4 43d0 	str.w	r4, [r4, #976]	; 0x3d0
        this->pmemfun_1 = pmemfun_1;
 801da10:	f504 7275 	add.w	r2, r4, #980	; 0x3d4
 801da14:	e882 0003 	stmia.w	r2, {r0, r1}
 801da18:	4b8c      	ldr	r3, [pc, #560]	; (801dc4c <_ZN15Screen3ViewBaseC1Ev+0x364>)
 801da1a:	9313      	str	r3, [sp, #76]	; 0x4c
 801da1c:	9614      	str	r6, [sp, #80]	; 0x50
 801da1e:	ab0b      	add	r3, sp, #44	; 0x2c
 801da20:	aa13      	add	r2, sp, #76	; 0x4c
 801da22:	e892 0003 	ldmia.w	r2, {r0, r1}
 801da26:	e883 0003 	stmia.w	r3, {r0, r1}
    {
 801da2a:	4a89      	ldr	r2, [pc, #548]	; (801dc50 <_ZN15Screen3ViewBaseC1Ev+0x368>)
 801da2c:	f8c4 23dc 	str.w	r2, [r4, #988]	; 0x3dc
        this->pobject = pobject;
 801da30:	f8c4 43e0 	str.w	r4, [r4, #992]	; 0x3e0
        this->pmemfun_2 = pmemfun_2;
 801da34:	f504 7279 	add.w	r2, r4, #996	; 0x3e4
 801da38:	e882 0003 	stmia.w	r2, {r0, r1}
    CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801da3c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 801da40:	f504 707b 	add.w	r0, r4, #1004	; 0x3ec
 801da44:	f002 f8c6 	bl	801fbd4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
 801da48:	a928      	add	r1, sp, #160	; 0xa0
 801da4a:	230a      	movs	r3, #10
 801da4c:	f821 3d4c 	strh.w	r3, [r1, #-76]!
    backgroundImage.setBitmap(Bitmap(BITMAP_BLUE_TEXTURES_GREY_WASH_WALL_ID));
 801da50:	4628      	mov	r0, r5
 801da52:	f7f3 fa46 	bl	8010ee2 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
        setXY(x, y);
 801da56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801da58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da5a:	4632      	mov	r2, r6
 801da5c:	4631      	mov	r1, r6
 801da5e:	4628      	mov	r0, r5
 801da60:	4798      	blx	r3
        setWidth(width);
 801da62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801da64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da66:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801da6a:	4628      	mov	r0, r5
 801da6c:	4798      	blx	r3
        setHeight(height);
 801da6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801da70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da72:	f44f 7188 	mov.w	r1, #272	; 0x110
 801da76:	4628      	mov	r0, r5
 801da78:	4798      	blx	r3
    backgroundImage.setOffset(0, 0);
 801da7a:	4632      	mov	r2, r6
 801da7c:	4631      	mov	r1, r6
 801da7e:	4628      	mov	r0, r5
 801da80:	f7f3 fa0e 	bl	8010ea0 <_ZN8touchgfx10TiledImage9setOffsetEss>
 801da84:	a928      	add	r1, sp, #160	; 0xa0
 801da86:	230b      	movs	r3, #11
 801da88:	f821 3d48 	strh.w	r3, [r1, #-72]!
    coverImage.setBitmap(Bitmap(BITMAP_MULTIMEDIA_MUSIC_MUSIC_NOTE_NOTE_ICON_ID));
 801da8c:	9803      	ldr	r0, [sp, #12]
 801da8e:	f7f2 fed1 	bl	8010834 <_ZN8touchgfx13ScalableImage9setBitmapERKNS_6BitmapE>
        setXY(x, y);
 801da92:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801da94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da96:	222e      	movs	r2, #46	; 0x2e
 801da98:	2136      	movs	r1, #54	; 0x36
 801da9a:	9803      	ldr	r0, [sp, #12]
 801da9c:	4798      	blx	r3
        setWidth(width);
 801da9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801daa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801daa2:	2180      	movs	r1, #128	; 0x80
 801daa4:	9803      	ldr	r0, [sp, #12]
 801daa6:	4798      	blx	r3
        setHeight(height);
 801daa8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801daaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801daac:	2180      	movs	r1, #128	; 0x80
 801daae:	9803      	ldr	r0, [sp, #12]
 801dab0:	4798      	blx	r3
    coverImage.setScalingAlgorithm(ScalableImage::NEAREST_NEIGHBOR);
 801dab2:	4631      	mov	r1, r6
 801dab4:	9803      	ldr	r0, [sp, #12]
 801dab6:	f7f2 feb0 	bl	801081a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    songName.setPosition(225, 30, 242, 32);
 801daba:	f104 009c 	add.w	r0, r4, #156	; 0x9c
        setXY(x, y);
 801dabe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801dac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dac4:	221e      	movs	r2, #30
 801dac6:	21e1      	movs	r1, #225	; 0xe1
 801dac8:	9004      	str	r0, [sp, #16]
 801daca:	4798      	blx	r3
        setWidth(width);
 801dacc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801dad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dad2:	21f2      	movs	r1, #242	; 0xf2
 801dad4:	9804      	ldr	r0, [sp, #16]
 801dad6:	4798      	blx	r3
        setHeight(height);
 801dad8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801dadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dade:	2120      	movs	r1, #32
 801dae0:	9804      	ldr	r0, [sp, #16]
 801dae2:	4798      	blx	r3
    songName.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801dae4:	4632      	mov	r2, r6
 801dae6:	4631      	mov	r1, r6
 801dae8:	4630      	mov	r0, r6
 801daea:	f005 f941 	bl	8022d70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
        this->color = color;
 801daee:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
        linespace = space;
 801daf2:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801daf6:	4b57      	ldr	r3, [pc, #348]	; (801dc54 <_ZN15Screen3ViewBaseC1Ev+0x36c>)
 801daf8:	681b      	ldr	r3, [r3, #0]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	f000 8154 	beq.w	801dda8 <_ZN15Screen3ViewBaseC1Ev+0x4c0>
 801db00:	f504 7664 	add.w	r6, r4, #912	; 0x390
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801db04:	4b54      	ldr	r3, [pc, #336]	; (801dc58 <_ZN15Screen3ViewBaseC1Ev+0x370>)
 801db06:	881b      	ldrh	r3, [r3, #0]
 801db08:	2b01      	cmp	r3, #1
 801db0a:	f240 8153 	bls.w	801ddb4 <_ZN15Screen3ViewBaseC1Ev+0x4cc>
 801db0e:	4b53      	ldr	r3, [pc, #332]	; (801dc5c <_ZN15Screen3ViewBaseC1Ev+0x374>)
 801db10:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(songNameBuffer, SONGNAME_SIZE, "%s", TypedText(T_SINGLEUSEID2).getText());
 801db12:	685b      	ldr	r3, [r3, #4]
 801db14:	4a52      	ldr	r2, [pc, #328]	; (801dc60 <_ZN15Screen3ViewBaseC1Ev+0x378>)
 801db16:	211e      	movs	r1, #30
 801db18:	4630      	mov	r0, r6
 801db1a:	f005 f8d7 	bl	8022ccc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wildcard = value;
 801db1e:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 801db22:	2600      	movs	r6, #0
    songName.setTypedText(TypedText(T_SINGLEUSEID1));
 801db24:	4631      	mov	r1, r6
 801db26:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 801db2a:	f7f3 f916 	bl	8010d5a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    slider.setXY(61, 211);
 801db2e:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
        setX(x);
 801db32:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 801db36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db38:	213d      	movs	r1, #61	; 0x3d
 801db3a:	9205      	str	r2, [sp, #20]
 801db3c:	4610      	mov	r0, r2
 801db3e:	4798      	blx	r3
        setY(y);
 801db40:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 801db44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db46:	21d3      	movs	r1, #211	; 0xd3
 801db48:	9805      	ldr	r0, [sp, #20]
 801db4a:	4798      	blx	r3
 801db4c:	2308      	movs	r3, #8
 801db4e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 801db52:	2309      	movs	r3, #9
 801db54:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 801db58:	ab28      	add	r3, sp, #160	; 0xa0
 801db5a:	2207      	movs	r2, #7
 801db5c:	f823 2d3c 	strh.w	r2, [r3, #-60]!
    slider.setBitmaps(Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_SLIDER_ROUND_BACK_ID), Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_SLIDER_ROUND_FILL_ID), Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_INDICATORS_SLIDER_ROUND_NOB_ID));
 801db60:	aa18      	add	r2, sp, #96	; 0x60
 801db62:	a917      	add	r1, sp, #92	; 0x5c
 801db64:	4658      	mov	r0, fp
 801db66:	f7f1 fec9 	bl	800f8fc <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider.setupHorizontalSlider(2, 19, 2, 0, 310);
 801db6a:	f44f 739b 	mov.w	r3, #310	; 0x136
 801db6e:	9301      	str	r3, [sp, #4]
 801db70:	9600      	str	r6, [sp, #0]
 801db72:	2302      	movs	r3, #2
 801db74:	2213      	movs	r2, #19
 801db76:	4619      	mov	r1, r3
 801db78:	4658      	mov	r0, fp
 801db7a:	f7f1 fc59 	bl	800f430 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider.setValueRange(0, 100);
 801db7e:	2264      	movs	r2, #100	; 0x64
 801db80:	4631      	mov	r1, r6
 801db82:	4658      	mov	r0, fp
 801db84:	f7f1 fc1c 	bl	800f3c0 <_ZN8touchgfx6Slider13setValueRangeEii>
    slider.setValue(0);
 801db88:	4631      	mov	r1, r6
 801db8a:	4658      	mov	r0, fp
 801db8c:	f7f1 fb2e 	bl	800f1ec <_ZN8touchgfx6Slider8setValueEi>
    slider.setStopValueCallback(sliderValueConfirmedCallback);
 801db90:	f504 7377 	add.w	r3, r4, #988	; 0x3dc
        stopValueCallback = &callback;
 801db94:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    songProgress.setXY(26, 18);
 801db98:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
        setX(x);
 801db9c:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 801dba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dba2:	211a      	movs	r1, #26
 801dba4:	4683      	mov	fp, r0
 801dba6:	4798      	blx	r3
        setY(y);
 801dba8:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 801dbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dbae:	2112      	movs	r1, #18
 801dbb0:	4658      	mov	r0, fp
 801dbb2:	4798      	blx	r3
    songProgress.setProgressIndicatorPosition(0, 0, 184, 184);
 801dbb4:	23b8      	movs	r3, #184	; 0xb8
 801dbb6:	9300      	str	r3, [sp, #0]
 801dbb8:	4632      	mov	r2, r6
 801dbba:	4631      	mov	r1, r6
 801dbbc:	4648      	mov	r0, r9
 801dbbe:	f7f2 faa3 	bl	8010108 <_ZN8touchgfx14CircleProgress28setProgressIndicatorPositionEssss>
    songProgress.setRange(0, 100);
 801dbc2:	9600      	str	r6, [sp, #0]
 801dbc4:	4633      	mov	r3, r6
 801dbc6:	2264      	movs	r2, #100	; 0x64
 801dbc8:	4631      	mov	r1, r6
 801dbca:	4658      	mov	r0, fp
 801dbcc:	f7f2 f8ea 	bl	800fda4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    songProgress.setCenter(92, 92);
 801dbd0:	225c      	movs	r2, #92	; 0x5c
 801dbd2:	4611      	mov	r1, r2
 801dbd4:	4648      	mov	r0, r9
 801dbd6:	f7f2 f9df 	bl	800ff98 <_ZN8touchgfx14CircleProgress9setCenterEii>
    songProgress.setRadius(82);
 801dbda:	2152      	movs	r1, #82	; 0x52
 801dbdc:	4648      	mov	r0, r9
 801dbde:	f7f2 f9f3 	bl	800ffc8 <_ZN8touchgfx14CircleProgress9setRadiusEi>
    songProgress.setLineWidth(16);
 801dbe2:	2110      	movs	r1, #16
 801dbe4:	4648      	mov	r0, r9
 801dbe6:	f7f2 f9fb 	bl	800ffe0 <_ZN8touchgfx14CircleProgress12setLineWidthEi>
    songProgress.setStartEndAngle(0, 360);
 801dbea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801dbee:	4631      	mov	r1, r6
 801dbf0:	4648      	mov	r0, r9
 801dbf2:	f7f2 fa39 	bl	8010068 <_ZN8touchgfx14CircleProgress16setStartEndAngleEii>
    songProgress.setCapPrecision(180);
 801dbf6:	21b4      	movs	r1, #180	; 0xb4
 801dbf8:	4648      	mov	r0, r9
 801dbfa:	f7f2 fa30 	bl	801005e <_ZN8touchgfx14CircleProgress15setCapPrecisionEi>
 801dbfe:	a928      	add	r1, sp, #160	; 0xa0
 801dc00:	2305      	movs	r3, #5
 801dc02:	f821 3d38 	strh.w	r3, [r1, #-56]!
    songProgress.setBackground(Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_FULL_ID));
 801dc06:	f8cd b020 	str.w	fp, [sp, #32]
 801dc0a:	4658      	mov	r0, fp
 801dc0c:	f7f2 f8bd 	bl	800fd8a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
 801dc10:	a928      	add	r1, sp, #160	; 0xa0
 801dc12:	2306      	movs	r3, #6
 801dc14:	f821 3d34 	strh.w	r3, [r1, #-52]!
    songProgressPainter.setBitmap(Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_LARGE_CIRCLE_INDICATOR_FILL_LINE_FULL_ID));
 801dc18:	4650      	mov	r0, sl
 801dc1a:	f7f6 f951 	bl	8013ec0 <_ZN8touchgfx19PainterRGB565Bitmap9setBitmapERKNS_6BitmapE>
    songProgress.setPainter(songProgressPainter);
 801dc1e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 801dc22:	4648      	mov	r0, r9
 801dc24:	f7f2 fa0c 	bl	8010040 <_ZN8touchgfx14CircleProgress10setPainterERNS_15AbstractPainterE>
    songProgress.setValue(60);
 801dc28:	213c      	movs	r1, #60	; 0x3c
 801dc2a:	4648      	mov	r0, r9
 801dc2c:	f7f2 fa94 	bl	8010158 <_ZN8touchgfx14CircleProgress8setValueEi>
 801dc30:	e018      	b.n	801dc64 <_ZN15Screen3ViewBaseC1Ev+0x37c>
 801dc32:	bf00      	nop
 801dc34:	08027ed0 	.word	0x08027ed0
 801dc38:	08027054 	.word	0x08027054
 801dc3c:	08027174 	.word	0x08027174
 801dc40:	080269c4 	.word	0x080269c4
 801dc44:	0801d7ff 	.word	0x0801d7ff
 801dc48:	08027e9c 	.word	0x08027e9c
 801dc4c:	0801d833 	.word	0x0801d833
 801dc50:	08027eb4 	.word	0x08027eb4
 801dc54:	2000bb94 	.word	0x2000bb94
 801dc58:	2000bb98 	.word	0x2000bb98
 801dc5c:	2000baf4 	.word	0x2000baf4
 801dc60:	08027ec4 	.word	0x08027ec4
    buttonPrev.setXY(225, 132);
 801dc64:	f504 7037 	add.w	r0, r4, #732	; 0x2dc
        setX(x);
 801dc68:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 801dc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc6e:	21e1      	movs	r1, #225	; 0xe1
 801dc70:	4681      	mov	r9, r0
 801dc72:	4798      	blx	r3
        setY(y);
 801dc74:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 801dc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc7a:	2184      	movs	r1, #132	; 0x84
 801dc7c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801dc80:	4648      	mov	r0, r9
 801dc82:	4798      	blx	r3
 801dc84:	f8ad 6070 	strh.w	r6, [sp, #112]	; 0x70
 801dc88:	f04f 0a01 	mov.w	sl, #1
 801dc8c:	f8ad a074 	strh.w	sl, [sp, #116]	; 0x74
 801dc90:	2302      	movs	r3, #2
 801dc92:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 801dc96:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    buttonPrev.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 801dc9a:	ab1f      	add	r3, sp, #124	; 0x7c
 801dc9c:	9300      	str	r3, [sp, #0]
 801dc9e:	ab1e      	add	r3, sp, #120	; 0x78
 801dca0:	aa1d      	add	r2, sp, #116	; 0x74
 801dca2:	a91c      	add	r1, sp, #112	; 0x70
 801dca4:	4640      	mov	r0, r8
 801dca6:	f7f2 fbb9 	bl	801041c <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 801dcaa:	f04f 0b16 	mov.w	fp, #22
 801dcae:	f8a4 b314 	strh.w	fp, [r4, #788]	; 0x314
        iconY = y;
 801dcb2:	f04f 090f 	mov.w	r9, #15
 801dcb6:	f8a4 9316 	strh.w	r9, [r4, #790]	; 0x316
    buttonPrev.setAction(buttonCallback);
 801dcba:	f504 7873 	add.w	r8, r4, #972	; 0x3cc
        action = &callback;
 801dcbe:	f8c4 8304 	str.w	r8, [r4, #772]	; 0x304
    buttonPlay.setXY(300, 132);
 801dcc2:	f504 7246 	add.w	r2, r4, #792	; 0x318
        setX(x);
 801dcc6:	f8d4 3318 	ldr.w	r3, [r4, #792]	; 0x318
 801dcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dccc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801dcd0:	9206      	str	r2, [sp, #24]
 801dcd2:	4610      	mov	r0, r2
 801dcd4:	4798      	blx	r3
        setY(y);
 801dcd6:	f8d4 3318 	ldr.w	r3, [r4, #792]	; 0x318
 801dcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcdc:	2184      	movs	r1, #132	; 0x84
 801dcde:	9806      	ldr	r0, [sp, #24]
 801dce0:	4798      	blx	r3
 801dce2:	f8ad 6080 	strh.w	r6, [sp, #128]	; 0x80
 801dce6:	f8ad a084 	strh.w	sl, [sp, #132]	; 0x84
 801dcea:	2303      	movs	r3, #3
 801dcec:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
 801dcf0:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    buttonPlay.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_GO_NEXT_32_ID), Bitmap(BITMAP_BLUE_ICONS_GO_NEXT_32_ID));
 801dcf4:	ab23      	add	r3, sp, #140	; 0x8c
 801dcf6:	9300      	str	r3, [sp, #0]
 801dcf8:	ab22      	add	r3, sp, #136	; 0x88
 801dcfa:	aa21      	add	r2, sp, #132	; 0x84
 801dcfc:	a920      	add	r1, sp, #128	; 0x80
 801dcfe:	4638      	mov	r0, r7
 801dd00:	f7f2 fb8c 	bl	801041c <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 801dd04:	f8a4 9350 	strh.w	r9, [r4, #848]	; 0x350
        iconY = y;
 801dd08:	2310      	movs	r3, #16
 801dd0a:	f8a4 3352 	strh.w	r3, [r4, #850]	; 0x352
 801dd0e:	f8c4 8340 	str.w	r8, [r4, #832]	; 0x340
    buttonNext.setXY(375, 132);
 801dd12:	f504 7755 	add.w	r7, r4, #852	; 0x354
        setX(x);
 801dd16:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801dd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd1c:	f240 1177 	movw	r1, #375	; 0x177
 801dd20:	4638      	mov	r0, r7
 801dd22:	4798      	blx	r3
        setY(y);
 801dd24:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801dd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd2a:	2184      	movs	r1, #132	; 0x84
 801dd2c:	4638      	mov	r0, r7
 801dd2e:	4798      	blx	r3
 801dd30:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
 801dd34:	f8ad a094 	strh.w	sl, [sp, #148]	; 0x94
 801dd38:	2304      	movs	r3, #4
 801dd3a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 801dd3e:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    buttonNext.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_ID), Bitmap(BITMAP_BLUE_BUTTONS_SQUARE_ICON_BUTTON_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
 801dd42:	ab27      	add	r3, sp, #156	; 0x9c
 801dd44:	9300      	str	r3, [sp, #0]
 801dd46:	ab26      	add	r3, sp, #152	; 0x98
 801dd48:	aa25      	add	r2, sp, #148	; 0x94
 801dd4a:	a924      	add	r1, sp, #144	; 0x90
 801dd4c:	9807      	ldr	r0, [sp, #28]
 801dd4e:	f7f2 fb65 	bl	801041c <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
        iconX = x;
 801dd52:	f8a4 b38c 	strh.w	fp, [r4, #908]	; 0x38c
        iconY = y;
 801dd56:	f8a4 938e 	strh.w	r9, [r4, #910]	; 0x38e
 801dd5a:	f8c4 837c 	str.w	r8, [r4, #892]	; 0x37c
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
    {
        container.add(d);
 801dd5e:	1d26      	adds	r6, r4, #4
 801dd60:	4629      	mov	r1, r5
 801dd62:	4630      	mov	r0, r6
 801dd64:	f7f1 f958 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801dd68:	9903      	ldr	r1, [sp, #12]
 801dd6a:	4630      	mov	r0, r6
 801dd6c:	f7f1 f954 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801dd70:	9904      	ldr	r1, [sp, #16]
 801dd72:	4630      	mov	r0, r6
 801dd74:	f7f1 f950 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801dd78:	9905      	ldr	r1, [sp, #20]
 801dd7a:	4630      	mov	r0, r6
 801dd7c:	f7f1 f94c 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801dd80:	9908      	ldr	r1, [sp, #32]
 801dd82:	4630      	mov	r0, r6
 801dd84:	f7f1 f948 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801dd88:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dd8a:	4630      	mov	r0, r6
 801dd8c:	f7f1 f944 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801dd90:	9906      	ldr	r1, [sp, #24]
 801dd92:	4630      	mov	r0, r6
 801dd94:	f7f1 f940 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801dd98:	4639      	mov	r1, r7
 801dd9a:	4630      	mov	r0, r6
 801dd9c:	f7f1 f93c 	bl	800f018 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 801dda0:	4620      	mov	r0, r4
 801dda2:	b029      	add	sp, #164	; 0xa4
 801dda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801dda8:	4b05      	ldr	r3, [pc, #20]	; (801ddc0 <_ZN15Screen3ViewBaseC1Ev+0x4d8>)
 801ddaa:	4a06      	ldr	r2, [pc, #24]	; (801ddc4 <_ZN15Screen3ViewBaseC1Ev+0x4dc>)
 801ddac:	21cf      	movs	r1, #207	; 0xcf
 801ddae:	4806      	ldr	r0, [pc, #24]	; (801ddc8 <_ZN15Screen3ViewBaseC1Ev+0x4e0>)
 801ddb0:	f007 fa2c 	bl	802520c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801ddb4:	4b05      	ldr	r3, [pc, #20]	; (801ddcc <_ZN15Screen3ViewBaseC1Ev+0x4e4>)
 801ddb6:	4a03      	ldr	r2, [pc, #12]	; (801ddc4 <_ZN15Screen3ViewBaseC1Ev+0x4dc>)
 801ddb8:	21d0      	movs	r1, #208	; 0xd0
 801ddba:	4803      	ldr	r0, [pc, #12]	; (801ddc8 <_ZN15Screen3ViewBaseC1Ev+0x4e0>)
 801ddbc:	f007 fa26 	bl	802520c <__assert_func>
 801ddc0:	08026a38 	.word	0x08026a38
 801ddc4:	08027f0c 	.word	0x08027f0c
 801ddc8:	08026a7c 	.word	0x08026a7c
 801ddcc:	08026acc 	.word	0x08026acc

0801ddd0 <_ZN15Screen3ViewBaseD1Ev>:
    virtual ~Screen3ViewBase() {}
 801ddd0:	b510      	push	{r4, lr}
 801ddd2:	4604      	mov	r4, r0
 801ddd4:	4b0b      	ldr	r3, [pc, #44]	; (801de04 <_ZN15Screen3ViewBaseD1Ev+0x34>)
 801ddd6:	6003      	str	r3, [r0, #0]
    virtual ~AbstractPainterRGB565() {}
 801ddd8:	4b0b      	ldr	r3, [pc, #44]	; (801de08 <_ZN15Screen3ViewBaseD1Ev+0x38>)
 801ddda:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
 801ddde:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 801dde2:	f7f3 fa91 	bl	8011308 <_ZN8touchgfx15AbstractPainterD1Ev>
 801dde6:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801ddea:	f7f2 f917 	bl	801001c <_ZN8touchgfx14CircleProgressD1Ev>
 801ddee:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 801ddf2:	f7f1 f9fa 	bl	800f1ea <_ZN8touchgfx6SliderD1Ev>
 801ddf6:	f104 0070 	add.w	r0, r4, #112	; 0x70
 801ddfa:	f7f2 fd0d 	bl	8010818 <_ZN8touchgfx13ScalableImageD1Ev>
 801ddfe:	4620      	mov	r0, r4
 801de00:	bd10      	pop	{r4, pc}
 801de02:	bf00      	nop
 801de04:	08027ed0 	.word	0x08027ed0
 801de08:	08027210 	.word	0x08027210

0801de0c <_ZN15Screen3ViewBaseD0Ev>:
 801de0c:	b510      	push	{r4, lr}
 801de0e:	4604      	mov	r4, r0
 801de10:	4b0d      	ldr	r3, [pc, #52]	; (801de48 <_ZN15Screen3ViewBaseD0Ev+0x3c>)
 801de12:	6003      	str	r3, [r0, #0]
 801de14:	4b0d      	ldr	r3, [pc, #52]	; (801de4c <_ZN15Screen3ViewBaseD0Ev+0x40>)
 801de16:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
 801de1a:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 801de1e:	f7f3 fa73 	bl	8011308 <_ZN8touchgfx15AbstractPainterD1Ev>
 801de22:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801de26:	f7f2 f8f9 	bl	801001c <_ZN8touchgfx14CircleProgressD1Ev>
 801de2a:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 801de2e:	f7f1 f9dc 	bl	800f1ea <_ZN8touchgfx6SliderD1Ev>
 801de32:	f104 0070 	add.w	r0, r4, #112	; 0x70
 801de36:	f7f2 fcef 	bl	8010818 <_ZN8touchgfx13ScalableImageD1Ev>
 801de3a:	f242 010c 	movw	r1, #8204	; 0x200c
 801de3e:	4620      	mov	r0, r4
 801de40:	f007 f9c8 	bl	80251d4 <_ZdlPvj>
 801de44:	4620      	mov	r0, r4
 801de46:	bd10      	pop	{r4, pc}
 801de48:	08027ed0 	.word	0x08027ed0
 801de4c:	08027210 	.word	0x08027210

0801de50 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 801de50:	4800      	ldr	r0, [pc, #0]	; (801de54 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 801de52:	4770      	bx	lr
 801de54:	08027f3c 	.word	0x08027f3c

0801de58 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 801de58:	200c      	movs	r0, #12
 801de5a:	4770      	bx	lr

0801de5c <_Z41__static_initialization_and_destruction_0ii>:
    currentLanguage = id;
    currentLanguagePtr = languagesArray[currentLanguage];

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 801de5c:	2801      	cmp	r0, #1
 801de5e:	d000      	beq.n	801de62 <_Z41__static_initialization_and_destruction_0ii+0x6>
 801de60:	4770      	bx	lr
 801de62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801de66:	4299      	cmp	r1, r3
 801de68:	d1fa      	bne.n	801de60 <_Z41__static_initialization_and_destruction_0ii+0x4>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 801de6a:	4b02      	ldr	r3, [pc, #8]	; (801de74 <_Z41__static_initialization_and_destruction_0ii+0x18>)
 801de6c:	4a02      	ldr	r2, [pc, #8]	; (801de78 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 801de6e:	601a      	str	r2, [r3, #0]
}
 801de70:	e7f6      	b.n	801de60 <_Z41__static_initialization_and_destruction_0ii+0x4>
 801de72:	bf00      	nop
 801de74:	2000baf4 	.word	0x2000baf4
 801de78:	080c17e8 	.word	0x080c17e8

0801de7c <_ZN8touchgfx5Texts11setLanguageEt>:
{
 801de7c:	b538      	push	{r3, r4, r5, lr}
    currentLanguage = id;
 801de7e:	4b0a      	ldr	r3, [pc, #40]	; (801dea8 <_ZN8touchgfx5Texts11setLanguageEt+0x2c>)
 801de80:	8018      	strh	r0, [r3, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 801de82:	4b0a      	ldr	r3, [pc, #40]	; (801deac <_ZN8touchgfx5Texts11setLanguageEt+0x30>)
 801de84:	4a0a      	ldr	r2, [pc, #40]	; (801deb0 <_ZN8touchgfx5Texts11setLanguageEt+0x34>)
 801de86:	601a      	str	r2, [r3, #0]
    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 801de88:	f000 f838 	bl	801defc <_ZN17TypedTextDatabase11getInstanceEt>
 801de8c:	4605      	mov	r5, r0
 801de8e:	f000 f83b 	bl	801df08 <_ZN17TypedTextDatabase8getFontsEv>
 801de92:	4604      	mov	r4, r0
 801de94:	f000 f836 	bl	801df04 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 801de98:	4b06      	ldr	r3, [pc, #24]	; (801deb4 <_ZN8touchgfx5Texts11setLanguageEt+0x38>)
 801de9a:	601d      	str	r5, [r3, #0]
        fonts = f;
 801de9c:	4b06      	ldr	r3, [pc, #24]	; (801deb8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>)
 801de9e:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
 801dea0:	4b06      	ldr	r3, [pc, #24]	; (801debc <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801dea2:	8018      	strh	r0, [r3, #0]
}
 801dea4:	bd38      	pop	{r3, r4, r5, pc}
 801dea6:	bf00      	nop
 801dea8:	2000baf0 	.word	0x2000baf0
 801deac:	2000baf4 	.word	0x2000baf4
 801deb0:	080c17e8 	.word	0x080c17e8
 801deb4:	2000bb94 	.word	0x2000bb94
 801deb8:	2000bb9c 	.word	0x2000bb9c
 801debc:	2000bb98 	.word	0x2000bb98

0801dec0 <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 801dec0:	b508      	push	{r3, lr}
 801dec2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801dec6:	2001      	movs	r0, #1
 801dec8:	f7ff ffc8 	bl	801de5c <_Z41__static_initialization_and_destruction_0ii>
 801decc:	bd08      	pop	{r3, pc}
	...

0801ded0 <_Z41__static_initialization_and_destruction_0ii>:

const touchgfx::Font* const* getFonts()
{
    return _fonts;
}
}
 801ded0:	2801      	cmp	r0, #1
 801ded2:	d000      	beq.n	801ded6 <_Z41__static_initialization_and_destruction_0ii+0x6>
 801ded4:	4770      	bx	lr
 801ded6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801deda:	4299      	cmp	r1, r3
 801dedc:	d1fa      	bne.n	801ded4 <_Z41__static_initialization_and_destruction_0ii+0x4>
 801dede:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 801dee0:	f7ff facc 	bl	801d47c <_Z23getFont_verdana_20_4bppv>
};
 801dee4:	4c04      	ldr	r4, [pc, #16]	; (801def8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 801dee6:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 801dee8:	f7ff fafa 	bl	801d4e0 <_Z23getFont_verdana_40_4bppv>
};
 801deec:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 801deee:	f7ff fa95 	bl	801d41c <_Z23getFont_verdana_10_4bppv>
};
 801def2:	60a0      	str	r0, [r4, #8]
}
 801def4:	bd10      	pop	{r4, pc}
 801def6:	bf00      	nop
 801def8:	2000baf8 	.word	0x2000baf8

0801defc <_ZN17TypedTextDatabase11getInstanceEt>:
}
 801defc:	4800      	ldr	r0, [pc, #0]	; (801df00 <_ZN17TypedTextDatabase11getInstanceEt+0x4>)
 801defe:	4770      	bx	lr
 801df00:	080c180c 	.word	0x080c180c

0801df04 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 801df04:	2002      	movs	r0, #2
 801df06:	4770      	bx	lr

0801df08 <_ZN17TypedTextDatabase8getFontsEv>:
}
 801df08:	4800      	ldr	r0, [pc, #0]	; (801df0c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 801df0a:	4770      	bx	lr
 801df0c:	2000baf8 	.word	0x2000baf8

0801df10 <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
}
 801df10:	b508      	push	{r3, lr}
 801df12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801df16:	2001      	movs	r0, #1
 801df18:	f7ff ffda 	bl	801ded0 <_Z41__static_initialization_and_destruction_0ii>
 801df1c:	bd08      	pop	{r3, pc}

0801df1e <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801df1e:	4770      	bx	lr

0801df20 <_ZN19FrontendApplicationD0Ev>:
 801df20:	b510      	push	{r4, lr}
 801df22:	4604      	mov	r4, r0
 801df24:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801df28:	f007 f954 	bl	80251d4 <_ZdlPvj>
 801df2c:	4620      	mov	r0, r4
 801df2e:	bd10      	pop	{r4, pc}

0801df30 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801df30:	b510      	push	{r4, lr}
 801df32:	4604      	mov	r4, r0
    {
        model.tick();
 801df34:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801df38:	f000 f811 	bl	801df5e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801df3c:	4620      	mov	r0, r4
 801df3e:	f002 fee5 	bl	8020d0c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801df42:	bd10      	pop	{r4, pc}

0801df44 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801df44:	b510      	push	{r4, lr}
 801df46:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 801df48:	f7ff fb50 	bl	801d5ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801df4c:	4b01      	ldr	r3, [pc, #4]	; (801df54 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 801df4e:	6023      	str	r3, [r4, #0]
{
}
 801df50:	4620      	mov	r0, r4
 801df52:	bd10      	pop	{r4, pc}
 801df54:	08028034 	.word	0x08028034

0801df58 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801df58:	2200      	movs	r2, #0
 801df5a:	6002      	str	r2, [r0, #0]
{
}
 801df5c:	4770      	bx	lr

0801df5e <_ZN5Model4tickEv>:

void Model::tick()
{
}
 801df5e:	4770      	bx	lr

0801df60 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 801df60:	4770      	bx	lr

0801df62 <_ZThn4_N16Screen3PresenterD1Ev>:
 801df62:	3804      	subs	r0, #4
 801df64:	4770      	bx	lr

0801df66 <_ZN16Screen3Presenter8activateEv>:
}

void Screen3Presenter::activate()
{

}
 801df66:	4770      	bx	lr

0801df68 <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{

}
 801df68:	4770      	bx	lr

0801df6a <_ZN16Screen3PresenterD0Ev>:
 801df6a:	b510      	push	{r4, lr}
 801df6c:	4604      	mov	r4, r0
 801df6e:	2110      	movs	r1, #16
 801df70:	f007 f930 	bl	80251d4 <_ZdlPvj>
 801df74:	4620      	mov	r0, r4
 801df76:	bd10      	pop	{r4, pc}

0801df78 <_ZThn4_N16Screen3PresenterD0Ev>:
 801df78:	b510      	push	{r4, lr}
 801df7a:	1f04      	subs	r4, r0, #4
 801df7c:	2110      	movs	r1, #16
 801df7e:	4620      	mov	r0, r4
 801df80:	f007 f928 	bl	80251d4 <_ZdlPvj>
 801df84:	4620      	mov	r0, r4
 801df86:	bd10      	pop	{r4, pc}

0801df88 <_ZN16Screen3PresenterC1ER11Screen3View>:
Screen3Presenter::Screen3Presenter(Screen3View& v)
 801df88:	b410      	push	{r4}
    ModelListener() : model(0) {}
 801df8a:	2200      	movs	r2, #0
 801df8c:	6082      	str	r2, [r0, #8]
    : view(v)
 801df8e:	4a05      	ldr	r2, [pc, #20]	; (801dfa4 <_ZN16Screen3PresenterC1ER11Screen3View+0x1c>)
 801df90:	f102 0408 	add.w	r4, r2, #8
 801df94:	6004      	str	r4, [r0, #0]
 801df96:	3220      	adds	r2, #32
 801df98:	6042      	str	r2, [r0, #4]
 801df9a:	60c1      	str	r1, [r0, #12]
}
 801df9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfa0:	4770      	bx	lr
 801dfa2:	bf00      	nop
 801dfa4:	08028068 	.word	0x08028068

0801dfa8 <_ZN11Screen3View14tearDownScreenEv>:
}

void Screen3View::tearDownScreen()
{
    Screen3ViewBase::tearDownScreen();
}
 801dfa8:	4770      	bx	lr

0801dfaa <_ZN11Screen3View12playPrevSongEv>:

void Screen3View::playPrevSong()
{

}
 801dfaa:	4770      	bx	lr

0801dfac <_ZN11Screen3View12playNextSongEv>:
void Screen3View::playNextSong()
{

}
 801dfac:	4770      	bx	lr

0801dfae <_ZN11Screen3View16moveSongPositionEi>:
	songName.invalidate();
}
void Screen3View::moveSongPosition(int value)
{

}
 801dfae:	4770      	bx	lr

0801dfb0 <_ZN11Screen3View11setupScreenEv>:
{
 801dfb0:	b508      	push	{r3, lr}
    Screen3ViewBase::setupScreen();
 801dfb2:	f7ff fc23 	bl	801d7fc <_ZN15Screen3ViewBase11setupScreenEv>
}
 801dfb6:	bd08      	pop	{r3, pc}

0801dfb8 <_ZN11Screen3View9playPauseEv>:
{
 801dfb8:	b538      	push	{r3, r4, r5, lr}
 801dfba:	4604      	mov	r4, r0
	char *fileNameBuffer = (char*)malloc(sizeof(char)*30);
 801dfbc:	201e      	movs	r0, #30
 801dfbe:	f007 f985 	bl	80252cc <malloc>
 801dfc2:	4605      	mov	r5, r0
	fr = getFileName(fileNameBuffer);
 801dfc4:	f7fc fe72 	bl	801acac <getFileName>
 801dfc8:	4b06      	ldr	r3, [pc, #24]	; (801dfe4 <_ZN11Screen3View9playPauseEv+0x2c>)
 801dfca:	7018      	strb	r0, [r3, #0]
	Unicode::fromUTF8((const uint8_t*) fileNameBuffer, songNameBuffer, 30);
 801dfcc:	221e      	movs	r2, #30
 801dfce:	f504 7164 	add.w	r1, r4, #912	; 0x390
 801dfd2:	4628      	mov	r0, r5
 801dfd4:	f004 fe88 	bl	8022ce8 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt>
	songName.invalidate();
 801dfd8:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 801dfdc:	f003 fbb9 	bl	8021752 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801dfe0:	bd38      	pop	{r3, r4, r5, pc}
 801dfe2:	bf00      	nop
 801dfe4:	2000bb04 	.word	0x2000bb04

0801dfe8 <_ZN11Screen3ViewC1Ev>:
Screen3View::Screen3View()
 801dfe8:	b510      	push	{r4, lr}
 801dfea:	4604      	mov	r4, r0
 801dfec:	f7ff fc7c 	bl	801d8e8 <_ZN15Screen3ViewBaseC1Ev>
 801dff0:	4b01      	ldr	r3, [pc, #4]	; (801dff8 <_ZN11Screen3ViewC1Ev+0x10>)
 801dff2:	6023      	str	r3, [r4, #0]
}
 801dff4:	4620      	mov	r0, r4
 801dff6:	bd10      	pop	{r4, pc}
 801dff8:	08028098 	.word	0x08028098

0801dffc <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 801dffc:	b510      	push	{r4, lr}
 801dffe:	4604      	mov	r4, r0
 801e000:	4b0b      	ldr	r3, [pc, #44]	; (801e030 <_ZN11Screen3ViewD1Ev+0x34>)
 801e002:	6003      	str	r3, [r0, #0]
 801e004:	4b0b      	ldr	r3, [pc, #44]	; (801e034 <_ZN11Screen3ViewD1Ev+0x38>)
 801e006:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
 801e00a:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 801e00e:	f7f3 f97b 	bl	8011308 <_ZN8touchgfx15AbstractPainterD1Ev>
 801e012:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801e016:	f7f2 f801 	bl	801001c <_ZN8touchgfx14CircleProgressD1Ev>
 801e01a:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 801e01e:	f7f1 f8e4 	bl	800f1ea <_ZN8touchgfx6SliderD1Ev>
 801e022:	f104 0070 	add.w	r0, r4, #112	; 0x70
 801e026:	f7f2 fbf7 	bl	8010818 <_ZN8touchgfx13ScalableImageD1Ev>
 801e02a:	4620      	mov	r0, r4
 801e02c:	bd10      	pop	{r4, pc}
 801e02e:	bf00      	nop
 801e030:	08027ed0 	.word	0x08027ed0
 801e034:	08027210 	.word	0x08027210

0801e038 <_ZN11Screen3ViewD0Ev>:
 801e038:	b510      	push	{r4, lr}
 801e03a:	4604      	mov	r4, r0
 801e03c:	4b0d      	ldr	r3, [pc, #52]	; (801e074 <_ZN11Screen3ViewD0Ev+0x3c>)
 801e03e:	6003      	str	r3, [r0, #0]
 801e040:	4b0d      	ldr	r3, [pc, #52]	; (801e078 <_ZN11Screen3ViewD0Ev+0x40>)
 801e042:	f8c0 32b0 	str.w	r3, [r0, #688]	; 0x2b0
 801e046:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 801e04a:	f7f3 f95d 	bl	8011308 <_ZN8touchgfx15AbstractPainterD1Ev>
 801e04e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 801e052:	f7f1 ffe3 	bl	801001c <_ZN8touchgfx14CircleProgressD1Ev>
 801e056:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 801e05a:	f7f1 f8c6 	bl	800f1ea <_ZN8touchgfx6SliderD1Ev>
 801e05e:	f104 0070 	add.w	r0, r4, #112	; 0x70
 801e062:	f7f2 fbd9 	bl	8010818 <_ZN8touchgfx13ScalableImageD1Ev>
 801e066:	f242 010c 	movw	r1, #8204	; 0x200c
 801e06a:	4620      	mov	r0, r4
 801e06c:	f007 f8b2 	bl	80251d4 <_ZdlPvj>
 801e070:	4620      	mov	r0, r4
 801e072:	bd10      	pop	{r4, pc}
 801e074:	08027ed0 	.word	0x08027ed0
 801e078:	08027210 	.word	0x08027210

0801e07c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801e07c:	8880      	ldrh	r0, [r0, #4]
 801e07e:	4770      	bx	lr

0801e080 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801e080:	2300      	movs	r3, #0
 801e082:	8083      	strh	r3, [r0, #4]
 801e084:	4770      	bx	lr
	...

0801e088 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e08a:	6803      	ldr	r3, [r0, #0]
 801e08c:	460e      	mov	r6, r1
 801e08e:	2100      	movs	r1, #0
 801e090:	4604      	mov	r4, r0
 801e092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e094:	4798      	blx	r3
 801e096:	4605      	mov	r5, r0
 801e098:	6823      	ldr	r3, [r4, #0]
 801e09a:	4620      	mov	r0, r4
 801e09c:	1b75      	subs	r5, r6, r5
 801e09e:	6a1b      	ldr	r3, [r3, #32]
 801e0a0:	b2ad      	uxth	r5, r5
 801e0a2:	4798      	blx	r3
 801e0a4:	88a3      	ldrh	r3, [r4, #4]
 801e0a6:	fbb5 f0f0 	udiv	r0, r5, r0
 801e0aa:	4298      	cmp	r0, r3
 801e0ac:	b285      	uxth	r5, r0
 801e0ae:	db05      	blt.n	801e0bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 801e0b0:	4b0e      	ldr	r3, [pc, #56]	; (801e0ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801e0b2:	211e      	movs	r1, #30
 801e0b4:	4a0e      	ldr	r2, [pc, #56]	; (801e0f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801e0b6:	480f      	ldr	r0, [pc, #60]	; (801e0f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801e0b8:	f007 f8a8 	bl	802520c <__assert_func>
 801e0bc:	6823      	ldr	r3, [r4, #0]
 801e0be:	2100      	movs	r1, #0
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0c4:	4798      	blx	r3
 801e0c6:	4607      	mov	r7, r0
 801e0c8:	6823      	ldr	r3, [r4, #0]
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	1bf6      	subs	r6, r6, r7
 801e0ce:	6a1b      	ldr	r3, [r3, #32]
 801e0d0:	b2b6      	uxth	r6, r6
 801e0d2:	4798      	blx	r3
 801e0d4:	fbb6 f3f0 	udiv	r3, r6, r0
 801e0d8:	fb03 6610 	mls	r6, r3, r0, r6
 801e0dc:	b11e      	cbz	r6, 801e0e6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 801e0de:	4b06      	ldr	r3, [pc, #24]	; (801e0f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 801e0e0:	211f      	movs	r1, #31
 801e0e2:	4a03      	ldr	r2, [pc, #12]	; (801e0f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801e0e4:	e7e7      	b.n	801e0b6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 801e0e6:	4628      	mov	r0, r5
 801e0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0ea:	bf00      	nop
 801e0ec:	080280d4 	.word	0x080280d4
 801e0f0:	08028242 	.word	0x08028242
 801e0f4:	080280e9 	.word	0x080280e9
 801e0f8:	08028117 	.word	0x08028117

0801e0fc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801e0fc:	b538      	push	{r3, r4, r5, lr}
 801e0fe:	6803      	ldr	r3, [r0, #0]
 801e100:	460d      	mov	r5, r1
 801e102:	4604      	mov	r4, r0
 801e104:	6a1b      	ldr	r3, [r3, #32]
 801e106:	4798      	blx	r3
 801e108:	4285      	cmp	r5, r0
 801e10a:	d905      	bls.n	801e118 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801e10c:	4b0c      	ldr	r3, [pc, #48]	; (801e140 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801e10e:	212f      	movs	r1, #47	; 0x2f
 801e110:	4a0c      	ldr	r2, [pc, #48]	; (801e144 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801e112:	480d      	ldr	r0, [pc, #52]	; (801e148 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801e114:	f007 f87a 	bl	802520c <__assert_func>
 801e118:	6823      	ldr	r3, [r4, #0]
 801e11a:	4620      	mov	r0, r4
 801e11c:	88a5      	ldrh	r5, [r4, #4]
 801e11e:	69db      	ldr	r3, [r3, #28]
 801e120:	4798      	blx	r3
 801e122:	4285      	cmp	r5, r0
 801e124:	db03      	blt.n	801e12e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801e126:	4b09      	ldr	r3, [pc, #36]	; (801e14c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801e128:	2130      	movs	r1, #48	; 0x30
 801e12a:	4a06      	ldr	r2, [pc, #24]	; (801e144 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801e12c:	e7f1      	b.n	801e112 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801e12e:	6823      	ldr	r3, [r4, #0]
 801e130:	4620      	mov	r0, r4
 801e132:	88a1      	ldrh	r1, [r4, #4]
 801e134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e136:	4798      	blx	r3
 801e138:	88a3      	ldrh	r3, [r4, #4]
 801e13a:	3301      	adds	r3, #1
 801e13c:	80a3      	strh	r3, [r4, #4]
 801e13e:	bd38      	pop	{r3, r4, r5, pc}
 801e140:	08028191 	.word	0x08028191
 801e144:	08028285 	.word	0x08028285
 801e148:	080280e9 	.word	0x080280e9
 801e14c:	080281a8 	.word	0x080281a8

0801e150 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801e150:	b570      	push	{r4, r5, r6, lr}
 801e152:	6803      	ldr	r3, [r0, #0]
 801e154:	4616      	mov	r6, r2
 801e156:	4604      	mov	r4, r0
 801e158:	460d      	mov	r5, r1
 801e15a:	6a1b      	ldr	r3, [r3, #32]
 801e15c:	4798      	blx	r3
 801e15e:	4286      	cmp	r6, r0
 801e160:	d905      	bls.n	801e16e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801e162:	4b06      	ldr	r3, [pc, #24]	; (801e17c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801e164:	2139      	movs	r1, #57	; 0x39
 801e166:	4a06      	ldr	r2, [pc, #24]	; (801e180 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801e168:	4806      	ldr	r0, [pc, #24]	; (801e184 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801e16a:	f007 f84f 	bl	802520c <__assert_func>
 801e16e:	6823      	ldr	r3, [r4, #0]
 801e170:	4629      	mov	r1, r5
 801e172:	4620      	mov	r0, r4
 801e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e17a:	4718      	bx	r3
 801e17c:	08028191 	.word	0x08028191
 801e180:	080281f8 	.word	0x080281f8
 801e184:	080280e9 	.word	0x080280e9

0801e188 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801e188:	4770      	bx	lr
	...

0801e18c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801e18c:	4a02      	ldr	r2, [pc, #8]	; (801e198 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801e18e:	6002      	str	r2, [r0, #0]
 801e190:	2200      	movs	r2, #0
 801e192:	8082      	strh	r2, [r0, #4]
 801e194:	4770      	bx	lr
 801e196:	bf00      	nop
 801e198:	080281cc 	.word	0x080281cc

0801e19c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801e19c:	2301      	movs	r3, #1
 801e19e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801e1a2:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801e1a6:	4770      	bx	lr

0801e1a8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801e1a8:	2301      	movs	r3, #1
 801e1aa:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801e1ae:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801e1b2:	4770      	bx	lr

0801e1b4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801e1b4:	6843      	ldr	r3, [r0, #4]
 801e1b6:	2201      	movs	r2, #1
 801e1b8:	725a      	strb	r2, [r3, #9]
 801e1ba:	6840      	ldr	r0, [r0, #4]
 801e1bc:	6803      	ldr	r3, [r0, #0]
 801e1be:	691b      	ldr	r3, [r3, #16]
 801e1c0:	4718      	bx	r3

0801e1c2 <_ZN8touchgfx3HAL8flushDMAEv>:
 801e1c2:	6840      	ldr	r0, [r0, #4]
 801e1c4:	6803      	ldr	r3, [r0, #0]
 801e1c6:	689b      	ldr	r3, [r3, #8]
 801e1c8:	4718      	bx	r3

0801e1ca <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801e1ca:	4770      	bx	lr

0801e1cc <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 801e1cc:	4608      	mov	r0, r1
 801e1ce:	4770      	bx	lr

0801e1d0 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 801e1d0:	4770      	bx	lr
	...

0801e1d4 <_ZN8touchgfx3HAL10beginFrameEv>:
 801e1d4:	4b04      	ldr	r3, [pc, #16]	; (801e1e8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801e1d6:	781b      	ldrb	r3, [r3, #0]
 801e1d8:	b123      	cbz	r3, 801e1e4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801e1da:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 801e1de:	f080 0001 	eor.w	r0, r0, #1
 801e1e2:	4770      	bx	lr
 801e1e4:	2001      	movs	r0, #1
 801e1e6:	4770      	bx	lr
 801e1e8:	2000bb10 	.word	0x2000bb10

0801e1ec <_ZN8touchgfx3HAL8endFrameEv>:
 801e1ec:	b510      	push	{r4, lr}
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	6840      	ldr	r0, [r0, #4]
 801e1f2:	6803      	ldr	r3, [r0, #0]
 801e1f4:	689b      	ldr	r3, [r3, #8]
 801e1f6:	4798      	blx	r3
 801e1f8:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801e1fc:	b113      	cbz	r3, 801e204 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801e1fe:	2301      	movs	r3, #1
 801e200:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801e204:	bd10      	pop	{r4, pc}

0801e206 <_ZN8touchgfx3HAL9taskEntryEv>:
 801e206:	b508      	push	{r3, lr}
 801e208:	6803      	ldr	r3, [r0, #0]
 801e20a:	4604      	mov	r4, r0
 801e20c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e20e:	4798      	blx	r3
 801e210:	6823      	ldr	r3, [r4, #0]
 801e212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e214:	4620      	mov	r0, r4
 801e216:	4798      	blx	r3
 801e218:	f7f5 ff3c 	bl	8014094 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801e21c:	6823      	ldr	r3, [r4, #0]
 801e21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e220:	e7f8      	b.n	801e214 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801e224 <_ZN8touchgfx3HAL4tickEv>:
 801e224:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801e226:	6803      	ldr	r3, [r0, #0]
 801e228:	4604      	mov	r4, r0
 801e22a:	4d5d      	ldr	r5, [pc, #372]	; (801e3a0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801e22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e230:	4798      	blx	r3
 801e232:	2800      	cmp	r0, #0
 801e234:	f000 8092 	beq.w	801e35c <_ZN8touchgfx3HAL4tickEv+0x138>
 801e238:	2001      	movs	r0, #1
 801e23a:	2600      	movs	r6, #0
 801e23c:	f7fb fd95 	bl	8019d6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801e240:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801e244:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 801e248:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801e24c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801e250:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801e254:	b133      	cbz	r3, 801e264 <_ZN8touchgfx3HAL4tickEv+0x40>
 801e256:	6823      	ldr	r3, [r4, #0]
 801e258:	4620      	mov	r0, r4
 801e25a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e25e:	4798      	blx	r3
 801e260:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801e264:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801e268:	2601      	movs	r6, #1
 801e26a:	6862      	ldr	r2, [r4, #4]
 801e26c:	f083 0301 	eor.w	r3, r3, #1
 801e270:	702e      	strb	r6, [r5, #0]
 801e272:	7253      	strb	r3, [r2, #9]
 801e274:	f002 fecc 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 801e278:	6803      	ldr	r3, [r0, #0]
 801e27a:	4631      	mov	r1, r6
 801e27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e27e:	4798      	blx	r3
 801e280:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801e284:	b90b      	cbnz	r3, 801e28a <_ZN8touchgfx3HAL4tickEv+0x66>
 801e286:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 801e28a:	f002 fec1 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 801e28e:	6803      	ldr	r3, [r0, #0]
 801e290:	695b      	ldr	r3, [r3, #20]
 801e292:	4798      	blx	r3
 801e294:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801e296:	6803      	ldr	r3, [r0, #0]
 801e298:	691b      	ldr	r3, [r3, #16]
 801e29a:	4798      	blx	r3
 801e29c:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801e2a0:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801e2a4:	3b01      	subs	r3, #1
 801e2a6:	b2db      	uxtb	r3, r3
 801e2a8:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801e2ac:	b10a      	cbz	r2, 801e2b2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d1eb      	bne.n	801e28a <_ZN8touchgfx3HAL4tickEv+0x66>
 801e2b2:	4a3c      	ldr	r2, [pc, #240]	; (801e3a4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801e2b4:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 801e2b8:	7813      	ldrb	r3, [r2, #0]
 801e2ba:	3301      	adds	r3, #1
 801e2bc:	b25b      	sxtb	r3, r3
 801e2be:	4299      	cmp	r1, r3
 801e2c0:	7013      	strb	r3, [r2, #0]
 801e2c2:	dc10      	bgt.n	801e2e6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	68e0      	ldr	r0, [r4, #12]
 801e2c8:	a902      	add	r1, sp, #8
 801e2ca:	7013      	strb	r3, [r2, #0]
 801e2cc:	aa03      	add	r2, sp, #12
 801e2ce:	6803      	ldr	r3, [r0, #0]
 801e2d0:	68db      	ldr	r3, [r3, #12]
 801e2d2:	4798      	blx	r3
 801e2d4:	6823      	ldr	r3, [r4, #0]
 801e2d6:	2800      	cmp	r0, #0
 801e2d8:	d04c      	beq.n	801e374 <_ZN8touchgfx3HAL4tickEv+0x150>
 801e2da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e2de:	4620      	mov	r0, r4
 801e2e0:	9a03      	ldr	r2, [sp, #12]
 801e2e2:	9902      	ldr	r1, [sp, #8]
 801e2e4:	4798      	blx	r3
 801e2e6:	2300      	movs	r3, #0
 801e2e8:	6960      	ldr	r0, [r4, #20]
 801e2ea:	f88d 3007 	strb.w	r3, [sp, #7]
 801e2ee:	b130      	cbz	r0, 801e2fe <_ZN8touchgfx3HAL4tickEv+0xda>
 801e2f0:	6803      	ldr	r3, [r0, #0]
 801e2f2:	f10d 0107 	add.w	r1, sp, #7
 801e2f6:	68db      	ldr	r3, [r3, #12]
 801e2f8:	4798      	blx	r3
 801e2fa:	2800      	cmp	r0, #0
 801e2fc:	d149      	bne.n	801e392 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801e2fe:	f104 0018 	add.w	r0, r4, #24
 801e302:	f006 fe61 	bl	8024fc8 <_ZN8touchgfx8Gestures4tickEv>
 801e306:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801e30a:	b30b      	cbz	r3, 801e350 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801e30c:	6920      	ldr	r0, [r4, #16]
 801e30e:	6803      	ldr	r3, [r0, #0]
 801e310:	691b      	ldr	r3, [r3, #16]
 801e312:	4798      	blx	r3
 801e314:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801e316:	4606      	mov	r6, r0
 801e318:	b903      	cbnz	r3, 801e31c <_ZN8touchgfx3HAL4tickEv+0xf8>
 801e31a:	6620      	str	r0, [r4, #96]	; 0x60
 801e31c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801e31e:	4a22      	ldr	r2, [pc, #136]	; (801e3a8 <_ZN8touchgfx3HAL4tickEv+0x184>)
 801e320:	1af3      	subs	r3, r6, r3
 801e322:	4293      	cmp	r3, r2
 801e324:	d914      	bls.n	801e350 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801e326:	6920      	ldr	r0, [r4, #16]
 801e328:	6803      	ldr	r3, [r0, #0]
 801e32a:	699b      	ldr	r3, [r3, #24]
 801e32c:	4798      	blx	r3
 801e32e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801e330:	2264      	movs	r2, #100	; 0x64
 801e332:	1af3      	subs	r3, r6, r3
 801e334:	fbb3 f3f2 	udiv	r3, r3, r2
 801e338:	fbb0 f0f3 	udiv	r0, r0, r3
 801e33c:	2800      	cmp	r0, #0
 801e33e:	dc1e      	bgt.n	801e37e <_ZN8touchgfx3HAL4tickEv+0x15a>
 801e340:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801e344:	6920      	ldr	r0, [r4, #16]
 801e346:	2100      	movs	r1, #0
 801e348:	6803      	ldr	r3, [r0, #0]
 801e34a:	69db      	ldr	r3, [r3, #28]
 801e34c:	4798      	blx	r3
 801e34e:	6626      	str	r6, [r4, #96]	; 0x60
 801e350:	f002 fe5e 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 801e354:	6803      	ldr	r3, [r0, #0]
 801e356:	2100      	movs	r1, #0
 801e358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e35a:	4798      	blx	r3
 801e35c:	6823      	ldr	r3, [r4, #0]
 801e35e:	4620      	mov	r0, r4
 801e360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e364:	4798      	blx	r3
 801e366:	2001      	movs	r0, #1
 801e368:	f7fb fd00 	bl	8019d6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801e36c:	2300      	movs	r3, #0
 801e36e:	702b      	strb	r3, [r5, #0]
 801e370:	b004      	add	sp, #16
 801e372:	bd70      	pop	{r4, r5, r6, pc}
 801e374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e378:	4620      	mov	r0, r4
 801e37a:	4798      	blx	r3
 801e37c:	e7b3      	b.n	801e2e6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801e37e:	2863      	cmp	r0, #99	; 0x63
 801e380:	bfcb      	itete	gt
 801e382:	2300      	movgt	r3, #0
 801e384:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801e388:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 801e38c:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 801e390:	e7d8      	b.n	801e344 <_ZN8touchgfx3HAL4tickEv+0x120>
 801e392:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801e394:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801e398:	6803      	ldr	r3, [r0, #0]
 801e39a:	68db      	ldr	r3, [r3, #12]
 801e39c:	4798      	blx	r3
 801e39e:	e7ae      	b.n	801e2fe <_ZN8touchgfx3HAL4tickEv+0xda>
 801e3a0:	2000bb18 	.word	0x2000bb18
 801e3a4:	2000bb19 	.word	0x2000bb19
 801e3a8:	05f5e100 	.word	0x05f5e100

0801e3ac <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801e3ac:	f7f5 be20 	b.w	8013ff0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801e3b0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801e3b0:	6481      	str	r1, [r0, #72]	; 0x48
 801e3b2:	3018      	adds	r0, #24
 801e3b4:	f006 be06 	b.w	8024fc4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801e3b8 <_ZN8touchgfx3HAL5touchEll>:
 801e3b8:	b530      	push	{r4, r5, lr}
 801e3ba:	b085      	sub	sp, #20
 801e3bc:	4604      	mov	r4, r0
 801e3be:	a802      	add	r0, sp, #8
 801e3c0:	9102      	str	r1, [sp, #8]
 801e3c2:	9203      	str	r2, [sp, #12]
 801e3c4:	f002 fb80 	bl	8020ac8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801e3c8:	a903      	add	r1, sp, #12
 801e3ca:	a802      	add	r0, sp, #8
 801e3cc:	f002 fbca 	bl	8020b64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801e3d0:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 801e3d4:	9d02      	ldr	r5, [sp, #8]
 801e3d6:	f104 0018 	add.w	r0, r4, #24
 801e3da:	9b03      	ldr	r3, [sp, #12]
 801e3dc:	b179      	cbz	r1, 801e3fe <_ZN8touchgfx3HAL5touchEll+0x46>
 801e3de:	b29b      	uxth	r3, r3
 801e3e0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801e3e4:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 801e3e8:	9300      	str	r3, [sp, #0]
 801e3ea:	b2ab      	uxth	r3, r5
 801e3ec:	f006 fdfa 	bl	8024fe4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801e3f0:	b118      	cbz	r0, 801e3fa <_ZN8touchgfx3HAL5touchEll+0x42>
 801e3f2:	9b02      	ldr	r3, [sp, #8]
 801e3f4:	64e3      	str	r3, [r4, #76]	; 0x4c
 801e3f6:	9b03      	ldr	r3, [sp, #12]
 801e3f8:	6523      	str	r3, [r4, #80]	; 0x50
 801e3fa:	b005      	add	sp, #20
 801e3fc:	bd30      	pop	{r4, r5, pc}
 801e3fe:	b29b      	uxth	r3, r3
 801e400:	b2aa      	uxth	r2, r5
 801e402:	f006 fe33 	bl	802506c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801e406:	2301      	movs	r3, #1
 801e408:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801e40c:	e7f1      	b.n	801e3f2 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801e40e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801e40e:	b530      	push	{r4, r5, lr}
 801e410:	2b00      	cmp	r3, #0
 801e412:	d04e      	beq.n	801e4b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801e414:	ea81 0002 	eor.w	r0, r1, r2
 801e418:	07c0      	lsls	r0, r0, #31
 801e41a:	d508      	bpl.n	801e42e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801e41c:	3a01      	subs	r2, #1
 801e41e:	440b      	add	r3, r1
 801e420:	4299      	cmp	r1, r3
 801e422:	d046      	beq.n	801e4b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801e424:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801e428:	f801 0b01 	strb.w	r0, [r1], #1
 801e42c:	e7f8      	b.n	801e420 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801e42e:	07d5      	lsls	r5, r2, #31
 801e430:	bf42      	ittt	mi
 801e432:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801e436:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801e43a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801e43e:	2b01      	cmp	r3, #1
 801e440:	d915      	bls.n	801e46e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801e442:	ea81 0002 	eor.w	r0, r1, r2
 801e446:	0784      	lsls	r4, r0, #30
 801e448:	d01f      	beq.n	801e48a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801e44a:	1e95      	subs	r5, r2, #2
 801e44c:	460c      	mov	r4, r1
 801e44e:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801e452:	f824 0b02 	strh.w	r0, [r4], #2
 801e456:	1b18      	subs	r0, r3, r4
 801e458:	4408      	add	r0, r1
 801e45a:	2801      	cmp	r0, #1
 801e45c:	d8f7      	bhi.n	801e44e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801e45e:	1e98      	subs	r0, r3, #2
 801e460:	f003 0301 	and.w	r3, r3, #1
 801e464:	f020 0001 	bic.w	r0, r0, #1
 801e468:	3002      	adds	r0, #2
 801e46a:	4401      	add	r1, r0
 801e46c:	4402      	add	r2, r0
 801e46e:	3a01      	subs	r2, #1
 801e470:	440b      	add	r3, r1
 801e472:	4299      	cmp	r1, r3
 801e474:	d01d      	beq.n	801e4b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801e476:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801e47a:	f801 0b01 	strb.w	r0, [r1], #1
 801e47e:	e7f8      	b.n	801e472 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 801e480:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801e484:	f840 4b04 	str.w	r4, [r0], #4
 801e488:	e008      	b.n	801e49c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801e48a:	0790      	lsls	r0, r2, #30
 801e48c:	d004      	beq.n	801e498 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 801e48e:	f832 0b02 	ldrh.w	r0, [r2], #2
 801e492:	3b02      	subs	r3, #2
 801e494:	f821 0b02 	strh.w	r0, [r1], #2
 801e498:	1f15      	subs	r5, r2, #4
 801e49a:	4608      	mov	r0, r1
 801e49c:	1a1c      	subs	r4, r3, r0
 801e49e:	440c      	add	r4, r1
 801e4a0:	2c03      	cmp	r4, #3
 801e4a2:	d8ed      	bhi.n	801e480 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 801e4a4:	f023 0003 	bic.w	r0, r3, #3
 801e4a8:	f003 0303 	and.w	r3, r3, #3
 801e4ac:	4402      	add	r2, r0
 801e4ae:	4401      	add	r1, r0
 801e4b0:	e7dd      	b.n	801e46e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801e4b2:	2001      	movs	r0, #1
 801e4b4:	bd30      	pop	{r4, r5, pc}

0801e4b6 <_ZN8touchgfx3HAL7noTouchEv>:
 801e4b6:	b510      	push	{r4, lr}
 801e4b8:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 801e4bc:	4604      	mov	r4, r0
 801e4be:	b153      	cbz	r3, 801e4d6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801e4c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801e4c4:	2101      	movs	r1, #1
 801e4c6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801e4ca:	3018      	adds	r0, #24
 801e4cc:	f006 fdce 	bl	802506c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801e4d6:	bd10      	pop	{r4, pc}

0801e4d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801e4d8:	4b07      	ldr	r3, [pc, #28]	; (801e4f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801e4da:	b510      	push	{r4, lr}
 801e4dc:	781b      	ldrb	r3, [r3, #0]
 801e4de:	4604      	mov	r4, r0
 801e4e0:	b12b      	cbz	r3, 801e4ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801e4e2:	6803      	ldr	r3, [r0, #0]
 801e4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4e6:	4798      	blx	r3
 801e4e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e4ea:	4283      	cmp	r3, r0
 801e4ec:	d001      	beq.n	801e4f2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801e4ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e4f0:	bd10      	pop	{r4, pc}
 801e4f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801e4f4:	bd10      	pop	{r4, pc}
 801e4f6:	bf00      	nop
 801e4f8:	2000bb10 	.word	0x2000bb10

0801e4fc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801e4fc:	4b0a      	ldr	r3, [pc, #40]	; (801e528 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801e4fe:	b510      	push	{r4, lr}
 801e500:	781b      	ldrb	r3, [r3, #0]
 801e502:	4604      	mov	r4, r0
 801e504:	b12b      	cbz	r3, 801e512 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801e506:	f7f5 fd69 	bl	8013fdc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801e50a:	4620      	mov	r0, r4
 801e50c:	f7ff ffe4 	bl	801e4d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801e510:	bd10      	pop	{r4, pc}
 801e512:	6840      	ldr	r0, [r0, #4]
 801e514:	f000 fb46 	bl	801eba4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801e518:	2800      	cmp	r0, #0
 801e51a:	d0f4      	beq.n	801e506 <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801e51c:	6862      	ldr	r2, [r4, #4]
 801e51e:	7a53      	ldrb	r3, [r2, #9]
 801e520:	2b00      	cmp	r3, #0
 801e522:	d0fc      	beq.n	801e51e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801e524:	e7ef      	b.n	801e506 <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801e526:	bf00      	nop
 801e528:	2000bb10 	.word	0x2000bb10

0801e52c <_ZN8touchgfx3HAL10initializeEv>:
 801e52c:	b510      	push	{r4, lr}
 801e52e:	4604      	mov	r4, r0
 801e530:	f7f5 fd3a 	bl	8013fa8 <_ZN8touchgfx10OSWrappers10initializeEv>
 801e534:	6860      	ldr	r0, [r4, #4]
 801e536:	6803      	ldr	r3, [r0, #0]
 801e538:	68db      	ldr	r3, [r3, #12]
 801e53a:	4798      	blx	r3
 801e53c:	68e0      	ldr	r0, [r4, #12]
 801e53e:	6803      	ldr	r3, [r0, #0]
 801e540:	689b      	ldr	r3, [r3, #8]
 801e542:	4798      	blx	r3
 801e544:	6823      	ldr	r3, [r4, #0]
 801e546:	4620      	mov	r0, r4
 801e548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e54e:	4718      	bx	r3

0801e550 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801e550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e552:	461d      	mov	r5, r3
 801e554:	4b0b      	ldr	r3, [pc, #44]	; (801e584 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801e556:	4617      	mov	r7, r2
 801e558:	460e      	mov	r6, r1
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	6898      	ldr	r0, [r3, #8]
 801e55e:	6803      	ldr	r3, [r0, #0]
 801e560:	6a1b      	ldr	r3, [r3, #32]
 801e562:	4798      	blx	r3
 801e564:	4b08      	ldr	r3, [pc, #32]	; (801e588 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 801e566:	2810      	cmp	r0, #16
 801e568:	bf15      	itete	ne
 801e56a:	881c      	ldrhne	r4, [r3, #0]
 801e56c:	8818      	ldrheq	r0, [r3, #0]
 801e56e:	fb07 6204 	mlane	r2, r7, r4, r6
 801e572:	fb07 6200 	mlaeq	r2, r7, r0, r6
 801e576:	bf16      	itet	ne
 801e578:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801e57c:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 801e580:	18a8      	addne	r0, r5, r2
 801e582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e584:	2000bb14 	.word	0x2000bb14
 801e588:	2000bb0c 	.word	0x2000bb0c

0801e58c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801e58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e590:	b088      	sub	sp, #32
 801e592:	4698      	mov	r8, r3
 801e594:	4617      	mov	r7, r2
 801e596:	2200      	movs	r2, #0
 801e598:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801e59c:	4604      	mov	r4, r0
 801e59e:	9206      	str	r2, [sp, #24]
 801e5a0:	2bff      	cmp	r3, #255	; 0xff
 801e5a2:	f88d 301c 	strb.w	r3, [sp, #28]
 801e5a6:	4b1d      	ldr	r3, [pc, #116]	; (801e61c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 801e5a8:	bf0c      	ite	eq
 801e5aa:	2201      	moveq	r2, #1
 801e5ac:	2204      	movne	r2, #4
 801e5ae:	881b      	ldrh	r3, [r3, #0]
 801e5b0:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801e5b4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801e5b8:	9201      	str	r2, [sp, #4]
 801e5ba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801e5be:	9102      	str	r1, [sp, #8]
 801e5c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e5c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e5c8:	f8ad 6010 	strh.w	r6, [sp, #16]
 801e5cc:	f8ad 5012 	strh.w	r5, [sp, #18]
 801e5d0:	f7ff ff82 	bl	801e4d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801e5d4:	4642      	mov	r2, r8
 801e5d6:	4603      	mov	r3, r0
 801e5d8:	4639      	mov	r1, r7
 801e5da:	4620      	mov	r0, r4
 801e5dc:	f7ff ffb8 	bl	801e550 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801e5e0:	9003      	str	r0, [sp, #12]
 801e5e2:	b106      	cbz	r6, 801e5e6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 801e5e4:	b935      	cbnz	r5, 801e5f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 801e5e6:	4b0e      	ldr	r3, [pc, #56]	; (801e620 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 801e5e8:	f240 1143 	movw	r1, #323	; 0x143
 801e5ec:	4a0d      	ldr	r2, [pc, #52]	; (801e624 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801e5ee:	480e      	ldr	r0, [pc, #56]	; (801e628 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 801e5f0:	f006 fe0c 	bl	802520c <__assert_func>
 801e5f4:	6823      	ldr	r3, [r4, #0]
 801e5f6:	4620      	mov	r0, r4
 801e5f8:	9d01      	ldr	r5, [sp, #4]
 801e5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5fc:	4798      	blx	r3
 801e5fe:	4228      	tst	r0, r5
 801e600:	d104      	bne.n	801e60c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 801e602:	4b0a      	ldr	r3, [pc, #40]	; (801e62c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 801e604:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801e608:	4a06      	ldr	r2, [pc, #24]	; (801e624 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801e60a:	e7f0      	b.n	801e5ee <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801e60c:	6860      	ldr	r0, [r4, #4]
 801e60e:	a901      	add	r1, sp, #4
 801e610:	6803      	ldr	r3, [r0, #0]
 801e612:	685b      	ldr	r3, [r3, #4]
 801e614:	4798      	blx	r3
 801e616:	b008      	add	sp, #32
 801e618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e61c:	2000bb0c 	.word	0x2000bb0c
 801e620:	08028331 	.word	0x08028331
 801e624:	08028537 	.word	0x08028537
 801e628:	08028369 	.word	0x08028369
 801e62c:	0802838f 	.word	0x0802838f

0801e630 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801e630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e634:	4698      	mov	r8, r3
 801e636:	b088      	sub	sp, #32
 801e638:	2300      	movs	r3, #0
 801e63a:	4617      	mov	r7, r2
 801e63c:	4604      	mov	r4, r0
 801e63e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801e642:	9306      	str	r3, [sp, #24]
 801e644:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801e648:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801e64c:	9301      	str	r3, [sp, #4]
 801e64e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e652:	9102      	str	r1, [sp, #8]
 801e654:	f8ad 3014 	strh.w	r3, [sp, #20]
 801e658:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e65c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801e660:	f88d 301c 	strb.w	r3, [sp, #28]
 801e664:	f8ad 5012 	strh.w	r5, [sp, #18]
 801e668:	f7ff ff36 	bl	801e4d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801e66c:	4642      	mov	r2, r8
 801e66e:	4603      	mov	r3, r0
 801e670:	4639      	mov	r1, r7
 801e672:	4620      	mov	r0, r4
 801e674:	f7ff ff6c 	bl	801e550 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801e678:	4b11      	ldr	r3, [pc, #68]	; (801e6c0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801e67a:	9003      	str	r0, [sp, #12]
 801e67c:	881b      	ldrh	r3, [r3, #0]
 801e67e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e682:	b106      	cbz	r6, 801e686 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 801e684:	b935      	cbnz	r5, 801e694 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 801e686:	4b0f      	ldr	r3, [pc, #60]	; (801e6c4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 801e688:	f240 1153 	movw	r1, #339	; 0x153
 801e68c:	4a0e      	ldr	r2, [pc, #56]	; (801e6c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801e68e:	480f      	ldr	r0, [pc, #60]	; (801e6cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 801e690:	f006 fdbc 	bl	802520c <__assert_func>
 801e694:	6823      	ldr	r3, [r4, #0]
 801e696:	4620      	mov	r0, r4
 801e698:	9d01      	ldr	r5, [sp, #4]
 801e69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e69c:	4798      	blx	r3
 801e69e:	4228      	tst	r0, r5
 801e6a0:	d104      	bne.n	801e6ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 801e6a2:	4b0b      	ldr	r3, [pc, #44]	; (801e6d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 801e6a4:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801e6a8:	4a07      	ldr	r2, [pc, #28]	; (801e6c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801e6aa:	e7f0      	b.n	801e68e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 801e6ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e6ae:	a901      	add	r1, sp, #4
 801e6b0:	6860      	ldr	r0, [r4, #4]
 801e6b2:	9306      	str	r3, [sp, #24]
 801e6b4:	6803      	ldr	r3, [r0, #0]
 801e6b6:	685b      	ldr	r3, [r3, #4]
 801e6b8:	4798      	blx	r3
 801e6ba:	b008      	add	sp, #32
 801e6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6c0:	2000bb0c 	.word	0x2000bb0c
 801e6c4:	08028331 	.word	0x08028331
 801e6c8:	080283d4 	.word	0x080283d4
 801e6cc:	08028369 	.word	0x08028369
 801e6d0:	0802838f 	.word	0x0802838f

0801e6d4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801e6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6d8:	b088      	sub	sp, #32
 801e6da:	4698      	mov	r8, r3
 801e6dc:	4617      	mov	r7, r2
 801e6de:	2200      	movs	r2, #0
 801e6e0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801e6e4:	4604      	mov	r4, r0
 801e6e6:	9206      	str	r2, [sp, #24]
 801e6e8:	2bff      	cmp	r3, #255	; 0xff
 801e6ea:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801e6ee:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801e6f2:	bf0c      	ite	eq
 801e6f4:	2220      	moveq	r2, #32
 801e6f6:	2240      	movne	r2, #64	; 0x40
 801e6f8:	9102      	str	r1, [sp, #8]
 801e6fa:	9201      	str	r2, [sp, #4]
 801e6fc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801e700:	f88d 301c 	strb.w	r3, [sp, #28]
 801e704:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e708:	f8ad 6010 	strh.w	r6, [sp, #16]
 801e70c:	f8ad 5012 	strh.w	r5, [sp, #18]
 801e710:	f7ff fee2 	bl	801e4d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801e714:	4642      	mov	r2, r8
 801e716:	4603      	mov	r3, r0
 801e718:	4639      	mov	r1, r7
 801e71a:	4620      	mov	r0, r4
 801e71c:	f7ff ff18 	bl	801e550 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801e720:	4b10      	ldr	r3, [pc, #64]	; (801e764 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 801e722:	9003      	str	r0, [sp, #12]
 801e724:	881b      	ldrh	r3, [r3, #0]
 801e726:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e72a:	b106      	cbz	r6, 801e72e <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801e72c:	b935      	cbnz	r5, 801e73c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801e72e:	4b0e      	ldr	r3, [pc, #56]	; (801e768 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 801e730:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801e734:	4a0d      	ldr	r2, [pc, #52]	; (801e76c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801e736:	480e      	ldr	r0, [pc, #56]	; (801e770 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 801e738:	f006 fd68 	bl	802520c <__assert_func>
 801e73c:	6823      	ldr	r3, [r4, #0]
 801e73e:	4620      	mov	r0, r4
 801e740:	9d01      	ldr	r5, [sp, #4]
 801e742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e744:	4798      	blx	r3
 801e746:	4228      	tst	r0, r5
 801e748:	d104      	bne.n	801e754 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801e74a:	4b0a      	ldr	r3, [pc, #40]	; (801e774 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801e74c:	f240 1167 	movw	r1, #359	; 0x167
 801e750:	4a06      	ldr	r2, [pc, #24]	; (801e76c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801e752:	e7f0      	b.n	801e736 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 801e754:	6860      	ldr	r0, [r4, #4]
 801e756:	a901      	add	r1, sp, #4
 801e758:	6803      	ldr	r3, [r0, #0]
 801e75a:	685b      	ldr	r3, [r3, #4]
 801e75c:	4798      	blx	r3
 801e75e:	b008      	add	sp, #32
 801e760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e764:	2000bb0c 	.word	0x2000bb0c
 801e768:	08028331 	.word	0x08028331
 801e76c:	08028478 	.word	0x08028478
 801e770:	08028369 	.word	0x08028369
 801e774:	0802838f 	.word	0x0802838f

0801e778 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801e778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e77c:	b089      	sub	sp, #36	; 0x24
 801e77e:	4699      	mov	r9, r3
 801e780:	4604      	mov	r4, r0
 801e782:	2500      	movs	r5, #0
 801e784:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801e788:	4690      	mov	r8, r2
 801e78a:	460f      	mov	r7, r1
 801e78c:	9506      	str	r5, [sp, #24]
 801e78e:	2eff      	cmp	r6, #255	; 0xff
 801e790:	9502      	str	r5, [sp, #8]
 801e792:	bf0c      	ite	eq
 801e794:	2302      	moveq	r3, #2
 801e796:	2308      	movne	r3, #8
 801e798:	9301      	str	r3, [sp, #4]
 801e79a:	f7ff fe9d 	bl	801e4d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801e79e:	464a      	mov	r2, r9
 801e7a0:	4603      	mov	r3, r0
 801e7a2:	4641      	mov	r1, r8
 801e7a4:	4620      	mov	r0, r4
 801e7a6:	f7ff fed3 	bl	801e550 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801e7aa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e7ae:	f8ad 5014 	strh.w	r5, [sp, #20]
 801e7b2:	f8ad 3010 	strh.w	r3, [sp, #16]
 801e7b6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e7ba:	9d01      	ldr	r5, [sp, #4]
 801e7bc:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e7c0:	4b0e      	ldr	r3, [pc, #56]	; (801e7fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 801e7c2:	9003      	str	r0, [sp, #12]
 801e7c4:	4620      	mov	r0, r4
 801e7c6:	881b      	ldrh	r3, [r3, #0]
 801e7c8:	9706      	str	r7, [sp, #24]
 801e7ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e7ce:	6823      	ldr	r3, [r4, #0]
 801e7d0:	f88d 601c 	strb.w	r6, [sp, #28]
 801e7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7d6:	4798      	blx	r3
 801e7d8:	4228      	tst	r0, r5
 801e7da:	d106      	bne.n	801e7ea <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 801e7dc:	4b08      	ldr	r3, [pc, #32]	; (801e800 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 801e7de:	f240 1179 	movw	r1, #377	; 0x179
 801e7e2:	4a08      	ldr	r2, [pc, #32]	; (801e804 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 801e7e4:	4808      	ldr	r0, [pc, #32]	; (801e808 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 801e7e6:	f006 fd11 	bl	802520c <__assert_func>
 801e7ea:	6860      	ldr	r0, [r4, #4]
 801e7ec:	a901      	add	r1, sp, #4
 801e7ee:	6803      	ldr	r3, [r0, #0]
 801e7f0:	685b      	ldr	r3, [r3, #4]
 801e7f2:	4798      	blx	r3
 801e7f4:	b009      	add	sp, #36	; 0x24
 801e7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7fa:	bf00      	nop
 801e7fc:	2000bb0c 	.word	0x2000bb0c
 801e800:	0802838f 	.word	0x0802838f
 801e804:	080285ae 	.word	0x080285ae
 801e808:	08028369 	.word	0x08028369

0801e80c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801e80c:	4b1d      	ldr	r3, [pc, #116]	; (801e884 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801e80e:	b570      	push	{r4, r5, r6, lr}
 801e810:	b08a      	sub	sp, #40	; 0x28
 801e812:	781b      	ldrb	r3, [r3, #0]
 801e814:	4604      	mov	r4, r0
 801e816:	e88d 0006 	stmia.w	sp, {r1, r2}
 801e81a:	b933      	cbnz	r3, 801e82a <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801e81c:	4b1a      	ldr	r3, [pc, #104]	; (801e888 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801e81e:	f240 1185 	movw	r1, #389	; 0x185
 801e822:	4a1a      	ldr	r2, [pc, #104]	; (801e88c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801e824:	481a      	ldr	r0, [pc, #104]	; (801e890 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 801e826:	f006 fcf1 	bl	802520c <__assert_func>
 801e82a:	2300      	movs	r3, #0
 801e82c:	f8bd 5000 	ldrh.w	r5, [sp]
 801e830:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801e834:	9308      	str	r3, [sp, #32]
 801e836:	2301      	movs	r3, #1
 801e838:	9303      	str	r3, [sp, #12]
 801e83a:	6803      	ldr	r3, [r0, #0]
 801e83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e83e:	4798      	blx	r3
 801e840:	4632      	mov	r2, r6
 801e842:	4603      	mov	r3, r0
 801e844:	4629      	mov	r1, r5
 801e846:	4620      	mov	r0, r4
 801e848:	f7ff fe82 	bl	801e550 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801e84c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e84e:	9004      	str	r0, [sp, #16]
 801e850:	a903      	add	r1, sp, #12
 801e852:	9305      	str	r3, [sp, #20]
 801e854:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e858:	6860      	ldr	r0, [r4, #4]
 801e85a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e85e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801e862:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e866:	4b0b      	ldr	r3, [pc, #44]	; (801e894 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 801e868:	881b      	ldrh	r3, [r3, #0]
 801e86a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e86e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e872:	23ff      	movs	r3, #255	; 0xff
 801e874:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801e878:	6803      	ldr	r3, [r0, #0]
 801e87a:	685b      	ldr	r3, [r3, #4]
 801e87c:	4798      	blx	r3
 801e87e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801e880:	b00a      	add	sp, #40	; 0x28
 801e882:	bd70      	pop	{r4, r5, r6, pc}
 801e884:	2000bb11 	.word	0x2000bb11
 801e888:	080282c3 	.word	0x080282c3
 801e88c:	080284f1 	.word	0x080284f1
 801e890:	08028369 	.word	0x08028369
 801e894:	2000bb0c 	.word	0x2000bb0c

0801e898 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801e898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e89a:	461d      	mov	r5, r3
 801e89c:	b08b      	sub	sp, #44	; 0x2c
 801e89e:	2300      	movs	r3, #0
 801e8a0:	4604      	mov	r4, r0
 801e8a2:	9308      	str	r3, [sp, #32]
 801e8a4:	2301      	movs	r3, #1
 801e8a6:	9303      	str	r3, [sp, #12]
 801e8a8:	6803      	ldr	r3, [r0, #0]
 801e8aa:	e88d 0006 	stmia.w	sp, {r1, r2}
 801e8ae:	f8bd 6000 	ldrh.w	r6, [sp]
 801e8b2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801e8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8b8:	4798      	blx	r3
 801e8ba:	463a      	mov	r2, r7
 801e8bc:	4603      	mov	r3, r0
 801e8be:	4631      	mov	r1, r6
 801e8c0:	4620      	mov	r0, r4
 801e8c2:	f7ff fe45 	bl	801e550 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801e8c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e8ca:	9004      	str	r0, [sp, #16]
 801e8cc:	a903      	add	r1, sp, #12
 801e8ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e8d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801e8d6:	6860      	ldr	r0, [r4, #4]
 801e8d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e8dc:	4b08      	ldr	r3, [pc, #32]	; (801e900 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 801e8de:	9505      	str	r5, [sp, #20]
 801e8e0:	881b      	ldrh	r3, [r3, #0]
 801e8e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e8e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e8ec:	23ff      	movs	r3, #255	; 0xff
 801e8ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801e8f2:	6803      	ldr	r3, [r0, #0]
 801e8f4:	685b      	ldr	r3, [r3, #4]
 801e8f6:	4798      	blx	r3
 801e8f8:	4628      	mov	r0, r5
 801e8fa:	b00b      	add	sp, #44	; 0x2c
 801e8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8fe:	bf00      	nop
 801e900:	2000bb0c 	.word	0x2000bb0c

0801e904 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801e904:	b570      	push	{r4, r5, r6, lr}
 801e906:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801e90a:	4604      	mov	r4, r0
 801e90c:	b19b      	cbz	r3, 801e936 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801e90e:	2002      	movs	r0, #2
 801e910:	f7fb fa2d 	bl	8019d6e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801e914:	2300      	movs	r3, #0
 801e916:	4620      	mov	r0, r4
 801e918:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801e91c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e920:	6823      	ldr	r3, [r4, #0]
 801e922:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801e926:	f7ff fdd7 	bl	801e4d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801e92a:	4601      	mov	r1, r0
 801e92c:	4620      	mov	r0, r4
 801e92e:	462b      	mov	r3, r5
 801e930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e934:	4718      	bx	r3
 801e936:	bd70      	pop	{r4, r5, r6, pc}

0801e938 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801e938:	b570      	push	{r4, r5, r6, lr}
 801e93a:	4605      	mov	r5, r0
 801e93c:	460c      	mov	r4, r1
 801e93e:	2003      	movs	r0, #3
 801e940:	b149      	cbz	r1, 801e956 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801e942:	f7fb fa12 	bl	8019d6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801e946:	6928      	ldr	r0, [r5, #16]
 801e948:	b168      	cbz	r0, 801e966 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801e94a:	6803      	ldr	r3, [r0, #0]
 801e94c:	2101      	movs	r1, #1
 801e94e:	695b      	ldr	r3, [r3, #20]
 801e950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e954:	4718      	bx	r3
 801e956:	f7fb fa09 	bl	8019d6c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801e95a:	6928      	ldr	r0, [r5, #16]
 801e95c:	b118      	cbz	r0, 801e966 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801e95e:	6803      	ldr	r3, [r0, #0]
 801e960:	4621      	mov	r1, r4
 801e962:	695b      	ldr	r3, [r3, #20]
 801e964:	e7f4      	b.n	801e950 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801e966:	bd70      	pop	{r4, r5, r6, pc}

0801e968 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801e968:	68c2      	ldr	r2, [r0, #12]
 801e96a:	6900      	ldr	r0, [r0, #16]
 801e96c:	1a13      	subs	r3, r2, r0
 801e96e:	4258      	negs	r0, r3
 801e970:	4158      	adcs	r0, r3
 801e972:	4770      	bx	lr

0801e974 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801e974:	68c2      	ldr	r2, [r0, #12]
 801e976:	6903      	ldr	r3, [r0, #16]
 801e978:	1a9b      	subs	r3, r3, r2
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	bfdc      	itt	le
 801e97e:	6882      	ldrle	r2, [r0, #8]
 801e980:	189b      	addle	r3, r3, r2
 801e982:	2b01      	cmp	r3, #1
 801e984:	bfcc      	ite	gt
 801e986:	2000      	movgt	r0, #0
 801e988:	2001      	movle	r0, #1
 801e98a:	4770      	bx	lr

0801e98c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801e98c:	6902      	ldr	r2, [r0, #16]
 801e98e:	6843      	ldr	r3, [r0, #4]
 801e990:	201c      	movs	r0, #28
 801e992:	fb00 3002 	mla	r0, r0, r2, r3
 801e996:	4770      	bx	lr

0801e998 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801e998:	6803      	ldr	r3, [r0, #0]
 801e99a:	691b      	ldr	r3, [r3, #16]
 801e99c:	4718      	bx	r3

0801e99e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801e99e:	4770      	bx	lr

0801e9a0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801e9a0:	4770      	bx	lr

0801e9a2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801e9a2:	4770      	bx	lr

0801e9a4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801e9a4:	2301      	movs	r3, #1
 801e9a6:	b570      	push	{r4, r5, r6, lr}
 801e9a8:	7203      	strb	r3, [r0, #8]
 801e9aa:	4604      	mov	r4, r0
 801e9ac:	6840      	ldr	r0, [r0, #4]
 801e9ae:	6803      	ldr	r3, [r0, #0]
 801e9b0:	699b      	ldr	r3, [r3, #24]
 801e9b2:	4798      	blx	r3
 801e9b4:	6803      	ldr	r3, [r0, #0]
 801e9b6:	4605      	mov	r5, r0
 801e9b8:	2b08      	cmp	r3, #8
 801e9ba:	d01e      	beq.n	801e9fa <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801e9bc:	d80b      	bhi.n	801e9d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801e9be:	2b02      	cmp	r3, #2
 801e9c0:	d027      	beq.n	801ea12 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801e9c2:	2b04      	cmp	r3, #4
 801e9c4:	d011      	beq.n	801e9ea <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801e9c6:	2b01      	cmp	r3, #1
 801e9c8:	d028      	beq.n	801ea1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801e9ca:	4b17      	ldr	r3, [pc, #92]	; (801ea28 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801e9cc:	218d      	movs	r1, #141	; 0x8d
 801e9ce:	4a17      	ldr	r2, [pc, #92]	; (801ea2c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801e9d0:	4817      	ldr	r0, [pc, #92]	; (801ea30 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801e9d2:	f006 fc1b 	bl	802520c <__assert_func>
 801e9d6:	2b40      	cmp	r3, #64	; 0x40
 801e9d8:	d020      	beq.n	801ea1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801e9da:	d801      	bhi.n	801e9e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801e9dc:	2b20      	cmp	r3, #32
 801e9de:	e7f3      	b.n	801e9c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801e9e0:	2b80      	cmp	r3, #128	; 0x80
 801e9e2:	d01b      	beq.n	801ea1c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801e9e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e9e8:	e7ee      	b.n	801e9c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801e9ea:	6823      	ldr	r3, [r4, #0]
 801e9ec:	7e01      	ldrb	r1, [r0, #24]
 801e9ee:	4620      	mov	r0, r4
 801e9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e9f2:	4798      	blx	r3
 801e9f4:	6823      	ldr	r3, [r4, #0]
 801e9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e9f8:	e006      	b.n	801ea08 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801e9fa:	6823      	ldr	r3, [r4, #0]
 801e9fc:	7e01      	ldrb	r1, [r0, #24]
 801e9fe:	4620      	mov	r0, r4
 801ea00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ea02:	4798      	blx	r3
 801ea04:	6823      	ldr	r3, [r4, #0]
 801ea06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ea08:	4629      	mov	r1, r5
 801ea0a:	4620      	mov	r0, r4
 801ea0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ea10:	4718      	bx	r3
 801ea12:	6823      	ldr	r3, [r4, #0]
 801ea14:	4620      	mov	r0, r4
 801ea16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea18:	4798      	blx	r3
 801ea1a:	e7f3      	b.n	801ea04 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801ea1c:	6823      	ldr	r3, [r4, #0]
 801ea1e:	4620      	mov	r0, r4
 801ea20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea22:	4798      	blx	r3
 801ea24:	e7e6      	b.n	801e9f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801ea26:	bf00      	nop
 801ea28:	08028619 	.word	0x08028619
 801ea2c:	080286d8 	.word	0x080286d8
 801ea30:	0802863e 	.word	0x0802863e

0801ea34 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801ea34:	b570      	push	{r4, r5, r6, lr}
 801ea36:	4604      	mov	r4, r0
 801ea38:	460e      	mov	r6, r1
 801ea3a:	6860      	ldr	r0, [r4, #4]
 801ea3c:	6803      	ldr	r3, [r0, #0]
 801ea3e:	685b      	ldr	r3, [r3, #4]
 801ea40:	4798      	blx	r3
 801ea42:	2800      	cmp	r0, #0
 801ea44:	d1f9      	bne.n	801ea3a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801ea46:	4d0b      	ldr	r5, [pc, #44]	; (801ea74 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801ea48:	6828      	ldr	r0, [r5, #0]
 801ea4a:	6803      	ldr	r3, [r0, #0]
 801ea4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ea4e:	4798      	blx	r3
 801ea50:	f7f5 fada 	bl	8014008 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801ea54:	6860      	ldr	r0, [r4, #4]
 801ea56:	4631      	mov	r1, r6
 801ea58:	6803      	ldr	r3, [r0, #0]
 801ea5a:	689b      	ldr	r3, [r3, #8]
 801ea5c:	4798      	blx	r3
 801ea5e:	6823      	ldr	r3, [r4, #0]
 801ea60:	4620      	mov	r0, r4
 801ea62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea64:	4798      	blx	r3
 801ea66:	6828      	ldr	r0, [r5, #0]
 801ea68:	6803      	ldr	r3, [r0, #0]
 801ea6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ea6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ea70:	4718      	bx	r3
 801ea72:	bf00      	nop
 801ea74:	2000bb14 	.word	0x2000bb14

0801ea78 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801ea78:	b508      	push	{r3, lr}
 801ea7a:	f7f5 faaf 	bl	8013fdc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801ea7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ea82:	f7f5 bab5 	b.w	8013ff0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801ea86 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801ea86:	b510      	push	{r4, lr}
 801ea88:	4604      	mov	r4, r0
 801ea8a:	2114      	movs	r1, #20
 801ea8c:	f006 fba2 	bl	80251d4 <_ZdlPvj>
 801ea90:	4620      	mov	r0, r4
 801ea92:	bd10      	pop	{r4, pc}

0801ea94 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801ea94:	b570      	push	{r4, r5, r6, lr}
 801ea96:	4604      	mov	r4, r0
 801ea98:	6840      	ldr	r0, [r0, #4]
 801ea9a:	6803      	ldr	r3, [r0, #0]
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	4798      	blx	r3
 801eaa0:	4605      	mov	r5, r0
 801eaa2:	b908      	cbnz	r0, 801eaa8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801eaa4:	7a23      	ldrb	r3, [r4, #8]
 801eaa6:	b973      	cbnz	r3, 801eac6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801eaa8:	6860      	ldr	r0, [r4, #4]
 801eaaa:	6803      	ldr	r3, [r0, #0]
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	4798      	blx	r3
 801eab0:	b928      	cbnz	r0, 801eabe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801eab2:	6823      	ldr	r3, [r4, #0]
 801eab4:	4620      	mov	r0, r4
 801eab6:	6a1b      	ldr	r3, [r3, #32]
 801eab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eabc:	4718      	bx	r3
 801eabe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eac2:	f7f5 baab 	b.w	801401c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801eac6:	6860      	ldr	r0, [r4, #4]
 801eac8:	6803      	ldr	r3, [r0, #0]
 801eaca:	695b      	ldr	r3, [r3, #20]
 801eacc:	4798      	blx	r3
 801eace:	7225      	strb	r5, [r4, #8]
 801ead0:	e7ea      	b.n	801eaa8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
	...

0801ead4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801ead4:	b510      	push	{r4, lr}
 801ead6:	68c3      	ldr	r3, [r0, #12]
 801ead8:	6902      	ldr	r2, [r0, #16]
 801eada:	1ad2      	subs	r2, r2, r3
 801eadc:	2a00      	cmp	r2, #0
 801eade:	bfdc      	itt	le
 801eae0:	6884      	ldrle	r4, [r0, #8]
 801eae2:	1912      	addle	r2, r2, r4
 801eae4:	2a01      	cmp	r2, #1
 801eae6:	dd17      	ble.n	801eb18 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801eae8:	6842      	ldr	r2, [r0, #4]
 801eaea:	241c      	movs	r4, #28
 801eaec:	fb04 2303 	mla	r3, r4, r3, r2
 801eaf0:	f101 0218 	add.w	r2, r1, #24
 801eaf4:	f851 4b04 	ldr.w	r4, [r1], #4
 801eaf8:	4291      	cmp	r1, r2
 801eafa:	f843 4b04 	str.w	r4, [r3], #4
 801eafe:	d1f9      	bne.n	801eaf4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801eb00:	780a      	ldrb	r2, [r1, #0]
 801eb02:	701a      	strb	r2, [r3, #0]
 801eb04:	68c3      	ldr	r3, [r0, #12]
 801eb06:	6882      	ldr	r2, [r0, #8]
 801eb08:	f3bf 8f5b 	dmb	ish
 801eb0c:	3301      	adds	r3, #1
 801eb0e:	4293      	cmp	r3, r2
 801eb10:	bfa8      	it	ge
 801eb12:	1a9b      	subge	r3, r3, r2
 801eb14:	60c3      	str	r3, [r0, #12]
 801eb16:	bd10      	pop	{r4, pc}
 801eb18:	4b02      	ldr	r3, [pc, #8]	; (801eb24 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801eb1a:	213b      	movs	r1, #59	; 0x3b
 801eb1c:	4a02      	ldr	r2, [pc, #8]	; (801eb28 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801eb1e:	4803      	ldr	r0, [pc, #12]	; (801eb2c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801eb20:	f006 fb74 	bl	802520c <__assert_func>
 801eb24:	08028664 	.word	0x08028664
 801eb28:	08028708 	.word	0x08028708
 801eb2c:	0802863e 	.word	0x0802863e

0801eb30 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801eb30:	b510      	push	{r4, lr}
 801eb32:	6803      	ldr	r3, [r0, #0]
 801eb34:	4604      	mov	r4, r0
 801eb36:	681b      	ldr	r3, [r3, #0]
 801eb38:	4798      	blx	r3
 801eb3a:	b128      	cbz	r0, 801eb48 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801eb3c:	4b07      	ldr	r3, [pc, #28]	; (801eb5c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801eb3e:	2141      	movs	r1, #65	; 0x41
 801eb40:	4a07      	ldr	r2, [pc, #28]	; (801eb60 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801eb42:	4808      	ldr	r0, [pc, #32]	; (801eb64 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801eb44:	f006 fb62 	bl	802520c <__assert_func>
 801eb48:	6923      	ldr	r3, [r4, #16]
 801eb4a:	68a2      	ldr	r2, [r4, #8]
 801eb4c:	f3bf 8f5b 	dmb	ish
 801eb50:	3301      	adds	r3, #1
 801eb52:	4293      	cmp	r3, r2
 801eb54:	bfa8      	it	ge
 801eb56:	1a9b      	subge	r3, r3, r2
 801eb58:	6123      	str	r3, [r4, #16]
 801eb5a:	bd10      	pop	{r4, pc}
 801eb5c:	08028687 	.word	0x08028687
 801eb60:	08028756 	.word	0x08028756
 801eb64:	0802863e 	.word	0x0802863e

0801eb68 <_ZN8touchgfx13DMA_Interface5startEv>:
 801eb68:	b510      	push	{r4, lr}
 801eb6a:	4604      	mov	r4, r0
 801eb6c:	6840      	ldr	r0, [r0, #4]
 801eb6e:	6803      	ldr	r3, [r0, #0]
 801eb70:	681b      	ldr	r3, [r3, #0]
 801eb72:	4798      	blx	r3
 801eb74:	b948      	cbnz	r0, 801eb8a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801eb76:	7a63      	ldrb	r3, [r4, #9]
 801eb78:	b13b      	cbz	r3, 801eb8a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801eb7a:	7a23      	ldrb	r3, [r4, #8]
 801eb7c:	b92b      	cbnz	r3, 801eb8a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801eb7e:	6823      	ldr	r3, [r4, #0]
 801eb80:	4620      	mov	r0, r4
 801eb82:	6a1b      	ldr	r3, [r3, #32]
 801eb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb88:	4718      	bx	r3
 801eb8a:	bd10      	pop	{r4, pc}

0801eb8c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801eb8c:	b510      	push	{r4, lr}
 801eb8e:	6082      	str	r2, [r0, #8]
 801eb90:	2200      	movs	r2, #0
 801eb92:	4c03      	ldr	r4, [pc, #12]	; (801eba0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801eb94:	6041      	str	r1, [r0, #4]
 801eb96:	6004      	str	r4, [r0, #0]
 801eb98:	60c2      	str	r2, [r0, #12]
 801eb9a:	6102      	str	r2, [r0, #16]
 801eb9c:	bd10      	pop	{r4, pc}
 801eb9e:	bf00      	nop
 801eba0:	080286bc 	.word	0x080286bc

0801eba4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801eba4:	6840      	ldr	r0, [r0, #4]
 801eba6:	6803      	ldr	r3, [r0, #0]
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	4718      	bx	r3

0801ebac <_ZN8touchgfx7OutlineD1Ev>:
 801ebac:	4770      	bx	lr

0801ebae <_ZN8touchgfx7OutlineD0Ev>:
 801ebae:	b510      	push	{r4, lr}
 801ebb0:	4604      	mov	r4, r0
 801ebb2:	2148      	movs	r1, #72	; 0x48
 801ebb4:	f006 fb0e 	bl	80251d4 <_ZdlPvj>
 801ebb8:	4620      	mov	r0, r4
 801ebba:	bd10      	pop	{r4, pc}

0801ebbc <_ZN8touchgfx7Outline5resetEv>:
 801ebbc:	b510      	push	{r4, lr}
 801ebbe:	4604      	mov	r4, r0
 801ebc0:	f001 f8aa 	bl	801fd18 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801ebc4:	60e0      	str	r0, [r4, #12]
 801ebc6:	f001 f8ad 	bl	801fd24 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801ebca:	68e3      	ldr	r3, [r4, #12]
 801ebcc:	2200      	movs	r2, #0
 801ebce:	08c0      	lsrs	r0, r0, #3
 801ebd0:	6123      	str	r3, [r4, #16]
 801ebd2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ebd6:	6060      	str	r0, [r4, #4]
 801ebd8:	82a3      	strh	r3, [r4, #20]
 801ebda:	82e3      	strh	r3, [r4, #22]
 801ebdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ebde:	60a2      	str	r2, [r4, #8]
 801ebe0:	f023 0301 	bic.w	r3, r3, #1
 801ebe4:	8322      	strh	r2, [r4, #24]
 801ebe6:	8362      	strh	r2, [r4, #26]
 801ebe8:	f043 0302 	orr.w	r3, r3, #2
 801ebec:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801ebf0:	63e3      	str	r3, [r4, #60]	; 0x3c
 801ebf2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ebf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ebf8:	6323      	str	r3, [r4, #48]	; 0x30
 801ebfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ebfe:	6363      	str	r3, [r4, #52]	; 0x34
 801ec00:	63a3      	str	r3, [r4, #56]	; 0x38
 801ec02:	bd10      	pop	{r4, pc}

0801ec04 <_ZN8touchgfx7OutlineC1Ev>:
 801ec04:	4b0f      	ldr	r3, [pc, #60]	; (801ec44 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 801ec06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801ec0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801ec0e:	b510      	push	{r4, lr}
 801ec10:	6003      	str	r3, [r0, #0]
 801ec12:	2300      	movs	r3, #0
 801ec14:	4604      	mov	r4, r0
 801ec16:	62c2      	str	r2, [r0, #44]	; 0x2c
 801ec18:	6043      	str	r3, [r0, #4]
 801ec1a:	6083      	str	r3, [r0, #8]
 801ec1c:	60c3      	str	r3, [r0, #12]
 801ec1e:	6103      	str	r3, [r0, #16]
 801ec20:	6143      	str	r3, [r0, #20]
 801ec22:	6183      	str	r3, [r0, #24]
 801ec24:	61c3      	str	r3, [r0, #28]
 801ec26:	6203      	str	r3, [r0, #32]
 801ec28:	6243      	str	r3, [r0, #36]	; 0x24
 801ec2a:	6283      	str	r3, [r0, #40]	; 0x28
 801ec2c:	6302      	str	r2, [r0, #48]	; 0x30
 801ec2e:	6341      	str	r1, [r0, #52]	; 0x34
 801ec30:	6381      	str	r1, [r0, #56]	; 0x38
 801ec32:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ec34:	6402      	str	r2, [r0, #64]	; 0x40
 801ec36:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801ec3a:	f7ff ffbf 	bl	801ebbc <_ZN8touchgfx7Outline5resetEv>
 801ec3e:	4620      	mov	r0, r4
 801ec40:	bd10      	pop	{r4, pc}
 801ec42:	bf00      	nop
 801ec44:	08028790 	.word	0x08028790

0801ec48 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec4c:	b093      	sub	sp, #76	; 0x4c
 801ec4e:	4604      	mov	r4, r0
 801ec50:	1155      	asrs	r5, r2, #5
 801ec52:	f002 0c1f 	and.w	ip, r2, #31
 801ec56:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ec58:	9305      	str	r3, [sp, #20]
 801ec5a:	1143      	asrs	r3, r0, #5
 801ec5c:	1146      	asrs	r6, r0, #5
 801ec5e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ec60:	f000 031f 	and.w	r3, r0, #31
 801ec64:	9303      	str	r3, [sp, #12]
 801ec66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ec68:	429d      	cmp	r5, r3
 801ec6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ec6c:	bfb8      	it	lt
 801ec6e:	6325      	strlt	r5, [r4, #48]	; 0x30
 801ec70:	429d      	cmp	r5, r3
 801ec72:	bfa4      	itt	ge
 801ec74:	1c6b      	addge	r3, r5, #1
 801ec76:	63a3      	strge	r3, [r4, #56]	; 0x38
 801ec78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ec7a:	429e      	cmp	r6, r3
 801ec7c:	bfb8      	it	lt
 801ec7e:	4633      	movlt	r3, r6
 801ec80:	ea4f 1660 	mov.w	r6, r0, asr #5
 801ec84:	bfb8      	it	lt
 801ec86:	6323      	strlt	r3, [r4, #48]	; 0x30
 801ec88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ec8a:	429e      	cmp	r6, r3
 801ec8c:	bfa2      	ittt	ge
 801ec8e:	4633      	movge	r3, r6
 801ec90:	3301      	addge	r3, #1
 801ec92:	63a3      	strge	r3, [r4, #56]	; 0x38
 801ec94:	9b05      	ldr	r3, [sp, #20]
 801ec96:	eba3 0a01 	sub.w	sl, r3, r1
 801ec9a:	1143      	asrs	r3, r0, #5
 801ec9c:	429d      	cmp	r5, r3
 801ec9e:	f040 811e 	bne.w	801eede <_ZN8touchgfx7Outline10renderLineEiiii+0x296>
 801eca2:	9b05      	ldr	r3, [sp, #20]
 801eca4:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801eca8:	9b03      	ldr	r3, [sp, #12]
 801ecaa:	459c      	cmp	ip, r3
 801ecac:	d12d      	bne.n	801ed0a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 801ecae:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801ecb2:	eb0e 4105 	add.w	r1, lr, r5, lsl #16
 801ecb6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801ecba:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801ecbe:	4299      	cmp	r1, r3
 801ecc0:	d038      	beq.n	801ed34 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801ecc2:	8b63      	ldrh	r3, [r4, #26]
 801ecc4:	8b21      	ldrh	r1, [r4, #24]
 801ecc6:	430b      	orrs	r3, r1
 801ecc8:	b21b      	sxth	r3, r3
 801ecca:	b15b      	cbz	r3, 801ece4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801eccc:	2a00      	cmp	r2, #0
 801ecce:	db09      	blt.n	801ece4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801ecd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ecd2:	4293      	cmp	r3, r2
 801ecd4:	dd06      	ble.n	801ece4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801ecd6:	68a2      	ldr	r2, [r4, #8]
 801ecd8:	6863      	ldr	r3, [r4, #4]
 801ecda:	429a      	cmp	r2, r3
 801ecdc:	d308      	bcc.n	801ecf0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa8>
 801ecde:	2301      	movs	r3, #1
 801ece0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801ece4:	f8a4 e014 	strh.w	lr, [r4, #20]
 801ece8:	82e5      	strh	r5, [r4, #22]
 801ecea:	2300      	movs	r3, #0
 801ecec:	8323      	strh	r3, [r4, #24]
 801ecee:	e0d3      	b.n	801ee98 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 801ecf0:	f104 0314 	add.w	r3, r4, #20
 801ecf4:	6922      	ldr	r2, [r4, #16]
 801ecf6:	cb03      	ldmia	r3!, {r0, r1}
 801ecf8:	6010      	str	r0, [r2, #0]
 801ecfa:	6051      	str	r1, [r2, #4]
 801ecfc:	6923      	ldr	r3, [r4, #16]
 801ecfe:	3308      	adds	r3, #8
 801ed00:	6123      	str	r3, [r4, #16]
 801ed02:	68a3      	ldr	r3, [r4, #8]
 801ed04:	3301      	adds	r3, #1
 801ed06:	60a3      	str	r3, [r4, #8]
 801ed08:	e7ec      	b.n	801ece4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c>
 801ed0a:	9b05      	ldr	r3, [sp, #20]
 801ed0c:	114f      	asrs	r7, r1, #5
 801ed0e:	f001 011f 	and.w	r1, r1, #31
 801ed12:	f003 031f 	and.w	r3, r3, #31
 801ed16:	4577      	cmp	r7, lr
 801ed18:	9304      	str	r3, [sp, #16]
 801ed1a:	9b03      	ldr	r3, [sp, #12]
 801ed1c:	eba3 020c 	sub.w	r2, r3, ip
 801ed20:	d10b      	bne.n	801ed3a <_ZN8touchgfx7Outline10renderLineEiiii+0xf2>
 801ed22:	8b23      	ldrh	r3, [r4, #24]
 801ed24:	4413      	add	r3, r2
 801ed26:	8323      	strh	r3, [r4, #24]
 801ed28:	9b04      	ldr	r3, [sp, #16]
 801ed2a:	4419      	add	r1, r3
 801ed2c:	8b63      	ldrh	r3, [r4, #26]
 801ed2e:	fb02 3201 	mla	r2, r2, r1, r3
 801ed32:	8362      	strh	r2, [r4, #26]
 801ed34:	b013      	add	sp, #76	; 0x4c
 801ed36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed3a:	f1ba 0f00 	cmp.w	sl, #0
 801ed3e:	8b20      	ldrh	r0, [r4, #24]
 801ed40:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801ed44:	bfaf      	iteee	ge
 801ed46:	f1c1 0320 	rsbge	r3, r1, #32
 801ed4a:	434a      	mullt	r2, r1
 801ed4c:	f1ca 0a00 	rsblt	sl, sl, #0
 801ed50:	2300      	movlt	r3, #0
 801ed52:	bfa3      	ittte	ge
 801ed54:	435a      	mulge	r2, r3
 801ed56:	2320      	movge	r3, #32
 801ed58:	f04f 0b01 	movge.w	fp, #1
 801ed5c:	f04f 3bff 	movlt.w	fp, #4294967295
 801ed60:	9302      	str	r3, [sp, #8]
 801ed62:	9b02      	ldr	r3, [sp, #8]
 801ed64:	fb92 f6fa 	sdiv	r6, r2, sl
 801ed68:	fb0a 2216 	mls	r2, sl, r6, r2
 801ed6c:	4419      	add	r1, r3
 801ed6e:	8b63      	ldrh	r3, [r4, #26]
 801ed70:	2a00      	cmp	r2, #0
 801ed72:	bfbc      	itt	lt
 801ed74:	f106 36ff 	addlt.w	r6, r6, #4294967295
 801ed78:	4452      	addlt	r2, sl
 801ed7a:	fb06 3101 	mla	r1, r6, r1, r3
 801ed7e:	4430      	add	r0, r6
 801ed80:	b20b      	sxth	r3, r1
 801ed82:	b200      	sxth	r0, r0
 801ed84:	9301      	str	r3, [sp, #4]
 801ed86:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ed8a:	8320      	strh	r0, [r4, #24]
 801ed8c:	8363      	strh	r3, [r4, #26]
 801ed8e:	eb07 030b 	add.w	r3, r7, fp
 801ed92:	042f      	lsls	r7, r5, #16
 801ed94:	9300      	str	r3, [sp, #0]
 801ed96:	9900      	ldr	r1, [sp, #0]
 801ed98:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801ed9c:	eb01 0907 	add.w	r9, r1, r7
 801eda0:	9705      	str	r7, [sp, #20]
 801eda2:	eb08 4803 	add.w	r8, r8, r3, lsl #16
 801eda6:	45c1      	cmp	r9, r8
 801eda8:	d015      	beq.n	801edd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x18e>
 801edaa:	9901      	ldr	r1, [sp, #4]
 801edac:	4301      	orrs	r1, r0
 801edae:	d00b      	beq.n	801edc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	db09      	blt.n	801edc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 801edb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801edb6:	4299      	cmp	r1, r3
 801edb8:	dd06      	ble.n	801edc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 801edba:	68a1      	ldr	r1, [r4, #8]
 801edbc:	6863      	ldr	r3, [r4, #4]
 801edbe:	4299      	cmp	r1, r3
 801edc0:	d36c      	bcc.n	801ee9c <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 801edc2:	2301      	movs	r3, #1
 801edc4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801edc8:	f8bd 3000 	ldrh.w	r3, [sp]
 801edcc:	82e5      	strh	r5, [r4, #22]
 801edce:	82a3      	strh	r3, [r4, #20]
 801edd0:	2300      	movs	r3, #0
 801edd2:	8323      	strh	r3, [r4, #24]
 801edd4:	8363      	strh	r3, [r4, #26]
 801edd6:	9900      	ldr	r1, [sp, #0]
 801edd8:	eb0c 0306 	add.w	r3, ip, r6
 801eddc:	458e      	cmp	lr, r1
 801edde:	d04e      	beq.n	801ee7e <_ZN8touchgfx7Outline10renderLineEiiii+0x236>
 801ede0:	9903      	ldr	r1, [sp, #12]
 801ede2:	eba2 020a 	sub.w	r2, r2, sl
 801ede6:	1ac9      	subs	r1, r1, r3
 801ede8:	9201      	str	r2, [sp, #4]
 801edea:	440e      	add	r6, r1
 801edec:	0176      	lsls	r6, r6, #5
 801edee:	fb96 fcfa 	sdiv	ip, r6, sl
 801edf2:	fb0a 661c 	mls	r6, sl, ip, r6
 801edf6:	2e00      	cmp	r6, #0
 801edf8:	bfbc      	itt	lt
 801edfa:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801edfe:	4456      	addlt	r6, sl
 801ee00:	f10c 0101 	add.w	r1, ip, #1
 801ee04:	9106      	str	r1, [sp, #24]
 801ee06:	9a01      	ldr	r2, [sp, #4]
 801ee08:	8b20      	ldrh	r0, [r4, #24]
 801ee0a:	1992      	adds	r2, r2, r6
 801ee0c:	8b61      	ldrh	r1, [r4, #26]
 801ee0e:	9f05      	ldr	r7, [sp, #20]
 801ee10:	9201      	str	r2, [sp, #4]
 801ee12:	bf5b      	ittet	pl
 801ee14:	eba2 020a 	subpl.w	r2, r2, sl
 801ee18:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 801ee1c:	46e0      	movmi	r8, ip
 801ee1e:	9201      	strpl	r2, [sp, #4]
 801ee20:	9a00      	ldr	r2, [sp, #0]
 801ee22:	4440      	add	r0, r8
 801ee24:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 801ee28:	4443      	add	r3, r8
 801ee2a:	445a      	add	r2, fp
 801ee2c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801ee30:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801ee34:	b200      	sxth	r0, r0
 801ee36:	4417      	add	r7, r2
 801ee38:	b209      	sxth	r1, r1
 801ee3a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 801ee3e:	8320      	strh	r0, [r4, #24]
 801ee40:	8361      	strh	r1, [r4, #26]
 801ee42:	454f      	cmp	r7, r9
 801ee44:	9200      	str	r2, [sp, #0]
 801ee46:	d017      	beq.n	801ee78 <_ZN8touchgfx7Outline10renderLineEiiii+0x230>
 801ee48:	4301      	orrs	r1, r0
 801ee4a:	d00d      	beq.n	801ee68 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 801ee4c:	f1b8 0f00 	cmp.w	r8, #0
 801ee50:	db0a      	blt.n	801ee68 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 801ee52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ee54:	4541      	cmp	r1, r8
 801ee56:	dd07      	ble.n	801ee68 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 801ee58:	68a0      	ldr	r0, [r4, #8]
 801ee5a:	6861      	ldr	r1, [r4, #4]
 801ee5c:	4288      	cmp	r0, r1
 801ee5e:	d32d      	bcc.n	801eebc <_ZN8touchgfx7Outline10renderLineEiiii+0x274>
 801ee60:	f04f 0101 	mov.w	r1, #1
 801ee64:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801ee68:	f04f 0100 	mov.w	r1, #0
 801ee6c:	f8bd 2000 	ldrh.w	r2, [sp]
 801ee70:	82e5      	strh	r5, [r4, #22]
 801ee72:	82a2      	strh	r2, [r4, #20]
 801ee74:	8321      	strh	r1, [r4, #24]
 801ee76:	8361      	strh	r1, [r4, #26]
 801ee78:	9a00      	ldr	r2, [sp, #0]
 801ee7a:	4596      	cmp	lr, r2
 801ee7c:	d1c3      	bne.n	801ee06 <_ZN8touchgfx7Outline10renderLineEiiii+0x1be>
 801ee7e:	9a03      	ldr	r2, [sp, #12]
 801ee80:	9902      	ldr	r1, [sp, #8]
 801ee82:	1ad3      	subs	r3, r2, r3
 801ee84:	8b22      	ldrh	r2, [r4, #24]
 801ee86:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 801ee8a:	441a      	add	r2, r3
 801ee8c:	8322      	strh	r2, [r4, #24]
 801ee8e:	9a04      	ldr	r2, [sp, #16]
 801ee90:	3220      	adds	r2, #32
 801ee92:	1a52      	subs	r2, r2, r1
 801ee94:	fb03 e302 	mla	r3, r3, r2, lr
 801ee98:	8363      	strh	r3, [r4, #26]
 801ee9a:	e74b      	b.n	801ed34 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801ee9c:	f104 0314 	add.w	r3, r4, #20
 801eea0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801eea4:	cb03      	ldmia	r3!, {r0, r1}
 801eea6:	f8c8 0000 	str.w	r0, [r8]
 801eeaa:	f8c8 1004 	str.w	r1, [r8, #4]
 801eeae:	6923      	ldr	r3, [r4, #16]
 801eeb0:	3308      	adds	r3, #8
 801eeb2:	6123      	str	r3, [r4, #16]
 801eeb4:	68a3      	ldr	r3, [r4, #8]
 801eeb6:	3301      	adds	r3, #1
 801eeb8:	60a3      	str	r3, [r4, #8]
 801eeba:	e785      	b.n	801edc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x180>
 801eebc:	f104 0814 	add.w	r8, r4, #20
 801eec0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801eec4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801eec8:	f8c9 0000 	str.w	r0, [r9]
 801eecc:	f8c9 1004 	str.w	r1, [r9, #4]
 801eed0:	6921      	ldr	r1, [r4, #16]
 801eed2:	3108      	adds	r1, #8
 801eed4:	6121      	str	r1, [r4, #16]
 801eed6:	68a1      	ldr	r1, [r4, #8]
 801eed8:	3101      	adds	r1, #1
 801eeda:	60a1      	str	r1, [r4, #8]
 801eedc:	e7c4      	b.n	801ee68 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 801eede:	1a83      	subs	r3, r0, r2
 801eee0:	9301      	str	r3, [sp, #4]
 801eee2:	f1ba 0f00 	cmp.w	sl, #0
 801eee6:	f040 8095 	bne.w	801f014 <_ZN8touchgfx7Outline10renderLineEiiii+0x3cc>
 801eeea:	9a01      	ldr	r2, [sp, #4]
 801eeec:	004b      	lsls	r3, r1, #1
 801eeee:	114e      	asrs	r6, r1, #5
 801eef0:	8b21      	ldrh	r1, [r4, #24]
 801eef2:	2a00      	cmp	r2, #0
 801eef4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801eef8:	8b62      	ldrh	r2, [r4, #26]
 801eefa:	bfa6      	itte	ge
 801eefc:	f04f 0a20 	movge.w	sl, #32
 801ef00:	f04f 0801 	movge.w	r8, #1
 801ef04:	f04f 38ff 	movlt.w	r8, #4294967295
 801ef08:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801ef0c:	ebaa 0c0c 	sub.w	ip, sl, ip
 801ef10:	4461      	add	r1, ip
 801ef12:	fb0c 2c03 	mla	ip, ip, r3, r2
 801ef16:	eb08 0205 	add.w	r2, r8, r5
 801ef1a:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 801ef1e:	b209      	sxth	r1, r1
 801ef20:	eb06 4702 	add.w	r7, r6, r2, lsl #16
 801ef24:	eb05 4500 	add.w	r5, r5, r0, lsl #16
 801ef28:	8321      	strh	r1, [r4, #24]
 801ef2a:	fa0f fc8c 	sxth.w	ip, ip
 801ef2e:	42af      	cmp	r7, r5
 801ef30:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801ef34:	d013      	beq.n	801ef5e <_ZN8touchgfx7Outline10renderLineEiiii+0x316>
 801ef36:	ea51 010c 	orrs.w	r1, r1, ip
 801ef3a:	d00b      	beq.n	801ef54 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 801ef3c:	2800      	cmp	r0, #0
 801ef3e:	db09      	blt.n	801ef54 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 801ef40:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ef42:	4281      	cmp	r1, r0
 801ef44:	dd06      	ble.n	801ef54 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 801ef46:	68a0      	ldr	r0, [r4, #8]
 801ef48:	6861      	ldr	r1, [r4, #4]
 801ef4a:	4288      	cmp	r0, r1
 801ef4c:	d339      	bcc.n	801efc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x37a>
 801ef4e:	2101      	movs	r1, #1
 801ef50:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801ef54:	2100      	movs	r1, #0
 801ef56:	82a6      	strh	r6, [r4, #20]
 801ef58:	82e2      	strh	r2, [r4, #22]
 801ef5a:	8321      	strh	r1, [r4, #24]
 801ef5c:	8361      	strh	r1, [r4, #26]
 801ef5e:	ea4f 054a 	mov.w	r5, sl, lsl #1
 801ef62:	f04f 0c00 	mov.w	ip, #0
 801ef66:	f04f 0b01 	mov.w	fp, #1
 801ef6a:	3d20      	subs	r5, #32
 801ef6c:	fb05 f703 	mul.w	r7, r5, r3
 801ef70:	b22d      	sxth	r5, r5
 801ef72:	b23f      	sxth	r7, r7
 801ef74:	ea45 0107 	orr.w	r1, r5, r7
 801ef78:	9100      	str	r1, [sp, #0]
 801ef7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ef7c:	428a      	cmp	r2, r1
 801ef7e:	d03e      	beq.n	801effe <_ZN8touchgfx7Outline10renderLineEiiii+0x3b6>
 801ef80:	4442      	add	r2, r8
 801ef82:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801ef86:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801ef8a:	eb06 4e02 	add.w	lr, r6, r2, lsl #16
 801ef8e:	8325      	strh	r5, [r4, #24]
 801ef90:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 801ef94:	8367      	strh	r7, [r4, #26]
 801ef96:	4586      	cmp	lr, r0
 801ef98:	d0ef      	beq.n	801ef7a <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801ef9a:	9800      	ldr	r0, [sp, #0]
 801ef9c:	b150      	cbz	r0, 801efb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 801ef9e:	2900      	cmp	r1, #0
 801efa0:	db08      	blt.n	801efb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 801efa2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801efa4:	4288      	cmp	r0, r1
 801efa6:	dd05      	ble.n	801efb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 801efa8:	68a0      	ldr	r0, [r4, #8]
 801efaa:	6861      	ldr	r1, [r4, #4]
 801efac:	4288      	cmp	r0, r1
 801efae:	d315      	bcc.n	801efdc <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 801efb0:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 801efb4:	82a6      	strh	r6, [r4, #20]
 801efb6:	82e2      	strh	r2, [r4, #22]
 801efb8:	f8a4 c018 	strh.w	ip, [r4, #24]
 801efbc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801efc0:	e7db      	b.n	801ef7a <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801efc2:	f104 0514 	add.w	r5, r4, #20
 801efc6:	6927      	ldr	r7, [r4, #16]
 801efc8:	cd03      	ldmia	r5!, {r0, r1}
 801efca:	6038      	str	r0, [r7, #0]
 801efcc:	6079      	str	r1, [r7, #4]
 801efce:	6921      	ldr	r1, [r4, #16]
 801efd0:	3108      	adds	r1, #8
 801efd2:	6121      	str	r1, [r4, #16]
 801efd4:	68a1      	ldr	r1, [r4, #8]
 801efd6:	3101      	adds	r1, #1
 801efd8:	60a1      	str	r1, [r4, #8]
 801efda:	e7bb      	b.n	801ef54 <_ZN8touchgfx7Outline10renderLineEiiii+0x30c>
 801efdc:	f104 0e14 	add.w	lr, r4, #20
 801efe0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801efe4:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801efe8:	f8c9 0000 	str.w	r0, [r9]
 801efec:	f8c9 1004 	str.w	r1, [r9, #4]
 801eff0:	6921      	ldr	r1, [r4, #16]
 801eff2:	3108      	adds	r1, #8
 801eff4:	6121      	str	r1, [r4, #16]
 801eff6:	68a1      	ldr	r1, [r4, #8]
 801eff8:	3101      	adds	r1, #1
 801effa:	60a1      	str	r1, [r4, #8]
 801effc:	e7da      	b.n	801efb4 <_ZN8touchgfx7Outline10renderLineEiiii+0x36c>
 801effe:	9a03      	ldr	r2, [sp, #12]
 801f000:	8b61      	ldrh	r1, [r4, #26]
 801f002:	f1a2 0e20 	sub.w	lr, r2, #32
 801f006:	8b22      	ldrh	r2, [r4, #24]
 801f008:	44d6      	add	lr, sl
 801f00a:	4472      	add	r2, lr
 801f00c:	fb0e 1303 	mla	r3, lr, r3, r1
 801f010:	8322      	strh	r2, [r4, #24]
 801f012:	e741      	b.n	801ee98 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 801f014:	9b01      	ldr	r3, [sp, #4]
 801f016:	2b00      	cmp	r3, #0
 801f018:	db40      	blt.n	801f09c <_ZN8touchgfx7Outline10renderLineEiiii+0x454>
 801f01a:	2201      	movs	r2, #1
 801f01c:	f1cc 0320 	rsb	r3, ip, #32
 801f020:	920a      	str	r2, [sp, #40]	; 0x28
 801f022:	2220      	movs	r2, #32
 801f024:	fb0a f303 	mul.w	r3, sl, r3
 801f028:	9202      	str	r2, [sp, #8]
 801f02a:	9a01      	ldr	r2, [sp, #4]
 801f02c:	fb93 f6f2 	sdiv	r6, r3, r2
 801f030:	fb02 3316 	mls	r3, r2, r6, r3
 801f034:	2b00      	cmp	r3, #0
 801f036:	9308      	str	r3, [sp, #32]
 801f038:	bfbc      	itt	lt
 801f03a:	f106 36ff 	addlt.w	r6, r6, #4294967295
 801f03e:	189b      	addlt	r3, r3, r2
 801f040:	eb06 0b01 	add.w	fp, r6, r1
 801f044:	bfb8      	it	lt
 801f046:	9308      	strlt	r3, [sp, #32]
 801f048:	ea4f 136b 	mov.w	r3, fp, asr #5
 801f04c:	9304      	str	r3, [sp, #16]
 801f04e:	9b02      	ldr	r3, [sp, #8]
 801f050:	4563      	cmp	r3, ip
 801f052:	d13a      	bne.n	801f0ca <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801f054:	9b04      	ldr	r3, [sp, #16]
 801f056:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801f05a:	eb03 4105 	add.w	r1, r3, r5, lsl #16
 801f05e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801f062:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801f066:	4299      	cmp	r1, r3
 801f068:	d046      	beq.n	801f0f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 801f06a:	8b63      	ldrh	r3, [r4, #26]
 801f06c:	8b21      	ldrh	r1, [r4, #24]
 801f06e:	430b      	orrs	r3, r1
 801f070:	b21b      	sxth	r3, r3
 801f072:	b15b      	cbz	r3, 801f08c <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 801f074:	2a00      	cmp	r2, #0
 801f076:	db09      	blt.n	801f08c <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 801f078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f07a:	4293      	cmp	r3, r2
 801f07c:	dd06      	ble.n	801f08c <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 801f07e:	68a2      	ldr	r2, [r4, #8]
 801f080:	6863      	ldr	r3, [r4, #4]
 801f082:	429a      	cmp	r2, r3
 801f084:	d314      	bcc.n	801f0b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x468>
 801f086:	2301      	movs	r3, #1
 801f088:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f08c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f090:	82e5      	strh	r5, [r4, #22]
 801f092:	82a3      	strh	r3, [r4, #20]
 801f094:	2300      	movs	r3, #0
 801f096:	8323      	strh	r3, [r4, #24]
 801f098:	8363      	strh	r3, [r4, #26]
 801f09a:	e02d      	b.n	801f0f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4b0>
 801f09c:	9a01      	ldr	r2, [sp, #4]
 801f09e:	fb0a f30c 	mul.w	r3, sl, ip
 801f0a2:	4252      	negs	r2, r2
 801f0a4:	9201      	str	r2, [sp, #4]
 801f0a6:	f04f 32ff 	mov.w	r2, #4294967295
 801f0aa:	920a      	str	r2, [sp, #40]	; 0x28
 801f0ac:	2200      	movs	r2, #0
 801f0ae:	e7bb      	b.n	801f028 <_ZN8touchgfx7Outline10renderLineEiiii+0x3e0>
 801f0b0:	f104 0314 	add.w	r3, r4, #20
 801f0b4:	6922      	ldr	r2, [r4, #16]
 801f0b6:	cb03      	ldmia	r3!, {r0, r1}
 801f0b8:	6010      	str	r0, [r2, #0]
 801f0ba:	6051      	str	r1, [r2, #4]
 801f0bc:	6923      	ldr	r3, [r4, #16]
 801f0be:	3308      	adds	r3, #8
 801f0c0:	6123      	str	r3, [r4, #16]
 801f0c2:	68a3      	ldr	r3, [r4, #8]
 801f0c4:	3301      	adds	r3, #1
 801f0c6:	60a3      	str	r3, [r4, #8]
 801f0c8:	e7e0      	b.n	801f08c <_ZN8touchgfx7Outline10renderLineEiiii+0x444>
 801f0ca:	f00b 021f 	and.w	r2, fp, #31
 801f0ce:	ea4f 1e61 	mov.w	lr, r1, asr #5
 801f0d2:	f001 031f 	and.w	r3, r1, #31
 801f0d6:	9209      	str	r2, [sp, #36]	; 0x24
 801f0d8:	9a04      	ldr	r2, [sp, #16]
 801f0da:	4596      	cmp	lr, r2
 801f0dc:	9a02      	ldr	r2, [sp, #8]
 801f0de:	eba2 020c 	sub.w	r2, r2, ip
 801f0e2:	f040 80f6 	bne.w	801f2d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 801f0e6:	8b21      	ldrh	r1, [r4, #24]
 801f0e8:	4411      	add	r1, r2
 801f0ea:	8321      	strh	r1, [r4, #24]
 801f0ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f0ee:	440b      	add	r3, r1
 801f0f0:	8b61      	ldrh	r1, [r4, #26]
 801f0f2:	fb02 1203 	mla	r2, r2, r3, r1
 801f0f6:	8362      	strh	r2, [r4, #26]
 801f0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0fa:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801f0fe:	442b      	add	r3, r5
 801f100:	9300      	str	r3, [sp, #0]
 801f102:	9a00      	ldr	r2, [sp, #0]
 801f104:	9b04      	ldr	r3, [sp, #16]
 801f106:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 801f10a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801f10e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801f112:	4298      	cmp	r0, r3
 801f114:	d01a      	beq.n	801f14c <_ZN8touchgfx7Outline10renderLineEiiii+0x504>
 801f116:	8b63      	ldrh	r3, [r4, #26]
 801f118:	8b20      	ldrh	r0, [r4, #24]
 801f11a:	4303      	orrs	r3, r0
 801f11c:	b21b      	sxth	r3, r3
 801f11e:	b163      	cbz	r3, 801f13a <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801f120:	2900      	cmp	r1, #0
 801f122:	db0a      	blt.n	801f13a <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801f124:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f126:	428b      	cmp	r3, r1
 801f128:	dd07      	ble.n	801f13a <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801f12a:	68a1      	ldr	r1, [r4, #8]
 801f12c:	6863      	ldr	r3, [r4, #4]
 801f12e:	4299      	cmp	r1, r3
 801f130:	f0c0 819a 	bcc.w	801f468 <_ZN8touchgfx7Outline10renderLineEiiii+0x820>
 801f134:	2301      	movs	r3, #1
 801f136:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f13a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f13e:	82a3      	strh	r3, [r4, #20]
 801f140:	f8bd 3000 	ldrh.w	r3, [sp]
 801f144:	82e3      	strh	r3, [r4, #22]
 801f146:	2300      	movs	r3, #0
 801f148:	8323      	strh	r3, [r4, #24]
 801f14a:	8363      	strh	r3, [r4, #26]
 801f14c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f14e:	9a00      	ldr	r2, [sp, #0]
 801f150:	4293      	cmp	r3, r2
 801f152:	f000 8090 	beq.w	801f276 <_ZN8touchgfx7Outline10renderLineEiiii+0x62e>
 801f156:	ea4f 134a 	mov.w	r3, sl, lsl #5
 801f15a:	9901      	ldr	r1, [sp, #4]
 801f15c:	9801      	ldr	r0, [sp, #4]
 801f15e:	fb93 f1f1 	sdiv	r1, r3, r1
 801f162:	fb00 3311 	mls	r3, r0, r1, r3
 801f166:	9106      	str	r1, [sp, #24]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	9307      	str	r3, [sp, #28]
 801f16c:	da04      	bge.n	801f178 <_ZN8touchgfx7Outline10renderLineEiiii+0x530>
 801f16e:	1e4b      	subs	r3, r1, #1
 801f170:	9306      	str	r3, [sp, #24]
 801f172:	9b07      	ldr	r3, [sp, #28]
 801f174:	4403      	add	r3, r0
 801f176:	9307      	str	r3, [sp, #28]
 801f178:	9b08      	ldr	r3, [sp, #32]
 801f17a:	f04f 0e00 	mov.w	lr, #0
 801f17e:	9901      	ldr	r1, [sp, #4]
 801f180:	1a5b      	subs	r3, r3, r1
 801f182:	4659      	mov	r1, fp
 801f184:	9308      	str	r3, [sp, #32]
 801f186:	9b02      	ldr	r3, [sp, #8]
 801f188:	f1c3 0320 	rsb	r3, r3, #32
 801f18c:	930c      	str	r3, [sp, #48]	; 0x30
 801f18e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f190:	9b02      	ldr	r3, [sp, #8]
 801f192:	1a1b      	subs	r3, r3, r0
 801f194:	9309      	str	r3, [sp, #36]	; 0x24
 801f196:	9807      	ldr	r0, [sp, #28]
 801f198:	9b08      	ldr	r3, [sp, #32]
 801f19a:	181b      	adds	r3, r3, r0
 801f19c:	bf58      	it	pl
 801f19e:	9801      	ldrpl	r0, [sp, #4]
 801f1a0:	9308      	str	r3, [sp, #32]
 801f1a2:	bf54      	ite	pl
 801f1a4:	1a1b      	subpl	r3, r3, r0
 801f1a6:	9d06      	ldrmi	r5, [sp, #24]
 801f1a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f1aa:	bf5e      	ittt	pl
 801f1ac:	9308      	strpl	r3, [sp, #32]
 801f1ae:	9b06      	ldrpl	r3, [sp, #24]
 801f1b0:	1c5d      	addpl	r5, r3, #1
 801f1b2:	44ab      	add	fp, r5
 801f1b4:	ea4f 136b 	mov.w	r3, fp, asr #5
 801f1b8:	9304      	str	r3, [sp, #16]
 801f1ba:	9b02      	ldr	r3, [sp, #8]
 801f1bc:	4283      	cmp	r3, r0
 801f1be:	f040 816d 	bne.w	801f49c <_ZN8touchgfx7Outline10renderLineEiiii+0x854>
 801f1c2:	9b04      	ldr	r3, [sp, #16]
 801f1c4:	9a00      	ldr	r2, [sp, #0]
 801f1c6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801f1ca:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 801f1ce:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801f1d2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801f1d6:	4298      	cmp	r0, r3
 801f1d8:	d01c      	beq.n	801f214 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 801f1da:	8b63      	ldrh	r3, [r4, #26]
 801f1dc:	8b20      	ldrh	r0, [r4, #24]
 801f1de:	4303      	orrs	r3, r0
 801f1e0:	b21b      	sxth	r3, r3
 801f1e2:	b16b      	cbz	r3, 801f200 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 801f1e4:	2900      	cmp	r1, #0
 801f1e6:	db0b      	blt.n	801f200 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 801f1e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f1ea:	428b      	cmp	r3, r1
 801f1ec:	dd08      	ble.n	801f200 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 801f1ee:	68a1      	ldr	r1, [r4, #8]
 801f1f0:	6863      	ldr	r3, [r4, #4]
 801f1f2:	4299      	cmp	r1, r3
 801f1f4:	f0c0 8145 	bcc.w	801f482 <_ZN8touchgfx7Outline10renderLineEiiii+0x83a>
 801f1f8:	f04f 0301 	mov.w	r3, #1
 801f1fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f200:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f204:	f8a4 e018 	strh.w	lr, [r4, #24]
 801f208:	82a3      	strh	r3, [r4, #20]
 801f20a:	f8bd 3000 	ldrh.w	r3, [sp]
 801f20e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801f212:	82e3      	strh	r3, [r4, #22]
 801f214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f216:	9a00      	ldr	r2, [sp, #0]
 801f218:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801f21c:	441a      	add	r2, r3
 801f21e:	9b04      	ldr	r3, [sp, #16]
 801f220:	eb03 4002 	add.w	r0, r3, r2, lsl #16
 801f224:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801f228:	9200      	str	r2, [sp, #0]
 801f22a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801f22e:	4298      	cmp	r0, r3
 801f230:	d01c      	beq.n	801f26c <_ZN8touchgfx7Outline10renderLineEiiii+0x624>
 801f232:	8b63      	ldrh	r3, [r4, #26]
 801f234:	8b20      	ldrh	r0, [r4, #24]
 801f236:	4303      	orrs	r3, r0
 801f238:	b21b      	sxth	r3, r3
 801f23a:	b16b      	cbz	r3, 801f258 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 801f23c:	2900      	cmp	r1, #0
 801f23e:	db0b      	blt.n	801f258 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 801f240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f242:	428b      	cmp	r3, r1
 801f244:	dd08      	ble.n	801f258 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 801f246:	68a1      	ldr	r1, [r4, #8]
 801f248:	6863      	ldr	r3, [r4, #4]
 801f24a:	4299      	cmp	r1, r3
 801f24c:	f0c0 820d 	bcc.w	801f66a <_ZN8touchgfx7Outline10renderLineEiiii+0xa22>
 801f250:	f04f 0301 	mov.w	r3, #1
 801f254:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f258:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f25c:	f8a4 e018 	strh.w	lr, [r4, #24]
 801f260:	82a3      	strh	r3, [r4, #20]
 801f262:	f8bd 3000 	ldrh.w	r3, [sp]
 801f266:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801f26a:	82e3      	strh	r3, [r4, #22]
 801f26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f26e:	4659      	mov	r1, fp
 801f270:	9a00      	ldr	r2, [sp, #0]
 801f272:	4293      	cmp	r3, r2
 801f274:	d18f      	bne.n	801f196 <_ZN8touchgfx7Outline10renderLineEiiii+0x54e>
 801f276:	9b02      	ldr	r3, [sp, #8]
 801f278:	f1c3 0e20 	rsb	lr, r3, #32
 801f27c:	9b05      	ldr	r3, [sp, #20]
 801f27e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 801f282:	9b03      	ldr	r3, [sp, #12]
 801f284:	4573      	cmp	r3, lr
 801f286:	f040 820a 	bne.w	801f69e <_ZN8touchgfx7Outline10renderLineEiiii+0xa56>
 801f28a:	9b00      	ldr	r3, [sp, #0]
 801f28c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801f290:	eb0c 4003 	add.w	r0, ip, r3, lsl #16
 801f294:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801f298:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801f29c:	4298      	cmp	r0, r3
 801f29e:	f43f ad49 	beq.w	801ed34 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801f2a2:	8b63      	ldrh	r3, [r4, #26]
 801f2a4:	8b20      	ldrh	r0, [r4, #24]
 801f2a6:	4303      	orrs	r3, r0
 801f2a8:	b21b      	sxth	r3, r3
 801f2aa:	b163      	cbz	r3, 801f2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801f2ac:	2900      	cmp	r1, #0
 801f2ae:	db0a      	blt.n	801f2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801f2b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f2b2:	428b      	cmp	r3, r1
 801f2b4:	dd07      	ble.n	801f2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801f2b6:	68a1      	ldr	r1, [r4, #8]
 801f2b8:	6863      	ldr	r3, [r4, #4]
 801f2ba:	4299      	cmp	r1, r3
 801f2bc:	f0c0 81e2 	bcc.w	801f684 <_ZN8touchgfx7Outline10renderLineEiiii+0xa3c>
 801f2c0:	2301      	movs	r3, #1
 801f2c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f2c6:	f8bd 3000 	ldrh.w	r3, [sp]
 801f2ca:	f8a4 c014 	strh.w	ip, [r4, #20]
 801f2ce:	82e3      	strh	r3, [r4, #22]
 801f2d0:	e50b      	b.n	801ecea <_ZN8touchgfx7Outline10renderLineEiiii+0xa2>
 801f2d2:	2e00      	cmp	r6, #0
 801f2d4:	f2c0 80a0 	blt.w	801f418 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d0>
 801f2d8:	f1c3 0120 	rsb	r1, r3, #32
 801f2dc:	434a      	muls	r2, r1
 801f2de:	2101      	movs	r1, #1
 801f2e0:	9107      	str	r1, [sp, #28]
 801f2e2:	2120      	movs	r1, #32
 801f2e4:	9106      	str	r1, [sp, #24]
 801f2e6:	9906      	ldr	r1, [sp, #24]
 801f2e8:	8b20      	ldrh	r0, [r4, #24]
 801f2ea:	440b      	add	r3, r1
 801f2ec:	8b61      	ldrh	r1, [r4, #26]
 801f2ee:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801f2f2:	fb92 f7f6 	sdiv	r7, r2, r6
 801f2f6:	fb06 2217 	mls	r2, r6, r7, r2
 801f2fa:	2a00      	cmp	r2, #0
 801f2fc:	bfbc      	itt	lt
 801f2fe:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801f302:	1992      	addlt	r2, r2, r6
 801f304:	fb07 1303 	mla	r3, r7, r3, r1
 801f308:	9907      	ldr	r1, [sp, #28]
 801f30a:	4438      	add	r0, r7
 801f30c:	b21b      	sxth	r3, r3
 801f30e:	448e      	add	lr, r1
 801f310:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801f314:	b200      	sxth	r0, r0
 801f316:	9300      	str	r3, [sp, #0]
 801f318:	f8bd 3000 	ldrh.w	r3, [sp]
 801f31c:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 801f320:	8320      	strh	r0, [r4, #24]
 801f322:	8363      	strh	r3, [r4, #26]
 801f324:	042b      	lsls	r3, r5, #16
 801f326:	eb0e 0903 	add.w	r9, lr, r3
 801f32a:	930c      	str	r3, [sp, #48]	; 0x30
 801f32c:	45c1      	cmp	r9, r8
 801f32e:	d014      	beq.n	801f35a <_ZN8touchgfx7Outline10renderLineEiiii+0x712>
 801f330:	9b00      	ldr	r3, [sp, #0]
 801f332:	4303      	orrs	r3, r0
 801f334:	d00b      	beq.n	801f34e <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 801f336:	2900      	cmp	r1, #0
 801f338:	db09      	blt.n	801f34e <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 801f33a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f33c:	428b      	cmp	r3, r1
 801f33e:	dd06      	ble.n	801f34e <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 801f340:	68a1      	ldr	r1, [r4, #8]
 801f342:	6863      	ldr	r3, [r4, #4]
 801f344:	4299      	cmp	r1, r3
 801f346:	d36e      	bcc.n	801f426 <_ZN8touchgfx7Outline10renderLineEiiii+0x7de>
 801f348:	2301      	movs	r3, #1
 801f34a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f34e:	2300      	movs	r3, #0
 801f350:	f8a4 e014 	strh.w	lr, [r4, #20]
 801f354:	82e5      	strh	r5, [r4, #22]
 801f356:	8323      	strh	r3, [r4, #24]
 801f358:	8363      	strh	r3, [r4, #26]
 801f35a:	9904      	ldr	r1, [sp, #16]
 801f35c:	eb0c 0307 	add.w	r3, ip, r7
 801f360:	4571      	cmp	r1, lr
 801f362:	d04b      	beq.n	801f3fc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b4>
 801f364:	9902      	ldr	r1, [sp, #8]
 801f366:	1b92      	subs	r2, r2, r6
 801f368:	1ac9      	subs	r1, r1, r3
 801f36a:	9200      	str	r2, [sp, #0]
 801f36c:	440f      	add	r7, r1
 801f36e:	017f      	lsls	r7, r7, #5
 801f370:	fb97 fcf6 	sdiv	ip, r7, r6
 801f374:	fb06 771c 	mls	r7, r6, ip, r7
 801f378:	2f00      	cmp	r7, #0
 801f37a:	bfbc      	itt	lt
 801f37c:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801f380:	19bf      	addlt	r7, r7, r6
 801f382:	f10c 0101 	add.w	r1, ip, #1
 801f386:	910d      	str	r1, [sp, #52]	; 0x34
 801f388:	9a00      	ldr	r2, [sp, #0]
 801f38a:	8b20      	ldrh	r0, [r4, #24]
 801f38c:	19d2      	adds	r2, r2, r7
 801f38e:	8b61      	ldrh	r1, [r4, #26]
 801f390:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801f394:	9200      	str	r2, [sp, #0]
 801f396:	bf5b      	ittet	pl
 801f398:	1b92      	subpl	r2, r2, r6
 801f39a:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 801f39e:	46e0      	movmi	r8, ip
 801f3a0:	9200      	strpl	r2, [sp, #0]
 801f3a2:	9a07      	ldr	r2, [sp, #28]
 801f3a4:	4440      	add	r0, r8
 801f3a6:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 801f3aa:	4443      	add	r3, r8
 801f3ac:	4496      	add	lr, r2
 801f3ae:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801f3b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f3b4:	b200      	sxth	r0, r0
 801f3b6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 801f3ba:	4472      	add	r2, lr
 801f3bc:	b209      	sxth	r1, r1
 801f3be:	8320      	strh	r0, [r4, #24]
 801f3c0:	454a      	cmp	r2, r9
 801f3c2:	8361      	strh	r1, [r4, #26]
 801f3c4:	d017      	beq.n	801f3f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ae>
 801f3c6:	ea50 0201 	orrs.w	r2, r0, r1
 801f3ca:	d00d      	beq.n	801f3e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801f3cc:	f1b8 0f00 	cmp.w	r8, #0
 801f3d0:	db0a      	blt.n	801f3e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801f3d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f3d4:	4541      	cmp	r1, r8
 801f3d6:	dd07      	ble.n	801f3e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801f3d8:	68a0      	ldr	r0, [r4, #8]
 801f3da:	6861      	ldr	r1, [r4, #4]
 801f3dc:	4288      	cmp	r0, r1
 801f3de:	d332      	bcc.n	801f446 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fe>
 801f3e0:	f04f 0201 	mov.w	r2, #1
 801f3e4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801f3e8:	f04f 0200 	mov.w	r2, #0
 801f3ec:	f8a4 e014 	strh.w	lr, [r4, #20]
 801f3f0:	82e5      	strh	r5, [r4, #22]
 801f3f2:	8322      	strh	r2, [r4, #24]
 801f3f4:	8362      	strh	r2, [r4, #26]
 801f3f6:	9904      	ldr	r1, [sp, #16]
 801f3f8:	4571      	cmp	r1, lr
 801f3fa:	d1c5      	bne.n	801f388 <_ZN8touchgfx7Outline10renderLineEiiii+0x740>
 801f3fc:	9a02      	ldr	r2, [sp, #8]
 801f3fe:	eba2 0c03 	sub.w	ip, r2, r3
 801f402:	8b23      	ldrh	r3, [r4, #24]
 801f404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f406:	4463      	add	r3, ip
 801f408:	3220      	adds	r2, #32
 801f40a:	8323      	strh	r3, [r4, #24]
 801f40c:	9b06      	ldr	r3, [sp, #24]
 801f40e:	1ad2      	subs	r2, r2, r3
 801f410:	8b63      	ldrh	r3, [r4, #26]
 801f412:	fb0c 3302 	mla	r3, ip, r2, r3
 801f416:	e63f      	b.n	801f098 <_ZN8touchgfx7Outline10renderLineEiiii+0x450>
 801f418:	f04f 31ff 	mov.w	r1, #4294967295
 801f41c:	435a      	muls	r2, r3
 801f41e:	4276      	negs	r6, r6
 801f420:	9107      	str	r1, [sp, #28]
 801f422:	2100      	movs	r1, #0
 801f424:	e75e      	b.n	801f2e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x69c>
 801f426:	f104 0314 	add.w	r3, r4, #20
 801f42a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801f42e:	cb03      	ldmia	r3!, {r0, r1}
 801f430:	f8c8 0000 	str.w	r0, [r8]
 801f434:	f8c8 1004 	str.w	r1, [r8, #4]
 801f438:	6923      	ldr	r3, [r4, #16]
 801f43a:	3308      	adds	r3, #8
 801f43c:	6123      	str	r3, [r4, #16]
 801f43e:	68a3      	ldr	r3, [r4, #8]
 801f440:	3301      	adds	r3, #1
 801f442:	60a3      	str	r3, [r4, #8]
 801f444:	e783      	b.n	801f34e <_ZN8touchgfx7Outline10renderLineEiiii+0x706>
 801f446:	f104 0814 	add.w	r8, r4, #20
 801f44a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f44e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801f452:	f8c9 0000 	str.w	r0, [r9]
 801f456:	f8c9 1004 	str.w	r1, [r9, #4]
 801f45a:	6921      	ldr	r1, [r4, #16]
 801f45c:	3108      	adds	r1, #8
 801f45e:	6121      	str	r1, [r4, #16]
 801f460:	68a1      	ldr	r1, [r4, #8]
 801f462:	3101      	adds	r1, #1
 801f464:	60a1      	str	r1, [r4, #8]
 801f466:	e7bf      	b.n	801f3e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a0>
 801f468:	f104 0314 	add.w	r3, r4, #20
 801f46c:	6925      	ldr	r5, [r4, #16]
 801f46e:	cb03      	ldmia	r3!, {r0, r1}
 801f470:	6028      	str	r0, [r5, #0]
 801f472:	6069      	str	r1, [r5, #4]
 801f474:	6923      	ldr	r3, [r4, #16]
 801f476:	3308      	adds	r3, #8
 801f478:	6123      	str	r3, [r4, #16]
 801f47a:	68a3      	ldr	r3, [r4, #8]
 801f47c:	3301      	adds	r3, #1
 801f47e:	60a3      	str	r3, [r4, #8]
 801f480:	e65b      	b.n	801f13a <_ZN8touchgfx7Outline10renderLineEiiii+0x4f2>
 801f482:	f104 0314 	add.w	r3, r4, #20
 801f486:	6925      	ldr	r5, [r4, #16]
 801f488:	cb03      	ldmia	r3!, {r0, r1}
 801f48a:	6028      	str	r0, [r5, #0]
 801f48c:	6069      	str	r1, [r5, #4]
 801f48e:	6923      	ldr	r3, [r4, #16]
 801f490:	3308      	adds	r3, #8
 801f492:	6123      	str	r3, [r4, #16]
 801f494:	68a3      	ldr	r3, [r4, #8]
 801f496:	3301      	adds	r3, #1
 801f498:	60a3      	str	r3, [r4, #8]
 801f49a:	e6b1      	b.n	801f200 <_ZN8touchgfx7Outline10renderLineEiiii+0x5b8>
 801f49c:	f00b 031f 	and.w	r3, fp, #31
 801f4a0:	114f      	asrs	r7, r1, #5
 801f4a2:	f001 011f 	and.w	r1, r1, #31
 801f4a6:	930f      	str	r3, [sp, #60]	; 0x3c
 801f4a8:	9b04      	ldr	r3, [sp, #16]
 801f4aa:	429f      	cmp	r7, r3
 801f4ac:	d10a      	bne.n	801f4c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x87c>
 801f4ae:	8b23      	ldrh	r3, [r4, #24]
 801f4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f4b2:	4403      	add	r3, r0
 801f4b4:	8323      	strh	r3, [r4, #24]
 801f4b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f4b8:	4419      	add	r1, r3
 801f4ba:	8b63      	ldrh	r3, [r4, #26]
 801f4bc:	fb00 3101 	mla	r1, r0, r1, r3
 801f4c0:	8361      	strh	r1, [r4, #26]
 801f4c2:	e6a7      	b.n	801f214 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 801f4c4:	2d00      	cmp	r5, #0
 801f4c6:	f2c0 80a6 	blt.w	801f616 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ce>
 801f4ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f4cc:	f1c1 0320 	rsb	r3, r1, #32
 801f4d0:	4343      	muls	r3, r0
 801f4d2:	2001      	movs	r0, #1
 801f4d4:	900e      	str	r0, [sp, #56]	; 0x38
 801f4d6:	2020      	movs	r0, #32
 801f4d8:	900d      	str	r0, [sp, #52]	; 0x34
 801f4da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f4dc:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 801f4e0:	4411      	add	r1, r2
 801f4e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f4e4:	8b20      	ldrh	r0, [r4, #24]
 801f4e6:	4417      	add	r7, r2
 801f4e8:	9a00      	ldr	r2, [sp, #0]
 801f4ea:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801f4ee:	0412      	lsls	r2, r2, #16
 801f4f0:	fb93 f6f5 	sdiv	r6, r3, r5
 801f4f4:	fb05 3316 	mls	r3, r5, r6, r3
 801f4f8:	eb07 0902 	add.w	r9, r7, r2
 801f4fc:	9210      	str	r2, [sp, #64]	; 0x40
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	bfbc      	itt	lt
 801f502:	f106 36ff 	addlt.w	r6, r6, #4294967295
 801f506:	195b      	addlt	r3, r3, r5
 801f508:	fb06 c101 	mla	r1, r6, r1, ip
 801f50c:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 801f510:	4430      	add	r0, r6
 801f512:	eb08 480c 	add.w	r8, r8, ip, lsl #16
 801f516:	b200      	sxth	r0, r0
 801f518:	b209      	sxth	r1, r1
 801f51a:	45c1      	cmp	r9, r8
 801f51c:	8320      	strh	r0, [r4, #24]
 801f51e:	8361      	strh	r1, [r4, #26]
 801f520:	d018      	beq.n	801f554 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 801f522:	ea50 0201 	orrs.w	r2, r0, r1
 801f526:	d00d      	beq.n	801f544 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 801f528:	f1bc 0f00 	cmp.w	ip, #0
 801f52c:	db0a      	blt.n	801f544 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 801f52e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f530:	4561      	cmp	r1, ip
 801f532:	dd07      	ble.n	801f544 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 801f534:	68a0      	ldr	r0, [r4, #8]
 801f536:	6861      	ldr	r1, [r4, #4]
 801f538:	4288      	cmp	r0, r1
 801f53a:	d374      	bcc.n	801f626 <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 801f53c:	f04f 0201 	mov.w	r2, #1
 801f540:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801f544:	f8bd 2000 	ldrh.w	r2, [sp]
 801f548:	82a7      	strh	r7, [r4, #20]
 801f54a:	82e2      	strh	r2, [r4, #22]
 801f54c:	f8a4 e018 	strh.w	lr, [r4, #24]
 801f550:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801f554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f556:	eb02 0c06 	add.w	ip, r2, r6
 801f55a:	9a04      	ldr	r2, [sp, #16]
 801f55c:	42ba      	cmp	r2, r7
 801f55e:	d04a      	beq.n	801f5f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 801f560:	9a02      	ldr	r2, [sp, #8]
 801f562:	1b5b      	subs	r3, r3, r5
 801f564:	eba2 010c 	sub.w	r1, r2, ip
 801f568:	440e      	add	r6, r1
 801f56a:	0176      	lsls	r6, r6, #5
 801f56c:	fb96 f8f5 	sdiv	r8, r6, r5
 801f570:	fb05 6618 	mls	r6, r5, r8, r6
 801f574:	2e00      	cmp	r6, #0
 801f576:	bfbc      	itt	lt
 801f578:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801f57c:	1976      	addlt	r6, r6, r5
 801f57e:	f108 0201 	add.w	r2, r8, #1
 801f582:	9211      	str	r2, [sp, #68]	; 0x44
 801f584:	199b      	adds	r3, r3, r6
 801f586:	8b20      	ldrh	r0, [r4, #24]
 801f588:	8b61      	ldrh	r1, [r4, #26]
 801f58a:	bf54      	ite	pl
 801f58c:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 801f590:	46c1      	movmi	r9, r8
 801f592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f594:	bf58      	it	pl
 801f596:	1b5b      	subpl	r3, r3, r5
 801f598:	4448      	add	r0, r9
 801f59a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 801f59e:	4417      	add	r7, r2
 801f5a0:	44cc      	add	ip, r9
 801f5a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5a4:	b200      	sxth	r0, r0
 801f5a6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 801f5aa:	b209      	sxth	r1, r1
 801f5ac:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 801f5b0:	443a      	add	r2, r7
 801f5b2:	8320      	strh	r0, [r4, #24]
 801f5b4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 801f5b8:	8361      	strh	r1, [r4, #26]
 801f5ba:	4552      	cmp	r2, sl
 801f5bc:	d018      	beq.n	801f5f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 801f5be:	ea50 0201 	orrs.w	r2, r0, r1
 801f5c2:	d00d      	beq.n	801f5e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801f5c4:	f1b9 0f00 	cmp.w	r9, #0
 801f5c8:	db0a      	blt.n	801f5e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801f5ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f5cc:	4549      	cmp	r1, r9
 801f5ce:	dd07      	ble.n	801f5e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801f5d0:	68a0      	ldr	r0, [r4, #8]
 801f5d2:	6861      	ldr	r1, [r4, #4]
 801f5d4:	4288      	cmp	r0, r1
 801f5d6:	d337      	bcc.n	801f648 <_ZN8touchgfx7Outline10renderLineEiiii+0xa00>
 801f5d8:	f04f 0201 	mov.w	r2, #1
 801f5dc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801f5e0:	f8bd 2000 	ldrh.w	r2, [sp]
 801f5e4:	82a7      	strh	r7, [r4, #20]
 801f5e6:	82e2      	strh	r2, [r4, #22]
 801f5e8:	f8a4 e018 	strh.w	lr, [r4, #24]
 801f5ec:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801f5f0:	9a04      	ldr	r2, [sp, #16]
 801f5f2:	42ba      	cmp	r2, r7
 801f5f4:	d1c6      	bne.n	801f584 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 801f5f6:	9b02      	ldr	r3, [sp, #8]
 801f5f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f5fa:	eba3 0c0c 	sub.w	ip, r3, ip
 801f5fe:	8b23      	ldrh	r3, [r4, #24]
 801f600:	3120      	adds	r1, #32
 801f602:	4463      	add	r3, ip
 801f604:	8323      	strh	r3, [r4, #24]
 801f606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f608:	1ac9      	subs	r1, r1, r3
 801f60a:	8b63      	ldrh	r3, [r4, #26]
 801f60c:	fb0c 3c01 	mla	ip, ip, r1, r3
 801f610:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801f614:	e5fe      	b.n	801f214 <_ZN8touchgfx7Outline10renderLineEiiii+0x5cc>
 801f616:	f04f 30ff 	mov.w	r0, #4294967295
 801f61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f61c:	426d      	negs	r5, r5
 801f61e:	900e      	str	r0, [sp, #56]	; 0x38
 801f620:	2000      	movs	r0, #0
 801f622:	434b      	muls	r3, r1
 801f624:	e758      	b.n	801f4d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x890>
 801f626:	f104 0c14 	add.w	ip, r4, #20
 801f62a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801f62e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 801f632:	f8c8 0000 	str.w	r0, [r8]
 801f636:	f8c8 1004 	str.w	r1, [r8, #4]
 801f63a:	6921      	ldr	r1, [r4, #16]
 801f63c:	3108      	adds	r1, #8
 801f63e:	6121      	str	r1, [r4, #16]
 801f640:	68a1      	ldr	r1, [r4, #8]
 801f642:	3101      	adds	r1, #1
 801f644:	60a1      	str	r1, [r4, #8]
 801f646:	e77d      	b.n	801f544 <_ZN8touchgfx7Outline10renderLineEiiii+0x8fc>
 801f648:	f104 0914 	add.w	r9, r4, #20
 801f64c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f650:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 801f654:	f8ca 0000 	str.w	r0, [sl]
 801f658:	f8ca 1004 	str.w	r1, [sl, #4]
 801f65c:	6921      	ldr	r1, [r4, #16]
 801f65e:	3108      	adds	r1, #8
 801f660:	6121      	str	r1, [r4, #16]
 801f662:	68a1      	ldr	r1, [r4, #8]
 801f664:	3101      	adds	r1, #1
 801f666:	60a1      	str	r1, [r4, #8]
 801f668:	e7ba      	b.n	801f5e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 801f66a:	f104 0314 	add.w	r3, r4, #20
 801f66e:	6925      	ldr	r5, [r4, #16]
 801f670:	cb03      	ldmia	r3!, {r0, r1}
 801f672:	6028      	str	r0, [r5, #0]
 801f674:	6069      	str	r1, [r5, #4]
 801f676:	6923      	ldr	r3, [r4, #16]
 801f678:	3308      	adds	r3, #8
 801f67a:	6123      	str	r3, [r4, #16]
 801f67c:	68a3      	ldr	r3, [r4, #8]
 801f67e:	3301      	adds	r3, #1
 801f680:	60a3      	str	r3, [r4, #8]
 801f682:	e5e9      	b.n	801f258 <_ZN8touchgfx7Outline10renderLineEiiii+0x610>
 801f684:	f104 0314 	add.w	r3, r4, #20
 801f688:	6925      	ldr	r5, [r4, #16]
 801f68a:	cb03      	ldmia	r3!, {r0, r1}
 801f68c:	6028      	str	r0, [r5, #0]
 801f68e:	6069      	str	r1, [r5, #4]
 801f690:	6923      	ldr	r3, [r4, #16]
 801f692:	3308      	adds	r3, #8
 801f694:	6123      	str	r3, [r4, #16]
 801f696:	68a3      	ldr	r3, [r4, #8]
 801f698:	3301      	adds	r3, #1
 801f69a:	60a3      	str	r3, [r4, #8]
 801f69c:	e613      	b.n	801f2c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x67e>
 801f69e:	9b05      	ldr	r3, [sp, #20]
 801f6a0:	ea4f 176b 	mov.w	r7, fp, asr #5
 801f6a4:	f00b 011f 	and.w	r1, fp, #31
 801f6a8:	f003 031f 	and.w	r3, r3, #31
 801f6ac:	4567      	cmp	r7, ip
 801f6ae:	9302      	str	r3, [sp, #8]
 801f6b0:	9b03      	ldr	r3, [sp, #12]
 801f6b2:	eba3 060e 	sub.w	r6, r3, lr
 801f6b6:	d10a      	bne.n	801f6ce <_ZN8touchgfx7Outline10renderLineEiiii+0xa86>
 801f6b8:	8b23      	ldrh	r3, [r4, #24]
 801f6ba:	4433      	add	r3, r6
 801f6bc:	8323      	strh	r3, [r4, #24]
 801f6be:	9b02      	ldr	r3, [sp, #8]
 801f6c0:	4419      	add	r1, r3
 801f6c2:	8b63      	ldrh	r3, [r4, #26]
 801f6c4:	fb06 3601 	mla	r6, r6, r1, r3
 801f6c8:	8366      	strh	r6, [r4, #26]
 801f6ca:	f7ff bb33 	b.w	801ed34 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801f6ce:	9b05      	ldr	r3, [sp, #20]
 801f6d0:	ebb3 030b 	subs.w	r3, r3, fp
 801f6d4:	f100 809f 	bmi.w	801f816 <_ZN8touchgfx7Outline10renderLineEiiii+0xbce>
 801f6d8:	f1c1 0020 	rsb	r0, r1, #32
 801f6dc:	2201      	movs	r2, #1
 801f6de:	f04f 0b20 	mov.w	fp, #32
 801f6e2:	4346      	muls	r6, r0
 801f6e4:	9201      	str	r2, [sp, #4]
 801f6e6:	9a01      	ldr	r2, [sp, #4]
 801f6e8:	4459      	add	r1, fp
 801f6ea:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801f6ee:	4417      	add	r7, r2
 801f6f0:	9a00      	ldr	r2, [sp, #0]
 801f6f2:	8b20      	ldrh	r0, [r4, #24]
 801f6f4:	0412      	lsls	r2, r2, #16
 801f6f6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801f6fa:	fb96 f5f3 	sdiv	r5, r6, r3
 801f6fe:	fb03 6615 	mls	r6, r3, r5, r6
 801f702:	eb07 0a02 	add.w	sl, r7, r2
 801f706:	9204      	str	r2, [sp, #16]
 801f708:	2e00      	cmp	r6, #0
 801f70a:	bfbc      	itt	lt
 801f70c:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801f710:	18f6      	addlt	r6, r6, r3
 801f712:	fb05 8101 	mla	r1, r5, r1, r8
 801f716:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801f71a:	4428      	add	r0, r5
 801f71c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 801f720:	b200      	sxth	r0, r0
 801f722:	b209      	sxth	r1, r1
 801f724:	45ca      	cmp	sl, r9
 801f726:	8320      	strh	r0, [r4, #24]
 801f728:	8361      	strh	r1, [r4, #26]
 801f72a:	d016      	beq.n	801f75a <_ZN8touchgfx7Outline10renderLineEiiii+0xb12>
 801f72c:	ea50 0201 	orrs.w	r2, r0, r1
 801f730:	d00c      	beq.n	801f74c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 801f732:	f1b8 0f00 	cmp.w	r8, #0
 801f736:	db09      	blt.n	801f74c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 801f738:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f73a:	4541      	cmp	r1, r8
 801f73c:	dd06      	ble.n	801f74c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 801f73e:	68a0      	ldr	r0, [r4, #8]
 801f740:	6861      	ldr	r1, [r4, #4]
 801f742:	4288      	cmp	r0, r1
 801f744:	d36f      	bcc.n	801f826 <_ZN8touchgfx7Outline10renderLineEiiii+0xbde>
 801f746:	2101      	movs	r1, #1
 801f748:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801f74c:	2100      	movs	r1, #0
 801f74e:	f8bd 2000 	ldrh.w	r2, [sp]
 801f752:	82a7      	strh	r7, [r4, #20]
 801f754:	82e2      	strh	r2, [r4, #22]
 801f756:	8321      	strh	r1, [r4, #24]
 801f758:	8361      	strh	r1, [r4, #26]
 801f75a:	45bc      	cmp	ip, r7
 801f75c:	44ae      	add	lr, r5
 801f75e:	d049      	beq.n	801f7f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbac>
 801f760:	9a03      	ldr	r2, [sp, #12]
 801f762:	1af6      	subs	r6, r6, r3
 801f764:	eba2 010e 	sub.w	r1, r2, lr
 801f768:	440d      	add	r5, r1
 801f76a:	016d      	lsls	r5, r5, #5
 801f76c:	fb95 f8f3 	sdiv	r8, r5, r3
 801f770:	fb03 5518 	mls	r5, r3, r8, r5
 801f774:	2d00      	cmp	r5, #0
 801f776:	bfbc      	itt	lt
 801f778:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801f77c:	18ed      	addlt	r5, r5, r3
 801f77e:	f108 0201 	add.w	r2, r8, #1
 801f782:	9205      	str	r2, [sp, #20]
 801f784:	1976      	adds	r6, r6, r5
 801f786:	8b20      	ldrh	r0, [r4, #24]
 801f788:	8b61      	ldrh	r1, [r4, #26]
 801f78a:	bf54      	ite	pl
 801f78c:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 801f790:	46c1      	movmi	r9, r8
 801f792:	9a01      	ldr	r2, [sp, #4]
 801f794:	bf58      	it	pl
 801f796:	1af6      	subpl	r6, r6, r3
 801f798:	4448      	add	r0, r9
 801f79a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 801f79e:	4417      	add	r7, r2
 801f7a0:	44ce      	add	lr, r9
 801f7a2:	9a04      	ldr	r2, [sp, #16]
 801f7a4:	b200      	sxth	r0, r0
 801f7a6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 801f7aa:	b209      	sxth	r1, r1
 801f7ac:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 801f7b0:	443a      	add	r2, r7
 801f7b2:	8320      	strh	r0, [r4, #24]
 801f7b4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 801f7b8:	8361      	strh	r1, [r4, #26]
 801f7ba:	4552      	cmp	r2, sl
 801f7bc:	d018      	beq.n	801f7f0 <_ZN8touchgfx7Outline10renderLineEiiii+0xba8>
 801f7be:	ea50 0201 	orrs.w	r2, r0, r1
 801f7c2:	d00d      	beq.n	801f7e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 801f7c4:	f1b9 0f00 	cmp.w	r9, #0
 801f7c8:	db0a      	blt.n	801f7e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 801f7ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f7cc:	4549      	cmp	r1, r9
 801f7ce:	dd07      	ble.n	801f7e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>
 801f7d0:	68a0      	ldr	r0, [r4, #8]
 801f7d2:	6861      	ldr	r1, [r4, #4]
 801f7d4:	4288      	cmp	r0, r1
 801f7d6:	d337      	bcc.n	801f848 <_ZN8touchgfx7Outline10renderLineEiiii+0xc00>
 801f7d8:	f04f 0201 	mov.w	r2, #1
 801f7dc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801f7e0:	f8bd 2000 	ldrh.w	r2, [sp]
 801f7e4:	82a7      	strh	r7, [r4, #20]
 801f7e6:	82e2      	strh	r2, [r4, #22]
 801f7e8:	f04f 0200 	mov.w	r2, #0
 801f7ec:	8322      	strh	r2, [r4, #24]
 801f7ee:	8362      	strh	r2, [r4, #26]
 801f7f0:	45bc      	cmp	ip, r7
 801f7f2:	d1c7      	bne.n	801f784 <_ZN8touchgfx7Outline10renderLineEiiii+0xb3c>
 801f7f4:	9b03      	ldr	r3, [sp, #12]
 801f7f6:	8b62      	ldrh	r2, [r4, #26]
 801f7f8:	eba3 0e0e 	sub.w	lr, r3, lr
 801f7fc:	8b23      	ldrh	r3, [r4, #24]
 801f7fe:	4473      	add	r3, lr
 801f800:	8323      	strh	r3, [r4, #24]
 801f802:	9b02      	ldr	r3, [sp, #8]
 801f804:	3320      	adds	r3, #32
 801f806:	eba3 030b 	sub.w	r3, r3, fp
 801f80a:	fb0e 2e03 	mla	lr, lr, r3, r2
 801f80e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801f812:	f7ff ba8f 	b.w	801ed34 <_ZN8touchgfx7Outline10renderLineEiiii+0xec>
 801f816:	f04f 32ff 	mov.w	r2, #4294967295
 801f81a:	434e      	muls	r6, r1
 801f81c:	425b      	negs	r3, r3
 801f81e:	f04f 0b00 	mov.w	fp, #0
 801f822:	9201      	str	r2, [sp, #4]
 801f824:	e75f      	b.n	801f6e6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa9e>
 801f826:	f104 0814 	add.w	r8, r4, #20
 801f82a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f82e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801f832:	f8c9 0000 	str.w	r0, [r9]
 801f836:	f8c9 1004 	str.w	r1, [r9, #4]
 801f83a:	6921      	ldr	r1, [r4, #16]
 801f83c:	3108      	adds	r1, #8
 801f83e:	6121      	str	r1, [r4, #16]
 801f840:	68a1      	ldr	r1, [r4, #8]
 801f842:	3101      	adds	r1, #1
 801f844:	60a1      	str	r1, [r4, #8]
 801f846:	e781      	b.n	801f74c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 801f848:	f104 0914 	add.w	r9, r4, #20
 801f84c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f850:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 801f854:	f8ca 0000 	str.w	r0, [sl]
 801f858:	f8ca 1004 	str.w	r1, [sl, #4]
 801f85c:	6921      	ldr	r1, [r4, #16]
 801f85e:	3108      	adds	r1, #8
 801f860:	6121      	str	r1, [r4, #16]
 801f862:	68a1      	ldr	r1, [r4, #8]
 801f864:	3101      	adds	r1, #1
 801f866:	60a1      	str	r1, [r4, #8]
 801f868:	e7ba      	b.n	801f7e0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb98>

0801f86a <_ZN8touchgfx7Outline6lineToEii>:
 801f86a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f86c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801f86e:	4604      	mov	r4, r0
 801f870:	460d      	mov	r5, r1
 801f872:	4616      	mov	r6, r2
 801f874:	079b      	lsls	r3, r3, #30
 801f876:	d526      	bpl.n	801f8c6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801f878:	6a02      	ldr	r2, [r0, #32]
 801f87a:	69c1      	ldr	r1, [r0, #28]
 801f87c:	ea86 0302 	eor.w	r3, r6, r2
 801f880:	ea85 0001 	eor.w	r0, r5, r1
 801f884:	4303      	orrs	r3, r0
 801f886:	d01e      	beq.n	801f8c6 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801f888:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f88a:	114b      	asrs	r3, r1, #5
 801f88c:	9600      	str	r6, [sp, #0]
 801f88e:	4283      	cmp	r3, r0
 801f890:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f892:	bfb8      	it	lt
 801f894:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801f896:	3301      	adds	r3, #1
 801f898:	4283      	cmp	r3, r0
 801f89a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f89c:	bfc8      	it	gt
 801f89e:	6363      	strgt	r3, [r4, #52]	; 0x34
 801f8a0:	116b      	asrs	r3, r5, #5
 801f8a2:	4283      	cmp	r3, r0
 801f8a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f8a6:	bfb8      	it	lt
 801f8a8:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801f8aa:	3301      	adds	r3, #1
 801f8ac:	4283      	cmp	r3, r0
 801f8ae:	4620      	mov	r0, r4
 801f8b0:	bfc8      	it	gt
 801f8b2:	6363      	strgt	r3, [r4, #52]	; 0x34
 801f8b4:	462b      	mov	r3, r5
 801f8b6:	f7ff f9c7 	bl	801ec48 <_ZN8touchgfx7Outline10renderLineEiiii>
 801f8ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f8bc:	61e5      	str	r5, [r4, #28]
 801f8be:	f043 0301 	orr.w	r3, r3, #1
 801f8c2:	6226      	str	r6, [r4, #32]
 801f8c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f8c6:	b002      	add	sp, #8
 801f8c8:	bd70      	pop	{r4, r5, r6, pc}

0801f8ca <_ZN8touchgfx7Outline6moveToEii>:
 801f8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f8cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801f8ce:	4615      	mov	r5, r2
 801f8d0:	4604      	mov	r4, r0
 801f8d2:	460e      	mov	r6, r1
 801f8d4:	079a      	lsls	r2, r3, #30
 801f8d6:	d401      	bmi.n	801f8dc <_ZN8touchgfx7Outline6moveToEii+0x12>
 801f8d8:	f7ff f970 	bl	801ebbc <_ZN8touchgfx7Outline5resetEv>
 801f8dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f8de:	07db      	lsls	r3, r3, #31
 801f8e0:	d504      	bpl.n	801f8ec <_ZN8touchgfx7Outline6moveToEii+0x22>
 801f8e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801f8e4:	4620      	mov	r0, r4
 801f8e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f8e8:	f7ff ffbf 	bl	801f86a <_ZN8touchgfx7Outline6lineToEii>
 801f8ec:	1177      	asrs	r7, r6, #5
 801f8ee:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801f8f2:	116a      	asrs	r2, r5, #5
 801f8f4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801f8f8:	eb07 4002 	add.w	r0, r7, r2, lsl #16
 801f8fc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 801f900:	4298      	cmp	r0, r3
 801f902:	d015      	beq.n	801f930 <_ZN8touchgfx7Outline6moveToEii+0x66>
 801f904:	8b63      	ldrh	r3, [r4, #26]
 801f906:	8b20      	ldrh	r0, [r4, #24]
 801f908:	4303      	orrs	r3, r0
 801f90a:	b21b      	sxth	r3, r3
 801f90c:	b15b      	cbz	r3, 801f926 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 801f90e:	2900      	cmp	r1, #0
 801f910:	db09      	blt.n	801f926 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 801f912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f914:	428b      	cmp	r3, r1
 801f916:	dd06      	ble.n	801f926 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 801f918:	68a1      	ldr	r1, [r4, #8]
 801f91a:	6863      	ldr	r3, [r4, #4]
 801f91c:	4299      	cmp	r1, r3
 801f91e:	d30c      	bcc.n	801f93a <_ZN8touchgfx7Outline6moveToEii+0x70>
 801f920:	2301      	movs	r3, #1
 801f922:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f926:	2300      	movs	r3, #0
 801f928:	82a7      	strh	r7, [r4, #20]
 801f92a:	82e2      	strh	r2, [r4, #22]
 801f92c:	8323      	strh	r3, [r4, #24]
 801f92e:	8363      	strh	r3, [r4, #26]
 801f930:	61e6      	str	r6, [r4, #28]
 801f932:	6266      	str	r6, [r4, #36]	; 0x24
 801f934:	6225      	str	r5, [r4, #32]
 801f936:	62a5      	str	r5, [r4, #40]	; 0x28
 801f938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f93a:	f104 0314 	add.w	r3, r4, #20
 801f93e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 801f942:	cb03      	ldmia	r3!, {r0, r1}
 801f944:	f8ce 0000 	str.w	r0, [lr]
 801f948:	f8ce 1004 	str.w	r1, [lr, #4]
 801f94c:	6923      	ldr	r3, [r4, #16]
 801f94e:	3308      	adds	r3, #8
 801f950:	6123      	str	r3, [r4, #16]
 801f952:	68a3      	ldr	r3, [r4, #8]
 801f954:	3301      	adds	r3, #1
 801f956:	60a3      	str	r3, [r4, #8]
 801f958:	e7e5      	b.n	801f926 <_ZN8touchgfx7Outline6moveToEii+0x5c>

0801f95a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801f95a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f95e:	b0d1      	sub	sp, #324	; 0x144
 801f960:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801f964:	466c      	mov	r4, sp
 801f966:	1a0d      	subs	r5, r1, r0
 801f968:	f100 0208 	add.w	r2, r0, #8
 801f96c:	2d4f      	cmp	r5, #79	; 0x4f
 801f96e:	f340 80bd 	ble.w	801faec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x192>
 801f972:	112d      	asrs	r5, r5, #4
 801f974:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801f978:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801f97c:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 801f980:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801f984:	f9b0 8000 	ldrsh.w	r8, [r0]
 801f988:	681e      	ldr	r6, [r3, #0]
 801f98a:	6006      	str	r6, [r0, #0]
 801f98c:	685e      	ldr	r6, [r3, #4]
 801f98e:	6046      	str	r6, [r0, #4]
 801f990:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 801f994:	f8a3 e004 	strh.w	lr, [r3, #4]
 801f998:	f8a3 c002 	strh.w	ip, [r3, #2]
 801f99c:	80df      	strh	r7, [r3, #6]
 801f99e:	f1a1 0308 	sub.w	r3, r1, #8
 801f9a2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801f9a6:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801f9aa:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801f9ae:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801f9b2:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 801f9b6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801f9ba:	45ae      	cmp	lr, r5
 801f9bc:	dd0f      	ble.n	801f9de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 801f9be:	681d      	ldr	r5, [r3, #0]
 801f9c0:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 801f9c4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801f9c8:	6015      	str	r5, [r2, #0]
 801f9ca:	685d      	ldr	r5, [r3, #4]
 801f9cc:	6055      	str	r5, [r2, #4]
 801f9ce:	f821 7c08 	strh.w	r7, [r1, #-8]
 801f9d2:	f821 6c06 	strh.w	r6, [r1, #-6]
 801f9d6:	f821 cc04 	strh.w	ip, [r1, #-4]
 801f9da:	f821 ec02 	strh.w	lr, [r1, #-2]
 801f9de:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 801f9e2:	f9b0 7000 	ldrsh.w	r7, [r0]
 801f9e6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801f9ea:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801f9ee:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 801f9f2:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 801f9f6:	4575      	cmp	r5, lr
 801f9f8:	dd0d      	ble.n	801fa16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 801f9fa:	6815      	ldr	r5, [r2, #0]
 801f9fc:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 801fa00:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801fa04:	6005      	str	r5, [r0, #0]
 801fa06:	6855      	ldr	r5, [r2, #4]
 801fa08:	8107      	strh	r7, [r0, #8]
 801fa0a:	6045      	str	r5, [r0, #4]
 801fa0c:	8146      	strh	r6, [r0, #10]
 801fa0e:	f8a0 c00c 	strh.w	ip, [r0, #12]
 801fa12:	f8a0 e00e 	strh.w	lr, [r0, #14]
 801fa16:	f9b0 7000 	ldrsh.w	r7, [r0]
 801fa1a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801fa1e:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801fa22:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801fa26:	eb07 4e06 	add.w	lr, r7, r6, lsl #16
 801fa2a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801fa2e:	45ae      	cmp	lr, r5
 801fa30:	dd0f      	ble.n	801fa52 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801fa32:	681d      	ldr	r5, [r3, #0]
 801fa34:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 801fa38:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801fa3c:	6005      	str	r5, [r0, #0]
 801fa3e:	685d      	ldr	r5, [r3, #4]
 801fa40:	6045      	str	r5, [r0, #4]
 801fa42:	f821 7c08 	strh.w	r7, [r1, #-8]
 801fa46:	f821 6c06 	strh.w	r6, [r1, #-6]
 801fa4a:	f821 cc04 	strh.w	ip, [r1, #-4]
 801fa4e:	f821 ec02 	strh.w	lr, [r1, #-2]
 801fa52:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 801fa56:	f102 0508 	add.w	r5, r2, #8
 801fa5a:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 801fa5e:	f9b0 c000 	ldrsh.w	ip, [r0]
 801fa62:	462f      	mov	r7, r5
 801fa64:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801fa68:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 801fa6c:	eb0c 4a0e 	add.w	sl, ip, lr, lsl #16
 801fa70:	45b2      	cmp	sl, r6
 801fa72:	dc18      	bgt.n	801faa6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 801fa74:	3b08      	subs	r3, #8
 801fa76:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 801fa7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801fa7e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 801fa82:	45b2      	cmp	sl, r6
 801fa84:	dbf6      	blt.n	801fa74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 801fa86:	42ab      	cmp	r3, r5
 801fa88:	681e      	ldr	r6, [r3, #0]
 801fa8a:	d30e      	bcc.n	801faaa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 801fa8c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 801fa90:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801fa94:	602e      	str	r6, [r5, #0]
 801fa96:	685e      	ldr	r6, [r3, #4]
 801fa98:	606e      	str	r6, [r5, #4]
 801fa9a:	f8a3 9000 	strh.w	r9, [r3]
 801fa9e:	f8a3 8002 	strh.w	r8, [r3, #2]
 801faa2:	809f      	strh	r7, [r3, #4]
 801faa4:	80da      	strh	r2, [r3, #6]
 801faa6:	462a      	mov	r2, r5
 801faa8:	e7d3      	b.n	801fa52 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801faaa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801faae:	6006      	str	r6, [r0, #0]
 801fab0:	685e      	ldr	r6, [r3, #4]
 801fab2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801fab6:	6046      	str	r6, [r0, #4]
 801fab8:	1a1e      	subs	r6, r3, r0
 801faba:	80da      	strh	r2, [r3, #6]
 801fabc:	1b4a      	subs	r2, r1, r5
 801fabe:	f8a3 c000 	strh.w	ip, [r3]
 801fac2:	10d2      	asrs	r2, r2, #3
 801fac4:	f8a3 e002 	strh.w	lr, [r3, #2]
 801fac8:	f8a3 8004 	strh.w	r8, [r3, #4]
 801facc:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 801fad0:	bfb5      	itete	lt
 801fad2:	e884 0009 	stmialt.w	r4, {r0, r3}
 801fad6:	4607      	movge	r7, r0
 801fad8:	460b      	movlt	r3, r1
 801fada:	6061      	strge	r1, [r4, #4]
 801fadc:	f104 0408 	add.w	r4, r4, #8
 801fae0:	bfa8      	it	ge
 801fae2:	f844 5c08 	strge.w	r5, [r4, #-8]
 801fae6:	4638      	mov	r0, r7
 801fae8:	4619      	mov	r1, r3
 801faea:	e73c      	b.n	801f966 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801faec:	4291      	cmp	r1, r2
 801faee:	d925      	bls.n	801fb3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e2>
 801faf0:	f1a2 0310 	sub.w	r3, r2, #16
 801faf4:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 801faf8:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
 801fafc:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 801fb00:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801fb04:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 801fb08:	eb0e 4607 	add.w	r6, lr, r7, lsl #16
 801fb0c:	42b5      	cmp	r5, r6
 801fb0e:	dd13      	ble.n	801fb38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1de>
 801fb10:	461d      	mov	r5, r3
 801fb12:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 801fb16:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 801fb1a:	3b08      	subs	r3, #8
 801fb1c:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801fb20:	619e      	str	r6, [r3, #24]
 801fb22:	42a8      	cmp	r0, r5
 801fb24:	686e      	ldr	r6, [r5, #4]
 801fb26:	f8a3 e010 	strh.w	lr, [r3, #16]
 801fb2a:	61de      	str	r6, [r3, #28]
 801fb2c:	825f      	strh	r7, [r3, #18]
 801fb2e:	f8a3 8014 	strh.w	r8, [r3, #20]
 801fb32:	f8a3 c016 	strh.w	ip, [r3, #22]
 801fb36:	d1dd      	bne.n	801faf4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x19a>
 801fb38:	3208      	adds	r2, #8
 801fb3a:	e7d7      	b.n	801faec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x192>
 801fb3c:	466b      	mov	r3, sp
 801fb3e:	429c      	cmp	r4, r3
 801fb40:	d903      	bls.n	801fb4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1f0>
 801fb42:	e914 0003 	ldmdb	r4, {r0, r1}
 801fb46:	3c08      	subs	r4, #8
 801fb48:	e70d      	b.n	801f966 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801fb4a:	b051      	add	sp, #324	; 0x144
 801fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb50 <_ZN8touchgfx7Outline9sortCellsEv>:
 801fb50:	6881      	ldr	r1, [r0, #8]
 801fb52:	b111      	cbz	r1, 801fb5a <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 801fb54:	68c0      	ldr	r0, [r0, #12]
 801fb56:	f7ff bf00 	b.w	801f95a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801fb5a:	4770      	bx	lr

0801fb5c <_ZN8touchgfx7Outline8getCellsEv>:
 801fb5c:	b510      	push	{r4, lr}
 801fb5e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801fb60:	4604      	mov	r4, r0
 801fb62:	07da      	lsls	r2, r3, #31
 801fb64:	d507      	bpl.n	801fb76 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 801fb66:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801fb68:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801fb6a:	f7ff fe7e 	bl	801f86a <_ZN8touchgfx7Outline6lineToEii>
 801fb6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fb70:	f023 0301 	bic.w	r3, r3, #1
 801fb74:	63e3      	str	r3, [r4, #60]	; 0x3c
 801fb76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fb78:	079b      	lsls	r3, r3, #30
 801fb7a:	d51b      	bpl.n	801fbb4 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 801fb7c:	8b63      	ldrh	r3, [r4, #26]
 801fb7e:	8b22      	ldrh	r2, [r4, #24]
 801fb80:	4313      	orrs	r3, r2
 801fb82:	b21b      	sxth	r3, r3
 801fb84:	b16b      	cbz	r3, 801fba2 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 801fb86:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	db09      	blt.n	801fba2 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 801fb8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801fb90:	4293      	cmp	r3, r2
 801fb92:	da06      	bge.n	801fba2 <_ZN8touchgfx7Outline8getCellsEv+0x46>
 801fb94:	68a2      	ldr	r2, [r4, #8]
 801fb96:	6863      	ldr	r3, [r4, #4]
 801fb98:	429a      	cmp	r2, r3
 801fb9a:	d30d      	bcc.n	801fbb8 <_ZN8touchgfx7Outline8getCellsEv+0x5c>
 801fb9c:	2301      	movs	r3, #1
 801fb9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801fba2:	68a0      	ldr	r0, [r4, #8]
 801fba4:	b138      	cbz	r0, 801fbb6 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 801fba6:	4620      	mov	r0, r4
 801fba8:	f7ff ffd2 	bl	801fb50 <_ZN8touchgfx7Outline9sortCellsEv>
 801fbac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fbae:	f023 0302 	bic.w	r3, r3, #2
 801fbb2:	63e3      	str	r3, [r4, #60]	; 0x3c
 801fbb4:	68e0      	ldr	r0, [r4, #12]
 801fbb6:	bd10      	pop	{r4, pc}
 801fbb8:	f104 0314 	add.w	r3, r4, #20
 801fbbc:	6922      	ldr	r2, [r4, #16]
 801fbbe:	cb03      	ldmia	r3!, {r0, r1}
 801fbc0:	6010      	str	r0, [r2, #0]
 801fbc2:	6051      	str	r1, [r2, #4]
 801fbc4:	6923      	ldr	r3, [r4, #16]
 801fbc6:	3308      	adds	r3, #8
 801fbc8:	6123      	str	r3, [r4, #16]
 801fbca:	68a3      	ldr	r3, [r4, #8]
 801fbcc:	3301      	adds	r3, #1
 801fbce:	60a3      	str	r3, [r4, #8]
 801fbd0:	e7e7      	b.n	801fba2 <_ZN8touchgfx7Outline8getCellsEv+0x46>
	...

0801fbd4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801fbd4:	4b02      	ldr	r3, [pc, #8]	; (801fbe0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801fbd6:	6018      	str	r0, [r3, #0]
 801fbd8:	4b02      	ldr	r3, [pc, #8]	; (801fbe4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801fbda:	6019      	str	r1, [r3, #0]
 801fbdc:	4770      	bx	lr
 801fbde:	bf00      	nop
 801fbe0:	2000bb1c 	.word	0x2000bb1c
 801fbe4:	2000bb30 	.word	0x2000bb30

0801fbe8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801fbe8:	b570      	push	{r4, r5, r6, lr}
 801fbea:	4c2c      	ldr	r4, [pc, #176]	; (801fc9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801fbec:	4d2c      	ldr	r5, [pc, #176]	; (801fca0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801fbee:	6822      	ldr	r2, [r4, #0]
 801fbf0:	4b2c      	ldr	r3, [pc, #176]	; (801fca4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801fbf2:	4282      	cmp	r2, r0
 801fbf4:	492c      	ldr	r1, [pc, #176]	; (801fca8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801fbf6:	d109      	bne.n	801fc0c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801fbf8:	682e      	ldr	r6, [r5, #0]
 801fbfa:	681a      	ldr	r2, [r3, #0]
 801fbfc:	4296      	cmp	r6, r2
 801fbfe:	d105      	bne.n	801fc0c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801fc00:	6808      	ldr	r0, [r1, #0]
 801fc02:	280f      	cmp	r0, #15
 801fc04:	bf94      	ite	ls
 801fc06:	2000      	movls	r0, #0
 801fc08:	2001      	movhi	r0, #1
 801fc0a:	bd70      	pop	{r4, r5, r6, pc}
 801fc0c:	681a      	ldr	r2, [r3, #0]
 801fc0e:	4b27      	ldr	r3, [pc, #156]	; (801fcac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801fc10:	6020      	str	r0, [r4, #0]
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	602a      	str	r2, [r5, #0]
 801fc16:	4298      	cmp	r0, r3
 801fc18:	d905      	bls.n	801fc26 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3e>
 801fc1a:	4b25      	ldr	r3, [pc, #148]	; (801fcb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801fc1c:	2137      	movs	r1, #55	; 0x37
 801fc1e:	4a25      	ldr	r2, [pc, #148]	; (801fcb4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801fc20:	4825      	ldr	r0, [pc, #148]	; (801fcb8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801fc22:	f005 faf3 	bl	802520c <__assert_func>
 801fc26:	f010 0403 	ands.w	r4, r0, #3
 801fc2a:	bf1f      	itttt	ne
 801fc2c:	f1c4 0504 	rsbne	r5, r4, #4
 801fc30:	3b04      	subne	r3, #4
 801fc32:	1952      	addne	r2, r2, r5
 801fc34:	191b      	addne	r3, r3, r4
 801fc36:	4d21      	ldr	r5, [pc, #132]	; (801fcbc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801fc38:	4402      	add	r2, r0
 801fc3a:	1a1b      	subs	r3, r3, r0
 801fc3c:	3001      	adds	r0, #1
 801fc3e:	602a      	str	r2, [r5, #0]
 801fc40:	f020 0401 	bic.w	r4, r0, #1
 801fc44:	42a3      	cmp	r3, r4
 801fc46:	d203      	bcs.n	801fc50 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x68>
 801fc48:	4b19      	ldr	r3, [pc, #100]	; (801fcb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801fc4a:	214a      	movs	r1, #74	; 0x4a
 801fc4c:	4a19      	ldr	r2, [pc, #100]	; (801fcb4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801fc4e:	e7e7      	b.n	801fc20 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 801fc50:	f010 0002 	ands.w	r0, r0, #2
 801fc54:	bf1f      	itttt	ne
 801fc56:	f1c0 0504 	rsbne	r5, r0, #4
 801fc5a:	1952      	addne	r2, r2, r5
 801fc5c:	1f05      	subne	r5, r0, #4
 801fc5e:	195b      	addne	r3, r3, r5
 801fc60:	4422      	add	r2, r4
 801fc62:	4d17      	ldr	r5, [pc, #92]	; (801fcc0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801fc64:	1b1b      	subs	r3, r3, r4
 801fc66:	602a      	str	r2, [r5, #0]
 801fc68:	429c      	cmp	r4, r3
 801fc6a:	d903      	bls.n	801fc74 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8c>
 801fc6c:	4b10      	ldr	r3, [pc, #64]	; (801fcb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801fc6e:	215d      	movs	r1, #93	; 0x5d
 801fc70:	4a10      	ldr	r2, [pc, #64]	; (801fcb4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801fc72:	e7d5      	b.n	801fc20 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 801fc74:	b120      	cbz	r0, 801fc80 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x98>
 801fc76:	f1c0 0504 	rsb	r5, r0, #4
 801fc7a:	3804      	subs	r0, #4
 801fc7c:	442a      	add	r2, r5
 801fc7e:	4403      	add	r3, r0
 801fc80:	1b1b      	subs	r3, r3, r4
 801fc82:	4422      	add	r2, r4
 801fc84:	480f      	ldr	r0, [pc, #60]	; (801fcc4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801fc86:	2b0f      	cmp	r3, #15
 801fc88:	600b      	str	r3, [r1, #0]
 801fc8a:	6002      	str	r2, [r0, #0]
 801fc8c:	d803      	bhi.n	801fc96 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xae>
 801fc8e:	4b0e      	ldr	r3, [pc, #56]	; (801fcc8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xe0>)
 801fc90:	2170      	movs	r1, #112	; 0x70
 801fc92:	4a08      	ldr	r2, [pc, #32]	; (801fcb4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801fc94:	e7c4      	b.n	801fc20 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x38>
 801fc96:	2001      	movs	r0, #1
 801fc98:	bd70      	pop	{r4, r5, r6, pc}
 801fc9a:	bf00      	nop
 801fc9c:	2000bb24 	.word	0x2000bb24
 801fca0:	2000bb2c 	.word	0x2000bb2c
 801fca4:	2000bb1c 	.word	0x2000bb1c
 801fca8:	2000bb34 	.word	0x2000bb34
 801fcac:	2000bb30 	.word	0x2000bb30
 801fcb0:	08028798 	.word	0x08028798
 801fcb4:	08028860 	.word	0x08028860
 801fcb8:	080287d1 	.word	0x080287d1
 801fcbc:	2000bb38 	.word	0x2000bb38
 801fcc0:	2000bb28 	.word	0x2000bb28
 801fcc4:	2000bb20 	.word	0x2000bb20
 801fcc8:	0802881b 	.word	0x0802881b

0801fccc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801fccc:	4b04      	ldr	r3, [pc, #16]	; (801fce0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801fcce:	6818      	ldr	r0, [r3, #0]
 801fcd0:	b120      	cbz	r0, 801fcdc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801fcd2:	4b04      	ldr	r3, [pc, #16]	; (801fce4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801fcd4:	6818      	ldr	r0, [r3, #0]
 801fcd6:	3000      	adds	r0, #0
 801fcd8:	bf18      	it	ne
 801fcda:	2001      	movne	r0, #1
 801fcdc:	4770      	bx	lr
 801fcde:	bf00      	nop
 801fce0:	2000bb1c 	.word	0x2000bb1c
 801fce4:	2000bb30 	.word	0x2000bb30

0801fce8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801fce8:	4b01      	ldr	r3, [pc, #4]	; (801fcf0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801fcea:	6818      	ldr	r0, [r3, #0]
 801fcec:	4770      	bx	lr
 801fcee:	bf00      	nop
 801fcf0:	2000bb24 	.word	0x2000bb24

0801fcf4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801fcf4:	4b01      	ldr	r3, [pc, #4]	; (801fcfc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801fcf6:	6818      	ldr	r0, [r3, #0]
 801fcf8:	4770      	bx	lr
 801fcfa:	bf00      	nop
 801fcfc:	2000bb2c 	.word	0x2000bb2c

0801fd00 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801fd00:	4b01      	ldr	r3, [pc, #4]	; (801fd08 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801fd02:	6818      	ldr	r0, [r3, #0]
 801fd04:	4770      	bx	lr
 801fd06:	bf00      	nop
 801fd08:	2000bb38 	.word	0x2000bb38

0801fd0c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801fd0c:	4b01      	ldr	r3, [pc, #4]	; (801fd14 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801fd0e:	6818      	ldr	r0, [r3, #0]
 801fd10:	4770      	bx	lr
 801fd12:	bf00      	nop
 801fd14:	2000bb28 	.word	0x2000bb28

0801fd18 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801fd18:	4b01      	ldr	r3, [pc, #4]	; (801fd20 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801fd1a:	6818      	ldr	r0, [r3, #0]
 801fd1c:	4770      	bx	lr
 801fd1e:	bf00      	nop
 801fd20:	2000bb20 	.word	0x2000bb20

0801fd24 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801fd24:	4b01      	ldr	r3, [pc, #4]	; (801fd2c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801fd26:	6818      	ldr	r0, [r3, #0]
 801fd28:	4770      	bx	lr
 801fd2a:	bf00      	nop
 801fd2c:	2000bb34 	.word	0x2000bb34

0801fd30 <_ZN8touchgfx8ScanlineD1Ev>:
 801fd30:	4770      	bx	lr

0801fd32 <_ZN8touchgfx8ScanlineD0Ev>:
 801fd32:	b510      	push	{r4, lr}
 801fd34:	4604      	mov	r4, r0
 801fd36:	2124      	movs	r1, #36	; 0x24
 801fd38:	f005 fa4c 	bl	80251d4 <_ZdlPvj>
 801fd3c:	4620      	mov	r0, r4
 801fd3e:	bd10      	pop	{r4, pc}

0801fd40 <_ZN8touchgfx8Scanline5resetEv>:
 801fd40:	b510      	push	{r4, lr}
 801fd42:	4604      	mov	r4, r0
 801fd44:	f7ff ffd6 	bl	801fcf4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 801fd48:	61a0      	str	r0, [r4, #24]
 801fd4a:	f7ff ffd9 	bl	801fd00 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 801fd4e:	61e0      	str	r0, [r4, #28]
 801fd50:	f7ff ffdc 	bl	801fd0c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 801fd54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801fd58:	6220      	str	r0, [r4, #32]
 801fd5a:	6063      	str	r3, [r4, #4]
 801fd5c:	60a3      	str	r3, [r4, #8]
 801fd5e:	69e3      	ldr	r3, [r4, #28]
 801fd60:	6160      	str	r0, [r4, #20]
 801fd62:	6123      	str	r3, [r4, #16]
 801fd64:	2300      	movs	r3, #0
 801fd66:	60e3      	str	r3, [r4, #12]
 801fd68:	bd10      	pop	{r4, pc}
	...

0801fd6c <_ZN8touchgfx8ScanlineC1Ev>:
 801fd6c:	4b07      	ldr	r3, [pc, #28]	; (801fd8c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 801fd6e:	b510      	push	{r4, lr}
 801fd70:	6003      	str	r3, [r0, #0]
 801fd72:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801fd76:	4604      	mov	r4, r0
 801fd78:	6043      	str	r3, [r0, #4]
 801fd7a:	6083      	str	r3, [r0, #8]
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	60c3      	str	r3, [r0, #12]
 801fd80:	6103      	str	r3, [r0, #16]
 801fd82:	6143      	str	r3, [r0, #20]
 801fd84:	f7ff ffdc 	bl	801fd40 <_ZN8touchgfx8Scanline5resetEv>
 801fd88:	4620      	mov	r0, r4
 801fd8a:	bd10      	pop	{r4, pc}
 801fd8c:	080288b4 	.word	0x080288b4

0801fd90 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 801fd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd94:	1e0c      	subs	r4, r1, #0
 801fd96:	4605      	mov	r5, r0
 801fd98:	4617      	mov	r7, r2
 801fd9a:	461e      	mov	r6, r3
 801fd9c:	da03      	bge.n	801fda6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 801fd9e:	4426      	add	r6, r4
 801fda0:	2e01      	cmp	r6, #1
 801fda2:	d420      	bmi.n	801fde6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x56>
 801fda4:	2400      	movs	r4, #0
 801fda6:	f7ff ff9f 	bl	801fce8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801fdaa:	42a0      	cmp	r0, r4
 801fdac:	d91b      	bls.n	801fde6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x56>
 801fdae:	eb06 0804 	add.w	r8, r6, r4
 801fdb2:	f7ff ff99 	bl	801fce8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801fdb6:	4580      	cmp	r8, r0
 801fdb8:	d902      	bls.n	801fdc0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 801fdba:	f7ff ff95 	bl	801fce8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801fdbe:	1b06      	subs	r6, r0, r4
 801fdc0:	69a8      	ldr	r0, [r5, #24]
 801fdc2:	4632      	mov	r2, r6
 801fdc4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801fdc8:	4420      	add	r0, r4
 801fdca:	f001 fd7e 	bl	80218ca <_ZN8touchgfx6memsetEPvhm>
 801fdce:	686b      	ldr	r3, [r5, #4]
 801fdd0:	3301      	adds	r3, #1
 801fdd2:	429c      	cmp	r4, r3
 801fdd4:	696b      	ldr	r3, [r5, #20]
 801fdd6:	d108      	bne.n	801fdea <_ZN8touchgfx8Scanline7addSpanEiijj+0x5a>
 801fdd8:	881a      	ldrh	r2, [r3, #0]
 801fdda:	4432      	add	r2, r6
 801fddc:	801a      	strh	r2, [r3, #0]
 801fdde:	3c01      	subs	r4, #1
 801fde0:	60af      	str	r7, [r5, #8]
 801fde2:	4434      	add	r4, r6
 801fde4:	606c      	str	r4, [r5, #4]
 801fde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fdea:	1c9a      	adds	r2, r3, #2
 801fdec:	616a      	str	r2, [r5, #20]
 801fdee:	805e      	strh	r6, [r3, #2]
 801fdf0:	692b      	ldr	r3, [r5, #16]
 801fdf2:	1c9a      	adds	r2, r3, #2
 801fdf4:	612a      	str	r2, [r5, #16]
 801fdf6:	805c      	strh	r4, [r3, #2]
 801fdf8:	68eb      	ldr	r3, [r5, #12]
 801fdfa:	3301      	adds	r3, #1
 801fdfc:	60eb      	str	r3, [r5, #12]
 801fdfe:	e7ee      	b.n	801fdde <_ZN8touchgfx8Scanline7addSpanEiijj+0x4e>

0801fe00 <_ZN8touchgfx15RenderingBufferC1Ev>:
 801fe00:	2200      	movs	r2, #0
 801fe02:	6002      	str	r2, [r0, #0]
 801fe04:	7102      	strb	r2, [r0, #4]
 801fe06:	6082      	str	r2, [r0, #8]
 801fe08:	60c2      	str	r2, [r0, #12]
 801fe0a:	6102      	str	r2, [r0, #16]
 801fe0c:	4770      	bx	lr

0801fe0e <_ZN8touchgfx15RenderingBufferD1Ev>:
 801fe0e:	4770      	bx	lr

0801fe10 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 801fe10:	6083      	str	r3, [r0, #8]
 801fe12:	9b00      	ldr	r3, [sp, #0]
 801fe14:	6001      	str	r1, [r0, #0]
 801fe16:	60c3      	str	r3, [r0, #12]
 801fe18:	9b01      	ldr	r3, [sp, #4]
 801fe1a:	7102      	strb	r2, [r0, #4]
 801fe1c:	6103      	str	r3, [r0, #16]
 801fe1e:	4770      	bx	lr

0801fe20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801fe20:	b538      	push	{r3, r4, r5, lr}
 801fe22:	4604      	mov	r4, r0
 801fe24:	2500      	movs	r5, #0
 801fe26:	9804      	ldr	r0, [sp, #16]
 801fe28:	7223      	strb	r3, [r4, #8]
 801fe2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801fe2e:	8025      	strh	r5, [r4, #0]
 801fe30:	60e5      	str	r5, [r4, #12]
 801fe32:	82e5      	strh	r5, [r4, #22]
 801fe34:	8325      	strh	r5, [r4, #24]
 801fe36:	8365      	strh	r5, [r4, #26]
 801fe38:	83a5      	strh	r5, [r4, #28]
 801fe3a:	83e5      	strh	r5, [r4, #30]
 801fe3c:	8425      	strh	r5, [r4, #32]
 801fe3e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801fe42:	6061      	str	r1, [r4, #4]
 801fe44:	7263      	strb	r3, [r4, #9]
 801fe46:	6120      	str	r0, [r4, #16]
 801fe48:	82a2      	strh	r2, [r4, #20]
 801fe4a:	6803      	ldr	r3, [r0, #0]
 801fe4c:	695b      	ldr	r3, [r3, #20]
 801fe4e:	4798      	blx	r3
 801fe50:	4605      	mov	r5, r0
 801fe52:	b330      	cbz	r0, 801fea2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801fe54:	6920      	ldr	r0, [r4, #16]
 801fe56:	4629      	mov	r1, r5
 801fe58:	6803      	ldr	r3, [r0, #0]
 801fe5a:	68db      	ldr	r3, [r3, #12]
 801fe5c:	4798      	blx	r3
 801fe5e:	60e0      	str	r0, [r4, #12]
 801fe60:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801fe64:	4602      	mov	r2, r0
 801fe66:	7a81      	ldrb	r1, [r0, #10]
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	bfb4      	ite	lt
 801fe6c:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801fe70:	2300      	movge	r3, #0
 801fe72:	430b      	orrs	r3, r1
 801fe74:	8423      	strh	r3, [r4, #32]
 801fe76:	7a63      	ldrb	r3, [r4, #9]
 801fe78:	2b04      	cmp	r3, #4
 801fe7a:	d112      	bne.n	801fea2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801fe7c:	6920      	ldr	r0, [r4, #16]
 801fe7e:	4629      	mov	r1, r5
 801fe80:	6803      	ldr	r3, [r0, #0]
 801fe82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe84:	4798      	blx	r3
 801fe86:	68e2      	ldr	r2, [r4, #12]
 801fe88:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801fe8c:	7a91      	ldrb	r1, [r2, #10]
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	bfb4      	ite	lt
 801fe92:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801fe96:	2300      	movge	r3, #0
 801fe98:	430b      	orrs	r3, r1
 801fe9a:	4418      	add	r0, r3
 801fe9c:	8c23      	ldrh	r3, [r4, #32]
 801fe9e:	4418      	add	r0, r3
 801fea0:	8420      	strh	r0, [r4, #32]
 801fea2:	4620      	mov	r0, r4
 801fea4:	bd38      	pop	{r3, r4, r5, pc}

0801fea6 <_ZN8touchgfx4Edge4stepEv>:
 801fea6:	b510      	push	{r4, lr}
 801fea8:	e890 0006 	ldmia.w	r0, {r1, r2}
 801feac:	4603      	mov	r3, r0
 801feae:	4411      	add	r1, r2
 801feb0:	6942      	ldr	r2, [r0, #20]
 801feb2:	3201      	adds	r2, #1
 801feb4:	6001      	str	r1, [r0, #0]
 801feb6:	6142      	str	r2, [r0, #20]
 801feb8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801febc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801fec0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 801fec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801fec8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801fecc:	691a      	ldr	r2, [r3, #16]
 801fece:	689c      	ldr	r4, [r3, #8]
 801fed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801fed4:	ed93 6a08 	vldr	s12, [r3, #32]
 801fed8:	edd3 6a07 	vldr	s13, [r3, #28]
 801fedc:	4422      	add	r2, r4
 801fede:	6980      	ldr	r0, [r0, #24]
 801fee0:	68dc      	ldr	r4, [r3, #12]
 801fee2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801fee6:	3801      	subs	r0, #1
 801fee8:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
 801feec:	42a2      	cmp	r2, r4
 801feee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 801fef2:	6198      	str	r0, [r3, #24]
 801fef4:	edc3 6a07 	vstr	s13, [r3, #28]
 801fef8:	611a      	str	r2, [r3, #16]
 801fefa:	db15      	blt.n	801ff28 <_ZN8touchgfx4Edge4stepEv+0x82>
 801fefc:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 801ff00:	3101      	adds	r1, #1
 801ff02:	1b12      	subs	r2, r2, r4
 801ff04:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ff08:	6019      	str	r1, [r3, #0]
 801ff0a:	611a      	str	r2, [r3, #16]
 801ff0c:	edc3 6a07 	vstr	s13, [r3, #28]
 801ff10:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 801ff14:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ff18:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
 801ff1c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801ff20:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ff24:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 801ff28:	bd10      	pop	{r4, pc}

0801ff2a <_ZN8touchgfx4Edge4stepEi>:
 801ff2a:	b570      	push	{r4, r5, r6, lr}
 801ff2c:	4605      	mov	r5, r0
 801ff2e:	460e      	mov	r6, r1
 801ff30:	2400      	movs	r4, #0
 801ff32:	42b4      	cmp	r4, r6
 801ff34:	da04      	bge.n	801ff40 <_ZN8touchgfx4Edge4stepEi+0x16>
 801ff36:	4628      	mov	r0, r5
 801ff38:	3401      	adds	r4, #1
 801ff3a:	f7ff ffb4 	bl	801fea6 <_ZN8touchgfx4Edge4stepEv>
 801ff3e:	e7f8      	b.n	801ff32 <_ZN8touchgfx4Edge4stepEi+0x8>
 801ff40:	69a8      	ldr	r0, [r5, #24]
 801ff42:	bd70      	pop	{r4, r5, r6, pc}

0801ff44 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801ff44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff48:	2600      	movs	r6, #0
 801ff4a:	4682      	mov	sl, r0
 801ff4c:	460f      	mov	r7, r1
 801ff4e:	4693      	mov	fp, r2
 801ff50:	46b1      	mov	r9, r6
 801ff52:	46b0      	mov	r8, r6
 801ff54:	9301      	str	r3, [sp, #4]
 801ff56:	455e      	cmp	r6, fp
 801ff58:	da26      	bge.n	801ffa8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801ff5a:	9901      	ldr	r1, [sp, #4]
 801ff5c:	4650      	mov	r0, sl
 801ff5e:	f002 f935 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ff62:	4605      	mov	r5, r0
 801ff64:	b300      	cbz	r0, 801ffa8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801ff66:	280a      	cmp	r0, #10
 801ff68:	d01e      	beq.n	801ffa8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801ff6a:	683b      	ldr	r3, [r7, #0]
 801ff6c:	4601      	mov	r1, r0
 801ff6e:	4638      	mov	r0, r7
 801ff70:	68db      	ldr	r3, [r3, #12]
 801ff72:	4798      	blx	r3
 801ff74:	4602      	mov	r2, r0
 801ff76:	b1a0      	cbz	r0, 801ffa2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5e>
 801ff78:	7a83      	ldrb	r3, [r0, #10]
 801ff7a:	4649      	mov	r1, r9
 801ff7c:	8885      	ldrh	r5, [r0, #4]
 801ff7e:	9300      	str	r3, [sp, #0]
 801ff80:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801ff84:	4638      	mov	r0, r7
 801ff86:	2b00      	cmp	r3, #0
 801ff88:	683b      	ldr	r3, [r7, #0]
 801ff8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ff8c:	bfb4      	ite	lt
 801ff8e:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801ff92:	2400      	movge	r4, #0
 801ff94:	4798      	blx	r3
 801ff96:	9b00      	ldr	r3, [sp, #0]
 801ff98:	431c      	orrs	r4, r3
 801ff9a:	4404      	add	r4, r0
 801ff9c:	44a0      	add	r8, r4
 801ff9e:	fa1f f888 	uxth.w	r8, r8
 801ffa2:	3601      	adds	r6, #1
 801ffa4:	46a9      	mov	r9, r5
 801ffa6:	e7d6      	b.n	801ff56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x12>
 801ffa8:	4640      	mov	r0, r8
 801ffaa:	b003      	add	sp, #12
 801ffac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ffb0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801ffb0:	2a02      	cmp	r2, #2
 801ffb2:	b530      	push	{r4, r5, lr}
 801ffb4:	d011      	beq.n	801ffda <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801ffb6:	2a03      	cmp	r2, #3
 801ffb8:	d01c      	beq.n	801fff4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801ffba:	2a01      	cmp	r2, #1
 801ffbc:	d128      	bne.n	8020010 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 801ffbe:	888b      	ldrh	r3, [r1, #4]
 801ffc0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801ffc4:	8801      	ldrh	r1, [r0, #0]
 801ffc6:	1a9b      	subs	r3, r3, r2
 801ffc8:	8844      	ldrh	r4, [r0, #2]
 801ffca:	1a5b      	subs	r3, r3, r1
 801ffcc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ffd0:	8004      	strh	r4, [r0, #0]
 801ffd2:	8043      	strh	r3, [r0, #2]
 801ffd4:	8081      	strh	r1, [r0, #4]
 801ffd6:	80c2      	strh	r2, [r0, #6]
 801ffd8:	bd30      	pop	{r4, r5, pc}
 801ffda:	88cb      	ldrh	r3, [r1, #6]
 801ffdc:	88c2      	ldrh	r2, [r0, #6]
 801ffde:	1a9b      	subs	r3, r3, r2
 801ffe0:	8842      	ldrh	r2, [r0, #2]
 801ffe2:	1a9b      	subs	r3, r3, r2
 801ffe4:	888a      	ldrh	r2, [r1, #4]
 801ffe6:	8881      	ldrh	r1, [r0, #4]
 801ffe8:	8043      	strh	r3, [r0, #2]
 801ffea:	1a52      	subs	r2, r2, r1
 801ffec:	8801      	ldrh	r1, [r0, #0]
 801ffee:	1a52      	subs	r2, r2, r1
 801fff0:	8002      	strh	r2, [r0, #0]
 801fff2:	bd30      	pop	{r4, r5, pc}
 801fff4:	88cb      	ldrh	r3, [r1, #6]
 801fff6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801fffa:	8841      	ldrh	r1, [r0, #2]
 801fffc:	1a9b      	subs	r3, r3, r2
 801fffe:	f9b0 5000 	ldrsh.w	r5, [r0]
 8020002:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8020006:	1a5b      	subs	r3, r3, r1
 8020008:	8045      	strh	r5, [r0, #2]
 802000a:	8082      	strh	r2, [r0, #4]
 802000c:	8003      	strh	r3, [r0, #0]
 802000e:	80c4      	strh	r4, [r0, #6]
 8020010:	bd30      	pop	{r4, r5, pc}
	...

08020014 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>:
 8020014:	b570      	push	{r4, r5, r6, lr}
 8020016:	b086      	sub	sp, #24
 8020018:	ad02      	add	r5, sp, #8
 802001a:	e885 0006 	stmia.w	r5, {r1, r2}
 802001e:	461a      	mov	r2, r3
 8020020:	ab0c      	add	r3, sp, #48	; 0x30
 8020022:	9305      	str	r3, [sp, #20]
 8020024:	4b0a      	ldr	r3, [pc, #40]	; (8020050 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz+0x3c>)
 8020026:	685c      	ldr	r4, [r3, #4]
 8020028:	f014 0f01 	tst.w	r4, #1
 802002c:	ea4f 0464 	mov.w	r4, r4, asr #1
 8020030:	bf1c      	itt	ne
 8020032:	681b      	ldrne	r3, [r3, #0]
 8020034:	5901      	ldrne	r1, [r0, r4]
 8020036:	4420      	add	r0, r4
 8020038:	bf0c      	ite	eq
 802003a:	681e      	ldreq	r6, [r3, #0]
 802003c:	58ce      	ldrne	r6, [r1, r3]
 802003e:	4629      	mov	r1, r5
 8020040:	9b05      	ldr	r3, [sp, #20]
 8020042:	9301      	str	r3, [sp, #4]
 8020044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020046:	9300      	str	r3, [sp, #0]
 8020048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802004a:	47b0      	blx	r6
 802004c:	b006      	add	sp, #24
 802004e:	bd70      	pop	{r4, r5, r6, pc}
 8020050:	20000064 	.word	0x20000064

08020054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8020054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020058:	b097      	sub	sp, #92	; 0x5c
 802005a:	9112      	str	r1, [sp, #72]	; 0x48
 802005c:	9313      	str	r3, [sp, #76]	; 0x4c
 802005e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8020060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020062:	8809      	ldrh	r1, [r1, #0]
 8020064:	889b      	ldrh	r3, [r3, #4]
 8020066:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8020068:	440b      	add	r3, r1
 802006a:	920f      	str	r2, [sp, #60]	; 0x3c
 802006c:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 8020070:	b21b      	sxth	r3, r3
 8020072:	900e      	str	r0, [sp, #56]	; 0x38
 8020074:	f89d a08c 	ldrb.w	sl, [sp, #140]	; 0x8c
 8020078:	930d      	str	r3, [sp, #52]	; 0x34
 802007a:	683b      	ldr	r3, [r7, #0]
 802007c:	7a59      	ldrb	r1, [r3, #9]
 802007e:	7a1b      	ldrb	r3, [r3, #8]
 8020080:	9111      	str	r1, [sp, #68]	; 0x44
 8020082:	9310      	str	r3, [sp, #64]	; 0x40
 8020084:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020086:	f9b3 6000 	ldrsh.w	r6, [r3]
 802008a:	2a00      	cmp	r2, #0
 802008c:	d04b      	beq.n	8020126 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd2>
 802008e:	7c3b      	ldrb	r3, [r7, #16]
 8020090:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020092:	2b04      	cmp	r3, #4
 8020094:	bf0c      	ite	eq
 8020096:	2302      	moveq	r3, #2
 8020098:	2301      	movne	r3, #1
 802009a:	4413      	add	r3, r2
 802009c:	2500      	movs	r5, #0
 802009e:	930c      	str	r3, [sp, #48]	; 0x30
 80200a0:	46a9      	mov	r9, r5
 80200a2:	462c      	mov	r4, r5
 80200a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80200a6:	4599      	cmp	r9, r3
 80200a8:	da6a      	bge.n	8020180 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 80200aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80200ac:	4599      	cmp	r9, r3
 80200ae:	db3c      	blt.n	802012a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80200b0:	6838      	ldr	r0, [r7, #0]
 80200b2:	6803      	ldr	r3, [r0, #0]
 80200b4:	695b      	ldr	r3, [r3, #20]
 80200b6:	4798      	blx	r3
 80200b8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80200bc:	4680      	mov	r8, r0
 80200be:	4298      	cmp	r0, r3
 80200c0:	d045      	beq.n	802014e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80200c2:	f242 030b 	movw	r3, #8203	; 0x200b
 80200c6:	4298      	cmp	r0, r3
 80200c8:	d041      	beq.n	802014e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80200ca:	2800      	cmp	r0, #0
 80200cc:	d057      	beq.n	802017e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80200ce:	280a      	cmp	r0, #10
 80200d0:	d055      	beq.n	802017e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 80200d2:	6838      	ldr	r0, [r7, #0]
 80200d4:	aa15      	add	r2, sp, #84	; 0x54
 80200d6:	4641      	mov	r1, r8
 80200d8:	6803      	ldr	r3, [r0, #0]
 80200da:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80200de:	f10d 0353 	add.w	r3, sp, #83	; 0x53
 80200e2:	47d8      	blx	fp
 80200e4:	4683      	mov	fp, r0
 80200e6:	b328      	cbz	r0, 8020134 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe0>
 80200e8:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 80200ec:	f1ba 0f00 	cmp.w	sl, #0
 80200f0:	d031      	beq.n	8020156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x102>
 80200f2:	f99b 200d 	ldrsb.w	r2, [fp, #13]
 80200f6:	f89b 300a 	ldrb.w	r3, [fp, #10]
 80200fa:	2a00      	cmp	r2, #0
 80200fc:	bfb4      	ite	lt
 80200fe:	f44f 7580 	movlt.w	r5, #256	; 0x100
 8020102:	2500      	movge	r5, #0
 8020104:	f1ba 0f01 	cmp.w	sl, #1
 8020108:	ea45 0503 	orr.w	r5, r5, r3
 802010c:	d125      	bne.n	802015a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x106>
 802010e:	1b76      	subs	r6, r6, r5
 8020110:	2c00      	cmp	r4, #0
 8020112:	d147      	bne.n	80201a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8020114:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020116:	19ab      	adds	r3, r5, r6
 8020118:	4413      	add	r3, r2
 802011a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802011c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020120:	4293      	cmp	r3, r2
 8020122:	da4a      	bge.n	80201ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 8020124:	e02b      	b.n	802017e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8020126:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020128:	e7b8      	b.n	802009c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 802012a:	4651      	mov	r1, sl
 802012c:	9824      	ldr	r0, [sp, #144]	; 0x90
 802012e:	f002 f84d 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020132:	e7c1      	b.n	80200b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x64>
 8020134:	6838      	ldr	r0, [r7, #0]
 8020136:	6803      	ldr	r3, [r0, #0]
 8020138:	691b      	ldr	r3, [r3, #16]
 802013a:	4798      	blx	r3
 802013c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8020140:	4298      	cmp	r0, r3
 8020142:	d004      	beq.n	802014e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8020144:	f242 030b 	movw	r3, #8203	; 0x200b
 8020148:	4298      	cmp	r0, r3
 802014a:	bf18      	it	ne
 802014c:	2500      	movne	r5, #0
 802014e:	f109 0901 	add.w	r9, r9, #1
 8020152:	4644      	mov	r4, r8
 8020154:	e7a6      	b.n	80200a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8020156:	442e      	add	r6, r5
 8020158:	e7cb      	b.n	80200f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 802015a:	2c00      	cmp	r4, #0
 802015c:	f000 80a6 	beq.w	80202ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8020160:	f1ba 0f00 	cmp.w	sl, #0
 8020164:	d11e      	bne.n	80201a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8020166:	6838      	ldr	r0, [r7, #0]
 8020168:	465a      	mov	r2, fp
 802016a:	4621      	mov	r1, r4
 802016c:	6803      	ldr	r3, [r0, #0]
 802016e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020170:	4798      	blx	r3
 8020172:	4406      	add	r6, r0
 8020174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020178:	1af3      	subs	r3, r6, r3
 802017a:	4293      	cmp	r3, r2
 802017c:	dd1d      	ble.n	80201ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 802017e:	4644      	mov	r4, r8
 8020180:	2c00      	cmp	r4, #0
 8020182:	f000 8091 	beq.w	80202a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8020186:	2c0a      	cmp	r4, #10
 8020188:	f000 8087 	beq.w	802029a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x246>
 802018c:	f109 0901 	add.w	r9, r9, #1
 8020190:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020192:	4599      	cmp	r9, r3
 8020194:	f280 8082 	bge.w	802029c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 8020198:	4651      	mov	r1, sl
 802019a:	9824      	ldr	r0, [sp, #144]	; 0x90
 802019c:	f002 f816 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80201a0:	4604      	mov	r4, r0
 80201a2:	e7ed      	b.n	8020180 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 80201a4:	6838      	ldr	r0, [r7, #0]
 80201a6:	465a      	mov	r2, fp
 80201a8:	4621      	mov	r1, r4
 80201aa:	6803      	ldr	r3, [r0, #0]
 80201ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80201ae:	4798      	blx	r3
 80201b0:	f1ba 0f01 	cmp.w	sl, #1
 80201b4:	eba6 0600 	sub.w	r6, r6, r0
 80201b8:	d0ac      	beq.n	8020114 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc0>
 80201ba:	f89b 300d 	ldrb.w	r3, [fp, #13]
 80201be:	f99b 2009 	ldrsb.w	r2, [fp, #9]
 80201c2:	f013 0f08 	tst.w	r3, #8
 80201c6:	f89b 1006 	ldrb.w	r1, [fp, #6]
 80201ca:	4432      	add	r2, r6
 80201cc:	9821      	ldr	r0, [sp, #132]	; 0x84
 80201ce:	bf14      	ite	ne
 80201d0:	f44f 7380 	movne.w	r3, #256	; 0x100
 80201d4:	2300      	moveq	r3, #0
 80201d6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80201da:	430b      	orrs	r3, r1
 80201dc:	4413      	add	r3, r2
 80201de:	42a3      	cmp	r3, r4
 80201e0:	dbb5      	blt.n	802014e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80201e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201e4:	429a      	cmp	r2, r3
 80201e6:	dab2      	bge.n	802014e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80201e8:	6838      	ldr	r0, [r7, #0]
 80201ea:	42b4      	cmp	r4, r6
 80201ec:	6803      	ldr	r3, [r0, #0]
 80201ee:	bfcc      	ite	gt
 80201f0:	1ba4      	subgt	r4, r4, r6
 80201f2:	2400      	movle	r4, #0
 80201f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80201f6:	bfc8      	it	gt
 80201f8:	b2a4      	uxthgt	r4, r4
 80201fa:	4798      	blx	r3
 80201fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80201fe:	4a2e      	ldr	r2, [pc, #184]	; (80202b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x264>)
 8020200:	4418      	add	r0, r3
 8020202:	f89b 300d 	ldrb.w	r3, [fp, #13]
 8020206:	f89b e008 	ldrb.w	lr, [fp, #8]
 802020a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802020e:	bf14      	ite	ne
 8020210:	4611      	movne	r1, r2
 8020212:	2100      	moveq	r1, #0
 8020214:	f013 0f20 	tst.w	r3, #32
 8020218:	ea41 010e 	orr.w	r1, r1, lr
 802021c:	bf14      	ite	ne
 802021e:	f44f 7280 	movne.w	r2, #256	; 0x100
 8020222:	2200      	moveq	r2, #0
 8020224:	430a      	orrs	r2, r1
 8020226:	9921      	ldr	r1, [sp, #132]	; 0x84
 8020228:	1a80      	subs	r0, r0, r2
 802022a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 802022e:	b280      	uxth	r0, r0
 8020230:	b202      	sxth	r2, r0
 8020232:	428a      	cmp	r2, r1
 8020234:	da2f      	bge.n	8020296 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x242>
 8020236:	f013 0f10 	tst.w	r3, #16
 802023a:	f89b e007 	ldrb.w	lr, [fp, #7]
 802023e:	bf14      	ite	ne
 8020240:	f44f 7380 	movne.w	r3, #256	; 0x100
 8020244:	2300      	moveq	r3, #0
 8020246:	ea43 030e 	orr.w	r3, r3, lr
 802024a:	441a      	add	r2, r3
 802024c:	4291      	cmp	r1, r2
 802024e:	f73f af7e 	bgt.w	802014e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8020252:	1a08      	subs	r0, r1, r0
 8020254:	460a      	mov	r2, r1
 8020256:	b280      	uxth	r0, r0
 8020258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802025a:	6819      	ldr	r1, [r3, #0]
 802025c:	79bb      	ldrb	r3, [r7, #6]
 802025e:	930a      	str	r3, [sp, #40]	; 0x28
 8020260:	7bbb      	ldrb	r3, [r7, #14]
 8020262:	9309      	str	r3, [sp, #36]	; 0x24
 8020264:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8020268:	9308      	str	r3, [sp, #32]
 802026a:	68bb      	ldr	r3, [r7, #8]
 802026c:	9402      	str	r4, [sp, #8]
 802026e:	4434      	add	r4, r6
 8020270:	9307      	str	r3, [sp, #28]
 8020272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020274:	b224      	sxth	r4, r4
 8020276:	9003      	str	r0, [sp, #12]
 8020278:	9306      	str	r3, [sp, #24]
 802027a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802027c:	f8cd b014 	str.w	fp, [sp, #20]
 8020280:	9304      	str	r3, [sp, #16]
 8020282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020284:	9201      	str	r2, [sp, #4]
 8020286:	9400      	str	r4, [sp, #0]
 8020288:	980e      	ldr	r0, [sp, #56]	; 0x38
 802028a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802028c:	681a      	ldr	r2, [r3, #0]
 802028e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020290:	685b      	ldr	r3, [r3, #4]
 8020292:	47a0      	blx	r4
 8020294:	e75b      	b.n	802014e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8020296:	2000      	movs	r0, #0
 8020298:	e7de      	b.n	8020258 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 802029a:	240a      	movs	r4, #10
 802029c:	fab4 f084 	clz	r0, r4
 80202a0:	0940      	lsrs	r0, r0, #5
 80202a2:	b017      	add	sp, #92	; 0x5c
 80202a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202a8:	2400      	movs	r4, #0
 80202aa:	e7f7      	b.n	802029c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 80202ac:	f1ba 0f00 	cmp.w	sl, #0
 80202b0:	f43f af60 	beq.w	8020174 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x120>
 80202b4:	e781      	b.n	80201ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 80202b6:	bf00      	nop
 80202b8:	fffffe00 	.word	0xfffffe00

080202bc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80202bc:	b530      	push	{r4, r5, lr}
 80202be:	8ac4      	ldrh	r4, [r0, #22]
 80202c0:	8b45      	ldrh	r5, [r0, #26]
 80202c2:	8343      	strh	r3, [r0, #26]
 80202c4:	442c      	add	r4, r5
 80202c6:	1ae4      	subs	r4, r4, r3
 80202c8:	8b83      	ldrh	r3, [r0, #28]
 80202ca:	82c4      	strh	r4, [r0, #22]
 80202cc:	8b04      	ldrh	r4, [r0, #24]
 80202ce:	4422      	add	r2, r4
 80202d0:	440c      	add	r4, r1
 80202d2:	1a59      	subs	r1, r3, r1
 80202d4:	83c2      	strh	r2, [r0, #30]
 80202d6:	8304      	strh	r4, [r0, #24]
 80202d8:	8381      	strh	r1, [r0, #28]
 80202da:	bd30      	pop	{r4, r5, pc}

080202dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80202dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202e0:	f890 b009 	ldrb.w	fp, [r0, #9]
 80202e4:	b085      	sub	sp, #20
 80202e6:	4604      	mov	r4, r0
 80202e8:	460f      	mov	r7, r1
 80202ea:	f1ab 0303 	sub.w	r3, fp, #3
 80202ee:	b331      	cbz	r1, 802033e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 80202f0:	2b01      	cmp	r3, #1
 80202f2:	d922      	bls.n	802033a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 80202f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80202f8:	f1d2 0a00 	rsbs	sl, r2, #0
 80202fc:	eb4a 0a02 	adc.w	sl, sl, r2
 8020300:	f1ab 0302 	sub.w	r3, fp, #2
 8020304:	2500      	movs	r5, #0
 8020306:	f1d3 0b00 	rsbs	fp, r3, #0
 802030a:	9501      	str	r5, [sp, #4]
 802030c:	eb4b 0b03 	adc.w	fp, fp, r3
 8020310:	2600      	movs	r6, #0
 8020312:	82e6      	strh	r6, [r4, #22]
 8020314:	8326      	strh	r6, [r4, #24]
 8020316:	7a21      	ldrb	r1, [r4, #8]
 8020318:	6860      	ldr	r0, [r4, #4]
 802031a:	f8b4 9000 	ldrh.w	r9, [r4]
 802031e:	f001 ff55 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020322:	4601      	mov	r1, r0
 8020324:	8020      	strh	r0, [r4, #0]
 8020326:	b9c8      	cbnz	r0, 802035c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x80>
 8020328:	8ba2      	ldrh	r2, [r4, #28]
 802032a:	2300      	movs	r3, #0
 802032c:	4611      	mov	r1, r2
 802032e:	4620      	mov	r0, r4
 8020330:	b005      	add	sp, #20
 8020332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020336:	f7ff bfc1 	b.w	80202bc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 802033a:	468a      	mov	sl, r1
 802033c:	e7e0      	b.n	8020300 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 802033e:	2b01      	cmp	r3, #1
 8020340:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020344:	468a      	mov	sl, r1
 8020346:	bf8c      	ite	hi
 8020348:	2300      	movhi	r3, #0
 802034a:	2301      	movls	r3, #1
 802034c:	f1bb 0f01 	cmp.w	fp, #1
 8020350:	468b      	mov	fp, r1
 8020352:	9301      	str	r3, [sp, #4]
 8020354:	bf8c      	ite	hi
 8020356:	2500      	movhi	r5, #0
 8020358:	2501      	movls	r5, #1
 802035a:	e7d9      	b.n	8020310 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x34>
 802035c:	8b63      	ldrh	r3, [r4, #26]
 802035e:	280a      	cmp	r0, #10
 8020360:	f103 0301 	add.w	r3, r3, #1
 8020364:	8363      	strh	r3, [r4, #26]
 8020366:	d0df      	beq.n	8020328 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8020368:	6920      	ldr	r0, [r4, #16]
 802036a:	6803      	ldr	r3, [r0, #0]
 802036c:	68db      	ldr	r3, [r3, #12]
 802036e:	4798      	blx	r3
 8020370:	4602      	mov	r2, r0
 8020372:	2800      	cmp	r0, #0
 8020374:	d0cf      	beq.n	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 8020376:	8883      	ldrh	r3, [r0, #4]
 8020378:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 802037c:	2b20      	cmp	r3, #32
 802037e:	8023      	strh	r3, [r4, #0]
 8020380:	d103      	bne.n	802038a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xae>
 8020382:	f1b9 0f20 	cmp.w	r9, #32
 8020386:	bf18      	it	ne
 8020388:	4646      	movne	r6, r8
 802038a:	7a93      	ldrb	r3, [r2, #10]
 802038c:	4649      	mov	r1, r9
 802038e:	6920      	ldr	r0, [r4, #16]
 8020390:	9302      	str	r3, [sp, #8]
 8020392:	f992 300d 	ldrsb.w	r3, [r2, #13]
 8020396:	2b00      	cmp	r3, #0
 8020398:	bfb4      	ite	lt
 802039a:	f44f 7380 	movlt.w	r3, #256	; 0x100
 802039e:	2300      	movge	r3, #0
 80203a0:	9303      	str	r3, [sp, #12]
 80203a2:	6803      	ldr	r3, [r0, #0]
 80203a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80203a6:	4798      	blx	r3
 80203a8:	9b03      	ldr	r3, [sp, #12]
 80203aa:	9a02      	ldr	r2, [sp, #8]
 80203ac:	8aa1      	ldrh	r1, [r4, #20]
 80203ae:	431a      	orrs	r2, r3
 80203b0:	8b23      	ldrh	r3, [r4, #24]
 80203b2:	4402      	add	r2, r0
 80203b4:	8ba0      	ldrh	r0, [r4, #28]
 80203b6:	4402      	add	r2, r0
 80203b8:	b292      	uxth	r2, r2
 80203ba:	83a2      	strh	r2, [r4, #28]
 80203bc:	4413      	add	r3, r2
 80203be:	b327      	cbz	r7, 802040a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12e>
 80203c0:	f1ba 0f00 	cmp.w	sl, #0
 80203c4:	d105      	bne.n	80203d2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf6>
 80203c6:	f1bb 0f00 	cmp.w	fp, #0
 80203ca:	d00f      	beq.n	80203ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 80203cc:	8820      	ldrh	r0, [r4, #0]
 80203ce:	2820      	cmp	r0, #32
 80203d0:	d10c      	bne.n	80203ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 80203d2:	8c20      	ldrh	r0, [r4, #32]
 80203d4:	4418      	add	r0, r3
 80203d6:	4281      	cmp	r1, r0
 80203d8:	da02      	bge.n	80203e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x104>
 80203da:	8ae0      	ldrh	r0, [r4, #22]
 80203dc:	2800      	cmp	r0, #0
 80203de:	d13a      	bne.n	8020456 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17a>
 80203e0:	2300      	movs	r3, #0
 80203e2:	4611      	mov	r1, r2
 80203e4:	4620      	mov	r0, r4
 80203e6:	f7ff ff69 	bl	80202bc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80203ea:	e794      	b.n	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80203ec:	428b      	cmp	r3, r1
 80203ee:	dd92      	ble.n	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80203f0:	8ae3      	ldrh	r3, [r4, #22]
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d08f      	beq.n	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 80203f6:	2301      	movs	r3, #1
 80203f8:	8c22      	ldrh	r2, [r4, #32]
 80203fa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80203fe:	8be3      	ldrh	r3, [r4, #30]
 8020400:	4413      	add	r3, r2
 8020402:	83e3      	strh	r3, [r4, #30]
 8020404:	b005      	add	sp, #20
 8020406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802040a:	428b      	cmp	r3, r1
 802040c:	dd17      	ble.n	802043e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 802040e:	9b01      	ldr	r3, [sp, #4]
 8020410:	b113      	cbz	r3, 8020418 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13c>
 8020412:	2301      	movs	r3, #1
 8020414:	4642      	mov	r2, r8
 8020416:	e789      	b.n	802032c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8020418:	2d00      	cmp	r5, #0
 802041a:	f43f af7c 	beq.w	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 802041e:	8823      	ldrh	r3, [r4, #0]
 8020420:	2b20      	cmp	r3, #32
 8020422:	f43f af78 	beq.w	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 8020426:	f1b9 0f20 	cmp.w	r9, #32
 802042a:	d103      	bne.n	8020434 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 802042c:	2301      	movs	r3, #1
 802042e:	4632      	mov	r2, r6
 8020430:	4641      	mov	r1, r8
 8020432:	e77c      	b.n	802032e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8020434:	8ae3      	ldrh	r3, [r4, #22]
 8020436:	2b00      	cmp	r3, #0
 8020438:	f43f af6d 	beq.w	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 802043c:	e7e2      	b.n	8020404 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x128>
 802043e:	8823      	ldrh	r3, [r4, #0]
 8020440:	2b20      	cmp	r3, #32
 8020442:	f43f af68 	beq.w	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 8020446:	f1b9 0f20 	cmp.w	r9, #32
 802044a:	f47f af64 	bne.w	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 802044e:	2301      	movs	r3, #1
 8020450:	4632      	mov	r2, r6
 8020452:	4641      	mov	r1, r8
 8020454:	e7c6      	b.n	80203e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x108>
 8020456:	428b      	cmp	r3, r1
 8020458:	f77f af5d 	ble.w	8020316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 802045c:	e7cb      	b.n	80203f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x11a>

0802045e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 802045e:	b570      	push	{r4, r5, r6, lr}
 8020460:	4606      	mov	r6, r0
 8020462:	b08c      	sub	sp, #48	; 0x30
 8020464:	4615      	mov	r5, r2
 8020466:	b191      	cbz	r1, 802048e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8020468:	2401      	movs	r4, #1
 802046a:	9101      	str	r1, [sp, #4]
 802046c:	9300      	str	r3, [sp, #0]
 802046e:	4601      	mov	r1, r0
 8020470:	4613      	mov	r3, r2
 8020472:	a803      	add	r0, sp, #12
 8020474:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8020478:	f7ff fcd2 	bl	801fe20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 802047c:	2100      	movs	r1, #0
 802047e:	a803      	add	r0, sp, #12
 8020480:	f7ff ff2c 	bl	80202dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8020484:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8020488:	b173      	cbz	r3, 80204a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 802048a:	3401      	adds	r4, #1
 802048c:	e7f6      	b.n	802047c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 802048e:	2401      	movs	r4, #1
 8020490:	4611      	mov	r1, r2
 8020492:	f001 fe9b 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020496:	280a      	cmp	r0, #10
 8020498:	4629      	mov	r1, r5
 802049a:	4630      	mov	r0, r6
 802049c:	bf08      	it	eq
 802049e:	3401      	addeq	r4, #1
 80204a0:	f001 fe94 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80204a4:	2800      	cmp	r0, #0
 80204a6:	d1f6      	bne.n	8020496 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 80204a8:	b2a0      	uxth	r0, r4
 80204aa:	b00c      	add	sp, #48	; 0x30
 80204ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080204b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80204b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204b4:	b0ab      	sub	sp, #172	; 0xac
 80204b6:	4689      	mov	r9, r1
 80204b8:	461c      	mov	r4, r3
 80204ba:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 80204be:	9009      	str	r0, [sp, #36]	; 0x24
 80204c0:	f1ba 0f00 	cmp.w	sl, #0
 80204c4:	f000 80ac 	beq.w	8020620 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	f000 80a8 	beq.w	8020620 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 80204d0:	7ba3      	ldrb	r3, [r4, #14]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	f000 80a4 	beq.w	8020620 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 80204d8:	6810      	ldr	r0, [r2, #0]
 80204da:	ab0b      	add	r3, sp, #44	; 0x2c
 80204dc:	6851      	ldr	r1, [r2, #4]
 80204de:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 80204e2:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 80204e6:	c303      	stmia	r3!, {r0, r1}
 80204e8:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 80204ec:	2300      	movs	r3, #0
 80204ee:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 80204f2:	a80b      	add	r0, sp, #44	; 0x2c
 80204f4:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 80204f8:	a90d      	add	r1, sp, #52	; 0x34
 80204fa:	79a2      	ldrb	r2, [r4, #6]
 80204fc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8020500:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020504:	f7ff fd54 	bl	801ffb0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8020508:	a90d      	add	r1, sp, #52	; 0x34
 802050a:	79a2      	ldrb	r2, [r4, #6]
 802050c:	4608      	mov	r0, r1
 802050e:	f7ff fd4f 	bl	801ffb0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8020512:	4640      	mov	r0, r8
 8020514:	f001 fea0 	bl	8022258 <_ZN8touchgfx12TextProviderC1Ev>
 8020518:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802051a:	4651      	mov	r1, sl
 802051c:	4640      	mov	r0, r8
 802051e:	f001 fea4 	bl	802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 8020522:	a815      	add	r0, sp, #84	; 0x54
 8020524:	f001 fe98 	bl	8022258 <_ZN8touchgfx12TextProviderC1Ev>
 8020528:	7927      	ldrb	r7, [r4, #4]
 802052a:	b127      	cbz	r7, 8020536 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x86>
 802052c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802052e:	4651      	mov	r1, sl
 8020530:	a815      	add	r0, sp, #84	; 0x54
 8020532:	f001 fe9a 	bl	802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 8020536:	6820      	ldr	r0, [r4, #0]
 8020538:	89a5      	ldrh	r5, [r4, #12]
 802053a:	6803      	ldr	r3, [r0, #0]
 802053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802053e:	4798      	blx	r3
 8020540:	4405      	add	r5, r0
 8020542:	a81b      	add	r0, sp, #108	; 0x6c
 8020544:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020548:	f001 fe86 	bl	8022258 <_ZN8touchgfx12TextProviderC1Ev>
 802054c:	7c23      	ldrb	r3, [r4, #16]
 802054e:	fb96 f6f5 	sdiv	r6, r6, r5
 8020552:	b123      	cbz	r3, 802055e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xae>
 8020554:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020556:	4651      	mov	r1, sl
 8020558:	a81b      	add	r0, sp, #108	; 0x6c
 802055a:	f001 fe86 	bl	802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 802055e:	7c21      	ldrb	r1, [r4, #16]
 8020560:	a821      	add	r0, sp, #132	; 0x84
 8020562:	7963      	ldrb	r3, [r4, #5]
 8020564:	9101      	str	r1, [sp, #4]
 8020566:	6821      	ldr	r1, [r4, #0]
 8020568:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 802056c:	9100      	str	r1, [sp, #0]
 802056e:	a91b      	add	r1, sp, #108	; 0x6c
 8020570:	f7ff fc56 	bl	801fe20 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8020574:	7c23      	ldrb	r3, [r4, #16]
 8020576:	bb03      	cbnz	r3, 80205ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x10a>
 8020578:	fa1f fa85 	uxth.w	sl, r5
 802057c:	2e00      	cmp	r6, #0
 802057e:	dd52      	ble.n	8020626 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 8020580:	7961      	ldrb	r1, [r4, #5]
 8020582:	4640      	mov	r0, r8
 8020584:	f001 fe22 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020588:	4683      	mov	fp, r0
 802058a:	b11f      	cbz	r7, 8020594 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe4>
 802058c:	7961      	ldrb	r1, [r4, #5]
 802058e:	a815      	add	r0, sp, #84	; 0x54
 8020590:	f001 fe1c 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020594:	f1bb 0f00 	cmp.w	fp, #0
 8020598:	d042      	beq.n	8020620 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 802059a:	f1bb 0f0a 	cmp.w	fp, #10
 802059e:	d1ed      	bne.n	802057c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 80205a0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80205a4:	3e01      	subs	r6, #1
 80205a6:	4453      	add	r3, sl
 80205a8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80205ac:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80205b0:	eba3 030a 	sub.w	r3, r3, sl
 80205b4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80205b8:	e7e0      	b.n	802057c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 80205ba:	006b      	lsls	r3, r5, #1
 80205bc:	fa1f fa85 	uxth.w	sl, r5
 80205c0:	9308      	str	r3, [sp, #32]
 80205c2:	2e00      	cmp	r6, #0
 80205c4:	dd2f      	ble.n	8020626 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 80205c6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80205ca:	a821      	add	r0, sp, #132	; 0x84
 80205cc:	9b08      	ldr	r3, [sp, #32]
 80205ce:	428b      	cmp	r3, r1
 80205d0:	bfd4      	ite	le
 80205d2:	2100      	movle	r1, #0
 80205d4:	2101      	movgt	r1, #1
 80205d6:	f7ff fe81 	bl	80202dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80205da:	f8bd b09a 	ldrh.w	fp, [sp, #154]	; 0x9a
 80205de:	f1bb 0f00 	cmp.w	fp, #0
 80205e2:	d00d      	beq.n	8020600 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x150>
 80205e4:	7961      	ldrb	r1, [r4, #5]
 80205e6:	4640      	mov	r0, r8
 80205e8:	f001 fdf0 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80205ec:	b11f      	cbz	r7, 80205f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x146>
 80205ee:	7961      	ldrb	r1, [r4, #5]
 80205f0:	a815      	add	r0, sp, #84	; 0x54
 80205f2:	f001 fdeb 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80205f6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80205fa:	fa1f fb83 	uxth.w	fp, r3
 80205fe:	e7ee      	b.n	80205de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8020600:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8020604:	3e01      	subs	r6, #1
 8020606:	4453      	add	r3, sl
 8020608:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802060c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8020610:	eba3 030a 	sub.w	r3, r3, sl
 8020614:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020618:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 802061c:	2b00      	cmp	r3, #0
 802061e:	d1d0      	bne.n	80205c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x112>
 8020620:	b02b      	add	sp, #172	; 0xac
 8020622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020626:	4b40      	ldr	r3, [pc, #256]	; (8020728 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 8020628:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 802062c:	f04f 0a02 	mov.w	sl, #2
 8020630:	6818      	ldr	r0, [r3, #0]
 8020632:	6803      	ldr	r3, [r0, #0]
 8020634:	6a1b      	ldr	r3, [r3, #32]
 8020636:	4798      	blx	r3
 8020638:	4606      	mov	r6, r0
 802063a:	7c23      	ldrb	r3, [r4, #16]
 802063c:	2b00      	cmp	r3, #0
 802063e:	d067      	beq.n	8020710 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8020640:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8020644:	a821      	add	r0, sp, #132	; 0x84
 8020646:	458b      	cmp	fp, r1
 8020648:	bfd4      	ite	le
 802064a:	2100      	movle	r1, #0
 802064c:	2101      	movgt	r1, #1
 802064e:	f7ff fe45 	bl	80202dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8020652:	2f00      	cmp	r7, #0
 8020654:	d055      	beq.n	8020702 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8020656:	7c23      	ldrb	r3, [r4, #16]
 8020658:	2b00      	cmp	r3, #0
 802065a:	d05b      	beq.n	8020714 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 802065c:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 8020660:	7922      	ldrb	r2, [r4, #4]
 8020662:	2a01      	cmp	r2, #1
 8020664:	d145      	bne.n	80206f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8020666:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 802066a:	1ac0      	subs	r0, r0, r3
 802066c:	fb90 f0fa 	sdiv	r0, r0, sl
 8020670:	b200      	sxth	r0, r0
 8020672:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8020676:	4418      	add	r0, r3
 8020678:	7c23      	ldrb	r3, [r4, #16]
 802067a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 802067e:	2b00      	cmp	r3, #0
 8020680:	d043      	beq.n	802070a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8020682:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 8020686:	9205      	str	r2, [sp, #20]
 8020688:	2200      	movs	r2, #0
 802068a:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 802068e:	9203      	str	r2, [sp, #12]
 8020690:	aa0b      	add	r2, sp, #44	; 0x2c
 8020692:	9106      	str	r1, [sp, #24]
 8020694:	4631      	mov	r1, r6
 8020696:	9201      	str	r2, [sp, #4]
 8020698:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 802069c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80206a0:	9200      	str	r2, [sp, #0]
 80206a2:	464a      	mov	r2, r9
 80206a4:	f8cd 8010 	str.w	r8, [sp, #16]
 80206a8:	9402      	str	r4, [sp, #8]
 80206aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80206ac:	f7ff fcd2 	bl	8020054 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80206b0:	b9c8      	cbnz	r0, 80206e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 80206b2:	b2aa      	uxth	r2, r5
 80206b4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80206b8:	4611      	mov	r1, r2
 80206ba:	4413      	add	r3, r2
 80206bc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80206c0:	b21b      	sxth	r3, r3
 80206c2:	1a52      	subs	r2, r2, r1
 80206c4:	7c21      	ldrb	r1, [r4, #16]
 80206c6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80206ca:	b212      	sxth	r2, r2
 80206cc:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 80206d0:	b109      	cbz	r1, 80206d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x226>
 80206d2:	4295      	cmp	r5, r2
 80206d4:	dc07      	bgt.n	80206e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 80206d6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80206da:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80206de:	440a      	add	r2, r1
 80206e0:	b212      	sxth	r2, r2
 80206e2:	4293      	cmp	r3, r2
 80206e4:	dda9      	ble.n	802063a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 80206e6:	4b10      	ldr	r3, [pc, #64]	; (8020728 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 80206e8:	6818      	ldr	r0, [r3, #0]
 80206ea:	6803      	ldr	r3, [r0, #0]
 80206ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206ee:	4798      	blx	r3
 80206f0:	e796      	b.n	8020620 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 80206f2:	2a02      	cmp	r2, #2
 80206f4:	d107      	bne.n	8020706 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80206f6:	7be2      	ldrb	r2, [r4, #15]
 80206f8:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 80206fc:	1a80      	subs	r0, r0, r2
 80206fe:	1ac0      	subs	r0, r0, r3
 8020700:	e7b6      	b.n	8020670 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>
 8020702:	7be0      	ldrb	r0, [r4, #15]
 8020704:	e7b5      	b.n	8020672 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 8020706:	2000      	movs	r0, #0
 8020708:	e7b3      	b.n	8020672 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 802070a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802070e:	e7ba      	b.n	8020686 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8020710:	2f00      	cmp	r7, #0
 8020712:	d0f6      	beq.n	8020702 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8020714:	2300      	movs	r3, #0
 8020716:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802071a:	6821      	ldr	r1, [r4, #0]
 802071c:	a815      	add	r0, sp, #84	; 0x54
 802071e:	f7ff fc11 	bl	801ff44 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8020722:	b203      	sxth	r3, r0
 8020724:	e79c      	b.n	8020660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b0>
 8020726:	bf00      	nop
 8020728:	2000bb14 	.word	0x2000bb14

0802072c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 802072c:	2b02      	cmp	r3, #2
 802072e:	d00e      	beq.n	802074e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8020730:	2b03      	cmp	r3, #3
 8020732:	d012      	beq.n	802075a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 8020734:	2b01      	cmp	r3, #1
 8020736:	d003      	beq.n	8020740 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8020738:	f9b0 2000 	ldrsh.w	r2, [r0]
 802073c:	1850      	adds	r0, r2, r1
 802073e:	4770      	bx	lr
 8020740:	8803      	ldrh	r3, [r0, #0]
 8020742:	8880      	ldrh	r0, [r0, #4]
 8020744:	4418      	add	r0, r3
 8020746:	b200      	sxth	r0, r0
 8020748:	1a80      	subs	r0, r0, r2
 802074a:	3801      	subs	r0, #1
 802074c:	4770      	bx	lr
 802074e:	8803      	ldrh	r3, [r0, #0]
 8020750:	8880      	ldrh	r0, [r0, #4]
 8020752:	4418      	add	r0, r3
 8020754:	b200      	sxth	r0, r0
 8020756:	1a40      	subs	r0, r0, r1
 8020758:	e7f7      	b.n	802074a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 802075a:	f9b0 0000 	ldrsh.w	r0, [r0]
 802075e:	4410      	add	r0, r2
 8020760:	4770      	bx	lr

08020762 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8020762:	2b02      	cmp	r3, #2
 8020764:	d008      	beq.n	8020778 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8020766:	2b03      	cmp	r3, #3
 8020768:	d00d      	beq.n	8020786 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 802076a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 802076e:	2b01      	cmp	r3, #1
 8020770:	bf14      	ite	ne
 8020772:	1880      	addne	r0, r0, r2
 8020774:	1840      	addeq	r0, r0, r1
 8020776:	4770      	bx	lr
 8020778:	8843      	ldrh	r3, [r0, #2]
 802077a:	88c0      	ldrh	r0, [r0, #6]
 802077c:	4418      	add	r0, r3
 802077e:	b200      	sxth	r0, r0
 8020780:	1a80      	subs	r0, r0, r2
 8020782:	3801      	subs	r0, #1
 8020784:	4770      	bx	lr
 8020786:	8843      	ldrh	r3, [r0, #2]
 8020788:	88c0      	ldrh	r0, [r0, #6]
 802078a:	4418      	add	r0, r3
 802078c:	b200      	sxth	r0, r0
 802078e:	1a40      	subs	r0, r0, r1
 8020790:	e7f7      	b.n	8020782 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08020794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8020794:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8020798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802079c:	b0d1      	sub	sp, #324	; 0x144
 802079e:	ed92 7a02 	vldr	s14, [r2, #8]
 80207a2:	4683      	mov	fp, r0
 80207a4:	4614      	mov	r4, r2
 80207a6:	930a      	str	r3, [sp, #40]	; 0x28
 80207a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80207ac:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
 80207b0:	9109      	str	r1, [sp, #36]	; 0x24
 80207b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80207b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207b8:	f89d 3174 	ldrb.w	r3, [sp, #372]	; 0x174
 80207bc:	9f5b      	ldr	r7, [sp, #364]	; 0x16c
 80207be:	930c      	str	r3, [sp, #48]	; 0x30
 80207c0:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 80207c4:	930d      	str	r3, [sp, #52]	; 0x34
 80207c6:	f240 8140 	bls.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80207ca:	ed92 7a07 	vldr	s14, [r2, #28]
 80207ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80207d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207d6:	f240 8138 	bls.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80207da:	ed92 7a0c 	vldr	s14, [r2, #48]	; 0x30
 80207de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80207e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207e6:	f240 8130 	bls.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80207ea:	6812      	ldr	r2, [r2, #0]
 80207ec:	4b98      	ldr	r3, [pc, #608]	; (8020a50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2bc>)
 80207ee:	429a      	cmp	r2, r3
 80207f0:	f2c0 812b 	blt.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80207f4:	4997      	ldr	r1, [pc, #604]	; (8020a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c0>)
 80207f6:	6963      	ldr	r3, [r4, #20]
 80207f8:	428a      	cmp	r2, r1
 80207fa:	f300 8126 	bgt.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80207fe:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8020802:	4895      	ldr	r0, [pc, #596]	; (8020a58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c4>)
 8020804:	33ff      	adds	r3, #255	; 0xff
 8020806:	4283      	cmp	r3, r0
 8020808:	f200 811f 	bhi.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 802080c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802080e:	4d93      	ldr	r5, [pc, #588]	; (8020a5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2c8>)
 8020810:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8020814:	33ff      	adds	r3, #255	; 0xff
 8020816:	42ab      	cmp	r3, r5
 8020818:	f200 8117 	bhi.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 802081c:	6862      	ldr	r2, [r4, #4]
 802081e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8020822:	33ff      	adds	r3, #255	; 0xff
 8020824:	4283      	cmp	r3, r0
 8020826:	f200 8110 	bhi.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 802082a:	69a1      	ldr	r1, [r4, #24]
 802082c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8020830:	33ff      	adds	r3, #255	; 0xff
 8020832:	4283      	cmp	r3, r0
 8020834:	f200 8109 	bhi.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8020838:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802083a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 802083e:	30ff      	adds	r0, #255	; 0xff
 8020840:	42a8      	cmp	r0, r5
 8020842:	f200 8102 	bhi.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8020846:	428a      	cmp	r2, r1
 8020848:	da7a      	bge.n	8020940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ac>
 802084a:	429a      	cmp	r2, r3
 802084c:	f300 8084 	bgt.w	8020958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c4>
 8020850:	4299      	cmp	r1, r3
 8020852:	f2c0 8088 	blt.w	8020966 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d2>
 8020856:	2501      	movs	r5, #1
 8020858:	2602      	movs	r6, #2
 802085a:	46a9      	mov	r9, r5
 802085c:	46b0      	mov	r8, r6
 802085e:	f04f 0a00 	mov.w	sl, #0
 8020862:	4621      	mov	r1, r4
 8020864:	a83f      	add	r0, sp, #252	; 0xfc
 8020866:	f001 fd3d 	bl	80222e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 802086a:	4622      	mov	r2, r4
 802086c:	f8cd 9000 	str.w	r9, [sp]
 8020870:	4653      	mov	r3, sl
 8020872:	a93f      	add	r1, sp, #252	; 0xfc
 8020874:	a80f      	add	r0, sp, #60	; 0x3c
 8020876:	f001 fe65 	bl	8022544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 802087a:	f8cd 8000 	str.w	r8, [sp]
 802087e:	4622      	mov	r2, r4
 8020880:	4653      	mov	r3, sl
 8020882:	a93f      	add	r1, sp, #252	; 0xfc
 8020884:	a81f      	add	r0, sp, #124	; 0x7c
 8020886:	f001 fe5d 	bl	8022544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 802088a:	4643      	mov	r3, r8
 802088c:	4622      	mov	r2, r4
 802088e:	f8cd 9000 	str.w	r9, [sp]
 8020892:	a93f      	add	r1, sp, #252	; 0xfc
 8020894:	a82f      	add	r0, sp, #188	; 0xbc
 8020896:	f001 fe55 	bl	8022544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 802089a:	42ae      	cmp	r6, r5
 802089c:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 802089e:	bfac      	ite	ge
 80208a0:	ad1f      	addge	r5, sp, #124	; 0x7c
 80208a2:	ad0f      	addlt	r5, sp, #60	; 0x3c
 80208a4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 80208a8:	bfa8      	it	ge
 80208aa:	2601      	movge	r6, #1
 80208ac:	696b      	ldr	r3, [r5, #20]
 80208ae:	bfa8      	it	ge
 80208b0:	f10d 083c 	addge.w	r8, sp, #60	; 0x3c
 80208b4:	88fa      	ldrh	r2, [r7, #6]
 80208b6:	bfb8      	it	lt
 80208b8:	2600      	movlt	r6, #0
 80208ba:	444b      	add	r3, r9
 80208bc:	f9b7 9002 	ldrsh.w	r9, [r7, #2]
 80208c0:	bfb8      	it	lt
 80208c2:	f10d 087c 	addlt.w	r8, sp, #124	; 0x7c
 80208c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80208c8:	444a      	add	r2, r9
 80208ca:	b212      	sxth	r2, r2
 80208cc:	4293      	cmp	r3, r2
 80208ce:	da56      	bge.n	802097e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ea>
 80208d0:	454b      	cmp	r3, r9
 80208d2:	da08      	bge.n	80208e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 80208d4:	2c00      	cmp	r4, #0
 80208d6:	dd60      	ble.n	802099a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x206>
 80208d8:	eba9 0903 	sub.w	r9, r9, r3
 80208dc:	454c      	cmp	r4, r9
 80208de:	db50      	blt.n	8020982 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1ee>
 80208e0:	f1b9 0f00 	cmp.w	r9, #0
 80208e4:	dc4e      	bgt.n	8020984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1f0>
 80208e6:	2c00      	cmp	r4, #0
 80208e8:	dd57      	ble.n	802099a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x206>
 80208ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80208ec:	4658      	mov	r0, fp
 80208ee:	f8db 3000 	ldr.w	r3, [fp]
 80208f2:	3c01      	subs	r4, #1
 80208f4:	9206      	str	r2, [sp, #24]
 80208f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80208f8:	9703      	str	r7, [sp, #12]
 80208fa:	9205      	str	r2, [sp, #20]
 80208fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80208fe:	f8cd 8000 	str.w	r8, [sp]
 8020902:	9204      	str	r2, [sp, #16]
 8020904:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 8020906:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020908:	9202      	str	r2, [sp, #8]
 802090a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802090c:	9201      	str	r2, [sp, #4]
 802090e:	aa3f      	add	r2, sp, #252	; 0xfc
 8020910:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 8020914:	462b      	mov	r3, r5
 8020916:	47c8      	blx	r9
 8020918:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 802091a:	88f9      	ldrh	r1, [r7, #6]
 802091c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020920:	696b      	ldr	r3, [r5, #20]
 8020922:	441a      	add	r2, r3
 8020924:	887b      	ldrh	r3, [r7, #2]
 8020926:	440b      	add	r3, r1
 8020928:	3201      	adds	r2, #1
 802092a:	b21b      	sxth	r3, r3
 802092c:	429a      	cmp	r2, r3
 802092e:	f280 808c 	bge.w	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8020932:	a81f      	add	r0, sp, #124	; 0x7c
 8020934:	f7ff fab7 	bl	801fea6 <_ZN8touchgfx4Edge4stepEv>
 8020938:	a80f      	add	r0, sp, #60	; 0x3c
 802093a:	f7ff fab4 	bl	801fea6 <_ZN8touchgfx4Edge4stepEv>
 802093e:	e7d2      	b.n	80208e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 8020940:	4299      	cmp	r1, r3
 8020942:	dc13      	bgt.n	802096c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1d8>
 8020944:	429a      	cmp	r2, r3
 8020946:	db14      	blt.n	8020972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1de>
 8020948:	2602      	movs	r6, #2
 802094a:	2503      	movs	r5, #3
 802094c:	f04f 0900 	mov.w	r9, #0
 8020950:	46b0      	mov	r8, r6
 8020952:	f04f 0a01 	mov.w	sl, #1
 8020956:	e784      	b.n	8020862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xce>
 8020958:	2501      	movs	r5, #1
 802095a:	2600      	movs	r6, #0
 802095c:	46a9      	mov	r9, r5
 802095e:	46b0      	mov	r8, r6
 8020960:	f04f 0a02 	mov.w	sl, #2
 8020964:	e77d      	b.n	8020862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xce>
 8020966:	2502      	movs	r5, #2
 8020968:	2601      	movs	r6, #1
 802096a:	e776      	b.n	802085a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc6>
 802096c:	2500      	movs	r5, #0
 802096e:	2601      	movs	r6, #1
 8020970:	e7f4      	b.n	802095c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c8>
 8020972:	2502      	movs	r5, #2
 8020974:	2603      	movs	r6, #3
 8020976:	f04f 0800 	mov.w	r8, #0
 802097a:	46a9      	mov	r9, r5
 802097c:	e7e9      	b.n	8020952 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1be>
 802097e:	46a1      	mov	r9, r4
 8020980:	e7ae      	b.n	80208e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x14c>
 8020982:	46a1      	mov	r9, r4
 8020984:	4649      	mov	r1, r9
 8020986:	a81f      	add	r0, sp, #124	; 0x7c
 8020988:	f7ff facf 	bl	801ff2a <_ZN8touchgfx4Edge4stepEi>
 802098c:	4649      	mov	r1, r9
 802098e:	a80f      	add	r0, sp, #60	; 0x3c
 8020990:	eba4 0409 	sub.w	r4, r4, r9
 8020994:	f7ff fac9 	bl	801ff2a <_ZN8touchgfx4Edge4stepEi>
 8020998:	e7a5      	b.n	80208e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x152>
 802099a:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 802099c:	2e00      	cmp	r6, #0
 802099e:	d143      	bne.n	8020a28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x294>
 80209a0:	ae2f      	add	r6, sp, #188	; 0xbc
 80209a2:	ad0f      	add	r5, sp, #60	; 0x3c
 80209a4:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 80209a6:	88fa      	ldrh	r2, [r7, #6]
 80209a8:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 80209ac:	696b      	ldr	r3, [r5, #20]
 80209ae:	4443      	add	r3, r8
 80209b0:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
 80209b4:	4442      	add	r2, r8
 80209b6:	b212      	sxth	r2, r2
 80209b8:	4293      	cmp	r3, r2
 80209ba:	da38      	bge.n	8020a2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x29a>
 80209bc:	4543      	cmp	r3, r8
 80209be:	da08      	bge.n	80209d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 80209c0:	2c00      	cmp	r4, #0
 80209c2:	dd42      	ble.n	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80209c4:	eba8 0803 	sub.w	r8, r8, r3
 80209c8:	4544      	cmp	r4, r8
 80209ca:	db32      	blt.n	8020a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x29e>
 80209cc:	f1b8 0f00 	cmp.w	r8, #0
 80209d0:	dc30      	bgt.n	8020a34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2a0>
 80209d2:	2c00      	cmp	r4, #0
 80209d4:	dd39      	ble.n	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 80209d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80209d8:	4658      	mov	r0, fp
 80209da:	f8db 3000 	ldr.w	r3, [fp]
 80209de:	3c01      	subs	r4, #1
 80209e0:	9206      	str	r2, [sp, #24]
 80209e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80209e4:	9703      	str	r7, [sp, #12]
 80209e6:	9205      	str	r2, [sp, #20]
 80209e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80209ea:	9600      	str	r6, [sp, #0]
 80209ec:	9204      	str	r2, [sp, #16]
 80209ee:	9a5a      	ldr	r2, [sp, #360]	; 0x168
 80209f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80209f2:	9202      	str	r2, [sp, #8]
 80209f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80209f6:	9201      	str	r2, [sp, #4]
 80209f8:	aa3f      	add	r2, sp, #252	; 0xfc
 80209fa:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80209fe:	462b      	mov	r3, r5
 8020a00:	47c0      	blx	r8
 8020a02:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8020a04:	88f9      	ldrh	r1, [r7, #6]
 8020a06:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020a0a:	696b      	ldr	r3, [r5, #20]
 8020a0c:	441a      	add	r2, r3
 8020a0e:	887b      	ldrh	r3, [r7, #2]
 8020a10:	440b      	add	r3, r1
 8020a12:	3201      	adds	r2, #1
 8020a14:	b21b      	sxth	r3, r3
 8020a16:	429a      	cmp	r2, r3
 8020a18:	da17      	bge.n	8020a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2b6>
 8020a1a:	a82f      	add	r0, sp, #188	; 0xbc
 8020a1c:	f7ff fa43 	bl	801fea6 <_ZN8touchgfx4Edge4stepEv>
 8020a20:	a80f      	add	r0, sp, #60	; 0x3c
 8020a22:	f7ff fa40 	bl	801fea6 <_ZN8touchgfx4Edge4stepEv>
 8020a26:	e7d4      	b.n	80209d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 8020a28:	ae0f      	add	r6, sp, #60	; 0x3c
 8020a2a:	ad2f      	add	r5, sp, #188	; 0xbc
 8020a2c:	e7ba      	b.n	80209a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8020a2e:	46a0      	mov	r8, r4
 8020a30:	e7cc      	b.n	80209cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x238>
 8020a32:	46a0      	mov	r8, r4
 8020a34:	4641      	mov	r1, r8
 8020a36:	a82f      	add	r0, sp, #188	; 0xbc
 8020a38:	f7ff fa77 	bl	801ff2a <_ZN8touchgfx4Edge4stepEi>
 8020a3c:	4641      	mov	r1, r8
 8020a3e:	a80f      	add	r0, sp, #60	; 0x3c
 8020a40:	eba4 0408 	sub.w	r4, r4, r8
 8020a44:	f7ff fa71 	bl	801ff2a <_ZN8touchgfx4Edge4stepEi>
 8020a48:	e7c3      	b.n	80209d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x23e>
 8020a4a:	b051      	add	sp, #324	; 0x144
 8020a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a50:	fffd8f01 	.word	0xfffd8f01
 8020a54:	00027100 	.word	0x00027100
 8020a58:	0004e1ff 	.word	0x0004e1ff
 8020a5c:	0004e1fe 	.word	0x0004e1fe

08020a60 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8020a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a62:	f8dd c014 	ldr.w	ip, [sp, #20]
 8020a66:	1e05      	subs	r5, r0, #0
 8020a68:	f04f 0601 	mov.w	r6, #1
 8020a6c:	9c06      	ldr	r4, [sp, #24]
 8020a6e:	bfba      	itte	lt
 8020a70:	f04f 37ff 	movlt.w	r7, #4294967295
 8020a74:	426d      	neglt	r5, r5
 8020a76:	2701      	movge	r7, #1
 8020a78:	f1bc 0f00 	cmp.w	ip, #0
 8020a7c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8020a80:	bfbc      	itt	lt
 8020a82:	f1cc 0c00 	rsblt	ip, ip, #0
 8020a86:	427f      	neglt	r7, r7
 8020a88:	2c00      	cmp	r4, #0
 8020a8a:	fa4c f001 	asr.w	r0, ip, r1
 8020a8e:	fa06 f101 	lsl.w	r1, r6, r1
 8020a92:	bfbc      	itt	lt
 8020a94:	4264      	neglt	r4, r4
 8020a96:	427f      	neglt	r7, r7
 8020a98:	3901      	subs	r1, #1
 8020a9a:	ea01 010c 	and.w	r1, r1, ip
 8020a9e:	434d      	muls	r5, r1
 8020aa0:	f8de 1000 	ldr.w	r1, [lr]
 8020aa4:	fb03 1300 	mla	r3, r3, r0, r1
 8020aa8:	fb95 f1f4 	sdiv	r1, r5, r4
 8020aac:	fb04 5511 	mls	r5, r4, r1, r5
 8020ab0:	441d      	add	r5, r3
 8020ab2:	fb95 f3f4 	sdiv	r3, r5, r4
 8020ab6:	4419      	add	r1, r3
 8020ab8:	fb04 5413 	mls	r4, r4, r3, r5
 8020abc:	fb02 1000 	mla	r0, r2, r0, r1
 8020ac0:	f8ce 4000 	str.w	r4, [lr]
 8020ac4:	4378      	muls	r0, r7
 8020ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020ac8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8020ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020acc:	4c24      	ldr	r4, [pc, #144]	; (8020b60 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8020ace:	b086      	sub	sp, #24
 8020ad0:	4605      	mov	r5, r0
 8020ad2:	6807      	ldr	r7, [r0, #0]
 8020ad4:	69a3      	ldr	r3, [r4, #24]
 8020ad6:	b92b      	cbnz	r3, 8020ae4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8020ad8:	6840      	ldr	r0, [r0, #4]
 8020ada:	602f      	str	r7, [r5, #0]
 8020adc:	6068      	str	r0, [r5, #4]
 8020ade:	b006      	add	sp, #24
 8020ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ae4:	f04f 0802 	mov.w	r8, #2
 8020ae8:	68a2      	ldr	r2, [r4, #8]
 8020aea:	ae06      	add	r6, sp, #24
 8020aec:	6820      	ldr	r0, [r4, #0]
 8020aee:	fb93 f1f8 	sdiv	r1, r3, r8
 8020af2:	440a      	add	r2, r1
 8020af4:	69e1      	ldr	r1, [r4, #28]
 8020af6:	f846 2d04 	str.w	r2, [r6, #-4]!
 8020afa:	9301      	str	r3, [sp, #4]
 8020afc:	9700      	str	r7, [sp, #0]
 8020afe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020b00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8020b02:	9602      	str	r6, [sp, #8]
 8020b04:	f7ff ffac 	bl	8020a60 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8020b08:	69a3      	ldr	r3, [r4, #24]
 8020b0a:	4607      	mov	r7, r0
 8020b0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8020b0e:	9301      	str	r3, [sp, #4]
 8020b10:	686b      	ldr	r3, [r5, #4]
 8020b12:	6a21      	ldr	r1, [r4, #32]
 8020b14:	9300      	str	r3, [sp, #0]
 8020b16:	9602      	str	r6, [sp, #8]
 8020b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020b1a:	6860      	ldr	r0, [r4, #4]
 8020b1c:	f7ff ffa0 	bl	8020a60 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8020b20:	69a2      	ldr	r2, [r4, #24]
 8020b22:	6963      	ldr	r3, [r4, #20]
 8020b24:	4407      	add	r7, r0
 8020b26:	9201      	str	r2, [sp, #4]
 8020b28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8020b2a:	9602      	str	r6, [sp, #8]
 8020b2c:	68e0      	ldr	r0, [r4, #12]
 8020b2e:	fb92 f8f8 	sdiv	r8, r2, r8
 8020b32:	4443      	add	r3, r8
 8020b34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8020b36:	9305      	str	r3, [sp, #20]
 8020b38:	682b      	ldr	r3, [r5, #0]
 8020b3a:	9300      	str	r3, [sp, #0]
 8020b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020b3e:	f7ff ff8f 	bl	8020a60 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8020b42:	69a3      	ldr	r3, [r4, #24]
 8020b44:	4680      	mov	r8, r0
 8020b46:	9602      	str	r6, [sp, #8]
 8020b48:	9301      	str	r3, [sp, #4]
 8020b4a:	686b      	ldr	r3, [r5, #4]
 8020b4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020b4e:	9300      	str	r3, [sp, #0]
 8020b50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8020b52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8020b54:	6920      	ldr	r0, [r4, #16]
 8020b56:	f7ff ff83 	bl	8020a60 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8020b5a:	4440      	add	r0, r8
 8020b5c:	e7bd      	b.n	8020ada <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8020b5e:	bf00      	nop
 8020b60:	2000bb3c 	.word	0x2000bb3c

08020b64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8020b64:	4b07      	ldr	r3, [pc, #28]	; (8020b84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8020b66:	b510      	push	{r4, lr}
 8020b68:	781b      	ldrb	r3, [r3, #0]
 8020b6a:	2b01      	cmp	r3, #1
 8020b6c:	d108      	bne.n	8020b80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8020b6e:	4b06      	ldr	r3, [pc, #24]	; (8020b88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8020b70:	880c      	ldrh	r4, [r1, #0]
 8020b72:	881b      	ldrh	r3, [r3, #0]
 8020b74:	f9b0 2000 	ldrsh.w	r2, [r0]
 8020b78:	3b01      	subs	r3, #1
 8020b7a:	1b1b      	subs	r3, r3, r4
 8020b7c:	8003      	strh	r3, [r0, #0]
 8020b7e:	800a      	strh	r2, [r1, #0]
 8020b80:	bd10      	pop	{r4, pc}
 8020b82:	bf00      	nop
 8020b84:	2000bb0a 	.word	0x2000bb0a
 8020b88:	2000bb0e 	.word	0x2000bb0e

08020b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8020b8c:	4b07      	ldr	r3, [pc, #28]	; (8020bac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8020b8e:	b510      	push	{r4, lr}
 8020b90:	781b      	ldrb	r3, [r3, #0]
 8020b92:	2b01      	cmp	r3, #1
 8020b94:	d108      	bne.n	8020ba8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8020b96:	f9b1 3000 	ldrsh.w	r3, [r1]
 8020b9a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8020b9e:	8003      	strh	r3, [r0, #0]
 8020ba0:	8893      	ldrh	r3, [r2, #4]
 8020ba2:	3b01      	subs	r3, #1
 8020ba4:	1b1b      	subs	r3, r3, r4
 8020ba6:	800b      	strh	r3, [r1, #0]
 8020ba8:	bd10      	pop	{r4, pc}
 8020baa:	bf00      	nop
 8020bac:	2000bb0a 	.word	0x2000bb0a

08020bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8020bb0:	4b0a      	ldr	r3, [pc, #40]	; (8020bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 8020bb2:	b513      	push	{r0, r1, r4, lr}
 8020bb4:	f9b3 4000 	ldrsh.w	r4, [r3]
 8020bb8:	4b09      	ldr	r3, [pc, #36]	; (8020be0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 8020bba:	f8ad 4004 	strh.w	r4, [sp, #4]
 8020bbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020bc2:	2300      	movs	r3, #0
 8020bc4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8020bc8:	466a      	mov	r2, sp
 8020bca:	f8ad 3000 	strh.w	r3, [sp]
 8020bce:	f8ad 3002 	strh.w	r3, [sp, #2]
 8020bd2:	f7ff ffdb 	bl	8020b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8020bd6:	b002      	add	sp, #8
 8020bd8:	bd10      	pop	{r4, pc}
 8020bda:	bf00      	nop
 8020bdc:	2000bb06 	.word	0x2000bb06
 8020be0:	2000bb08 	.word	0x2000bb08

08020be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8020be4:	4b0b      	ldr	r3, [pc, #44]	; (8020c14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8020be6:	781b      	ldrb	r3, [r3, #0]
 8020be8:	2b01      	cmp	r3, #1
 8020bea:	d111      	bne.n	8020c10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8020bec:	680b      	ldr	r3, [r1, #0]
 8020bee:	ed90 7a00 	vldr	s14, [r0]
 8020bf2:	6003      	str	r3, [r0, #0]
 8020bf4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8020bf8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8020c18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8020bfc:	ee07 3a90 	vmov	s15, r3
 8020c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020c04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020c08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020c0c:	edc1 7a00 	vstr	s15, [r1]
 8020c10:	4770      	bx	lr
 8020c12:	bf00      	nop
 8020c14:	2000bb0a 	.word	0x2000bb0a
 8020c18:	38d1b717 	.word	0x38d1b717

08020c1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8020c1c:	4b0a      	ldr	r3, [pc, #40]	; (8020c48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8020c1e:	460a      	mov	r2, r1
 8020c20:	b510      	push	{r4, lr}
 8020c22:	781b      	ldrb	r3, [r3, #0]
 8020c24:	2b01      	cmp	r3, #1
 8020c26:	d10d      	bne.n	8020c44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8020c28:	8881      	ldrh	r1, [r0, #4]
 8020c2a:	8803      	ldrh	r3, [r0, #0]
 8020c2c:	440b      	add	r3, r1
 8020c2e:	4601      	mov	r1, r0
 8020c30:	3b01      	subs	r3, #1
 8020c32:	f821 3b02 	strh.w	r3, [r1], #2
 8020c36:	f7ff ffa9 	bl	8020b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8020c3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8020c3e:	88c2      	ldrh	r2, [r0, #6]
 8020c40:	80c3      	strh	r3, [r0, #6]
 8020c42:	8082      	strh	r2, [r0, #4]
 8020c44:	bd10      	pop	{r4, pc}
 8020c46:	bf00      	nop
 8020c48:	2000bb0a 	.word	0x2000bb0a

08020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8020c4c:	4b0a      	ldr	r3, [pc, #40]	; (8020c78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8020c4e:	b507      	push	{r0, r1, r2, lr}
 8020c50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020c54:	4b09      	ldr	r3, [pc, #36]	; (8020c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 8020c56:	f8ad 1004 	strh.w	r1, [sp, #4]
 8020c5a:	4669      	mov	r1, sp
 8020c5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020c60:	2300      	movs	r3, #0
 8020c62:	f8ad 2006 	strh.w	r2, [sp, #6]
 8020c66:	f8ad 3000 	strh.w	r3, [sp]
 8020c6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8020c6e:	f7ff ffd5 	bl	8020c1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020c72:	b003      	add	sp, #12
 8020c74:	f85d fb04 	ldr.w	pc, [sp], #4
 8020c78:	2000bb06 	.word	0x2000bb06
 8020c7c:	2000bb08 	.word	0x2000bb08

08020c80 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8020c80:	4b03      	ldr	r3, [pc, #12]	; (8020c90 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8020c82:	6818      	ldr	r0, [r3, #0]
 8020c84:	b110      	cbz	r0, 8020c8c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8020c86:	6803      	ldr	r3, [r0, #0]
 8020c88:	699b      	ldr	r3, [r3, #24]
 8020c8a:	4718      	bx	r3
 8020c8c:	4770      	bx	lr
 8020c8e:	bf00      	nop
 8020c90:	2000bb88 	.word	0x2000bb88

08020c94 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8020c94:	4770      	bx	lr
	...

08020c98 <_ZN8touchgfx11Application4drawEv>:
 8020c98:	4b0b      	ldr	r3, [pc, #44]	; (8020cc8 <_ZN8touchgfx11Application4drawEv+0x30>)
 8020c9a:	b507      	push	{r0, r1, r2, lr}
 8020c9c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020ca0:	4b0a      	ldr	r3, [pc, #40]	; (8020ccc <_ZN8touchgfx11Application4drawEv+0x34>)
 8020ca2:	f8ad 1004 	strh.w	r1, [sp, #4]
 8020ca6:	4669      	mov	r1, sp
 8020ca8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020cac:	2300      	movs	r3, #0
 8020cae:	f8ad 3000 	strh.w	r3, [sp]
 8020cb2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8020cb6:	6803      	ldr	r3, [r0, #0]
 8020cb8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8020cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020cbe:	4798      	blx	r3
 8020cc0:	b003      	add	sp, #12
 8020cc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8020cc6:	bf00      	nop
 8020cc8:	2000bb06 	.word	0x2000bb06
 8020ccc:	2000bb08 	.word	0x2000bb08

08020cd0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8020cd0:	4b03      	ldr	r3, [pc, #12]	; (8020ce0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8020cd2:	6818      	ldr	r0, [r3, #0]
 8020cd4:	b110      	cbz	r0, 8020cdc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8020cd6:	6803      	ldr	r3, [r0, #0]
 8020cd8:	69db      	ldr	r3, [r3, #28]
 8020cda:	4718      	bx	r3
 8020cdc:	4770      	bx	lr
 8020cde:	bf00      	nop
 8020ce0:	2000bb88 	.word	0x2000bb88

08020ce4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8020ce4:	4b03      	ldr	r3, [pc, #12]	; (8020cf4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8020ce6:	6818      	ldr	r0, [r3, #0]
 8020ce8:	b110      	cbz	r0, 8020cf0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8020cea:	6803      	ldr	r3, [r0, #0]
 8020cec:	6a1b      	ldr	r3, [r3, #32]
 8020cee:	4718      	bx	r3
 8020cf0:	4770      	bx	lr
 8020cf2:	bf00      	nop
 8020cf4:	2000bb88 	.word	0x2000bb88

08020cf8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8020cf8:	4b03      	ldr	r3, [pc, #12]	; (8020d08 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8020cfa:	6818      	ldr	r0, [r3, #0]
 8020cfc:	b110      	cbz	r0, 8020d04 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8020cfe:	6803      	ldr	r3, [r0, #0]
 8020d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020d02:	4718      	bx	r3
 8020d04:	4770      	bx	lr
 8020d06:	bf00      	nop
 8020d08:	2000bb88 	.word	0x2000bb88

08020d0c <_ZN8touchgfx11Application15handleTickEventEv>:
 8020d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d10:	4d3d      	ldr	r5, [pc, #244]	; (8020e08 <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 8020d12:	4604      	mov	r4, r0
 8020d14:	6828      	ldr	r0, [r5, #0]
 8020d16:	2800      	cmp	r0, #0
 8020d18:	d047      	beq.n	8020daa <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 8020d1a:	7a03      	ldrb	r3, [r0, #8]
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	d144      	bne.n	8020daa <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 8020d20:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8020d24:	6803      	ldr	r3, [r0, #0]
 8020d26:	689b      	ldr	r3, [r3, #8]
 8020d28:	e03c      	b.n	8020da4 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8020d2a:	3b01      	subs	r3, #1
 8020d2c:	f04f 0c00 	mov.w	ip, #0
 8020d30:	1c5a      	adds	r2, r3, #1
 8020d32:	d031      	beq.n	8020d98 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8020d34:	18e2      	adds	r2, r4, r3
 8020d36:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 8020d3a:	bb59      	cbnz	r1, 8020d94 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 8020d3c:	b298      	uxth	r0, r3
 8020d3e:	1d25      	adds	r5, r4, #4
 8020d40:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8020d44:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8020d48:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 8020d4c:	428a      	cmp	r2, r1
 8020d4e:	dd14      	ble.n	8020d7a <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 8020d50:	682e      	ldr	r6, [r5, #0]
 8020d52:	45b0      	cmp	r8, r6
 8020d54:	d106      	bne.n	8020d64 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 8020d56:	46ae      	mov	lr, r5
 8020d58:	460e      	mov	r6, r1
 8020d5a:	2e1e      	cmp	r6, #30
 8020d5c:	dd05      	ble.n	8020d6a <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 8020d5e:	3a01      	subs	r2, #1
 8020d60:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 8020d64:	3101      	adds	r1, #1
 8020d66:	3504      	adds	r5, #4
 8020d68:	e7ee      	b.n	8020d48 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 8020d6a:	3601      	adds	r6, #1
 8020d6c:	f8de 7004 	ldr.w	r7, [lr, #4]
 8020d70:	42b2      	cmp	r2, r6
 8020d72:	f84e 7b04 	str.w	r7, [lr], #4
 8020d76:	dcf0      	bgt.n	8020d5a <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 8020d78:	e7f1      	b.n	8020d5e <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 8020d7a:	4290      	cmp	r0, r2
 8020d7c:	da07      	bge.n	8020d8e <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 8020d7e:	1821      	adds	r1, r4, r0
 8020d80:	3001      	adds	r0, #1
 8020d82:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 8020d86:	b280      	uxth	r0, r0
 8020d88:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8020d8c:	e7f5      	b.n	8020d7a <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 8020d8e:	4422      	add	r2, r4
 8020d90:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 8020d94:	3b01      	subs	r3, #1
 8020d96:	e7cb      	b.n	8020d30 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 8020d98:	4b1c      	ldr	r3, [pc, #112]	; (8020e0c <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 8020d9a:	6818      	ldr	r0, [r3, #0]
 8020d9c:	2800      	cmp	r0, #0
 8020d9e:	d031      	beq.n	8020e04 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 8020da0:	6803      	ldr	r3, [r0, #0]
 8020da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020da8:	4718      	bx	r3
 8020daa:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8020dae:	b913      	cbnz	r3, 8020db6 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8020db0:	b108      	cbz	r0, 8020db6 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8020db2:	7a03      	ldrb	r3, [r0, #8]
 8020db4:	b9a3      	cbnz	r3, 8020de0 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8020db6:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 8020dba:	f104 0788 	add.w	r7, r4, #136	; 0x88
 8020dbe:	2600      	movs	r6, #0
 8020dc0:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 8020dc4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8020dc8:	429e      	cmp	r6, r3
 8020dca:	daae      	bge.n	8020d2a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8020dcc:	f817 3b01 	ldrb.w	r3, [r7], #1
 8020dd0:	b123      	cbz	r3, 8020ddc <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8020dd2:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8020dd6:	6803      	ldr	r3, [r0, #0]
 8020dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020dda:	4798      	blx	r3
 8020ddc:	3601      	adds	r6, #1
 8020dde:	e7f1      	b.n	8020dc4 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 8020de0:	4b0a      	ldr	r3, [pc, #40]	; (8020e0c <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 8020de2:	6818      	ldr	r0, [r3, #0]
 8020de4:	b110      	cbz	r0, 8020dec <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8020de6:	6803      	ldr	r3, [r0, #0]
 8020de8:	691b      	ldr	r3, [r3, #16]
 8020dea:	4798      	blx	r3
 8020dec:	6828      	ldr	r0, [r5, #0]
 8020dee:	6803      	ldr	r3, [r0, #0]
 8020df0:	68db      	ldr	r3, [r3, #12]
 8020df2:	4798      	blx	r3
 8020df4:	6823      	ldr	r3, [r4, #0]
 8020df6:	4620      	mov	r0, r4
 8020df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020dfa:	4798      	blx	r3
 8020dfc:	2301      	movs	r3, #1
 8020dfe:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8020e02:	e7d8      	b.n	8020db6 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8020e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e08:	2000bb8c 	.word	0x2000bb8c
 8020e0c:	2000bb88 	.word	0x2000bb88

08020e10 <_ZN8touchgfx11ApplicationD1Ev>:
 8020e10:	4770      	bx	lr

08020e12 <_ZN8touchgfx11ApplicationD0Ev>:
 8020e12:	b510      	push	{r4, lr}
 8020e14:	4604      	mov	r4, r0
 8020e16:	f44f 7198 	mov.w	r1, #304	; 0x130
 8020e1a:	f004 f9db 	bl	80251d4 <_ZdlPvj>
 8020e1e:	4620      	mov	r0, r4
 8020e20:	bd10      	pop	{r4, pc}
	...

08020e24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8020e24:	b570      	push	{r4, r5, r6, lr}
 8020e26:	4606      	mov	r6, r0
 8020e28:	460c      	mov	r4, r1
 8020e2a:	b929      	cbnz	r1, 8020e38 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8020e2c:	4b0c      	ldr	r3, [pc, #48]	; (8020e60 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8020e2e:	2161      	movs	r1, #97	; 0x61
 8020e30:	4a0c      	ldr	r2, [pc, #48]	; (8020e64 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8020e32:	480d      	ldr	r0, [pc, #52]	; (8020e68 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8020e34:	f004 f9ea 	bl	802520c <__assert_func>
 8020e38:	2300      	movs	r3, #0
 8020e3a:	4d0c      	ldr	r5, [pc, #48]	; (8020e6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8020e3c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8020e40:	6828      	ldr	r0, [r5, #0]
 8020e42:	b110      	cbz	r0, 8020e4a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8020e44:	6803      	ldr	r3, [r0, #0]
 8020e46:	695b      	ldr	r3, [r3, #20]
 8020e48:	4798      	blx	r3
 8020e4a:	602c      	str	r4, [r5, #0]
 8020e4c:	4620      	mov	r0, r4
 8020e4e:	6823      	ldr	r3, [r4, #0]
 8020e50:	68db      	ldr	r3, [r3, #12]
 8020e52:	4798      	blx	r3
 8020e54:	6833      	ldr	r3, [r6, #0]
 8020e56:	4630      	mov	r0, r6
 8020e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020e5e:	4718      	bx	r3
 8020e60:	080288bc 	.word	0x080288bc
 8020e64:	08028984 	.word	0x08028984
 8020e68:	080288c6 	.word	0x080288c6
 8020e6c:	2000bb88 	.word	0x2000bb88

08020e70 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8020e70:	b510      	push	{r4, lr}
 8020e72:	f9b1 4000 	ldrsh.w	r4, [r1]
 8020e76:	888a      	ldrh	r2, [r1, #4]
 8020e78:	f9b0 3000 	ldrsh.w	r3, [r0]
 8020e7c:	4422      	add	r2, r4
 8020e7e:	b212      	sxth	r2, r2
 8020e80:	4293      	cmp	r3, r2
 8020e82:	da15      	bge.n	8020eb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8020e84:	8882      	ldrh	r2, [r0, #4]
 8020e86:	4413      	add	r3, r2
 8020e88:	b21b      	sxth	r3, r3
 8020e8a:	429c      	cmp	r4, r3
 8020e8c:	da10      	bge.n	8020eb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8020e8e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8020e92:	88c9      	ldrh	r1, [r1, #6]
 8020e94:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8020e98:	4419      	add	r1, r3
 8020e9a:	b209      	sxth	r1, r1
 8020e9c:	428a      	cmp	r2, r1
 8020e9e:	da07      	bge.n	8020eb0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8020ea0:	88c0      	ldrh	r0, [r0, #6]
 8020ea2:	4410      	add	r0, r2
 8020ea4:	b200      	sxth	r0, r0
 8020ea6:	4283      	cmp	r3, r0
 8020ea8:	bfac      	ite	ge
 8020eaa:	2000      	movge	r0, #0
 8020eac:	2001      	movlt	r0, #1
 8020eae:	bd10      	pop	{r4, pc}
 8020eb0:	2000      	movs	r0, #0
 8020eb2:	bd10      	pop	{r4, pc}

08020eb4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8020eb4:	b570      	push	{r4, r5, r6, lr}
 8020eb6:	f9b1 4000 	ldrsh.w	r4, [r1]
 8020eba:	f9b0 5000 	ldrsh.w	r5, [r0]
 8020ebe:	42ac      	cmp	r4, r5
 8020ec0:	db18      	blt.n	8020ef4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8020ec2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8020ec6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020eca:	429a      	cmp	r2, r3
 8020ecc:	db12      	blt.n	8020ef4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8020ece:	8886      	ldrh	r6, [r0, #4]
 8020ed0:	4435      	add	r5, r6
 8020ed2:	888e      	ldrh	r6, [r1, #4]
 8020ed4:	4434      	add	r4, r6
 8020ed6:	b22d      	sxth	r5, r5
 8020ed8:	b224      	sxth	r4, r4
 8020eda:	42a5      	cmp	r5, r4
 8020edc:	db0a      	blt.n	8020ef4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8020ede:	88c0      	ldrh	r0, [r0, #6]
 8020ee0:	4418      	add	r0, r3
 8020ee2:	88cb      	ldrh	r3, [r1, #6]
 8020ee4:	441a      	add	r2, r3
 8020ee6:	b200      	sxth	r0, r0
 8020ee8:	b212      	sxth	r2, r2
 8020eea:	4290      	cmp	r0, r2
 8020eec:	bfb4      	ite	lt
 8020eee:	2000      	movlt	r0, #0
 8020ef0:	2001      	movge	r0, #1
 8020ef2:	bd70      	pop	{r4, r5, r6, pc}
 8020ef4:	2000      	movs	r0, #0
 8020ef6:	bd70      	pop	{r4, r5, r6, pc}

08020ef8 <_ZN8touchgfx4RectaNERKS0_>:
 8020ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020efa:	4604      	mov	r4, r0
 8020efc:	460d      	mov	r5, r1
 8020efe:	f7ff ffb7 	bl	8020e70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8020f02:	2800      	cmp	r0, #0
 8020f04:	d02d      	beq.n	8020f62 <_ZN8touchgfx4RectaNERKS0_+0x6a>
 8020f06:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020f0a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020f0e:	88a7      	ldrh	r7, [r4, #4]
 8020f10:	4616      	mov	r6, r2
 8020f12:	428a      	cmp	r2, r1
 8020f14:	443a      	add	r2, r7
 8020f16:	88af      	ldrh	r7, [r5, #4]
 8020f18:	bfb8      	it	lt
 8020f1a:	460e      	movlt	r6, r1
 8020f1c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8020f20:	4439      	add	r1, r7
 8020f22:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8020f26:	b292      	uxth	r2, r2
 8020f28:	b289      	uxth	r1, r1
 8020f2a:	4298      	cmp	r0, r3
 8020f2c:	fa0f fe82 	sxth.w	lr, r2
 8020f30:	b20f      	sxth	r7, r1
 8020f32:	bfb8      	it	lt
 8020f34:	4618      	movlt	r0, r3
 8020f36:	45be      	cmp	lr, r7
 8020f38:	bfa8      	it	ge
 8020f3a:	460a      	movge	r2, r1
 8020f3c:	1b92      	subs	r2, r2, r6
 8020f3e:	80a2      	strh	r2, [r4, #4]
 8020f40:	88e2      	ldrh	r2, [r4, #6]
 8020f42:	88e9      	ldrh	r1, [r5, #6]
 8020f44:	4413      	add	r3, r2
 8020f46:	886a      	ldrh	r2, [r5, #2]
 8020f48:	8026      	strh	r6, [r4, #0]
 8020f4a:	440a      	add	r2, r1
 8020f4c:	b29b      	uxth	r3, r3
 8020f4e:	8060      	strh	r0, [r4, #2]
 8020f50:	b292      	uxth	r2, r2
 8020f52:	b21d      	sxth	r5, r3
 8020f54:	b211      	sxth	r1, r2
 8020f56:	428d      	cmp	r5, r1
 8020f58:	bfa8      	it	ge
 8020f5a:	4613      	movge	r3, r2
 8020f5c:	1a1b      	subs	r3, r3, r0
 8020f5e:	80e3      	strh	r3, [r4, #6]
 8020f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f62:	8020      	strh	r0, [r4, #0]
 8020f64:	8060      	strh	r0, [r4, #2]
 8020f66:	80a0      	strh	r0, [r4, #4]
 8020f68:	80e0      	strh	r0, [r4, #6]
 8020f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020f6c <_ZNK8touchgfx4Rect7isEmptyEv>:
 8020f6c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8020f70:	b12b      	cbz	r3, 8020f7e <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8020f72:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8020f76:	fab0 f080 	clz	r0, r0
 8020f7a:	0940      	lsrs	r0, r0, #5
 8020f7c:	4770      	bx	lr
 8020f7e:	2001      	movs	r0, #1
 8020f80:	4770      	bx	lr

08020f82 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8020f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f84:	4604      	mov	r4, r0
 8020f86:	4608      	mov	r0, r1
 8020f88:	460d      	mov	r5, r1
 8020f8a:	f7ff ffef 	bl	8020f6c <_ZNK8touchgfx4Rect7isEmptyEv>
 8020f8e:	2800      	cmp	r0, #0
 8020f90:	d13c      	bne.n	802100c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8a>
 8020f92:	4620      	mov	r0, r4
 8020f94:	f7ff ffea 	bl	8020f6c <_ZNK8touchgfx4Rect7isEmptyEv>
 8020f98:	f9b5 6000 	ldrsh.w	r6, [r5]
 8020f9c:	b150      	cbz	r0, 8020fb4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x32>
 8020f9e:	8026      	strh	r6, [r4, #0]
 8020fa0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020fa4:	8063      	strh	r3, [r4, #2]
 8020fa6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8020faa:	80a3      	strh	r3, [r4, #4]
 8020fac:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8020fb0:	80e3      	strh	r3, [r4, #6]
 8020fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020fb4:	f9b4 1000 	ldrsh.w	r1, [r4]
 8020fb8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8020fbc:	42b1      	cmp	r1, r6
 8020fbe:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8020fc2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8020fc6:	460f      	mov	r7, r1
 8020fc8:	88ed      	ldrh	r5, [r5, #6]
 8020fca:	bfa8      	it	ge
 8020fcc:	4637      	movge	r7, r6
 8020fce:	4293      	cmp	r3, r2
 8020fd0:	4618      	mov	r0, r3
 8020fd2:	4476      	add	r6, lr
 8020fd4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8020fd8:	bfa8      	it	ge
 8020fda:	4610      	movge	r0, r2
 8020fdc:	442a      	add	r2, r5
 8020fde:	88e5      	ldrh	r5, [r4, #6]
 8020fe0:	4471      	add	r1, lr
 8020fe2:	b236      	sxth	r6, r6
 8020fe4:	8027      	strh	r7, [r4, #0]
 8020fe6:	442b      	add	r3, r5
 8020fe8:	b209      	sxth	r1, r1
 8020fea:	b212      	sxth	r2, r2
 8020fec:	8060      	strh	r0, [r4, #2]
 8020fee:	b21b      	sxth	r3, r3
 8020ff0:	428e      	cmp	r6, r1
 8020ff2:	bfac      	ite	ge
 8020ff4:	ebc7 0106 	rsbge	r1, r7, r6
 8020ff8:	ebc7 0101 	rsblt	r1, r7, r1
 8020ffc:	429a      	cmp	r2, r3
 8020ffe:	bfac      	ite	ge
 8021000:	ebc0 0202 	rsbge	r2, r0, r2
 8021004:	ebc0 0203 	rsblt	r2, r0, r3
 8021008:	80a1      	strh	r1, [r4, #4]
 802100a:	80e2      	strh	r2, [r4, #6]
 802100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021010 <_ZN8touchgfx11Application11getInstanceEv>:
 8021010:	4b01      	ldr	r3, [pc, #4]	; (8021018 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8021012:	6818      	ldr	r0, [r3, #0]
 8021014:	4770      	bx	lr
 8021016:	bf00      	nop
 8021018:	2000bb90 	.word	0x2000bb90

0802101c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 802101c:	2300      	movs	r3, #0
 802101e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8021022:	30a8      	adds	r0, #168	; 0xa8
 8021024:	f820 3c24 	strh.w	r3, [r0, #-36]
 8021028:	f802 3b01 	strb.w	r3, [r2], #1
 802102c:	4282      	cmp	r2, r0
 802102e:	d1fb      	bne.n	8021028 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8021030:	4770      	bx	lr

08021032 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8021032:	4603      	mov	r3, r0
 8021034:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8021038:	2200      	movs	r2, #0
 802103a:	801a      	strh	r2, [r3, #0]
 802103c:	3308      	adds	r3, #8
 802103e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8021042:	f823 2c04 	strh.w	r2, [r3, #-4]
 8021046:	f823 2c02 	strh.w	r2, [r3, #-2]
 802104a:	428b      	cmp	r3, r1
 802104c:	d1f5      	bne.n	802103a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 802104e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8021052:	4770      	bx	lr

08021054 <_ZN8touchgfx11ApplicationC1Ev>:
 8021054:	b570      	push	{r4, r5, r6, lr}
 8021056:	4b16      	ldr	r3, [pc, #88]	; (80210b0 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8021058:	2500      	movs	r5, #0
 802105a:	4604      	mov	r4, r0
 802105c:	30a8      	adds	r0, #168	; 0xa8
 802105e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8021062:	f820 5c24 	strh.w	r5, [r0, #-36]
 8021066:	f7ff ffe4 	bl	8021032 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 802106a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 802106e:	f7ff ffe0 	bl	8021032 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8021072:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8021076:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 802107a:	490e      	ldr	r1, [pc, #56]	; (80210b4 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 802107c:	480e      	ldr	r0, [pc, #56]	; (80210b8 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 802107e:	f003 ff6b 	bl	8024f58 <CRC_Lock>
 8021082:	4e0e      	ldr	r6, [pc, #56]	; (80210bc <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8021084:	4b0e      	ldr	r3, [pc, #56]	; (80210c0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8021086:	b158      	cbz	r0, 80210a0 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8021088:	801d      	strh	r5, [r3, #0]
 802108a:	2300      	movs	r3, #0
 802108c:	4a0d      	ldr	r2, [pc, #52]	; (80210c4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 802108e:	4620      	mov	r0, r4
 8021090:	6013      	str	r3, [r2, #0]
 8021092:	4a0d      	ldr	r2, [pc, #52]	; (80210c8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8021094:	6033      	str	r3, [r6, #0]
 8021096:	6013      	str	r3, [r2, #0]
 8021098:	f7ff ffc0 	bl	802101c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 802109c:	4620      	mov	r0, r4
 802109e:	bd70      	pop	{r4, r5, r6, pc}
 80210a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80210a4:	2002      	movs	r0, #2
 80210a6:	801a      	strh	r2, [r3, #0]
 80210a8:	6030      	str	r0, [r6, #0]
 80210aa:	f000 febb 	bl	8021e24 <_ZN8touchgfx6Screen4drawEv>
 80210ae:	e7ec      	b.n	802108a <_ZN8touchgfx11ApplicationC1Ev+0x36>
 80210b0:	08028950 	.word	0x08028950
 80210b4:	b5e8b5cd 	.word	0xb5e8b5cd
 80210b8:	f407a5c2 	.word	0xf407a5c2
 80210bc:	2000bb88 	.word	0x2000bb88
 80210c0:	20000074 	.word	0x20000074
 80210c4:	2000bb90 	.word	0x2000bb90
 80210c8:	2000bb8c 	.word	0x2000bb8c

080210cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80210cc:	2300      	movs	r3, #0
 80210ce:	8003      	strh	r3, [r0, #0]
 80210d0:	8043      	strh	r3, [r0, #2]
 80210d2:	8083      	strh	r3, [r0, #4]
 80210d4:	80c3      	strh	r3, [r0, #6]
 80210d6:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 80210da:	429a      	cmp	r2, r3
 80210dc:	b530      	push	{r4, r5, lr}
 80210de:	da12      	bge.n	8021106 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80210e0:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80210e4:	3b01      	subs	r3, #1
 80210e6:	6825      	ldr	r5, [r4, #0]
 80210e8:	b29b      	uxth	r3, r3
 80210ea:	6005      	str	r5, [r0, #0]
 80210ec:	429a      	cmp	r2, r3
 80210ee:	6865      	ldr	r5, [r4, #4]
 80210f0:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 80210f4:	6045      	str	r5, [r0, #4]
 80210f6:	da06      	bge.n	8021106 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80210f8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80210fc:	681d      	ldr	r5, [r3, #0]
 80210fe:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8021102:	685d      	ldr	r5, [r3, #4]
 8021104:	6065      	str	r5, [r4, #4]
 8021106:	bd30      	pop	{r4, r5, pc}

08021108 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8021108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802110a:	e88d 0006 	stmia.w	sp, {r1, r2}
 802110e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8021112:	4604      	mov	r4, r0
 8021114:	466b      	mov	r3, sp
 8021116:	2a07      	cmp	r2, #7
 8021118:	dd06      	ble.n	8021128 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 802111a:	4b09      	ldr	r3, [pc, #36]	; (8021140 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 802111c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8021120:	4a08      	ldr	r2, [pc, #32]	; (8021144 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8021122:	4809      	ldr	r0, [pc, #36]	; (8021148 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8021124:	f004 f872 	bl	802520c <__assert_func>
 8021128:	1c51      	adds	r1, r2, #1
 802112a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 802112e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8021132:	cb03      	ldmia	r3!, {r0, r1}
 8021134:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8021138:	6069      	str	r1, [r5, #4]
 802113a:	b003      	add	sp, #12
 802113c:	bd30      	pop	{r4, r5, pc}
 802113e:	bf00      	nop
 8021140:	080288f0 	.word	0x080288f0
 8021144:	080289c8 	.word	0x080289c8
 8021148:	0802891f 	.word	0x0802891f

0802114c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 802114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021150:	b089      	sub	sp, #36	; 0x24
 8021152:	4606      	mov	r6, r0
 8021154:	4668      	mov	r0, sp
 8021156:	466c      	mov	r4, sp
 8021158:	e88d 0006 	stmia.w	sp, {r1, r2}
 802115c:	f7ff ff06 	bl	8020f6c <_ZNK8touchgfx4Rect7isEmptyEv>
 8021160:	bbb0      	cbnz	r0, 80211d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8021162:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8021166:	b1fd      	cbz	r5, 80211a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8021168:	3d01      	subs	r5, #1
 802116a:	af04      	add	r7, sp, #16
 802116c:	f04f 090a 	mov.w	r9, #10
 8021170:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8021174:	ab02      	add	r3, sp, #8
 8021176:	fa1f f885 	uxth.w	r8, r5
 802117a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 802117e:	6851      	ldr	r1, [r2, #4]
 8021180:	c303      	stmia	r3!, {r0, r1}
 8021182:	4621      	mov	r1, r4
 8021184:	a802      	add	r0, sp, #8
 8021186:	f7ff fe95 	bl	8020eb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 802118a:	bb08      	cbnz	r0, 80211d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 802118c:	a902      	add	r1, sp, #8
 802118e:	4620      	mov	r0, r4
 8021190:	f7ff fe90 	bl	8020eb4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8021194:	b1f8      	cbz	r0, 80211d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8021196:	4642      	mov	r2, r8
 8021198:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 802119c:	a806      	add	r0, sp, #24
 802119e:	f7ff ff95 	bl	80210cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80211a2:	f115 35ff 	adds.w	r5, r5, #4294967295
 80211a6:	d2e3      	bcs.n	8021170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 80211a8:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 80211ac:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 80211b0:	2b08      	cmp	r3, #8
 80211b2:	d108      	bne.n	80211c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80211b4:	4629      	mov	r1, r5
 80211b6:	a806      	add	r0, sp, #24
 80211b8:	2207      	movs	r2, #7
 80211ba:	f7ff ff87 	bl	80210cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80211be:	a906      	add	r1, sp, #24
 80211c0:	4620      	mov	r0, r4
 80211c2:	f7ff fede 	bl	8020f82 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80211c6:	4628      	mov	r0, r5
 80211c8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80211cc:	f7ff ff9c 	bl	8021108 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80211d0:	b009      	add	sp, #36	; 0x24
 80211d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80211d6:	4621      	mov	r1, r4
 80211d8:	a802      	add	r0, sp, #8
 80211da:	f7ff fe49 	bl	8020e70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80211de:	b150      	cbz	r0, 80211f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 80211e0:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80211e4:	a806      	add	r0, sp, #24
 80211e6:	4642      	mov	r2, r8
 80211e8:	f7ff ff70 	bl	80210cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80211ec:	a902      	add	r1, sp, #8
 80211ee:	4620      	mov	r0, r4
 80211f0:	f7ff fec7 	bl	8020f82 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80211f4:	e7d5      	b.n	80211a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80211f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80211fa:	e887 0003 	stmia.w	r7, {r0, r1}
 80211fe:	a902      	add	r1, sp, #8
 8021200:	4638      	mov	r0, r7
 8021202:	f7ff febe 	bl	8020f82 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8021206:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 802120a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 802120e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021212:	fb13 f302 	smulbb	r3, r3, r2
 8021216:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 802121a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 802121e:	fb11 f102 	smulbb	r1, r1, r2
 8021222:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8021226:	fb09 f303 	mul.w	r3, r9, r3
 802122a:	fb12 1100 	smlabb	r1, r2, r0, r1
 802122e:	220b      	movs	r2, #11
 8021230:	434a      	muls	r2, r1
 8021232:	4293      	cmp	r3, r2
 8021234:	dab5      	bge.n	80211a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8021236:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 802123a:	a806      	add	r0, sp, #24
 802123c:	4642      	mov	r2, r8
 802123e:	f7ff ff45 	bl	80210cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8021242:	e897 0003 	ldmia.w	r7, {r0, r1}
 8021246:	e884 0003 	stmia.w	r4, {r0, r1}
 802124a:	e7aa      	b.n	80211a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0802124c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 802124c:	4b1b      	ldr	r3, [pc, #108]	; (80212bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 802124e:	b530      	push	{r4, r5, lr}
 8021250:	460c      	mov	r4, r1
 8021252:	f9b3 1000 	ldrsh.w	r1, [r3]
 8021256:	4b1a      	ldr	r3, [pc, #104]	; (80212c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 8021258:	b085      	sub	sp, #20
 802125a:	4605      	mov	r5, r0
 802125c:	6820      	ldr	r0, [r4, #0]
 802125e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021262:	2300      	movs	r3, #0
 8021264:	f8ad 1004 	strh.w	r1, [sp, #4]
 8021268:	f8ad 3000 	strh.w	r3, [sp]
 802126c:	6861      	ldr	r1, [r4, #4]
 802126e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8021272:	ab02      	add	r3, sp, #8
 8021274:	f8ad 2006 	strh.w	r2, [sp, #6]
 8021278:	c303      	stmia	r3!, {r0, r1}
 802127a:	4669      	mov	r1, sp
 802127c:	a802      	add	r0, sp, #8
 802127e:	f7ff fe3b 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 8021282:	ab02      	add	r3, sp, #8
 8021284:	cb03      	ldmia	r3!, {r0, r1}
 8021286:	4b0f      	ldr	r3, [pc, #60]	; (80212c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8021288:	6020      	str	r0, [r4, #0]
 802128a:	6818      	ldr	r0, [r3, #0]
 802128c:	6061      	str	r1, [r4, #4]
 802128e:	b138      	cbz	r0, 80212a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 8021290:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8021294:	b133      	cbz	r3, 80212a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 8021296:	6821      	ldr	r1, [r4, #0]
 8021298:	4628      	mov	r0, r5
 802129a:	6862      	ldr	r2, [r4, #4]
 802129c:	f7ff ff56 	bl	802114c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80212a0:	b005      	add	sp, #20
 80212a2:	bd30      	pop	{r4, r5, pc}
 80212a4:	6803      	ldr	r3, [r0, #0]
 80212a6:	4621      	mov	r1, r4
 80212a8:	689b      	ldr	r3, [r3, #8]
 80212aa:	4798      	blx	r3
 80212ac:	4b06      	ldr	r3, [pc, #24]	; (80212c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80212ae:	4621      	mov	r1, r4
 80212b0:	6818      	ldr	r0, [r3, #0]
 80212b2:	6803      	ldr	r3, [r0, #0]
 80212b4:	695b      	ldr	r3, [r3, #20]
 80212b6:	4798      	blx	r3
 80212b8:	e7f2      	b.n	80212a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 80212ba:	bf00      	nop
 80212bc:	2000bb06 	.word	0x2000bb06
 80212c0:	2000bb08 	.word	0x2000bb08
 80212c4:	2000bb88 	.word	0x2000bb88
 80212c8:	2000bb14 	.word	0x2000bb14

080212cc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80212cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80212d0:	4604      	mov	r4, r0
 80212d2:	b096      	sub	sp, #88	; 0x58
 80212d4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 80212d8:	b129      	cbz	r1, 80212e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 80212da:	2300      	movs	r3, #0
 80212dc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80212e0:	b016      	add	sp, #88	; 0x58
 80212e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212e6:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	d0f8      	beq.n	80212e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80212ee:	4f6e      	ldr	r7, [pc, #440]	; (80214a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 80212f0:	a805      	add	r0, sp, #20
 80212f2:	f7ff fe9e 	bl	8021032 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80212f6:	883d      	ldrh	r5, [r7, #0]
 80212f8:	462e      	mov	r6, r5
 80212fa:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80212fe:	429e      	cmp	r6, r3
 8021300:	db10      	blt.n	8021324 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 8021302:	462e      	mov	r6, r5
 8021304:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8021308:	429e      	cmp	r6, r3
 802130a:	da17      	bge.n	802133c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 802130c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8021310:	3601      	adds	r6, #1
 8021312:	4620      	mov	r0, r4
 8021314:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8021318:	b2b6      	uxth	r6, r6
 802131a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 802131e:	f7ff ff15 	bl	802114c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8021322:	e7ef      	b.n	8021304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 8021324:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8021328:	3601      	adds	r6, #1
 802132a:	a805      	add	r0, sp, #20
 802132c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8021330:	b2b6      	uxth	r6, r6
 8021332:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8021336:	f7ff fee7 	bl	8021108 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 802133a:	e7de      	b.n	80212fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 802133c:	4e5b      	ldr	r6, [pc, #364]	; (80214ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 802133e:	6833      	ldr	r3, [r6, #0]
 8021340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021344:	2b01      	cmp	r3, #1
 8021346:	f040 8094 	bne.w	8021472 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 802134a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 802134e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8021352:	f04f 0900 	mov.w	r9, #0
 8021356:	33aa      	adds	r3, #170	; 0xaa
 8021358:	42a8      	cmp	r0, r5
 802135a:	f103 0308 	add.w	r3, r3, #8
 802135e:	dd0a      	ble.n	8021376 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 8021360:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8021364:	3501      	adds	r5, #1
 8021366:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 802136a:	440a      	add	r2, r1
 802136c:	b212      	sxth	r2, r2
 802136e:	4591      	cmp	r9, r2
 8021370:	bfb8      	it	lt
 8021372:	4691      	movlt	r9, r2
 8021374:	e7f0      	b.n	8021358 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 8021376:	4b4e      	ldr	r3, [pc, #312]	; (80214b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 8021378:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80214b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 802137c:	881d      	ldrh	r5, [r3, #0]
 802137e:	2300      	movs	r3, #0
 8021380:	08ed      	lsrs	r5, r5, #3
 8021382:	f8ad 3004 	strh.w	r3, [sp, #4]
 8021386:	f8ad 3006 	strh.w	r3, [sp, #6]
 802138a:	2d01      	cmp	r5, #1
 802138c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021390:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021394:	bfb8      	it	lt
 8021396:	2501      	movlt	r5, #1
 8021398:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802139c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80213a0:	6830      	ldr	r0, [r6, #0]
 80213a2:	4413      	add	r3, r2
 80213a4:	b21b      	sxth	r3, r3
 80213a6:	4599      	cmp	r9, r3
 80213a8:	6803      	ldr	r3, [r0, #0]
 80213aa:	dd45      	ble.n	8021438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 80213ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80213b0:	4798      	blx	r3
 80213b2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80213b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80213ba:	4413      	add	r3, r2
 80213bc:	b21b      	sxth	r3, r3
 80213be:	18ea      	adds	r2, r5, r3
 80213c0:	4290      	cmp	r0, r2
 80213c2:	da6d      	bge.n	80214a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 80213c4:	4581      	cmp	r9, r0
 80213c6:	dd6b      	ble.n	80214a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 80213c8:	4298      	cmp	r0, r3
 80213ca:	da01      	bge.n	80213d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	dc69      	bgt.n	80214a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 80213d0:	6830      	ldr	r0, [r6, #0]
 80213d2:	2101      	movs	r1, #1
 80213d4:	6803      	ldr	r3, [r0, #0]
 80213d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80213d8:	4798      	blx	r3
 80213da:	e7dd      	b.n	8021398 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 80213dc:	4548      	cmp	r0, r9
 80213de:	bfa8      	it	ge
 80213e0:	4648      	movge	r0, r9
 80213e2:	f9b8 2000 	ldrsh.w	r2, [r8]
 80213e6:	2100      	movs	r1, #0
 80213e8:	1ac0      	subs	r0, r0, r3
 80213ea:	f8b7 a000 	ldrh.w	sl, [r7]
 80213ee:	f8ad 1004 	strh.w	r1, [sp, #4]
 80213f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80213f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80213fa:	f8ad 000a 	strh.w	r0, [sp, #10]
 80213fe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8021402:	459a      	cmp	sl, r3
 8021404:	dac8      	bge.n	8021398 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 8021406:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 802140a:	ab03      	add	r3, sp, #12
 802140c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8021410:	6851      	ldr	r1, [r2, #4]
 8021412:	c303      	stmia	r3!, {r0, r1}
 8021414:	a803      	add	r0, sp, #12
 8021416:	a901      	add	r1, sp, #4
 8021418:	f7ff fd6e 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 802141c:	a803      	add	r0, sp, #12
 802141e:	f7ff fda5 	bl	8020f6c <_ZNK8touchgfx4Rect7isEmptyEv>
 8021422:	b920      	cbnz	r0, 802142e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 8021424:	6823      	ldr	r3, [r4, #0]
 8021426:	a903      	add	r1, sp, #12
 8021428:	4620      	mov	r0, r4
 802142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802142c:	4798      	blx	r3
 802142e:	f10a 0a01 	add.w	sl, sl, #1
 8021432:	fa1f fa8a 	uxth.w	sl, sl
 8021436:	e7e2      	b.n	80213fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8021438:	69db      	ldr	r3, [r3, #28]
 802143a:	4798      	blx	r3
 802143c:	4b1d      	ldr	r3, [pc, #116]	; (80214b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 802143e:	781b      	ldrb	r3, [r3, #0]
 8021440:	2b00      	cmp	r3, #0
 8021442:	f43f af4d 	beq.w	80212e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8021446:	2300      	movs	r3, #0
 8021448:	883d      	ldrh	r5, [r7, #0]
 802144a:	34ea      	adds	r4, #234	; 0xea
 802144c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8021450:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021454:	429d      	cmp	r5, r3
 8021456:	f6bf af43 	bge.w	80212e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 802145a:	ab16      	add	r3, sp, #88	; 0x58
 802145c:	4620      	mov	r0, r4
 802145e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021462:	3501      	adds	r5, #1
 8021464:	3b44      	subs	r3, #68	; 0x44
 8021466:	b2ad      	uxth	r5, r5
 8021468:	e893 0006 	ldmia.w	r3, {r1, r2}
 802146c:	f7ff fe4c 	bl	8021108 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8021470:	e7ee      	b.n	8021450 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 8021472:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8021476:	429d      	cmp	r5, r3
 8021478:	dae0      	bge.n	802143c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 802147a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 802147e:	ab03      	add	r3, sp, #12
 8021480:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8021484:	6851      	ldr	r1, [r2, #4]
 8021486:	c303      	stmia	r3!, {r0, r1}
 8021488:	a803      	add	r0, sp, #12
 802148a:	f7ff fd6f 	bl	8020f6c <_ZNK8touchgfx4Rect7isEmptyEv>
 802148e:	b920      	cbnz	r0, 802149a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8021490:	6823      	ldr	r3, [r4, #0]
 8021492:	a903      	add	r1, sp, #12
 8021494:	4620      	mov	r0, r4
 8021496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021498:	4798      	blx	r3
 802149a:	3501      	adds	r5, #1
 802149c:	b2ad      	uxth	r5, r5
 802149e:	e7e8      	b.n	8021472 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 80214a0:	4298      	cmp	r0, r3
 80214a2:	da9b      	bge.n	80213dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 80214a4:	4648      	mov	r0, r9
 80214a6:	e79c      	b.n	80213e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 80214a8:	20000074 	.word	0x20000074
 80214ac:	2000bb14 	.word	0x2000bb14
 80214b0:	2000bb08 	.word	0x2000bb08
 80214b4:	2000bb10 	.word	0x2000bb10
 80214b8:	2000bb06 	.word	0x2000bb06

080214bc <_ZNK8touchgfx4Font8getGlyphEt>:
 80214bc:	b513      	push	{r0, r1, r4, lr}
 80214be:	2200      	movs	r2, #0
 80214c0:	ab02      	add	r3, sp, #8
 80214c2:	9201      	str	r2, [sp, #4]
 80214c4:	f803 2d05 	strb.w	r2, [r3, #-5]!
 80214c8:	6802      	ldr	r2, [r0, #0]
 80214ca:	6894      	ldr	r4, [r2, #8]
 80214cc:	aa01      	add	r2, sp, #4
 80214ce:	47a0      	blx	r4
 80214d0:	b002      	add	sp, #8
 80214d2:	bd10      	pop	{r4, pc}

080214d4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 80214d4:	8940      	ldrh	r0, [r0, #10]
 80214d6:	4770      	bx	lr

080214d8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 80214d8:	8980      	ldrh	r0, [r0, #12]
 80214da:	4770      	bx	lr

080214dc <_ZNK8touchgfx4Font13getFontHeightEv>:
 80214dc:	8880      	ldrh	r0, [r0, #4]
 80214de:	4770      	bx	lr

080214e0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80214e0:	7983      	ldrb	r3, [r0, #6]
 80214e2:	8880      	ldrh	r0, [r0, #4]
 80214e4:	4418      	add	r0, r3
 80214e6:	b280      	uxth	r0, r0
 80214e8:	4770      	bx	lr

080214ea <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 80214ea:	79c0      	ldrb	r0, [r0, #7]
 80214ec:	4770      	bx	lr

080214ee <_ZNK8touchgfx4Font12getCharWidthEt>:
 80214ee:	b508      	push	{r3, lr}
 80214f0:	6803      	ldr	r3, [r0, #0]
 80214f2:	68db      	ldr	r3, [r3, #12]
 80214f4:	4798      	blx	r3
 80214f6:	b140      	cbz	r0, 802150a <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 80214f8:	f990 200d 	ldrsb.w	r2, [r0, #13]
 80214fc:	7a83      	ldrb	r3, [r0, #10]
 80214fe:	2a00      	cmp	r2, #0
 8021500:	bfb4      	ite	lt
 8021502:	f44f 7080 	movlt.w	r0, #256	; 0x100
 8021506:	2000      	movge	r0, #0
 8021508:	4318      	orrs	r0, r3
 802150a:	bd08      	pop	{r3, pc}

0802150c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 802150c:	b40e      	push	{r1, r2, r3}
 802150e:	b533      	push	{r0, r1, r4, r5, lr}
 8021510:	ab05      	add	r3, sp, #20
 8021512:	f853 2b04 	ldr.w	r2, [r3], #4
 8021516:	9301      	str	r3, [sp, #4]
 8021518:	4b0a      	ldr	r3, [pc, #40]	; (8021544 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 802151a:	685c      	ldr	r4, [r3, #4]
 802151c:	f014 0f01 	tst.w	r4, #1
 8021520:	ea4f 0464 	mov.w	r4, r4, asr #1
 8021524:	bf1c      	itt	ne
 8021526:	681b      	ldrne	r3, [r3, #0]
 8021528:	5901      	ldrne	r1, [r0, r4]
 802152a:	4420      	add	r0, r4
 802152c:	bf0c      	ite	eq
 802152e:	681d      	ldreq	r5, [r3, #0]
 8021530:	58cd      	ldrne	r5, [r1, r3]
 8021532:	2100      	movs	r1, #0
 8021534:	9b01      	ldr	r3, [sp, #4]
 8021536:	47a8      	blx	r5
 8021538:	b002      	add	sp, #8
 802153a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802153e:	b003      	add	sp, #12
 8021540:	4770      	bx	lr
 8021542:	bf00      	nop
 8021544:	2000006c 	.word	0x2000006c

08021548 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8021548:	b40c      	push	{r2, r3}
 802154a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802154c:	ab06      	add	r3, sp, #24
 802154e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021552:	9301      	str	r3, [sp, #4]
 8021554:	4b09      	ldr	r3, [pc, #36]	; (802157c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8021556:	685c      	ldr	r4, [r3, #4]
 8021558:	f014 0f01 	tst.w	r4, #1
 802155c:	ea4f 0464 	mov.w	r4, r4, asr #1
 8021560:	bf1c      	itt	ne
 8021562:	681b      	ldrne	r3, [r3, #0]
 8021564:	5905      	ldrne	r5, [r0, r4]
 8021566:	4420      	add	r0, r4
 8021568:	bf0c      	ite	eq
 802156a:	681d      	ldreq	r5, [r3, #0]
 802156c:	58ed      	ldrne	r5, [r5, r3]
 802156e:	9b01      	ldr	r3, [sp, #4]
 8021570:	47a8      	blx	r5
 8021572:	b003      	add	sp, #12
 8021574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021578:	b002      	add	sp, #8
 802157a:	4770      	bx	lr
 802157c:	2000006c 	.word	0x2000006c

08021580 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8021580:	b40e      	push	{r1, r2, r3}
 8021582:	b510      	push	{r4, lr}
 8021584:	b089      	sub	sp, #36	; 0x24
 8021586:	ab0b      	add	r3, sp, #44	; 0x2c
 8021588:	a802      	add	r0, sp, #8
 802158a:	f853 4b04 	ldr.w	r4, [r3], #4
 802158e:	9301      	str	r3, [sp, #4]
 8021590:	f000 fe62 	bl	8022258 <_ZN8touchgfx12TextProviderC1Ev>
 8021594:	4621      	mov	r1, r4
 8021596:	9a01      	ldr	r2, [sp, #4]
 8021598:	a802      	add	r0, sp, #8
 802159a:	2401      	movs	r4, #1
 802159c:	f000 fe65 	bl	802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 80215a0:	a802      	add	r0, sp, #8
 80215a2:	f000 fe09 	bl	80221b8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80215a6:	b138      	cbz	r0, 80215b8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 80215a8:	280a      	cmp	r0, #10
 80215aa:	a802      	add	r0, sp, #8
 80215ac:	bf04      	itt	eq
 80215ae:	3401      	addeq	r4, #1
 80215b0:	b224      	sxtheq	r4, r4
 80215b2:	f000 fe01 	bl	80221b8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80215b6:	e7f6      	b.n	80215a6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 80215b8:	b2a0      	uxth	r0, r4
 80215ba:	b009      	add	sp, #36	; 0x24
 80215bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215c0:	b003      	add	sp, #12
 80215c2:	4770      	bx	lr

080215c4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80215c4:	b40e      	push	{r1, r2, r3}
 80215c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215c8:	b088      	sub	sp, #32
 80215ca:	4604      	mov	r4, r0
 80215cc:	2600      	movs	r6, #0
 80215ce:	ab0d      	add	r3, sp, #52	; 0x34
 80215d0:	a802      	add	r0, sp, #8
 80215d2:	f853 5b04 	ldr.w	r5, [r3], #4
 80215d6:	9301      	str	r3, [sp, #4]
 80215d8:	f000 fe3e 	bl	8022258 <_ZN8touchgfx12TextProviderC1Ev>
 80215dc:	4629      	mov	r1, r5
 80215de:	9a01      	ldr	r2, [sp, #4]
 80215e0:	a802      	add	r0, sp, #8
 80215e2:	4d1f      	ldr	r5, [pc, #124]	; (8021660 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 80215e4:	f000 fe41 	bl	802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 80215e8:	2100      	movs	r1, #0
 80215ea:	a802      	add	r0, sp, #8
 80215ec:	f000 fdee 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80215f0:	b378      	cbz	r0, 8021652 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80215f2:	280a      	cmp	r0, #10
 80215f4:	d028      	beq.n	8021648 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 80215f6:	6823      	ldr	r3, [r4, #0]
 80215f8:	4601      	mov	r1, r0
 80215fa:	4620      	mov	r0, r4
 80215fc:	68db      	ldr	r3, [r3, #12]
 80215fe:	4798      	blx	r3
 8021600:	b310      	cbz	r0, 8021648 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 8021602:	7b41      	ldrb	r1, [r0, #13]
 8021604:	f890 e008 	ldrb.w	lr, [r0, #8]
 8021608:	f011 0f40 	tst.w	r1, #64	; 0x40
 802160c:	88a3      	ldrh	r3, [r4, #4]
 802160e:	79c0      	ldrb	r0, [r0, #7]
 8021610:	bf14      	ite	ne
 8021612:	462f      	movne	r7, r5
 8021614:	2700      	moveq	r7, #0
 8021616:	f011 0f20 	tst.w	r1, #32
 802161a:	ea47 070e 	orr.w	r7, r7, lr
 802161e:	bf14      	ite	ne
 8021620:	f44f 7280 	movne.w	r2, #256	; 0x100
 8021624:	2200      	moveq	r2, #0
 8021626:	f011 0f10 	tst.w	r1, #16
 802162a:	ea42 0207 	orr.w	r2, r2, r7
 802162e:	eba3 0302 	sub.w	r3, r3, r2
 8021632:	bf14      	ite	ne
 8021634:	f44f 7280 	movne.w	r2, #256	; 0x100
 8021638:	2200      	moveq	r2, #0
 802163a:	4302      	orrs	r2, r0
 802163c:	fa12 f383 	uxtah	r3, r2, r3
 8021640:	b29b      	uxth	r3, r3
 8021642:	42b3      	cmp	r3, r6
 8021644:	bfc8      	it	gt
 8021646:	b21e      	sxthgt	r6, r3
 8021648:	2100      	movs	r1, #0
 802164a:	a802      	add	r0, sp, #8
 802164c:	f000 fdbe 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8021650:	e7ce      	b.n	80215f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 8021652:	b2b0      	uxth	r0, r6
 8021654:	b008      	add	sp, #32
 8021656:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802165a:	b003      	add	sp, #12
 802165c:	4770      	bx	lr
 802165e:	bf00      	nop
 8021660:	fffffe00 	.word	0xfffffe00

08021664 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8021664:	b40e      	push	{r1, r2, r3}
 8021666:	b530      	push	{r4, r5, lr}
 8021668:	b088      	sub	sp, #32
 802166a:	4605      	mov	r5, r0
 802166c:	ab0b      	add	r3, sp, #44	; 0x2c
 802166e:	a802      	add	r0, sp, #8
 8021670:	f853 4b04 	ldr.w	r4, [r3], #4
 8021674:	9301      	str	r3, [sp, #4]
 8021676:	f000 fdef 	bl	8022258 <_ZN8touchgfx12TextProviderC1Ev>
 802167a:	4621      	mov	r1, r4
 802167c:	9a01      	ldr	r2, [sp, #4]
 802167e:	a802      	add	r0, sp, #8
 8021680:	24ff      	movs	r4, #255	; 0xff
 8021682:	f000 fdf2 	bl	802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 8021686:	2100      	movs	r1, #0
 8021688:	a802      	add	r0, sp, #8
 802168a:	f000 fd9f 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 802168e:	b1a0      	cbz	r0, 80216ba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 8021690:	280a      	cmp	r0, #10
 8021692:	d00d      	beq.n	80216b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8021694:	682b      	ldr	r3, [r5, #0]
 8021696:	4601      	mov	r1, r0
 8021698:	4628      	mov	r0, r5
 802169a:	68db      	ldr	r3, [r3, #12]
 802169c:	4798      	blx	r3
 802169e:	b138      	cbz	r0, 80216b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80216a0:	792b      	ldrb	r3, [r5, #4]
 80216a2:	7a02      	ldrb	r2, [r0, #8]
 80216a4:	1a9b      	subs	r3, r3, r2
 80216a6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80216aa:	429c      	cmp	r4, r3
 80216ac:	bfa8      	it	ge
 80216ae:	461c      	movge	r4, r3
 80216b0:	2100      	movs	r1, #0
 80216b2:	a802      	add	r0, sp, #8
 80216b4:	f000 fd8a 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80216b8:	e7e9      	b.n	802168e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 80216ba:	4620      	mov	r0, r4
 80216bc:	b008      	add	sp, #32
 80216be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80216c2:	b003      	add	sp, #12
 80216c4:	4770      	bx	lr

080216c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80216c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216ca:	f04f 0a00 	mov.w	sl, #0
 80216ce:	b087      	sub	sp, #28
 80216d0:	4614      	mov	r4, r2
 80216d2:	461d      	mov	r5, r3
 80216d4:	4606      	mov	r6, r0
 80216d6:	4657      	mov	r7, sl
 80216d8:	4668      	mov	r0, sp
 80216da:	46d1      	mov	r9, sl
 80216dc:	4688      	mov	r8, r1
 80216de:	f000 fdbb 	bl	8022258 <_ZN8touchgfx12TextProviderC1Ev>
 80216e2:	462a      	mov	r2, r5
 80216e4:	4621      	mov	r1, r4
 80216e6:	4668      	mov	r0, sp
 80216e8:	f000 fdbf 	bl	802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 80216ec:	4641      	mov	r1, r8
 80216ee:	4668      	mov	r0, sp
 80216f0:	f000 fd6c 	bl	80221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80216f4:	4605      	mov	r5, r0
 80216f6:	b108      	cbz	r0, 80216fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 80216f8:	280a      	cmp	r0, #10
 80216fa:	d107      	bne.n	802170c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 80216fc:	45b9      	cmp	r9, r7
 80216fe:	dd00      	ble.n	8021702 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 8021700:	464f      	mov	r7, r9
 8021702:	f04f 0900 	mov.w	r9, #0
 8021706:	e01e      	b.n	8021746 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 8021708:	46aa      	mov	sl, r5
 802170a:	e7ef      	b.n	80216ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 802170c:	6833      	ldr	r3, [r6, #0]
 802170e:	4601      	mov	r1, r0
 8021710:	4630      	mov	r0, r6
 8021712:	68db      	ldr	r3, [r3, #12]
 8021714:	4798      	blx	r3
 8021716:	4602      	mov	r2, r0
 8021718:	2800      	cmp	r0, #0
 802171a:	d0f5      	beq.n	8021708 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 802171c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8021720:	4651      	mov	r1, sl
 8021722:	f890 b00a 	ldrb.w	fp, [r0, #10]
 8021726:	2b00      	cmp	r3, #0
 8021728:	6833      	ldr	r3, [r6, #0]
 802172a:	8885      	ldrh	r5, [r0, #4]
 802172c:	4630      	mov	r0, r6
 802172e:	bfb4      	ite	lt
 8021730:	f44f 7480 	movlt.w	r4, #256	; 0x100
 8021734:	2400      	movge	r4, #0
 8021736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021738:	ea44 040b 	orr.w	r4, r4, fp
 802173c:	4798      	blx	r3
 802173e:	4404      	add	r4, r0
 8021740:	444c      	add	r4, r9
 8021742:	fa1f f984 	uxth.w	r9, r4
 8021746:	2d00      	cmp	r5, #0
 8021748:	d1de      	bne.n	8021708 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 802174a:	4638      	mov	r0, r7
 802174c:	b007      	add	sp, #28
 802174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021752 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8021752:	b513      	push	{r0, r1, r4, lr}
 8021754:	1d01      	adds	r1, r0, #4
 8021756:	4603      	mov	r3, r0
 8021758:	c903      	ldmia	r1, {r0, r1}
 802175a:	e88d 0003 	stmia.w	sp, {r0, r1}
 802175e:	2100      	movs	r1, #0
 8021760:	4618      	mov	r0, r3
 8021762:	f8ad 1000 	strh.w	r1, [sp]
 8021766:	f8ad 1002 	strh.w	r1, [sp, #2]
 802176a:	6819      	ldr	r1, [r3, #0]
 802176c:	690c      	ldr	r4, [r1, #16]
 802176e:	4669      	mov	r1, sp
 8021770:	47a0      	blx	r4
 8021772:	b002      	add	sp, #8
 8021774:	bd10      	pop	{r4, pc}

08021776 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8021776:	b538      	push	{r3, r4, r5, lr}
 8021778:	680b      	ldr	r3, [r1, #0]
 802177a:	460c      	mov	r4, r1
 802177c:	4605      	mov	r5, r0
 802177e:	68db      	ldr	r3, [r3, #12]
 8021780:	4798      	blx	r3
 8021782:	6823      	ldr	r3, [r4, #0]
 8021784:	4620      	mov	r0, r4
 8021786:	4629      	mov	r1, r5
 8021788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802178a:	4798      	blx	r3
 802178c:	4628      	mov	r0, r5
 802178e:	bd38      	pop	{r3, r4, r5, pc}

08021790 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8021790:	b410      	push	{r4}
 8021792:	880a      	ldrh	r2, [r1, #0]
 8021794:	8884      	ldrh	r4, [r0, #4]
 8021796:	4422      	add	r2, r4
 8021798:	800a      	strh	r2, [r1, #0]
 802179a:	884a      	ldrh	r2, [r1, #2]
 802179c:	88c4      	ldrh	r4, [r0, #6]
 802179e:	4422      	add	r2, r4
 80217a0:	804a      	strh	r2, [r1, #2]
 80217a2:	6940      	ldr	r0, [r0, #20]
 80217a4:	b120      	cbz	r0, 80217b0 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80217a6:	6803      	ldr	r3, [r0, #0]
 80217a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80217ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217ae:	4718      	bx	r3
 80217b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80217b4:	4770      	bx	lr

080217b6 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80217b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80217b8:	460b      	mov	r3, r1
 80217ba:	b085      	sub	sp, #20
 80217bc:	4604      	mov	r4, r0
 80217be:	b901      	cbnz	r1, 80217c2 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80217c0:	b1f2      	cbz	r2, 8021800 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 80217c2:	1d27      	adds	r7, r4, #4
 80217c4:	ad02      	add	r5, sp, #8
 80217c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80217ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 80217ce:	88e1      	ldrh	r1, [r4, #6]
 80217d0:	4620      	mov	r0, r4
 80217d2:	440a      	add	r2, r1
 80217d4:	88a1      	ldrh	r1, [r4, #4]
 80217d6:	4419      	add	r1, r3
 80217d8:	6823      	ldr	r3, [r4, #0]
 80217da:	b212      	sxth	r2, r2
 80217dc:	b209      	sxth	r1, r1
 80217de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80217e0:	4798      	blx	r3
 80217e2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80217e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80217ea:	6960      	ldr	r0, [r4, #20]
 80217ec:	b150      	cbz	r0, 8021804 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 80217ee:	6803      	ldr	r3, [r0, #0]
 80217f0:	4669      	mov	r1, sp
 80217f2:	691b      	ldr	r3, [r3, #16]
 80217f4:	4798      	blx	r3
 80217f6:	6960      	ldr	r0, [r4, #20]
 80217f8:	6803      	ldr	r3, [r0, #0]
 80217fa:	691b      	ldr	r3, [r3, #16]
 80217fc:	4629      	mov	r1, r5
 80217fe:	4798      	blx	r3
 8021800:	b005      	add	sp, #20
 8021802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021804:	f7ff fc04 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 8021808:	6803      	ldr	r3, [r0, #0]
 802180a:	4669      	mov	r1, sp
 802180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802180e:	4798      	blx	r3
 8021810:	f7ff fbfe 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 8021814:	6803      	ldr	r3, [r0, #0]
 8021816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021818:	e7f0      	b.n	80217fc <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0802181a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 802181a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802181c:	8882      	ldrh	r2, [r0, #4]
 802181e:	4605      	mov	r5, r0
 8021820:	880b      	ldrh	r3, [r1, #0]
 8021822:	460c      	mov	r4, r1
 8021824:	4413      	add	r3, r2
 8021826:	800b      	strh	r3, [r1, #0]
 8021828:	884b      	ldrh	r3, [r1, #2]
 802182a:	88c2      	ldrh	r2, [r0, #6]
 802182c:	4413      	add	r3, r2
 802182e:	4602      	mov	r2, r0
 8021830:	804b      	strh	r3, [r1, #2]
 8021832:	466b      	mov	r3, sp
 8021834:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8021838:	6851      	ldr	r1, [r2, #4]
 802183a:	c303      	stmia	r3!, {r0, r1}
 802183c:	4621      	mov	r1, r4
 802183e:	4668      	mov	r0, sp
 8021840:	f7ff fb5a 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 8021844:	466b      	mov	r3, sp
 8021846:	cb03      	ldmia	r3!, {r0, r1}
 8021848:	6020      	str	r0, [r4, #0]
 802184a:	6061      	str	r1, [r4, #4]
 802184c:	6968      	ldr	r0, [r5, #20]
 802184e:	b128      	cbz	r0, 802185c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8021850:	6803      	ldr	r3, [r0, #0]
 8021852:	691b      	ldr	r3, [r3, #16]
 8021854:	4621      	mov	r1, r4
 8021856:	4798      	blx	r3
 8021858:	b003      	add	sp, #12
 802185a:	bd30      	pop	{r4, r5, pc}
 802185c:	f7ff fbd8 	bl	8021010 <_ZN8touchgfx11Application11getInstanceEv>
 8021860:	6803      	ldr	r3, [r0, #0]
 8021862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021864:	e7f6      	b.n	8021854 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08021866 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8021866:	b570      	push	{r4, r5, r6, lr}
 8021868:	8882      	ldrh	r2, [r0, #4]
 802186a:	460c      	mov	r4, r1
 802186c:	880b      	ldrh	r3, [r1, #0]
 802186e:	4605      	mov	r5, r0
 8021870:	4413      	add	r3, r2
 8021872:	800b      	strh	r3, [r1, #0]
 8021874:	884b      	ldrh	r3, [r1, #2]
 8021876:	88c2      	ldrh	r2, [r0, #6]
 8021878:	4413      	add	r3, r2
 802187a:	804b      	strh	r3, [r1, #2]
 802187c:	1d01      	adds	r1, r0, #4
 802187e:	4620      	mov	r0, r4
 8021880:	f7ff fb3a 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 8021884:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8021888:	b163      	cbz	r3, 80218a4 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 802188a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802188e:	b933      	cbnz	r3, 802189e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 8021890:	bd70      	pop	{r4, r5, r6, pc}
 8021892:	6803      	ldr	r3, [r0, #0]
 8021894:	4621      	mov	r1, r4
 8021896:	6a1b      	ldr	r3, [r3, #32]
 8021898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802189c:	4718      	bx	r3
 802189e:	6968      	ldr	r0, [r5, #20]
 80218a0:	2800      	cmp	r0, #0
 80218a2:	d1f6      	bne.n	8021892 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 80218a4:	bd70      	pop	{r4, r5, r6, pc}

080218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80218a6:	b510      	push	{r4, lr}
 80218a8:	2300      	movs	r3, #0
 80218aa:	4604      	mov	r4, r0
 80218ac:	4608      	mov	r0, r1
 80218ae:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80218b2:	8023      	strh	r3, [r4, #0]
 80218b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80218b8:	8063      	strh	r3, [r4, #2]
 80218ba:	6803      	ldr	r3, [r0, #0]
 80218bc:	80a1      	strh	r1, [r4, #4]
 80218be:	4621      	mov	r1, r4
 80218c0:	80e2      	strh	r2, [r4, #6]
 80218c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80218c4:	4798      	blx	r3
 80218c6:	4620      	mov	r0, r4
 80218c8:	bd10      	pop	{r4, pc}

080218ca <_ZN8touchgfx6memsetEPvhm>:
 80218ca:	4402      	add	r2, r0
 80218cc:	4290      	cmp	r0, r2
 80218ce:	d002      	beq.n	80218d6 <_ZN8touchgfx6memsetEPvhm+0xc>
 80218d0:	f800 1b01 	strb.w	r1, [r0], #1
 80218d4:	e7fa      	b.n	80218cc <_ZN8touchgfx6memsetEPvhm+0x2>
 80218d6:	4770      	bx	lr

080218d8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 80218d8:	b538      	push	{r3, r4, r5, lr}
 80218da:	4605      	mov	r5, r0
 80218dc:	f001 fca0 	bl	8023220 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80218e0:	4604      	mov	r4, r0
 80218e2:	4628      	mov	r0, r5
 80218e4:	f001 fc0e 	bl	8023104 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80218e8:	2800      	cmp	r0, #0
 80218ea:	bf14      	ite	ne
 80218ec:	2002      	movne	r0, #2
 80218ee:	2000      	moveq	r0, #0
 80218f0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80218f4:	b280      	uxth	r0, r0
 80218f6:	bd38      	pop	{r3, r4, r5, pc}

080218f8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 80218f8:	b538      	push	{r3, r4, r5, lr}
 80218fa:	4605      	mov	r5, r0
 80218fc:	f001 fc90 	bl	8023220 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021900:	4604      	mov	r4, r0
 8021902:	4628      	mov	r0, r5
 8021904:	f001 fbfe 	bl	8023104 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021908:	2800      	cmp	r0, #0
 802190a:	bf14      	ite	ne
 802190c:	2002      	movne	r0, #2
 802190e:	2000      	moveq	r0, #0
 8021910:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8021914:	f040 0001 	orr.w	r0, r0, #1
 8021918:	b280      	uxth	r0, r0
 802191a:	bd38      	pop	{r3, r4, r5, pc}

0802191c <_ZN8touchgfx3clzEl>:
 802191c:	b1e8      	cbz	r0, 802195a <_ZN8touchgfx3clzEl+0x3e>
 802191e:	2800      	cmp	r0, #0
 8021920:	bfb8      	it	lt
 8021922:	4240      	neglt	r0, r0
 8021924:	0c03      	lsrs	r3, r0, #16
 8021926:	041b      	lsls	r3, r3, #16
 8021928:	b9ab      	cbnz	r3, 8021956 <_ZN8touchgfx3clzEl+0x3a>
 802192a:	0400      	lsls	r0, r0, #16
 802192c:	2310      	movs	r3, #16
 802192e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021932:	bf04      	itt	eq
 8021934:	0200      	lsleq	r0, r0, #8
 8021936:	3308      	addeq	r3, #8
 8021938:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802193c:	bf04      	itt	eq
 802193e:	0100      	lsleq	r0, r0, #4
 8021940:	3304      	addeq	r3, #4
 8021942:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021946:	bf04      	itt	eq
 8021948:	0080      	lsleq	r0, r0, #2
 802194a:	3302      	addeq	r3, #2
 802194c:	2800      	cmp	r0, #0
 802194e:	bfa8      	it	ge
 8021950:	3301      	addge	r3, #1
 8021952:	1e58      	subs	r0, r3, #1
 8021954:	4770      	bx	lr
 8021956:	2300      	movs	r3, #0
 8021958:	e7e9      	b.n	802192e <_ZN8touchgfx3clzEl+0x12>
 802195a:	201f      	movs	r0, #31
 802195c:	4770      	bx	lr

0802195e <_ZN8touchgfx6muldivElllRl>:
 802195e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021962:	4604      	mov	r4, r0
 8021964:	4698      	mov	r8, r3
 8021966:	2601      	movs	r6, #1
 8021968:	f7ff ffd8 	bl	802191c <_ZN8touchgfx3clzEl>
 802196c:	2c00      	cmp	r4, #0
 802196e:	fa04 f500 	lsl.w	r5, r4, r0
 8021972:	fa06 f600 	lsl.w	r6, r6, r0
 8021976:	bfba      	itte	lt
 8021978:	f04f 37ff 	movlt.w	r7, #4294967295
 802197c:	4264      	neglt	r4, r4
 802197e:	2701      	movge	r7, #1
 8021980:	2900      	cmp	r1, #0
 8021982:	f106 36ff 	add.w	r6, r6, #4294967295
 8021986:	bfbc      	itt	lt
 8021988:	4249      	neglt	r1, r1
 802198a:	427f      	neglt	r7, r7
 802198c:	2a00      	cmp	r2, #0
 802198e:	fa41 fe00 	asr.w	lr, r1, r0
 8021992:	ea01 0106 	and.w	r1, r1, r6
 8021996:	bfb8      	it	lt
 8021998:	427f      	neglt	r7, r7
 802199a:	fb04 f401 	mul.w	r4, r4, r1
 802199e:	fb95 f3f2 	sdiv	r3, r5, r2
 80219a2:	fb02 5513 	mls	r5, r2, r3, r5
 80219a6:	bfb8      	it	lt
 80219a8:	4252      	neglt	r2, r2
 80219aa:	fb94 f0f2 	sdiv	r0, r4, r2
 80219ae:	fb02 4410 	mls	r4, r2, r0, r4
 80219b2:	fb0e 4405 	mla	r4, lr, r5, r4
 80219b6:	fb94 f1f2 	sdiv	r1, r4, r2
 80219ba:	4408      	add	r0, r1
 80219bc:	fb02 4211 	mls	r2, r2, r1, r4
 80219c0:	fb0e 0003 	mla	r0, lr, r3, r0
 80219c4:	f8c8 2000 	str.w	r2, [r8]
 80219c8:	4378      	muls	r0, r7
 80219ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080219ce <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80219ce:	2002      	movs	r0, #2
 80219d0:	4770      	bx	lr

080219d2 <_ZN8touchgfx6ScreenD1Ev>:
 80219d2:	4770      	bx	lr

080219d4 <_ZN8touchgfx6Screen11setupScreenEv>:
 80219d4:	4770      	bx	lr

080219d6 <_ZN8touchgfx12GestureEventD1Ev>:
 80219d6:	4770      	bx	lr

080219d8 <_ZN8touchgfx12GestureEventD0Ev>:
 80219d8:	b510      	push	{r4, lr}
 80219da:	4604      	mov	r4, r0
 80219dc:	210c      	movs	r1, #12
 80219de:	f003 fbf9 	bl	80251d4 <_ZdlPvj>
 80219e2:	4620      	mov	r0, r4
 80219e4:	bd10      	pop	{r4, pc}

080219e6 <_ZN8touchgfx6ScreenD0Ev>:
 80219e6:	b510      	push	{r4, lr}
 80219e8:	4604      	mov	r4, r0
 80219ea:	213c      	movs	r1, #60	; 0x3c
 80219ec:	f003 fbf2 	bl	80251d4 <_ZdlPvj>
 80219f0:	4620      	mov	r0, r4
 80219f2:	bd10      	pop	{r4, pc}

080219f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80219f4:	b530      	push	{r4, r5, lr}
 80219f6:	460d      	mov	r5, r1
 80219f8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80219fa:	b087      	sub	sp, #28
 80219fc:	4604      	mov	r4, r0
 80219fe:	b301      	cbz	r1, 8021a42 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8021a00:	a801      	add	r0, sp, #4
 8021a02:	f7ff ff50 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8021a06:	892a      	ldrh	r2, [r5, #8]
 8021a08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8021a0c:	7928      	ldrb	r0, [r5, #4]
 8021a0e:	1ad2      	subs	r2, r2, r3
 8021a10:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8021a12:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8021a16:	441a      	add	r2, r3
 8021a18:	896b      	ldrh	r3, [r5, #10]
 8021a1a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8021a1e:	f88d 0010 	strb.w	r0, [sp, #16]
 8021a22:	1b5b      	subs	r3, r3, r5
 8021a24:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8021a26:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8021a28:	442b      	add	r3, r5
 8021a2a:	4d07      	ldr	r5, [pc, #28]	; (8021a48 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8021a2c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8021a30:	a903      	add	r1, sp, #12
 8021a32:	9503      	str	r5, [sp, #12]
 8021a34:	f8ad 2014 	strh.w	r2, [sp, #20]
 8021a38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021a3c:	6803      	ldr	r3, [r0, #0]
 8021a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021a40:	4798      	blx	r3
 8021a42:	b007      	add	sp, #28
 8021a44:	bd30      	pop	{r4, r5, pc}
 8021a46:	bf00      	nop
 8021a48:	08028a38 	.word	0x08028a38

08021a4c <_ZNK8touchgfx4Rect9intersectEss>:
 8021a4c:	b510      	push	{r4, lr}
 8021a4e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8021a52:	428b      	cmp	r3, r1
 8021a54:	dc10      	bgt.n	8021a78 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8021a56:	8884      	ldrh	r4, [r0, #4]
 8021a58:	4423      	add	r3, r4
 8021a5a:	b21b      	sxth	r3, r3
 8021a5c:	4299      	cmp	r1, r3
 8021a5e:	da0b      	bge.n	8021a78 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8021a60:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021a64:	4293      	cmp	r3, r2
 8021a66:	dc07      	bgt.n	8021a78 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8021a68:	88c0      	ldrh	r0, [r0, #6]
 8021a6a:	4418      	add	r0, r3
 8021a6c:	b200      	sxth	r0, r0
 8021a6e:	4282      	cmp	r2, r0
 8021a70:	bfac      	ite	ge
 8021a72:	2000      	movge	r0, #0
 8021a74:	2001      	movlt	r0, #1
 8021a76:	bd10      	pop	{r4, pc}
 8021a78:	2000      	movs	r0, #0
 8021a7a:	bd10      	pop	{r4, pc}

08021a7c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8021a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021a7e:	460c      	mov	r4, r1
 8021a80:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8021a82:	b089      	sub	sp, #36	; 0x24
 8021a84:	4605      	mov	r5, r0
 8021a86:	2900      	cmp	r1, #0
 8021a88:	d053      	beq.n	8021b32 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 8021a8a:	4668      	mov	r0, sp
 8021a8c:	f7ff ff0b 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8021a90:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8021a92:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8021a94:	4668      	mov	r0, sp
 8021a96:	8922      	ldrh	r2, [r4, #8]
 8021a98:	88e1      	ldrh	r1, [r4, #6]
 8021a9a:	443a      	add	r2, r7
 8021a9c:	4431      	add	r1, r6
 8021a9e:	b212      	sxth	r2, r2
 8021aa0:	b209      	sxth	r1, r1
 8021aa2:	f7ff ffd3 	bl	8021a4c <_ZNK8touchgfx4Rect9intersectEss>
 8021aa6:	b1c8      	cbz	r0, 8021adc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 8021aa8:	89a2      	ldrh	r2, [r4, #12]
 8021aaa:	4668      	mov	r0, sp
 8021aac:	8961      	ldrh	r1, [r4, #10]
 8021aae:	443a      	add	r2, r7
 8021ab0:	4431      	add	r1, r6
 8021ab2:	b212      	sxth	r2, r2
 8021ab4:	b209      	sxth	r1, r1
 8021ab6:	f7ff ffc9 	bl	8021a4c <_ZNK8touchgfx4Rect9intersectEss>
 8021aba:	b978      	cbnz	r0, 8021adc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 8021abc:	4b1e      	ldr	r3, [pc, #120]	; (8021b38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8021abe:	a904      	add	r1, sp, #16
 8021ac0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8021ac4:	9304      	str	r3, [sp, #16]
 8021ac6:	2302      	movs	r3, #2
 8021ac8:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021acc:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021ad0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8021ad2:	f88d 3014 	strb.w	r3, [sp, #20]
 8021ad6:	6803      	ldr	r3, [r0, #0]
 8021ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021ada:	4798      	blx	r3
 8021adc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8021ade:	a802      	add	r0, sp, #8
 8021ae0:	f7ff fee1 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8021ae4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8021ae8:	88e0      	ldrh	r0, [r4, #6]
 8021aea:	8961      	ldrh	r1, [r4, #10]
 8021aec:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 8021af0:	1a80      	subs	r0, r0, r2
 8021af2:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 8021af6:	1a89      	subs	r1, r1, r2
 8021af8:	8923      	ldrh	r3, [r4, #8]
 8021afa:	4470      	add	r0, lr
 8021afc:	89a2      	ldrh	r2, [r4, #12]
 8021afe:	4471      	add	r1, lr
 8021b00:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8021b02:	eba3 030c 	sub.w	r3, r3, ip
 8021b06:	eba2 020c 	sub.w	r2, r2, ip
 8021b0a:	f8ad 0016 	strh.w	r0, [sp, #22]
 8021b0e:	7927      	ldrb	r7, [r4, #4]
 8021b10:	4433      	add	r3, r6
 8021b12:	4432      	add	r2, r6
 8021b14:	4c09      	ldr	r4, [pc, #36]	; (8021b3c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8021b16:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8021b18:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021b1c:	a904      	add	r1, sp, #16
 8021b1e:	9404      	str	r4, [sp, #16]
 8021b20:	f88d 7014 	strb.w	r7, [sp, #20]
 8021b24:	f8ad 3018 	strh.w	r3, [sp, #24]
 8021b28:	f8ad 201c 	strh.w	r2, [sp, #28]
 8021b2c:	6803      	ldr	r3, [r0, #0]
 8021b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021b30:	4798      	blx	r3
 8021b32:	b009      	add	sp, #36	; 0x24
 8021b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b36:	bf00      	nop
 8021b38:	080264e0 	.word	0x080264e0
 8021b3c:	080264f4 	.word	0x080264f4

08021b40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8021b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b44:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8021b46:	b0a1      	sub	sp, #132	; 0x84
 8021b48:	4604      	mov	r4, r0
 8021b4a:	460d      	mov	r5, r1
 8021b4c:	790b      	ldrb	r3, [r1, #4]
 8021b4e:	b16a      	cbz	r2, 8021b6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 8021b50:	b963      	cbnz	r3, 8021b6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 8021b52:	b021      	add	sp, #132	; 0x84
 8021b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b58:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8021b5c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8021b60:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8021b64:	1d20      	adds	r0, r4, #4
 8021b66:	f7ed f985 	bl	800ee74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8021b6a:	e0a2      	b.n	8021cb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	f040 80a0 	bne.w	8021cb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 8021b72:	4a66      	ldr	r2, [pc, #408]	; (8021d0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 8021b74:	6812      	ldr	r2, [r2, #0]
 8021b76:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 8021b7a:	86a3      	strh	r3, [r4, #52]	; 0x34
 8021b7c:	f1bb 0f03 	cmp.w	fp, #3
 8021b80:	86e3      	strh	r3, [r4, #54]	; 0x36
 8021b82:	dde9      	ble.n	8021b58 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 8021b84:	f1bb 0f0c 	cmp.w	fp, #12
 8021b88:	6323      	str	r3, [r4, #48]	; 0x30
 8021b8a:	f04f 0303 	mov.w	r3, #3
 8021b8e:	f04f 0600 	mov.w	r6, #0
 8021b92:	bfd8      	it	le
 8021b94:	f10b 32ff 	addle.w	r2, fp, #4294967295
 8021b98:	495d      	ldr	r1, [pc, #372]	; (8021d10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 8021b9a:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 8021b9e:	f04f 0a01 	mov.w	sl, #1
 8021ba2:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 8021ba6:	bfd8      	it	le
 8021ba8:	fb92 f3f3 	sdivle	r3, r2, r3
 8021bac:	9300      	str	r3, [sp, #0]
 8021bae:	4b59      	ldr	r3, [pc, #356]	; (8021d14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 8021bb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021bb4:	4b58      	ldr	r3, [pc, #352]	; (8021d18 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 8021bb6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8021bba:	2248      	movs	r2, #72	; 0x48
 8021bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021bc0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8021bc4:	ab0e      	add	r3, sp, #56	; 0x38
 8021bc6:	4618      	mov	r0, r3
 8021bc8:	f003 fb90 	bl	80252ec <memcpy>
 8021bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8021bd0:	f8cd b008 	str.w	fp, [sp, #8]
 8021bd4:	9206      	str	r2, [sp, #24]
 8021bd6:	9007      	str	r0, [sp, #28]
 8021bd8:	9a00      	ldr	r2, [sp, #0]
 8021bda:	9b02      	ldr	r3, [sp, #8]
 8021bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8021be0:	f10a 32ff 	add.w	r2, sl, #4294967295
 8021be4:	b29b      	uxth	r3, r3
 8021be6:	9201      	str	r2, [sp, #4]
 8021be8:	9a07      	ldr	r2, [sp, #28]
 8021bea:	9303      	str	r3, [sp, #12]
 8021bec:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 8021bf0:	3f04      	subs	r7, #4
 8021bf2:	2300      	movs	r3, #0
 8021bf4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8021bf8:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 8021bfc:	a80a      	add	r0, sp, #40	; 0x28
 8021bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8021c00:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8021c04:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8021c08:	fb13 f302 	smulbb	r3, r3, r2
 8021c0c:	b29b      	uxth	r3, r3
 8021c0e:	9304      	str	r3, [sp, #16]
 8021c10:	683b      	ldr	r3, [r7, #0]
 8021c12:	fb13 f302 	smulbb	r3, r3, r2
 8021c16:	b29b      	uxth	r3, r3
 8021c18:	9305      	str	r3, [sp, #20]
 8021c1a:	9b04      	ldr	r3, [sp, #16]
 8021c1c:	4498      	add	r8, r3
 8021c1e:	9b05      	ldr	r3, [sp, #20]
 8021c20:	4499      	add	r9, r3
 8021c22:	fa0f f888 	sxth.w	r8, r8
 8021c26:	fa0f f989 	sxth.w	r9, r9
 8021c2a:	4641      	mov	r1, r8
 8021c2c:	464a      	mov	r2, r9
 8021c2e:	f7ff ff0d 	bl	8021a4c <_ZNK8touchgfx4Rect9intersectEss>
 8021c32:	b380      	cbz	r0, 8021c96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 8021c34:	4641      	mov	r1, r8
 8021c36:	ab09      	add	r3, sp, #36	; 0x24
 8021c38:	464a      	mov	r2, r9
 8021c3a:	1d20      	adds	r0, r4, #4
 8021c3c:	f7ed f91a 	bl	800ee74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8021c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021c42:	b341      	cbz	r1, 8021c96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 8021c44:	42b1      	cmp	r1, r6
 8021c46:	d026      	beq.n	8021c96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 8021c48:	a80c      	add	r0, sp, #48	; 0x30
 8021c4a:	f7ff fe2c 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8021c4e:	2002      	movs	r0, #2
 8021c50:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8021c54:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021c58:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8021c5c:	fb92 f2f0 	sdiv	r2, r2, r0
 8021c60:	440a      	add	r2, r1
 8021c62:	1a99      	subs	r1, r3, r2
 8021c64:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8021c68:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8021c6c:	fb93 f3f0 	sdiv	r3, r3, r0
 8021c70:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8021c74:	4403      	add	r3, r0
 8021c76:	1ad3      	subs	r3, r2, r3
 8021c78:	9a06      	ldr	r2, [sp, #24]
 8021c7a:	435b      	muls	r3, r3
 8021c7c:	fb01 3301 	mla	r3, r1, r1, r3
 8021c80:	4293      	cmp	r3, r2
 8021c82:	d208      	bcs.n	8021c96 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 8021c84:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021c88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021c8a:	86a2      	strh	r2, [r4, #52]	; 0x34
 8021c8c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8021c90:	6326      	str	r6, [r4, #48]	; 0x30
 8021c92:	86e2      	strh	r2, [r4, #54]	; 0x36
 8021c94:	9306      	str	r3, [sp, #24]
 8021c96:	9b01      	ldr	r3, [sp, #4]
 8021c98:	3710      	adds	r7, #16
 8021c9a:	3302      	adds	r3, #2
 8021c9c:	2b08      	cmp	r3, #8
 8021c9e:	9301      	str	r3, [sp, #4]
 8021ca0:	dda7      	ble.n	8021bf2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 8021ca2:	9b02      	ldr	r3, [sp, #8]
 8021ca4:	f10a 0a01 	add.w	sl, sl, #1
 8021ca8:	445b      	add	r3, fp
 8021caa:	9302      	str	r3, [sp, #8]
 8021cac:	9b00      	ldr	r3, [sp, #0]
 8021cae:	4553      	cmp	r3, sl
 8021cb0:	da92      	bge.n	8021bd8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 8021cb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8021cb4:	2900      	cmp	r1, #0
 8021cb6:	f43f af4c 	beq.w	8021b52 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 8021cba:	a80c      	add	r0, sp, #48	; 0x30
 8021cbc:	2600      	movs	r6, #0
 8021cbe:	f7ff fdf2 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8021cc2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8021cc6:	88ea      	ldrh	r2, [r5, #6]
 8021cc8:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8021ccc:	1ad2      	subs	r2, r2, r3
 8021cce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8021cd0:	7929      	ldrb	r1, [r5, #4]
 8021cd2:	441a      	add	r2, r3
 8021cd4:	892b      	ldrh	r3, [r5, #8]
 8021cd6:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8021cda:	a90e      	add	r1, sp, #56	; 0x38
 8021cdc:	1a1b      	subs	r3, r3, r0
 8021cde:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8021ce0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8021ce4:	4403      	add	r3, r0
 8021ce6:	480d      	ldr	r0, [pc, #52]	; (8021d1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 8021ce8:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8021cec:	900e      	str	r0, [sp, #56]	; 0x38
 8021cee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8021cf0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8021cf4:	6803      	ldr	r3, [r0, #0]
 8021cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cf8:	4798      	blx	r3
 8021cfa:	792b      	ldrb	r3, [r5, #4]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	f43f af28 	beq.w	8021b52 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 8021d02:	6326      	str	r6, [r4, #48]	; 0x30
 8021d04:	86a6      	strh	r6, [r4, #52]	; 0x34
 8021d06:	86e6      	strh	r6, [r4, #54]	; 0x36
 8021d08:	e723      	b.n	8021b52 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 8021d0a:	bf00      	nop
 8021d0c:	2000bb14 	.word	0x2000bb14
 8021d10:	080262cc 	.word	0x080262cc
 8021d14:	2000bb06 	.word	0x2000bb06
 8021d18:	2000bb08 	.word	0x2000bb08
 8021d1c:	080264e0 	.word	0x080264e0

08021d20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8021d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021d22:	4604      	mov	r4, r0
 8021d24:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8021d28:	3201      	adds	r2, #1
 8021d2a:	d114      	bne.n	8021d56 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 8021d2c:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8021d30:	2200      	movs	r2, #0
 8021d32:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8021d36:	6803      	ldr	r3, [r0, #0]
 8021d38:	f8ad 1006 	strh.w	r1, [sp, #6]
 8021d3c:	4669      	mov	r1, sp
 8021d3e:	f8ad 2000 	strh.w	r2, [sp]
 8021d42:	f8ad 2002 	strh.w	r2, [sp, #2]
 8021d46:	f8ad 5004 	strh.w	r5, [sp, #4]
 8021d4a:	6a1b      	ldr	r3, [r3, #32]
 8021d4c:	4798      	blx	r3
 8021d4e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8021d52:	e884 0003 	stmia.w	r4, {r0, r1}
 8021d56:	4620      	mov	r0, r4
 8021d58:	b003      	add	sp, #12
 8021d5a:	bd30      	pop	{r4, r5, pc}

08021d5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8021d5c:	b513      	push	{r0, r1, r4, lr}
 8021d5e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8021d62:	4604      	mov	r4, r0
 8021d64:	3301      	adds	r3, #1
 8021d66:	d109      	bne.n	8021d7c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8021d68:	4601      	mov	r1, r0
 8021d6a:	4668      	mov	r0, sp
 8021d6c:	f7ff fd9b 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8021d70:	f8bd 3000 	ldrh.w	r3, [sp]
 8021d74:	8423      	strh	r3, [r4, #32]
 8021d76:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8021d7a:	8463      	strh	r3, [r4, #34]	; 0x22
 8021d7c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8021d80:	b002      	add	sp, #8
 8021d82:	bd10      	pop	{r4, pc}

08021d84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8021d84:	b513      	push	{r0, r1, r4, lr}
 8021d86:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8021d8a:	4604      	mov	r4, r0
 8021d8c:	3301      	adds	r3, #1
 8021d8e:	d109      	bne.n	8021da4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8021d90:	4601      	mov	r1, r0
 8021d92:	4668      	mov	r0, sp
 8021d94:	f7ff fd87 	bl	80218a6 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8021d98:	f8bd 3000 	ldrh.w	r3, [sp]
 8021d9c:	8423      	strh	r3, [r4, #32]
 8021d9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8021da2:	8463      	strh	r3, [r4, #34]	; 0x22
 8021da4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8021da8:	b002      	add	sp, #8
 8021daa:	bd10      	pop	{r4, pc}

08021dac <_ZN8touchgfx6ScreenC1Ev>:
 8021dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021dae:	4605      	mov	r5, r0
 8021db0:	4b18      	ldr	r3, [pc, #96]	; (8021e14 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8021db2:	2200      	movs	r2, #0
 8021db4:	4918      	ldr	r1, [pc, #96]	; (8021e18 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8021db6:	f845 3b04 	str.w	r3, [r5], #4
 8021dba:	2301      	movs	r3, #1
 8021dbc:	8102      	strh	r2, [r0, #8]
 8021dbe:	4604      	mov	r4, r0
 8021dc0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8021dc4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8021dc8:	4b14      	ldr	r3, [pc, #80]	; (8021e1c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8021dca:	8142      	strh	r2, [r0, #10]
 8021dcc:	f9b3 7000 	ldrsh.w	r7, [r3]
 8021dd0:	4b13      	ldr	r3, [pc, #76]	; (8021e20 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 8021dd2:	8182      	strh	r2, [r0, #12]
 8021dd4:	81c2      	strh	r2, [r0, #14]
 8021dd6:	8202      	strh	r2, [r0, #16]
 8021dd8:	8242      	strh	r2, [r0, #18]
 8021dda:	8282      	strh	r2, [r0, #20]
 8021ddc:	82c2      	strh	r2, [r0, #22]
 8021dde:	6182      	str	r2, [r0, #24]
 8021de0:	61c2      	str	r2, [r0, #28]
 8021de2:	6202      	str	r2, [r0, #32]
 8021de4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8021de8:	62c2      	str	r2, [r0, #44]	; 0x2c
 8021dea:	6302      	str	r2, [r0, #48]	; 0x30
 8021dec:	8682      	strh	r2, [r0, #52]	; 0x34
 8021dee:	86c2      	strh	r2, [r0, #54]	; 0x36
 8021df0:	f9b3 6000 	ldrsh.w	r6, [r3]
 8021df4:	6041      	str	r1, [r0, #4]
 8021df6:	4611      	mov	r1, r2
 8021df8:	4628      	mov	r0, r5
 8021dfa:	f7ec ff5d 	bl	800ecb8 <_ZN8touchgfx8Drawable5setXYEss>
 8021dfe:	4639      	mov	r1, r7
 8021e00:	4628      	mov	r0, r5
 8021e02:	f7ec ff65 	bl	800ecd0 <_ZN8touchgfx8Drawable8setWidthEs>
 8021e06:	4628      	mov	r0, r5
 8021e08:	4631      	mov	r1, r6
 8021e0a:	f7ec ff63 	bl	800ecd4 <_ZN8touchgfx8Drawable9setHeightEs>
 8021e0e:	4620      	mov	r0, r4
 8021e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e12:	bf00      	nop
 8021e14:	08028a4c 	.word	0x08028a4c
 8021e18:	08026414 	.word	0x08026414
 8021e1c:	2000bb06 	.word	0x2000bb06
 8021e20:	2000bb08 	.word	0x2000bb08

08021e24 <_ZN8touchgfx6Screen4drawEv>:
 8021e24:	4b0b      	ldr	r3, [pc, #44]	; (8021e54 <_ZN8touchgfx6Screen4drawEv+0x30>)
 8021e26:	b507      	push	{r0, r1, r2, lr}
 8021e28:	f9b3 1000 	ldrsh.w	r1, [r3]
 8021e2c:	4b0a      	ldr	r3, [pc, #40]	; (8021e58 <_ZN8touchgfx6Screen4drawEv+0x34>)
 8021e2e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8021e32:	4669      	mov	r1, sp
 8021e34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021e38:	2300      	movs	r3, #0
 8021e3a:	f8ad 3000 	strh.w	r3, [sp]
 8021e3e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8021e42:	6803      	ldr	r3, [r0, #0]
 8021e44:	f8ad 2006 	strh.w	r2, [sp, #6]
 8021e48:	689b      	ldr	r3, [r3, #8]
 8021e4a:	4798      	blx	r3
 8021e4c:	b003      	add	sp, #12
 8021e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8021e52:	bf00      	nop
 8021e54:	2000bb06 	.word	0x2000bb06
 8021e58:	2000bb08 	.word	0x2000bb08

08021e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8021e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e60:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8021e64:	b087      	sub	sp, #28
 8021e66:	4681      	mov	r9, r0
 8021e68:	460c      	mov	r4, r1
 8021e6a:	4615      	mov	r5, r2
 8021e6c:	b16b      	cbz	r3, 8021e8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8021e6e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8021e72:	b153      	cbz	r3, 8021e8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8021e74:	4628      	mov	r0, r5
 8021e76:	f7ff ff53 	bl	8021d20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8021e7a:	4621      	mov	r1, r4
 8021e7c:	f7fe fff8 	bl	8020e70 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8021e80:	69eb      	ldr	r3, [r5, #28]
 8021e82:	b928      	cbnz	r0, 8021e90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8021e84:	461d      	mov	r5, r3
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	d1f4      	bne.n	8021e74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8021e8a:	b007      	add	sp, #28
 8021e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e90:	ae02      	add	r6, sp, #8
 8021e92:	2b00      	cmp	r3, #0
 8021e94:	d04a      	beq.n	8021f2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 8021e96:	682b      	ldr	r3, [r5, #0]
 8021e98:	4629      	mov	r1, r5
 8021e9a:	4668      	mov	r0, sp
 8021e9c:	68db      	ldr	r3, [r3, #12]
 8021e9e:	4798      	blx	r3
 8021ea0:	4628      	mov	r0, r5
 8021ea2:	f7ff ff5b 	bl	8021d5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8021ea6:	f8bd 7000 	ldrh.w	r7, [sp]
 8021eaa:	4407      	add	r7, r0
 8021eac:	4628      	mov	r0, r5
 8021eae:	f7ff ff69 	bl	8021d84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8021eb2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8021eb6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021eba:	b23f      	sxth	r7, r7
 8021ebc:	4418      	add	r0, r3
 8021ebe:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8021ec2:	4621      	mov	r1, r4
 8021ec4:	f8ad 200c 	strh.w	r2, [sp, #12]
 8021ec8:	f8ad 000a 	strh.w	r0, [sp, #10]
 8021ecc:	4630      	mov	r0, r6
 8021ece:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021ed2:	f8ad 7008 	strh.w	r7, [sp, #8]
 8021ed6:	f7ff f80f 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 8021eda:	4628      	mov	r0, r5
 8021edc:	f7ff ff20 	bl	8021d20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8021ee0:	ab04      	add	r3, sp, #16
 8021ee2:	4602      	mov	r2, r0
 8021ee4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8021ee8:	e883 0003 	stmia.w	r3, {r0, r1}
 8021eec:	4611      	mov	r1, r2
 8021eee:	4618      	mov	r0, r3
 8021ef0:	f7ff f802 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 8021ef4:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 8021ef8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021efc:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 8021f00:	455a      	cmp	r2, fp
 8021f02:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021f06:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021f0a:	f040 8096 	bne.w	802203a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 8021f0e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8021f12:	4553      	cmp	r3, sl
 8021f14:	f040 8091 	bne.w	802203a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 8021f18:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8021f1c:	4543      	cmp	r3, r8
 8021f1e:	f040 808c 	bne.w	802203a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 8021f22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021f26:	42bb      	cmp	r3, r7
 8021f28:	f040 8087 	bne.w	802203a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 8021f2c:	4628      	mov	r0, r5
 8021f2e:	f7ff fef7 	bl	8021d20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8021f32:	6861      	ldr	r1, [r4, #4]
 8021f34:	4602      	mov	r2, r0
 8021f36:	4633      	mov	r3, r6
 8021f38:	6820      	ldr	r0, [r4, #0]
 8021f3a:	c303      	stmia	r3!, {r0, r1}
 8021f3c:	4611      	mov	r1, r2
 8021f3e:	4630      	mov	r0, r6
 8021f40:	f7fe ffda 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 8021f44:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	d09e      	beq.n	8021e8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8021f4c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d09a      	beq.n	8021e8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8021f54:	4628      	mov	r0, r5
 8021f56:	f7ff ff01 	bl	8021d5c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8021f5a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8021f5e:	1a18      	subs	r0, r3, r0
 8021f60:	f8ad 0008 	strh.w	r0, [sp, #8]
 8021f64:	4628      	mov	r0, r5
 8021f66:	f7ff ff0d 	bl	8021d84 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8021f6a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8021f6e:	4631      	mov	r1, r6
 8021f70:	1a18      	subs	r0, r3, r0
 8021f72:	f8ad 000a 	strh.w	r0, [sp, #10]
 8021f76:	4628      	mov	r0, r5
 8021f78:	682b      	ldr	r3, [r5, #0]
 8021f7a:	689b      	ldr	r3, [r3, #8]
 8021f7c:	4798      	blx	r3
 8021f7e:	e784      	b.n	8021e8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8021f80:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8021f84:	4553      	cmp	r3, sl
 8021f86:	da10      	bge.n	8021faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 8021f88:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021f8c:	4648      	mov	r0, r9
 8021f8e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021f92:	ebaa 0303 	sub.w	r3, sl, r3
 8021f96:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021f9a:	4631      	mov	r1, r6
 8021f9c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021fa0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021fa4:	69ea      	ldr	r2, [r5, #28]
 8021fa6:	f7ff ff59 	bl	8021e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8021faa:	f9b4 3000 	ldrsh.w	r3, [r4]
 8021fae:	455b      	cmp	r3, fp
 8021fb0:	da0e      	bge.n	8021fd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 8021fb2:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021fb6:	ebab 0303 	sub.w	r3, fp, r3
 8021fba:	f8ad a00a 	strh.w	sl, [sp, #10]
 8021fbe:	4631      	mov	r1, r6
 8021fc0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021fc4:	4648      	mov	r0, r9
 8021fc6:	f8ad 700e 	strh.w	r7, [sp, #14]
 8021fca:	69ea      	ldr	r2, [r5, #28]
 8021fcc:	f7ff ff46 	bl	8021e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8021fd0:	8822      	ldrh	r2, [r4, #0]
 8021fd2:	44d8      	add	r8, fp
 8021fd4:	88a3      	ldrh	r3, [r4, #4]
 8021fd6:	fa1f f888 	uxth.w	r8, r8
 8021fda:	4413      	add	r3, r2
 8021fdc:	fa0f f288 	sxth.w	r2, r8
 8021fe0:	b29b      	uxth	r3, r3
 8021fe2:	b219      	sxth	r1, r3
 8021fe4:	4291      	cmp	r1, r2
 8021fe6:	dd0e      	ble.n	8022006 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8021fe8:	eba3 0308 	sub.w	r3, r3, r8
 8021fec:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021ff0:	f8ad a00a 	strh.w	sl, [sp, #10]
 8021ff4:	4631      	mov	r1, r6
 8021ff6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021ffa:	4648      	mov	r0, r9
 8021ffc:	f8ad 700e 	strh.w	r7, [sp, #14]
 8022000:	69ea      	ldr	r2, [r5, #28]
 8022002:	f7ff ff2b 	bl	8021e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8022006:	88e2      	ldrh	r2, [r4, #6]
 8022008:	4457      	add	r7, sl
 802200a:	8863      	ldrh	r3, [r4, #2]
 802200c:	b2bf      	uxth	r7, r7
 802200e:	4413      	add	r3, r2
 8022010:	b23a      	sxth	r2, r7
 8022012:	b29b      	uxth	r3, r3
 8022014:	b219      	sxth	r1, r3
 8022016:	428a      	cmp	r2, r1
 8022018:	da88      	bge.n	8021f2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 802201a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802201e:	1bdb      	subs	r3, r3, r7
 8022020:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022024:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022028:	4631      	mov	r1, r6
 802202a:	f8ad 0008 	strh.w	r0, [sp, #8]
 802202e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022032:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022036:	69ea      	ldr	r2, [r5, #28]
 8022038:	e006      	b.n	8022048 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 802203a:	f1b8 0f00 	cmp.w	r8, #0
 802203e:	d001      	beq.n	8022044 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 8022040:	2f00      	cmp	r7, #0
 8022042:	d19d      	bne.n	8021f80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 8022044:	69ea      	ldr	r2, [r5, #28]
 8022046:	4621      	mov	r1, r4
 8022048:	4648      	mov	r0, r9
 802204a:	f7ff ff07 	bl	8021e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 802204e:	e76d      	b.n	8021f2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

08022050 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 8022050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022052:	2300      	movs	r3, #0
 8022054:	aa02      	add	r2, sp, #8
 8022056:	4604      	mov	r4, r0
 8022058:	3004      	adds	r0, #4
 802205a:	f842 3d04 	str.w	r3, [r2, #-4]!
 802205e:	460d      	mov	r5, r1
 8022060:	f7ed f819 	bl	800f096 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8022064:	9a01      	ldr	r2, [sp, #4]
 8022066:	b11a      	cbz	r2, 8022070 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 8022068:	4629      	mov	r1, r5
 802206a:	4620      	mov	r0, r4
 802206c:	f7ff fef6 	bl	8021e5c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8022070:	b003      	add	sp, #12
 8022072:	bd30      	pop	{r4, r5, pc}

08022074 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8022074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022076:	4602      	mov	r2, r0
 8022078:	4604      	mov	r4, r0
 802207a:	460d      	mov	r5, r1
 802207c:	466b      	mov	r3, sp
 802207e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8022082:	6851      	ldr	r1, [r2, #4]
 8022084:	c303      	stmia	r3!, {r0, r1}
 8022086:	4629      	mov	r1, r5
 8022088:	4668      	mov	r0, sp
 802208a:	f7fe ff35 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 802208e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8022092:	4669      	mov	r1, sp
 8022094:	b123      	cbz	r3, 80220a0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8022096:	4620      	mov	r0, r4
 8022098:	f7ff ffda 	bl	8022050 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 802209c:	b003      	add	sp, #12
 802209e:	bd30      	pop	{r4, r5, pc}
 80220a0:	1d20      	adds	r0, r4, #4
 80220a2:	f7ec fe5c 	bl	800ed5e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80220a6:	e7f9      	b.n	802209c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080220a8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80220a8:	460b      	mov	r3, r1
 80220aa:	680a      	ldr	r2, [r1, #0]
 80220ac:	1d01      	adds	r1, r0, #4
 80220ae:	6952      	ldr	r2, [r2, #20]
 80220b0:	4618      	mov	r0, r3
 80220b2:	4710      	bx	r2

080220b4 <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 80220b4:	680b      	ldr	r3, [r1, #0]
 80220b6:	6980      	ldr	r0, [r0, #24]
 80220b8:	4418      	add	r0, r3
 80220ba:	4770      	bx	lr

080220bc <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 80220bc:	b530      	push	{r4, r5, lr}
 80220be:	b19a      	cbz	r2, 80220e8 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 80220c0:	7b13      	ldrb	r3, [r2, #12]
 80220c2:	b18b      	cbz	r3, 80220e8 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 80220c4:	7ad2      	ldrb	r2, [r2, #11]
 80220c6:	b294      	uxth	r4, r2
 80220c8:	4413      	add	r3, r2
 80220ca:	429c      	cmp	r4, r3
 80220cc:	da0c      	bge.n	80220e8 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 80220ce:	69c2      	ldr	r2, [r0, #28]
 80220d0:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 80220d4:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 80220d8:	428a      	cmp	r2, r1
 80220da:	d102      	bne.n	80220e2 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 80220dc:	f995 0002 	ldrsb.w	r0, [r5, #2]
 80220e0:	bd30      	pop	{r4, r5, pc}
 80220e2:	3401      	adds	r4, #1
 80220e4:	b2a4      	uxth	r4, r4
 80220e6:	e7f0      	b.n	80220ca <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 80220e8:	2000      	movs	r0, #0
 80220ea:	bd30      	pop	{r4, r5, pc}

080220ec <_ZN8touchgfx17InternalFlashFontD1Ev>:
 80220ec:	4770      	bx	lr

080220ee <_ZN8touchgfx17InternalFlashFontD0Ev>:
 80220ee:	b510      	push	{r4, lr}
 80220f0:	4604      	mov	r4, r0
 80220f2:	2120      	movs	r1, #32
 80220f4:	f003 f86e 	bl	80251d4 <_ZdlPvj>
 80220f8:	4620      	mov	r0, r4
 80220fa:	bd10      	pop	{r4, pc}

080220fc <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 80220fc:	b530      	push	{r4, r5, lr}
 80220fe:	b087      	sub	sp, #28
 8022100:	4604      	mov	r4, r0
 8022102:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 8022106:	9505      	str	r5, [sp, #20]
 8022108:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 802210c:	9504      	str	r5, [sp, #16]
 802210e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8022112:	9503      	str	r5, [sp, #12]
 8022114:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8022118:	9502      	str	r5, [sp, #8]
 802211a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 802211e:	9501      	str	r5, [sp, #4]
 8022120:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8022124:	9500      	str	r5, [sp, #0]
 8022126:	f002 fff9 	bl	802511c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 802212a:	4b04      	ldr	r3, [pc, #16]	; (802213c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 802212c:	4620      	mov	r0, r4
 802212e:	6023      	str	r3, [r4, #0]
 8022130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022132:	61a3      	str	r3, [r4, #24]
 8022134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022136:	61e3      	str	r3, [r4, #28]
 8022138:	b007      	add	sp, #28
 802213a:	bd30      	pop	{r4, r5, pc}
 802213c:	08028a80 	.word	0x08028a80

08022140 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8022140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022142:	4604      	mov	r4, r0
 8022144:	4d1b      	ldr	r5, [pc, #108]	; (80221b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 8022146:	2700      	movs	r7, #0
 8022148:	2601      	movs	r6, #1
 802214a:	6863      	ldr	r3, [r4, #4]
 802214c:	b93b      	cbnz	r3, 802215e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 802214e:	6821      	ldr	r1, [r4, #0]
 8022150:	2900      	cmp	r1, #0
 8022152:	d02c      	beq.n	80221ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 8022154:	6828      	ldr	r0, [r5, #0]
 8022156:	6803      	ldr	r3, [r0, #0]
 8022158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802215a:	4798      	blx	r3
 802215c:	6060      	str	r0, [r4, #4]
 802215e:	7c23      	ldrb	r3, [r4, #16]
 8022160:	b16b      	cbz	r3, 802217e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 8022162:	68e3      	ldr	r3, [r4, #12]
 8022164:	b12b      	cbz	r3, 8022172 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 8022166:	881a      	ldrh	r2, [r3, #0]
 8022168:	b11a      	cbz	r2, 8022172 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 802216a:	1c9a      	adds	r2, r3, #2
 802216c:	60e2      	str	r2, [r4, #12]
 802216e:	8818      	ldrh	r0, [r3, #0]
 8022170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022172:	6828      	ldr	r0, [r5, #0]
 8022174:	7427      	strb	r7, [r4, #16]
 8022176:	6803      	ldr	r3, [r0, #0]
 8022178:	6821      	ldr	r1, [r4, #0]
 802217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802217c:	4798      	blx	r3
 802217e:	6863      	ldr	r3, [r4, #4]
 8022180:	881a      	ldrh	r2, [r3, #0]
 8022182:	b1a2      	cbz	r2, 80221ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 8022184:	2a02      	cmp	r2, #2
 8022186:	f103 0202 	add.w	r2, r3, #2
 802218a:	6062      	str	r2, [r4, #4]
 802218c:	d1ef      	bne.n	802216e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 802218e:	6828      	ldr	r0, [r5, #0]
 8022190:	6803      	ldr	r3, [r0, #0]
 8022192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022194:	68a3      	ldr	r3, [r4, #8]
 8022196:	1d19      	adds	r1, r3, #4
 8022198:	60a1      	str	r1, [r4, #8]
 802219a:	6819      	ldr	r1, [r3, #0]
 802219c:	4790      	blx	r2
 802219e:	60e0      	str	r0, [r4, #12]
 80221a0:	2800      	cmp	r0, #0
 80221a2:	d0d2      	beq.n	802214a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 80221a4:	8803      	ldrh	r3, [r0, #0]
 80221a6:	2b00      	cmp	r3, #0
 80221a8:	d0cf      	beq.n	802214a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 80221aa:	7426      	strb	r6, [r4, #16]
 80221ac:	e7cd      	b.n	802214a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 80221ae:	2000      	movs	r0, #0
 80221b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80221b2:	bf00      	nop
 80221b4:	2000bb14 	.word	0x2000bb14

080221b8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80221b8:	b538      	push	{r3, r4, r5, lr}
 80221ba:	8a83      	ldrh	r3, [r0, #20]
 80221bc:	4604      	mov	r4, r0
 80221be:	8a45      	ldrh	r5, [r0, #18]
 80221c0:	8243      	strh	r3, [r0, #18]
 80221c2:	f7ff ffbd 	bl	8022140 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80221c6:	82a0      	strh	r0, [r4, #20]
 80221c8:	4628      	mov	r0, r5
 80221ca:	bd38      	pop	{r3, r4, r5, pc}

080221cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 80221cc:	b570      	push	{r4, r5, r6, lr}
 80221ce:	460e      	mov	r6, r1
 80221d0:	4605      	mov	r5, r0
 80221d2:	f7ff fff1 	bl	80221b8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80221d6:	4a0d      	ldr	r2, [pc, #52]	; (802220c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 80221d8:	4601      	mov	r1, r0
 80221da:	6814      	ldr	r4, [r2, #0]
 80221dc:	4613      	mov	r3, r2
 80221de:	b914      	cbnz	r4, 80221e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 80221e0:	6852      	ldr	r2, [r2, #4]
 80221e2:	07d2      	lsls	r2, r2, #31
 80221e4:	d510      	bpl.n	8022208 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 80221e6:	6858      	ldr	r0, [r3, #4]
 80221e8:	f105 0212 	add.w	r2, r5, #18
 80221ec:	f010 0f01 	tst.w	r0, #1
 80221f0:	ea4f 0060 	mov.w	r0, r0, asr #1
 80221f4:	bf18      	it	ne
 80221f6:	582b      	ldrne	r3, [r5, r0]
 80221f8:	4428      	add	r0, r5
 80221fa:	bf18      	it	ne
 80221fc:	591c      	ldrne	r4, [r3, r4]
 80221fe:	4633      	mov	r3, r6
 8022200:	46a4      	mov	ip, r4
 8022202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022206:	4760      	bx	ip
 8022208:	bd70      	pop	{r4, r5, r6, pc}
 802220a:	bf00      	nop
 802220c:	2000bae0 	.word	0x2000bae0

08022210 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8022210:	2300      	movs	r3, #0
 8022212:	b510      	push	{r4, lr}
 8022214:	4604      	mov	r4, r0
 8022216:	6043      	str	r3, [r0, #4]
 8022218:	60c3      	str	r3, [r0, #12]
 802221a:	7403      	strb	r3, [r0, #16]
 802221c:	f7ff ff90 	bl	8022140 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8022220:	8260      	strh	r0, [r4, #18]
 8022222:	4620      	mov	r0, r4
 8022224:	f7ff ff8c 	bl	8022140 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8022228:	4a0a      	ldr	r2, [pc, #40]	; (8022254 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 802222a:	82a0      	strh	r0, [r4, #20]
 802222c:	6813      	ldr	r3, [r2, #0]
 802222e:	4611      	mov	r1, r2
 8022230:	b913      	cbnz	r3, 8022238 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 8022232:	6852      	ldr	r2, [r2, #4]
 8022234:	07d2      	lsls	r2, r2, #31
 8022236:	d50c      	bpl.n	8022252 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 8022238:	6848      	ldr	r0, [r1, #4]
 802223a:	f010 0f01 	tst.w	r0, #1
 802223e:	ea4f 0060 	mov.w	r0, r0, asr #1
 8022242:	bf18      	it	ne
 8022244:	5822      	ldrne	r2, [r4, r0]
 8022246:	4420      	add	r0, r4
 8022248:	bf18      	it	ne
 802224a:	58d3      	ldrne	r3, [r2, r3]
 802224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022250:	4718      	bx	r3
 8022252:	bd10      	pop	{r4, pc}
 8022254:	2000bae8 	.word	0x2000bae8

08022258 <_ZN8touchgfx12TextProviderC1Ev>:
 8022258:	2300      	movs	r3, #0
 802225a:	b510      	push	{r4, lr}
 802225c:	4604      	mov	r4, r0
 802225e:	6003      	str	r3, [r0, #0]
 8022260:	6043      	str	r3, [r0, #4]
 8022262:	f7ff ffd5 	bl	8022210 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8022266:	4620      	mov	r0, r4
 8022268:	bd10      	pop	{r4, pc}

0802226a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 802226a:	6082      	str	r2, [r0, #8]
 802226c:	6001      	str	r1, [r0, #0]
 802226e:	f7ff bfcf 	b.w	8022210 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08022272 <_ZN8touchgfx8ceil28_4El>:
 8022272:	f110 030f 	adds.w	r3, r0, #15
 8022276:	d401      	bmi.n	802227c <_ZN8touchgfx8ceil28_4El+0xa>
 8022278:	1118      	asrs	r0, r3, #4
 802227a:	4770      	bx	lr
 802227c:	2210      	movs	r2, #16
 802227e:	f1c0 0001 	rsb	r0, r0, #1
 8022282:	fb93 f3f2 	sdiv	r3, r3, r2
 8022286:	f010 000f 	ands.w	r0, r0, #15
 802228a:	bf18      	it	ne
 802228c:	2001      	movne	r0, #1
 802228e:	1a18      	subs	r0, r3, r0
 8022290:	4770      	bx	lr
	...

08022294 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8022294:	2900      	cmp	r1, #0
 8022296:	b510      	push	{r4, lr}
 8022298:	dc06      	bgt.n	80222a8 <_ZN8touchgfx11floorDivModEllRlS0_+0x14>
 802229a:	4b0f      	ldr	r3, [pc, #60]	; (80222d8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 802229c:	f240 1111 	movw	r1, #273	; 0x111
 80222a0:	4a0e      	ldr	r2, [pc, #56]	; (80222dc <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 80222a2:	480f      	ldr	r0, [pc, #60]	; (80222e0 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 80222a4:	f002 ffb2 	bl	802520c <__assert_func>
 80222a8:	fb90 f4f1 	sdiv	r4, r0, r1
 80222ac:	2800      	cmp	r0, #0
 80222ae:	6014      	str	r4, [r2, #0]
 80222b0:	db03      	blt.n	80222ba <_ZN8touchgfx11floorDivModEllRlS0_+0x26>
 80222b2:	fb01 0114 	mls	r1, r1, r4, r0
 80222b6:	6019      	str	r1, [r3, #0]
 80222b8:	bd10      	pop	{r4, pc}
 80222ba:	4240      	negs	r0, r0
 80222bc:	fb90 f4f1 	sdiv	r4, r0, r1
 80222c0:	fb01 0014 	mls	r0, r1, r4, r0
 80222c4:	6018      	str	r0, [r3, #0]
 80222c6:	2800      	cmp	r0, #0
 80222c8:	d0f6      	beq.n	80222b8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 80222ca:	6810      	ldr	r0, [r2, #0]
 80222cc:	3801      	subs	r0, #1
 80222ce:	6010      	str	r0, [r2, #0]
 80222d0:	6818      	ldr	r0, [r3, #0]
 80222d2:	1a09      	subs	r1, r1, r0
 80222d4:	e7ef      	b.n	80222b6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 80222d6:	bf00      	nop
 80222d8:	08028ac4 	.word	0x08028ac4
 80222dc:	08028b03 	.word	0x08028b03
 80222e0:	08028ad4 	.word	0x08028ad4

080222e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80222e4:	b570      	push	{r4, r5, r6, lr}
 80222e6:	694a      	ldr	r2, [r1, #20]
 80222e8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80222ea:	684b      	ldr	r3, [r1, #4]
 80222ec:	1b54      	subs	r4, r2, r5
 80222ee:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80222f0:	f000 8106 	beq.w	8022500 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80222f4:	1b9b      	subs	r3, r3, r6
 80222f6:	d003      	beq.n	8022300 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80222f8:	4363      	muls	r3, r4
 80222fa:	2210      	movs	r2, #16
 80222fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8022300:	680c      	ldr	r4, [r1, #0]
 8022302:	698a      	ldr	r2, [r1, #24]
 8022304:	1b65      	subs	r5, r4, r5
 8022306:	f000 80fd 	beq.w	8022504 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 802230a:	1b92      	subs	r2, r2, r6
 802230c:	d003      	beq.n	8022316 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 802230e:	436a      	muls	r2, r5
 8022310:	2410      	movs	r4, #16
 8022312:	fb92 f2f4 	sdiv	r2, r2, r4
 8022316:	1a9b      	subs	r3, r3, r2
 8022318:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8022540 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 802231c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022320:	460a      	mov	r2, r1
 8022322:	ee07 3a90 	vmov	s15, r3
 8022326:	f100 040c 	add.w	r4, r0, #12
 802232a:	4603      	mov	r3, r0
 802232c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022330:	ee67 7a84 	vmul.f32	s15, s15, s8
 8022334:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8022338:	eeb1 6a43 	vneg.f32	s12, s6
 802233c:	edd2 7a02 	vldr	s15, [r2, #8]
 8022340:	3214      	adds	r2, #20
 8022342:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8022346:	ece3 6a01 	vstmia	r3!, {s13}
 802234a:	429c      	cmp	r4, r3
 802234c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8022350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022354:	edc3 7a02 	vstr	s15, [r3, #8]
 8022358:	ed52 7a01 	vldr	s15, [r2, #-4]
 802235c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022360:	edc3 7a05 	vstr	s15, [r3, #20]
 8022364:	d1ea      	bne.n	802233c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8022366:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8022368:	698b      	ldr	r3, [r1, #24]
 802236a:	edd0 4a02 	vldr	s9, [r0, #8]
 802236e:	1a9b      	subs	r3, r3, r2
 8022370:	edd0 3a00 	vldr	s7, [r0]
 8022374:	edd0 6a01 	vldr	s13, [r0, #4]
 8022378:	ee07 3a90 	vmov	s15, r3
 802237c:	684b      	ldr	r3, [r1, #4]
 802237e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8022382:	ed90 5a05 	vldr	s10, [r0, #20]
 8022386:	1a9b      	subs	r3, r3, r2
 8022388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802238c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8022390:	ed90 2a03 	vldr	s4, [r0, #12]
 8022394:	ee07 3a10 	vmov	s14, r3
 8022398:	edd0 2a04 	vldr	s5, [r0, #16]
 802239c:	ee67 7a84 	vmul.f32	s15, s15, s8
 80223a0:	ed90 1a07 	vldr	s2, [r0, #28]
 80223a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80223a8:	ee72 2ac5 	vsub.f32	s5, s5, s10
 80223ac:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80223b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80223b4:	ee32 5a45 	vsub.f32	s10, s4, s10
 80223b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80223bc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80223c0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80223c4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80223c6:	694a      	ldr	r2, [r1, #20]
 80223c8:	1b13      	subs	r3, r2, r4
 80223ca:	ee07 3a10 	vmov	s14, r3
 80223ce:	680b      	ldr	r3, [r1, #0]
 80223d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80223d4:	1b1b      	subs	r3, r3, r4
 80223d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80223da:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80223de:	ee07 3a10 	vmov	s14, r3
 80223e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80223e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80223ea:	eee6 4a87 	vfma.f32	s9, s13, s14
 80223ee:	ee64 4a86 	vmul.f32	s9, s9, s12
 80223f2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80223f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80223f8:	698b      	ldr	r3, [r1, #24]
 80223fa:	1a9b      	subs	r3, r3, r2
 80223fc:	ee06 3a90 	vmov	s13, r3
 8022400:	684b      	ldr	r3, [r1, #4]
 8022402:	1a9b      	subs	r3, r3, r2
 8022404:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8022408:	ee07 3a10 	vmov	s14, r3
 802240c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8022410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022414:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8022418:	ee27 7a04 	vmul.f32	s14, s14, s8
 802241c:	eee2 6a87 	vfma.f32	s13, s5, s14
 8022420:	ee66 6a83 	vmul.f32	s13, s13, s6
 8022424:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8022428:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 802242a:	680b      	ldr	r3, [r1, #0]
 802242c:	1a9b      	subs	r3, r3, r2
 802242e:	ee07 3a10 	vmov	s14, r3
 8022432:	694b      	ldr	r3, [r1, #20]
 8022434:	1a9b      	subs	r3, r3, r2
 8022436:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802243a:	ee05 3a90 	vmov	s11, r3
 802243e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8022442:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8022446:	ee65 5a84 	vmul.f32	s11, s11, s8
 802244a:	ee25 5a65 	vnmul.f32	s10, s10, s11
 802244e:	edd0 5a08 	vldr	s11, [r0, #32]
 8022452:	ee31 1a65 	vsub.f32	s2, s2, s11
 8022456:	eea7 5a22 	vfma.f32	s10, s14, s5
 802245a:	edd0 2a06 	vldr	s5, [r0, #24]
 802245e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8022462:	ee25 5a06 	vmul.f32	s10, s10, s12
 8022466:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 802246a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 802246c:	684a      	ldr	r2, [r1, #4]
 802246e:	1b13      	subs	r3, r2, r4
 8022470:	ee01 3a90 	vmov	s3, r3
 8022474:	698b      	ldr	r3, [r1, #24]
 8022476:	1b1b      	subs	r3, r3, r4
 8022478:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802247c:	ee07 3a10 	vmov	s14, r3
 8022480:	ee61 1a84 	vmul.f32	s3, s3, s8
 8022484:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022488:	ee27 7a04 	vmul.f32	s14, s14, s8
 802248c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8022490:	eea1 7a81 	vfma.f32	s14, s3, s2
 8022494:	ee27 7a03 	vmul.f32	s14, s14, s6
 8022498:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 802249c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 802249e:	680b      	ldr	r3, [r1, #0]
 80224a0:	1a9b      	subs	r3, r3, r2
 80224a2:	ee03 3a10 	vmov	s6, r3
 80224a6:	694b      	ldr	r3, [r1, #20]
 80224a8:	1a9b      	subs	r3, r3, r2
 80224aa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80224ae:	ee01 3a90 	vmov	s3, r3
 80224b2:	ee23 3a04 	vmul.f32	s6, s6, s8
 80224b6:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80224ba:	ee21 4a84 	vmul.f32	s8, s3, s8
 80224be:	ee65 5ac4 	vnmul.f32	s11, s11, s8
 80224c2:	eee3 5a01 	vfma.f32	s11, s6, s2
 80224c6:	ee25 6a86 	vmul.f32	s12, s11, s12
 80224ca:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80224ce:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80224d2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80224d6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80224da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224de:	dd13      	ble.n	8022508 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80224e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80224e4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80224e8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80224ea:	eee3 7a87 	vfma.f32	s15, s7, s14
 80224ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80224f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80224f6:	dd15      	ble.n	8022524 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80224f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80224fc:	6403      	str	r3, [r0, #64]	; 0x40
 80224fe:	bd70      	pop	{r4, r5, r6, pc}
 8022500:	4623      	mov	r3, r4
 8022502:	e6fd      	b.n	8022300 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8022504:	462a      	mov	r2, r5
 8022506:	e706      	b.n	8022316 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8022508:	d502      	bpl.n	8022510 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 802250a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802250e:	e7e9      	b.n	80224e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8022510:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8022514:	eea3 2a85 	vfma.f32	s4, s7, s10
 8022518:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 802251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022520:	dade      	bge.n	80224e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8022522:	e7f2      	b.n	802250a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8022524:	d502      	bpl.n	802252c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8022526:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802252a:	e7e7      	b.n	80224fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 802252c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8022530:	eee3 4a86 	vfma.f32	s9, s7, s12
 8022534:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8022538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802253c:	dadc      	bge.n	80224f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 802253e:	e7f2      	b.n	8022526 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8022540:	3d800000 	.word	0x3d800000

08022544 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8022544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022548:	f04f 0814 	mov.w	r8, #20
 802254c:	4604      	mov	r4, r0
 802254e:	4617      	mov	r7, r2
 8022550:	460d      	mov	r5, r1
 8022552:	fb08 f903 	mul.w	r9, r8, r3
 8022556:	461e      	mov	r6, r3
 8022558:	eb02 0a09 	add.w	sl, r2, r9
 802255c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8022560:	f7ff fe87 	bl	8022272 <_ZN8touchgfx8ceil28_4El>
 8022564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022566:	6160      	str	r0, [r4, #20]
 8022568:	fb08 f803 	mul.w	r8, r8, r3
 802256c:	9001      	str	r0, [sp, #4]
 802256e:	eb07 0b08 	add.w	fp, r7, r8
 8022572:	f8db 0004 	ldr.w	r0, [fp, #4]
 8022576:	f7ff fe7c 	bl	8022272 <_ZN8touchgfx8ceil28_4El>
 802257a:	9a01      	ldr	r2, [sp, #4]
 802257c:	1a80      	subs	r0, r0, r2
 802257e:	61a0      	str	r0, [r4, #24]
 8022580:	2800      	cmp	r0, #0
 8022582:	f000 8088 	beq.w	8022696 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8022586:	f857 0009 	ldr.w	r0, [r7, r9]
 802258a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 802258e:	f857 e008 	ldr.w	lr, [r7, r8]
 8022592:	f8db 3004 	ldr.w	r3, [fp, #4]
 8022596:	ebae 0e00 	sub.w	lr, lr, r0
 802259a:	f8da 1004 	ldr.w	r1, [sl, #4]
 802259e:	ea4f 1b0e 	mov.w	fp, lr, lsl #4
 80225a2:	1a5b      	subs	r3, r3, r1
 80225a4:	fb0b f202 	mul.w	r2, fp, r2
 80225a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80225ac:	fb0e 2211 	mls	r2, lr, r1, r2
 80225b0:	4641      	mov	r1, r8
 80225b2:	fb00 2003 	mla	r0, r0, r3, r2
 80225b6:	f104 0310 	add.w	r3, r4, #16
 80225ba:	4622      	mov	r2, r4
 80225bc:	3801      	subs	r0, #1
 80225be:	4440      	add	r0, r8
 80225c0:	f7ff fe68 	bl	8022294 <_ZN8touchgfx11floorDivModEllRlS0_>
 80225c4:	f104 0308 	add.w	r3, r4, #8
 80225c8:	1d22      	adds	r2, r4, #4
 80225ca:	4641      	mov	r1, r8
 80225cc:	4658      	mov	r0, fp
 80225ce:	f7ff fe61 	bl	8022294 <_ZN8touchgfx11floorDivModEllRlS0_>
 80225d2:	f8c4 800c 	str.w	r8, [r4, #12]
 80225d6:	6962      	ldr	r2, [r4, #20]
 80225d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80225dc:	eddf 6a30 	vldr	s13, [pc, #192]	; 80226a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80225e0:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80225e4:	6822      	ldr	r2, [r4, #0]
 80225e6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80225ea:	ee07 3a10 	vmov	s14, r3
 80225ee:	f857 3009 	ldr.w	r3, [r7, r9]
 80225f2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80225f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80225fa:	ee07 3a90 	vmov	s15, r3
 80225fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022606:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802260a:	edd6 6a00 	vldr	s13, [r6]
 802260e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8022612:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8022616:	eee7 6a86 	vfma.f32	s13, s15, s12
 802261a:	edc4 6a07 	vstr	s13, [r4, #28]
 802261e:	edd4 6a01 	vldr	s13, [r4, #4]
 8022622:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8022626:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 802262a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 802262e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8022632:	ed84 6a08 	vstr	s12, [r4, #32]
 8022636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022638:	6263      	str	r3, [r4, #36]	; 0x24
 802263a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 802263e:	ed96 6a03 	vldr	s12, [r6, #12]
 8022642:	eea7 6a25 	vfma.f32	s12, s14, s11
 8022646:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 802264a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 802264e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 8022652:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8022656:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 802265a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 802265e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8022662:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8022664:	6323      	str	r3, [r4, #48]	; 0x30
 8022666:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 802266a:	ed96 6a06 	vldr	s12, [r6, #24]
 802266e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8022672:	eeb0 7a46 	vmov.f32	s14, s12
 8022676:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 802267a:	eea7 7a86 	vfma.f32	s14, s15, s12
 802267e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8022682:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8022686:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 802268a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802268e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8022692:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8022694:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022696:	4620      	mov	r0, r4
 8022698:	b003      	add	sp, #12
 802269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802269e:	bf00      	nop
 80226a0:	3d800000 	.word	0x3d800000

080226a4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 80226a4:	4602      	mov	r2, r0
 80226a6:	b148      	cbz	r0, 80226bc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80226a8:	2300      	movs	r3, #0
 80226aa:	b298      	uxth	r0, r3
 80226ac:	3301      	adds	r3, #1
 80226ae:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80226b2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80226b6:	2900      	cmp	r1, #0
 80226b8:	d1f7      	bne.n	80226aa <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80226ba:	4770      	bx	lr
 80226bc:	4770      	bx	lr

080226be <_ZN8touchgfx7Unicode6strlenEPKc>:
 80226be:	b140      	cbz	r0, 80226d2 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 80226c0:	4602      	mov	r2, r0
 80226c2:	1a13      	subs	r3, r2, r0
 80226c4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80226c8:	b29b      	uxth	r3, r3
 80226ca:	2900      	cmp	r1, #0
 80226cc:	d1f9      	bne.n	80226c2 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 80226ce:	4618      	mov	r0, r3
 80226d0:	4770      	bx	lr
 80226d2:	4603      	mov	r3, r0
 80226d4:	e7fb      	b.n	80226ce <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

080226d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80226d6:	b530      	push	{r4, r5, lr}
 80226d8:	b169      	cbz	r1, 80226f6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 80226da:	b168      	cbz	r0, 80226f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 80226dc:	1e85      	subs	r5, r0, #2
 80226de:	460b      	mov	r3, r1
 80226e0:	1a58      	subs	r0, r3, r1
 80226e2:	b280      	uxth	r0, r0
 80226e4:	4290      	cmp	r0, r2
 80226e6:	da07      	bge.n	80226f8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 80226e8:	f813 4b01 	ldrb.w	r4, [r3], #1
 80226ec:	f825 4f02 	strh.w	r4, [r5, #2]!
 80226f0:	2c00      	cmp	r4, #0
 80226f2:	d1f5      	bne.n	80226e0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80226f4:	bd30      	pop	{r4, r5, pc}
 80226f6:	4608      	mov	r0, r1
 80226f8:	bd30      	pop	{r4, r5, pc}

080226fa <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 80226fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80226fc:	460f      	mov	r7, r1
 80226fe:	b08b      	sub	sp, #44	; 0x2c
 8022700:	2100      	movs	r1, #0
 8022702:	ad01      	add	r5, sp, #4
 8022704:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8022708:	211f      	movs	r1, #31
 802270a:	fbb0 f6f3 	udiv	r6, r0, r3
 802270e:	fb03 0416 	mls	r4, r3, r6, r0
 8022712:	4630      	mov	r0, r6
 8022714:	2c09      	cmp	r4, #9
 8022716:	bfd4      	ite	le
 8022718:	3430      	addle	r4, #48	; 0x30
 802271a:	3457      	addgt	r4, #87	; 0x57
 802271c:	b2e4      	uxtb	r4, r4
 802271e:	554c      	strb	r4, [r1, r5]
 8022720:	1e4c      	subs	r4, r1, #1
 8022722:	b92e      	cbnz	r6, 8022730 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 8022724:	4429      	add	r1, r5
 8022726:	4638      	mov	r0, r7
 8022728:	f7ff ffd5 	bl	80226d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 802272c:	b00b      	add	sp, #44	; 0x2c
 802272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022730:	4621      	mov	r1, r4
 8022732:	e7ea      	b.n	802270a <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

08022734 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8022734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022736:	4606      	mov	r6, r0
 8022738:	b08b      	sub	sp, #44	; 0x2c
 802273a:	4608      	mov	r0, r1
 802273c:	b341      	cbz	r1, 8022790 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 802273e:	1e99      	subs	r1, r3, #2
 8022740:	290e      	cmp	r1, #14
 8022742:	d825      	bhi.n	8022790 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8022744:	2100      	movs	r1, #0
 8022746:	4634      	mov	r4, r6
 8022748:	251f      	movs	r5, #31
 802274a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 802274e:	1e69      	subs	r1, r5, #1
 8022750:	f10d 0e04 	add.w	lr, sp, #4
 8022754:	fb94 f7f3 	sdiv	r7, r4, r3
 8022758:	fb03 4417 	mls	r4, r3, r7, r4
 802275c:	448e      	add	lr, r1
 802275e:	2c00      	cmp	r4, #0
 8022760:	bfb8      	it	lt
 8022762:	4264      	neglt	r4, r4
 8022764:	2c09      	cmp	r4, #9
 8022766:	bfd4      	ite	le
 8022768:	3430      	addle	r4, #48	; 0x30
 802276a:	3457      	addgt	r4, #87	; 0x57
 802276c:	b2e4      	uxtb	r4, r4
 802276e:	f88e 4001 	strb.w	r4, [lr, #1]
 8022772:	463c      	mov	r4, r7
 8022774:	b977      	cbnz	r7, 8022794 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8022776:	2e00      	cmp	r6, #0
 8022778:	da05      	bge.n	8022786 <_ZN8touchgfx7Unicode4itoaElPtti+0x52>
 802277a:	ab0a      	add	r3, sp, #40	; 0x28
 802277c:	4419      	add	r1, r3
 802277e:	232d      	movs	r3, #45	; 0x2d
 8022780:	f801 3c24 	strb.w	r3, [r1, #-36]
 8022784:	1ea9      	subs	r1, r5, #2
 8022786:	3101      	adds	r1, #1
 8022788:	ab01      	add	r3, sp, #4
 802278a:	4419      	add	r1, r3
 802278c:	f7ff ffa3 	bl	80226d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8022790:	b00b      	add	sp, #44	; 0x2c
 8022792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022794:	460d      	mov	r5, r1
 8022796:	e7da      	b.n	802274e <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

08022798 <_ZN8touchgfx7Unicode4atoiEPKt>:
 8022798:	b510      	push	{r4, lr}
 802279a:	b158      	cbz	r0, 80227b4 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 802279c:	1e82      	subs	r2, r0, #2
 802279e:	210a      	movs	r1, #10
 80227a0:	2000      	movs	r0, #0
 80227a2:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80227a6:	3b30      	subs	r3, #48	; 0x30
 80227a8:	b29c      	uxth	r4, r3
 80227aa:	2c09      	cmp	r4, #9
 80227ac:	d802      	bhi.n	80227b4 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 80227ae:	fb01 3000 	mla	r0, r1, r0, r3
 80227b2:	e7f6      	b.n	80227a2 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 80227b4:	bd10      	pop	{r4, pc}

080227b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 80227b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227ba:	b085      	sub	sp, #20
 80227bc:	f8d0 8000 	ldr.w	r8, [r0]
 80227c0:	468a      	mov	sl, r1
 80227c2:	461c      	mov	r4, r3
 80227c4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80227c8:	4681      	mov	r9, r0
 80227ca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80227ce:	4640      	mov	r0, r8
 80227d0:	9203      	str	r2, [sp, #12]
 80227d2:	9301      	str	r3, [sp, #4]
 80227d4:	9102      	str	r1, [sp, #8]
 80227d6:	f7ff ff65 	bl	80226a4 <_ZN8touchgfx7Unicode6strlenEPKt>
 80227da:	9a03      	ldr	r2, [sp, #12]
 80227dc:	f1ba 0f00 	cmp.w	sl, #0
 80227e0:	bf0c      	ite	eq
 80227e2:	4603      	moveq	r3, r0
 80227e4:	1c43      	addne	r3, r0, #1
 80227e6:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80227ea:	8812      	ldrh	r2, [r2, #0]
 80227ec:	b29b      	uxth	r3, r3
 80227ee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80227f0:	2a69      	cmp	r2, #105	; 0x69
 80227f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80227f4:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80227f6:	9902      	ldr	r1, [sp, #8]
 80227f8:	d004      	beq.n	8022804 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 80227fa:	d852      	bhi.n	80228a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80227fc:	2a58      	cmp	r2, #88	; 0x58
 80227fe:	d001      	beq.n	8022804 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 8022800:	2a64      	cmp	r2, #100	; 0x64
 8022802:	d159      	bne.n	80228b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 8022804:	b19c      	cbz	r4, 802282e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 8022806:	b956      	cbnz	r6, 802281e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 8022808:	2801      	cmp	r0, #1
 802280a:	d108      	bne.n	802281e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 802280c:	f8b8 2000 	ldrh.w	r2, [r8]
 8022810:	2a30      	cmp	r2, #48	; 0x30
 8022812:	bf02      	ittt	eq
 8022814:	f108 0202 	addeq.w	r2, r8, #2
 8022818:	4630      	moveq	r0, r6
 802281a:	f8c9 2000 	streq.w	r2, [r9]
 802281e:	429e      	cmp	r6, r3
 8022820:	dd4c      	ble.n	80228bc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 8022822:	b2b6      	uxth	r6, r6
 8022824:	1af4      	subs	r4, r6, r3
 8022826:	4633      	mov	r3, r6
 8022828:	b2a4      	uxth	r4, r4
 802282a:	f04f 0b00 	mov.w	fp, #0
 802282e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8022832:	9a01      	ldr	r2, [sp, #4]
 8022834:	3e01      	subs	r6, #1
 8022836:	b162      	cbz	r2, 8022852 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 8022838:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802283a:	4293      	cmp	r3, r2
 802283c:	da09      	bge.n	8022852 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 802283e:	1ad2      	subs	r2, r2, r3
 8022840:	b292      	uxth	r2, r2
 8022842:	b939      	cbnz	r1, 8022854 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 8022844:	f1bb 0f00 	cmp.w	fp, #0
 8022848:	d050      	beq.n	80228ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 802284a:	2800      	cmp	r0, #0
 802284c:	d04e      	beq.n	80228ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 802284e:	4414      	add	r4, r2
 8022850:	b2a4      	uxth	r4, r4
 8022852:	2200      	movs	r2, #0
 8022854:	682b      	ldr	r3, [r5, #0]
 8022856:	42b3      	cmp	r3, r6
 8022858:	da07      	bge.n	802286a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 802285a:	f1ba 0f00 	cmp.w	sl, #0
 802285e:	d004      	beq.n	802286a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 8022860:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8022864:	682b      	ldr	r3, [r5, #0]
 8022866:	3301      	adds	r3, #1
 8022868:	602b      	str	r3, [r5, #0]
 802286a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 802286e:	b124      	cbz	r4, 802287a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 8022870:	6829      	ldr	r1, [r5, #0]
 8022872:	3c01      	subs	r4, #1
 8022874:	428e      	cmp	r6, r1
 8022876:	b2a4      	uxth	r4, r4
 8022878:	dc22      	bgt.n	80228c0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 802287a:	b140      	cbz	r0, 802288e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 802287c:	f8d9 3000 	ldr.w	r3, [r9]
 8022880:	8819      	ldrh	r1, [r3, #0]
 8022882:	b121      	cbz	r1, 802288e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 8022884:	6829      	ldr	r1, [r5, #0]
 8022886:	3801      	subs	r0, #1
 8022888:	428e      	cmp	r6, r1
 802288a:	b280      	uxth	r0, r0
 802288c:	dc1e      	bgt.n	80228cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 802288e:	2020      	movs	r0, #32
 8022890:	b122      	cbz	r2, 802289c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 8022892:	6829      	ldr	r1, [r5, #0]
 8022894:	3a01      	subs	r2, #1
 8022896:	428e      	cmp	r6, r1
 8022898:	b292      	uxth	r2, r2
 802289a:	dc21      	bgt.n	80228e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 802289c:	b005      	add	sp, #20
 802289e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228a2:	2a73      	cmp	r2, #115	; 0x73
 80228a4:	d003      	beq.n	80228ae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 80228a6:	2a78      	cmp	r2, #120	; 0x78
 80228a8:	d0ac      	beq.n	8022804 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 80228aa:	2a6f      	cmp	r2, #111	; 0x6f
 80228ac:	e7a9      	b.n	8022802 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 80228ae:	2c00      	cmp	r4, #0
 80228b0:	d0bd      	beq.n	802282e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 80228b2:	4286      	cmp	r6, r0
 80228b4:	da00      	bge.n	80228b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 80228b6:	b2b0      	uxth	r0, r6
 80228b8:	2400      	movs	r4, #0
 80228ba:	e7b8      	b.n	802282e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 80228bc:	2400      	movs	r4, #0
 80228be:	e7b4      	b.n	802282a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 80228c0:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 80228c4:	682b      	ldr	r3, [r5, #0]
 80228c6:	3301      	adds	r3, #1
 80228c8:	602b      	str	r3, [r5, #0]
 80228ca:	e7d0      	b.n	802286e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 80228cc:	1c9c      	adds	r4, r3, #2
 80228ce:	f8c9 4000 	str.w	r4, [r9]
 80228d2:	881b      	ldrh	r3, [r3, #0]
 80228d4:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 80228d8:	682b      	ldr	r3, [r5, #0]
 80228da:	3301      	adds	r3, #1
 80228dc:	602b      	str	r3, [r5, #0]
 80228de:	e7cc      	b.n	802287a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 80228e0:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 80228e4:	682b      	ldr	r3, [r5, #0]
 80228e6:	3301      	adds	r3, #1
 80228e8:	602b      	str	r3, [r5, #0]
 80228ea:	e7d1      	b.n	8022890 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 80228ec:	2a00      	cmp	r2, #0
 80228ee:	d0b1      	beq.n	8022854 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 80228f0:	f04f 0e20 	mov.w	lr, #32
 80228f4:	6829      	ldr	r1, [r5, #0]
 80228f6:	3a01      	subs	r2, #1
 80228f8:	42b1      	cmp	r1, r6
 80228fa:	b292      	uxth	r2, r2
 80228fc:	daa9      	bge.n	8022852 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 80228fe:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 8022902:	682b      	ldr	r3, [r5, #0]
 8022904:	3301      	adds	r3, #1
 8022906:	602b      	str	r3, [r5, #0]
 8022908:	2a00      	cmp	r2, #0
 802290a:	d1f3      	bne.n	80228f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 802290c:	e7a2      	b.n	8022854 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

0802290e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 802290e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022912:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022916:	4604      	mov	r4, r0
 8022918:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802291c:	2000      	movs	r0, #0
 802291e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022920:	f04f 0801 	mov.w	r8, #1
 8022924:	9f08      	ldr	r7, [sp, #32]
 8022926:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022928:	8008      	strh	r0, [r1, #0]
 802292a:	7010      	strb	r0, [r2, #0]
 802292c:	7018      	strb	r0, [r3, #0]
 802292e:	f88e 0000 	strb.w	r0, [lr]
 8022932:	f88c 0000 	strb.w	r0, [ip]
 8022936:	7030      	strb	r0, [r6, #0]
 8022938:	6820      	ldr	r0, [r4, #0]
 802293a:	8800      	ldrh	r0, [r0, #0]
 802293c:	b190      	cbz	r0, 8022964 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 802293e:	282b      	cmp	r0, #43	; 0x2b
 8022940:	d001      	beq.n	8022946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 8022942:	2820      	cmp	r0, #32
 8022944:	d104      	bne.n	8022950 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 8022946:	8008      	strh	r0, [r1, #0]
 8022948:	6820      	ldr	r0, [r4, #0]
 802294a:	3002      	adds	r0, #2
 802294c:	6020      	str	r0, [r4, #0]
 802294e:	e7f3      	b.n	8022938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 8022950:	282d      	cmp	r0, #45	; 0x2d
 8022952:	d102      	bne.n	802295a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 8022954:	f882 8000 	strb.w	r8, [r2]
 8022958:	e7f6      	b.n	8022948 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 802295a:	2823      	cmp	r0, #35	; 0x23
 802295c:	d102      	bne.n	8022964 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 802295e:	f883 8000 	strb.w	r8, [r3]
 8022962:	e7f1      	b.n	8022948 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 8022964:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8022968:	2b09      	cmp	r3, #9
 802296a:	d901      	bls.n	8022970 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 802296c:	282a      	cmp	r0, #42	; 0x2a
 802296e:	d114      	bne.n	802299a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 8022970:	2201      	movs	r2, #1
 8022972:	f88c 2000 	strb.w	r2, [ip]
 8022976:	6823      	ldr	r3, [r4, #0]
 8022978:	8819      	ldrh	r1, [r3, #0]
 802297a:	2930      	cmp	r1, #48	; 0x30
 802297c:	bf02      	ittt	eq
 802297e:	3302      	addeq	r3, #2
 8022980:	6023      	streq	r3, [r4, #0]
 8022982:	f88e 2000 	strbeq.w	r2, [lr]
 8022986:	6820      	ldr	r0, [r4, #0]
 8022988:	8803      	ldrh	r3, [r0, #0]
 802298a:	2b2a      	cmp	r3, #42	; 0x2a
 802298c:	d11e      	bne.n	80229cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 802298e:	f04f 33ff 	mov.w	r3, #4294967295
 8022992:	603b      	str	r3, [r7, #0]
 8022994:	6823      	ldr	r3, [r4, #0]
 8022996:	3302      	adds	r3, #2
 8022998:	6023      	str	r3, [r4, #0]
 802299a:	6823      	ldr	r3, [r4, #0]
 802299c:	881b      	ldrh	r3, [r3, #0]
 802299e:	2b2e      	cmp	r3, #46	; 0x2e
 80229a0:	d112      	bne.n	80229c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 80229a2:	2301      	movs	r3, #1
 80229a4:	7033      	strb	r3, [r6, #0]
 80229a6:	6823      	ldr	r3, [r4, #0]
 80229a8:	1c98      	adds	r0, r3, #2
 80229aa:	6020      	str	r0, [r4, #0]
 80229ac:	885b      	ldrh	r3, [r3, #2]
 80229ae:	2b2a      	cmp	r3, #42	; 0x2a
 80229b0:	d118      	bne.n	80229e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 80229b2:	f04f 33ff 	mov.w	r3, #4294967295
 80229b6:	602b      	str	r3, [r5, #0]
 80229b8:	6823      	ldr	r3, [r4, #0]
 80229ba:	3302      	adds	r3, #2
 80229bc:	6023      	str	r3, [r4, #0]
 80229be:	682b      	ldr	r3, [r5, #0]
 80229c0:	2b06      	cmp	r3, #6
 80229c2:	bfa8      	it	ge
 80229c4:	2306      	movge	r3, #6
 80229c6:	602b      	str	r3, [r5, #0]
 80229c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80229cc:	f7ff fee4 	bl	8022798 <_ZN8touchgfx7Unicode4atoiEPKt>
 80229d0:	6038      	str	r0, [r7, #0]
 80229d2:	6822      	ldr	r2, [r4, #0]
 80229d4:	8813      	ldrh	r3, [r2, #0]
 80229d6:	3b30      	subs	r3, #48	; 0x30
 80229d8:	b29b      	uxth	r3, r3
 80229da:	2b09      	cmp	r3, #9
 80229dc:	d8dd      	bhi.n	802299a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 80229de:	3202      	adds	r2, #2
 80229e0:	6022      	str	r2, [r4, #0]
 80229e2:	e7f6      	b.n	80229d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 80229e4:	f7ff fed8 	bl	8022798 <_ZN8touchgfx7Unicode4atoiEPKt>
 80229e8:	6028      	str	r0, [r5, #0]
 80229ea:	6822      	ldr	r2, [r4, #0]
 80229ec:	8813      	ldrh	r3, [r2, #0]
 80229ee:	3b30      	subs	r3, #48	; 0x30
 80229f0:	b29b      	uxth	r3, r3
 80229f2:	2b09      	cmp	r3, #9
 80229f4:	d8e3      	bhi.n	80229be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 80229f6:	3202      	adds	r2, #2
 80229f8:	6022      	str	r2, [r4, #0]
 80229fa:	e7f6      	b.n	80229ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>

080229fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80229fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a00:	b0a3      	sub	sp, #140	; 0x8c
 8022a02:	2500      	movs	r5, #0
 8022a04:	4606      	mov	r6, r0
 8022a06:	4689      	mov	r9, r1
 8022a08:	af11      	add	r7, sp, #68	; 0x44
 8022a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8022a0c:	4629      	mov	r1, r5
 8022a0e:	2242      	movs	r2, #66	; 0x42
 8022a10:	4638      	mov	r0, r7
 8022a12:	461c      	mov	r4, r3
 8022a14:	950d      	str	r5, [sp, #52]	; 0x34
 8022a16:	f7fe ff58 	bl	80218ca <_ZN8touchgfx6memsetEPvhm>
 8022a1a:	b116      	cbz	r6, 8022a22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 8022a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022a1e:	b921      	cbnz	r1, 8022a2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 8022a20:	8031      	strh	r1, [r6, #0]
 8022a22:	4630      	mov	r0, r6
 8022a24:	b023      	add	sp, #140	; 0x8c
 8022a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a2a:	f8df a250 	ldr.w	sl, [pc, #592]	; 8022c7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 8022a2e:	f109 3bff 	add.w	fp, r9, #4294967295
 8022a32:	f8da 0000 	ldr.w	r0, [sl]
 8022a36:	6803      	ldr	r3, [r0, #0]
 8022a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a3a:	4798      	blx	r3
 8022a3c:	9009      	str	r0, [sp, #36]	; 0x24
 8022a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a40:	881a      	ldrh	r2, [r3, #0]
 8022a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a44:	2a00      	cmp	r2, #0
 8022a46:	f000 80c2 	beq.w	8022bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 8022a4a:	459b      	cmp	fp, r3
 8022a4c:	f340 80bf 	ble.w	8022bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 8022a50:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8022a54:	f8b8 2000 	ldrh.w	r2, [r8]
 8022a58:	2a00      	cmp	r2, #0
 8022a5a:	d0f0      	beq.n	8022a3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 8022a5c:	2a25      	cmp	r2, #37	; 0x25
 8022a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a60:	f000 80b9 	beq.w	8022bd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 8022a64:	459b      	cmp	fp, r3
 8022a66:	f340 80b6 	ble.w	8022bd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 8022a6a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8022a6e:	f108 0202 	add.w	r2, r8, #2
 8022a72:	3301      	adds	r3, #1
 8022a74:	9209      	str	r2, [sp, #36]	; 0x24
 8022a76:	930d      	str	r3, [sp, #52]	; 0x34
 8022a78:	e7ea      	b.n	8022a50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 8022a7a:	3b63      	subs	r3, #99	; 0x63
 8022a7c:	2b01      	cmp	r3, #1
 8022a7e:	f200 80f2 	bhi.w	8022c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 8022a82:	9710      	str	r7, [sp, #64]	; 0x40
 8022a84:	8813      	ldrh	r3, [r2, #0]
 8022a86:	2b69      	cmp	r3, #105	; 0x69
 8022a88:	d068      	beq.n	8022b5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 8022a8a:	d81c      	bhi.n	8022ac6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 8022a8c:	2b63      	cmp	r3, #99	; 0x63
 8022a8e:	d031      	beq.n	8022af4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 8022a90:	2b64      	cmp	r3, #100	; 0x64
 8022a92:	d063      	beq.n	8022b5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 8022a94:	2b58      	cmp	r3, #88	; 0x58
 8022a96:	f000 8082 	beq.w	8022b9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 8022a9a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8022a9e:	46a0      	mov	r8, r4
 8022aa0:	e02f      	b.n	8022b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8022aa2:	2b73      	cmp	r3, #115	; 0x73
 8022aa4:	d0ed      	beq.n	8022a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8022aa6:	d803      	bhi.n	8022ab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 8022aa8:	2b6f      	cmp	r3, #111	; 0x6f
 8022aaa:	f040 80dc 	bne.w	8022c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 8022aae:	e7e8      	b.n	8022a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8022ab0:	2b75      	cmp	r3, #117	; 0x75
 8022ab2:	d0e6      	beq.n	8022a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8022ab4:	2b78      	cmp	r3, #120	; 0x78
 8022ab6:	e7f8      	b.n	8022aaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 8022ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022aba:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8022abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ac0:	3302      	adds	r3, #2
 8022ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8022ac4:	e7bb      	b.n	8022a3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 8022ac6:	2b73      	cmp	r3, #115	; 0x73
 8022ac8:	d037      	beq.n	8022b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 8022aca:	d808      	bhi.n	8022ade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 8022acc:	2b6f      	cmp	r3, #111	; 0x6f
 8022ace:	d1e4      	bne.n	8022a9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 8022ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022ad2:	f104 0804 	add.w	r8, r4, #4
 8022ad6:	2308      	movs	r3, #8
 8022ad8:	eba9 0202 	sub.w	r2, r9, r2
 8022adc:	e059      	b.n	8022b92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 8022ade:	2b75      	cmp	r3, #117	; 0x75
 8022ae0:	d051      	beq.n	8022b86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 8022ae2:	2b78      	cmp	r3, #120	; 0x78
 8022ae4:	d1d9      	bne.n	8022a9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 8022ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022ae8:	f104 0804 	add.w	r8, r4, #4
 8022aec:	2310      	movs	r3, #16
 8022aee:	eba9 0202 	sub.w	r2, r9, r2
 8022af2:	e04e      	b.n	8022b92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 8022af4:	7823      	ldrb	r3, [r4, #0]
 8022af6:	f104 0804 	add.w	r8, r4, #4
 8022afa:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8022afe:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8022b02:	aa0d      	add	r2, sp, #52	; 0x34
 8022b04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8022b08:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8022b0c:	a810      	add	r0, sp, #64	; 0x40
 8022b0e:	9205      	str	r2, [sp, #20]
 8022b10:	4644      	mov	r4, r8
 8022b12:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8022b16:	9607      	str	r6, [sp, #28]
 8022b18:	9204      	str	r2, [sp, #16]
 8022b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022b1c:	f8cd 9018 	str.w	r9, [sp, #24]
 8022b20:	9203      	str	r2, [sp, #12]
 8022b22:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8022b26:	9202      	str	r2, [sp, #8]
 8022b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022b2a:	9201      	str	r2, [sp, #4]
 8022b2c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8022b30:	9200      	str	r2, [sp, #0]
 8022b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022b34:	f7ff fe3f 	bl	80227b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8022b38:	e7c1      	b.n	8022abe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 8022b3a:	f8da 0000 	ldr.w	r0, [sl]
 8022b3e:	f104 0804 	add.w	r8, r4, #4
 8022b42:	6821      	ldr	r1, [r4, #0]
 8022b44:	6803      	ldr	r3, [r0, #0]
 8022b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022b48:	4798      	blx	r3
 8022b4a:	9010      	str	r0, [sp, #64]	; 0x40
 8022b4c:	f8da 0000 	ldr.w	r0, [sl]
 8022b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022b52:	6803      	ldr	r3, [r0, #0]
 8022b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022b56:	4798      	blx	r3
 8022b58:	9009      	str	r0, [sp, #36]	; 0x24
 8022b5a:	e7d2      	b.n	8022b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8022b5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b5e:	230a      	movs	r3, #10
 8022b60:	4639      	mov	r1, r7
 8022b62:	6820      	ldr	r0, [r4, #0]
 8022b64:	eba9 0202 	sub.w	r2, r9, r2
 8022b68:	f104 0804 	add.w	r8, r4, #4
 8022b6c:	b292      	uxth	r2, r2
 8022b6e:	f7ff fde1 	bl	8022734 <_ZN8touchgfx7Unicode4itoaElPtti>
 8022b72:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8022b76:	2b2d      	cmp	r3, #45	; 0x2d
 8022b78:	d1c3      	bne.n	8022b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8022b7a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022b7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022b80:	3302      	adds	r3, #2
 8022b82:	9310      	str	r3, [sp, #64]	; 0x40
 8022b84:	e7bd      	b.n	8022b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8022b86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b88:	f104 0804 	add.w	r8, r4, #4
 8022b8c:	230a      	movs	r3, #10
 8022b8e:	eba9 0202 	sub.w	r2, r9, r2
 8022b92:	b292      	uxth	r2, r2
 8022b94:	4639      	mov	r1, r7
 8022b96:	6820      	ldr	r0, [r4, #0]
 8022b98:	f7ff fdaf 	bl	80226fa <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 8022b9c:	e7b1      	b.n	8022b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8022b9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022ba0:	2310      	movs	r3, #16
 8022ba2:	4639      	mov	r1, r7
 8022ba4:	6820      	ldr	r0, [r4, #0]
 8022ba6:	eba9 0202 	sub.w	r2, r9, r2
 8022baa:	f104 0804 	add.w	r8, r4, #4
 8022bae:	b292      	uxth	r2, r2
 8022bb0:	f7ff fda3 	bl	80226fa <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 8022bb4:	463a      	mov	r2, r7
 8022bb6:	8813      	ldrh	r3, [r2, #0]
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	d0a2      	beq.n	8022b02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8022bbc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8022bc0:	3202      	adds	r2, #2
 8022bc2:	2919      	cmp	r1, #25
 8022bc4:	bf9c      	itt	ls
 8022bc6:	3b20      	subls	r3, #32
 8022bc8:	f822 3c02 	strhls.w	r3, [r2, #-2]
 8022bcc:	e7f3      	b.n	8022bb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 8022bce:	2200      	movs	r2, #0
 8022bd0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8022bd4:	e725      	b.n	8022a22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 8022bd6:	459b      	cmp	fp, r3
 8022bd8:	f77f af31 	ble.w	8022a3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 8022bdc:	f108 0302 	add.w	r3, r8, #2
 8022be0:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8022be4:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8022be8:	a809      	add	r0, sp, #36	; 0x24
 8022bea:	9309      	str	r3, [sp, #36]	; 0x24
 8022bec:	ab0f      	add	r3, sp, #60	; 0x3c
 8022bee:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8022bf2:	9304      	str	r3, [sp, #16]
 8022bf4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8022bf8:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8022bfc:	9303      	str	r3, [sp, #12]
 8022bfe:	ab0e      	add	r3, sp, #56	; 0x38
 8022c00:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 8022c04:	9302      	str	r3, [sp, #8]
 8022c06:	ab0c      	add	r3, sp, #48	; 0x30
 8022c08:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8022c0c:	9301      	str	r3, [sp, #4]
 8022c0e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8022c12:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 8022c16:	9300      	str	r3, [sp, #0]
 8022c18:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8022c1c:	950e      	str	r5, [sp, #56]	; 0x38
 8022c1e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8022c22:	950f      	str	r5, [sp, #60]	; 0x3c
 8022c24:	f7ff fe73 	bl	802290e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8022c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	bfbf      	itttt	lt
 8022c30:	6823      	ldrlt	r3, [r4, #0]
 8022c32:	3404      	addlt	r4, #4
 8022c34:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8022c38:	930e      	strlt	r3, [sp, #56]	; 0x38
 8022c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c3c:	2b00      	cmp	r3, #0
 8022c3e:	bfbf      	itttt	lt
 8022c40:	6823      	ldrlt	r3, [r4, #0]
 8022c42:	3404      	addlt	r4, #4
 8022c44:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8022c48:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8022c4a:	8813      	ldrh	r3, [r2, #0]
 8022c4c:	2b69      	cmp	r3, #105	; 0x69
 8022c4e:	f43f af18 	beq.w	8022a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8022c52:	f63f af26 	bhi.w	8022aa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 8022c56:	2b58      	cmp	r3, #88	; 0x58
 8022c58:	f43f af13 	beq.w	8022a82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8022c5c:	f63f af0d 	bhi.w	8022a7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 8022c60:	2b25      	cmp	r3, #37	; 0x25
 8022c62:	f43f af29 	beq.w	8022ab8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 8022c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022c68:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8022c6c:	f8b8 2000 	ldrh.w	r2, [r8]
 8022c70:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8022c74:	3301      	adds	r3, #1
 8022c76:	930d      	str	r3, [sp, #52]	; 0x34
 8022c78:	e721      	b.n	8022abe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 8022c7a:	bf00      	nop
 8022c7c:	2000bb14 	.word	0x2000bb14

08022c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8022c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c82:	4605      	mov	r5, r0
 8022c84:	b0a1      	sub	sp, #132	; 0x84
 8022c86:	4610      	mov	r0, r2
 8022c88:	460e      	mov	r6, r1
 8022c8a:	4614      	mov	r4, r2
 8022c8c:	461f      	mov	r7, r3
 8022c8e:	f7ff fd16 	bl	80226be <_ZN8touchgfx7Unicode6strlenEPKc>
 8022c92:	283f      	cmp	r0, #63	; 0x3f
 8022c94:	dd06      	ble.n	8022ca4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 8022c96:	4b0a      	ldr	r3, [pc, #40]	; (8022cc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8022c98:	f240 11b9 	movw	r1, #441	; 0x1b9
 8022c9c:	4a09      	ldr	r2, [pc, #36]	; (8022cc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8022c9e:	480a      	ldr	r0, [pc, #40]	; (8022cc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8022ca0:	f002 fab4 	bl	802520c <__assert_func>
 8022ca4:	4621      	mov	r1, r4
 8022ca6:	2240      	movs	r2, #64	; 0x40
 8022ca8:	4668      	mov	r0, sp
 8022caa:	f7ff fd14 	bl	80226d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8022cae:	463b      	mov	r3, r7
 8022cb0:	466a      	mov	r2, sp
 8022cb2:	4631      	mov	r1, r6
 8022cb4:	4628      	mov	r0, r5
 8022cb6:	f7ff fea1 	bl	80229fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8022cba:	b021      	add	sp, #132	; 0x84
 8022cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022cbe:	bf00      	nop
 8022cc0:	08028b44 	.word	0x08028b44
 8022cc4:	08028b87 	.word	0x08028b87
 8022cc8:	08028b61 	.word	0x08028b61

08022ccc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8022ccc:	b40c      	push	{r2, r3}
 8022cce:	b507      	push	{r0, r1, r2, lr}
 8022cd0:	ab04      	add	r3, sp, #16
 8022cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8022cd6:	9301      	str	r3, [sp, #4]
 8022cd8:	f7ff ffd2 	bl	8022c80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8022cdc:	b003      	add	sp, #12
 8022cde:	f85d eb04 	ldr.w	lr, [sp], #4
 8022ce2:	b002      	add	sp, #8
 8022ce4:	4770      	bx	lr
	...

08022ce8 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt>:
 8022ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cea:	4604      	mov	r4, r0
 8022cec:	4f1f      	ldr	r7, [pc, #124]	; (8022d6c <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x84>)
 8022cee:	2000      	movs	r0, #0
 8022cf0:	4290      	cmp	r0, r2
 8022cf2:	da09      	bge.n	8022d08 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x20>
 8022cf4:	7823      	ldrb	r3, [r4, #0]
 8022cf6:	061d      	lsls	r5, r3, #24
 8022cf8:	d407      	bmi.n	8022d0a <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x22>
 8022cfa:	3401      	adds	r4, #1
 8022cfc:	800b      	strh	r3, [r1, #0]
 8022cfe:	3001      	adds	r0, #1
 8022d00:	1c8b      	adds	r3, r1, #2
 8022d02:	8809      	ldrh	r1, [r1, #0]
 8022d04:	b280      	uxth	r0, r0
 8022d06:	bb79      	cbnz	r1, 8022d68 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x80>
 8022d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d0a:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8022d0e:	2dc0      	cmp	r5, #192	; 0xc0
 8022d10:	d10d      	bne.n	8022d2e <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x46>
 8022d12:	7865      	ldrb	r5, [r4, #1]
 8022d14:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8022d18:	2e80      	cmp	r6, #128	; 0x80
 8022d1a:	d108      	bne.n	8022d2e <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x46>
 8022d1c:	019b      	lsls	r3, r3, #6
 8022d1e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8022d22:	3402      	adds	r4, #2
 8022d24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8022d28:	432b      	orrs	r3, r5
 8022d2a:	800b      	strh	r3, [r1, #0]
 8022d2c:	e7e7      	b.n	8022cfe <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x16>
 8022d2e:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8022d32:	2de0      	cmp	r5, #224	; 0xe0
 8022d34:	d116      	bne.n	8022d64 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x7c>
 8022d36:	7866      	ldrb	r6, [r4, #1]
 8022d38:	f006 05c0 	and.w	r5, r6, #192	; 0xc0
 8022d3c:	2d80      	cmp	r5, #128	; 0x80
 8022d3e:	d111      	bne.n	8022d64 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x7c>
 8022d40:	78a5      	ldrb	r5, [r4, #2]
 8022d42:	f005 0ec0 	and.w	lr, r5, #192	; 0xc0
 8022d46:	f1be 0f80 	cmp.w	lr, #128	; 0x80
 8022d4a:	d10b      	bne.n	8022d64 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x7c>
 8022d4c:	01b6      	lsls	r6, r6, #6
 8022d4e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8022d52:	ea07 3303 	and.w	r3, r7, r3, lsl #12
 8022d56:	3403      	adds	r4, #3
 8022d58:	f406 667c 	and.w	r6, r6, #4032	; 0xfc0
 8022d5c:	4333      	orrs	r3, r6
 8022d5e:	432b      	orrs	r3, r5
 8022d60:	800b      	strh	r3, [r1, #0]
 8022d62:	e7cc      	b.n	8022cfe <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x16>
 8022d64:	3401      	adds	r4, #1
 8022d66:	460b      	mov	r3, r1
 8022d68:	4619      	mov	r1, r3
 8022d6a:	e7c1      	b.n	8022cf0 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x8>
 8022d6c:	fffff000 	.word	0xfffff000

08022d70 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 8022d70:	4b26      	ldr	r3, [pc, #152]	; (8022e0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 8022d72:	b570      	push	{r4, r5, r6, lr}
 8022d74:	681b      	ldr	r3, [r3, #0]
 8022d76:	4605      	mov	r5, r0
 8022d78:	460c      	mov	r4, r1
 8022d7a:	4616      	mov	r6, r2
 8022d7c:	b92b      	cbnz	r3, 8022d8a <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 8022d7e:	4b24      	ldr	r3, [pc, #144]	; (8022e10 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 8022d80:	2116      	movs	r1, #22
 8022d82:	4a24      	ldr	r2, [pc, #144]	; (8022e14 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 8022d84:	4824      	ldr	r0, [pc, #144]	; (8022e18 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 8022d86:	f002 fa41 	bl	802520c <__assert_func>
 8022d8a:	6898      	ldr	r0, [r3, #8]
 8022d8c:	6803      	ldr	r3, [r0, #0]
 8022d8e:	6a1b      	ldr	r3, [r3, #32]
 8022d90:	4798      	blx	r3
 8022d92:	2810      	cmp	r0, #16
 8022d94:	d109      	bne.n	8022daa <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 8022d96:	00e0      	lsls	r0, r4, #3
 8022d98:	022c      	lsls	r4, r5, #8
 8022d9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022d9e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022da2:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 8022da6:	4320      	orrs	r0, r4
 8022da8:	bd70      	pop	{r4, r5, r6, pc}
 8022daa:	2818      	cmp	r0, #24
 8022dac:	d104      	bne.n	8022db8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 8022dae:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 8022db2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8022db6:	bd70      	pop	{r4, r5, r6, pc}
 8022db8:	2804      	cmp	r0, #4
 8022dba:	f04f 01b6 	mov.w	r1, #182	; 0xb6
 8022dbe:	d109      	bne.n	8022dd4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 8022dc0:	fb14 f401 	smulbb	r4, r4, r1
 8022dc4:	2036      	movs	r0, #54	; 0x36
 8022dc6:	fb10 4405 	smlabb	r4, r0, r5, r4
 8022dca:	2013      	movs	r0, #19
 8022dcc:	fb10 4006 	smlabb	r0, r0, r6, r4
 8022dd0:	1300      	asrs	r0, r0, #12
 8022dd2:	bd70      	pop	{r4, r5, r6, pc}
 8022dd4:	2802      	cmp	r0, #2
 8022dd6:	d109      	bne.n	8022dec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 8022dd8:	fb14 f401 	smulbb	r4, r4, r1
 8022ddc:	2036      	movs	r0, #54	; 0x36
 8022dde:	fb10 4405 	smlabb	r4, r0, r5, r4
 8022de2:	2013      	movs	r0, #19
 8022de4:	fb10 4006 	smlabb	r0, r0, r6, r4
 8022de8:	1380      	asrs	r0, r0, #14
 8022dea:	bd70      	pop	{r4, r5, r6, pc}
 8022dec:	2801      	cmp	r0, #1
 8022dee:	d109      	bne.n	8022e04 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 8022df0:	fb14 f401 	smulbb	r4, r4, r1
 8022df4:	2036      	movs	r0, #54	; 0x36
 8022df6:	fb10 4405 	smlabb	r4, r0, r5, r4
 8022dfa:	2013      	movs	r0, #19
 8022dfc:	fb10 4006 	smlabb	r0, r0, r6, r4
 8022e00:	13c0      	asrs	r0, r0, #15
 8022e02:	bd70      	pop	{r4, r5, r6, pc}
 8022e04:	4b05      	ldr	r3, [pc, #20]	; (8022e1c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 8022e06:	212f      	movs	r1, #47	; 0x2f
 8022e08:	4a02      	ldr	r2, [pc, #8]	; (8022e14 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 8022e0a:	e7bb      	b.n	8022d84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 8022e0c:	2000bb14 	.word	0x2000bb14
 8022e10:	08028c0c 	.word	0x08028c0c
 8022e14:	08028c8f 	.word	0x08028c8f
 8022e18:	08028c4f 	.word	0x08028c4f
 8022e1c:	08028c73 	.word	0x08028c73

08022e20 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8022e20:	4b01      	ldr	r3, [pc, #4]	; (8022e28 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8022e22:	6018      	str	r0, [r3, #0]
 8022e24:	4770      	bx	lr
 8022e26:	bf00      	nop
 8022e28:	2000bba4 	.word	0x2000bba4

08022e2c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8022e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e30:	4f24      	ldr	r7, [pc, #144]	; (8022ec4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8022e32:	683b      	ldr	r3, [r7, #0]
 8022e34:	2b00      	cmp	r3, #0
 8022e36:	d042      	beq.n	8022ebe <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8022e38:	4923      	ldr	r1, [pc, #140]	; (8022ec8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8022e3a:	4d24      	ldr	r5, [pc, #144]	; (8022ecc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8022e3c:	8808      	ldrh	r0, [r1, #0]
 8022e3e:	882a      	ldrh	r2, [r5, #0]
 8022e40:	4e23      	ldr	r6, [pc, #140]	; (8022ed0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8022e42:	4410      	add	r0, r2
 8022e44:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 8022e48:	4c22      	ldr	r4, [pc, #136]	; (8022ed4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8022e4a:	1c41      	adds	r1, r0, #1
 8022e4c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8022e50:	f021 0101 	bic.w	r1, r1, #1
 8022e54:	eb03 0208 	add.w	r2, r3, r8
 8022e58:	0409      	lsls	r1, r1, #16
 8022e5a:	6032      	str	r2, [r6, #0]
 8022e5c:	0c09      	lsrs	r1, r1, #16
 8022e5e:	0049      	lsls	r1, r1, #1
 8022e60:	eb08 0c01 	add.w	ip, r8, r1
 8022e64:	eb03 020c 	add.w	r2, r3, ip
 8022e68:	44f4      	add	ip, lr
 8022e6a:	6022      	str	r2, [r4, #0]
 8022e6c:	4463      	add	r3, ip
 8022e6e:	4a1a      	ldr	r2, [pc, #104]	; (8022ed8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8022e70:	6013      	str	r3, [r2, #0]
 8022e72:	2300      	movs	r3, #0
 8022e74:	4a19      	ldr	r2, [pc, #100]	; (8022edc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8022e76:	8013      	strh	r3, [r2, #0]
 8022e78:	4a19      	ldr	r2, [pc, #100]	; (8022ee0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8022e7a:	6812      	ldr	r2, [r2, #0]
 8022e7c:	eba2 0208 	sub.w	r2, r2, r8
 8022e80:	1a52      	subs	r2, r2, r1
 8022e82:	4918      	ldr	r1, [pc, #96]	; (8022ee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8022e84:	eba2 020e 	sub.w	r2, r2, lr
 8022e88:	469e      	mov	lr, r3
 8022e8a:	600a      	str	r2, [r1, #0]
 8022e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8022e90:	4a15      	ldr	r2, [pc, #84]	; (8022ee8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8022e92:	8013      	strh	r3, [r2, #0]
 8022e94:	4283      	cmp	r3, r0
 8022e96:	d007      	beq.n	8022ea8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 8022e98:	683a      	ldr	r2, [r7, #0]
 8022e9a:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 8022e9e:	6832      	ldr	r2, [r6, #0]
 8022ea0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8022ea4:	3301      	adds	r3, #1
 8022ea6:	e7f5      	b.n	8022e94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 8022ea8:	2300      	movs	r3, #0
 8022eaa:	882d      	ldrh	r5, [r5, #0]
 8022eac:	6820      	ldr	r0, [r4, #0]
 8022eae:	4619      	mov	r1, r3
 8022eb0:	42ab      	cmp	r3, r5
 8022eb2:	d204      	bcs.n	8022ebe <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8022eb4:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 8022eb8:	3301      	adds	r3, #1
 8022eba:	7391      	strb	r1, [r2, #14]
 8022ebc:	e7f8      	b.n	8022eb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 8022ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ec2:	bf00      	nop
 8022ec4:	2000bba8 	.word	0x2000bba8
 8022ec8:	2000bbc4 	.word	0x2000bbc4
 8022ecc:	2000bbc8 	.word	0x2000bbc8
 8022ed0:	2000bbbc 	.word	0x2000bbbc
 8022ed4:	2000bbac 	.word	0x2000bbac
 8022ed8:	2000bbb4 	.word	0x2000bbb4
 8022edc:	2000bbc6 	.word	0x2000bbc6
 8022ee0:	2000bbb0 	.word	0x2000bbb0
 8022ee4:	2000bbc0 	.word	0x2000bbc0
 8022ee8:	2000bbb8 	.word	0x2000bbb8

08022eec <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8022eec:	4b0f      	ldr	r3, [pc, #60]	; (8022f2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 8022eee:	b510      	push	{r4, lr}
 8022ef0:	681b      	ldr	r3, [r3, #0]
 8022ef2:	b9d3      	cbnz	r3, 8022f2a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8022ef4:	b1c9      	cbz	r1, 8022f2a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8022ef6:	4b0e      	ldr	r3, [pc, #56]	; (8022f30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8022ef8:	2406      	movs	r4, #6
 8022efa:	801a      	strh	r2, [r3, #0]
 8022efc:	b292      	uxth	r2, r2
 8022efe:	4b0d      	ldr	r3, [pc, #52]	; (8022f34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8022f00:	881b      	ldrh	r3, [r3, #0]
 8022f02:	4413      	add	r3, r2
 8022f04:	0112      	lsls	r2, r2, #4
 8022f06:	fb04 2203 	mla	r2, r4, r3, r2
 8022f0a:	4291      	cmp	r1, r2
 8022f0c:	d805      	bhi.n	8022f1a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 8022f0e:	4b0a      	ldr	r3, [pc, #40]	; (8022f38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8022f10:	2138      	movs	r1, #56	; 0x38
 8022f12:	4a0a      	ldr	r2, [pc, #40]	; (8022f3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8022f14:	480a      	ldr	r0, [pc, #40]	; (8022f40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8022f16:	f002 f979 	bl	802520c <__assert_func>
 8022f1a:	4b0a      	ldr	r3, [pc, #40]	; (8022f44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8022f1c:	6019      	str	r1, [r3, #0]
 8022f1e:	4b0a      	ldr	r3, [pc, #40]	; (8022f48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8022f20:	6018      	str	r0, [r3, #0]
 8022f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f26:	f7ff bf81 	b.w	8022e2c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8022f2a:	bd10      	pop	{r4, pc}
 8022f2c:	2000bbb4 	.word	0x2000bbb4
 8022f30:	2000bbc8 	.word	0x2000bbc8
 8022f34:	2000bbc4 	.word	0x2000bbc4
 8022f38:	08028d4f 	.word	0x08028d4f
 8022f3c:	08028de4 	.word	0x08028de4
 8022f40:	08028d2a 	.word	0x08028d2a
 8022f44:	2000bbb0 	.word	0x2000bbb0
 8022f48:	2000bba8 	.word	0x2000bba8

08022f4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8022f4c:	b470      	push	{r4, r5, r6}
 8022f4e:	4c07      	ldr	r4, [pc, #28]	; (8022f6c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8022f50:	4605      	mov	r5, r0
 8022f52:	4610      	mov	r0, r2
 8022f54:	9a03      	ldr	r2, [sp, #12]
 8022f56:	6826      	ldr	r6, [r4, #0]
 8022f58:	b936      	cbnz	r6, 8022f68 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8022f5a:	6025      	str	r5, [r4, #0]
 8022f5c:	4c04      	ldr	r4, [pc, #16]	; (8022f70 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8022f5e:	8021      	strh	r1, [r4, #0]
 8022f60:	4619      	mov	r1, r3
 8022f62:	bc70      	pop	{r4, r5, r6}
 8022f64:	f7ff bfc2 	b.w	8022eec <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8022f68:	bc70      	pop	{r4, r5, r6}
 8022f6a:	4770      	bx	lr
 8022f6c:	2000bbcc 	.word	0x2000bbcc
 8022f70:	2000bbc4 	.word	0x2000bbc4

08022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8022f74:	b508      	push	{r3, lr}
 8022f76:	4b13      	ldr	r3, [pc, #76]	; (8022fc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8022f78:	6819      	ldr	r1, [r3, #0]
 8022f7a:	b931      	cbnz	r1, 8022f8a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8022f7c:	4b12      	ldr	r3, [pc, #72]	; (8022fc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8022f7e:	f44f 710d 	mov.w	r1, #564	; 0x234
 8022f82:	4a12      	ldr	r2, [pc, #72]	; (8022fcc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8022f84:	4812      	ldr	r0, [pc, #72]	; (8022fd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8022f86:	f002 f941 	bl	802520c <__assert_func>
 8022f8a:	4a12      	ldr	r2, [pc, #72]	; (8022fd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8022f8c:	8803      	ldrh	r3, [r0, #0]
 8022f8e:	8812      	ldrh	r2, [r2, #0]
 8022f90:	4293      	cmp	r3, r2
 8022f92:	da04      	bge.n	8022f9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8022f94:	2214      	movs	r2, #20
 8022f96:	fb02 1303 	mla	r3, r2, r3, r1
 8022f9a:	8918      	ldrh	r0, [r3, #8]
 8022f9c:	bd08      	pop	{r3, pc}
 8022f9e:	490e      	ldr	r1, [pc, #56]	; (8022fd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8022fa0:	8809      	ldrh	r1, [r1, #0]
 8022fa2:	4411      	add	r1, r2
 8022fa4:	428b      	cmp	r3, r1
 8022fa6:	da05      	bge.n	8022fb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 8022fa8:	1a9b      	subs	r3, r3, r2
 8022faa:	4a0c      	ldr	r2, [pc, #48]	; (8022fdc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8022fac:	6812      	ldr	r2, [r2, #0]
 8022fae:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8022fb2:	e7f2      	b.n	8022f9a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8022fb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8022fb8:	4293      	cmp	r3, r2
 8022fba:	bf06      	itte	eq
 8022fbc:	4b08      	ldreq	r3, [pc, #32]	; (8022fe0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8022fbe:	8818      	ldrheq	r0, [r3, #0]
 8022fc0:	2000      	movne	r0, #0
 8022fc2:	bd08      	pop	{r3, pc}
 8022fc4:	2000bbcc 	.word	0x2000bbcc
 8022fc8:	08028da8 	.word	0x08028da8
 8022fcc:	08028e91 	.word	0x08028e91
 8022fd0:	08028d2a 	.word	0x08028d2a
 8022fd4:	2000bbc4 	.word	0x2000bbc4
 8022fd8:	2000bbc8 	.word	0x2000bbc8
 8022fdc:	2000bbac 	.word	0x2000bbac
 8022fe0:	2000bb06 	.word	0x2000bb06

08022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8022fe4:	b508      	push	{r3, lr}
 8022fe6:	4b13      	ldr	r3, [pc, #76]	; (8023034 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8022fe8:	6819      	ldr	r1, [r3, #0]
 8022fea:	b931      	cbnz	r1, 8022ffa <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8022fec:	4b12      	ldr	r3, [pc, #72]	; (8023038 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8022fee:	f44f 7112 	mov.w	r1, #584	; 0x248
 8022ff2:	4a12      	ldr	r2, [pc, #72]	; (802303c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8022ff4:	4812      	ldr	r0, [pc, #72]	; (8023040 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8022ff6:	f002 f909 	bl	802520c <__assert_func>
 8022ffa:	4a12      	ldr	r2, [pc, #72]	; (8023044 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8022ffc:	8803      	ldrh	r3, [r0, #0]
 8022ffe:	8812      	ldrh	r2, [r2, #0]
 8023000:	4293      	cmp	r3, r2
 8023002:	da04      	bge.n	802300e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8023004:	2214      	movs	r2, #20
 8023006:	fb02 1303 	mla	r3, r2, r3, r1
 802300a:	8958      	ldrh	r0, [r3, #10]
 802300c:	bd08      	pop	{r3, pc}
 802300e:	490e      	ldr	r1, [pc, #56]	; (8023048 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8023010:	8809      	ldrh	r1, [r1, #0]
 8023012:	4411      	add	r1, r2
 8023014:	428b      	cmp	r3, r1
 8023016:	da05      	bge.n	8023024 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 8023018:	1a9b      	subs	r3, r3, r2
 802301a:	4a0c      	ldr	r2, [pc, #48]	; (802304c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 802301c:	6812      	ldr	r2, [r2, #0]
 802301e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8023022:	e7f2      	b.n	802300a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8023024:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8023028:	4293      	cmp	r3, r2
 802302a:	bf06      	itte	eq
 802302c:	4b08      	ldreq	r3, [pc, #32]	; (8023050 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 802302e:	8818      	ldrheq	r0, [r3, #0]
 8023030:	2000      	movne	r0, #0
 8023032:	bd08      	pop	{r3, pc}
 8023034:	2000bbcc 	.word	0x2000bbcc
 8023038:	08028da8 	.word	0x08028da8
 802303c:	08028ebd 	.word	0x08028ebd
 8023040:	08028d2a 	.word	0x08028d2a
 8023044:	2000bbc4 	.word	0x2000bbc4
 8023048:	2000bbc8 	.word	0x2000bbc8
 802304c:	2000bbac 	.word	0x2000bbac
 8023050:	2000bb08 	.word	0x2000bb08

08023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8023054:	4b22      	ldr	r3, [pc, #136]	; (80230e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8023056:	b510      	push	{r4, lr}
 8023058:	681c      	ldr	r4, [r3, #0]
 802305a:	b934      	cbnz	r4, 802306a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 802305c:	4b21      	ldr	r3, [pc, #132]	; (80230e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 802305e:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8023062:	4a21      	ldr	r2, [pc, #132]	; (80230e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8023064:	4821      	ldr	r0, [pc, #132]	; (80230ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8023066:	f002 f8d1 	bl	802520c <__assert_func>
 802306a:	4a21      	ldr	r2, [pc, #132]	; (80230f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 802306c:	880b      	ldrh	r3, [r1, #0]
 802306e:	8812      	ldrh	r2, [r2, #0]
 8023070:	4293      	cmp	r3, r2
 8023072:	da10      	bge.n	8023096 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 8023074:	2214      	movs	r2, #20
 8023076:	fb02 4303 	mla	r3, r2, r3, r4
 802307a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 802307e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8023082:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8023086:	8a5b      	ldrh	r3, [r3, #18]
 8023088:	8004      	strh	r4, [r0, #0]
 802308a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802308e:	8041      	strh	r1, [r0, #2]
 8023090:	8082      	strh	r2, [r0, #4]
 8023092:	80c3      	strh	r3, [r0, #6]
 8023094:	bd10      	pop	{r4, pc}
 8023096:	4917      	ldr	r1, [pc, #92]	; (80230f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8023098:	8809      	ldrh	r1, [r1, #0]
 802309a:	4411      	add	r1, r2
 802309c:	428b      	cmp	r3, r1
 802309e:	da09      	bge.n	80230b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80230a0:	1a9b      	subs	r3, r3, r2
 80230a2:	4a15      	ldr	r2, [pc, #84]	; (80230f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80230a4:	6812      	ldr	r2, [r2, #0]
 80230a6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80230aa:	681a      	ldr	r2, [r3, #0]
 80230ac:	6002      	str	r2, [r0, #0]
 80230ae:	685a      	ldr	r2, [r3, #4]
 80230b0:	6042      	str	r2, [r0, #4]
 80230b2:	bd10      	pop	{r4, pc}
 80230b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80230b8:	4293      	cmp	r3, r2
 80230ba:	d10b      	bne.n	80230d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 80230bc:	4b0f      	ldr	r3, [pc, #60]	; (80230fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80230be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80230c2:	4b0f      	ldr	r3, [pc, #60]	; (8023100 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80230c4:	8081      	strh	r1, [r0, #4]
 80230c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80230ca:	2300      	movs	r3, #0
 80230cc:	80c2      	strh	r2, [r0, #6]
 80230ce:	8003      	strh	r3, [r0, #0]
 80230d0:	8043      	strh	r3, [r0, #2]
 80230d2:	bd10      	pop	{r4, pc}
 80230d4:	2300      	movs	r3, #0
 80230d6:	8003      	strh	r3, [r0, #0]
 80230d8:	8043      	strh	r3, [r0, #2]
 80230da:	8083      	strh	r3, [r0, #4]
 80230dc:	e7d9      	b.n	8023092 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 80230de:	bf00      	nop
 80230e0:	2000bbcc 	.word	0x2000bbcc
 80230e4:	08028da8 	.word	0x08028da8
 80230e8:	08028e2a 	.word	0x08028e2a
 80230ec:	08028d2a 	.word	0x08028d2a
 80230f0:	2000bbc4 	.word	0x2000bbc4
 80230f4:	2000bbc8 	.word	0x2000bbc8
 80230f8:	2000bbac 	.word	0x2000bbac
 80230fc:	2000bb06 	.word	0x2000bb06
 8023100:	2000bb08 	.word	0x2000bb08

08023104 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8023104:	4b16      	ldr	r3, [pc, #88]	; (8023160 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 8023106:	681b      	ldr	r3, [r3, #0]
 8023108:	b333      	cbz	r3, 8023158 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 802310a:	4a16      	ldr	r2, [pc, #88]	; (8023164 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 802310c:	8800      	ldrh	r0, [r0, #0]
 802310e:	8812      	ldrh	r2, [r2, #0]
 8023110:	4290      	cmp	r0, r2
 8023112:	da0f      	bge.n	8023134 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 8023114:	2214      	movs	r2, #20
 8023116:	fb02 3300 	mla	r3, r2, r0, r3
 802311a:	8a19      	ldrh	r1, [r3, #16]
 802311c:	891a      	ldrh	r2, [r3, #8]
 802311e:	4291      	cmp	r1, r2
 8023120:	db1c      	blt.n	802315c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8023122:	8a58      	ldrh	r0, [r3, #18]
 8023124:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8023128:	895b      	ldrh	r3, [r3, #10]
 802312a:	4298      	cmp	r0, r3
 802312c:	bfac      	ite	ge
 802312e:	2000      	movge	r0, #0
 8023130:	2001      	movlt	r0, #1
 8023132:	4770      	bx	lr
 8023134:	4b0c      	ldr	r3, [pc, #48]	; (8023168 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8023136:	881b      	ldrh	r3, [r3, #0]
 8023138:	4413      	add	r3, r2
 802313a:	4298      	cmp	r0, r3
 802313c:	da0c      	bge.n	8023158 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 802313e:	4b0b      	ldr	r3, [pc, #44]	; (802316c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8023140:	1a80      	subs	r0, r0, r2
 8023142:	681b      	ldr	r3, [r3, #0]
 8023144:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8023148:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 802314c:	891a      	ldrh	r2, [r3, #8]
 802314e:	4291      	cmp	r1, r2
 8023150:	db04      	blt.n	802315c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8023152:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8023156:	e7e7      	b.n	8023128 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 8023158:	2000      	movs	r0, #0
 802315a:	4770      	bx	lr
 802315c:	2001      	movs	r0, #1
 802315e:	4770      	bx	lr
 8023160:	2000bbcc 	.word	0x2000bbcc
 8023164:	2000bbc4 	.word	0x2000bbc4
 8023168:	2000bbc8 	.word	0x2000bbc8
 802316c:	2000bbac 	.word	0x2000bbac

08023170 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8023170:	b508      	push	{r3, lr}
 8023172:	4b11      	ldr	r3, [pc, #68]	; (80231b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 8023174:	6819      	ldr	r1, [r3, #0]
 8023176:	b931      	cbnz	r1, 8023186 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8023178:	4b10      	ldr	r3, [pc, #64]	; (80231bc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 802317a:	f44f 7120 	mov.w	r1, #640	; 0x280
 802317e:	4a10      	ldr	r2, [pc, #64]	; (80231c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8023180:	4810      	ldr	r0, [pc, #64]	; (80231c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8023182:	f002 f843 	bl	802520c <__assert_func>
 8023186:	8803      	ldrh	r3, [r0, #0]
 8023188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802318c:	4293      	cmp	r3, r2
 802318e:	d011      	beq.n	80231b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 8023190:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8023194:	4293      	cmp	r3, r2
 8023196:	d103      	bne.n	80231a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8023198:	4b0b      	ldr	r3, [pc, #44]	; (80231c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 802319e:	bd08      	pop	{r3, pc}
 80231a0:	4a0a      	ldr	r2, [pc, #40]	; (80231cc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80231a2:	6812      	ldr	r2, [r2, #0]
 80231a4:	b112      	cbz	r2, 80231ac <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 80231a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80231aa:	b920      	cbnz	r0, 80231b6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80231ac:	2214      	movs	r2, #20
 80231ae:	4353      	muls	r3, r2
 80231b0:	58c8      	ldr	r0, [r1, r3]
 80231b2:	bd08      	pop	{r3, pc}
 80231b4:	2000      	movs	r0, #0
 80231b6:	bd08      	pop	{r3, pc}
 80231b8:	2000bbcc 	.word	0x2000bbcc
 80231bc:	08028da8 	.word	0x08028da8
 80231c0:	08028e60 	.word	0x08028e60
 80231c4:	08028d2a 	.word	0x08028d2a
 80231c8:	2000bb14 	.word	0x2000bb14
 80231cc:	2000bba8 	.word	0x2000bba8

080231d0 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 80231d0:	8802      	ldrh	r2, [r0, #0]
 80231d2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80231d6:	429a      	cmp	r2, r3
 80231d8:	dc19      	bgt.n	802320e <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 80231da:	4b0e      	ldr	r3, [pc, #56]	; (8023214 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 80231dc:	881b      	ldrh	r3, [r3, #0]
 80231de:	429a      	cmp	r2, r3
 80231e0:	da15      	bge.n	802320e <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 80231e2:	4b0d      	ldr	r3, [pc, #52]	; (8023218 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 80231e4:	6819      	ldr	r1, [r3, #0]
 80231e6:	2314      	movs	r3, #20
 80231e8:	fb03 1302 	mla	r3, r3, r2, r1
 80231ec:	6858      	ldr	r0, [r3, #4]
 80231ee:	b178      	cbz	r0, 8023210 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 80231f0:	490a      	ldr	r1, [pc, #40]	; (802321c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 80231f2:	6809      	ldr	r1, [r1, #0]
 80231f4:	b161      	cbz	r1, 8023210 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 80231f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80231fa:	b14a      	cbz	r2, 8023210 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 80231fc:	8919      	ldrh	r1, [r3, #8]
 80231fe:	8958      	ldrh	r0, [r3, #10]
 8023200:	4348      	muls	r0, r1
 8023202:	0040      	lsls	r0, r0, #1
 8023204:	3003      	adds	r0, #3
 8023206:	f020 0003 	bic.w	r0, r0, #3
 802320a:	4410      	add	r0, r2
 802320c:	4770      	bx	lr
 802320e:	2000      	movs	r0, #0
 8023210:	4770      	bx	lr
 8023212:	bf00      	nop
 8023214:	2000bbc4 	.word	0x2000bbc4
 8023218:	2000bbcc 	.word	0x2000bbcc
 802321c:	2000bba8 	.word	0x2000bba8

08023220 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8023220:	b508      	push	{r3, lr}
 8023222:	4b1c      	ldr	r3, [pc, #112]	; (8023294 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8023224:	6819      	ldr	r1, [r3, #0]
 8023226:	8803      	ldrh	r3, [r0, #0]
 8023228:	b1a9      	cbz	r1, 8023256 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 802322a:	4a1b      	ldr	r2, [pc, #108]	; (8023298 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 802322c:	8812      	ldrh	r2, [r2, #0]
 802322e:	4293      	cmp	r3, r2
 8023230:	da05      	bge.n	802323e <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 8023232:	2214      	movs	r2, #20
 8023234:	fb02 1303 	mla	r3, r2, r3, r1
 8023238:	7cd8      	ldrb	r0, [r3, #19]
 802323a:	0940      	lsrs	r0, r0, #5
 802323c:	bd08      	pop	{r3, pc}
 802323e:	4917      	ldr	r1, [pc, #92]	; (802329c <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 8023240:	8809      	ldrh	r1, [r1, #0]
 8023242:	4411      	add	r1, r2
 8023244:	428b      	cmp	r3, r1
 8023246:	da06      	bge.n	8023256 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 8023248:	1a9b      	subs	r3, r3, r2
 802324a:	4a15      	ldr	r2, [pc, #84]	; (80232a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 802324c:	6812      	ldr	r2, [r2, #0]
 802324e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8023252:	7b18      	ldrb	r0, [r3, #12]
 8023254:	bd08      	pop	{r3, pc}
 8023256:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802325a:	4293      	cmp	r3, r2
 802325c:	d10c      	bne.n	8023278 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 802325e:	4b11      	ldr	r3, [pc, #68]	; (80232a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8023260:	681b      	ldr	r3, [r3, #0]
 8023262:	6898      	ldr	r0, [r3, #8]
 8023264:	6803      	ldr	r3, [r0, #0]
 8023266:	6a1b      	ldr	r3, [r3, #32]
 8023268:	4798      	blx	r3
 802326a:	2804      	cmp	r0, #4
 802326c:	d00e      	beq.n	802328c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 802326e:	d805      	bhi.n	802327c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8023270:	2801      	cmp	r0, #1
 8023272:	d00d      	beq.n	8023290 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 8023274:	2802      	cmp	r0, #2
 8023276:	d007      	beq.n	8023288 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 8023278:	2000      	movs	r0, #0
 802327a:	bd08      	pop	{r3, pc}
 802327c:	2810      	cmp	r0, #16
 802327e:	d0fb      	beq.n	8023278 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8023280:	2818      	cmp	r0, #24
 8023282:	d1f9      	bne.n	8023278 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8023284:	2001      	movs	r0, #1
 8023286:	bd08      	pop	{r3, pc}
 8023288:	2005      	movs	r0, #5
 802328a:	bd08      	pop	{r3, pc}
 802328c:	2006      	movs	r0, #6
 802328e:	bd08      	pop	{r3, pc}
 8023290:	2003      	movs	r0, #3
 8023292:	bd08      	pop	{r3, pc}
 8023294:	2000bbcc 	.word	0x2000bbcc
 8023298:	2000bbc4 	.word	0x2000bbc4
 802329c:	2000bbc8 	.word	0x2000bbc8
 80232a0:	2000bbac 	.word	0x2000bbac
 80232a4:	2000bb14 	.word	0x2000bb14

080232a8 <_ZN8touchgfx8LCD16bppD1Ev>:
 80232a8:	4770      	bx	lr

080232aa <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80232aa:	2010      	movs	r0, #16
 80232ac:	4770      	bx	lr

080232ae <_ZN8touchgfx8LCD16bpp4initEv>:
 80232ae:	4770      	bx	lr

080232b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 80232b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80232b4:	b086      	sub	sp, #24
 80232b6:	6808      	ldr	r0, [r1, #0]
 80232b8:	6849      	ldr	r1, [r1, #4]
 80232ba:	4617      	mov	r7, r2
 80232bc:	ab04      	add	r3, sp, #16
 80232be:	ac04      	add	r4, sp, #16
 80232c0:	c303      	stmia	r3!, {r0, r1}
 80232c2:	4620      	mov	r0, r4
 80232c4:	f7fd fcc2 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80232c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80232cc:	429f      	cmp	r7, r3
 80232ce:	d109      	bne.n	80232e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 80232d0:	4b33      	ldr	r3, [pc, #204]	; (80233a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 80232d2:	781b      	ldrb	r3, [r3, #0]
 80232d4:	b933      	cbnz	r3, 80232e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 80232d6:	4b33      	ldr	r3, [pc, #204]	; (80233a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 80232d8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80232dc:	4a32      	ldr	r2, [pc, #200]	; (80233a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 80232de:	4833      	ldr	r0, [pc, #204]	; (80233ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 80232e0:	f001 ff94 	bl	802520c <__assert_func>
 80232e4:	4e32      	ldr	r6, [pc, #200]	; (80233b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 80232e6:	6830      	ldr	r0, [r6, #0]
 80232e8:	46b0      	mov	r8, r6
 80232ea:	6803      	ldr	r3, [r0, #0]
 80232ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80232ee:	4798      	blx	r3
 80232f0:	f010 0a01 	ands.w	sl, r0, #1
 80232f4:	d020      	beq.n	8023338 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 80232f6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80232fa:	429f      	cmp	r7, r3
 80232fc:	d108      	bne.n	8023310 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 80232fe:	6830      	ldr	r0, [r6, #0]
 8023300:	6803      	ldr	r3, [r0, #0]
 8023302:	e894 0006 	ldmia.w	r4, {r1, r2}
 8023306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023308:	4798      	blx	r3
 802330a:	b006      	add	sp, #24
 802330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023310:	ad06      	add	r5, sp, #24
 8023312:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8023316:	4628      	mov	r0, r5
 8023318:	f7ff ff2a 	bl	8023170 <_ZNK8touchgfx6Bitmap7getDataEv>
 802331c:	6836      	ldr	r6, [r6, #0]
 802331e:	4680      	mov	r8, r0
 8023320:	4628      	mov	r0, r5
 8023322:	6833      	ldr	r3, [r6, #0]
 8023324:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8023326:	f7ff fe25 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802332a:	4643      	mov	r3, r8
 802332c:	9000      	str	r0, [sp, #0]
 802332e:	4630      	mov	r0, r6
 8023330:	e894 0006 	ldmia.w	r4, {r1, r2}
 8023334:	47b8      	blx	r7
 8023336:	e7e8      	b.n	802330a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 8023338:	6830      	ldr	r0, [r6, #0]
 802333a:	ad06      	add	r5, sp, #24
 802333c:	4e1d      	ldr	r6, [pc, #116]	; (80233b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 802333e:	6803      	ldr	r3, [r0, #0]
 8023340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023342:	4798      	blx	r3
 8023344:	8834      	ldrh	r4, [r6, #0]
 8023346:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 802334a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802334e:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8023352:	4657      	mov	r7, sl
 8023354:	fb02 3404 	mla	r4, r2, r4, r3
 8023358:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802335c:	4628      	mov	r0, r5
 802335e:	f7ff ff07 	bl	8023170 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023362:	4681      	mov	r9, r0
 8023364:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8023368:	429f      	cmp	r7, r3
 802336a:	da14      	bge.n	8023396 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 802336c:	f8d8 0000 	ldr.w	r0, [r8]
 8023370:	4649      	mov	r1, r9
 8023372:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023376:	3701      	adds	r7, #1
 8023378:	6802      	ldr	r2, [r0, #0]
 802337a:	005b      	lsls	r3, r3, #1
 802337c:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8023380:	4622      	mov	r2, r4
 8023382:	47d0      	blx	sl
 8023384:	8833      	ldrh	r3, [r6, #0]
 8023386:	4628      	mov	r0, r5
 8023388:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802338c:	f7ff fdf2 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023390:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 8023394:	e7e6      	b.n	8023364 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 8023396:	4628      	mov	r0, r5
 8023398:	f7ff feea 	bl	8023170 <_ZNK8touchgfx6Bitmap7getDataEv>
 802339c:	e7b5      	b.n	802330a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 802339e:	bf00      	nop
 80233a0:	2000bb11 	.word	0x2000bb11
 80233a4:	08028f3f 	.word	0x08028f3f
 80233a8:	0802909c 	.word	0x0802909c
 80233ac:	08028f7a 	.word	0x08028f7a
 80233b0:	2000bb14 	.word	0x2000bb14
 80233b4:	2000bb0c 	.word	0x2000bb0c

080233b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80233b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233bc:	b08d      	sub	sp, #52	; 0x34
 80233be:	4688      	mov	r8, r1
 80233c0:	4614      	mov	r4, r2
 80233c2:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80233c6:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80233ca:	2f00      	cmp	r7, #0
 80233cc:	d047      	beq.n	802345e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 80233ce:	6810      	ldr	r0, [r2, #0]
 80233d0:	ae08      	add	r6, sp, #32
 80233d2:	6851      	ldr	r1, [r2, #4]
 80233d4:	c603      	stmia	r6!, {r0, r1}
 80233d6:	6818      	ldr	r0, [r3, #0]
 80233d8:	ae0a      	add	r6, sp, #40	; 0x28
 80233da:	6859      	ldr	r1, [r3, #4]
 80233dc:	c603      	stmia	r6!, {r0, r1}
 80233de:	a808      	add	r0, sp, #32
 80233e0:	f7fd fc34 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80233e4:	4621      	mov	r1, r4
 80233e6:	a80a      	add	r0, sp, #40	; 0x28
 80233e8:	f7fd fc18 	bl	8020c1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80233ec:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80233f0:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80233f4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80233f8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80233fc:	fb14 2103 	smlabb	r1, r4, r3, r2
 8023400:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 8023404:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8023408:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8023624 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 802340c:	440a      	add	r2, r1
 802340e:	f8d8 0000 	ldr.w	r0, [r8]
 8023412:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8023416:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 802341a:	4413      	add	r3, r2
 802341c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8023420:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8023424:	9306      	str	r3, [sp, #24]
 8023426:	6803      	ldr	r3, [r0, #0]
 8023428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802342a:	4798      	blx	r3
 802342c:	2fff      	cmp	r7, #255	; 0xff
 802342e:	d019      	beq.n	8023464 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8023430:	f010 0f04 	tst.w	r0, #4
 8023434:	d01a      	beq.n	802346c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8023436:	f8d8 0000 	ldr.w	r0, [r8]
 802343a:	b2b6      	uxth	r6, r6
 802343c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8023440:	6801      	ldr	r1, [r0, #0]
 8023442:	9504      	str	r5, [sp, #16]
 8023444:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8023448:	9703      	str	r7, [sp, #12]
 802344a:	9502      	str	r5, [sp, #8]
 802344c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8023450:	9600      	str	r6, [sp, #0]
 8023452:	9501      	str	r5, [sp, #4]
 8023454:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8023458:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 802345a:	4621      	mov	r1, r4
 802345c:	47a8      	blx	r5
 802345e:	b00d      	add	sp, #52	; 0x34
 8023460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023464:	b915      	cbnz	r5, 802346c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8023466:	f010 0f01 	tst.w	r0, #1
 802346a:	e7e3      	b.n	8023434 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802346c:	f8d8 0000 	ldr.w	r0, [r8]
 8023470:	6803      	ldr	r3, [r0, #0]
 8023472:	6a1b      	ldr	r3, [r3, #32]
 8023474:	4798      	blx	r3
 8023476:	4b69      	ldr	r3, [pc, #420]	; (802361c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 8023478:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802347c:	2fff      	cmp	r7, #255	; 0xff
 802347e:	881d      	ldrh	r5, [r3, #0]
 8023480:	4699      	mov	r9, r3
 8023482:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8023486:	fb01 2505 	mla	r5, r1, r5, r2
 802348a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802348e:	f000 80a6 	beq.w	80235de <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 8023492:	ea44 0205 	orr.w	r2, r4, r5
 8023496:	f5c7 7080 	rsb	r0, r7, #256	; 0x100
 802349a:	f012 0f03 	tst.w	r2, #3
 802349e:	d154      	bne.n	802354a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 80234a0:	07f2      	lsls	r2, r6, #31
 80234a2:	d452      	bmi.n	802354a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 80234a4:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
 80234a8:	f01e 0e01 	ands.w	lr, lr, #1
 80234ac:	d14d      	bne.n	802354a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 80234ae:	2202      	movs	r2, #2
 80234b0:	9307      	str	r3, [sp, #28]
 80234b2:	fb96 f8f2 	sdiv	r8, r6, r2
 80234b6:	4693      	mov	fp, r2
 80234b8:	f1c8 0800 	rsb	r8, r8, #0
 80234bc:	9b06      	ldr	r3, [sp, #24]
 80234be:	459e      	cmp	lr, r3
 80234c0:	f280 80a5 	bge.w	802360e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 80234c4:	f04f 0900 	mov.w	r9, #0
 80234c8:	45b1      	cmp	r9, r6
 80234ca:	da2e      	bge.n	802352a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 80234cc:	6829      	ldr	r1, [r5, #0]
 80234ce:	f109 0902 	add.w	r9, r9, #2
 80234d2:	f854 2b04 	ldr.w	r2, [r4], #4
 80234d6:	0a0b      	lsrs	r3, r1, #8
 80234d8:	f001 1a1f 	and.w	sl, r1, #2031647	; 0x1f001f
 80234dc:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80234e0:	f003 13f8 	and.w	r3, r3, #16253176	; 0xf800f8
 80234e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80234e8:	f00c 1cf8 	and.w	ip, ip, #16253176	; 0xf800f8
 80234ec:	0949      	lsrs	r1, r1, #5
 80234ee:	4343      	muls	r3, r0
 80234f0:	f001 113f 	and.w	r1, r1, #4128831	; 0x3f003f
 80234f4:	fb07 3c0c 	mla	ip, r7, ip, r3
 80234f8:	f002 131f 	and.w	r3, r2, #2031647	; 0x1f001f
 80234fc:	0952      	lsrs	r2, r2, #5
 80234fe:	4341      	muls	r1, r0
 8023500:	fb07 a303 	mla	r3, r7, r3, sl
 8023504:	f00c 2cf8 	and.w	ip, ip, #4160813056	; 0xf800f800
 8023508:	f002 123f 	and.w	r2, r2, #4128831	; 0x3f003f
 802350c:	0a1b      	lsrs	r3, r3, #8
 802350e:	fb07 1202 	mla	r2, r7, r2, r1
 8023512:	f003 131f 	and.w	r3, r3, #2031647	; 0x1f001f
 8023516:	ea4c 0c03 	orr.w	ip, ip, r3
 802351a:	4b41      	ldr	r3, [pc, #260]	; (8023620 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 802351c:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 8023520:	ea4c 0202 	orr.w	r2, ip, r2
 8023524:	f845 2b04 	str.w	r2, [r5], #4
 8023528:	e7ce      	b.n	80234c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 802352a:	9b07      	ldr	r3, [sp, #28]
 802352c:	f10e 0e01 	add.w	lr, lr, #1
 8023530:	881b      	ldrh	r3, [r3, #0]
 8023532:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 8023536:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 802353a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802353e:	fb93 f3fb 	sdiv	r3, r3, fp
 8023542:	4443      	add	r3, r8
 8023544:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8023548:	e7b8      	b.n	80234bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 802354a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 802354e:	f04f 0800 	mov.w	r8, #0
 8023552:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8023628 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 8023556:	005b      	lsls	r3, r3, #1
 8023558:	9307      	str	r3, [sp, #28]
 802355a:	9b06      	ldr	r3, [sp, #24]
 802355c:	4598      	cmp	r8, r3
 802355e:	da56      	bge.n	802360e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8023560:	46aa      	mov	sl, r5
 8023562:	f04f 0c00 	mov.w	ip, #0
 8023566:	45b4      	cmp	ip, r6
 8023568:	da29      	bge.n	80235be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 802356a:	f8ba 1000 	ldrh.w	r1, [sl]
 802356e:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 8023572:	f10c 0c01 	add.w	ip, ip, #1
 8023576:	ea01 0309 	and.w	r3, r1, r9
 802357a:	f401 6bfc 	and.w	fp, r1, #2016	; 0x7e0
 802357e:	ea02 0e09 	and.w	lr, r2, r9
 8023582:	f001 011f 	and.w	r1, r1, #31
 8023586:	4343      	muls	r3, r0
 8023588:	fb00 fb0b 	mul.w	fp, r0, fp
 802358c:	fb07 3e0e 	mla	lr, r7, lr, r3
 8023590:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8023594:	4341      	muls	r1, r0
 8023596:	f002 021f 	and.w	r2, r2, #31
 802359a:	fb07 b303 	mla	r3, r7, r3, fp
 802359e:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 80235a2:	fb07 1202 	mla	r2, r7, r2, r1
 80235a6:	121b      	asrs	r3, r3, #8
 80235a8:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80235ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80235b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80235b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80235b8:	f82a eb02 	strh.w	lr, [sl], #2
 80235bc:	e7d3      	b.n	8023566 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 80235be:	4b17      	ldr	r3, [pc, #92]	; (802361c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 80235c0:	f108 0801 	add.w	r8, r8, #1
 80235c4:	9a07      	ldr	r2, [sp, #28]
 80235c6:	881b      	ldrh	r3, [r3, #0]
 80235c8:	1b9b      	subs	r3, r3, r6
 80235ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80235ce:	441d      	add	r5, r3
 80235d0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80235d4:	1b9b      	subs	r3, r3, r6
 80235d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80235da:	441c      	add	r4, r3
 80235dc:	e7bd      	b.n	802355a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 80235de:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 80235e2:	2700      	movs	r7, #0
 80235e4:	9b06      	ldr	r3, [sp, #24]
 80235e6:	429f      	cmp	r7, r3
 80235e8:	da11      	bge.n	802360e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 80235ea:	f8d8 0000 	ldr.w	r0, [r8]
 80235ee:	4622      	mov	r2, r4
 80235f0:	4629      	mov	r1, r5
 80235f2:	3701      	adds	r7, #1
 80235f4:	6803      	ldr	r3, [r0, #0]
 80235f6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80235f8:	4653      	mov	r3, sl
 80235fa:	47b0      	blx	r6
 80235fc:	f8b9 3000 	ldrh.w	r3, [r9]
 8023600:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8023604:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8023608:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802360c:	e7ea      	b.n	80235e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 802360e:	4b05      	ldr	r3, [pc, #20]	; (8023624 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 8023610:	6818      	ldr	r0, [r3, #0]
 8023612:	6803      	ldr	r3, [r0, #0]
 8023614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023616:	4798      	blx	r3
 8023618:	e721      	b.n	802345e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 802361a:	bf00      	nop
 802361c:	2000bb0c 	.word	0x2000bb0c
 8023620:	07e007e0 	.word	0x07e007e0
 8023624:	2000bb14 	.word	0x2000bb14
 8023628:	fffff800 	.word	0xfffff800

0802362c <_ZN8touchgfx8LCD16bppD0Ev>:
 802362c:	b510      	push	{r4, lr}
 802362e:	4604      	mov	r4, r0
 8023630:	2104      	movs	r1, #4
 8023632:	f001 fdcf 	bl	80251d4 <_ZdlPvj>
 8023636:	4620      	mov	r0, r4
 8023638:	bd10      	pop	{r4, pc}
	...

0802363c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 802363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023640:	4615      	mov	r5, r2
 8023642:	b08b      	sub	sp, #44	; 0x2c
 8023644:	4699      	mov	r9, r3
 8023646:	b13b      	cbz	r3, 8023658 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8023648:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802364c:	b123      	cbz	r3, 8023658 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 802364e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8023652:	2b00      	cmp	r3, #0
 8023654:	f040 808c 	bne.w	8023770 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8023658:	b00b      	add	sp, #44	; 0x2c
 802365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802365e:	f010 0f08 	tst.w	r0, #8
 8023662:	d011      	beq.n	8023688 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 8023664:	6818      	ldr	r0, [r3, #0]
 8023666:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 802366a:	6801      	ldr	r1, [r0, #0]
 802366c:	9401      	str	r4, [sp, #4]
 802366e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8023672:	f8cd 9008 	str.w	r9, [sp, #8]
 8023676:	9400      	str	r4, [sp, #0]
 8023678:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802367c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 802367e:	4629      	mov	r1, r5
 8023680:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023684:	47a0      	blx	r4
 8023686:	e7e7      	b.n	8023658 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8023688:	6818      	ldr	r0, [r3, #0]
 802368a:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 802368e:	6803      	ldr	r3, [r0, #0]
 8023690:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 8023694:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8023698:	6a1b      	ldr	r3, [r3, #32]
 802369a:	4798      	blx	r3
 802369c:	4a3e      	ldr	r2, [pc, #248]	; (8023798 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 802369e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80236a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80236a6:	8816      	ldrh	r6, [r2, #0]
 80236a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80236ac:	fb06 1303 	mla	r3, r6, r3, r1
 80236b0:	4616      	mov	r6, r2
 80236b2:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 80236b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80236ba:	d041      	beq.n	8023740 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 80236bc:	f405 4e78 	and.w	lr, r5, #63488	; 0xf800
 80236c0:	f405 67fc 	and.w	r7, r5, #2016	; 0x7e0
 80236c4:	f005 051f 	and.w	r5, r5, #31
 80236c8:	f5c9 7680 	rsb	r6, r9, #256	; 0x100
 80236cc:	fb09 fe0e 	mul.w	lr, r9, lr
 80236d0:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80237a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 80236d4:	fb09 f305 	mul.w	r3, r9, r5
 80236d8:	2500      	movs	r5, #0
 80236da:	fb09 f707 	mul.w	r7, r9, r7
 80236de:	9306      	str	r3, [sp, #24]
 80236e0:	004b      	lsls	r3, r1, #1
 80236e2:	9207      	str	r2, [sp, #28]
 80236e4:	9305      	str	r3, [sp, #20]
 80236e6:	4545      	cmp	r5, r8
 80236e8:	da3c      	bge.n	8023764 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 80236ea:	4681      	mov	r9, r0
 80236ec:	f04f 0c00 	mov.w	ip, #0
 80236f0:	45a4      	cmp	ip, r4
 80236f2:	da1c      	bge.n	802372e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 80236f4:	f8b9 2000 	ldrh.w	r2, [r9]
 80236f8:	f10c 0c01 	add.w	ip, ip, #1
 80236fc:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8023700:	ea02 010b 	and.w	r1, r2, fp
 8023704:	fb06 7303 	mla	r3, r6, r3, r7
 8023708:	fb06 e101 	mla	r1, r6, r1, lr
 802370c:	0a1b      	lsrs	r3, r3, #8
 802370e:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 8023712:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023716:	430b      	orrs	r3, r1
 8023718:	f002 011f 	and.w	r1, r2, #31
 802371c:	9a06      	ldr	r2, [sp, #24]
 802371e:	fb06 2101 	mla	r1, r6, r1, r2
 8023722:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8023726:	430b      	orrs	r3, r1
 8023728:	f829 3b02 	strh.w	r3, [r9], #2
 802372c:	e7e0      	b.n	80236f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 802372e:	9b07      	ldr	r3, [sp, #28]
 8023730:	3501      	adds	r5, #1
 8023732:	9a05      	ldr	r2, [sp, #20]
 8023734:	881b      	ldrh	r3, [r3, #0]
 8023736:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 802373a:	4413      	add	r3, r2
 802373c:	4418      	add	r0, r3
 802373e:	e7d2      	b.n	80236e6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8023740:	0049      	lsls	r1, r1, #1
 8023742:	2200      	movs	r2, #0
 8023744:	4542      	cmp	r2, r8
 8023746:	da0d      	bge.n	8023764 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 8023748:	2300      	movs	r3, #0
 802374a:	42a3      	cmp	r3, r4
 802374c:	da03      	bge.n	8023756 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 802374e:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8023752:	3301      	adds	r3, #1
 8023754:	e7f9      	b.n	802374a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 8023756:	8833      	ldrh	r3, [r6, #0]
 8023758:	3201      	adds	r2, #1
 802375a:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 802375e:	440b      	add	r3, r1
 8023760:	4418      	add	r0, r3
 8023762:	e7ef      	b.n	8023744 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 8023764:	4b0d      	ldr	r3, [pc, #52]	; (802379c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8023766:	6818      	ldr	r0, [r3, #0]
 8023768:	6803      	ldr	r3, [r0, #0]
 802376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802376c:	4798      	blx	r3
 802376e:	e773      	b.n	8023658 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8023770:	6808      	ldr	r0, [r1, #0]
 8023772:	ab08      	add	r3, sp, #32
 8023774:	6849      	ldr	r1, [r1, #4]
 8023776:	4c09      	ldr	r4, [pc, #36]	; (802379c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8023778:	c303      	stmia	r3!, {r0, r1}
 802377a:	a808      	add	r0, sp, #32
 802377c:	f7fd fa66 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023780:	6820      	ldr	r0, [r4, #0]
 8023782:	6803      	ldr	r3, [r0, #0]
 8023784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023786:	4798      	blx	r3
 8023788:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802378c:	4623      	mov	r3, r4
 802378e:	f47f af66 	bne.w	802365e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 8023792:	f010 0f02 	tst.w	r0, #2
 8023796:	e764      	b.n	8023662 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 8023798:	2000bb0c 	.word	0x2000bb0c
 802379c:	2000bb14 	.word	0x2000bb14
 80237a0:	fffff800 	.word	0xfffff800

080237a4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 80237a4:	ee07 0a90 	vmov	s15, r0
 80237a8:	ee70 0ac0 	vsub.f32	s1, s1, s0
 80237ac:	ee71 1ac1 	vsub.f32	s3, s3, s2
 80237b0:	eddf 6a08 	vldr	s13, [pc, #32]	; 80237d4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 80237b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80237b8:	eea0 0a82 	vfma.f32	s0, s1, s4
 80237bc:	eea1 1a82 	vfma.f32	s2, s3, s4
 80237c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80237c4:	ee31 1a40 	vsub.f32	s2, s2, s0
 80237c8:	eea2 0a81 	vfma.f32	s0, s5, s2
 80237cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80237d0:	4770      	bx	lr
 80237d2:	bf00      	nop
 80237d4:	437f0000 	.word	0x437f0000

080237d8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80237d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237dc:	ed2d 8b0e 	vpush	{d8-d14}
 80237e0:	b095      	sub	sp, #84	; 0x54
 80237e2:	461e      	mov	r6, r3
 80237e4:	2700      	movs	r7, #0
 80237e6:	4690      	mov	r8, r2
 80237e8:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 80237ec:	a812      	add	r0, sp, #72	; 0x48
 80237ee:	468a      	mov	sl, r1
 80237f0:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 80237f2:	9311      	str	r3, [sp, #68]	; 0x44
 80237f4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80237f8:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 80237fc:	9301      	str	r3, [sp, #4]
 80237fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023800:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 8023804:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8023808:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 802380c:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 8023810:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8023814:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 8023818:	f7fd fa18 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802381c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802381e:	6835      	ldr	r5, [r6, #0]
 8023820:	6818      	ldr	r0, [r3, #0]
 8023822:	f9b4 3000 	ldrsh.w	r3, [r4]
 8023826:	f9b9 e000 	ldrsh.w	lr, [r9]
 802382a:	1b40      	subs	r0, r0, r5
 802382c:	18e9      	adds	r1, r5, r3
 802382e:	ebae 0c01 	sub.w	ip, lr, r1
 8023832:	4560      	cmp	r0, ip
 8023834:	f340 86a2 	ble.w	802457c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8023838:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 802383c:	44f1      	add	r9, lr
 802383e:	fa0f f989 	sxth.w	r9, r9
 8023842:	4549      	cmp	r1, r9
 8023844:	f300 869a 	bgt.w	802457c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8023848:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 802384c:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8023850:	6972      	ldr	r2, [r6, #20]
 8023852:	ed96 6a07 	vldr	s12, [r6, #28]
 8023856:	4422      	add	r2, r4
 8023858:	f8da 4004 	ldr.w	r4, [sl, #4]
 802385c:	ed98 ba09 	vldr	s22, [r8, #36]	; 0x24
 8023860:	fb04 5402 	mla	r4, r4, r2, r5
 8023864:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	; 0xc8
 8023868:	edd8 ba0b 	vldr	s23, [r8, #44]	; 0x2c
 802386c:	4282      	cmp	r2, r0
 802386e:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 8023872:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 8023876:	441c      	add	r4, r3
 8023878:	bfa8      	it	ge
 802387a:	4602      	movge	r2, r0
 802387c:	f8da b000 	ldr.w	fp, [sl]
 8023880:	458e      	cmp	lr, r1
 8023882:	ee06 2a90 	vmov	s13, r2
 8023886:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 802388a:	9208      	str	r2, [sp, #32]
 802388c:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 8023890:	edd8 6a0d 	vldr	s13, [r8, #52]	; 0x34
 8023894:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8023898:	ee69 ba2b 	vmul.f32	s23, s18, s23
 802389c:	ee29 9a26 	vmul.f32	s18, s18, s13
 80238a0:	eecc 6a06 	vdiv.f32	s13, s24, s12
 80238a4:	ee37 aaab 	vadd.f32	s20, s15, s23
 80238a8:	ee77 aa09 	vadd.f32	s21, s14, s18
 80238ac:	ee76 9a0b 	vadd.f32	s19, s12, s22
 80238b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80238b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80238b8:	dc01      	bgt.n	80238be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 80238ba:	970a      	str	r7, [sp, #40]	; 0x28
 80238bc:	e029      	b.n	8023912 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 80238be:	9a08      	ldr	r2, [sp, #32]
 80238c0:	fb9c f1f2 	sdiv	r1, ip, r2
 80238c4:	ee06 1a90 	vmov	s13, r1
 80238c8:	434a      	muls	r2, r1
 80238ca:	2900      	cmp	r1, #0
 80238cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80238d0:	ebac 0602 	sub.w	r6, ip, r2
 80238d4:	960a      	str	r6, [sp, #40]	; 0x28
 80238d6:	eeeb 9a26 	vfma.f32	s19, s22, s13
 80238da:	eeab aaa6 	vfma.f32	s20, s23, s13
 80238de:	eee9 aa26 	vfma.f32	s21, s18, s13
 80238e2:	dd12      	ble.n	802390a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 80238e4:	ee79 7acb 	vsub.f32	s15, s19, s22
 80238e8:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 80238ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80238f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238f4:	bf14      	ite	ne
 80238f6:	eecc 6a27 	vdivne.f32	s13, s24, s15
 80238fa:	eef0 6a4c 	vmoveq.f32	s13, s24
 80238fe:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 8023902:	ee27 7a26 	vmul.f32	s14, s14, s13
 8023906:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802390a:	1a80      	subs	r0, r0, r2
 802390c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8023910:	4415      	add	r5, r2
 8023912:	18ea      	adds	r2, r5, r3
 8023914:	4402      	add	r2, r0
 8023916:	4591      	cmp	r9, r2
 8023918:	bfbc      	itt	lt
 802391a:	eba9 0003 	sublt.w	r0, r9, r3
 802391e:	1b40      	sublt	r0, r0, r5
 8023920:	2800      	cmp	r0, #0
 8023922:	f340 862b 	ble.w	802457c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8023926:	9b08      	ldr	r3, [sp, #32]
 8023928:	9a08      	ldr	r2, [sp, #32]
 802392a:	fb90 f3f3 	sdiv	r3, r0, r3
 802392e:	9309      	str	r3, [sp, #36]	; 0x24
 8023930:	fb02 0313 	mls	r3, r2, r3, r0
 8023934:	930c      	str	r3, [sp, #48]	; 0x30
 8023936:	b91b      	cbnz	r3, 8023940 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 8023938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802393a:	920c      	str	r2, [sp, #48]	; 0x30
 802393c:	3b01      	subs	r3, #1
 802393e:	9309      	str	r3, [sp, #36]	; 0x24
 8023940:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023942:	eddf ca40 	vldr	s25, [pc, #256]	; 8023a44 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 8023946:	681b      	ldr	r3, [r3, #0]
 8023948:	9304      	str	r3, [sp, #16]
 802394a:	9b01      	ldr	r3, [sp, #4]
 802394c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8023950:	9305      	str	r3, [sp, #20]
 8023952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023954:	2b00      	cmp	r3, #0
 8023956:	dc03      	bgt.n	8023960 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 8023958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802395a:	2b00      	cmp	r3, #0
 802395c:	f340 860e 	ble.w	802457c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8023960:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 8023964:	9b08      	ldr	r3, [sp, #32]
 8023966:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023968:	eef0 6a67 	vmov.f32	s13, s15
 802396c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023970:	ee16 ba90 	vmov	fp, s13
 8023974:	eef0 6a47 	vmov.f32	s13, s14
 8023978:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802397c:	ee6a 8a08 	vmul.f32	s17, s20, s16
 8023980:	ee2a 8a88 	vmul.f32	s16, s21, s16
 8023984:	ee16 5a90 	vmov	r5, s13
 8023988:	ee78 7ae7 	vsub.f32	s15, s17, s15
 802398c:	ee38 7a47 	vsub.f32	s14, s16, s14
 8023990:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8023994:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8023998:	ee17 2a90 	vmov	r2, s15
 802399c:	fb92 f3f3 	sdiv	r3, r2, r3
 80239a0:	ee17 2a10 	vmov	r2, s14
 80239a4:	9306      	str	r3, [sp, #24]
 80239a6:	9b08      	ldr	r3, [sp, #32]
 80239a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80239ac:	9a08      	ldr	r2, [sp, #32]
 80239ae:	9307      	str	r3, [sp, #28]
 80239b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239b2:	2900      	cmp	r1, #0
 80239b4:	bfc8      	it	gt
 80239b6:	4613      	movgt	r3, r2
 80239b8:	9302      	str	r3, [sp, #8]
 80239ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239bc:	2b00      	cmp	r3, #0
 80239be:	dd0d      	ble.n	80239dc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 80239c0:	9a06      	ldr	r2, [sp, #24]
 80239c2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80239c6:	fb02 bb03 	mla	fp, r2, r3, fp
 80239ca:	9a07      	ldr	r2, [sp, #28]
 80239cc:	fb02 5503 	mla	r5, r2, r3, r5
 80239d0:	9b02      	ldr	r3, [sp, #8]
 80239d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80239d4:	1a9b      	subs	r3, r3, r2
 80239d6:	9302      	str	r3, [sp, #8]
 80239d8:	2300      	movs	r3, #0
 80239da:	930a      	str	r3, [sp, #40]	; 0x28
 80239dc:	ea5f 432b 	movs.w	r3, fp, asr #16
 80239e0:	d42e      	bmi.n	8023a40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 80239e2:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 80239e6:	4283      	cmp	r3, r0
 80239e8:	da2a      	bge.n	8023a40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 80239ea:	142b      	asrs	r3, r5, #16
 80239ec:	d428      	bmi.n	8023a40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 80239ee:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 80239f2:	428b      	cmp	r3, r1
 80239f4:	da24      	bge.n	8023a40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 80239f6:	9b02      	ldr	r3, [sp, #8]
 80239f8:	9a06      	ldr	r2, [sp, #24]
 80239fa:	3b01      	subs	r3, #1
 80239fc:	fb03 b202 	mla	r2, r3, r2, fp
 8023a00:	1412      	asrs	r2, r2, #16
 8023a02:	d41d      	bmi.n	8023a40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8023a04:	4282      	cmp	r2, r0
 8023a06:	da1b      	bge.n	8023a40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8023a08:	9a07      	ldr	r2, [sp, #28]
 8023a0a:	fb03 5302 	mla	r3, r3, r2, r5
 8023a0e:	141b      	asrs	r3, r3, #16
 8023a10:	d416      	bmi.n	8023a40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8023a12:	428b      	cmp	r3, r1
 8023a14:	bfb4      	ite	lt
 8023a16:	2300      	movlt	r3, #0
 8023a18:	2301      	movge	r3, #1
 8023a1a:	9303      	str	r3, [sp, #12]
 8023a1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023a1e:	2b0b      	cmp	r3, #11
 8023a20:	f200 82d7 	bhi.w	8023fd2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 8023a24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023a28:	03430531 	.word	0x03430531
 8023a2c:	02ca02e8 	.word	0x02ca02e8
 8023a30:	02d502d5 	.word	0x02d502d5
 8023a34:	02d502d5 	.word	0x02d502d5
 8023a38:	01c5026b 	.word	0x01c5026b
 8023a3c:	00100160 	.word	0x00100160
 8023a40:	2301      	movs	r3, #1
 8023a42:	e7ea      	b.n	8023a1a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 8023a44:	3d800000 	.word	0x3d800000
 8023a48:	f04f 0a00 	mov.w	sl, #0
 8023a4c:	9b02      	ldr	r3, [sp, #8]
 8023a4e:	4553      	cmp	r3, sl
 8023a50:	f340 82bb 	ble.w	8023fca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8023a54:	9a03      	ldr	r2, [sp, #12]
 8023a56:	ea4f 412b 	mov.w	r1, fp, asr #16
 8023a5a:	142b      	asrs	r3, r5, #16
 8023a5c:	b17a      	cbz	r2, 8023a7e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 8023a5e:	2900      	cmp	r1, #0
 8023a60:	f2c0 813b 	blt.w	8023cda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8023a64:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8023a68:	4291      	cmp	r1, r2
 8023a6a:	f280 8136 	bge.w	8023cda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	f2c0 8133 	blt.w	8023cda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8023a74:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8023a78:	4293      	cmp	r3, r2
 8023a7a:	f280 812e 	bge.w	8023cda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8023a7e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8023a82:	9804      	ldr	r0, [sp, #16]
 8023a84:	fb03 1102 	mla	r1, r3, r2, r1
 8023a88:	9b04      	ldr	r3, [sp, #16]
 8023a8a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8023a8e:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 8023a92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023a96:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8023a9a:	6859      	ldr	r1, [r3, #4]
 8023a9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023aa0:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8023aa4:	685a      	ldr	r2, [r3, #4]
 8023aa6:	0e3b      	lsrs	r3, r7, #24
 8023aa8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023aac:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023ab0:	435e      	muls	r6, r3
 8023ab2:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8023ab6:	435f      	muls	r7, r3
 8023ab8:	ee06 ea90 	vmov	s13, lr
 8023abc:	0a36      	lsrs	r6, r6, #8
 8023abe:	ee07 3a90 	vmov	s15, r3
 8023ac2:	0a3f      	lsrs	r7, r7, #8
 8023ac4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8023ac8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023ad0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023ad4:	433e      	orrs	r6, r7
 8023ad6:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8023ada:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023ade:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8023ae2:	fb0e f707 	mul.w	r7, lr, r7
 8023ae6:	fb0e f101 	mul.w	r1, lr, r1
 8023aea:	0a3f      	lsrs	r7, r7, #8
 8023aec:	960b      	str	r6, [sp, #44]	; 0x2c
 8023aee:	0a09      	lsrs	r1, r1, #8
 8023af0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023af4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023af8:	430f      	orrs	r7, r1
 8023afa:	0e01      	lsrs	r1, r0, #24
 8023afc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023b00:	fb01 f808 	mul.w	r8, r1, r8
 8023b04:	ee07 1a10 	vmov	s14, r1
 8023b08:	4348      	muls	r0, r1
 8023b0a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023b0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023b12:	0a00      	lsrs	r0, r0, #8
 8023b14:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023b18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023b1c:	ea48 0800 	orr.w	r8, r8, r0
 8023b20:	0e10      	lsrs	r0, r2, #24
 8023b22:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b26:	fb00 f909 	mul.w	r9, r0, r9
 8023b2a:	4342      	muls	r2, r0
 8023b2c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023b30:	0a12      	lsrs	r2, r2, #8
 8023b32:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8023b36:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b3a:	ea49 0902 	orr.w	r9, r9, r2
 8023b3e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8023b42:	ee0d 2a10 	vmov	s26, r2
 8023b46:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023b4a:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8023b4e:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8023b52:	ee0d 2a90 	vmov	s27, r2
 8023b56:	ee01 3a90 	vmov	s3, r3
 8023b5a:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8023b5e:	eef8 daed 	vcvt.f32.s32	s27, s27
 8023b62:	ee2d da2c 	vmul.f32	s26, s26, s25
 8023b66:	ee01 3a10 	vmov	s2, r3
 8023b6a:	0c3b      	lsrs	r3, r7, #16
 8023b6c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8023b70:	ee6d daac 	vmul.f32	s27, s27, s25
 8023b74:	eeed 7a26 	vfma.f32	s15, s26, s13
 8023b78:	ee06 0a90 	vmov	s13, r0
 8023b7c:	ee00 3a90 	vmov	s1, r3
 8023b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8023b86:	0c1b      	lsrs	r3, r3, #16
 8023b88:	eef0 2a6d 	vmov.f32	s5, s27
 8023b8c:	eeb0 2a4d 	vmov.f32	s4, s26
 8023b90:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8023b94:	ee00 3a10 	vmov	s0, r3
 8023b98:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8023b9c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8023ba0:	eead 7a26 	vfma.f32	s14, s26, s13
 8023ba4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8023ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023bac:	eeed 7a87 	vfma.f32	s15, s27, s14
 8023bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023bb4:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8023bb8:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8023bbc:	4630      	mov	r0, r6
 8023bbe:	f7ff fdf1 	bl	80237a4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8023bc2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8023bc6:	eeb0 ea40 	vmov.f32	s28, s0
 8023bca:	4630      	mov	r0, r6
 8023bcc:	ee01 3a90 	vmov	s3, r3
 8023bd0:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8023bd4:	eef0 2a6d 	vmov.f32	s5, s27
 8023bd8:	ee01 3a10 	vmov	s2, r3
 8023bdc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8023be0:	eeb0 2a4d 	vmov.f32	s4, s26
 8023be4:	ee00 3a90 	vmov	s1, r3
 8023be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bea:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8023bee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023bf2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8023bf6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8023bfa:	ee00 3a10 	vmov	s0, r3
 8023bfe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8023c02:	f7ff fdcf 	bl	80237a4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8023c06:	eef0 ea40 	vmov.f32	s29, s0
 8023c0a:	fa5f f389 	uxtb.w	r3, r9
 8023c0e:	4630      	mov	r0, r6
 8023c10:	eef0 2a6d 	vmov.f32	s5, s27
 8023c14:	ee01 3a90 	vmov	s3, r3
 8023c18:	fa5f f388 	uxtb.w	r3, r8
 8023c1c:	eeb0 2a4d 	vmov.f32	s4, s26
 8023c20:	ee01 3a10 	vmov	s2, r3
 8023c24:	b2fb      	uxtb	r3, r7
 8023c26:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8023c2a:	ee00 3a90 	vmov	s1, r3
 8023c2e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8023c32:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8023c36:	ee00 3a10 	vmov	s0, r3
 8023c3a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8023c3e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8023c42:	f7ff fdaf 	bl	80237a4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8023c46:	2e00      	cmp	r6, #0
 8023c48:	d047      	beq.n	8023cda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8023c4a:	eefc 7aee 	vcvt.u32.f32	s15, s29
 8023c4e:	2eff      	cmp	r6, #255	; 0xff
 8023c50:	ee17 2a90 	vmov	r2, s15
 8023c54:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8023c58:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8023c5c:	ee17 3a90 	vmov	r3, s15
 8023c60:	eefc 7ace 	vcvt.u32.f32	s15, s28
 8023c64:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8023c68:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 8023c6c:	ee17 3a90 	vmov	r3, s15
 8023c70:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8023c74:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 8023c78:	d102      	bne.n	8023c80 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 8023c7a:	9a01      	ldr	r2, [sp, #4]
 8023c7c:	2aff      	cmp	r2, #255	; 0xff
 8023c7e:	d02a      	beq.n	8023cd6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 8023c80:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 8023c84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8023c88:	f400 67fc 	and.w	r7, r0, #2016	; 0x7e0
 8023c8c:	fb12 fe06 	smulbb	lr, r2, r6
 8023c90:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 8023c94:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 8023c98:	f000 001f 	and.w	r0, r0, #31
 8023c9c:	f5ce 3180 	rsb	r1, lr, #65536	; 0x10000
 8023ca0:	f022 0207 	bic.w	r2, r2, #7
 8023ca4:	f026 0607 	bic.w	r6, r6, #7
 8023ca8:	434a      	muls	r2, r1
 8023caa:	434f      	muls	r7, r1
 8023cac:	fb0e 2606 	mla	r6, lr, r6, r2
 8023cb0:	4ad0      	ldr	r2, [pc, #832]	; (8023ff4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8023cb2:	4348      	muls	r0, r1
 8023cb4:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 8023cb8:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8023cbc:	f003 031f 	and.w	r3, r3, #31
 8023cc0:	fb0e 7202 	mla	r2, lr, r2, r7
 8023cc4:	fb0e 0303 	mla	r3, lr, r3, r0
 8023cc8:	0c12      	lsrs	r2, r2, #16
 8023cca:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8023cce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023cd2:	4316      	orrs	r6, r2
 8023cd4:	4333      	orrs	r3, r6
 8023cd6:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 8023cda:	9b06      	ldr	r3, [sp, #24]
 8023cdc:	f10a 0a01 	add.w	sl, sl, #1
 8023ce0:	449b      	add	fp, r3
 8023ce2:	9b07      	ldr	r3, [sp, #28]
 8023ce4:	441d      	add	r5, r3
 8023ce6:	e6b1      	b.n	8023a4c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 8023ce8:	2000      	movs	r0, #0
 8023cea:	9b02      	ldr	r3, [sp, #8]
 8023cec:	4283      	cmp	r3, r0
 8023cee:	f340 816c 	ble.w	8023fca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8023cf2:	9b03      	ldr	r3, [sp, #12]
 8023cf4:	ea4f 422b 	mov.w	r2, fp, asr #16
 8023cf8:	1429      	asrs	r1, r5, #16
 8023cfa:	b15b      	cbz	r3, 8023d14 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 8023cfc:	2a00      	cmp	r2, #0
 8023cfe:	db52      	blt.n	8023da6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8023d00:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8023d04:	429a      	cmp	r2, r3
 8023d06:	da4e      	bge.n	8023da6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8023d08:	2900      	cmp	r1, #0
 8023d0a:	db4c      	blt.n	8023da6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8023d0c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8023d10:	4299      	cmp	r1, r3
 8023d12:	da48      	bge.n	8023da6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8023d14:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8023d18:	fb01 2303 	mla	r3, r1, r3, r2
 8023d1c:	9a04      	ldr	r2, [sp, #16]
 8023d1e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8023d22:	0e31      	lsrs	r1, r6, #24
 8023d24:	d03f      	beq.n	8023da6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8023d26:	0972      	lsrs	r2, r6, #5
 8023d28:	4bb2      	ldr	r3, [pc, #712]	; (8023ff4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8023d2a:	29ff      	cmp	r1, #255	; 0xff
 8023d2c:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 8023d30:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d34:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8023d38:	ea43 0302 	orr.w	r3, r3, r2
 8023d3c:	ea43 0306 	orr.w	r3, r3, r6
 8023d40:	b29b      	uxth	r3, r3
 8023d42:	d102      	bne.n	8023d4a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 8023d44:	9a01      	ldr	r2, [sp, #4]
 8023d46:	2aff      	cmp	r2, #255	; 0xff
 8023d48:	d02b      	beq.n	8023da2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 8023d4a:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 8023d4e:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 8023d52:	9a01      	ldr	r2, [sp, #4]
 8023d54:	f02e 0e07 	bic.w	lr, lr, #7
 8023d58:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 8023d5c:	4351      	muls	r1, r2
 8023d5e:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 8023d62:	f007 071f 	and.w	r7, r7, #31
 8023d66:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 8023d6a:	f022 0207 	bic.w	r2, r2, #7
 8023d6e:	4372      	muls	r2, r6
 8023d70:	fb06 fc0c 	mul.w	ip, r6, ip
 8023d74:	fb01 2e0e 	mla	lr, r1, lr, r2
 8023d78:	4a9e      	ldr	r2, [pc, #632]	; (8023ff4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8023d7a:	4377      	muls	r7, r6
 8023d7c:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 8023d80:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8023d84:	f003 031f 	and.w	r3, r3, #31
 8023d88:	fb01 c202 	mla	r2, r1, r2, ip
 8023d8c:	fb01 7303 	mla	r3, r1, r3, r7
 8023d90:	0c12      	lsrs	r2, r2, #16
 8023d92:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8023d96:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d9a:	ea4e 0e02 	orr.w	lr, lr, r2
 8023d9e:	ea4e 0303 	orr.w	r3, lr, r3
 8023da2:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 8023da6:	9b06      	ldr	r3, [sp, #24]
 8023da8:	3001      	adds	r0, #1
 8023daa:	449b      	add	fp, r3
 8023dac:	9b07      	ldr	r3, [sp, #28]
 8023dae:	441d      	add	r5, r3
 8023db0:	e79b      	b.n	8023cea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 8023db2:	f04f 0e00 	mov.w	lr, #0
 8023db6:	9b02      	ldr	r3, [sp, #8]
 8023db8:	4573      	cmp	r3, lr
 8023dba:	f340 8106 	ble.w	8023fca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8023dbe:	9903      	ldr	r1, [sp, #12]
 8023dc0:	ea4f 422b 	mov.w	r2, fp, asr #16
 8023dc4:	142b      	asrs	r3, r5, #16
 8023dc6:	b179      	cbz	r1, 8023de8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 8023dc8:	2a00      	cmp	r2, #0
 8023dca:	f2c0 8091 	blt.w	8023ef0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8023dce:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8023dd2:	428a      	cmp	r2, r1
 8023dd4:	f280 808c 	bge.w	8023ef0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8023dd8:	2b00      	cmp	r3, #0
 8023dda:	f2c0 8089 	blt.w	8023ef0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8023dde:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8023de2:	428b      	cmp	r3, r1
 8023de4:	f280 8084 	bge.w	8023ef0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8023de8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8023dec:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 8023df0:	9804      	ldr	r0, [sp, #16]
 8023df2:	fb03 2301 	mla	r3, r3, r1, r2
 8023df6:	9a04      	ldr	r2, [sp, #16]
 8023df8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8023dfc:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8023e00:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8023e04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8023e0c:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8023e10:	6850      	ldr	r0, [r2, #4]
 8023e12:	fb01 f70a 	mul.w	r7, r1, sl
 8023e16:	0a3f      	lsrs	r7, r7, #8
 8023e18:	ebaa 0607 	sub.w	r6, sl, r7
 8023e1c:	eba1 0907 	sub.w	r9, r1, r7
 8023e20:	f5ca 7a80 	rsb	sl, sl, #256	; 0x100
 8023e24:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8023e28:	fb01 f10a 	mul.w	r1, r1, sl
 8023e2c:	f00c 1aff 	and.w	sl, ip, #16711935	; 0xff00ff
 8023e30:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023e34:	0a0a      	lsrs	r2, r1, #8
 8023e36:	f008 11ff 	and.w	r1, r8, #16711935	; 0xff00ff
 8023e3a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023e3e:	4371      	muls	r1, r6
 8023e40:	fb06 f808 	mul.w	r8, r6, r8
 8023e44:	fb02 110a 	mla	r1, r2, sl, r1
 8023e48:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 8023e4c:	fb02 8c0c 	mla	ip, r2, ip, r8
 8023e50:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023e54:	fb07 110a 	mla	r1, r7, sl, r1
 8023e58:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023e5c:	fb07 cc00 	mla	ip, r7, r0, ip
 8023e60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e64:	fb09 110a 	mla	r1, r9, sl, r1
 8023e68:	fb09 cc03 	mla	ip, r9, r3, ip
 8023e6c:	4b61      	ldr	r3, [pc, #388]	; (8023ff4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8023e6e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8023e72:	f40c 0a7f 	and.w	sl, ip, #16711680	; 0xff0000
 8023e76:	ea41 0a0a 	orr.w	sl, r1, sl
 8023e7a:	ea4f 315a 	mov.w	r1, sl, lsr #13
 8023e7e:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 8023e82:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8023e86:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023e8a:	4319      	orrs	r1, r3
 8023e8c:	9b01      	ldr	r3, [sp, #4]
 8023e8e:	2bff      	cmp	r3, #255	; 0xff
 8023e90:	ea41 010a 	orr.w	r1, r1, sl
 8023e94:	d02a      	beq.n	8023eec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 8023e96:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 8023e9a:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 8023e9e:	9e05      	ldr	r6, [sp, #20]
 8023ea0:	f422 60ff 	bic.w	r0, r2, #2040	; 0x7f8
 8023ea4:	f023 0307 	bic.w	r3, r3, #7
 8023ea8:	9f05      	ldr	r7, [sp, #20]
 8023eaa:	f020 0007 	bic.w	r0, r0, #7
 8023eae:	4370      	muls	r0, r6
 8023eb0:	9e01      	ldr	r6, [sp, #4]
 8023eb2:	fb06 0303 	mla	r3, r6, r3, r0
 8023eb6:	484f      	ldr	r0, [pc, #316]	; (8023ff4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8023eb8:	f402 66fc 	and.w	r6, r2, #2016	; 0x7e0
 8023ebc:	f002 021f 	and.w	r2, r2, #31
 8023ec0:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 8023ec4:	f401 60fc 	and.w	r0, r1, #2016	; 0x7e0
 8023ec8:	437e      	muls	r6, r7
 8023eca:	9f01      	ldr	r7, [sp, #4]
 8023ecc:	f001 011f 	and.w	r1, r1, #31
 8023ed0:	fb07 6000 	mla	r0, r7, r0, r6
 8023ed4:	0a00      	lsrs	r0, r0, #8
 8023ed6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023eda:	4303      	orrs	r3, r0
 8023edc:	9805      	ldr	r0, [sp, #20]
 8023ede:	4342      	muls	r2, r0
 8023ee0:	b29b      	uxth	r3, r3
 8023ee2:	fb07 2101 	mla	r1, r7, r1, r2
 8023ee6:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8023eea:	4319      	orrs	r1, r3
 8023eec:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 8023ef0:	9b06      	ldr	r3, [sp, #24]
 8023ef2:	f10e 0e01 	add.w	lr, lr, #1
 8023ef6:	449b      	add	fp, r3
 8023ef8:	9b07      	ldr	r3, [sp, #28]
 8023efa:	441d      	add	r5, r3
 8023efc:	e75b      	b.n	8023db6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 8023efe:	2600      	movs	r6, #0
 8023f00:	9b02      	ldr	r3, [sp, #8]
 8023f02:	42b3      	cmp	r3, r6
 8023f04:	dd61      	ble.n	8023fca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8023f06:	9b03      	ldr	r3, [sp, #12]
 8023f08:	ea4f 422b 	mov.w	r2, fp, asr #16
 8023f0c:	1429      	asrs	r1, r5, #16
 8023f0e:	b15b      	cbz	r3, 8023f28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 8023f10:	2a00      	cmp	r2, #0
 8023f12:	db4d      	blt.n	8023fb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8023f14:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8023f18:	429a      	cmp	r2, r3
 8023f1a:	da49      	bge.n	8023fb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8023f1c:	2900      	cmp	r1, #0
 8023f1e:	db47      	blt.n	8023fb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8023f20:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8023f24:	4299      	cmp	r1, r3
 8023f26:	da43      	bge.n	8023fb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8023f28:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8023f2c:	fb01 2303 	mla	r3, r1, r3, r2
 8023f30:	9a04      	ldr	r2, [sp, #16]
 8023f32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8023f36:	4b2f      	ldr	r3, [pc, #188]	; (8023ff4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8023f38:	094a      	lsrs	r2, r1, #5
 8023f3a:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8023f3e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023f42:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023f46:	4313      	orrs	r3, r2
 8023f48:	9a01      	ldr	r2, [sp, #4]
 8023f4a:	430b      	orrs	r3, r1
 8023f4c:	2aff      	cmp	r2, #255	; 0xff
 8023f4e:	b29b      	uxth	r3, r3
 8023f50:	d02c      	beq.n	8023fac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 8023f52:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 8023f56:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8023f5a:	9f05      	ldr	r7, [sp, #20]
 8023f5c:	f421 60ff 	bic.w	r0, r1, #2040	; 0x7f8
 8023f60:	f022 0207 	bic.w	r2, r2, #7
 8023f64:	f020 0007 	bic.w	r0, r0, #7
 8023f68:	4378      	muls	r0, r7
 8023f6a:	9f01      	ldr	r7, [sp, #4]
 8023f6c:	fb07 0202 	mla	r2, r7, r2, r0
 8023f70:	4820      	ldr	r0, [pc, #128]	; (8023ff4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8023f72:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8023f76:	f001 011f 	and.w	r1, r1, #31
 8023f7a:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 8023f7e:	9a05      	ldr	r2, [sp, #20]
 8023f80:	f403 60fc 	and.w	r0, r3, #2016	; 0x7e0
 8023f84:	f003 031f 	and.w	r3, r3, #31
 8023f88:	4357      	muls	r7, r2
 8023f8a:	9a01      	ldr	r2, [sp, #4]
 8023f8c:	fb02 7000 	mla	r0, r2, r0, r7
 8023f90:	0a00      	lsrs	r0, r0, #8
 8023f92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023f96:	ea4e 0200 	orr.w	r2, lr, r0
 8023f9a:	9805      	ldr	r0, [sp, #20]
 8023f9c:	4341      	muls	r1, r0
 8023f9e:	9801      	ldr	r0, [sp, #4]
 8023fa0:	b292      	uxth	r2, r2
 8023fa2:	fb00 1303 	mla	r3, r0, r3, r1
 8023fa6:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8023faa:	4313      	orrs	r3, r2
 8023fac:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 8023fb0:	9b06      	ldr	r3, [sp, #24]
 8023fb2:	3601      	adds	r6, #1
 8023fb4:	449b      	add	fp, r3
 8023fb6:	9b07      	ldr	r3, [sp, #28]
 8023fb8:	441d      	add	r5, r3
 8023fba:	e7a1      	b.n	8023f00 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 8023fbc:	2300      	movs	r3, #0
 8023fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8023fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023fc2:	9b02      	ldr	r3, [sp, #8]
 8023fc4:	4293      	cmp	r3, r2
 8023fc6:	f300 811b 	bgt.w	8024200 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 8023fca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023fce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8023fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023fd4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023fd8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023fdc:	2b00      	cmp	r3, #0
 8023fde:	ee7a aa89 	vadd.f32	s21, s21, s18
 8023fe2:	f340 82cb 	ble.w	802457c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8023fe6:	3b01      	subs	r3, #1
 8023fe8:	eeb0 7a48 	vmov.f32	s14, s16
 8023fec:	eef0 7a68 	vmov.f32	s15, s17
 8023ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8023ff2:	e4ae      	b.n	8023952 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 8023ff4:	fffff800 	.word	0xfffff800
 8023ff8:	2000      	movs	r0, #0
 8023ffa:	9b02      	ldr	r3, [sp, #8]
 8023ffc:	4283      	cmp	r3, r0
 8023ffe:	dde4      	ble.n	8023fca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8024000:	9a03      	ldr	r2, [sp, #12]
 8024002:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024006:	1429      	asrs	r1, r5, #16
 8024008:	b15a      	cbz	r2, 8024022 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 802400a:	2b00      	cmp	r3, #0
 802400c:	db49      	blt.n	80240a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802400e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8024012:	4293      	cmp	r3, r2
 8024014:	da45      	bge.n	80240a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8024016:	2900      	cmp	r1, #0
 8024018:	db43      	blt.n	80240a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802401a:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 802401e:	4291      	cmp	r1, r2
 8024020:	da3f      	bge.n	80240a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8024022:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8024026:	fb01 3202 	mla	r2, r1, r2, r3
 802402a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802402c:	685b      	ldr	r3, [r3, #4]
 802402e:	5c99      	ldrb	r1, [r3, r2]
 8024030:	b3b9      	cbz	r1, 80240a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8024032:	9b04      	ldr	r3, [sp, #16]
 8024034:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024038:	9a01      	ldr	r2, [sp, #4]
 802403a:	2aff      	cmp	r2, #255	; 0xff
 802403c:	d101      	bne.n	8024042 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 802403e:	29ff      	cmp	r1, #255	; 0xff
 8024040:	d02d      	beq.n	802409e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 8024042:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 8024046:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 802404a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 802404e:	f02e 0e07 	bic.w	lr, lr, #7
 8024052:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 8024056:	fb12 f101 	smulbb	r1, r2, r1
 802405a:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 802405e:	f007 071f 	and.w	r7, r7, #31
 8024062:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 8024066:	f022 0207 	bic.w	r2, r2, #7
 802406a:	4372      	muls	r2, r6
 802406c:	fb06 fc0c 	mul.w	ip, r6, ip
 8024070:	fb01 2e0e 	mla	lr, r1, lr, r2
 8024074:	4a61      	ldr	r2, [pc, #388]	; (80241fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 8024076:	4377      	muls	r7, r6
 8024078:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 802407c:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8024080:	f003 031f 	and.w	r3, r3, #31
 8024084:	fb01 c202 	mla	r2, r1, r2, ip
 8024088:	fb01 7303 	mla	r3, r1, r3, r7
 802408c:	0c12      	lsrs	r2, r2, #16
 802408e:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8024092:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024096:	ea4e 0e02 	orr.w	lr, lr, r2
 802409a:	ea4e 0303 	orr.w	r3, lr, r3
 802409e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 80240a2:	9b06      	ldr	r3, [sp, #24]
 80240a4:	3001      	adds	r0, #1
 80240a6:	449b      	add	fp, r3
 80240a8:	9b07      	ldr	r3, [sp, #28]
 80240aa:	441d      	add	r5, r3
 80240ac:	e7a5      	b.n	8023ffa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 80240ae:	2300      	movs	r3, #0
 80240b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80240b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80240b4:	9b02      	ldr	r3, [sp, #8]
 80240b6:	4293      	cmp	r3, r2
 80240b8:	dd87      	ble.n	8023fca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80240ba:	9b03      	ldr	r3, [sp, #12]
 80240bc:	ea4f 422b 	mov.w	r2, fp, asr #16
 80240c0:	1429      	asrs	r1, r5, #16
 80240c2:	b17b      	cbz	r3, 80240e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 80240c4:	2a00      	cmp	r2, #0
 80240c6:	f2c0 8092 	blt.w	80241ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80240ca:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80240ce:	429a      	cmp	r2, r3
 80240d0:	f280 808d 	bge.w	80241ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80240d4:	2900      	cmp	r1, #0
 80240d6:	f2c0 808a 	blt.w	80241ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80240da:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80240de:	4299      	cmp	r1, r3
 80240e0:	f280 8085 	bge.w	80241ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80240e4:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80240e8:	f3c5 3603 	ubfx	r6, r5, #12, #4
 80240ec:	9804      	ldr	r0, [sp, #16]
 80240ee:	fb01 2103 	mla	r1, r1, r3, r2
 80240f2:	9a04      	ldr	r2, [sp, #16]
 80240f4:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 80240f8:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 80240fc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8024100:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024104:	8879      	ldrh	r1, [r7, #2]
 8024106:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802410a:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 802410e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024112:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8024116:	fb06 f302 	mul.w	r3, r6, r2
 802411a:	ea4e 0e09 	orr.w	lr, lr, r9
 802411e:	ea4f 4901 	mov.w	r9, r1, lsl #16
 8024122:	10db      	asrs	r3, r3, #3
 8024124:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 8024128:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 802412c:	f1c6 0710 	rsb	r7, r6, #16
 8024130:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024134:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 8024138:	1abf      	subs	r7, r7, r2
 802413a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802413e:	ea49 0101 	orr.w	r1, r9, r1
 8024142:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024146:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802414a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802414e:	4351      	muls	r1, r2
 8024150:	9a01      	ldr	r2, [sp, #4]
 8024152:	ea4a 0808 	orr.w	r8, sl, r8
 8024156:	fb0e 1107 	mla	r1, lr, r7, r1
 802415a:	2aff      	cmp	r2, #255	; 0xff
 802415c:	fb03 1108 	mla	r1, r3, r8, r1
 8024160:	ea4f 480c 	mov.w	r8, ip, lsl #16
 8024164:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024168:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 802416c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8024170:	ea48 0c0c 	orr.w	ip, r8, ip
 8024174:	fb03 110c 	mla	r1, r3, ip, r1
 8024178:	ea4f 5951 	mov.w	r9, r1, lsr #21
 802417c:	ea4f 1351 	mov.w	r3, r1, lsr #5
 8024180:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024184:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024188:	ea49 0303 	orr.w	r3, r9, r3
 802418c:	b29b      	uxth	r3, r3
 802418e:	d02b      	beq.n	80241e8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 8024190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024192:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 8024196:	9805      	ldr	r0, [sp, #20]
 8024198:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 802419c:	f026 0607 	bic.w	r6, r6, #7
 80241a0:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 80241a4:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 80241a8:	f001 011f 	and.w	r1, r1, #31
 80241ac:	f022 0207 	bic.w	r2, r2, #7
 80241b0:	4342      	muls	r2, r0
 80241b2:	9801      	ldr	r0, [sp, #4]
 80241b4:	fb00 2606 	mla	r6, r0, r6, r2
 80241b8:	4a10      	ldr	r2, [pc, #64]	; (80241fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 80241ba:	9805      	ldr	r0, [sp, #20]
 80241bc:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 80241c0:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80241c4:	4347      	muls	r7, r0
 80241c6:	9801      	ldr	r0, [sp, #4]
 80241c8:	f003 031f 	and.w	r3, r3, #31
 80241cc:	fb00 7202 	mla	r2, r0, r2, r7
 80241d0:	0a12      	lsrs	r2, r2, #8
 80241d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80241d6:	4316      	orrs	r6, r2
 80241d8:	9a05      	ldr	r2, [sp, #20]
 80241da:	4351      	muls	r1, r2
 80241dc:	fb00 1303 	mla	r3, r0, r3, r1
 80241e0:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80241e4:	4333      	orrs	r3, r6
 80241e6:	b29b      	uxth	r3, r3
 80241e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80241ea:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 80241ee:	9b06      	ldr	r3, [sp, #24]
 80241f0:	449b      	add	fp, r3
 80241f2:	9b07      	ldr	r3, [sp, #28]
 80241f4:	441d      	add	r5, r3
 80241f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241f8:	3301      	adds	r3, #1
 80241fa:	e759      	b.n	80240b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 80241fc:	fffff800 	.word	0xfffff800
 8024200:	9903      	ldr	r1, [sp, #12]
 8024202:	ea4f 432b 	mov.w	r3, fp, asr #16
 8024206:	142a      	asrs	r2, r5, #16
 8024208:	b179      	cbz	r1, 802422a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 802420a:	2b00      	cmp	r3, #0
 802420c:	f2c0 8136 	blt.w	802447c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8024210:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8024214:	428b      	cmp	r3, r1
 8024216:	f280 8131 	bge.w	802447c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 802421a:	2a00      	cmp	r2, #0
 802421c:	f2c0 812e 	blt.w	802447c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8024220:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8024224:	428a      	cmp	r2, r1
 8024226:	f280 8129 	bge.w	802447c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 802422a:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 802422e:	fb02 3301 	mla	r3, r2, r1, r3
 8024232:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024234:	6850      	ldr	r0, [r2, #4]
 8024236:	18c2      	adds	r2, r0, r3
 8024238:	5cc0      	ldrb	r0, [r0, r3]
 802423a:	900d      	str	r0, [sp, #52]	; 0x34
 802423c:	7850      	ldrb	r0, [r2, #1]
 802423e:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8024242:	900e      	str	r0, [sp, #56]	; 0x38
 8024244:	5c50      	ldrb	r0, [r2, r1]
 8024246:	440a      	add	r2, r1
 8024248:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 802424c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024250:	7852      	ldrb	r2, [r2, #1]
 8024252:	ee07 0a10 	vmov	s14, r0
 8024256:	eef8 6a66 	vcvt.f32.u32	s13, s13
 802425a:	900f      	str	r0, [sp, #60]	; 0x3c
 802425c:	9210      	str	r2, [sp, #64]	; 0x40
 802425e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8024262:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8024266:	ee0d 2a10 	vmov	s26, r2
 802426a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 802426e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024272:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8024276:	ee0d 2a90 	vmov	s27, r2
 802427a:	ee2d da2c 	vmul.f32	s26, s26, s25
 802427e:	eef8 daed 	vcvt.f32.s32	s27, s27
 8024282:	eeed 7a26 	vfma.f32	s15, s26, s13
 8024286:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 802428a:	ee6d daac 	vmul.f32	s27, s27, s25
 802428e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8024292:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8024296:	eead 7a26 	vfma.f32	s14, s26, s13
 802429a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802429e:	eeed 7a87 	vfma.f32	s15, s27, s14
 80242a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80242a6:	ee17 6a90 	vmov	r6, s15
 80242aa:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80242ae:	f000 80e5 	beq.w	802447c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 80242b2:	9a04      	ldr	r2, [sp, #16]
 80242b4:	eef0 2a6d 	vmov.f32	s5, s27
 80242b8:	eeb0 2a4d 	vmov.f32	s4, s26
 80242bc:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80242c0:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 80242c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80242c6:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 80242ca:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80242ce:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 80242d2:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 80242d6:	f00a 001f 	and.w	r0, sl, #31
 80242da:	4358      	muls	r0, r3
 80242dc:	1203      	asrs	r3, r0, #8
 80242de:	f009 001f 	and.w	r0, r9, #31
 80242e2:	ee01 3a90 	vmov	s3, r3
 80242e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80242e8:	4358      	muls	r0, r3
 80242ea:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80242ee:	1203      	asrs	r3, r0, #8
 80242f0:	f008 001f 	and.w	r0, r8, #31
 80242f4:	ee01 3a10 	vmov	s2, r3
 80242f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80242fa:	4358      	muls	r0, r3
 80242fc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8024300:	1203      	asrs	r3, r0, #8
 8024302:	f007 001f 	and.w	r0, r7, #31
 8024306:	ee00 3a90 	vmov	s1, r3
 802430a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802430c:	4358      	muls	r0, r3
 802430e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8024312:	1203      	asrs	r3, r0, #8
 8024314:	4630      	mov	r0, r6
 8024316:	ee00 3a10 	vmov	s0, r3
 802431a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802431e:	f7ff fa41 	bl	80237a4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8024322:	f3ca 1045 	ubfx	r0, sl, #5, #6
 8024326:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024328:	eeb0 ea40 	vmov.f32	s28, s0
 802432c:	eef0 2a6d 	vmov.f32	s5, s27
 8024330:	4358      	muls	r0, r3
 8024332:	eeb0 2a4d 	vmov.f32	s4, s26
 8024336:	1203      	asrs	r3, r0, #8
 8024338:	f3c9 1045 	ubfx	r0, r9, #5, #6
 802433c:	ee01 3a90 	vmov	s3, r3
 8024340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024342:	4358      	muls	r0, r3
 8024344:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8024348:	1203      	asrs	r3, r0, #8
 802434a:	f3c8 1045 	ubfx	r0, r8, #5, #6
 802434e:	ee01 3a10 	vmov	s2, r3
 8024352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024354:	4358      	muls	r0, r3
 8024356:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 802435a:	1203      	asrs	r3, r0, #8
 802435c:	f3c7 1045 	ubfx	r0, r7, #5, #6
 8024360:	0aff      	lsrs	r7, r7, #11
 8024362:	ee00 3a90 	vmov	s1, r3
 8024366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024368:	4358      	muls	r0, r3
 802436a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 802436e:	1203      	asrs	r3, r0, #8
 8024370:	4630      	mov	r0, r6
 8024372:	ee00 3a10 	vmov	s0, r3
 8024376:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802437a:	f7ff fa13 	bl	80237a4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 802437e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024380:	ea4f 21da 	mov.w	r1, sl, lsr #11
 8024384:	eef0 ea40 	vmov.f32	s29, s0
 8024388:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 802438c:	4630      	mov	r0, r6
 802438e:	fb03 fa01 	mul.w	sl, r3, r1
 8024392:	eef0 2a6d 	vmov.f32	s5, s27
 8024396:	eeb0 2a4d 	vmov.f32	s4, s26
 802439a:	ea4f 232a 	mov.w	r3, sl, asr #8
 802439e:	ee01 3a90 	vmov	s3, r3
 80243a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80243a4:	fb03 f902 	mul.w	r9, r3, r2
 80243a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80243aa:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80243ae:	ea4f 2329 	mov.w	r3, r9, asr #8
 80243b2:	ee01 3a10 	vmov	s2, r3
 80243b6:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 80243ba:	fb02 f803 	mul.w	r8, r2, r3
 80243be:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80243c2:	ea4f 2328 	mov.w	r3, r8, asr #8
 80243c6:	ee00 3a90 	vmov	s1, r3
 80243ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80243cc:	437b      	muls	r3, r7
 80243ce:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80243d2:	121b      	asrs	r3, r3, #8
 80243d4:	ee00 3a10 	vmov	s0, r3
 80243d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80243dc:	f7ff f9e2 	bl	80237a4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 80243e0:	eefc 7aee 	vcvt.u32.f32	s15, s29
 80243e4:	2eff      	cmp	r6, #255	; 0xff
 80243e6:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80243ea:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80243ee:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80243f2:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80243f6:	eefc 7ace 	vcvt.u32.f32	s15, s28
 80243fa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80243fe:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8024402:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8024406:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 802440a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 802440e:	ea43 0302 	orr.w	r3, r3, r2
 8024412:	b29b      	uxth	r3, r3
 8024414:	d102      	bne.n	802441c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 8024416:	9a01      	ldr	r2, [sp, #4]
 8024418:	2aff      	cmp	r2, #255	; 0xff
 802441a:	d02c      	beq.n	8024476 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 802441c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802441e:	f423 67ff 	bic.w	r7, r3, #2040	; 0x7f8
 8024422:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 8024426:	f027 0707 	bic.w	r7, r7, #7
 802442a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 802442e:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 8024432:	fb12 f606 	smulbb	r6, r2, r6
 8024436:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 802443a:	f000 001f 	and.w	r0, r0, #31
 802443e:	f5c6 3180 	rsb	r1, r6, #65536	; 0x10000
 8024442:	f022 0207 	bic.w	r2, r2, #7
 8024446:	434a      	muls	r2, r1
 8024448:	fb01 fe0e 	mul.w	lr, r1, lr
 802444c:	fb06 2707 	mla	r7, r6, r7, r2
 8024450:	4a4d      	ldr	r2, [pc, #308]	; (8024588 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 8024452:	4348      	muls	r0, r1
 8024454:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 8024458:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 802445c:	f003 031f 	and.w	r3, r3, #31
 8024460:	fb06 e202 	mla	r2, r6, r2, lr
 8024464:	fb06 0303 	mla	r3, r6, r3, r0
 8024468:	0c12      	lsrs	r2, r2, #16
 802446a:	f3c3 4304 	ubfx	r3, r3, #16, #5
 802446e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024472:	4317      	orrs	r7, r2
 8024474:	433b      	orrs	r3, r7
 8024476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024478:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 802447c:	9b06      	ldr	r3, [sp, #24]
 802447e:	449b      	add	fp, r3
 8024480:	9b07      	ldr	r3, [sp, #28]
 8024482:	441d      	add	r5, r3
 8024484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024486:	3301      	adds	r3, #1
 8024488:	e599      	b.n	8023fbe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 802448a:	9b01      	ldr	r3, [sp, #4]
 802448c:	2bff      	cmp	r3, #255	; 0xff
 802448e:	d105      	bne.n	802449c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 8024490:	2300      	movs	r3, #0
 8024492:	9a02      	ldr	r2, [sp, #8]
 8024494:	429a      	cmp	r2, r3
 8024496:	dc51      	bgt.n	802453c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 8024498:	4613      	mov	r3, r2
 802449a:	e596      	b.n	8023fca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 802449c:	2000      	movs	r0, #0
 802449e:	9b02      	ldr	r3, [sp, #8]
 80244a0:	4283      	cmp	r3, r0
 80244a2:	f77f ad92 	ble.w	8023fca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80244a6:	9b03      	ldr	r3, [sp, #12]
 80244a8:	ea4f 422b 	mov.w	r2, fp, asr #16
 80244ac:	1429      	asrs	r1, r5, #16
 80244ae:	b15b      	cbz	r3, 80244c8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 80244b0:	2a00      	cmp	r2, #0
 80244b2:	db3d      	blt.n	8024530 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 80244b4:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80244b8:	429a      	cmp	r2, r3
 80244ba:	da39      	bge.n	8024530 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 80244bc:	2900      	cmp	r1, #0
 80244be:	db37      	blt.n	8024530 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 80244c0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80244c4:	4299      	cmp	r1, r3
 80244c6:	da33      	bge.n	8024530 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 80244c8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80244cc:	9f05      	ldr	r7, [sp, #20]
 80244ce:	fb01 2303 	mla	r3, r1, r3, r2
 80244d2:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 80244d6:	9a04      	ldr	r2, [sp, #16]
 80244d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80244dc:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 80244e0:	f422 66ff 	bic.w	r6, r2, #2040	; 0x7f8
 80244e4:	f023 0307 	bic.w	r3, r3, #7
 80244e8:	f402 6efc 	and.w	lr, r2, #2016	; 0x7e0
 80244ec:	f002 021f 	and.w	r2, r2, #31
 80244f0:	437b      	muls	r3, r7
 80244f2:	f026 0607 	bic.w	r6, r6, #7
 80244f6:	9f01      	ldr	r7, [sp, #4]
 80244f8:	fb07 3606 	mla	r6, r7, r6, r3
 80244fc:	4b22      	ldr	r3, [pc, #136]	; (8024588 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 80244fe:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8024502:	f001 011f 	and.w	r1, r1, #31
 8024506:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 802450a:	9b05      	ldr	r3, [sp, #20]
 802450c:	435f      	muls	r7, r3
 802450e:	9b01      	ldr	r3, [sp, #4]
 8024510:	fb03 730e 	mla	r3, r3, lr, r7
 8024514:	0a1b      	lsrs	r3, r3, #8
 8024516:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802451a:	431e      	orrs	r6, r3
 802451c:	9b05      	ldr	r3, [sp, #20]
 802451e:	4359      	muls	r1, r3
 8024520:	9b01      	ldr	r3, [sp, #4]
 8024522:	fb03 1202 	mla	r2, r3, r2, r1
 8024526:	f3c2 2204 	ubfx	r2, r2, #8, #5
 802452a:	4316      	orrs	r6, r2
 802452c:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 8024530:	9b06      	ldr	r3, [sp, #24]
 8024532:	3001      	adds	r0, #1
 8024534:	449b      	add	fp, r3
 8024536:	9b07      	ldr	r3, [sp, #28]
 8024538:	441d      	add	r5, r3
 802453a:	e7b0      	b.n	802449e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 802453c:	9a03      	ldr	r2, [sp, #12]
 802453e:	ea4f 412b 	mov.w	r1, fp, asr #16
 8024542:	1428      	asrs	r0, r5, #16
 8024544:	b15a      	cbz	r2, 802455e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 8024546:	2900      	cmp	r1, #0
 8024548:	db12      	blt.n	8024570 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 802454a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 802454e:	4291      	cmp	r1, r2
 8024550:	da0e      	bge.n	8024570 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8024552:	2800      	cmp	r0, #0
 8024554:	db0c      	blt.n	8024570 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8024556:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 802455a:	4290      	cmp	r0, r2
 802455c:	da08      	bge.n	8024570 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 802455e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8024562:	fb00 1202 	mla	r2, r0, r2, r1
 8024566:	9904      	ldr	r1, [sp, #16]
 8024568:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 802456c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 8024570:	9a06      	ldr	r2, [sp, #24]
 8024572:	3301      	adds	r3, #1
 8024574:	4493      	add	fp, r2
 8024576:	9a07      	ldr	r2, [sp, #28]
 8024578:	4415      	add	r5, r2
 802457a:	e78a      	b.n	8024492 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 802457c:	b015      	add	sp, #84	; 0x54
 802457e:	ecbd 8b0e 	vpop	{d8-d14}
 8024582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024586:	bf00      	nop
 8024588:	fffff800 	.word	0xfffff800

0802458c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024590:	b08f      	sub	sp, #60	; 0x3c
 8024592:	460c      	mov	r4, r1
 8024594:	4680      	mov	r8, r0
 8024596:	4699      	mov	r9, r3
 8024598:	6808      	ldr	r0, [r1, #0]
 802459a:	ab0a      	add	r3, sp, #40	; 0x28
 802459c:	6849      	ldr	r1, [r1, #4]
 802459e:	c303      	stmia	r3!, {r0, r1}
 80245a0:	6810      	ldr	r0, [r2, #0]
 80245a2:	ab0c      	add	r3, sp, #48	; 0x30
 80245a4:	6851      	ldr	r1, [r2, #4]
 80245a6:	c303      	stmia	r3!, {r0, r1}
 80245a8:	a80a      	add	r0, sp, #40	; 0x28
 80245aa:	f7fc fb4f 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80245ae:	4621      	mov	r1, r4
 80245b0:	a80c      	add	r0, sp, #48	; 0x30
 80245b2:	4c58      	ldr	r4, [pc, #352]	; (8024714 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80245b4:	f7fc fb32 	bl	8020c1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80245b8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80245bc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80245c0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80245c4:	6820      	ldr	r0, [r4, #0]
 80245c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80245ca:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80245ce:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80245d2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80245d6:	440a      	add	r2, r1
 80245d8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80245dc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80245e0:	4413      	add	r3, r2
 80245e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80245e6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80245ea:	9305      	str	r3, [sp, #20]
 80245ec:	6803      	ldr	r3, [r0, #0]
 80245ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80245f0:	4798      	blx	r3
 80245f2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80245f6:	d118      	bne.n	802462a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80245f8:	f010 0f20 	tst.w	r0, #32
 80245fc:	6820      	ldr	r0, [r4, #0]
 80245fe:	d017      	beq.n	8024630 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8024600:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8024604:	b2bf      	uxth	r7, r7
 8024606:	6801      	ldr	r1, [r0, #0]
 8024608:	9402      	str	r4, [sp, #8]
 802460a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802460e:	f8cd 900c 	str.w	r9, [sp, #12]
 8024612:	9401      	str	r4, [sp, #4]
 8024614:	9700      	str	r7, [sp, #0]
 8024616:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 802461a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 802461c:	4641      	mov	r1, r8
 802461e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8024622:	47a0      	blx	r4
 8024624:	b00f      	add	sp, #60	; 0x3c
 8024626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802462a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802462e:	e7e5      	b.n	80245fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 8024630:	6803      	ldr	r3, [r0, #0]
 8024632:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 802471c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 8024636:	6a1b      	ldr	r3, [r3, #32]
 8024638:	4798      	blx	r3
 802463a:	4a37      	ldr	r2, [pc, #220]	; (8024718 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 802463c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8024640:	f04f 0c00 	mov.w	ip, #0
 8024644:	8813      	ldrh	r3, [r2, #0]
 8024646:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802464a:	9209      	str	r2, [sp, #36]	; 0x24
 802464c:	fb04 1303 	mla	r3, r4, r3, r1
 8024650:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024654:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8024658:	0099      	lsls	r1, r3, #2
 802465a:	005b      	lsls	r3, r3, #1
 802465c:	9108      	str	r1, [sp, #32]
 802465e:	9307      	str	r3, [sp, #28]
 8024660:	9b05      	ldr	r3, [sp, #20]
 8024662:	459c      	cmp	ip, r3
 8024664:	da4f      	bge.n	8024706 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 8024666:	4686      	mov	lr, r0
 8024668:	2300      	movs	r3, #0
 802466a:	42bb      	cmp	r3, r7
 802466c:	da3a      	bge.n	80246e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 802466e:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 8024672:	0e2e      	lsrs	r6, r5, #24
 8024674:	d012      	beq.n	802469c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8024676:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 802467a:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 802467e:	0969      	lsrs	r1, r5, #5
 8024680:	2eff      	cmp	r6, #255	; 0xff
 8024682:	b2a4      	uxth	r4, r4
 8024684:	9206      	str	r2, [sp, #24]
 8024686:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802468a:	d10b      	bne.n	80246a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 802468c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024690:	d108      	bne.n	80246a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8024692:	430c      	orrs	r4, r1
 8024694:	4322      	orrs	r2, r4
 8024696:	4614      	mov	r4, r2
 8024698:	f8ae 4000 	strh.w	r4, [lr]
 802469c:	f10e 0e02 	add.w	lr, lr, #2
 80246a0:	3301      	adds	r3, #1
 80246a2:	e7e2      	b.n	802466a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 80246a4:	fb06 f609 	mul.w	r6, r6, r9
 80246a8:	f8be 5000 	ldrh.w	r5, [lr]
 80246ac:	f5c6 3b80 	rsb	fp, r6, #65536	; 0x10000
 80246b0:	ea05 020a 	and.w	r2, r5, sl
 80246b4:	4374      	muls	r4, r6
 80246b6:	4371      	muls	r1, r6
 80246b8:	fb0b 4402 	mla	r4, fp, r2, r4
 80246bc:	f405 62fc 	and.w	r2, r5, #2016	; 0x7e0
 80246c0:	f005 051f 	and.w	r5, r5, #31
 80246c4:	fb0b 1102 	mla	r1, fp, r2, r1
 80246c8:	9a06      	ldr	r2, [sp, #24]
 80246ca:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 80246ce:	0c09      	lsrs	r1, r1, #16
 80246d0:	4356      	muls	r6, r2
 80246d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80246d6:	fb0b 6505 	mla	r5, fp, r5, r6
 80246da:	430c      	orrs	r4, r1
 80246dc:	f3c5 4504 	ubfx	r5, r5, #16, #5
 80246e0:	432c      	orrs	r4, r5
 80246e2:	e7d9      	b.n	8024698 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 80246e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246e6:	f10c 0c01 	add.w	ip, ip, #1
 80246ea:	9a07      	ldr	r2, [sp, #28]
 80246ec:	881b      	ldrh	r3, [r3, #0]
 80246ee:	1bdb      	subs	r3, r3, r7
 80246f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80246f4:	9a08      	ldr	r2, [sp, #32]
 80246f6:	4418      	add	r0, r3
 80246f8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80246fc:	1bdb      	subs	r3, r3, r7
 80246fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024702:	4498      	add	r8, r3
 8024704:	e7ac      	b.n	8024660 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 8024706:	4b03      	ldr	r3, [pc, #12]	; (8024714 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8024708:	6818      	ldr	r0, [r3, #0]
 802470a:	6803      	ldr	r3, [r0, #0]
 802470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802470e:	4798      	blx	r3
 8024710:	e788      	b.n	8024624 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8024712:	bf00      	nop
 8024714:	2000bb14 	.word	0x2000bb14
 8024718:	2000bb0c 	.word	0x2000bb0c
 802471c:	fffff800 	.word	0xfffff800

08024720 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8024720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024724:	9d06      	ldr	r5, [sp, #24]
 8024726:	461c      	mov	r4, r3
 8024728:	460e      	mov	r6, r1
 802472a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 802472e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8024732:	b142      	cbz	r2, 8024746 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8024734:	2a02      	cmp	r2, #2
 8024736:	d010      	beq.n	802475a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 8024738:	4b0b      	ldr	r3, [pc, #44]	; (8024768 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 802473a:	f240 11b9 	movw	r1, #441	; 0x1b9
 802473e:	4a0b      	ldr	r2, [pc, #44]	; (802476c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 8024740:	480b      	ldr	r0, [pc, #44]	; (8024770 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 8024742:	f000 fd63 	bl	802520c <__assert_func>
 8024746:	6802      	ldr	r2, [r0, #0]
 8024748:	9306      	str	r3, [sp, #24]
 802474a:	462b      	mov	r3, r5
 802474c:	9707      	str	r7, [sp, #28]
 802474e:	6916      	ldr	r6, [r2, #16]
 8024750:	4622      	mov	r2, r4
 8024752:	46b4      	mov	ip, r6
 8024754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024758:	4760      	bx	ip
 802475a:	462a      	mov	r2, r5
 802475c:	4621      	mov	r1, r4
 802475e:	4630      	mov	r0, r6
 8024760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024764:	f7ff bf12 	b.w	802458c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024768:	08028fac 	.word	0x08028fac
 802476c:	0802910b 	.word	0x0802910b
 8024770:	08028f7a 	.word	0x08028f7a

08024774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8024774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024778:	b08b      	sub	sp, #44	; 0x2c
 802477a:	460e      	mov	r6, r1
 802477c:	4604      	mov	r4, r0
 802477e:	6851      	ldr	r1, [r2, #4]
 8024780:	6810      	ldr	r0, [r2, #0]
 8024782:	ad06      	add	r5, sp, #24
 8024784:	4617      	mov	r7, r2
 8024786:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802478a:	c503      	stmia	r5!, {r0, r1}
 802478c:	6818      	ldr	r0, [r3, #0]
 802478e:	ad08      	add	r5, sp, #32
 8024790:	6859      	ldr	r1, [r3, #4]
 8024792:	c503      	stmia	r5!, {r0, r1}
 8024794:	a806      	add	r0, sp, #24
 8024796:	f7fc fa59 	bl	8020c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802479a:	4639      	mov	r1, r7
 802479c:	a808      	add	r0, sp, #32
 802479e:	f7fc fa3d 	bl	8020c1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80247a2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80247a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80247aa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80247ae:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80247b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80247b6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80247ba:	1871      	adds	r1, r6, r1
 80247bc:	9101      	str	r1, [sp, #4]
 80247be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80247c2:	440a      	add	r2, r1
 80247c4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80247c8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80247cc:	4413      	add	r3, r2
 80247ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80247d2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80247d6:	9302      	str	r3, [sp, #8]
 80247d8:	4b64      	ldr	r3, [pc, #400]	; (802496c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 80247da:	6818      	ldr	r0, [r3, #0]
 80247dc:	6803      	ldr	r3, [r0, #0]
 80247de:	6a1b      	ldr	r3, [r3, #32]
 80247e0:	4798      	blx	r3
 80247e2:	4b63      	ldr	r3, [pc, #396]	; (8024970 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 80247e4:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 80247e8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80247ec:	881a      	ldrh	r2, [r3, #0]
 80247ee:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80247f2:	fb06 1202 	mla	r2, r6, r2, r1
 80247f6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80247fa:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 80247fe:	b212      	sxth	r2, r2
 8024800:	9204      	str	r2, [sp, #16]
 8024802:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024806:	9203      	str	r2, [sp, #12]
 8024808:	d051      	beq.n	80248ae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 802480a:	f04f 0800 	mov.w	r8, #0
 802480e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8024974 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 8024812:	9305      	str	r3, [sp, #20]
 8024814:	9b02      	ldr	r3, [sp, #8]
 8024816:	4598      	cmp	r8, r3
 8024818:	f280 809f 	bge.w	802495a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 802481c:	2100      	movs	r1, #0
 802481e:	42a9      	cmp	r1, r5
 8024820:	da30      	bge.n	8024884 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 8024822:	9b01      	ldr	r3, [sp, #4]
 8024824:	5c5e      	ldrb	r6, [r3, r1]
 8024826:	b35e      	cbz	r6, 8024880 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 8024828:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802482c:	fb1b f606 	smulbb	r6, fp, r6
 8024830:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 8024834:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 8024838:	ea0e 0309 	and.w	r3, lr, r9
 802483c:	ea02 0c09 	and.w	ip, r2, r9
 8024840:	f40e 6afc 	and.w	sl, lr, #2016	; 0x7e0
 8024844:	437b      	muls	r3, r7
 8024846:	f00e 0e1f 	and.w	lr, lr, #31
 802484a:	fb07 fa0a 	mul.w	sl, r7, sl
 802484e:	fb06 3c0c 	mla	ip, r6, ip, r3
 8024852:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8024856:	fb07 fe0e 	mul.w	lr, r7, lr
 802485a:	f002 021f 	and.w	r2, r2, #31
 802485e:	fb06 a303 	mla	r3, r6, r3, sl
 8024862:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 8024866:	fb06 ee02 	mla	lr, r6, r2, lr
 802486a:	0c1b      	lsrs	r3, r3, #16
 802486c:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 8024870:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024874:	ea4c 0c03 	orr.w	ip, ip, r3
 8024878:	ea4c 0c0e 	orr.w	ip, ip, lr
 802487c:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 8024880:	3101      	adds	r1, #1
 8024882:	e7cc      	b.n	802481e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 8024884:	9b05      	ldr	r3, [sp, #20]
 8024886:	f108 0801 	add.w	r8, r8, #1
 802488a:	9a03      	ldr	r2, [sp, #12]
 802488c:	881b      	ldrh	r3, [r3, #0]
 802488e:	1b5b      	subs	r3, r3, r5
 8024890:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024894:	4418      	add	r0, r3
 8024896:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802489a:	1b5b      	subs	r3, r3, r5
 802489c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80248a0:	4414      	add	r4, r2
 80248a2:	9a04      	ldr	r2, [sp, #16]
 80248a4:	4413      	add	r3, r2
 80248a6:	9a01      	ldr	r2, [sp, #4]
 80248a8:	441a      	add	r2, r3
 80248aa:	9201      	str	r2, [sp, #4]
 80248ac:	e7b2      	b.n	8024814 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 80248ae:	f04f 0900 	mov.w	r9, #0
 80248b2:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8024974 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 80248b6:	9305      	str	r3, [sp, #20]
 80248b8:	9b02      	ldr	r3, [sp, #8]
 80248ba:	4599      	cmp	r9, r3
 80248bc:	da4d      	bge.n	802495a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 80248be:	4607      	mov	r7, r0
 80248c0:	2600      	movs	r6, #0
 80248c2:	42ae      	cmp	r6, r5
 80248c4:	da34      	bge.n	8024930 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 80248c6:	9b01      	ldr	r3, [sp, #4]
 80248c8:	5d99      	ldrb	r1, [r3, r6]
 80248ca:	b121      	cbz	r1, 80248d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 80248cc:	29ff      	cmp	r1, #255	; 0xff
 80248ce:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 80248d2:	d103      	bne.n	80248dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 80248d4:	803a      	strh	r2, [r7, #0]
 80248d6:	3702      	adds	r7, #2
 80248d8:	3601      	adds	r6, #1
 80248da:	e7f2      	b.n	80248c2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 80248dc:	f8b7 c000 	ldrh.w	ip, [r7]
 80248e0:	f5c1 7e80 	rsb	lr, r1, #256	; 0x100
 80248e4:	ea02 080a 	and.w	r8, r2, sl
 80248e8:	ea0c 030a 	and.w	r3, ip, sl
 80248ec:	f40c 6bfc 	and.w	fp, ip, #2016	; 0x7e0
 80248f0:	f00c 0c1f 	and.w	ip, ip, #31
 80248f4:	fb0e f303 	mul.w	r3, lr, r3
 80248f8:	fb0e fb0b 	mul.w	fp, lr, fp
 80248fc:	fb01 3808 	mla	r8, r1, r8, r3
 8024900:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8024904:	fb0e fc0c 	mul.w	ip, lr, ip
 8024908:	f002 021f 	and.w	r2, r2, #31
 802490c:	fb01 b303 	mla	r3, r1, r3, fp
 8024910:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 8024914:	fb01 cc02 	mla	ip, r1, r2, ip
 8024918:	0a1b      	lsrs	r3, r3, #8
 802491a:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 802491e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024922:	ea48 0803 	orr.w	r8, r8, r3
 8024926:	ea48 080c 	orr.w	r8, r8, ip
 802492a:	f8a7 8000 	strh.w	r8, [r7]
 802492e:	e7d2      	b.n	80248d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 8024930:	9b05      	ldr	r3, [sp, #20]
 8024932:	f109 0901 	add.w	r9, r9, #1
 8024936:	9a03      	ldr	r2, [sp, #12]
 8024938:	881b      	ldrh	r3, [r3, #0]
 802493a:	1b5b      	subs	r3, r3, r5
 802493c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024940:	4418      	add	r0, r3
 8024942:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8024946:	1b5b      	subs	r3, r3, r5
 8024948:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 802494c:	4414      	add	r4, r2
 802494e:	9a04      	ldr	r2, [sp, #16]
 8024950:	4413      	add	r3, r2
 8024952:	9a01      	ldr	r2, [sp, #4]
 8024954:	441a      	add	r2, r3
 8024956:	9201      	str	r2, [sp, #4]
 8024958:	e7ae      	b.n	80248b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802495a:	4b04      	ldr	r3, [pc, #16]	; (802496c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 802495c:	6818      	ldr	r0, [r3, #0]
 802495e:	6803      	ldr	r3, [r0, #0]
 8024960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024962:	4798      	blx	r3
 8024964:	b00b      	add	sp, #44	; 0x2c
 8024966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802496a:	bf00      	nop
 802496c:	2000bb14 	.word	0x2000bb14
 8024970:	2000bb0c 	.word	0x2000bb0c
 8024974:	fffff800 	.word	0xfffff800

08024978 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8024978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802497c:	b089      	sub	sp, #36	; 0x24
 802497e:	4682      	mov	sl, r0
 8024980:	4689      	mov	r9, r1
 8024982:	4690      	mov	r8, r2
 8024984:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8024988:	461f      	mov	r7, r3
 802498a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802498c:	b365      	cbz	r5, 80249e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 802498e:	4608      	mov	r0, r1
 8024990:	f7fe faf0 	bl	8022f74 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024994:	4606      	mov	r6, r0
 8024996:	4648      	mov	r0, r9
 8024998:	f7fe fb24 	bl	8022fe4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802499c:	f8ad 000e 	strh.w	r0, [sp, #14]
 80249a0:	4648      	mov	r0, r9
 80249a2:	f8ad 8008 	strh.w	r8, [sp, #8]
 80249a6:	f8ad 700a 	strh.w	r7, [sp, #10]
 80249aa:	f8ad 600c 	strh.w	r6, [sp, #12]
 80249ae:	f7fe fc37 	bl	8023220 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80249b2:	2801      	cmp	r0, #1
 80249b4:	d105      	bne.n	80249c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 80249b6:	4b64      	ldr	r3, [pc, #400]	; (8024b48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 80249b8:	2160      	movs	r1, #96	; 0x60
 80249ba:	4a64      	ldr	r2, [pc, #400]	; (8024b4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 80249bc:	4864      	ldr	r0, [pc, #400]	; (8024b50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 80249be:	f000 fc25 	bl	802520c <__assert_func>
 80249c2:	4648      	mov	r0, r9
 80249c4:	f7fe fbd4 	bl	8023170 <_ZNK8touchgfx6Bitmap7getDataEv>
 80249c8:	4606      	mov	r6, r0
 80249ca:	4648      	mov	r0, r9
 80249cc:	f7fe fc00 	bl	80231d0 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 80249d0:	4680      	mov	r8, r0
 80249d2:	4648      	mov	r0, r9
 80249d4:	f7fe fc24 	bl	8023220 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80249d8:	2802      	cmp	r0, #2
 80249da:	d108      	bne.n	80249ee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80249dc:	462b      	mov	r3, r5
 80249de:	4622      	mov	r2, r4
 80249e0:	a902      	add	r1, sp, #8
 80249e2:	4630      	mov	r0, r6
 80249e4:	f7ff fdd2 	bl	802458c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80249e8:	b009      	add	sp, #36	; 0x24
 80249ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249ee:	4648      	mov	r0, r9
 80249f0:	f7fe fb88 	bl	8023104 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80249f4:	b950      	cbnz	r0, 8024a0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80249f6:	f8da 3000 	ldr.w	r3, [sl]
 80249fa:	aa02      	add	r2, sp, #8
 80249fc:	9001      	str	r0, [sp, #4]
 80249fe:	4631      	mov	r1, r6
 8024a00:	9500      	str	r5, [sp, #0]
 8024a02:	4650      	mov	r0, sl
 8024a04:	691d      	ldr	r5, [r3, #16]
 8024a06:	4623      	mov	r3, r4
 8024a08:	47a8      	blx	r5
 8024a0a:	e7ed      	b.n	80249e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8024a0c:	af06      	add	r7, sp, #24
 8024a0e:	4649      	mov	r1, r9
 8024a10:	f10d 0910 	add.w	r9, sp, #16
 8024a14:	4638      	mov	r0, r7
 8024a16:	f7fe fb1d 	bl	8023054 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8024a1a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8024a1e:	e889 0003 	stmia.w	r9, {r0, r1}
 8024a22:	4621      	mov	r1, r4
 8024a24:	4648      	mov	r0, r9
 8024a26:	f7fc fa67 	bl	8020ef8 <_ZN8touchgfx4RectaNERKS0_>
 8024a2a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024a2e:	b113      	cbz	r3, 8024a36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 8024a30:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8024a34:	b913      	cbnz	r3, 8024a3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8024a36:	9500      	str	r5, [sp, #0]
 8024a38:	4623      	mov	r3, r4
 8024a3a:	e07f      	b.n	8024b3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 8024a3c:	f8da 3000 	ldr.w	r3, [sl]
 8024a40:	2200      	movs	r2, #0
 8024a42:	9500      	str	r5, [sp, #0]
 8024a44:	4631      	mov	r1, r6
 8024a46:	9201      	str	r2, [sp, #4]
 8024a48:	4650      	mov	r0, sl
 8024a4a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8024a4e:	aa02      	add	r2, sp, #8
 8024a50:	464b      	mov	r3, r9
 8024a52:	47d8      	blx	fp
 8024a54:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024a58:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8024a5c:	4293      	cmp	r3, r2
 8024a5e:	dd13      	ble.n	8024a88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 8024a60:	f9b4 0000 	ldrsh.w	r0, [r4]
 8024a64:	1a9b      	subs	r3, r3, r2
 8024a66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024a6a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8024a6e:	4630      	mov	r0, r6
 8024a70:	f8ad 201a 	strh.w	r2, [sp, #26]
 8024a74:	aa02      	add	r2, sp, #8
 8024a76:	f8ad 101c 	strh.w	r1, [sp, #28]
 8024a7a:	4641      	mov	r1, r8
 8024a7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024a80:	463b      	mov	r3, r7
 8024a82:	9500      	str	r5, [sp, #0]
 8024a84:	f7ff fe76 	bl	8024774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8024a88:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8024a8c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8024a90:	4293      	cmp	r3, r2
 8024a92:	dd13      	ble.n	8024abc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 8024a94:	1a9b      	subs	r3, r3, r2
 8024a96:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8024a9a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8024a9e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8024aa2:	aa02      	add	r2, sp, #8
 8024aa4:	f8ad 001a 	strh.w	r0, [sp, #26]
 8024aa8:	4630      	mov	r0, r6
 8024aaa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024aae:	463b      	mov	r3, r7
 8024ab0:	f8ad 101e 	strh.w	r1, [sp, #30]
 8024ab4:	4641      	mov	r1, r8
 8024ab6:	9500      	str	r5, [sp, #0]
 8024ab8:	f7ff fe5c 	bl	8024774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8024abc:	88a2      	ldrh	r2, [r4, #4]
 8024abe:	8823      	ldrh	r3, [r4, #0]
 8024ac0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8024ac4:	4413      	add	r3, r2
 8024ac6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8024aca:	440a      	add	r2, r1
 8024acc:	b29b      	uxth	r3, r3
 8024ace:	b292      	uxth	r2, r2
 8024ad0:	b218      	sxth	r0, r3
 8024ad2:	b211      	sxth	r1, r2
 8024ad4:	4288      	cmp	r0, r1
 8024ad6:	dd13      	ble.n	8024b00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 8024ad8:	1a9b      	subs	r3, r3, r2
 8024ada:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8024ade:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 8024ae2:	aa02      	add	r2, sp, #8
 8024ae4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8024ae8:	4641      	mov	r1, r8
 8024aea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024aee:	463b      	mov	r3, r7
 8024af0:	f8ad 001e 	strh.w	r0, [sp, #30]
 8024af4:	4630      	mov	r0, r6
 8024af6:	9500      	str	r5, [sp, #0]
 8024af8:	f8ad e01a 	strh.w	lr, [sp, #26]
 8024afc:	f7ff fe3a 	bl	8024774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8024b00:	88e2      	ldrh	r2, [r4, #6]
 8024b02:	8863      	ldrh	r3, [r4, #2]
 8024b04:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8024b08:	4413      	add	r3, r2
 8024b0a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8024b0e:	440a      	add	r2, r1
 8024b10:	b29b      	uxth	r3, r3
 8024b12:	b292      	uxth	r2, r2
 8024b14:	b218      	sxth	r0, r3
 8024b16:	b211      	sxth	r1, r2
 8024b18:	4288      	cmp	r0, r1
 8024b1a:	f77f af65 	ble.w	80249e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8024b1e:	1a9b      	subs	r3, r3, r2
 8024b20:	f9b4 e000 	ldrsh.w	lr, [r4]
 8024b24:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8024b28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024b2c:	463b      	mov	r3, r7
 8024b2e:	f8ad e018 	strh.w	lr, [sp, #24]
 8024b32:	f8ad 101a 	strh.w	r1, [sp, #26]
 8024b36:	f8ad 001c 	strh.w	r0, [sp, #28]
 8024b3a:	9500      	str	r5, [sp, #0]
 8024b3c:	aa02      	add	r2, sp, #8
 8024b3e:	4641      	mov	r1, r8
 8024b40:	4630      	mov	r0, r6
 8024b42:	f7ff fe17 	bl	8024774 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8024b46:	e74f      	b.n	80249e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8024b48:	08028eea 	.word	0x08028eea
 8024b4c:	08029018 	.word	0x08029018
 8024b50:	08028f7a 	.word	0x08028f7a

08024b54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8024b54:	b138      	cbz	r0, 8024b66 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8024b56:	2902      	cmp	r1, #2
 8024b58:	d00b      	beq.n	8024b72 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 8024b5a:	2903      	cmp	r1, #3
 8024b5c:	d00c      	beq.n	8024b78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8024b5e:	2901      	cmp	r1, #1
 8024b60:	d10d      	bne.n	8024b7e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8024b62:	2001      	movs	r0, #1
 8024b64:	4770      	bx	lr
 8024b66:	2902      	cmp	r1, #2
 8024b68:	d006      	beq.n	8024b78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8024b6a:	2903      	cmp	r1, #3
 8024b6c:	d007      	beq.n	8024b7e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8024b6e:	2901      	cmp	r1, #1
 8024b70:	d1f7      	bne.n	8024b62 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 8024b72:	4b05      	ldr	r3, [pc, #20]	; (8024b88 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8024b74:	8818      	ldrh	r0, [r3, #0]
 8024b76:	4770      	bx	lr
 8024b78:	f04f 30ff 	mov.w	r0, #4294967295
 8024b7c:	4770      	bx	lr
 8024b7e:	4b02      	ldr	r3, [pc, #8]	; (8024b88 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8024b80:	8818      	ldrh	r0, [r3, #0]
 8024b82:	4240      	negs	r0, r0
 8024b84:	4770      	bx	lr
 8024b86:	bf00      	nop
 8024b88:	2000bb0c 	.word	0x2000bb0c

08024b8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8024b8c:	b140      	cbz	r0, 8024ba0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8024b8e:	2902      	cmp	r1, #2
 8024b90:	d00c      	beq.n	8024bac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 8024b92:	2903      	cmp	r1, #3
 8024b94:	d00d      	beq.n	8024bb2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8024b96:	2901      	cmp	r1, #1
 8024b98:	d10f      	bne.n	8024bba <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 8024b9a:	4b09      	ldr	r3, [pc, #36]	; (8024bc0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 8024b9c:	8818      	ldrh	r0, [r3, #0]
 8024b9e:	4770      	bx	lr
 8024ba0:	2902      	cmp	r1, #2
 8024ba2:	d006      	beq.n	8024bb2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8024ba4:	2903      	cmp	r1, #3
 8024ba6:	d008      	beq.n	8024bba <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 8024ba8:	2901      	cmp	r1, #1
 8024baa:	d1f6      	bne.n	8024b9a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 8024bac:	f04f 30ff 	mov.w	r0, #4294967295
 8024bb0:	4770      	bx	lr
 8024bb2:	4b03      	ldr	r3, [pc, #12]	; (8024bc0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 8024bb4:	8818      	ldrh	r0, [r3, #0]
 8024bb6:	4240      	negs	r0, r0
 8024bb8:	4770      	bx	lr
 8024bba:	2001      	movs	r0, #1
 8024bbc:	4770      	bx	lr
 8024bbe:	bf00      	nop
 8024bc0:	2000bb0c 	.word	0x2000bb0c

08024bc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 8024bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bc8:	b097      	sub	sp, #92	; 0x5c
 8024bca:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 8024bce:	910d      	str	r1, [sp, #52]	; 0x34
 8024bd0:	a912      	add	r1, sp, #72	; 0x48
 8024bd2:	f899 000d 	ldrb.w	r0, [r9, #13]
 8024bd6:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
 8024bda:	f010 0f08 	tst.w	r0, #8
 8024bde:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 8024be2:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
 8024be6:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
 8024bea:	e881 000c 	stmia.w	r1, {r2, r3}
 8024bee:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 8024bf2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8024bf6:	920b      	str	r2, [sp, #44]	; 0x2c
 8024bf8:	bf0c      	ite	eq
 8024bfa:	2200      	moveq	r2, #0
 8024bfc:	f44f 7280 	movne.w	r2, #256	; 0x100
 8024c00:	f899 1006 	ldrb.w	r1, [r9, #6]
 8024c04:	f010 0f10 	tst.w	r0, #16
 8024c08:	9307      	str	r3, [sp, #28]
 8024c0a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8024c0e:	bf0c      	ite	eq
 8024c10:	2000      	moveq	r0, #0
 8024c12:	f44f 7080 	movne.w	r0, #256	; 0x100
 8024c16:	430a      	orrs	r2, r1
 8024c18:	9308      	str	r3, [sp, #32]
 8024c1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024c1c:	920a      	str	r2, [sp, #40]	; 0x28
 8024c1e:	f000 813b 	beq.w	8024e98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8024c22:	f899 2007 	ldrb.w	r2, [r9, #7]
 8024c26:	4302      	orrs	r2, r0
 8024c28:	9209      	str	r2, [sp, #36]	; 0x24
 8024c2a:	f000 8135 	beq.w	8024e98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8024c2e:	f999 1009 	ldrsb.w	r1, [r9, #9]
 8024c32:	2c00      	cmp	r4, #0
 8024c34:	f000 80db 	beq.w	8024dee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8024c38:	1a61      	subs	r1, r4, r1
 8024c3a:	b28c      	uxth	r4, r1
 8024c3c:	0422      	lsls	r2, r4, #16
 8024c3e:	d504      	bpl.n	8024c4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8024c40:	eba8 0404 	sub.w	r4, r8, r4
 8024c44:	fa0f f884 	sxth.w	r8, r4
 8024c48:	2400      	movs	r4, #0
 8024c4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8024c4e:	88df      	ldrh	r7, [r3, #6]
 8024c50:	4580      	cmp	r8, r0
 8024c52:	b282      	uxth	r2, r0
 8024c54:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8024c58:	bfb8      	it	lt
 8024c5a:	18a1      	addlt	r1, r4, r2
 8024c5c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 8024c60:	44be      	add	lr, r7
 8024c62:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8024c66:	bfbc      	itt	lt
 8024c68:	eba1 0108 	sublt.w	r1, r1, r8
 8024c6c:	4680      	movlt	r8, r0
 8024c6e:	a812      	add	r0, sp, #72	; 0x48
 8024c70:	bfb8      	it	lt
 8024c72:	b28c      	uxthlt	r4, r1
 8024c74:	8899      	ldrh	r1, [r3, #4]
 8024c76:	fa0f f38e 	sxth.w	r3, lr
 8024c7a:	440a      	add	r2, r1
 8024c7c:	4641      	mov	r1, r8
 8024c7e:	930e      	str	r3, [sp, #56]	; 0x38
 8024c80:	4bb1      	ldr	r3, [pc, #708]	; (8024f48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8024c82:	b212      	sxth	r2, r2
 8024c84:	f893 b000 	ldrb.w	fp, [r3]
 8024c88:	920f      	str	r2, [sp, #60]	; 0x3c
 8024c8a:	f10b 3eff 	add.w	lr, fp, #4294967295
 8024c8e:	9a07      	ldr	r2, [sp, #28]
 8024c90:	f1de 0300 	rsbs	r3, lr, #0
 8024c94:	eb43 030e 	adc.w	r3, r3, lr
 8024c98:	930c      	str	r3, [sp, #48]	; 0x30
 8024c9a:	4653      	mov	r3, sl
 8024c9c:	f7fb fd46 	bl	802072c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8024ca0:	4641      	mov	r1, r8
 8024ca2:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8024ca6:	4653      	mov	r3, sl
 8024ca8:	9a07      	ldr	r2, [sp, #28]
 8024caa:	a812      	add	r0, sp, #72	; 0x48
 8024cac:	f7fb fd59 	bl	8020762 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024cb0:	a916      	add	r1, sp, #88	; 0x58
 8024cb2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8024cb6:	a815      	add	r0, sp, #84	; 0x54
 8024cb8:	f7fb ff7a 	bl	8020bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8024cbc:	f1ba 0f00 	cmp.w	sl, #0
 8024cc0:	f040 8099 	bne.w	8024df6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 8024cc4:	f1bb 0f01 	cmp.w	fp, #1
 8024cc8:	f040 809d 	bne.w	8024e06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8024ccc:	4a9f      	ldr	r2, [pc, #636]	; (8024f4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8024cce:	2d04      	cmp	r5, #4
 8024cd0:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8024cd4:	8811      	ldrh	r1, [r2, #0]
 8024cd6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8024cda:	fb01 2303 	mla	r3, r1, r3, r2
 8024cde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024ce0:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 8024ce4:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8024ce8:	fa43 f305 	asr.w	r3, r3, r5
 8024cec:	b2db      	uxtb	r3, r3
 8024cee:	930d      	str	r3, [sp, #52]	; 0x34
 8024cf0:	ea6f 0303 	mvn.w	r3, r3
 8024cf4:	b2db      	uxtb	r3, r3
 8024cf6:	9310      	str	r3, [sp, #64]	; 0x40
 8024cf8:	f1c5 0308 	rsb	r3, r5, #8
 8024cfc:	b2db      	uxtb	r3, r3
 8024cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8024d00:	d104      	bne.n	8024d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8024d02:	f899 300d 	ldrb.w	r3, [r9, #13]
 8024d06:	07da      	lsls	r2, r3, #31
 8024d08:	f100 8118 	bmi.w	8024f3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8024d0c:	b91c      	cbnz	r4, 8024d16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 8024d0e:	9b08      	ldr	r3, [sp, #32]
 8024d10:	2b00      	cmp	r3, #0
 8024d12:	f000 80c4 	beq.w	8024e9e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 8024d16:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8024d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024d1c:	fb16 4303 	smlabb	r3, r6, r3, r4
 8024d20:	fb13 f305 	smulbb	r3, r3, r5
 8024d24:	b29b      	uxth	r3, r3
 8024d26:	f003 0207 	and.w	r2, r3, #7
 8024d2a:	1a8a      	subs	r2, r1, r2
 8024d2c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8024d2e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8024d32:	b2d2      	uxtb	r2, r2
 8024d34:	9326      	str	r3, [sp, #152]	; 0x98
 8024d36:	9b08      	ldr	r3, [sp, #32]
 8024d38:	1aff      	subs	r7, r7, r3
 8024d3a:	b2bf      	uxth	r7, r7
 8024d3c:	4651      	mov	r1, sl
 8024d3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024d40:	f7ff ff08 	bl	8024b54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8024d44:	4651      	mov	r1, sl
 8024d46:	4681      	mov	r9, r0
 8024d48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024d4a:	f7ff ff1f 	bl	8024b8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8024d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024d50:	9907      	ldr	r1, [sp, #28]
 8024d52:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8024d56:	eba3 0e01 	sub.w	lr, r3, r1
 8024d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024d5c:	eba8 0104 	sub.w	r1, r8, r4
 8024d60:	1a59      	subs	r1, r3, r1
 8024d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024d64:	4299      	cmp	r1, r3
 8024d66:	bfd4      	ite	le
 8024d68:	ebc4 0101 	rsble	r1, r4, r1
 8024d6c:	ebc4 0103 	rsbgt	r1, r4, r3
 8024d70:	4577      	cmp	r7, lr
 8024d72:	fb09 0011 	mls	r0, r9, r1, r0
 8024d76:	eba6 0301 	sub.w	r3, r6, r1
 8024d7a:	bfa8      	it	ge
 8024d7c:	4677      	movge	r7, lr
 8024d7e:	0040      	lsls	r0, r0, #1
 8024d80:	436b      	muls	r3, r5
 8024d82:	9008      	str	r0, [sp, #32]
 8024d84:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8024d88:	fb0a f000 	mul.w	r0, sl, r0
 8024d8c:	9007      	str	r0, [sp, #28]
 8024d8e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024d90:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024d94:	900e      	str	r0, [sp, #56]	; 0x38
 8024d96:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024d98:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8024d9e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024da0:	f000 001f 	and.w	r0, r0, #31
 8024da4:	9011      	str	r0, [sp, #68]	; 0x44
 8024da6:	2f00      	cmp	r7, #0
 8024da8:	dd76      	ble.n	8024e98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8024daa:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8024dae:	4689      	mov	r9, r1
 8024db0:	46d8      	mov	r8, fp
 8024db2:	900c      	str	r0, [sp, #48]	; 0x30
 8024db4:	f1b9 0f00 	cmp.w	r9, #0
 8024db8:	f340 80a6 	ble.w	8024f08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8024dbc:	9826      	ldr	r0, [sp, #152]	; 0x98
 8024dbe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024dc0:	7800      	ldrb	r0, [r0, #0]
 8024dc2:	4090      	lsls	r0, r2
 8024dc4:	4020      	ands	r0, r4
 8024dc6:	d009      	beq.n	8024ddc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 8024dc8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024dca:	4320      	orrs	r0, r4
 8024dcc:	28ff      	cmp	r0, #255	; 0xff
 8024dce:	d168      	bne.n	8024ea2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8024dd0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024dd2:	2cff      	cmp	r4, #255	; 0xff
 8024dd4:	d165      	bne.n	8024ea2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8024dd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024dd8:	f8a8 4000 	strh.w	r4, [r8]
 8024ddc:	2a00      	cmp	r2, #0
 8024dde:	f000 808e 	beq.w	8024efe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 8024de2:	1b52      	subs	r2, r2, r5
 8024de4:	b2d2      	uxtb	r2, r2
 8024de6:	44d0      	add	r8, sl
 8024de8:	f109 39ff 	add.w	r9, r9, #4294967295
 8024dec:	e7e2      	b.n	8024db4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 8024dee:	4488      	add	r8, r1
 8024df0:	fa0f f888 	sxth.w	r8, r8
 8024df4:	e729      	b.n	8024c4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8024df6:	f1ba 0f01 	cmp.w	sl, #1
 8024dfa:	f47f af67 	bne.w	8024ccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8024dfe:	f1bb 0f01 	cmp.w	fp, #1
 8024e02:	f47f af63 	bne.w	8024ccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8024e06:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8024f54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024e0a:	f8db 0000 	ldr.w	r0, [fp]
 8024e0e:	6803      	ldr	r3, [r0, #0]
 8024e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024e12:	4798      	blx	r3
 8024e14:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8024e18:	465a      	mov	r2, fp
 8024e1a:	d006      	beq.n	8024e2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8024e1c:	2d04      	cmp	r5, #4
 8024e1e:	bf0a      	itet	eq
 8024e20:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 8024e24:	2300      	movne	r3, #0
 8024e26:	f003 0301 	andeq.w	r3, r3, #1
 8024e2a:	05c0      	lsls	r0, r0, #23
 8024e2c:	f140 8081 	bpl.w	8024f32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 8024e30:	2d08      	cmp	r5, #8
 8024e32:	d17e      	bne.n	8024f32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 8024e34:	2b00      	cmp	r3, #0
 8024e36:	bf0c      	ite	eq
 8024e38:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8024e3c:	2180      	movne	r1, #128	; 0x80
 8024e3e:	2c00      	cmp	r4, #0
 8024e40:	f47f af44 	bne.w	8024ccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8024e44:	9b08      	ldr	r3, [sp, #32]
 8024e46:	2b00      	cmp	r3, #0
 8024e48:	f47f af40 	bne.w	8024ccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8024e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e4e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024e50:	4443      	add	r3, r8
 8024e52:	4298      	cmp	r0, r3
 8024e54:	f6ff af3a 	blt.w	8024ccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8024e58:	9807      	ldr	r0, [sp, #28]
 8024e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e5c:	4403      	add	r3, r0
 8024e5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024e60:	4298      	cmp	r0, r3
 8024e62:	f6ff af33 	blt.w	8024ccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8024e66:	2d08      	cmp	r5, #8
 8024e68:	6810      	ldr	r0, [r2, #0]
 8024e6a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8024e6e:	bf18      	it	ne
 8024e70:	3601      	addne	r6, #1
 8024e72:	6804      	ldr	r4, [r0, #0]
 8024e74:	9105      	str	r1, [sp, #20]
 8024e76:	bf18      	it	ne
 8024e78:	f026 0601 	bicne.w	r6, r6, #1
 8024e7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024e7e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8024e82:	bf18      	it	ne
 8024e84:	b2b6      	uxthne	r6, r6
 8024e86:	9104      	str	r1, [sp, #16]
 8024e88:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8024e8a:	9602      	str	r6, [sp, #8]
 8024e8c:	9103      	str	r1, [sp, #12]
 8024e8e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8024e90:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8024e94:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8024e96:	47a0      	blx	r4
 8024e98:	b017      	add	sp, #92	; 0x5c
 8024e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024ea0:	e74c      	b.n	8024d3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 8024ea2:	f8b8 c000 	ldrh.w	ip, [r8]
 8024ea6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8024eaa:	f42c 66ff 	bic.w	r6, ip, #2040	; 0x7f8
 8024eae:	fb10 f004 	smulbb	r0, r0, r4
 8024eb2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024eb4:	f026 0607 	bic.w	r6, r6, #7
 8024eb8:	f5c0 3e80 	rsb	lr, r0, #65536	; 0x10000
 8024ebc:	fb0e f606 	mul.w	r6, lr, r6
 8024ec0:	fb00 6604 	mla	r6, r0, r4, r6
 8024ec4:	4c22      	ldr	r4, [pc, #136]	; (8024f50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8024ec6:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 8024eca:	940a      	str	r4, [sp, #40]	; 0x28
 8024ecc:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 8024ed0:	f00c 0c1f 	and.w	ip, ip, #31
 8024ed4:	fb0e f404 	mul.w	r4, lr, r4
 8024ed8:	fb0e fc0c 	mul.w	ip, lr, ip
 8024edc:	4626      	mov	r6, r4
 8024ede:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024ee0:	fb00 6404 	mla	r4, r0, r4, r6
 8024ee4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024ee6:	0c24      	lsrs	r4, r4, #16
 8024ee8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024eec:	4334      	orrs	r4, r6
 8024eee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8024ef0:	fb00 cc06 	mla	ip, r0, r6, ip
 8024ef4:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 8024ef8:	ea44 040c 	orr.w	r4, r4, ip
 8024efc:	e76c      	b.n	8024dd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 8024efe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024f00:	3201      	adds	r2, #1
 8024f02:	9226      	str	r2, [sp, #152]	; 0x98
 8024f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024f06:	e76e      	b.n	8024de6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8024f08:	b16b      	cbz	r3, 8024f26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 8024f0a:	4293      	cmp	r3, r2
 8024f0c:	dd08      	ble.n	8024f20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 8024f0e:	1b58      	subs	r0, r3, r5
 8024f10:	2408      	movs	r4, #8
 8024f12:	1a80      	subs	r0, r0, r2
 8024f14:	fb90 f0f4 	sdiv	r0, r0, r4
 8024f18:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8024f1a:	3001      	adds	r0, #1
 8024f1c:	4404      	add	r4, r0
 8024f1e:	9426      	str	r4, [sp, #152]	; 0x98
 8024f20:	1ad2      	subs	r2, r2, r3
 8024f22:	f002 0207 	and.w	r2, r2, #7
 8024f26:	9807      	ldr	r0, [sp, #28]
 8024f28:	3f01      	subs	r7, #1
 8024f2a:	9c08      	ldr	r4, [sp, #32]
 8024f2c:	4420      	add	r0, r4
 8024f2e:	4483      	add	fp, r0
 8024f30:	e739      	b.n	8024da6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8024f32:	2b00      	cmp	r3, #0
 8024f34:	f43f aeca 	beq.w	8024ccc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8024f38:	2180      	movs	r1, #128	; 0x80
 8024f3a:	e780      	b.n	8024e3e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 8024f3c:	07f3      	lsls	r3, r6, #31
 8024f3e:	f57f aee5 	bpl.w	8024d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8024f42:	3601      	adds	r6, #1
 8024f44:	b2b6      	uxth	r6, r6
 8024f46:	e6e1      	b.n	8024d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8024f48:	2000bb0a 	.word	0x2000bb0a
 8024f4c:	2000bb0c 	.word	0x2000bb0c
 8024f50:	fffff800 	.word	0xfffff800
 8024f54:	2000bb14 	.word	0x2000bb14

08024f58 <CRC_Lock>:
 8024f58:	4a13      	ldr	r2, [pc, #76]	; (8024fa8 <CRC_Lock+0x50>)
 8024f5a:	6813      	ldr	r3, [r2, #0]
 8024f5c:	f023 0301 	bic.w	r3, r3, #1
 8024f60:	6013      	str	r3, [r2, #0]
 8024f62:	4b12      	ldr	r3, [pc, #72]	; (8024fac <CRC_Lock+0x54>)
 8024f64:	681b      	ldr	r3, [r3, #0]
 8024f66:	b9a3      	cbnz	r3, 8024f92 <CRC_Lock+0x3a>
 8024f68:	4b11      	ldr	r3, [pc, #68]	; (8024fb0 <CRC_Lock+0x58>)
 8024f6a:	681b      	ldr	r3, [r3, #0]
 8024f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024f70:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8024f74:	d10d      	bne.n	8024f92 <CRC_Lock+0x3a>
 8024f76:	4b0f      	ldr	r3, [pc, #60]	; (8024fb4 <CRC_Lock+0x5c>)
 8024f78:	2201      	movs	r2, #1
 8024f7a:	601a      	str	r2, [r3, #0]
 8024f7c:	681a      	ldr	r2, [r3, #0]
 8024f7e:	2a00      	cmp	r2, #0
 8024f80:	d1fc      	bne.n	8024f7c <CRC_Lock+0x24>
 8024f82:	4b0d      	ldr	r3, [pc, #52]	; (8024fb8 <CRC_Lock+0x60>)
 8024f84:	6018      	str	r0, [r3, #0]
 8024f86:	6818      	ldr	r0, [r3, #0]
 8024f88:	4288      	cmp	r0, r1
 8024f8a:	bf14      	ite	ne
 8024f8c:	2000      	movne	r0, #0
 8024f8e:	2001      	moveq	r0, #1
 8024f90:	4770      	bx	lr
 8024f92:	4b0a      	ldr	r3, [pc, #40]	; (8024fbc <CRC_Lock+0x64>)
 8024f94:	2201      	movs	r2, #1
 8024f96:	601a      	str	r2, [r3, #0]
 8024f98:	681a      	ldr	r2, [r3, #0]
 8024f9a:	2a00      	cmp	r2, #0
 8024f9c:	d1fc      	bne.n	8024f98 <CRC_Lock+0x40>
 8024f9e:	4b08      	ldr	r3, [pc, #32]	; (8024fc0 <CRC_Lock+0x68>)
 8024fa0:	6018      	str	r0, [r3, #0]
 8024fa2:	6818      	ldr	r0, [r3, #0]
 8024fa4:	4281      	cmp	r1, r0
 8024fa6:	e7f0      	b.n	8024f8a <CRC_Lock+0x32>
 8024fa8:	e0002000 	.word	0xe0002000
 8024fac:	e0042000 	.word	0xe0042000
 8024fb0:	5c001000 	.word	0x5c001000
 8024fb4:	58024c08 	.word	0x58024c08
 8024fb8:	58024c00 	.word	0x58024c00
 8024fbc:	40023008 	.word	0x40023008
 8024fc0:	40023000 	.word	0x40023000

08024fc4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024fc4:	6101      	str	r1, [r0, #16]
 8024fc6:	4770      	bx	lr

08024fc8 <_ZN8touchgfx8Gestures4tickEv>:
 8024fc8:	7b83      	ldrb	r3, [r0, #14]
 8024fca:	b14b      	cbz	r3, 8024fe0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024fcc:	8903      	ldrh	r3, [r0, #8]
 8024fce:	3301      	adds	r3, #1
 8024fd0:	b29b      	uxth	r3, r3
 8024fd2:	2b07      	cmp	r3, #7
 8024fd4:	8103      	strh	r3, [r0, #8]
 8024fd6:	bf81      	itttt	hi
 8024fd8:	2300      	movhi	r3, #0
 8024fda:	8143      	strhhi	r3, [r0, #10]
 8024fdc:	8183      	strhhi	r3, [r0, #12]
 8024fde:	7383      	strbhi	r3, [r0, #14]
 8024fe0:	4770      	bx	lr
	...

08024fe4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024fe4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024fe8:	4604      	mov	r4, r0
 8024fea:	4698      	mov	r8, r3
 8024fec:	8880      	ldrh	r0, [r0, #4]
 8024fee:	4617      	mov	r7, r2
 8024ff0:	4b1d      	ldr	r3, [pc, #116]	; (8025068 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8024ff2:	460e      	mov	r6, r1
 8024ff4:	f8ad 0006 	strh.w	r0, [sp, #6]
 8024ff8:	eba8 0000 	sub.w	r0, r8, r0
 8024ffc:	9300      	str	r3, [sp, #0]
 8024ffe:	2300      	movs	r3, #0
 8025000:	b280      	uxth	r0, r0
 8025002:	8aa2      	ldrh	r2, [r4, #20]
 8025004:	f88d 3004 	strb.w	r3, [sp, #4]
 8025008:	b203      	sxth	r3, r0
 802500a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802500e:	88e1      	ldrh	r1, [r4, #6]
 8025010:	2b00      	cmp	r3, #0
 8025012:	f8ad 800a 	strh.w	r8, [sp, #10]
 8025016:	f8ad 1008 	strh.w	r1, [sp, #8]
 802501a:	bfb8      	it	lt
 802501c:	4240      	neglt	r0, r0
 802501e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8025022:	bfb8      	it	lt
 8025024:	b203      	sxthlt	r3, r0
 8025026:	4293      	cmp	r3, r2
 8025028:	dc0c      	bgt.n	8025044 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 802502a:	1a69      	subs	r1, r5, r1
 802502c:	b289      	uxth	r1, r1
 802502e:	b20b      	sxth	r3, r1
 8025030:	2b00      	cmp	r3, #0
 8025032:	bfbc      	itt	lt
 8025034:	4249      	neglt	r1, r1
 8025036:	b20b      	sxthlt	r3, r1
 8025038:	429a      	cmp	r2, r3
 802503a:	db03      	blt.n	8025044 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 802503c:	2000      	movs	r0, #0
 802503e:	b004      	add	sp, #16
 8025040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025044:	6920      	ldr	r0, [r4, #16]
 8025046:	4669      	mov	r1, sp
 8025048:	eba8 0606 	sub.w	r6, r8, r6
 802504c:	1bef      	subs	r7, r5, r7
 802504e:	6803      	ldr	r3, [r0, #0]
 8025050:	685b      	ldr	r3, [r3, #4]
 8025052:	4798      	blx	r3
 8025054:	2300      	movs	r3, #0
 8025056:	2001      	movs	r0, #1
 8025058:	8166      	strh	r6, [r4, #10]
 802505a:	8123      	strh	r3, [r4, #8]
 802505c:	81a7      	strh	r7, [r4, #12]
 802505e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025062:	80e5      	strh	r5, [r4, #6]
 8025064:	73a0      	strb	r0, [r4, #14]
 8025066:	e7ea      	b.n	802503e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 8025068:	080264f4 	.word	0x080264f4

0802506c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802506c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802506e:	461e      	mov	r6, r3
 8025070:	1e4b      	subs	r3, r1, #1
 8025072:	b085      	sub	sp, #20
 8025074:	4604      	mov	r4, r0
 8025076:	2b01      	cmp	r3, #1
 8025078:	460d      	mov	r5, r1
 802507a:	4617      	mov	r7, r2
 802507c:	d845      	bhi.n	802510a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 802507e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8025082:	1cd3      	adds	r3, r2, #3
 8025084:	b29b      	uxth	r3, r3
 8025086:	2b06      	cmp	r3, #6
 8025088:	d913      	bls.n	80250b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 802508a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 802508e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8025092:	4820      	ldr	r0, [pc, #128]	; (8025114 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 8025094:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025098:	a901      	add	r1, sp, #4
 802509a:	9001      	str	r0, [sp, #4]
 802509c:	2000      	movs	r0, #0
 802509e:	f8ad 200a 	strh.w	r2, [sp, #10]
 80250a2:	f88d 0008 	strb.w	r0, [sp, #8]
 80250a6:	6920      	ldr	r0, [r4, #16]
 80250a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80250ac:	6803      	ldr	r3, [r0, #0]
 80250ae:	689b      	ldr	r3, [r3, #8]
 80250b0:	4798      	blx	r3
 80250b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80250b6:	1cd3      	adds	r3, r2, #3
 80250b8:	b29b      	uxth	r3, r3
 80250ba:	2b06      	cmp	r3, #6
 80250bc:	d913      	bls.n	80250e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 80250be:	4815      	ldr	r0, [pc, #84]	; (8025114 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 80250c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80250c4:	9001      	str	r0, [sp, #4]
 80250c6:	2001      	movs	r0, #1
 80250c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80250cc:	f88d 0008 	strb.w	r0, [sp, #8]
 80250d0:	6920      	ldr	r0, [r4, #16]
 80250d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80250d6:	a901      	add	r1, sp, #4
 80250d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80250dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80250e0:	6803      	ldr	r3, [r0, #0]
 80250e2:	689b      	ldr	r3, [r3, #8]
 80250e4:	4798      	blx	r3
 80250e6:	4b0c      	ldr	r3, [pc, #48]	; (8025118 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 80250e8:	a901      	add	r1, sp, #4
 80250ea:	6920      	ldr	r0, [r4, #16]
 80250ec:	9301      	str	r3, [sp, #4]
 80250ee:	2300      	movs	r3, #0
 80250f0:	f88d 5008 	strb.w	r5, [sp, #8]
 80250f4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80250f8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80250fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025100:	6803      	ldr	r3, [r0, #0]
 8025102:	681b      	ldr	r3, [r3, #0]
 8025104:	4798      	blx	r3
 8025106:	b005      	add	sp, #20
 8025108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802510a:	2900      	cmp	r1, #0
 802510c:	d1eb      	bne.n	80250e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802510e:	80a2      	strh	r2, [r4, #4]
 8025110:	80c6      	strh	r6, [r0, #6]
 8025112:	e7e8      	b.n	80250e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 8025114:	08028a38 	.word	0x08028a38
 8025118:	080264e0 	.word	0x080264e0

0802511c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 802511c:	b510      	push	{r4, lr}
 802511e:	8083      	strh	r3, [r0, #4]
 8025120:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8025124:	6101      	str	r1, [r0, #16]
 8025126:	7183      	strb	r3, [r0, #6]
 8025128:	f89d 300c 	ldrb.w	r3, [sp, #12]
 802512c:	8282      	strh	r2, [r0, #20]
 802512e:	71c3      	strb	r3, [r0, #7]
 8025130:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8025134:	7203      	strb	r3, [r0, #8]
 8025136:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802513a:	7243      	strb	r3, [r0, #9]
 802513c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8025140:	8143      	strh	r3, [r0, #10]
 8025142:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8025146:	8183      	strh	r3, [r0, #12]
 8025148:	4b01      	ldr	r3, [pc, #4]	; (8025150 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 802514a:	6003      	str	r3, [r0, #0]
 802514c:	bd10      	pop	{r4, pc}
 802514e:	bf00      	nop
 8025150:	080291ac 	.word	0x080291ac

08025154 <_ZNK8touchgfx9ConstFont4findEt>:
 8025154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025156:	8a84      	ldrh	r4, [r0, #20]
 8025158:	2500      	movs	r5, #0
 802515a:	260e      	movs	r6, #14
 802515c:	3c01      	subs	r4, #1
 802515e:	42a5      	cmp	r5, r4
 8025160:	dc0c      	bgt.n	802517c <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8025162:	192a      	adds	r2, r5, r4
 8025164:	6903      	ldr	r3, [r0, #16]
 8025166:	1052      	asrs	r2, r2, #1
 8025168:	fb06 3302 	mla	r3, r6, r2, r3
 802516c:	889f      	ldrh	r7, [r3, #4]
 802516e:	42b9      	cmp	r1, r7
 8025170:	da01      	bge.n	8025176 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8025172:	1e54      	subs	r4, r2, #1
 8025174:	e7f3      	b.n	802515e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8025176:	dd02      	ble.n	802517e <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8025178:	1c55      	adds	r5, r2, #1
 802517a:	e7f0      	b.n	802515e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 802517c:	2300      	movs	r3, #0
 802517e:	4618      	mov	r0, r3
 8025180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025182 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8025182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025184:	4605      	mov	r5, r0
 8025186:	4617      	mov	r7, r2
 8025188:	461e      	mov	r6, r3
 802518a:	f7ff ffe3 	bl	8025154 <_ZNK8touchgfx9ConstFont4findEt>
 802518e:	b9e0      	cbnz	r0, 80251ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8025190:	b911      	cbnz	r1, 8025198 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8025192:	2400      	movs	r4, #0
 8025194:	4620      	mov	r0, r4
 8025196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025198:	290a      	cmp	r1, #10
 802519a:	d0fa      	beq.n	8025192 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 802519c:	682b      	ldr	r3, [r5, #0]
 802519e:	4628      	mov	r0, r5
 80251a0:	691b      	ldr	r3, [r3, #16]
 80251a2:	4798      	blx	r3
 80251a4:	4601      	mov	r1, r0
 80251a6:	4628      	mov	r0, r5
 80251a8:	f7ff ffd4 	bl	8025154 <_ZNK8touchgfx9ConstFont4findEt>
 80251ac:	4604      	mov	r4, r0
 80251ae:	2800      	cmp	r0, #0
 80251b0:	d0ef      	beq.n	8025192 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80251b2:	682b      	ldr	r3, [r5, #0]
 80251b4:	4621      	mov	r1, r4
 80251b6:	4628      	mov	r0, r5
 80251b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80251ba:	4798      	blx	r3
 80251bc:	6038      	str	r0, [r7, #0]
 80251be:	682b      	ldr	r3, [r5, #0]
 80251c0:	4628      	mov	r0, r5
 80251c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80251c4:	4798      	blx	r3
 80251c6:	7030      	strb	r0, [r6, #0]
 80251c8:	e7e4      	b.n	8025194 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 80251ca:	4604      	mov	r4, r0
 80251cc:	e7f1      	b.n	80251b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

080251ce <__cxa_pure_virtual>:
 80251ce:	b508      	push	{r3, lr}
 80251d0:	f000 f810 	bl	80251f4 <_ZSt9terminatev>

080251d4 <_ZdlPvj>:
 80251d4:	f000 b800 	b.w	80251d8 <_ZdlPv>

080251d8 <_ZdlPv>:
 80251d8:	f000 b880 	b.w	80252dc <free>

080251dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80251dc:	b508      	push	{r3, lr}
 80251de:	4780      	blx	r0
 80251e0:	f000 f80d 	bl	80251fe <abort>

080251e4 <_ZSt13get_terminatev>:
 80251e4:	4b02      	ldr	r3, [pc, #8]	; (80251f0 <_ZSt13get_terminatev+0xc>)
 80251e6:	6818      	ldr	r0, [r3, #0]
 80251e8:	f3bf 8f5b 	dmb	ish
 80251ec:	4770      	bx	lr
 80251ee:	bf00      	nop
 80251f0:	20000078 	.word	0x20000078

080251f4 <_ZSt9terminatev>:
 80251f4:	b508      	push	{r3, lr}
 80251f6:	f7ff fff5 	bl	80251e4 <_ZSt13get_terminatev>
 80251fa:	f7ff ffef 	bl	80251dc <_ZN10__cxxabiv111__terminateEPFvvE>

080251fe <abort>:
 80251fe:	b508      	push	{r3, lr}
 8025200:	2006      	movs	r0, #6
 8025202:	f000 fc2f 	bl	8025a64 <raise>
 8025206:	2001      	movs	r0, #1
 8025208:	f7f7 fcf2 	bl	801cbf0 <_exit>

0802520c <__assert_func>:
 802520c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802520e:	461c      	mov	r4, r3
 8025210:	4b09      	ldr	r3, [pc, #36]	; (8025238 <__assert_func+0x2c>)
 8025212:	681b      	ldr	r3, [r3, #0]
 8025214:	4605      	mov	r5, r0
 8025216:	68d8      	ldr	r0, [r3, #12]
 8025218:	b152      	cbz	r2, 8025230 <__assert_func+0x24>
 802521a:	4b08      	ldr	r3, [pc, #32]	; (802523c <__assert_func+0x30>)
 802521c:	9100      	str	r1, [sp, #0]
 802521e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8025222:	4907      	ldr	r1, [pc, #28]	; (8025240 <__assert_func+0x34>)
 8025224:	462b      	mov	r3, r5
 8025226:	4622      	mov	r2, r4
 8025228:	f000 f81a 	bl	8025260 <fiprintf>
 802522c:	f7ff ffe7 	bl	80251fe <abort>
 8025230:	4b04      	ldr	r3, [pc, #16]	; (8025244 <__assert_func+0x38>)
 8025232:	461a      	mov	r2, r3
 8025234:	e7f2      	b.n	802521c <__assert_func+0x10>
 8025236:	bf00      	nop
 8025238:	2000007c 	.word	0x2000007c
 802523c:	080291f0 	.word	0x080291f0
 8025240:	080291fd 	.word	0x080291fd
 8025244:	0802922b 	.word	0x0802922b

08025248 <atexit>:
 8025248:	2300      	movs	r3, #0
 802524a:	4601      	mov	r1, r0
 802524c:	461a      	mov	r2, r3
 802524e:	4618      	mov	r0, r3
 8025250:	f000 bcec 	b.w	8025c2c <__register_exitproc>

08025254 <__errno>:
 8025254:	4b01      	ldr	r3, [pc, #4]	; (802525c <__errno+0x8>)
 8025256:	6818      	ldr	r0, [r3, #0]
 8025258:	4770      	bx	lr
 802525a:	bf00      	nop
 802525c:	2000007c 	.word	0x2000007c

08025260 <fiprintf>:
 8025260:	b40e      	push	{r1, r2, r3}
 8025262:	b503      	push	{r0, r1, lr}
 8025264:	4601      	mov	r1, r0
 8025266:	ab03      	add	r3, sp, #12
 8025268:	4805      	ldr	r0, [pc, #20]	; (8025280 <fiprintf+0x20>)
 802526a:	f853 2b04 	ldr.w	r2, [r3], #4
 802526e:	6800      	ldr	r0, [r0, #0]
 8025270:	9301      	str	r3, [sp, #4]
 8025272:	f000 f921 	bl	80254b8 <_vfiprintf_r>
 8025276:	b002      	add	sp, #8
 8025278:	f85d eb04 	ldr.w	lr, [sp], #4
 802527c:	b003      	add	sp, #12
 802527e:	4770      	bx	lr
 8025280:	2000007c 	.word	0x2000007c

08025284 <__libc_init_array>:
 8025284:	b570      	push	{r4, r5, r6, lr}
 8025286:	4e0d      	ldr	r6, [pc, #52]	; (80252bc <__libc_init_array+0x38>)
 8025288:	4c0d      	ldr	r4, [pc, #52]	; (80252c0 <__libc_init_array+0x3c>)
 802528a:	1ba4      	subs	r4, r4, r6
 802528c:	10a4      	asrs	r4, r4, #2
 802528e:	2500      	movs	r5, #0
 8025290:	42a5      	cmp	r5, r4
 8025292:	d109      	bne.n	80252a8 <__libc_init_array+0x24>
 8025294:	4e0b      	ldr	r6, [pc, #44]	; (80252c4 <__libc_init_array+0x40>)
 8025296:	4c0c      	ldr	r4, [pc, #48]	; (80252c8 <__libc_init_array+0x44>)
 8025298:	f000 ffb8 	bl	802620c <_init>
 802529c:	1ba4      	subs	r4, r4, r6
 802529e:	10a4      	asrs	r4, r4, #2
 80252a0:	2500      	movs	r5, #0
 80252a2:	42a5      	cmp	r5, r4
 80252a4:	d105      	bne.n	80252b2 <__libc_init_array+0x2e>
 80252a6:	bd70      	pop	{r4, r5, r6, pc}
 80252a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80252ac:	4798      	blx	r3
 80252ae:	3501      	adds	r5, #1
 80252b0:	e7ee      	b.n	8025290 <__libc_init_array+0xc>
 80252b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80252b6:	4798      	blx	r3
 80252b8:	3501      	adds	r5, #1
 80252ba:	e7f2      	b.n	80252a2 <__libc_init_array+0x1e>
 80252bc:	080c1818 	.word	0x080c1818
 80252c0:	080c1818 	.word	0x080c1818
 80252c4:	080c1818 	.word	0x080c1818
 80252c8:	080c1828 	.word	0x080c1828

080252cc <malloc>:
 80252cc:	4b02      	ldr	r3, [pc, #8]	; (80252d8 <malloc+0xc>)
 80252ce:	4601      	mov	r1, r0
 80252d0:	6818      	ldr	r0, [r3, #0]
 80252d2:	f000 b86d 	b.w	80253b0 <_malloc_r>
 80252d6:	bf00      	nop
 80252d8:	2000007c 	.word	0x2000007c

080252dc <free>:
 80252dc:	4b02      	ldr	r3, [pc, #8]	; (80252e8 <free+0xc>)
 80252de:	4601      	mov	r1, r0
 80252e0:	6818      	ldr	r0, [r3, #0]
 80252e2:	f000 b817 	b.w	8025314 <_free_r>
 80252e6:	bf00      	nop
 80252e8:	2000007c 	.word	0x2000007c

080252ec <memcpy>:
 80252ec:	b510      	push	{r4, lr}
 80252ee:	1e43      	subs	r3, r0, #1
 80252f0:	440a      	add	r2, r1
 80252f2:	4291      	cmp	r1, r2
 80252f4:	d100      	bne.n	80252f8 <memcpy+0xc>
 80252f6:	bd10      	pop	{r4, pc}
 80252f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80252fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025300:	e7f7      	b.n	80252f2 <memcpy+0x6>

08025302 <memset>:
 8025302:	4402      	add	r2, r0
 8025304:	4603      	mov	r3, r0
 8025306:	4293      	cmp	r3, r2
 8025308:	d100      	bne.n	802530c <memset+0xa>
 802530a:	4770      	bx	lr
 802530c:	f803 1b01 	strb.w	r1, [r3], #1
 8025310:	e7f9      	b.n	8025306 <memset+0x4>
	...

08025314 <_free_r>:
 8025314:	b538      	push	{r3, r4, r5, lr}
 8025316:	4605      	mov	r5, r0
 8025318:	2900      	cmp	r1, #0
 802531a:	d045      	beq.n	80253a8 <_free_r+0x94>
 802531c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025320:	1f0c      	subs	r4, r1, #4
 8025322:	2b00      	cmp	r3, #0
 8025324:	bfb8      	it	lt
 8025326:	18e4      	addlt	r4, r4, r3
 8025328:	f000 fec2 	bl	80260b0 <__malloc_lock>
 802532c:	4a1f      	ldr	r2, [pc, #124]	; (80253ac <_free_r+0x98>)
 802532e:	6813      	ldr	r3, [r2, #0]
 8025330:	4610      	mov	r0, r2
 8025332:	b933      	cbnz	r3, 8025342 <_free_r+0x2e>
 8025334:	6063      	str	r3, [r4, #4]
 8025336:	6014      	str	r4, [r2, #0]
 8025338:	4628      	mov	r0, r5
 802533a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802533e:	f000 beb8 	b.w	80260b2 <__malloc_unlock>
 8025342:	42a3      	cmp	r3, r4
 8025344:	d90c      	bls.n	8025360 <_free_r+0x4c>
 8025346:	6821      	ldr	r1, [r4, #0]
 8025348:	1862      	adds	r2, r4, r1
 802534a:	4293      	cmp	r3, r2
 802534c:	bf04      	itt	eq
 802534e:	681a      	ldreq	r2, [r3, #0]
 8025350:	685b      	ldreq	r3, [r3, #4]
 8025352:	6063      	str	r3, [r4, #4]
 8025354:	bf04      	itt	eq
 8025356:	1852      	addeq	r2, r2, r1
 8025358:	6022      	streq	r2, [r4, #0]
 802535a:	6004      	str	r4, [r0, #0]
 802535c:	e7ec      	b.n	8025338 <_free_r+0x24>
 802535e:	4613      	mov	r3, r2
 8025360:	685a      	ldr	r2, [r3, #4]
 8025362:	b10a      	cbz	r2, 8025368 <_free_r+0x54>
 8025364:	42a2      	cmp	r2, r4
 8025366:	d9fa      	bls.n	802535e <_free_r+0x4a>
 8025368:	6819      	ldr	r1, [r3, #0]
 802536a:	1858      	adds	r0, r3, r1
 802536c:	42a0      	cmp	r0, r4
 802536e:	d10b      	bne.n	8025388 <_free_r+0x74>
 8025370:	6820      	ldr	r0, [r4, #0]
 8025372:	4401      	add	r1, r0
 8025374:	1858      	adds	r0, r3, r1
 8025376:	4282      	cmp	r2, r0
 8025378:	6019      	str	r1, [r3, #0]
 802537a:	d1dd      	bne.n	8025338 <_free_r+0x24>
 802537c:	6810      	ldr	r0, [r2, #0]
 802537e:	6852      	ldr	r2, [r2, #4]
 8025380:	605a      	str	r2, [r3, #4]
 8025382:	4401      	add	r1, r0
 8025384:	6019      	str	r1, [r3, #0]
 8025386:	e7d7      	b.n	8025338 <_free_r+0x24>
 8025388:	d902      	bls.n	8025390 <_free_r+0x7c>
 802538a:	230c      	movs	r3, #12
 802538c:	602b      	str	r3, [r5, #0]
 802538e:	e7d3      	b.n	8025338 <_free_r+0x24>
 8025390:	6820      	ldr	r0, [r4, #0]
 8025392:	1821      	adds	r1, r4, r0
 8025394:	428a      	cmp	r2, r1
 8025396:	bf04      	itt	eq
 8025398:	6811      	ldreq	r1, [r2, #0]
 802539a:	6852      	ldreq	r2, [r2, #4]
 802539c:	6062      	str	r2, [r4, #4]
 802539e:	bf04      	itt	eq
 80253a0:	1809      	addeq	r1, r1, r0
 80253a2:	6021      	streq	r1, [r4, #0]
 80253a4:	605c      	str	r4, [r3, #4]
 80253a6:	e7c7      	b.n	8025338 <_free_r+0x24>
 80253a8:	bd38      	pop	{r3, r4, r5, pc}
 80253aa:	bf00      	nop
 80253ac:	2000bbd0 	.word	0x2000bbd0

080253b0 <_malloc_r>:
 80253b0:	b570      	push	{r4, r5, r6, lr}
 80253b2:	1ccd      	adds	r5, r1, #3
 80253b4:	f025 0503 	bic.w	r5, r5, #3
 80253b8:	3508      	adds	r5, #8
 80253ba:	2d0c      	cmp	r5, #12
 80253bc:	bf38      	it	cc
 80253be:	250c      	movcc	r5, #12
 80253c0:	2d00      	cmp	r5, #0
 80253c2:	4606      	mov	r6, r0
 80253c4:	db01      	blt.n	80253ca <_malloc_r+0x1a>
 80253c6:	42a9      	cmp	r1, r5
 80253c8:	d903      	bls.n	80253d2 <_malloc_r+0x22>
 80253ca:	230c      	movs	r3, #12
 80253cc:	6033      	str	r3, [r6, #0]
 80253ce:	2000      	movs	r0, #0
 80253d0:	bd70      	pop	{r4, r5, r6, pc}
 80253d2:	f000 fe6d 	bl	80260b0 <__malloc_lock>
 80253d6:	4a21      	ldr	r2, [pc, #132]	; (802545c <_malloc_r+0xac>)
 80253d8:	6814      	ldr	r4, [r2, #0]
 80253da:	4621      	mov	r1, r4
 80253dc:	b991      	cbnz	r1, 8025404 <_malloc_r+0x54>
 80253de:	4c20      	ldr	r4, [pc, #128]	; (8025460 <_malloc_r+0xb0>)
 80253e0:	6823      	ldr	r3, [r4, #0]
 80253e2:	b91b      	cbnz	r3, 80253ec <_malloc_r+0x3c>
 80253e4:	4630      	mov	r0, r6
 80253e6:	f000 fb05 	bl	80259f4 <_sbrk_r>
 80253ea:	6020      	str	r0, [r4, #0]
 80253ec:	4629      	mov	r1, r5
 80253ee:	4630      	mov	r0, r6
 80253f0:	f000 fb00 	bl	80259f4 <_sbrk_r>
 80253f4:	1c43      	adds	r3, r0, #1
 80253f6:	d124      	bne.n	8025442 <_malloc_r+0x92>
 80253f8:	230c      	movs	r3, #12
 80253fa:	6033      	str	r3, [r6, #0]
 80253fc:	4630      	mov	r0, r6
 80253fe:	f000 fe58 	bl	80260b2 <__malloc_unlock>
 8025402:	e7e4      	b.n	80253ce <_malloc_r+0x1e>
 8025404:	680b      	ldr	r3, [r1, #0]
 8025406:	1b5b      	subs	r3, r3, r5
 8025408:	d418      	bmi.n	802543c <_malloc_r+0x8c>
 802540a:	2b0b      	cmp	r3, #11
 802540c:	d90f      	bls.n	802542e <_malloc_r+0x7e>
 802540e:	600b      	str	r3, [r1, #0]
 8025410:	50cd      	str	r5, [r1, r3]
 8025412:	18cc      	adds	r4, r1, r3
 8025414:	4630      	mov	r0, r6
 8025416:	f000 fe4c 	bl	80260b2 <__malloc_unlock>
 802541a:	f104 000b 	add.w	r0, r4, #11
 802541e:	1d23      	adds	r3, r4, #4
 8025420:	f020 0007 	bic.w	r0, r0, #7
 8025424:	1ac3      	subs	r3, r0, r3
 8025426:	d0d3      	beq.n	80253d0 <_malloc_r+0x20>
 8025428:	425a      	negs	r2, r3
 802542a:	50e2      	str	r2, [r4, r3]
 802542c:	e7d0      	b.n	80253d0 <_malloc_r+0x20>
 802542e:	428c      	cmp	r4, r1
 8025430:	684b      	ldr	r3, [r1, #4]
 8025432:	bf16      	itet	ne
 8025434:	6063      	strne	r3, [r4, #4]
 8025436:	6013      	streq	r3, [r2, #0]
 8025438:	460c      	movne	r4, r1
 802543a:	e7eb      	b.n	8025414 <_malloc_r+0x64>
 802543c:	460c      	mov	r4, r1
 802543e:	6849      	ldr	r1, [r1, #4]
 8025440:	e7cc      	b.n	80253dc <_malloc_r+0x2c>
 8025442:	1cc4      	adds	r4, r0, #3
 8025444:	f024 0403 	bic.w	r4, r4, #3
 8025448:	42a0      	cmp	r0, r4
 802544a:	d005      	beq.n	8025458 <_malloc_r+0xa8>
 802544c:	1a21      	subs	r1, r4, r0
 802544e:	4630      	mov	r0, r6
 8025450:	f000 fad0 	bl	80259f4 <_sbrk_r>
 8025454:	3001      	adds	r0, #1
 8025456:	d0cf      	beq.n	80253f8 <_malloc_r+0x48>
 8025458:	6025      	str	r5, [r4, #0]
 802545a:	e7db      	b.n	8025414 <_malloc_r+0x64>
 802545c:	2000bbd0 	.word	0x2000bbd0
 8025460:	2000bbd4 	.word	0x2000bbd4

08025464 <__sfputc_r>:
 8025464:	6893      	ldr	r3, [r2, #8]
 8025466:	3b01      	subs	r3, #1
 8025468:	2b00      	cmp	r3, #0
 802546a:	b410      	push	{r4}
 802546c:	6093      	str	r3, [r2, #8]
 802546e:	da08      	bge.n	8025482 <__sfputc_r+0x1e>
 8025470:	6994      	ldr	r4, [r2, #24]
 8025472:	42a3      	cmp	r3, r4
 8025474:	db01      	blt.n	802547a <__sfputc_r+0x16>
 8025476:	290a      	cmp	r1, #10
 8025478:	d103      	bne.n	8025482 <__sfputc_r+0x1e>
 802547a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802547e:	f000 bb15 	b.w	8025aac <__swbuf_r>
 8025482:	6813      	ldr	r3, [r2, #0]
 8025484:	1c58      	adds	r0, r3, #1
 8025486:	6010      	str	r0, [r2, #0]
 8025488:	7019      	strb	r1, [r3, #0]
 802548a:	4608      	mov	r0, r1
 802548c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025490:	4770      	bx	lr

08025492 <__sfputs_r>:
 8025492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025494:	4606      	mov	r6, r0
 8025496:	460f      	mov	r7, r1
 8025498:	4614      	mov	r4, r2
 802549a:	18d5      	adds	r5, r2, r3
 802549c:	42ac      	cmp	r4, r5
 802549e:	d101      	bne.n	80254a4 <__sfputs_r+0x12>
 80254a0:	2000      	movs	r0, #0
 80254a2:	e007      	b.n	80254b4 <__sfputs_r+0x22>
 80254a4:	463a      	mov	r2, r7
 80254a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80254aa:	4630      	mov	r0, r6
 80254ac:	f7ff ffda 	bl	8025464 <__sfputc_r>
 80254b0:	1c43      	adds	r3, r0, #1
 80254b2:	d1f3      	bne.n	802549c <__sfputs_r+0xa>
 80254b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080254b8 <_vfiprintf_r>:
 80254b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254bc:	460c      	mov	r4, r1
 80254be:	b09d      	sub	sp, #116	; 0x74
 80254c0:	4617      	mov	r7, r2
 80254c2:	461d      	mov	r5, r3
 80254c4:	4606      	mov	r6, r0
 80254c6:	b118      	cbz	r0, 80254d0 <_vfiprintf_r+0x18>
 80254c8:	6983      	ldr	r3, [r0, #24]
 80254ca:	b90b      	cbnz	r3, 80254d0 <_vfiprintf_r+0x18>
 80254cc:	f000 fd02 	bl	8025ed4 <__sinit>
 80254d0:	4b7c      	ldr	r3, [pc, #496]	; (80256c4 <_vfiprintf_r+0x20c>)
 80254d2:	429c      	cmp	r4, r3
 80254d4:	d158      	bne.n	8025588 <_vfiprintf_r+0xd0>
 80254d6:	6874      	ldr	r4, [r6, #4]
 80254d8:	89a3      	ldrh	r3, [r4, #12]
 80254da:	0718      	lsls	r0, r3, #28
 80254dc:	d55e      	bpl.n	802559c <_vfiprintf_r+0xe4>
 80254de:	6923      	ldr	r3, [r4, #16]
 80254e0:	2b00      	cmp	r3, #0
 80254e2:	d05b      	beq.n	802559c <_vfiprintf_r+0xe4>
 80254e4:	2300      	movs	r3, #0
 80254e6:	9309      	str	r3, [sp, #36]	; 0x24
 80254e8:	2320      	movs	r3, #32
 80254ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80254ee:	2330      	movs	r3, #48	; 0x30
 80254f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80254f4:	9503      	str	r5, [sp, #12]
 80254f6:	f04f 0b01 	mov.w	fp, #1
 80254fa:	46b8      	mov	r8, r7
 80254fc:	4645      	mov	r5, r8
 80254fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025502:	b10b      	cbz	r3, 8025508 <_vfiprintf_r+0x50>
 8025504:	2b25      	cmp	r3, #37	; 0x25
 8025506:	d154      	bne.n	80255b2 <_vfiprintf_r+0xfa>
 8025508:	ebb8 0a07 	subs.w	sl, r8, r7
 802550c:	d00b      	beq.n	8025526 <_vfiprintf_r+0x6e>
 802550e:	4653      	mov	r3, sl
 8025510:	463a      	mov	r2, r7
 8025512:	4621      	mov	r1, r4
 8025514:	4630      	mov	r0, r6
 8025516:	f7ff ffbc 	bl	8025492 <__sfputs_r>
 802551a:	3001      	adds	r0, #1
 802551c:	f000 80c2 	beq.w	80256a4 <_vfiprintf_r+0x1ec>
 8025520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025522:	4453      	add	r3, sl
 8025524:	9309      	str	r3, [sp, #36]	; 0x24
 8025526:	f898 3000 	ldrb.w	r3, [r8]
 802552a:	2b00      	cmp	r3, #0
 802552c:	f000 80ba 	beq.w	80256a4 <_vfiprintf_r+0x1ec>
 8025530:	2300      	movs	r3, #0
 8025532:	f04f 32ff 	mov.w	r2, #4294967295
 8025536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802553a:	9304      	str	r3, [sp, #16]
 802553c:	9307      	str	r3, [sp, #28]
 802553e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025542:	931a      	str	r3, [sp, #104]	; 0x68
 8025544:	46a8      	mov	r8, r5
 8025546:	2205      	movs	r2, #5
 8025548:	f818 1b01 	ldrb.w	r1, [r8], #1
 802554c:	485e      	ldr	r0, [pc, #376]	; (80256c8 <_vfiprintf_r+0x210>)
 802554e:	f7da fe5f 	bl	8000210 <memchr>
 8025552:	9b04      	ldr	r3, [sp, #16]
 8025554:	bb78      	cbnz	r0, 80255b6 <_vfiprintf_r+0xfe>
 8025556:	06d9      	lsls	r1, r3, #27
 8025558:	bf44      	itt	mi
 802555a:	2220      	movmi	r2, #32
 802555c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8025560:	071a      	lsls	r2, r3, #28
 8025562:	bf44      	itt	mi
 8025564:	222b      	movmi	r2, #43	; 0x2b
 8025566:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802556a:	782a      	ldrb	r2, [r5, #0]
 802556c:	2a2a      	cmp	r2, #42	; 0x2a
 802556e:	d02a      	beq.n	80255c6 <_vfiprintf_r+0x10e>
 8025570:	9a07      	ldr	r2, [sp, #28]
 8025572:	46a8      	mov	r8, r5
 8025574:	2000      	movs	r0, #0
 8025576:	250a      	movs	r5, #10
 8025578:	4641      	mov	r1, r8
 802557a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802557e:	3b30      	subs	r3, #48	; 0x30
 8025580:	2b09      	cmp	r3, #9
 8025582:	d969      	bls.n	8025658 <_vfiprintf_r+0x1a0>
 8025584:	b360      	cbz	r0, 80255e0 <_vfiprintf_r+0x128>
 8025586:	e024      	b.n	80255d2 <_vfiprintf_r+0x11a>
 8025588:	4b50      	ldr	r3, [pc, #320]	; (80256cc <_vfiprintf_r+0x214>)
 802558a:	429c      	cmp	r4, r3
 802558c:	d101      	bne.n	8025592 <_vfiprintf_r+0xda>
 802558e:	68b4      	ldr	r4, [r6, #8]
 8025590:	e7a2      	b.n	80254d8 <_vfiprintf_r+0x20>
 8025592:	4b4f      	ldr	r3, [pc, #316]	; (80256d0 <_vfiprintf_r+0x218>)
 8025594:	429c      	cmp	r4, r3
 8025596:	bf08      	it	eq
 8025598:	68f4      	ldreq	r4, [r6, #12]
 802559a:	e79d      	b.n	80254d8 <_vfiprintf_r+0x20>
 802559c:	4621      	mov	r1, r4
 802559e:	4630      	mov	r0, r6
 80255a0:	f000 fad6 	bl	8025b50 <__swsetup_r>
 80255a4:	2800      	cmp	r0, #0
 80255a6:	d09d      	beq.n	80254e4 <_vfiprintf_r+0x2c>
 80255a8:	f04f 30ff 	mov.w	r0, #4294967295
 80255ac:	b01d      	add	sp, #116	; 0x74
 80255ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255b2:	46a8      	mov	r8, r5
 80255b4:	e7a2      	b.n	80254fc <_vfiprintf_r+0x44>
 80255b6:	4a44      	ldr	r2, [pc, #272]	; (80256c8 <_vfiprintf_r+0x210>)
 80255b8:	1a80      	subs	r0, r0, r2
 80255ba:	fa0b f000 	lsl.w	r0, fp, r0
 80255be:	4318      	orrs	r0, r3
 80255c0:	9004      	str	r0, [sp, #16]
 80255c2:	4645      	mov	r5, r8
 80255c4:	e7be      	b.n	8025544 <_vfiprintf_r+0x8c>
 80255c6:	9a03      	ldr	r2, [sp, #12]
 80255c8:	1d11      	adds	r1, r2, #4
 80255ca:	6812      	ldr	r2, [r2, #0]
 80255cc:	9103      	str	r1, [sp, #12]
 80255ce:	2a00      	cmp	r2, #0
 80255d0:	db01      	blt.n	80255d6 <_vfiprintf_r+0x11e>
 80255d2:	9207      	str	r2, [sp, #28]
 80255d4:	e004      	b.n	80255e0 <_vfiprintf_r+0x128>
 80255d6:	4252      	negs	r2, r2
 80255d8:	f043 0302 	orr.w	r3, r3, #2
 80255dc:	9207      	str	r2, [sp, #28]
 80255de:	9304      	str	r3, [sp, #16]
 80255e0:	f898 3000 	ldrb.w	r3, [r8]
 80255e4:	2b2e      	cmp	r3, #46	; 0x2e
 80255e6:	d10e      	bne.n	8025606 <_vfiprintf_r+0x14e>
 80255e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80255ec:	2b2a      	cmp	r3, #42	; 0x2a
 80255ee:	d138      	bne.n	8025662 <_vfiprintf_r+0x1aa>
 80255f0:	9b03      	ldr	r3, [sp, #12]
 80255f2:	1d1a      	adds	r2, r3, #4
 80255f4:	681b      	ldr	r3, [r3, #0]
 80255f6:	9203      	str	r2, [sp, #12]
 80255f8:	2b00      	cmp	r3, #0
 80255fa:	bfb8      	it	lt
 80255fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8025600:	f108 0802 	add.w	r8, r8, #2
 8025604:	9305      	str	r3, [sp, #20]
 8025606:	4d33      	ldr	r5, [pc, #204]	; (80256d4 <_vfiprintf_r+0x21c>)
 8025608:	f898 1000 	ldrb.w	r1, [r8]
 802560c:	2203      	movs	r2, #3
 802560e:	4628      	mov	r0, r5
 8025610:	f7da fdfe 	bl	8000210 <memchr>
 8025614:	b140      	cbz	r0, 8025628 <_vfiprintf_r+0x170>
 8025616:	2340      	movs	r3, #64	; 0x40
 8025618:	1b40      	subs	r0, r0, r5
 802561a:	fa03 f000 	lsl.w	r0, r3, r0
 802561e:	9b04      	ldr	r3, [sp, #16]
 8025620:	4303      	orrs	r3, r0
 8025622:	f108 0801 	add.w	r8, r8, #1
 8025626:	9304      	str	r3, [sp, #16]
 8025628:	f898 1000 	ldrb.w	r1, [r8]
 802562c:	482a      	ldr	r0, [pc, #168]	; (80256d8 <_vfiprintf_r+0x220>)
 802562e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025632:	2206      	movs	r2, #6
 8025634:	f108 0701 	add.w	r7, r8, #1
 8025638:	f7da fdea 	bl	8000210 <memchr>
 802563c:	2800      	cmp	r0, #0
 802563e:	d037      	beq.n	80256b0 <_vfiprintf_r+0x1f8>
 8025640:	4b26      	ldr	r3, [pc, #152]	; (80256dc <_vfiprintf_r+0x224>)
 8025642:	bb1b      	cbnz	r3, 802568c <_vfiprintf_r+0x1d4>
 8025644:	9b03      	ldr	r3, [sp, #12]
 8025646:	3307      	adds	r3, #7
 8025648:	f023 0307 	bic.w	r3, r3, #7
 802564c:	3308      	adds	r3, #8
 802564e:	9303      	str	r3, [sp, #12]
 8025650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025652:	444b      	add	r3, r9
 8025654:	9309      	str	r3, [sp, #36]	; 0x24
 8025656:	e750      	b.n	80254fa <_vfiprintf_r+0x42>
 8025658:	fb05 3202 	mla	r2, r5, r2, r3
 802565c:	2001      	movs	r0, #1
 802565e:	4688      	mov	r8, r1
 8025660:	e78a      	b.n	8025578 <_vfiprintf_r+0xc0>
 8025662:	2300      	movs	r3, #0
 8025664:	f108 0801 	add.w	r8, r8, #1
 8025668:	9305      	str	r3, [sp, #20]
 802566a:	4619      	mov	r1, r3
 802566c:	250a      	movs	r5, #10
 802566e:	4640      	mov	r0, r8
 8025670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025674:	3a30      	subs	r2, #48	; 0x30
 8025676:	2a09      	cmp	r2, #9
 8025678:	d903      	bls.n	8025682 <_vfiprintf_r+0x1ca>
 802567a:	2b00      	cmp	r3, #0
 802567c:	d0c3      	beq.n	8025606 <_vfiprintf_r+0x14e>
 802567e:	9105      	str	r1, [sp, #20]
 8025680:	e7c1      	b.n	8025606 <_vfiprintf_r+0x14e>
 8025682:	fb05 2101 	mla	r1, r5, r1, r2
 8025686:	2301      	movs	r3, #1
 8025688:	4680      	mov	r8, r0
 802568a:	e7f0      	b.n	802566e <_vfiprintf_r+0x1b6>
 802568c:	ab03      	add	r3, sp, #12
 802568e:	9300      	str	r3, [sp, #0]
 8025690:	4622      	mov	r2, r4
 8025692:	4b13      	ldr	r3, [pc, #76]	; (80256e0 <_vfiprintf_r+0x228>)
 8025694:	a904      	add	r1, sp, #16
 8025696:	4630      	mov	r0, r6
 8025698:	f3af 8000 	nop.w
 802569c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80256a0:	4681      	mov	r9, r0
 80256a2:	d1d5      	bne.n	8025650 <_vfiprintf_r+0x198>
 80256a4:	89a3      	ldrh	r3, [r4, #12]
 80256a6:	065b      	lsls	r3, r3, #25
 80256a8:	f53f af7e 	bmi.w	80255a8 <_vfiprintf_r+0xf0>
 80256ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80256ae:	e77d      	b.n	80255ac <_vfiprintf_r+0xf4>
 80256b0:	ab03      	add	r3, sp, #12
 80256b2:	9300      	str	r3, [sp, #0]
 80256b4:	4622      	mov	r2, r4
 80256b6:	4b0a      	ldr	r3, [pc, #40]	; (80256e0 <_vfiprintf_r+0x228>)
 80256b8:	a904      	add	r1, sp, #16
 80256ba:	4630      	mov	r0, r6
 80256bc:	f000 f888 	bl	80257d0 <_printf_i>
 80256c0:	e7ec      	b.n	802569c <_vfiprintf_r+0x1e4>
 80256c2:	bf00      	nop
 80256c4:	08029284 	.word	0x08029284
 80256c8:	08029230 	.word	0x08029230
 80256cc:	080292a4 	.word	0x080292a4
 80256d0:	08029264 	.word	0x08029264
 80256d4:	08029236 	.word	0x08029236
 80256d8:	0802923a 	.word	0x0802923a
 80256dc:	00000000 	.word	0x00000000
 80256e0:	08025493 	.word	0x08025493

080256e4 <_printf_common>:
 80256e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256e8:	4691      	mov	r9, r2
 80256ea:	461f      	mov	r7, r3
 80256ec:	688a      	ldr	r2, [r1, #8]
 80256ee:	690b      	ldr	r3, [r1, #16]
 80256f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80256f4:	4293      	cmp	r3, r2
 80256f6:	bfb8      	it	lt
 80256f8:	4613      	movlt	r3, r2
 80256fa:	f8c9 3000 	str.w	r3, [r9]
 80256fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025702:	4606      	mov	r6, r0
 8025704:	460c      	mov	r4, r1
 8025706:	b112      	cbz	r2, 802570e <_printf_common+0x2a>
 8025708:	3301      	adds	r3, #1
 802570a:	f8c9 3000 	str.w	r3, [r9]
 802570e:	6823      	ldr	r3, [r4, #0]
 8025710:	0699      	lsls	r1, r3, #26
 8025712:	bf42      	ittt	mi
 8025714:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025718:	3302      	addmi	r3, #2
 802571a:	f8c9 3000 	strmi.w	r3, [r9]
 802571e:	6825      	ldr	r5, [r4, #0]
 8025720:	f015 0506 	ands.w	r5, r5, #6
 8025724:	d107      	bne.n	8025736 <_printf_common+0x52>
 8025726:	f104 0a19 	add.w	sl, r4, #25
 802572a:	68e3      	ldr	r3, [r4, #12]
 802572c:	f8d9 2000 	ldr.w	r2, [r9]
 8025730:	1a9b      	subs	r3, r3, r2
 8025732:	42ab      	cmp	r3, r5
 8025734:	dc28      	bgt.n	8025788 <_printf_common+0xa4>
 8025736:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802573a:	6822      	ldr	r2, [r4, #0]
 802573c:	3300      	adds	r3, #0
 802573e:	bf18      	it	ne
 8025740:	2301      	movne	r3, #1
 8025742:	0692      	lsls	r2, r2, #26
 8025744:	d42d      	bmi.n	80257a2 <_printf_common+0xbe>
 8025746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802574a:	4639      	mov	r1, r7
 802574c:	4630      	mov	r0, r6
 802574e:	47c0      	blx	r8
 8025750:	3001      	adds	r0, #1
 8025752:	d020      	beq.n	8025796 <_printf_common+0xb2>
 8025754:	6823      	ldr	r3, [r4, #0]
 8025756:	68e5      	ldr	r5, [r4, #12]
 8025758:	f8d9 2000 	ldr.w	r2, [r9]
 802575c:	f003 0306 	and.w	r3, r3, #6
 8025760:	2b04      	cmp	r3, #4
 8025762:	bf08      	it	eq
 8025764:	1aad      	subeq	r5, r5, r2
 8025766:	68a3      	ldr	r3, [r4, #8]
 8025768:	6922      	ldr	r2, [r4, #16]
 802576a:	bf0c      	ite	eq
 802576c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025770:	2500      	movne	r5, #0
 8025772:	4293      	cmp	r3, r2
 8025774:	bfc4      	itt	gt
 8025776:	1a9b      	subgt	r3, r3, r2
 8025778:	18ed      	addgt	r5, r5, r3
 802577a:	f04f 0900 	mov.w	r9, #0
 802577e:	341a      	adds	r4, #26
 8025780:	454d      	cmp	r5, r9
 8025782:	d11a      	bne.n	80257ba <_printf_common+0xd6>
 8025784:	2000      	movs	r0, #0
 8025786:	e008      	b.n	802579a <_printf_common+0xb6>
 8025788:	2301      	movs	r3, #1
 802578a:	4652      	mov	r2, sl
 802578c:	4639      	mov	r1, r7
 802578e:	4630      	mov	r0, r6
 8025790:	47c0      	blx	r8
 8025792:	3001      	adds	r0, #1
 8025794:	d103      	bne.n	802579e <_printf_common+0xba>
 8025796:	f04f 30ff 	mov.w	r0, #4294967295
 802579a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802579e:	3501      	adds	r5, #1
 80257a0:	e7c3      	b.n	802572a <_printf_common+0x46>
 80257a2:	18e1      	adds	r1, r4, r3
 80257a4:	1c5a      	adds	r2, r3, #1
 80257a6:	2030      	movs	r0, #48	; 0x30
 80257a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80257ac:	4422      	add	r2, r4
 80257ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80257b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80257b6:	3302      	adds	r3, #2
 80257b8:	e7c5      	b.n	8025746 <_printf_common+0x62>
 80257ba:	2301      	movs	r3, #1
 80257bc:	4622      	mov	r2, r4
 80257be:	4639      	mov	r1, r7
 80257c0:	4630      	mov	r0, r6
 80257c2:	47c0      	blx	r8
 80257c4:	3001      	adds	r0, #1
 80257c6:	d0e6      	beq.n	8025796 <_printf_common+0xb2>
 80257c8:	f109 0901 	add.w	r9, r9, #1
 80257cc:	e7d8      	b.n	8025780 <_printf_common+0x9c>
	...

080257d0 <_printf_i>:
 80257d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80257d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80257d8:	460c      	mov	r4, r1
 80257da:	7e09      	ldrb	r1, [r1, #24]
 80257dc:	b085      	sub	sp, #20
 80257de:	296e      	cmp	r1, #110	; 0x6e
 80257e0:	4617      	mov	r7, r2
 80257e2:	4606      	mov	r6, r0
 80257e4:	4698      	mov	r8, r3
 80257e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80257e8:	f000 80b3 	beq.w	8025952 <_printf_i+0x182>
 80257ec:	d822      	bhi.n	8025834 <_printf_i+0x64>
 80257ee:	2963      	cmp	r1, #99	; 0x63
 80257f0:	d036      	beq.n	8025860 <_printf_i+0x90>
 80257f2:	d80a      	bhi.n	802580a <_printf_i+0x3a>
 80257f4:	2900      	cmp	r1, #0
 80257f6:	f000 80b9 	beq.w	802596c <_printf_i+0x19c>
 80257fa:	2958      	cmp	r1, #88	; 0x58
 80257fc:	f000 8083 	beq.w	8025906 <_printf_i+0x136>
 8025800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025804:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025808:	e032      	b.n	8025870 <_printf_i+0xa0>
 802580a:	2964      	cmp	r1, #100	; 0x64
 802580c:	d001      	beq.n	8025812 <_printf_i+0x42>
 802580e:	2969      	cmp	r1, #105	; 0x69
 8025810:	d1f6      	bne.n	8025800 <_printf_i+0x30>
 8025812:	6820      	ldr	r0, [r4, #0]
 8025814:	6813      	ldr	r3, [r2, #0]
 8025816:	0605      	lsls	r5, r0, #24
 8025818:	f103 0104 	add.w	r1, r3, #4
 802581c:	d52a      	bpl.n	8025874 <_printf_i+0xa4>
 802581e:	681b      	ldr	r3, [r3, #0]
 8025820:	6011      	str	r1, [r2, #0]
 8025822:	2b00      	cmp	r3, #0
 8025824:	da03      	bge.n	802582e <_printf_i+0x5e>
 8025826:	222d      	movs	r2, #45	; 0x2d
 8025828:	425b      	negs	r3, r3
 802582a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802582e:	486f      	ldr	r0, [pc, #444]	; (80259ec <_printf_i+0x21c>)
 8025830:	220a      	movs	r2, #10
 8025832:	e039      	b.n	80258a8 <_printf_i+0xd8>
 8025834:	2973      	cmp	r1, #115	; 0x73
 8025836:	f000 809d 	beq.w	8025974 <_printf_i+0x1a4>
 802583a:	d808      	bhi.n	802584e <_printf_i+0x7e>
 802583c:	296f      	cmp	r1, #111	; 0x6f
 802583e:	d020      	beq.n	8025882 <_printf_i+0xb2>
 8025840:	2970      	cmp	r1, #112	; 0x70
 8025842:	d1dd      	bne.n	8025800 <_printf_i+0x30>
 8025844:	6823      	ldr	r3, [r4, #0]
 8025846:	f043 0320 	orr.w	r3, r3, #32
 802584a:	6023      	str	r3, [r4, #0]
 802584c:	e003      	b.n	8025856 <_printf_i+0x86>
 802584e:	2975      	cmp	r1, #117	; 0x75
 8025850:	d017      	beq.n	8025882 <_printf_i+0xb2>
 8025852:	2978      	cmp	r1, #120	; 0x78
 8025854:	d1d4      	bne.n	8025800 <_printf_i+0x30>
 8025856:	2378      	movs	r3, #120	; 0x78
 8025858:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802585c:	4864      	ldr	r0, [pc, #400]	; (80259f0 <_printf_i+0x220>)
 802585e:	e055      	b.n	802590c <_printf_i+0x13c>
 8025860:	6813      	ldr	r3, [r2, #0]
 8025862:	1d19      	adds	r1, r3, #4
 8025864:	681b      	ldr	r3, [r3, #0]
 8025866:	6011      	str	r1, [r2, #0]
 8025868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802586c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025870:	2301      	movs	r3, #1
 8025872:	e08c      	b.n	802598e <_printf_i+0x1be>
 8025874:	681b      	ldr	r3, [r3, #0]
 8025876:	6011      	str	r1, [r2, #0]
 8025878:	f010 0f40 	tst.w	r0, #64	; 0x40
 802587c:	bf18      	it	ne
 802587e:	b21b      	sxthne	r3, r3
 8025880:	e7cf      	b.n	8025822 <_printf_i+0x52>
 8025882:	6813      	ldr	r3, [r2, #0]
 8025884:	6825      	ldr	r5, [r4, #0]
 8025886:	1d18      	adds	r0, r3, #4
 8025888:	6010      	str	r0, [r2, #0]
 802588a:	0628      	lsls	r0, r5, #24
 802588c:	d501      	bpl.n	8025892 <_printf_i+0xc2>
 802588e:	681b      	ldr	r3, [r3, #0]
 8025890:	e002      	b.n	8025898 <_printf_i+0xc8>
 8025892:	0668      	lsls	r0, r5, #25
 8025894:	d5fb      	bpl.n	802588e <_printf_i+0xbe>
 8025896:	881b      	ldrh	r3, [r3, #0]
 8025898:	4854      	ldr	r0, [pc, #336]	; (80259ec <_printf_i+0x21c>)
 802589a:	296f      	cmp	r1, #111	; 0x6f
 802589c:	bf14      	ite	ne
 802589e:	220a      	movne	r2, #10
 80258a0:	2208      	moveq	r2, #8
 80258a2:	2100      	movs	r1, #0
 80258a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80258a8:	6865      	ldr	r5, [r4, #4]
 80258aa:	60a5      	str	r5, [r4, #8]
 80258ac:	2d00      	cmp	r5, #0
 80258ae:	f2c0 8095 	blt.w	80259dc <_printf_i+0x20c>
 80258b2:	6821      	ldr	r1, [r4, #0]
 80258b4:	f021 0104 	bic.w	r1, r1, #4
 80258b8:	6021      	str	r1, [r4, #0]
 80258ba:	2b00      	cmp	r3, #0
 80258bc:	d13d      	bne.n	802593a <_printf_i+0x16a>
 80258be:	2d00      	cmp	r5, #0
 80258c0:	f040 808e 	bne.w	80259e0 <_printf_i+0x210>
 80258c4:	4665      	mov	r5, ip
 80258c6:	2a08      	cmp	r2, #8
 80258c8:	d10b      	bne.n	80258e2 <_printf_i+0x112>
 80258ca:	6823      	ldr	r3, [r4, #0]
 80258cc:	07db      	lsls	r3, r3, #31
 80258ce:	d508      	bpl.n	80258e2 <_printf_i+0x112>
 80258d0:	6923      	ldr	r3, [r4, #16]
 80258d2:	6862      	ldr	r2, [r4, #4]
 80258d4:	429a      	cmp	r2, r3
 80258d6:	bfde      	ittt	le
 80258d8:	2330      	movle	r3, #48	; 0x30
 80258da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80258de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80258e2:	ebac 0305 	sub.w	r3, ip, r5
 80258e6:	6123      	str	r3, [r4, #16]
 80258e8:	f8cd 8000 	str.w	r8, [sp]
 80258ec:	463b      	mov	r3, r7
 80258ee:	aa03      	add	r2, sp, #12
 80258f0:	4621      	mov	r1, r4
 80258f2:	4630      	mov	r0, r6
 80258f4:	f7ff fef6 	bl	80256e4 <_printf_common>
 80258f8:	3001      	adds	r0, #1
 80258fa:	d14d      	bne.n	8025998 <_printf_i+0x1c8>
 80258fc:	f04f 30ff 	mov.w	r0, #4294967295
 8025900:	b005      	add	sp, #20
 8025902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025906:	4839      	ldr	r0, [pc, #228]	; (80259ec <_printf_i+0x21c>)
 8025908:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802590c:	6813      	ldr	r3, [r2, #0]
 802590e:	6821      	ldr	r1, [r4, #0]
 8025910:	1d1d      	adds	r5, r3, #4
 8025912:	681b      	ldr	r3, [r3, #0]
 8025914:	6015      	str	r5, [r2, #0]
 8025916:	060a      	lsls	r2, r1, #24
 8025918:	d50b      	bpl.n	8025932 <_printf_i+0x162>
 802591a:	07ca      	lsls	r2, r1, #31
 802591c:	bf44      	itt	mi
 802591e:	f041 0120 	orrmi.w	r1, r1, #32
 8025922:	6021      	strmi	r1, [r4, #0]
 8025924:	b91b      	cbnz	r3, 802592e <_printf_i+0x15e>
 8025926:	6822      	ldr	r2, [r4, #0]
 8025928:	f022 0220 	bic.w	r2, r2, #32
 802592c:	6022      	str	r2, [r4, #0]
 802592e:	2210      	movs	r2, #16
 8025930:	e7b7      	b.n	80258a2 <_printf_i+0xd2>
 8025932:	064d      	lsls	r5, r1, #25
 8025934:	bf48      	it	mi
 8025936:	b29b      	uxthmi	r3, r3
 8025938:	e7ef      	b.n	802591a <_printf_i+0x14a>
 802593a:	4665      	mov	r5, ip
 802593c:	fbb3 f1f2 	udiv	r1, r3, r2
 8025940:	fb02 3311 	mls	r3, r2, r1, r3
 8025944:	5cc3      	ldrb	r3, [r0, r3]
 8025946:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802594a:	460b      	mov	r3, r1
 802594c:	2900      	cmp	r1, #0
 802594e:	d1f5      	bne.n	802593c <_printf_i+0x16c>
 8025950:	e7b9      	b.n	80258c6 <_printf_i+0xf6>
 8025952:	6813      	ldr	r3, [r2, #0]
 8025954:	6825      	ldr	r5, [r4, #0]
 8025956:	6961      	ldr	r1, [r4, #20]
 8025958:	1d18      	adds	r0, r3, #4
 802595a:	6010      	str	r0, [r2, #0]
 802595c:	0628      	lsls	r0, r5, #24
 802595e:	681b      	ldr	r3, [r3, #0]
 8025960:	d501      	bpl.n	8025966 <_printf_i+0x196>
 8025962:	6019      	str	r1, [r3, #0]
 8025964:	e002      	b.n	802596c <_printf_i+0x19c>
 8025966:	066a      	lsls	r2, r5, #25
 8025968:	d5fb      	bpl.n	8025962 <_printf_i+0x192>
 802596a:	8019      	strh	r1, [r3, #0]
 802596c:	2300      	movs	r3, #0
 802596e:	6123      	str	r3, [r4, #16]
 8025970:	4665      	mov	r5, ip
 8025972:	e7b9      	b.n	80258e8 <_printf_i+0x118>
 8025974:	6813      	ldr	r3, [r2, #0]
 8025976:	1d19      	adds	r1, r3, #4
 8025978:	6011      	str	r1, [r2, #0]
 802597a:	681d      	ldr	r5, [r3, #0]
 802597c:	6862      	ldr	r2, [r4, #4]
 802597e:	2100      	movs	r1, #0
 8025980:	4628      	mov	r0, r5
 8025982:	f7da fc45 	bl	8000210 <memchr>
 8025986:	b108      	cbz	r0, 802598c <_printf_i+0x1bc>
 8025988:	1b40      	subs	r0, r0, r5
 802598a:	6060      	str	r0, [r4, #4]
 802598c:	6863      	ldr	r3, [r4, #4]
 802598e:	6123      	str	r3, [r4, #16]
 8025990:	2300      	movs	r3, #0
 8025992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025996:	e7a7      	b.n	80258e8 <_printf_i+0x118>
 8025998:	6923      	ldr	r3, [r4, #16]
 802599a:	462a      	mov	r2, r5
 802599c:	4639      	mov	r1, r7
 802599e:	4630      	mov	r0, r6
 80259a0:	47c0      	blx	r8
 80259a2:	3001      	adds	r0, #1
 80259a4:	d0aa      	beq.n	80258fc <_printf_i+0x12c>
 80259a6:	6823      	ldr	r3, [r4, #0]
 80259a8:	079b      	lsls	r3, r3, #30
 80259aa:	d413      	bmi.n	80259d4 <_printf_i+0x204>
 80259ac:	68e0      	ldr	r0, [r4, #12]
 80259ae:	9b03      	ldr	r3, [sp, #12]
 80259b0:	4298      	cmp	r0, r3
 80259b2:	bfb8      	it	lt
 80259b4:	4618      	movlt	r0, r3
 80259b6:	e7a3      	b.n	8025900 <_printf_i+0x130>
 80259b8:	2301      	movs	r3, #1
 80259ba:	464a      	mov	r2, r9
 80259bc:	4639      	mov	r1, r7
 80259be:	4630      	mov	r0, r6
 80259c0:	47c0      	blx	r8
 80259c2:	3001      	adds	r0, #1
 80259c4:	d09a      	beq.n	80258fc <_printf_i+0x12c>
 80259c6:	3501      	adds	r5, #1
 80259c8:	68e3      	ldr	r3, [r4, #12]
 80259ca:	9a03      	ldr	r2, [sp, #12]
 80259cc:	1a9b      	subs	r3, r3, r2
 80259ce:	42ab      	cmp	r3, r5
 80259d0:	dcf2      	bgt.n	80259b8 <_printf_i+0x1e8>
 80259d2:	e7eb      	b.n	80259ac <_printf_i+0x1dc>
 80259d4:	2500      	movs	r5, #0
 80259d6:	f104 0919 	add.w	r9, r4, #25
 80259da:	e7f5      	b.n	80259c8 <_printf_i+0x1f8>
 80259dc:	2b00      	cmp	r3, #0
 80259de:	d1ac      	bne.n	802593a <_printf_i+0x16a>
 80259e0:	7803      	ldrb	r3, [r0, #0]
 80259e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80259e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80259ea:	e76c      	b.n	80258c6 <_printf_i+0xf6>
 80259ec:	08029241 	.word	0x08029241
 80259f0:	08029252 	.word	0x08029252

080259f4 <_sbrk_r>:
 80259f4:	b538      	push	{r3, r4, r5, lr}
 80259f6:	4c06      	ldr	r4, [pc, #24]	; (8025a10 <_sbrk_r+0x1c>)
 80259f8:	2300      	movs	r3, #0
 80259fa:	4605      	mov	r5, r0
 80259fc:	4608      	mov	r0, r1
 80259fe:	6023      	str	r3, [r4, #0]
 8025a00:	f7f7 f96e 	bl	801cce0 <_sbrk>
 8025a04:	1c43      	adds	r3, r0, #1
 8025a06:	d102      	bne.n	8025a0e <_sbrk_r+0x1a>
 8025a08:	6823      	ldr	r3, [r4, #0]
 8025a0a:	b103      	cbz	r3, 8025a0e <_sbrk_r+0x1a>
 8025a0c:	602b      	str	r3, [r5, #0]
 8025a0e:	bd38      	pop	{r3, r4, r5, pc}
 8025a10:	2000c948 	.word	0x2000c948

08025a14 <_raise_r>:
 8025a14:	291f      	cmp	r1, #31
 8025a16:	b538      	push	{r3, r4, r5, lr}
 8025a18:	4604      	mov	r4, r0
 8025a1a:	460d      	mov	r5, r1
 8025a1c:	d904      	bls.n	8025a28 <_raise_r+0x14>
 8025a1e:	2316      	movs	r3, #22
 8025a20:	6003      	str	r3, [r0, #0]
 8025a22:	f04f 30ff 	mov.w	r0, #4294967295
 8025a26:	bd38      	pop	{r3, r4, r5, pc}
 8025a28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025a2a:	b112      	cbz	r2, 8025a32 <_raise_r+0x1e>
 8025a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025a30:	b94b      	cbnz	r3, 8025a46 <_raise_r+0x32>
 8025a32:	4620      	mov	r0, r4
 8025a34:	f000 f830 	bl	8025a98 <_getpid_r>
 8025a38:	462a      	mov	r2, r5
 8025a3a:	4601      	mov	r1, r0
 8025a3c:	4620      	mov	r0, r4
 8025a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025a42:	f000 b817 	b.w	8025a74 <_kill_r>
 8025a46:	2b01      	cmp	r3, #1
 8025a48:	d00a      	beq.n	8025a60 <_raise_r+0x4c>
 8025a4a:	1c59      	adds	r1, r3, #1
 8025a4c:	d103      	bne.n	8025a56 <_raise_r+0x42>
 8025a4e:	2316      	movs	r3, #22
 8025a50:	6003      	str	r3, [r0, #0]
 8025a52:	2001      	movs	r0, #1
 8025a54:	e7e7      	b.n	8025a26 <_raise_r+0x12>
 8025a56:	2400      	movs	r4, #0
 8025a58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025a5c:	4628      	mov	r0, r5
 8025a5e:	4798      	blx	r3
 8025a60:	2000      	movs	r0, #0
 8025a62:	e7e0      	b.n	8025a26 <_raise_r+0x12>

08025a64 <raise>:
 8025a64:	4b02      	ldr	r3, [pc, #8]	; (8025a70 <raise+0xc>)
 8025a66:	4601      	mov	r1, r0
 8025a68:	6818      	ldr	r0, [r3, #0]
 8025a6a:	f7ff bfd3 	b.w	8025a14 <_raise_r>
 8025a6e:	bf00      	nop
 8025a70:	2000007c 	.word	0x2000007c

08025a74 <_kill_r>:
 8025a74:	b538      	push	{r3, r4, r5, lr}
 8025a76:	4c07      	ldr	r4, [pc, #28]	; (8025a94 <_kill_r+0x20>)
 8025a78:	2300      	movs	r3, #0
 8025a7a:	4605      	mov	r5, r0
 8025a7c:	4608      	mov	r0, r1
 8025a7e:	4611      	mov	r1, r2
 8025a80:	6023      	str	r3, [r4, #0]
 8025a82:	f7f7 f8a5 	bl	801cbd0 <_kill>
 8025a86:	1c43      	adds	r3, r0, #1
 8025a88:	d102      	bne.n	8025a90 <_kill_r+0x1c>
 8025a8a:	6823      	ldr	r3, [r4, #0]
 8025a8c:	b103      	cbz	r3, 8025a90 <_kill_r+0x1c>
 8025a8e:	602b      	str	r3, [r5, #0]
 8025a90:	bd38      	pop	{r3, r4, r5, pc}
 8025a92:	bf00      	nop
 8025a94:	2000c948 	.word	0x2000c948

08025a98 <_getpid_r>:
 8025a98:	f7f7 b892 	b.w	801cbc0 <_getpid>

08025a9c <strcpy>:
 8025a9c:	4603      	mov	r3, r0
 8025a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025aa2:	f803 2b01 	strb.w	r2, [r3], #1
 8025aa6:	2a00      	cmp	r2, #0
 8025aa8:	d1f9      	bne.n	8025a9e <strcpy+0x2>
 8025aaa:	4770      	bx	lr

08025aac <__swbuf_r>:
 8025aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025aae:	460e      	mov	r6, r1
 8025ab0:	4614      	mov	r4, r2
 8025ab2:	4605      	mov	r5, r0
 8025ab4:	b118      	cbz	r0, 8025abe <__swbuf_r+0x12>
 8025ab6:	6983      	ldr	r3, [r0, #24]
 8025ab8:	b90b      	cbnz	r3, 8025abe <__swbuf_r+0x12>
 8025aba:	f000 fa0b 	bl	8025ed4 <__sinit>
 8025abe:	4b21      	ldr	r3, [pc, #132]	; (8025b44 <__swbuf_r+0x98>)
 8025ac0:	429c      	cmp	r4, r3
 8025ac2:	d12a      	bne.n	8025b1a <__swbuf_r+0x6e>
 8025ac4:	686c      	ldr	r4, [r5, #4]
 8025ac6:	69a3      	ldr	r3, [r4, #24]
 8025ac8:	60a3      	str	r3, [r4, #8]
 8025aca:	89a3      	ldrh	r3, [r4, #12]
 8025acc:	071a      	lsls	r2, r3, #28
 8025ace:	d52e      	bpl.n	8025b2e <__swbuf_r+0x82>
 8025ad0:	6923      	ldr	r3, [r4, #16]
 8025ad2:	b363      	cbz	r3, 8025b2e <__swbuf_r+0x82>
 8025ad4:	6923      	ldr	r3, [r4, #16]
 8025ad6:	6820      	ldr	r0, [r4, #0]
 8025ad8:	1ac0      	subs	r0, r0, r3
 8025ada:	6963      	ldr	r3, [r4, #20]
 8025adc:	b2f6      	uxtb	r6, r6
 8025ade:	4283      	cmp	r3, r0
 8025ae0:	4637      	mov	r7, r6
 8025ae2:	dc04      	bgt.n	8025aee <__swbuf_r+0x42>
 8025ae4:	4621      	mov	r1, r4
 8025ae6:	4628      	mov	r0, r5
 8025ae8:	f000 f98a 	bl	8025e00 <_fflush_r>
 8025aec:	bb28      	cbnz	r0, 8025b3a <__swbuf_r+0x8e>
 8025aee:	68a3      	ldr	r3, [r4, #8]
 8025af0:	3b01      	subs	r3, #1
 8025af2:	60a3      	str	r3, [r4, #8]
 8025af4:	6823      	ldr	r3, [r4, #0]
 8025af6:	1c5a      	adds	r2, r3, #1
 8025af8:	6022      	str	r2, [r4, #0]
 8025afa:	701e      	strb	r6, [r3, #0]
 8025afc:	6963      	ldr	r3, [r4, #20]
 8025afe:	3001      	adds	r0, #1
 8025b00:	4283      	cmp	r3, r0
 8025b02:	d004      	beq.n	8025b0e <__swbuf_r+0x62>
 8025b04:	89a3      	ldrh	r3, [r4, #12]
 8025b06:	07db      	lsls	r3, r3, #31
 8025b08:	d519      	bpl.n	8025b3e <__swbuf_r+0x92>
 8025b0a:	2e0a      	cmp	r6, #10
 8025b0c:	d117      	bne.n	8025b3e <__swbuf_r+0x92>
 8025b0e:	4621      	mov	r1, r4
 8025b10:	4628      	mov	r0, r5
 8025b12:	f000 f975 	bl	8025e00 <_fflush_r>
 8025b16:	b190      	cbz	r0, 8025b3e <__swbuf_r+0x92>
 8025b18:	e00f      	b.n	8025b3a <__swbuf_r+0x8e>
 8025b1a:	4b0b      	ldr	r3, [pc, #44]	; (8025b48 <__swbuf_r+0x9c>)
 8025b1c:	429c      	cmp	r4, r3
 8025b1e:	d101      	bne.n	8025b24 <__swbuf_r+0x78>
 8025b20:	68ac      	ldr	r4, [r5, #8]
 8025b22:	e7d0      	b.n	8025ac6 <__swbuf_r+0x1a>
 8025b24:	4b09      	ldr	r3, [pc, #36]	; (8025b4c <__swbuf_r+0xa0>)
 8025b26:	429c      	cmp	r4, r3
 8025b28:	bf08      	it	eq
 8025b2a:	68ec      	ldreq	r4, [r5, #12]
 8025b2c:	e7cb      	b.n	8025ac6 <__swbuf_r+0x1a>
 8025b2e:	4621      	mov	r1, r4
 8025b30:	4628      	mov	r0, r5
 8025b32:	f000 f80d 	bl	8025b50 <__swsetup_r>
 8025b36:	2800      	cmp	r0, #0
 8025b38:	d0cc      	beq.n	8025ad4 <__swbuf_r+0x28>
 8025b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8025b3e:	4638      	mov	r0, r7
 8025b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b42:	bf00      	nop
 8025b44:	08029284 	.word	0x08029284
 8025b48:	080292a4 	.word	0x080292a4
 8025b4c:	08029264 	.word	0x08029264

08025b50 <__swsetup_r>:
 8025b50:	4b32      	ldr	r3, [pc, #200]	; (8025c1c <__swsetup_r+0xcc>)
 8025b52:	b570      	push	{r4, r5, r6, lr}
 8025b54:	681d      	ldr	r5, [r3, #0]
 8025b56:	4606      	mov	r6, r0
 8025b58:	460c      	mov	r4, r1
 8025b5a:	b125      	cbz	r5, 8025b66 <__swsetup_r+0x16>
 8025b5c:	69ab      	ldr	r3, [r5, #24]
 8025b5e:	b913      	cbnz	r3, 8025b66 <__swsetup_r+0x16>
 8025b60:	4628      	mov	r0, r5
 8025b62:	f000 f9b7 	bl	8025ed4 <__sinit>
 8025b66:	4b2e      	ldr	r3, [pc, #184]	; (8025c20 <__swsetup_r+0xd0>)
 8025b68:	429c      	cmp	r4, r3
 8025b6a:	d10f      	bne.n	8025b8c <__swsetup_r+0x3c>
 8025b6c:	686c      	ldr	r4, [r5, #4]
 8025b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b72:	b29a      	uxth	r2, r3
 8025b74:	0715      	lsls	r5, r2, #28
 8025b76:	d42c      	bmi.n	8025bd2 <__swsetup_r+0x82>
 8025b78:	06d0      	lsls	r0, r2, #27
 8025b7a:	d411      	bmi.n	8025ba0 <__swsetup_r+0x50>
 8025b7c:	2209      	movs	r2, #9
 8025b7e:	6032      	str	r2, [r6, #0]
 8025b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b84:	81a3      	strh	r3, [r4, #12]
 8025b86:	f04f 30ff 	mov.w	r0, #4294967295
 8025b8a:	e03e      	b.n	8025c0a <__swsetup_r+0xba>
 8025b8c:	4b25      	ldr	r3, [pc, #148]	; (8025c24 <__swsetup_r+0xd4>)
 8025b8e:	429c      	cmp	r4, r3
 8025b90:	d101      	bne.n	8025b96 <__swsetup_r+0x46>
 8025b92:	68ac      	ldr	r4, [r5, #8]
 8025b94:	e7eb      	b.n	8025b6e <__swsetup_r+0x1e>
 8025b96:	4b24      	ldr	r3, [pc, #144]	; (8025c28 <__swsetup_r+0xd8>)
 8025b98:	429c      	cmp	r4, r3
 8025b9a:	bf08      	it	eq
 8025b9c:	68ec      	ldreq	r4, [r5, #12]
 8025b9e:	e7e6      	b.n	8025b6e <__swsetup_r+0x1e>
 8025ba0:	0751      	lsls	r1, r2, #29
 8025ba2:	d512      	bpl.n	8025bca <__swsetup_r+0x7a>
 8025ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025ba6:	b141      	cbz	r1, 8025bba <__swsetup_r+0x6a>
 8025ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025bac:	4299      	cmp	r1, r3
 8025bae:	d002      	beq.n	8025bb6 <__swsetup_r+0x66>
 8025bb0:	4630      	mov	r0, r6
 8025bb2:	f7ff fbaf 	bl	8025314 <_free_r>
 8025bb6:	2300      	movs	r3, #0
 8025bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8025bba:	89a3      	ldrh	r3, [r4, #12]
 8025bbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025bc0:	81a3      	strh	r3, [r4, #12]
 8025bc2:	2300      	movs	r3, #0
 8025bc4:	6063      	str	r3, [r4, #4]
 8025bc6:	6923      	ldr	r3, [r4, #16]
 8025bc8:	6023      	str	r3, [r4, #0]
 8025bca:	89a3      	ldrh	r3, [r4, #12]
 8025bcc:	f043 0308 	orr.w	r3, r3, #8
 8025bd0:	81a3      	strh	r3, [r4, #12]
 8025bd2:	6923      	ldr	r3, [r4, #16]
 8025bd4:	b94b      	cbnz	r3, 8025bea <__swsetup_r+0x9a>
 8025bd6:	89a3      	ldrh	r3, [r4, #12]
 8025bd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025be0:	d003      	beq.n	8025bea <__swsetup_r+0x9a>
 8025be2:	4621      	mov	r1, r4
 8025be4:	4630      	mov	r0, r6
 8025be6:	f000 fa23 	bl	8026030 <__smakebuf_r>
 8025bea:	89a2      	ldrh	r2, [r4, #12]
 8025bec:	f012 0301 	ands.w	r3, r2, #1
 8025bf0:	d00c      	beq.n	8025c0c <__swsetup_r+0xbc>
 8025bf2:	2300      	movs	r3, #0
 8025bf4:	60a3      	str	r3, [r4, #8]
 8025bf6:	6963      	ldr	r3, [r4, #20]
 8025bf8:	425b      	negs	r3, r3
 8025bfa:	61a3      	str	r3, [r4, #24]
 8025bfc:	6923      	ldr	r3, [r4, #16]
 8025bfe:	b953      	cbnz	r3, 8025c16 <__swsetup_r+0xc6>
 8025c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025c04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8025c08:	d1ba      	bne.n	8025b80 <__swsetup_r+0x30>
 8025c0a:	bd70      	pop	{r4, r5, r6, pc}
 8025c0c:	0792      	lsls	r2, r2, #30
 8025c0e:	bf58      	it	pl
 8025c10:	6963      	ldrpl	r3, [r4, #20]
 8025c12:	60a3      	str	r3, [r4, #8]
 8025c14:	e7f2      	b.n	8025bfc <__swsetup_r+0xac>
 8025c16:	2000      	movs	r0, #0
 8025c18:	e7f7      	b.n	8025c0a <__swsetup_r+0xba>
 8025c1a:	bf00      	nop
 8025c1c:	2000007c 	.word	0x2000007c
 8025c20:	08029284 	.word	0x08029284
 8025c24:	080292a4 	.word	0x080292a4
 8025c28:	08029264 	.word	0x08029264

08025c2c <__register_exitproc>:
 8025c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025c30:	4d2c      	ldr	r5, [pc, #176]	; (8025ce4 <__register_exitproc+0xb8>)
 8025c32:	682c      	ldr	r4, [r5, #0]
 8025c34:	4607      	mov	r7, r0
 8025c36:	460e      	mov	r6, r1
 8025c38:	4691      	mov	r9, r2
 8025c3a:	4698      	mov	r8, r3
 8025c3c:	b934      	cbnz	r4, 8025c4c <__register_exitproc+0x20>
 8025c3e:	4b2a      	ldr	r3, [pc, #168]	; (8025ce8 <__register_exitproc+0xbc>)
 8025c40:	4c2a      	ldr	r4, [pc, #168]	; (8025cec <__register_exitproc+0xc0>)
 8025c42:	602c      	str	r4, [r5, #0]
 8025c44:	b113      	cbz	r3, 8025c4c <__register_exitproc+0x20>
 8025c46:	681b      	ldr	r3, [r3, #0]
 8025c48:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025c4c:	6863      	ldr	r3, [r4, #4]
 8025c4e:	2b1f      	cmp	r3, #31
 8025c50:	dd3d      	ble.n	8025cce <__register_exitproc+0xa2>
 8025c52:	4b27      	ldr	r3, [pc, #156]	; (8025cf0 <__register_exitproc+0xc4>)
 8025c54:	b91b      	cbnz	r3, 8025c5e <__register_exitproc+0x32>
 8025c56:	f04f 30ff 	mov.w	r0, #4294967295
 8025c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c5e:	208c      	movs	r0, #140	; 0x8c
 8025c60:	f7ff fb34 	bl	80252cc <malloc>
 8025c64:	4604      	mov	r4, r0
 8025c66:	2800      	cmp	r0, #0
 8025c68:	d0f5      	beq.n	8025c56 <__register_exitproc+0x2a>
 8025c6a:	2300      	movs	r3, #0
 8025c6c:	682a      	ldr	r2, [r5, #0]
 8025c6e:	6002      	str	r2, [r0, #0]
 8025c70:	6043      	str	r3, [r0, #4]
 8025c72:	6028      	str	r0, [r5, #0]
 8025c74:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025c78:	b30f      	cbz	r7, 8025cbe <__register_exitproc+0x92>
 8025c7a:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025c7e:	f7ff fb25 	bl	80252cc <malloc>
 8025c82:	2800      	cmp	r0, #0
 8025c84:	d0e7      	beq.n	8025c56 <__register_exitproc+0x2a>
 8025c86:	2300      	movs	r3, #0
 8025c88:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025c8c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8025c90:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025c94:	6862      	ldr	r2, [r4, #4]
 8025c96:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8025c9a:	2301      	movs	r3, #1
 8025c9c:	4093      	lsls	r3, r2
 8025c9e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8025ca2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8025ca6:	431a      	orrs	r2, r3
 8025ca8:	2f02      	cmp	r7, #2
 8025caa:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8025cae:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8025cb2:	bf02      	ittt	eq
 8025cb4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8025cb8:	4313      	orreq	r3, r2
 8025cba:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025cbe:	6863      	ldr	r3, [r4, #4]
 8025cc0:	1c5a      	adds	r2, r3, #1
 8025cc2:	3302      	adds	r3, #2
 8025cc4:	6062      	str	r2, [r4, #4]
 8025cc6:	2000      	movs	r0, #0
 8025cc8:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8025ccc:	e7c5      	b.n	8025c5a <__register_exitproc+0x2e>
 8025cce:	2f00      	cmp	r7, #0
 8025cd0:	d0f5      	beq.n	8025cbe <__register_exitproc+0x92>
 8025cd2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025cd6:	2800      	cmp	r0, #0
 8025cd8:	d1dc      	bne.n	8025c94 <__register_exitproc+0x68>
 8025cda:	4b05      	ldr	r3, [pc, #20]	; (8025cf0 <__register_exitproc+0xc4>)
 8025cdc:	2b00      	cmp	r3, #0
 8025cde:	d0ba      	beq.n	8025c56 <__register_exitproc+0x2a>
 8025ce0:	e7cb      	b.n	8025c7a <__register_exitproc+0x4e>
 8025ce2:	bf00      	nop
 8025ce4:	2000bc64 	.word	0x2000bc64
 8025ce8:	00000000 	.word	0x00000000
 8025cec:	2000bbd8 	.word	0x2000bbd8
 8025cf0:	080252cd 	.word	0x080252cd

08025cf4 <__sflush_r>:
 8025cf4:	898a      	ldrh	r2, [r1, #12]
 8025cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025cfa:	4605      	mov	r5, r0
 8025cfc:	0710      	lsls	r0, r2, #28
 8025cfe:	460c      	mov	r4, r1
 8025d00:	d458      	bmi.n	8025db4 <__sflush_r+0xc0>
 8025d02:	684b      	ldr	r3, [r1, #4]
 8025d04:	2b00      	cmp	r3, #0
 8025d06:	dc05      	bgt.n	8025d14 <__sflush_r+0x20>
 8025d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	dc02      	bgt.n	8025d14 <__sflush_r+0x20>
 8025d0e:	2000      	movs	r0, #0
 8025d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025d16:	2e00      	cmp	r6, #0
 8025d18:	d0f9      	beq.n	8025d0e <__sflush_r+0x1a>
 8025d1a:	2300      	movs	r3, #0
 8025d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025d20:	682f      	ldr	r7, [r5, #0]
 8025d22:	6a21      	ldr	r1, [r4, #32]
 8025d24:	602b      	str	r3, [r5, #0]
 8025d26:	d032      	beq.n	8025d8e <__sflush_r+0x9a>
 8025d28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025d2a:	89a3      	ldrh	r3, [r4, #12]
 8025d2c:	075a      	lsls	r2, r3, #29
 8025d2e:	d505      	bpl.n	8025d3c <__sflush_r+0x48>
 8025d30:	6863      	ldr	r3, [r4, #4]
 8025d32:	1ac0      	subs	r0, r0, r3
 8025d34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025d36:	b10b      	cbz	r3, 8025d3c <__sflush_r+0x48>
 8025d38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025d3a:	1ac0      	subs	r0, r0, r3
 8025d3c:	2300      	movs	r3, #0
 8025d3e:	4602      	mov	r2, r0
 8025d40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025d42:	6a21      	ldr	r1, [r4, #32]
 8025d44:	4628      	mov	r0, r5
 8025d46:	47b0      	blx	r6
 8025d48:	1c43      	adds	r3, r0, #1
 8025d4a:	89a3      	ldrh	r3, [r4, #12]
 8025d4c:	d106      	bne.n	8025d5c <__sflush_r+0x68>
 8025d4e:	6829      	ldr	r1, [r5, #0]
 8025d50:	291d      	cmp	r1, #29
 8025d52:	d848      	bhi.n	8025de6 <__sflush_r+0xf2>
 8025d54:	4a29      	ldr	r2, [pc, #164]	; (8025dfc <__sflush_r+0x108>)
 8025d56:	40ca      	lsrs	r2, r1
 8025d58:	07d6      	lsls	r6, r2, #31
 8025d5a:	d544      	bpl.n	8025de6 <__sflush_r+0xf2>
 8025d5c:	2200      	movs	r2, #0
 8025d5e:	6062      	str	r2, [r4, #4]
 8025d60:	04d9      	lsls	r1, r3, #19
 8025d62:	6922      	ldr	r2, [r4, #16]
 8025d64:	6022      	str	r2, [r4, #0]
 8025d66:	d504      	bpl.n	8025d72 <__sflush_r+0x7e>
 8025d68:	1c42      	adds	r2, r0, #1
 8025d6a:	d101      	bne.n	8025d70 <__sflush_r+0x7c>
 8025d6c:	682b      	ldr	r3, [r5, #0]
 8025d6e:	b903      	cbnz	r3, 8025d72 <__sflush_r+0x7e>
 8025d70:	6560      	str	r0, [r4, #84]	; 0x54
 8025d72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025d74:	602f      	str	r7, [r5, #0]
 8025d76:	2900      	cmp	r1, #0
 8025d78:	d0c9      	beq.n	8025d0e <__sflush_r+0x1a>
 8025d7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025d7e:	4299      	cmp	r1, r3
 8025d80:	d002      	beq.n	8025d88 <__sflush_r+0x94>
 8025d82:	4628      	mov	r0, r5
 8025d84:	f7ff fac6 	bl	8025314 <_free_r>
 8025d88:	2000      	movs	r0, #0
 8025d8a:	6360      	str	r0, [r4, #52]	; 0x34
 8025d8c:	e7c0      	b.n	8025d10 <__sflush_r+0x1c>
 8025d8e:	2301      	movs	r3, #1
 8025d90:	4628      	mov	r0, r5
 8025d92:	47b0      	blx	r6
 8025d94:	1c41      	adds	r1, r0, #1
 8025d96:	d1c8      	bne.n	8025d2a <__sflush_r+0x36>
 8025d98:	682b      	ldr	r3, [r5, #0]
 8025d9a:	2b00      	cmp	r3, #0
 8025d9c:	d0c5      	beq.n	8025d2a <__sflush_r+0x36>
 8025d9e:	2b1d      	cmp	r3, #29
 8025da0:	d001      	beq.n	8025da6 <__sflush_r+0xb2>
 8025da2:	2b16      	cmp	r3, #22
 8025da4:	d101      	bne.n	8025daa <__sflush_r+0xb6>
 8025da6:	602f      	str	r7, [r5, #0]
 8025da8:	e7b1      	b.n	8025d0e <__sflush_r+0x1a>
 8025daa:	89a3      	ldrh	r3, [r4, #12]
 8025dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025db0:	81a3      	strh	r3, [r4, #12]
 8025db2:	e7ad      	b.n	8025d10 <__sflush_r+0x1c>
 8025db4:	690f      	ldr	r7, [r1, #16]
 8025db6:	2f00      	cmp	r7, #0
 8025db8:	d0a9      	beq.n	8025d0e <__sflush_r+0x1a>
 8025dba:	0793      	lsls	r3, r2, #30
 8025dbc:	680e      	ldr	r6, [r1, #0]
 8025dbe:	bf08      	it	eq
 8025dc0:	694b      	ldreq	r3, [r1, #20]
 8025dc2:	600f      	str	r7, [r1, #0]
 8025dc4:	bf18      	it	ne
 8025dc6:	2300      	movne	r3, #0
 8025dc8:	eba6 0807 	sub.w	r8, r6, r7
 8025dcc:	608b      	str	r3, [r1, #8]
 8025dce:	f1b8 0f00 	cmp.w	r8, #0
 8025dd2:	dd9c      	ble.n	8025d0e <__sflush_r+0x1a>
 8025dd4:	4643      	mov	r3, r8
 8025dd6:	463a      	mov	r2, r7
 8025dd8:	6a21      	ldr	r1, [r4, #32]
 8025dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025ddc:	4628      	mov	r0, r5
 8025dde:	47b0      	blx	r6
 8025de0:	2800      	cmp	r0, #0
 8025de2:	dc06      	bgt.n	8025df2 <__sflush_r+0xfe>
 8025de4:	89a3      	ldrh	r3, [r4, #12]
 8025de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025dea:	81a3      	strh	r3, [r4, #12]
 8025dec:	f04f 30ff 	mov.w	r0, #4294967295
 8025df0:	e78e      	b.n	8025d10 <__sflush_r+0x1c>
 8025df2:	4407      	add	r7, r0
 8025df4:	eba8 0800 	sub.w	r8, r8, r0
 8025df8:	e7e9      	b.n	8025dce <__sflush_r+0xda>
 8025dfa:	bf00      	nop
 8025dfc:	20400001 	.word	0x20400001

08025e00 <_fflush_r>:
 8025e00:	b538      	push	{r3, r4, r5, lr}
 8025e02:	690b      	ldr	r3, [r1, #16]
 8025e04:	4605      	mov	r5, r0
 8025e06:	460c      	mov	r4, r1
 8025e08:	b1db      	cbz	r3, 8025e42 <_fflush_r+0x42>
 8025e0a:	b118      	cbz	r0, 8025e14 <_fflush_r+0x14>
 8025e0c:	6983      	ldr	r3, [r0, #24]
 8025e0e:	b90b      	cbnz	r3, 8025e14 <_fflush_r+0x14>
 8025e10:	f000 f860 	bl	8025ed4 <__sinit>
 8025e14:	4b0c      	ldr	r3, [pc, #48]	; (8025e48 <_fflush_r+0x48>)
 8025e16:	429c      	cmp	r4, r3
 8025e18:	d109      	bne.n	8025e2e <_fflush_r+0x2e>
 8025e1a:	686c      	ldr	r4, [r5, #4]
 8025e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025e20:	b17b      	cbz	r3, 8025e42 <_fflush_r+0x42>
 8025e22:	4621      	mov	r1, r4
 8025e24:	4628      	mov	r0, r5
 8025e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025e2a:	f7ff bf63 	b.w	8025cf4 <__sflush_r>
 8025e2e:	4b07      	ldr	r3, [pc, #28]	; (8025e4c <_fflush_r+0x4c>)
 8025e30:	429c      	cmp	r4, r3
 8025e32:	d101      	bne.n	8025e38 <_fflush_r+0x38>
 8025e34:	68ac      	ldr	r4, [r5, #8]
 8025e36:	e7f1      	b.n	8025e1c <_fflush_r+0x1c>
 8025e38:	4b05      	ldr	r3, [pc, #20]	; (8025e50 <_fflush_r+0x50>)
 8025e3a:	429c      	cmp	r4, r3
 8025e3c:	bf08      	it	eq
 8025e3e:	68ec      	ldreq	r4, [r5, #12]
 8025e40:	e7ec      	b.n	8025e1c <_fflush_r+0x1c>
 8025e42:	2000      	movs	r0, #0
 8025e44:	bd38      	pop	{r3, r4, r5, pc}
 8025e46:	bf00      	nop
 8025e48:	08029284 	.word	0x08029284
 8025e4c:	080292a4 	.word	0x080292a4
 8025e50:	08029264 	.word	0x08029264

08025e54 <std>:
 8025e54:	2300      	movs	r3, #0
 8025e56:	b510      	push	{r4, lr}
 8025e58:	4604      	mov	r4, r0
 8025e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8025e5e:	6083      	str	r3, [r0, #8]
 8025e60:	8181      	strh	r1, [r0, #12]
 8025e62:	6643      	str	r3, [r0, #100]	; 0x64
 8025e64:	81c2      	strh	r2, [r0, #14]
 8025e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025e6a:	6183      	str	r3, [r0, #24]
 8025e6c:	4619      	mov	r1, r3
 8025e6e:	2208      	movs	r2, #8
 8025e70:	305c      	adds	r0, #92	; 0x5c
 8025e72:	f7ff fa46 	bl	8025302 <memset>
 8025e76:	4b05      	ldr	r3, [pc, #20]	; (8025e8c <std+0x38>)
 8025e78:	6263      	str	r3, [r4, #36]	; 0x24
 8025e7a:	4b05      	ldr	r3, [pc, #20]	; (8025e90 <std+0x3c>)
 8025e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8025e7e:	4b05      	ldr	r3, [pc, #20]	; (8025e94 <std+0x40>)
 8025e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025e82:	4b05      	ldr	r3, [pc, #20]	; (8025e98 <std+0x44>)
 8025e84:	6224      	str	r4, [r4, #32]
 8025e86:	6323      	str	r3, [r4, #48]	; 0x30
 8025e88:	bd10      	pop	{r4, pc}
 8025e8a:	bf00      	nop
 8025e8c:	080260b5 	.word	0x080260b5
 8025e90:	080260d7 	.word	0x080260d7
 8025e94:	0802610f 	.word	0x0802610f
 8025e98:	08026133 	.word	0x08026133

08025e9c <_cleanup_r>:
 8025e9c:	4901      	ldr	r1, [pc, #4]	; (8025ea4 <_cleanup_r+0x8>)
 8025e9e:	f000 b885 	b.w	8025fac <_fwalk_reent>
 8025ea2:	bf00      	nop
 8025ea4:	08025e01 	.word	0x08025e01

08025ea8 <__sfmoreglue>:
 8025ea8:	b570      	push	{r4, r5, r6, lr}
 8025eaa:	1e4a      	subs	r2, r1, #1
 8025eac:	2568      	movs	r5, #104	; 0x68
 8025eae:	4355      	muls	r5, r2
 8025eb0:	460e      	mov	r6, r1
 8025eb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025eb6:	f7ff fa7b 	bl	80253b0 <_malloc_r>
 8025eba:	4604      	mov	r4, r0
 8025ebc:	b140      	cbz	r0, 8025ed0 <__sfmoreglue+0x28>
 8025ebe:	2100      	movs	r1, #0
 8025ec0:	e9c0 1600 	strd	r1, r6, [r0]
 8025ec4:	300c      	adds	r0, #12
 8025ec6:	60a0      	str	r0, [r4, #8]
 8025ec8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025ecc:	f7ff fa19 	bl	8025302 <memset>
 8025ed0:	4620      	mov	r0, r4
 8025ed2:	bd70      	pop	{r4, r5, r6, pc}

08025ed4 <__sinit>:
 8025ed4:	6983      	ldr	r3, [r0, #24]
 8025ed6:	b510      	push	{r4, lr}
 8025ed8:	4604      	mov	r4, r0
 8025eda:	bb33      	cbnz	r3, 8025f2a <__sinit+0x56>
 8025edc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8025ee0:	6503      	str	r3, [r0, #80]	; 0x50
 8025ee2:	4b12      	ldr	r3, [pc, #72]	; (8025f2c <__sinit+0x58>)
 8025ee4:	4a12      	ldr	r2, [pc, #72]	; (8025f30 <__sinit+0x5c>)
 8025ee6:	681b      	ldr	r3, [r3, #0]
 8025ee8:	6282      	str	r2, [r0, #40]	; 0x28
 8025eea:	4298      	cmp	r0, r3
 8025eec:	bf04      	itt	eq
 8025eee:	2301      	moveq	r3, #1
 8025ef0:	6183      	streq	r3, [r0, #24]
 8025ef2:	f000 f81f 	bl	8025f34 <__sfp>
 8025ef6:	6060      	str	r0, [r4, #4]
 8025ef8:	4620      	mov	r0, r4
 8025efa:	f000 f81b 	bl	8025f34 <__sfp>
 8025efe:	60a0      	str	r0, [r4, #8]
 8025f00:	4620      	mov	r0, r4
 8025f02:	f000 f817 	bl	8025f34 <__sfp>
 8025f06:	2200      	movs	r2, #0
 8025f08:	60e0      	str	r0, [r4, #12]
 8025f0a:	2104      	movs	r1, #4
 8025f0c:	6860      	ldr	r0, [r4, #4]
 8025f0e:	f7ff ffa1 	bl	8025e54 <std>
 8025f12:	2201      	movs	r2, #1
 8025f14:	2109      	movs	r1, #9
 8025f16:	68a0      	ldr	r0, [r4, #8]
 8025f18:	f7ff ff9c 	bl	8025e54 <std>
 8025f1c:	2202      	movs	r2, #2
 8025f1e:	2112      	movs	r1, #18
 8025f20:	68e0      	ldr	r0, [r4, #12]
 8025f22:	f7ff ff97 	bl	8025e54 <std>
 8025f26:	2301      	movs	r3, #1
 8025f28:	61a3      	str	r3, [r4, #24]
 8025f2a:	bd10      	pop	{r4, pc}
 8025f2c:	0802922c 	.word	0x0802922c
 8025f30:	08025e9d 	.word	0x08025e9d

08025f34 <__sfp>:
 8025f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f36:	4b1b      	ldr	r3, [pc, #108]	; (8025fa4 <__sfp+0x70>)
 8025f38:	681e      	ldr	r6, [r3, #0]
 8025f3a:	69b3      	ldr	r3, [r6, #24]
 8025f3c:	4607      	mov	r7, r0
 8025f3e:	b913      	cbnz	r3, 8025f46 <__sfp+0x12>
 8025f40:	4630      	mov	r0, r6
 8025f42:	f7ff ffc7 	bl	8025ed4 <__sinit>
 8025f46:	3648      	adds	r6, #72	; 0x48
 8025f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025f4c:	3b01      	subs	r3, #1
 8025f4e:	d503      	bpl.n	8025f58 <__sfp+0x24>
 8025f50:	6833      	ldr	r3, [r6, #0]
 8025f52:	b133      	cbz	r3, 8025f62 <__sfp+0x2e>
 8025f54:	6836      	ldr	r6, [r6, #0]
 8025f56:	e7f7      	b.n	8025f48 <__sfp+0x14>
 8025f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025f5c:	b16d      	cbz	r5, 8025f7a <__sfp+0x46>
 8025f5e:	3468      	adds	r4, #104	; 0x68
 8025f60:	e7f4      	b.n	8025f4c <__sfp+0x18>
 8025f62:	2104      	movs	r1, #4
 8025f64:	4638      	mov	r0, r7
 8025f66:	f7ff ff9f 	bl	8025ea8 <__sfmoreglue>
 8025f6a:	6030      	str	r0, [r6, #0]
 8025f6c:	2800      	cmp	r0, #0
 8025f6e:	d1f1      	bne.n	8025f54 <__sfp+0x20>
 8025f70:	230c      	movs	r3, #12
 8025f72:	603b      	str	r3, [r7, #0]
 8025f74:	4604      	mov	r4, r0
 8025f76:	4620      	mov	r0, r4
 8025f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025f7a:	4b0b      	ldr	r3, [pc, #44]	; (8025fa8 <__sfp+0x74>)
 8025f7c:	6665      	str	r5, [r4, #100]	; 0x64
 8025f7e:	e9c4 5500 	strd	r5, r5, [r4]
 8025f82:	60a5      	str	r5, [r4, #8]
 8025f84:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8025f88:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8025f8c:	2208      	movs	r2, #8
 8025f8e:	4629      	mov	r1, r5
 8025f90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025f94:	f7ff f9b5 	bl	8025302 <memset>
 8025f98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025f9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025fa0:	e7e9      	b.n	8025f76 <__sfp+0x42>
 8025fa2:	bf00      	nop
 8025fa4:	0802922c 	.word	0x0802922c
 8025fa8:	ffff0001 	.word	0xffff0001

08025fac <_fwalk_reent>:
 8025fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025fb0:	4680      	mov	r8, r0
 8025fb2:	4689      	mov	r9, r1
 8025fb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025fb8:	2600      	movs	r6, #0
 8025fba:	b914      	cbnz	r4, 8025fc2 <_fwalk_reent+0x16>
 8025fbc:	4630      	mov	r0, r6
 8025fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025fc2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8025fc6:	3f01      	subs	r7, #1
 8025fc8:	d501      	bpl.n	8025fce <_fwalk_reent+0x22>
 8025fca:	6824      	ldr	r4, [r4, #0]
 8025fcc:	e7f5      	b.n	8025fba <_fwalk_reent+0xe>
 8025fce:	89ab      	ldrh	r3, [r5, #12]
 8025fd0:	2b01      	cmp	r3, #1
 8025fd2:	d907      	bls.n	8025fe4 <_fwalk_reent+0x38>
 8025fd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025fd8:	3301      	adds	r3, #1
 8025fda:	d003      	beq.n	8025fe4 <_fwalk_reent+0x38>
 8025fdc:	4629      	mov	r1, r5
 8025fde:	4640      	mov	r0, r8
 8025fe0:	47c8      	blx	r9
 8025fe2:	4306      	orrs	r6, r0
 8025fe4:	3568      	adds	r5, #104	; 0x68
 8025fe6:	e7ee      	b.n	8025fc6 <_fwalk_reent+0x1a>

08025fe8 <__swhatbuf_r>:
 8025fe8:	b570      	push	{r4, r5, r6, lr}
 8025fea:	460e      	mov	r6, r1
 8025fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025ff0:	2900      	cmp	r1, #0
 8025ff2:	b096      	sub	sp, #88	; 0x58
 8025ff4:	4614      	mov	r4, r2
 8025ff6:	461d      	mov	r5, r3
 8025ff8:	da07      	bge.n	802600a <__swhatbuf_r+0x22>
 8025ffa:	2300      	movs	r3, #0
 8025ffc:	602b      	str	r3, [r5, #0]
 8025ffe:	89b3      	ldrh	r3, [r6, #12]
 8026000:	061a      	lsls	r2, r3, #24
 8026002:	d410      	bmi.n	8026026 <__swhatbuf_r+0x3e>
 8026004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026008:	e00e      	b.n	8026028 <__swhatbuf_r+0x40>
 802600a:	466a      	mov	r2, sp
 802600c:	f000 f8b8 	bl	8026180 <_fstat_r>
 8026010:	2800      	cmp	r0, #0
 8026012:	dbf2      	blt.n	8025ffa <__swhatbuf_r+0x12>
 8026014:	9a01      	ldr	r2, [sp, #4]
 8026016:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802601a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802601e:	425a      	negs	r2, r3
 8026020:	415a      	adcs	r2, r3
 8026022:	602a      	str	r2, [r5, #0]
 8026024:	e7ee      	b.n	8026004 <__swhatbuf_r+0x1c>
 8026026:	2340      	movs	r3, #64	; 0x40
 8026028:	2000      	movs	r0, #0
 802602a:	6023      	str	r3, [r4, #0]
 802602c:	b016      	add	sp, #88	; 0x58
 802602e:	bd70      	pop	{r4, r5, r6, pc}

08026030 <__smakebuf_r>:
 8026030:	898b      	ldrh	r3, [r1, #12]
 8026032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026034:	079d      	lsls	r5, r3, #30
 8026036:	4606      	mov	r6, r0
 8026038:	460c      	mov	r4, r1
 802603a:	d507      	bpl.n	802604c <__smakebuf_r+0x1c>
 802603c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026040:	6023      	str	r3, [r4, #0]
 8026042:	6123      	str	r3, [r4, #16]
 8026044:	2301      	movs	r3, #1
 8026046:	6163      	str	r3, [r4, #20]
 8026048:	b002      	add	sp, #8
 802604a:	bd70      	pop	{r4, r5, r6, pc}
 802604c:	ab01      	add	r3, sp, #4
 802604e:	466a      	mov	r2, sp
 8026050:	f7ff ffca 	bl	8025fe8 <__swhatbuf_r>
 8026054:	9900      	ldr	r1, [sp, #0]
 8026056:	4605      	mov	r5, r0
 8026058:	4630      	mov	r0, r6
 802605a:	f7ff f9a9 	bl	80253b0 <_malloc_r>
 802605e:	b948      	cbnz	r0, 8026074 <__smakebuf_r+0x44>
 8026060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026064:	059a      	lsls	r2, r3, #22
 8026066:	d4ef      	bmi.n	8026048 <__smakebuf_r+0x18>
 8026068:	f023 0303 	bic.w	r3, r3, #3
 802606c:	f043 0302 	orr.w	r3, r3, #2
 8026070:	81a3      	strh	r3, [r4, #12]
 8026072:	e7e3      	b.n	802603c <__smakebuf_r+0xc>
 8026074:	4b0d      	ldr	r3, [pc, #52]	; (80260ac <__smakebuf_r+0x7c>)
 8026076:	62b3      	str	r3, [r6, #40]	; 0x28
 8026078:	89a3      	ldrh	r3, [r4, #12]
 802607a:	6020      	str	r0, [r4, #0]
 802607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026080:	81a3      	strh	r3, [r4, #12]
 8026082:	9b00      	ldr	r3, [sp, #0]
 8026084:	6163      	str	r3, [r4, #20]
 8026086:	9b01      	ldr	r3, [sp, #4]
 8026088:	6120      	str	r0, [r4, #16]
 802608a:	b15b      	cbz	r3, 80260a4 <__smakebuf_r+0x74>
 802608c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026090:	4630      	mov	r0, r6
 8026092:	f000 f887 	bl	80261a4 <_isatty_r>
 8026096:	b128      	cbz	r0, 80260a4 <__smakebuf_r+0x74>
 8026098:	89a3      	ldrh	r3, [r4, #12]
 802609a:	f023 0303 	bic.w	r3, r3, #3
 802609e:	f043 0301 	orr.w	r3, r3, #1
 80260a2:	81a3      	strh	r3, [r4, #12]
 80260a4:	89a3      	ldrh	r3, [r4, #12]
 80260a6:	431d      	orrs	r5, r3
 80260a8:	81a5      	strh	r5, [r4, #12]
 80260aa:	e7cd      	b.n	8026048 <__smakebuf_r+0x18>
 80260ac:	08025e9d 	.word	0x08025e9d

080260b0 <__malloc_lock>:
 80260b0:	4770      	bx	lr

080260b2 <__malloc_unlock>:
 80260b2:	4770      	bx	lr

080260b4 <__sread>:
 80260b4:	b510      	push	{r4, lr}
 80260b6:	460c      	mov	r4, r1
 80260b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80260bc:	f000 f894 	bl	80261e8 <_read_r>
 80260c0:	2800      	cmp	r0, #0
 80260c2:	bfab      	itete	ge
 80260c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80260c6:	89a3      	ldrhlt	r3, [r4, #12]
 80260c8:	181b      	addge	r3, r3, r0
 80260ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80260ce:	bfac      	ite	ge
 80260d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80260d2:	81a3      	strhlt	r3, [r4, #12]
 80260d4:	bd10      	pop	{r4, pc}

080260d6 <__swrite>:
 80260d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80260da:	461f      	mov	r7, r3
 80260dc:	898b      	ldrh	r3, [r1, #12]
 80260de:	05db      	lsls	r3, r3, #23
 80260e0:	4605      	mov	r5, r0
 80260e2:	460c      	mov	r4, r1
 80260e4:	4616      	mov	r6, r2
 80260e6:	d505      	bpl.n	80260f4 <__swrite+0x1e>
 80260e8:	2302      	movs	r3, #2
 80260ea:	2200      	movs	r2, #0
 80260ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80260f0:	f000 f868 	bl	80261c4 <_lseek_r>
 80260f4:	89a3      	ldrh	r3, [r4, #12]
 80260f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80260fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80260fe:	81a3      	strh	r3, [r4, #12]
 8026100:	4632      	mov	r2, r6
 8026102:	463b      	mov	r3, r7
 8026104:	4628      	mov	r0, r5
 8026106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802610a:	f000 b817 	b.w	802613c <_write_r>

0802610e <__sseek>:
 802610e:	b510      	push	{r4, lr}
 8026110:	460c      	mov	r4, r1
 8026112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026116:	f000 f855 	bl	80261c4 <_lseek_r>
 802611a:	1c43      	adds	r3, r0, #1
 802611c:	89a3      	ldrh	r3, [r4, #12]
 802611e:	bf15      	itete	ne
 8026120:	6560      	strne	r0, [r4, #84]	; 0x54
 8026122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802612a:	81a3      	strheq	r3, [r4, #12]
 802612c:	bf18      	it	ne
 802612e:	81a3      	strhne	r3, [r4, #12]
 8026130:	bd10      	pop	{r4, pc}

08026132 <__sclose>:
 8026132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026136:	f000 b813 	b.w	8026160 <_close_r>
	...

0802613c <_write_r>:
 802613c:	b538      	push	{r3, r4, r5, lr}
 802613e:	4c07      	ldr	r4, [pc, #28]	; (802615c <_write_r+0x20>)
 8026140:	4605      	mov	r5, r0
 8026142:	4608      	mov	r0, r1
 8026144:	4611      	mov	r1, r2
 8026146:	2200      	movs	r2, #0
 8026148:	6022      	str	r2, [r4, #0]
 802614a:	461a      	mov	r2, r3
 802614c:	f7f6 fd77 	bl	801cc3e <_write>
 8026150:	1c43      	adds	r3, r0, #1
 8026152:	d102      	bne.n	802615a <_write_r+0x1e>
 8026154:	6823      	ldr	r3, [r4, #0]
 8026156:	b103      	cbz	r3, 802615a <_write_r+0x1e>
 8026158:	602b      	str	r3, [r5, #0]
 802615a:	bd38      	pop	{r3, r4, r5, pc}
 802615c:	2000c948 	.word	0x2000c948

08026160 <_close_r>:
 8026160:	b538      	push	{r3, r4, r5, lr}
 8026162:	4c06      	ldr	r4, [pc, #24]	; (802617c <_close_r+0x1c>)
 8026164:	2300      	movs	r3, #0
 8026166:	4605      	mov	r5, r0
 8026168:	4608      	mov	r0, r1
 802616a:	6023      	str	r3, [r4, #0]
 802616c:	f7f6 fd83 	bl	801cc76 <_close>
 8026170:	1c43      	adds	r3, r0, #1
 8026172:	d102      	bne.n	802617a <_close_r+0x1a>
 8026174:	6823      	ldr	r3, [r4, #0]
 8026176:	b103      	cbz	r3, 802617a <_close_r+0x1a>
 8026178:	602b      	str	r3, [r5, #0]
 802617a:	bd38      	pop	{r3, r4, r5, pc}
 802617c:	2000c948 	.word	0x2000c948

08026180 <_fstat_r>:
 8026180:	b538      	push	{r3, r4, r5, lr}
 8026182:	4c07      	ldr	r4, [pc, #28]	; (80261a0 <_fstat_r+0x20>)
 8026184:	2300      	movs	r3, #0
 8026186:	4605      	mov	r5, r0
 8026188:	4608      	mov	r0, r1
 802618a:	4611      	mov	r1, r2
 802618c:	6023      	str	r3, [r4, #0]
 802618e:	f7f6 fd7e 	bl	801cc8e <_fstat>
 8026192:	1c43      	adds	r3, r0, #1
 8026194:	d102      	bne.n	802619c <_fstat_r+0x1c>
 8026196:	6823      	ldr	r3, [r4, #0]
 8026198:	b103      	cbz	r3, 802619c <_fstat_r+0x1c>
 802619a:	602b      	str	r3, [r5, #0]
 802619c:	bd38      	pop	{r3, r4, r5, pc}
 802619e:	bf00      	nop
 80261a0:	2000c948 	.word	0x2000c948

080261a4 <_isatty_r>:
 80261a4:	b538      	push	{r3, r4, r5, lr}
 80261a6:	4c06      	ldr	r4, [pc, #24]	; (80261c0 <_isatty_r+0x1c>)
 80261a8:	2300      	movs	r3, #0
 80261aa:	4605      	mov	r5, r0
 80261ac:	4608      	mov	r0, r1
 80261ae:	6023      	str	r3, [r4, #0]
 80261b0:	f7f6 fd7d 	bl	801ccae <_isatty>
 80261b4:	1c43      	adds	r3, r0, #1
 80261b6:	d102      	bne.n	80261be <_isatty_r+0x1a>
 80261b8:	6823      	ldr	r3, [r4, #0]
 80261ba:	b103      	cbz	r3, 80261be <_isatty_r+0x1a>
 80261bc:	602b      	str	r3, [r5, #0]
 80261be:	bd38      	pop	{r3, r4, r5, pc}
 80261c0:	2000c948 	.word	0x2000c948

080261c4 <_lseek_r>:
 80261c4:	b538      	push	{r3, r4, r5, lr}
 80261c6:	4c07      	ldr	r4, [pc, #28]	; (80261e4 <_lseek_r+0x20>)
 80261c8:	4605      	mov	r5, r0
 80261ca:	4608      	mov	r0, r1
 80261cc:	4611      	mov	r1, r2
 80261ce:	2200      	movs	r2, #0
 80261d0:	6022      	str	r2, [r4, #0]
 80261d2:	461a      	mov	r2, r3
 80261d4:	f7f6 fd76 	bl	801ccc4 <_lseek>
 80261d8:	1c43      	adds	r3, r0, #1
 80261da:	d102      	bne.n	80261e2 <_lseek_r+0x1e>
 80261dc:	6823      	ldr	r3, [r4, #0]
 80261de:	b103      	cbz	r3, 80261e2 <_lseek_r+0x1e>
 80261e0:	602b      	str	r3, [r5, #0]
 80261e2:	bd38      	pop	{r3, r4, r5, pc}
 80261e4:	2000c948 	.word	0x2000c948

080261e8 <_read_r>:
 80261e8:	b538      	push	{r3, r4, r5, lr}
 80261ea:	4c07      	ldr	r4, [pc, #28]	; (8026208 <_read_r+0x20>)
 80261ec:	4605      	mov	r5, r0
 80261ee:	4608      	mov	r0, r1
 80261f0:	4611      	mov	r1, r2
 80261f2:	2200      	movs	r2, #0
 80261f4:	6022      	str	r2, [r4, #0]
 80261f6:	461a      	mov	r2, r3
 80261f8:	f7f6 fd04 	bl	801cc04 <_read>
 80261fc:	1c43      	adds	r3, r0, #1
 80261fe:	d102      	bne.n	8026206 <_read_r+0x1e>
 8026200:	6823      	ldr	r3, [r4, #0]
 8026202:	b103      	cbz	r3, 8026206 <_read_r+0x1e>
 8026204:	602b      	str	r3, [r5, #0]
 8026206:	bd38      	pop	{r3, r4, r5, pc}
 8026208:	2000c948 	.word	0x2000c948

0802620c <_init>:
 802620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802620e:	bf00      	nop
 8026210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026212:	bc08      	pop	{r3}
 8026214:	469e      	mov	lr, r3
 8026216:	4770      	bx	lr

08026218 <_fini>:
 8026218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802621a:	bf00      	nop
 802621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802621e:	bc08      	pop	{r3}
 8026220:	469e      	mov	lr, r3
 8026222:	4770      	bx	lr
