/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN3_VIEW_BASE_HPP
#define SCREEN3_VIEW_BASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}

    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void playPrevSong()
    {
        // Override and implement this function in Screen3View
    }

    virtual void playNextSong()
    {
        // Override and implement this function in Screen3View
    }

    virtual void playPause()
    {
        // Override and implement this function in Screen3View
    }

    virtual void moveSongPosition(int value)
    {
        // Override and implement this function in Screen3View
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::TiledImage backgroundImage;
    touchgfx::ScalableImage coverImage;
    touchgfx::TextAreaWithOneWildcard songName;
    touchgfx::Slider slider;
    touchgfx::CircleProgress songProgress;
    touchgfx::PainterRGB565Bitmap songProgressPainter;
    touchgfx::ButtonWithIcon buttonPrev;
    touchgfx::ButtonWithIcon buttonPlay;
    touchgfx::ButtonWithIcon buttonNext;

    /*
     * Wildcard Buffers
     */
    static const uint16_t SONGNAME_SIZE = 30;
    touchgfx::Unicode::UnicodeChar songNameBuffer[SONGNAME_SIZE];

private:

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen3ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Screen3ViewBase, const touchgfx::Slider&, int> sliderValueConfirmedCallback;

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // SCREEN3_VIEW_BASE_HPP
